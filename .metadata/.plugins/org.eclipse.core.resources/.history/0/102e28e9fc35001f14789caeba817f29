#include "AT_WIFI.h"

UART_Response ESP_SendCommand(UART_HandleTypeDef *huart, uint8_t *command, uint32_t timeout, uint8_t max_retries) {
    UART_Response result;
    memset(result.raw_data, 0, sizeof(result.raw_data));
    result.is_ok = 0;
    result.retries = 0;
    result.length = 0;

    for (result.retries = 0; result.retries < max_retries; ++result.retries) {
        // Transmit the command
        HAL_UART_Transmit(huart, command, strlen((char*)command), 100);

        // Start time for timeout
        uint32_t start_time = HAL_GetTick();

        // Receive the response
        uint8_t temp[11]; // Buffer to hold temporary data
        uint16_t index = 0;

        while ((HAL_GetTick() - start_time) < timeout) {
            HAL_StatusTypeDef status = HAL_UART_Receive(huart, temp, 10, 10);
			strncat((char*)result.raw_data, (char*)temp, 10);
			index += 10;
			result.length = index;

			// Check if "\r\nOK\r\n" is in the received data
			if (strstr((char*)result.raw_data, "\r\nOK\r\n") != NULL) {
				result.is_ok = 1;
				return result;
			}

        }

    }
//
//    // Clear the RX buffer
//    clearRxBuffer(&result);

    return result;
}

void clearRxBuffer(UART_Response *response) {
    memset(response->raw_data, 0, sizeof(response->raw_data));
    response->is_ok = 0;
    response->retries = 0;
    response->length = 0;
}

UART_Response ESP_SendData(UART_HandleTypeDef *huart, uint32_t timeout, uint8_t max_retries, int num, ...) {
    UART_Response result;
    memset(result.raw_data, 0, sizeof(result.raw_data));
    result.is_ok = 0;
    result.retries = 0;
    result.length = 0;

    uint8_t data[256] = "DATA:";
    uint16_t total_length = 0;
    va_list args;
    va_start(args, num);

    // Construct the DATA string
    for (int i = 0; i < num; ++i) {
        char *var = va_arg(args, char *);
        strcat((char*)data, "\"");
        strcat((char*)data, var);
        strcat((char*)data, "\"");
        if (i < num - 1) {
            strcat((char*)data, ",");
        }
    }
    va_end(args);
    strcat((char*)data, "\r\n");

    // Calculate the total length
    total_length = strlen((char*)data);
    uint8_t cmd[50];
    sprintf((char*)cmd, "AT+CIPSEND=0,%d\r\n", total_length);

    // Send the command
    result = ESP_SendCommand(huart, cmd, timeout, max_retries);

    // Check if the initial command was successful
    if (result.is_ok) {
        // Send the actual data
        result = ESP_SendCommand(huart, data, timeout, max_retries);
    }

    return result;
}
