#include "AT_WIFI.h"

// Default UART handle
UART_HandleTypeDef *AT_huart;
extern UART_HandleTypeDef huart3;


void ESP_SendCommand(const char *command) {
    // Transmit the command using the default UART
    HAL_UART_Transmit(AT_huart, (uint8_t*)command, strlen(command), 1000);
}

void ESP_SendTCP(uint8_t con_num, char *data) {
    // Calculate the total length
    uint8_t cmd[50];
    sprintf((char*)cmd, "AT+CIPSEND=%d,%d\r\n", con_num, strlen(data));
    HAL_UART_Transmit(AT_huart, cmd, strlen((char*)cmd), 100);
    HAL_Delay(1); // Adjust this delay as needed
    HAL_UART_Transmit(AT_huart, (uint8_t *)data, strlen(data), 1000);
}

void ESP_UART_Init(UART_HandleTypeDef *huart){
    AT_huart = huart;
}

// Function definitions for AT commands with modifiable parameters

void ESP_Reset() {
    ESP_SendCommand("AT+RST\r\n");
}

void ESP_SetMode_AP() {
    ESP_SendCommand("AT+CWMODE=2\r\n");
}

void ESP_SetIP(const char *ip) {
    char cmd[50];
    sprintf(cmd, "AT+CIPAP=\"%s\"\r\n", ip);
    ESP_SendCommand(cmd);
}

void ESP_SetMode_AP_STD() {
    ESP_SendCommand("AT+CWMODE=3\r\n");
}

void ESP_SetSoftAP(const char *ssid, const char *password) {
    char cmd[100];
    sprintf(cmd, "AT+CWSAP=\"%s\",\"%s\",1,3\r\n", ssid, password);
    ESP_SendCommand(cmd);
}

void ESP_ConnectWiFi(const char *ssid, const char *password) {
    char cmd[100];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
    ESP_SendCommand(cmd);
}

WiFiInfoTypeDef ESP_CheckWiFi(void) {
	WiFiInfoTypeDef info={0};
    char response[100]={0};
    char *token;
    huart3.RxXferCount = 0;
    ESP_SendCommand("AT+CWJAP?\r\n");
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);

//    // Parse the response and populate the WiFiInfo struct

//    // I don know why it can't be     token = strtok(response, "+CWJAP:,\"");
//	  // sscanf scanf ALSO can't used  so strange

    token = strtok(response, ":,\"");

    token = strtok(NULL, "\",\""); // Get SSID
    strcpy(info.ssid, token);

    token = strtok(NULL, "\","); // Get MAC address
    strcpy(info.bssid, token);

    token = strtok(NULL, ","); // Get security mode
    info.channel = atoi(token);

    token = strtok(NULL, ","); // Get RSSI
    info.rssi = atoi(token);

    token = strtok(NULL, "\r\n"); // Get connected status
    info.encryption = atoi(token);

    return info;
}

IPInfoTypeDef ESP_GetIPInfo(void) {
	IPInfoTypeDef ipInfo = {0};
    char response[200] = {0};
    char *token;

    ESP_SendCommand("AT+CIFSR\r\n");
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);

    // Parse AP IP
    token = strstr(response, "+CIFSR:APIP,\"");
    if (token) {
        token += strlen("+CIFSR:APIP,\"");
        strncpy(ipInfo.AP_IP, token, strcspn(token, "\""));
    }

    // Parse AP MAC
    token = strstr(response, "+CIFSR:APMAC,\"");
    if (token) {
        token += strlen("+CIFSR:APMAC,\"");
        strncpy(ipInfo.AP_MAC, token, strcspn(token, "\""));
    }

    // Parse STA IP
    token = strstr(response, "+CIFSR:STAIP,\"");
    if (token) {
        token += strlen("+CIFSR:STAIP,\"");
        strncpy(ipInfo.STA_IP, token, strcspn(token, "\""));
    }

    // Parse STA MAC
    token = strstr(response, "+CIFSR:STAMAC,\"");
    if (token) {
        token += strlen("+CIFSR:STAMAC,\"");
        strncpy(ipInfo.STA_MAC, token, strcspn(token, "\""));
    }
    return ipInfo;
}

void ESP_EnableMUX() {
    ESP_SendCommand("AT+CIPMUX=1\r\n");
}

void ESP_StartServer(uint16_t port) {
    char cmd[50];
    sprintf(cmd, "AT+CIPSERVER=1,%d\r\n", port);
    ESP_SendCommand(cmd);
}

void ESP_StopServer() {
    ESP_SendCommand("AT+CIPSERVER=0\r\n");
}

void ESP_ListAPs() {
    ESP_SendCommand("AT+CWLAP\r\n");
}

void ESP_RestoreDefaults() {
    ESP_SendCommand("AT+RESTORE\r\n");
}

void ESP_INIT_BASE(){
	ESP_EnableMUX();
	ESP_StartServer(9999);
}

void ESP_INIT_FULL(){
	ESP_Reset();
	HAL_Delay(1000);
	ESP_SetMode_AP();
	HAL_Delay(1000);
	ESP_SetIP("192.168.15.1")
	HAL_Delay(1000);
	ESP_SetMode_AP_STD();
	HAL_Delay(1000);
	ESP_SetSoftAP("HarmonyNextIOT","12345678");
	HAL_Delay(2000);
	ESP_ConnectWiFi("8B109_IOT","DGUT8B109");
	HAL_Delay(10000);

	ESP_EnableMUX();
	ESP_StartServer(9999);
}


