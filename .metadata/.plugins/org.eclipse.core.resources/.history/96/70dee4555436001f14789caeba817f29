#include "AT_WIFI.h"

// Default UART handle
UART_HandleTypeDef *AT_huart;

// Initialize the static AT commands structure
AT_Commands atCommands = {
    .reset = "AT+RST\r\n",
    .setModeStation = "AT+CWMODE=3\r\n",
    .checkWiFi = "AT+CWJAP?\r\n",
    .getIP = "AT+CIFSR\r\n",
    .enableMUX = "AT+CIPMUX=1\r\n",
    .stopServer = "AT+CIPSERVER=0\r\n",
    .listAPs = "AT+CWLAP\r\n",
    .restoreDefaults = "AT+RESTORE\r\n"
};

void ESP_SendCommand(const char *command) {
    // Transmit the command using the default UART
    HAL_UART_Transmit(AT_huart, (uint8_t*)command, strlen(command), 1000);
}

void ESP_SendTCP(uint8_t con_num, char *data) {
    // Calculate the total length
    uint8_t cmd[50];
    sprintf((char*)cmd, "AT+CIPSEND=%d,%d\r\n", con_num, strlen(data));
    HAL_UART_Transmit(AT_huart, cmd, strlen((char*)cmd), 100);
    HAL_Delay(1); // Adjust this delay as needed
    HAL_UART_Transmit(AT_huart, (uint8_t *)data, strlen(data), 1000);
}

void ESP_UART_Init(UART_HandleTypeDef *huart){
    AT_huart = huart;
}

// Function definitions for AT commands with modifiable parameters

void ESP_SetIP(const char *ip) {
    char cmd[50];
    sprintf(cmd, "AT+CIPAP=\"%s\"\r\n", ip);
    ESP_SendCommand(cmd);
}

void ESP_SetModeAP() {
    ESP_SendCommand("AT+CWMODE=2\r\n");
}

void ESP_SetSoftAP(const char *ssid, const char *password) {
    char cmd[100];
    sprintf(cmd, "AT+CWSAP=\"%s\",\"%s\",1,3\r\n", ssid, password);
    ESP_SendCommand(cmd);
}

void ESP_ConnectWiFi(const char *ssid, const char *password) {
    char cmd[100];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
    ESP_SendCommand(cmd);
}

void ESP_StartServer(uint16_t port) {
    char cmd[50];
    sprintf(cmd, "AT+CIPSERVER=1,%d\r\n", port);
    ESP_SendCommand(cmd);
}
