#include "AT_WIFI.h"

// Default UART handle
UART_HandleTypeDef *AT_huart;
extern UART_HandleTypeDef huart3;


void ESP_SendCommand(const char *command) {
    // Transmit the command using the default UART
    HAL_UART_Transmit(AT_huart, (uint8_t*)command, strlen(command), 1000);
}

void ESP_SendTCP(uint8_t con_num, char *data) {
    // Calculate the total length
    uint8_t cmd[50];
    sprintf((char*)cmd, "AT+CIPSEND=%d,%d\r\n", con_num, strlen(data));
    HAL_UART_Transmit(AT_huart, cmd, strlen((char*)cmd), 100);
    HAL_Delay(1); // Adjust this delay as needed
    HAL_UART_Transmit(AT_huart, (uint8_t *)data, strlen(data), 1000);
}

void ESP_UART_Init(UART_HandleTypeDef *huart){
    AT_huart = huart;
}

// Function definitions for AT commands with modifiable parameters

void ESP_Reset() {
    ESP_SendCommand("AT+RST\r\n");
}

void ESP_SetModeAP() {
    ESP_SendCommand("AT+CWMODE=2\r\n");
}

void ESP_SetIP(const char *ip) {
    char cmd[50];
    sprintf(cmd, "AT+CIPAP=\"%s\"\r\n", ip);
    ESP_SendCommand(cmd);
}

void ESP_SetModeStation() {
    ESP_SendCommand("AT+CWMODE=3\r\n");
}

void ESP_SetSoftAP(const char *ssid, const char *password) {
    char cmd[100];
    sprintf(cmd, "AT+CWSAP=\"%s\",\"%s\",1,3\r\n", ssid, password);
    ESP_SendCommand(cmd);
}

void ESP_ConnectWiFi(const char *ssid, const char *password) {
    char cmd[100];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
    ESP_SendCommand(cmd);
}

WiFiInfoTypeDef ESP_CheckWiFi(void) {
	WiFiInfoTypeDef info={0};
    char response[100]={0};
    char *token;

    huart3.RxXferCount = 0;

    ESP_SendCommand("AT+CWJAP?\r\n");
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);

//    // Parse the response and populate the WiFiInfo struct
//    token = strtok(response, ":,\"");
//    token = strtok(NULL, ":,\""); // Get SSID
//    strcpy(info.ssid, token);
//    token = strtok(NULL, ":,\""); // Get MAC address
//    strcpy(info.bssid, token);
//    token = strtok(NULL, ":,\""); // Get security mode
//    info.channel = atoi(token);
//    token = strtok(NULL, ":,\""); // Get RSSI
//    info.rssi = atoi(token);
//    token = strtok(NULL, ",\"\r\n"); // Get connected status
//    info.encryption = atoi(token);
//
//    return info;

    // Parse the response
    scanf(response,"+CWJAP:\"%31[^\"]\",\"%17[^\"]\",%d,%d,%d",
           info.ssid, info.bssid, &info.channel, &info.rssi, &info.encryption);

    // Example response: +CWJAP:"8B109_IOT","8c:53:c3:81:0f:d6",1,-58,3
    // Parse the response manually

//    token = strtok(response, "\"");
//    if (token != NULL) {
//        strcpy(info.ssid, token);
//
//        token = strtok(NULL, "\"");
//        if (token != NULL) {
//            token = strtok(NULL, ",");
//            if (token != NULL) {
//                strcpy(info.bssid, token);
//
//                token = strtok(NULL, ",");
//                if (token != NULL) {
//                    info.channel = atoi(token);
//
//                    token = strtok(NULL, ",");
//                    if (token != NULL) {
//                        info.rssi = atoi(token);
//
//                        token = strtok(NULL, ",");
//                        if (token != NULL) {
//                            info.encryption = atoi(token);
//                        }
//                    }
//                }
//            }
//        }
//    }


    return info;
}

void ESP_GetIP() {
    ESP_SendCommand("AT+CIFSR\r\n");
}

void ESP_EnableMUX() {
    ESP_SendCommand("AT+CIPMUX=1\r\n");
}

void ESP_StartServer(uint16_t port) {
    char cmd[50];
    sprintf(cmd, "AT+CIPSERVER=1,%d\r\n", port);
    ESP_SendCommand(cmd);
}

void ESP_StopServer() {
    ESP_SendCommand("AT+CIPSERVER=0\r\n");
}

void ESP_ListAPs() {
    ESP_SendCommand("AT+CWLAP\r\n");
}

void ESP_RestoreDefaults() {
    ESP_SendCommand("AT+RESTORE\r\n");
}
