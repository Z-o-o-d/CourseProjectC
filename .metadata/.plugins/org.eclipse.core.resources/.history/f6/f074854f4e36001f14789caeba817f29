#include "AT_WIFI.h"

UART_Response ESP_SendCommand(UART_HandleTypeDef *huart, uint8_t *command, uint32_t timeout, uint8_t max_retries) {
    UART_Response result;
    memset(result.raw_data, 0, sizeof(result.raw_data));
    result.is_ok = 0;
    result.retries = 0;
    result.length = 0;

    for (result.retries = 0; result.retries < max_retries; ++result.retries) {
        // Transmit the command
        HAL_UART_Transmit(huart, command, strlen((char*)command), 100);

        // Start time for timeout
        uint32_t start_time = HAL_GetTick();

        // Receive the response
        uint8_t temp[11]; // Buffer to hold temporary data
        uint16_t index = 0;

        while ((HAL_GetTick() - start_time) < timeout) {
            HAL_StatusTypeDef status = HAL_UART_Receive(huart, temp, 10, 10);
            if (status == HAL_OK) {
                strncat((char*)result.raw_data, (char*)temp, 10);
                index += 10;
                result.length = index;

                // Check if "\r\nOK\r\n" is in the received data
                if (strstr((char*)result.raw_data, "\r\nOK\r\n") != NULL) {
                    result.is_ok = 1;
                    return result;
                }
            }
        }
    }


    return result;
}


void ESP_SendTCP(UART_HandleTypeDef *huart, uint8_t con_num, char *data) {
    // Calculate the total length
    uint8_t cmd[50];
    sprintf((char*)cmd, "\r\nAT+CIPSEND=%d,%d\r\n",con_num, strlen(data));
    HAL_UART_Transmit(huart, cmd, strlen(cmd), 100);
    HAL_Delay(1);
	HAL_UART_Transmit(huart, data, strlen(data), 1000);
}
