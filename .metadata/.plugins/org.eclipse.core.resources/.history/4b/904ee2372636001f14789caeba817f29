#ifndef AT_WIFI_H
#define AT_WIFI_H

#include "stm32f1xx_hal.h"
#include <string.h>
#include <stdarg.h>

uint8_t ESP_CMD0[]="AT+RST\r\n";
uint8_t ESP_CMD1[]="AT+CWMODE=2\r\n";
uint8_t ESP_CMD2[]="AT+CIPAP=\"192\.168\.15\.1\"\r\n";
uint8_t ESP_CMD3[]="AT+CWMODE=3\r\n";
uint8_t ESP_CMD4[]="AT+CWSAP=\"HarmonyNextIOT\",\"12345678\",1,3\r\n";
uint8_t ESP_CMD5[]="AT+CWJAP=\"AL\",\"DGUT8B109\"\r\n";
uint8_t ESP_CMD6[]="AT+CWJAP?\r\n";
uint8_t ESP_CMD7[]="AT+CIFSR\r\n";
uint8_t ESP_CMD8[]="AT+CIPMUX=1\r\n";
uint8_t ESP_CMD9[]="AT+CIPSERVER=1,8888\r\n";



// Define the structure for UART response
typedef struct {
    uint8_t raw_data[500]; // Buffer for received raw data
    uint8_t is_ok;         // Flag indicating if "\r\nOK\r\n" was received
    uint8_t retries;       // Number of retries attempted
    uint16_t length;       // Length of the received data
} UART_Response;

// Function prototype for sending command and receiving response
UART_Response ESP_SendCommand(UART_HandleTypeDef *huart, uint8_t *command, uint32_t timeout, uint8_t max_retries);

// Function prototype for clearing the RX buffer
void clearRxBuffer(UART_Response *response);

// Function prototype for sending data with multiple variables
UART_Response ESP_SendData(UART_HandleTypeDef *huart, uint32_t timeout, uint8_t max_retries, int num, ...);

#endif // AT_WIFI_H
