
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c70  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f88  08008d80  08008d80  00009d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad08  0800ad08  0000c200  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad08  0800ad08  0000bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad10  0800ad10  0000c200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad10  0800ad10  0000bd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad14  0800ad14  0000bd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800ad18  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  20000200  0800af18  0000c200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  0800af18  0000cabc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c117  00000000  00000000  0000c229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf1  00000000  00000000  00028340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a821  00000000  00000000  0002bf31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  00036758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b0  00000000  00000000  000378c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a391  00000000  00000000  00038a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee22  00000000  00000000  00052e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096c02  00000000  00000000  00071c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010882d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044d0  00000000  00000000  00108870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0010cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d68 	.word	0x08008d68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	08008d68 	.word	0x08008d68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_d2lz>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	460d      	mov	r5, r1
 8000ef6:	f7ff fe15 	bl	8000b24 <__aeabi_dcmplt>
 8000efa:	b928      	cbnz	r0, 8000f08 <__aeabi_d2lz+0x1c>
 8000efc:	4620      	mov	r0, r4
 8000efe:	4629      	mov	r1, r5
 8000f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f04:	f000 b80a 	b.w	8000f1c <__aeabi_d2ulz>
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f0e:	f000 f805 	bl	8000f1c <__aeabi_d2ulz>
 8000f12:	4240      	negs	r0, r0
 8000f14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
 8000f1a:	bf00      	nop

08000f1c <__aeabi_d2ulz>:
 8000f1c:	b5d0      	push	{r4, r6, r7, lr}
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <__aeabi_d2ulz+0x34>)
 8000f22:	4606      	mov	r6, r0
 8000f24:	460f      	mov	r7, r1
 8000f26:	f7ff fb8b 	bl	8000640 <__aeabi_dmul>
 8000f2a:	f7ff fe61 	bl	8000bf0 <__aeabi_d2uiz>
 8000f2e:	4604      	mov	r4, r0
 8000f30:	f7ff fb0c 	bl	800054c <__aeabi_ui2d>
 8000f34:	2200      	movs	r2, #0
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <__aeabi_d2ulz+0x38>)
 8000f38:	f7ff fb82 	bl	8000640 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4630      	mov	r0, r6
 8000f42:	4639      	mov	r1, r7
 8000f44:	f7ff f9c4 	bl	80002d0 <__aeabi_dsub>
 8000f48:	f7ff fe52 	bl	8000bf0 <__aeabi_d2uiz>
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000f50:	3df00000 	.word	0x3df00000
 8000f54:	41f00000 	.word	0x41f00000

08000f58 <ESP_UART_Init>:
    HAL_Delay(1); // Adjust this delay as needed
    HAL_UART_Transmit(AT_huart, (uint8_t *)data, strlen(data), 1000);
}

void ESP_UART_Init(UART_HandleTypeDef *huart){
    AT_huart = huart;
 8000f58:	4b01      	ldr	r3, [pc, #4]	@ (8000f60 <ESP_UART_Init+0x8>)
 8000f5a:	6018      	str	r0, [r3, #0]
}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2000021c 	.word	0x2000021c

08000f64 <DHT_getData>:
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
}

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8000f68:	798b      	ldrb	r3, [r1, #6]
DHT_data DHT_getData(DHT_sensor *sensor) {
 8000f6a:	460c      	mov	r4, r1
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000f6c:	2b00      	cmp	r3, #0
DHT_data DHT_getData(DHT_sensor *sensor) {
 8000f6e:	b085      	sub	sp, #20
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000f70:	bf14      	ite	ne
 8000f72:	f44f 757a 	movne.w	r5, #1000	@ 0x3e8
 8000f76:	f44f 65fa 	moveq.w	r5, #2000	@ 0x7d0
DHT_data DHT_getData(DHT_sensor *sensor) {
 8000f7a:	4606      	mov	r6, r0
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000f7c:	f001 fa02 	bl	8002384 <HAL_GetTick>
 8000f80:	68a3      	ldr	r3, [r4, #8]
 8000f82:	1ac0      	subs	r0, r0, r3
 8000f84:	42a8      	cmp	r0, r5
 8000f86:	d208      	bcs.n	8000f9a <DHT_getData+0x36>
 8000f88:	b13b      	cbz	r3, 8000f9a <DHT_getData+0x36>
		data.hum = sensor->lastHum;
 8000f8a:	6925      	ldr	r5, [r4, #16]
		data.temp = sensor->lastTemp;
 8000f8c:	68e0      	ldr	r0, [r4, #12]
		return data;
 8000f8e:	6070      	str	r0, [r6, #4]
	sensor->lastHum = data.hum;
	sensor->lastTemp = data.temp;
	#endif

	return data;	
}
 8000f90:	4630      	mov	r0, r6
		return data;
 8000f92:	6035      	str	r5, [r6, #0]
}
 8000f94:	b005      	add	sp, #20
 8000f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8000f9a:	f001 f9f3 	bl	8002384 <HAL_GetTick>
 8000f9e:	3001      	adds	r0, #1
 8000fa0:	60a0      	str	r0, [r4, #8]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4668      	mov	r0, sp
 8000fa8:	f004 fb85 	bl	80056b6 <memset>
  lineUp();
 8000fac:	2201      	movs	r2, #1
 8000fae:	88a1      	ldrh	r1, [r4, #4]
 8000fb0:	6820      	ldr	r0, [r4, #0]
 8000fb2:	f001 ffab 	bl	8002f0c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000fb6:	88a3      	ldrh	r3, [r4, #4]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000fb8:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000fba:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000fbc:	2311      	movs	r3, #17
 8000fbe:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000fc0:	79e3      	ldrb	r3, [r4, #7]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000fc2:	6820      	ldr	r0, [r4, #0]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000fc4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000fca:	f001 fec1 	bl	8002d50 <HAL_GPIO_Init>
	lineDown();
 8000fce:	88a1      	ldrh	r1, [r4, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6820      	ldr	r0, [r4, #0]
 8000fd4:	f001 ff9a 	bl	8002f0c <HAL_GPIO_WritePin>
	Delay(18);
 8000fd8:	2012      	movs	r0, #18
 8000fda:	f001 f9d9 	bl	8002390 <HAL_Delay>
	lineUp();
 8000fde:	2201      	movs	r2, #1
 8000fe0:	88a1      	ldrh	r1, [r4, #4]
 8000fe2:	6820      	ldr	r0, [r4, #0]
 8000fe4:	f001 ff92 	bl	8002f0c <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	2300      	movs	r3, #0
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000fee:	88a3      	ldrh	r3, [r4, #4]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000ff0:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000ff2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000ff4:	79e3      	ldrb	r3, [r4, #7]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000ff6:	6820      	ldr	r0, [r4, #0]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000ff8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000ffa:	f001 fea9 	bl	8002d50 <HAL_GPIO_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffe:	b672      	cpsid	i
	while(getLine()) {
 8001000:	f242 7511 	movw	r5, #10001	@ 0x2711
 8001004:	88a1      	ldrh	r1, [r4, #4]
 8001006:	6820      	ldr	r0, [r4, #0]
 8001008:	f001 ff7a 	bl	8002f00 <HAL_GPIO_ReadPin>
 800100c:	2801      	cmp	r0, #1
 800100e:	d01d      	beq.n	800104c <DHT_getData+0xe8>
 8001010:	f242 7511 	movw	r5, #10001	@ 0x2711
	while(!getLine()) {
 8001014:	88a1      	ldrh	r1, [r4, #4]
 8001016:	6820      	ldr	r0, [r4, #0]
 8001018:	f001 ff72 	bl	8002f00 <HAL_GPIO_ReadPin>
 800101c:	2801      	cmp	r0, #1
 800101e:	d122      	bne.n	8001066 <DHT_getData+0x102>
 8001020:	f242 7511 	movw	r5, #10001	@ 0x2711
	while(getLine()) {
 8001024:	88a1      	ldrh	r1, [r4, #4]
 8001026:	6820      	ldr	r0, [r4, #0]
 8001028:	f001 ff6a 	bl	8002f00 <HAL_GPIO_ReadPin>
 800102c:	2801      	cmp	r0, #1
 800102e:	d01f      	beq.n	8001070 <DHT_getData+0x10c>
	uint8_t rawData[5] = {0,0,0,0,0};
 8001030:	466d      	mov	r5, sp
 8001032:	f04f 0905 	mov.w	r9, #5
			if(hT > lT) rawData[a] |= (1<<b);
 8001036:	f04f 0a01 	mov.w	sl, #1
	uint8_t rawData[5] = {0,0,0,0,0};
 800103a:	4b4a      	ldr	r3, [pc, #296]	@ (8001164 <DHT_getData+0x200>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	9000      	str	r0, [sp, #0]
 8001042:	f88d 3004 	strb.w	r3, [sp, #4]
		for(uint8_t b = 7; b != 255; b--) {
 8001046:	f04f 0b07 	mov.w	fp, #7
 800104a:	e037      	b.n	80010bc <DHT_getData+0x158>
		if (timeout > DHT_TIMEOUT) {
 800104c:	3d01      	subs	r5, #1
 800104e:	b2ad      	uxth	r5, r5
 8001050:	2d00      	cmp	r5, #0
 8001052:	d1d7      	bne.n	8001004 <DHT_getData+0xa0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001054:	b662      	cpsie	i
			sensor->lastHum = -128.0f;
 8001056:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 800105a:	6123      	str	r3, [r4, #16]
			sensor->lastTemp = -128.0f;
 800105c:	60e3      	str	r3, [r4, #12]
	DHT_data data = {-128.0f, -128.0f};
 800105e:	f04f 4543 	mov.w	r5, #3271557120	@ 0xc3000000
 8001062:	4628      	mov	r0, r5
 8001064:	e793      	b.n	8000f8e <DHT_getData+0x2a>
		if (timeout > DHT_TIMEOUT) {
 8001066:	3d01      	subs	r5, #1
 8001068:	b2ad      	uxth	r5, r5
 800106a:	2d00      	cmp	r5, #0
 800106c:	d1d2      	bne.n	8001014 <DHT_getData+0xb0>
 800106e:	e7f1      	b.n	8001054 <DHT_getData+0xf0>
		if (timeout > DHT_TIMEOUT) {
 8001070:	3d01      	subs	r5, #1
 8001072:	b2ad      	uxth	r5, r5
 8001074:	2d00      	cmp	r5, #0
 8001076:	d1d5      	bne.n	8001024 <DHT_getData+0xc0>
 8001078:	b662      	cpsie	i
			return data;
 800107a:	e7f0      	b.n	800105e <DHT_getData+0xfa>
			while(!getLine() && lT != 65535) lT++;
 800107c:	88a1      	ldrh	r1, [r4, #4]
 800107e:	6820      	ldr	r0, [r4, #0]
 8001080:	f001 ff3e 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001084:	2801      	cmp	r0, #1
 8001086:	d11b      	bne.n	80010c0 <DHT_getData+0x15c>
 8001088:	b2bf      	uxth	r7, r7
 800108a:	f04f 0800 	mov.w	r8, #0
			while(getLine()&& hT != 65535) hT++;
 800108e:	88a1      	ldrh	r1, [r4, #4]
 8001090:	6820      	ldr	r0, [r4, #0]
 8001092:	f001 ff35 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001096:	2801      	cmp	r0, #1
 8001098:	d119      	bne.n	80010ce <DHT_getData+0x16a>
 800109a:	f108 0801 	add.w	r8, r8, #1
 800109e:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 80010a2:	d1f4      	bne.n	800108e <DHT_getData+0x12a>
 80010a4:	f64f 78ff 	movw	r8, #65535	@ 0xffff
			if(hT > lT) rawData[a] |= (1<<b);
 80010a8:	45b8      	cmp	r8, r7
 80010aa:	bf81      	itttt	hi
 80010ac:	782b      	ldrbhi	r3, [r5, #0]
 80010ae:	fa0a f20b 	lslhi.w	r2, sl, fp
 80010b2:	4313      	orrhi	r3, r2
 80010b4:	702b      	strbhi	r3, [r5, #0]
		for(uint8_t b = 7; b != 255; b--) {
 80010b6:	f1bb 0b01 	subs.w	fp, fp, #1
 80010ba:	d30b      	bcc.n	80010d4 <DHT_getData+0x170>
 80010bc:	2700      	movs	r7, #0
 80010be:	e7dd      	b.n	800107c <DHT_getData+0x118>
			while(!getLine() && lT != 65535) lT++;
 80010c0:	3701      	adds	r7, #1
 80010c2:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 80010c6:	d1d9      	bne.n	800107c <DHT_getData+0x118>
 80010c8:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80010cc:	e7dd      	b.n	800108a <DHT_getData+0x126>
 80010ce:	fa1f f888 	uxth.w	r8, r8
 80010d2:	e7e9      	b.n	80010a8 <DHT_getData+0x144>
	for(uint8_t a = 0; a < 5; a++) {
 80010d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80010d8:	f019 09ff 	ands.w	r9, r9, #255	@ 0xff
 80010dc:	f105 0501 	add.w	r5, r5, #1
 80010e0:	d1b1      	bne.n	8001046 <DHT_getData+0xe2>
 80010e2:	b662      	cpsie	i
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80010e4:	f89d 0000 	ldrb.w	r0, [sp]
 80010e8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80010ec:	f89d 7002 	ldrb.w	r7, [sp, #2]
 80010f0:	f89d 9003 	ldrb.w	r9, [sp, #3]
 80010f4:	4403      	add	r3, r0
 80010f6:	443b      	add	r3, r7
 80010f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80010fc:	444b      	add	r3, r9
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4299      	cmp	r1, r3
 8001102:	f8bd 2000 	ldrh.w	r2, [sp]
 8001106:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800110a:	d127      	bne.n	800115c <DHT_getData+0x1f8>
		if (sensor->type == DHT22) {
 800110c:	79a3      	ldrb	r3, [r4, #6]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d11c      	bne.n	800114c <DHT_getData+0x1e8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001112:	ba50      	rev16	r0, r2
 8001114:	b280      	uxth	r0, r0
 8001116:	f7ff fe95 	bl	8000e44 <__aeabi_i2f>
 800111a:	4913      	ldr	r1, [pc, #76]	@ (8001168 <DHT_getData+0x204>)
 800111c:	f7ff f820 	bl	8000160 <__aeabi_fmul>
			if(!(rawData[2] & (1<<7))) {
 8001120:	063b      	lsls	r3, r7, #24
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001122:	4605      	mov	r5, r0
			if(!(rawData[2] & (1<<7))) {
 8001124:	d40a      	bmi.n	800113c <DHT_getData+0x1d8>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001126:	fa98 f098 	rev16.w	r0, r8
 800112a:	b280      	uxth	r0, r0
 800112c:	f7ff fe8a 	bl	8000e44 <__aeabi_i2f>
 8001130:	490d      	ldr	r1, [pc, #52]	@ (8001168 <DHT_getData+0x204>)
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8001132:	f7ff f815 	bl	8000160 <__aeabi_fmul>
	sensor->lastHum = data.hum;
 8001136:	6125      	str	r5, [r4, #16]
	sensor->lastTemp = data.temp;
 8001138:	60e0      	str	r0, [r4, #12]
	return data;	
 800113a:	e728      	b.n	8000f8e <DHT_getData+0x2a>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800113c:	f007 007f 	and.w	r0, r7, #127	@ 0x7f
 8001140:	ea49 2000 	orr.w	r0, r9, r0, lsl #8
 8001144:	f7ff fe7e 	bl	8000e44 <__aeabi_i2f>
 8001148:	4908      	ldr	r1, [pc, #32]	@ (800116c <DHT_getData+0x208>)
 800114a:	e7f2      	b.n	8001132 <DHT_getData+0x1ce>
		if (sensor->type == DHT11) {
 800114c:	b933      	cbnz	r3, 800115c <DHT_getData+0x1f8>
			data.hum = (float)rawData[0];
 800114e:	f7ff fe75 	bl	8000e3c <__aeabi_ui2f>
 8001152:	4605      	mov	r5, r0
			data.temp = (float)rawData[2];
 8001154:	4638      	mov	r0, r7
 8001156:	f7ff fe71 	bl	8000e3c <__aeabi_ui2f>
 800115a:	e7ec      	b.n	8001136 <DHT_getData+0x1d2>
	DHT_data data = {-128.0f, -128.0f};
 800115c:	f04f 4043 	mov.w	r0, #3271557120	@ 0xc3000000
 8001160:	4605      	mov	r5, r0
 8001162:	e7e8      	b.n	8001136 <DHT_getData+0x1d2>
 8001164:	08008d80 	.word	0x08008d80
 8001168:	3dcccccd 	.word	0x3dcccccd
 800116c:	bdcccccd 	.word	0xbdcccccd

08001170 <Buzzer_SetFrequency>:
}

void Buzzer_SetFrequency(BuzzerTypeDef *buzzer, uint32_t frequency) {
    buzzer->frequency = frequency;

    uint32_t prescaler = 1000000/frequency  - 1;
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <Buzzer_SetFrequency+0x14>)
    buzzer->frequency = frequency;
 8001172:	6081      	str	r1, [r0, #8]
    uint32_t prescaler = 1000000/frequency  - 1;
 8001174:	fbb3 f1f1 	udiv	r1, r3, r1
    __HAL_TIM_SET_PRESCALER(buzzer->htim, prescaler);
 8001178:	6803      	ldr	r3, [r0, #0]
    uint32_t prescaler = 1000000/frequency  - 1;
 800117a:	3901      	subs	r1, #1
    __HAL_TIM_SET_PRESCALER(buzzer->htim, prescaler);
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6299      	str	r1, [r3, #40]	@ 0x28
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	000f4240 	.word	0x000f4240

08001188 <Buzzer_SetVolume>:

void Buzzer_SetVolume(BuzzerTypeDef *buzzer, uint8_t volume) {
    buzzer->volume = volume;
 8001188:	7301      	strb	r1, [r0, #12]
    uint32_t compare_value = volume;

    __HAL_TIM_SET_COMPARE(buzzer->htim, buzzer->channel, compare_value);
 800118a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b90a      	cbnz	r2, 8001196 <Buzzer_SetVolume+0xe>
 8001192:	6359      	str	r1, [r3, #52]	@ 0x34
 8001194:	4770      	bx	lr
 8001196:	2a04      	cmp	r2, #4
 8001198:	d101      	bne.n	800119e <Buzzer_SetVolume+0x16>
 800119a:	6399      	str	r1, [r3, #56]	@ 0x38
 800119c:	4770      	bx	lr
 800119e:	2a08      	cmp	r2, #8
 80011a0:	bf0c      	ite	eq
 80011a2:	63d9      	streq	r1, [r3, #60]	@ 0x3c
 80011a4:	6419      	strne	r1, [r3, #64]	@ 0x40
}
 80011a6:	4770      	bx	lr

080011a8 <Buzzer_Init>:
void Buzzer_Init(BuzzerTypeDef *buzzer) {
 80011a8:	b538      	push	{r3, r4, r5, lr}
    Buzzer_SetFrequency(buzzer, buzzer->frequency);
 80011aa:	6881      	ldr	r1, [r0, #8]
 80011ac:	f7ff ffe0 	bl	8001170 <Buzzer_SetFrequency>
    Buzzer_SetVolume(buzzer, buzzer->volume);
 80011b0:	7b01      	ldrb	r1, [r0, #12]
 80011b2:	f7ff ffe9 	bl	8001188 <Buzzer_SetVolume>
		if (buzzer->htim->Instance == TIM1){
 80011b6:	6803      	ldr	r3, [r0, #0]
void Buzzer_Init(BuzzerTypeDef *buzzer) {
 80011b8:	4604      	mov	r4, r0
		if (buzzer->htim->Instance == TIM1){
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <Buzzer_Init+0x40>)
 80011be:	4d0b      	ldr	r5, [pc, #44]	@ (80011ec <Buzzer_Init+0x44>)
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d10d      	bne.n	80011e0 <Buzzer_Init+0x38>
    	 period = HAL_RCC_GetPCLK2Freq()/1000000-1;
 80011c4:	f002 fb96 	bl	80038f4 <HAL_RCC_GetPCLK2Freq>
    	 period = HAL_RCC_GetPCLK1Freq()/1000000-1;
 80011c8:	fbb0 f3f5 	udiv	r3, r0, r5
    __HAL_TIM_SET_AUTORELOAD(buzzer->htim, period);
 80011cc:	6820      	ldr	r0, [r4, #0]
    	 period = HAL_RCC_GetPCLK1Freq()/1000000-1;
 80011ce:	3b01      	subs	r3, #1
    __HAL_TIM_SET_AUTORELOAD(buzzer->htim, period);
 80011d0:	6802      	ldr	r2, [r0, #0]
    HAL_TIM_PWM_Start(buzzer->htim, buzzer->channel);
 80011d2:	6861      	ldr	r1, [r4, #4]
    __HAL_TIM_SET_AUTORELOAD(buzzer->htim, period);
 80011d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011d6:	60c3      	str	r3, [r0, #12]
}
 80011d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_TIM_PWM_Start(buzzer->htim, buzzer->channel);
 80011dc:	f002 bfbe 	b.w	800415c <HAL_TIM_PWM_Start>
    	 period = HAL_RCC_GetPCLK1Freq()/1000000-1;
 80011e0:	f002 fb78 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 80011e4:	e7f0      	b.n	80011c8 <Buzzer_Init+0x20>
 80011e6:	bf00      	nop
 80011e8:	40012c00 	.word	0x40012c00
 80011ec:	000f4240 	.word	0x000f4240

080011f0 <ssd1306_WelcomeView>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ssd1306_WelcomeView(){
 80011f0:	b510      	push	{r4, lr}
	uint8_t msg[100];
	ssd1306_Fill(Black);
 80011f2:	2000      	movs	r0, #0
void ssd1306_WelcomeView(){
 80011f4:	b09a      	sub	sp, #104	@ 0x68
	ssd1306_Fill(Black);
 80011f6:	f000 fc91 	bl	8001b1c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 80011fa:	2100      	movs	r1, #0
	sprintf(msg, "BOOTING");
	ssd1306_WriteString(msg, Font_11x18, White);
 80011fc:	4c16      	ldr	r4, [pc, #88]	@ (8001258 <ssd1306_WelcomeView+0x68>)
	ssd1306_SetCursor(0, 0);
 80011fe:	4608      	mov	r0, r1
 8001200:	f000 fda8 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "BOOTING");
 8001204:	4915      	ldr	r1, [pc, #84]	@ (800125c <ssd1306_WelcomeView+0x6c>)
 8001206:	a801      	add	r0, sp, #4
 8001208:	f004 fad5 	bl	80057b6 <strcpy>
	ssd1306_WriteString(msg, Font_11x18, White);
 800120c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001210:	2301      	movs	r3, #1
 8001212:	a801      	add	r0, sp, #4
 8001214:	f000 fd8a 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 25);
 8001218:	2119      	movs	r1, #25
 800121a:	2000      	movs	r0, #0
 800121c:	f000 fd9a 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "Course PrjC");
 8001220:	490f      	ldr	r1, [pc, #60]	@ (8001260 <ssd1306_WelcomeView+0x70>)
 8001222:	a801      	add	r0, sp, #4
 8001224:	f004 fac7 	bl	80057b6 <strcpy>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001228:	e894 0006 	ldmia.w	r4, {r1, r2}
 800122c:	2301      	movs	r3, #1
 800122e:	a801      	add	r0, sp, #4
 8001230:	f000 fd7c 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 50);
 8001234:	2132      	movs	r1, #50	@ 0x32
 8001236:	2000      	movs	r0, #0
 8001238:	f000 fd8c 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "Initialing...");
 800123c:	4909      	ldr	r1, [pc, #36]	@ (8001264 <ssd1306_WelcomeView+0x74>)
 800123e:	a801      	add	r0, sp, #4
 8001240:	f004 fab9 	bl	80057b6 <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001244:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <ssd1306_WelcomeView+0x78>)
 8001246:	2301      	movs	r3, #1
 8001248:	ca06      	ldmia	r2, {r1, r2}
 800124a:	a801      	add	r0, sp, #4
 800124c:	f000 fd6e 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001250:	f000 fc74 	bl	8001b3c <ssd1306_UpdateScreen>
}
 8001254:	b01a      	add	sp, #104	@ 0x68
 8001256:	bd10      	pop	{r4, pc}
 8001258:	20000014 	.word	0x20000014
 800125c:	08008d85 	.word	0x08008d85
 8001260:	08008d8d 	.word	0x08008d8d
 8001264:	08008d99 	.word	0x08008d99
 8001268:	2000001c 	.word	0x2000001c

0800126c <ssd1306_PumpView>:
	sprintf(msg, ">>");
	ssd1306_WriteString(msg, Font_6x8, White);
	ssd1306_UpdateScreen();
}

void ssd1306_PumpView(){
 800126c:	b530      	push	{r4, r5, lr}
	uint8_t msg[100];
	ssd1306_Fill(Black);
 800126e:	2000      	movs	r0, #0
void ssd1306_PumpView(){
 8001270:	b09b      	sub	sp, #108	@ 0x6c
	ssd1306_Fill(Black);
 8001272:	f000 fc53 	bl	8001b1c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001276:	2100      	movs	r1, #0
	sprintf(msg, "PUMP");
	ssd1306_WriteString(msg, Font_11x18, White);
 8001278:	4c4a      	ldr	r4, [pc, #296]	@ (80013a4 <ssd1306_PumpView+0x138>)
	ssd1306_SetCursor(0, 0);
 800127a:	4608      	mov	r0, r1
 800127c:	f000 fd6a 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "PUMP");
 8001280:	4949      	ldr	r1, [pc, #292]	@ (80013a8 <ssd1306_PumpView+0x13c>)
 8001282:	a801      	add	r0, sp, #4
 8001284:	f004 fa97 	bl	80057b6 <strcpy>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001288:	e894 0006 	ldmia.w	r4, {r1, r2}
 800128c:	2301      	movs	r3, #1
	ssd1306_SetCursor(0, 18);
	sprintf(msg, "U:%d\r\n", PUMP[0]);
 800128e:	4d47      	ldr	r5, [pc, #284]	@ (80013ac <ssd1306_PumpView+0x140>)
	ssd1306_WriteString(msg, Font_11x18, White);
 8001290:	a801      	add	r0, sp, #4
 8001292:	f000 fd4b 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8001296:	2112      	movs	r1, #18
 8001298:	2000      	movs	r0, #0
 800129a:	f000 fd5b 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "U:%d\r\n", PUMP[0]);
 800129e:	882a      	ldrh	r2, [r5, #0]
 80012a0:	4943      	ldr	r1, [pc, #268]	@ (80013b0 <ssd1306_PumpView+0x144>)
 80012a2:	a801      	add	r0, sp, #4
 80012a4:	f004 f9a4 	bl	80055f0 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 80012a8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80012ac:	2301      	movs	r3, #1
 80012ae:	a801      	add	r0, sp, #4
 80012b0:	f000 fd3c 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_SetCursor(64, 18);
 80012b4:	2112      	movs	r1, #18
 80012b6:	2040      	movs	r0, #64	@ 0x40
 80012b8:	f000 fd4c 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "I:%d\r\n", PUMP[1]);
 80012bc:	886a      	ldrh	r2, [r5, #2]
 80012be:	493d      	ldr	r1, [pc, #244]	@ (80013b4 <ssd1306_PumpView+0x148>)
 80012c0:	a801      	add	r0, sp, #4
 80012c2:	f004 f995 	bl	80055f0 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 80012c6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80012ca:	2301      	movs	r3, #1
 80012cc:	a801      	add	r0, sp, #4
 80012ce:	f000 fd2d 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 80012d2:	2124      	movs	r1, #36	@ 0x24
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 fd3d 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "Duty:%d", Period_);
 80012da:	4b37      	ldr	r3, [pc, #220]	@ (80013b8 <ssd1306_PumpView+0x14c>)
 80012dc:	4937      	ldr	r1, [pc, #220]	@ (80013bc <ssd1306_PumpView+0x150>)
 80012de:	881a      	ldrh	r2, [r3, #0]
 80012e0:	a801      	add	r0, sp, #4
 80012e2:	f004 f985 	bl	80055f0 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 80012e6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80012ea:	2301      	movs	r3, #1
 80012ec:	a801      	add	r0, sp, #4
 80012ee:	f000 fd1d 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_SetCursor(110, 36);
	sprintf(msg, "MAX");
	ssd1306_WriteString(msg, Font_6x8, White);
 80012f2:	4c33      	ldr	r4, [pc, #204]	@ (80013c0 <ssd1306_PumpView+0x154>)
	ssd1306_SetCursor(110, 36);
 80012f4:	2124      	movs	r1, #36	@ 0x24
 80012f6:	206e      	movs	r0, #110	@ 0x6e
 80012f8:	f000 fd2c 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "MAX");
 80012fc:	4931      	ldr	r1, [pc, #196]	@ (80013c4 <ssd1306_PumpView+0x158>)
 80012fe:	a801      	add	r0, sp, #4
 8001300:	f004 fa59 	bl	80057b6 <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 8001304:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001308:	2301      	movs	r3, #1
 800130a:	a801      	add	r0, sp, #4
 800130c:	f000 fd0e 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_SetCursor(110, 45);
 8001310:	212d      	movs	r1, #45	@ 0x2d
 8001312:	206e      	movs	r0, #110	@ 0x6e
 8001314:	f000 fd1e 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "720");
 8001318:	492b      	ldr	r1, [pc, #172]	@ (80013c8 <ssd1306_PumpView+0x15c>)
 800131a:	a801      	add	r0, sp, #4
 800131c:	f004 fa4b 	bl	80057b6 <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 8001320:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001324:	2301      	movs	r3, #1
 8001326:	a801      	add	r0, sp, #4
 8001328:	f000 fd00 	bl	8001d2c <ssd1306_WriteString>

	ssd1306_SetCursor(0 , 56);
 800132c:	2138      	movs	r1, #56	@ 0x38
 800132e:	2000      	movs	r0, #0
 8001330:	f000 fd10 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "<");
 8001334:	4925      	ldr	r1, [pc, #148]	@ (80013cc <ssd1306_PumpView+0x160>)
 8001336:	a801      	add	r0, sp, #4
 8001338:	f004 fa3d 	bl	80057b6 <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 800133c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001340:	2301      	movs	r3, #1
 8001342:	a801      	add	r0, sp, #4
 8001344:	f000 fcf2 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_SetCursor(32, 56);
 8001348:	2138      	movs	r1, #56	@ 0x38
 800134a:	2020      	movs	r0, #32
 800134c:	f000 fd02 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, "SW");
 8001350:	491f      	ldr	r1, [pc, #124]	@ (80013d0 <ssd1306_PumpView+0x164>)
 8001352:	a801      	add	r0, sp, #4
 8001354:	f004 fa2f 	bl	80057b6 <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 8001358:	e894 0006 	ldmia.w	r4, {r1, r2}
 800135c:	2301      	movs	r3, #1
 800135e:	a801      	add	r0, sp, #4
 8001360:	f000 fce4 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 8001364:	2138      	movs	r1, #56	@ 0x38
 8001366:	2040      	movs	r0, #64	@ 0x40
 8001368:	f000 fcf4 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, " \\/");
 800136c:	4919      	ldr	r1, [pc, #100]	@ (80013d4 <ssd1306_PumpView+0x168>)
 800136e:	a801      	add	r0, sp, #4
 8001370:	f004 fa21 	bl	80057b6 <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 8001374:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001378:	2301      	movs	r3, #1
 800137a:	a801      	add	r0, sp, #4
 800137c:	f000 fcd6 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 8001380:	2138      	movs	r1, #56	@ 0x38
 8001382:	2060      	movs	r0, #96	@ 0x60
 8001384:	f000 fce6 	bl	8001d54 <ssd1306_SetCursor>
	sprintf(msg, " /\\");
 8001388:	4913      	ldr	r1, [pc, #76]	@ (80013d8 <ssd1306_PumpView+0x16c>)
 800138a:	a801      	add	r0, sp, #4
 800138c:	f004 fa13 	bl	80057b6 <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 8001390:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001394:	2301      	movs	r3, #1
 8001396:	a801      	add	r0, sp, #4
 8001398:	f000 fcc8 	bl	8001d2c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800139c:	f000 fbce 	bl	8001b3c <ssd1306_UpdateScreen>
}
 80013a0:	b01b      	add	sp, #108	@ 0x6c
 80013a2:	bd30      	pop	{r4, r5, pc}
 80013a4:	20000014 	.word	0x20000014
 80013a8:	08008dd4 	.word	0x08008dd4
 80013ac:	20000228 	.word	0x20000228
 80013b0:	08008dd9 	.word	0x08008dd9
 80013b4:	08008de0 	.word	0x08008de0
 80013b8:	20000010 	.word	0x20000010
 80013bc:	08008de7 	.word	0x08008de7
 80013c0:	20000024 	.word	0x20000024
 80013c4:	08008def 	.word	0x08008def
 80013c8:	08008df3 	.word	0x08008df3
 80013cc:	08008dcf 	.word	0x08008dcf
 80013d0:	08008df7 	.word	0x08008df7
 80013d4:	08008dfa 	.word	0x08008dfa
 80013d8:	08008dfe 	.word	0x08008dfe

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b510      	push	{r4, lr}
 80013de:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e0:	2214      	movs	r2, #20
 80013e2:	2100      	movs	r1, #0
 80013e4:	a80c      	add	r0, sp, #48	@ 0x30
 80013e6:	f004 f966 	bl	80056b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ea:	2214      	movs	r2, #20
 80013ec:	2100      	movs	r1, #0
 80013ee:	eb0d 0002 	add.w	r0, sp, r2
 80013f2:	f004 f960 	bl	80056b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f6:	2210      	movs	r2, #16
 80013f8:	2100      	movs	r1, #0
 80013fa:	a801      	add	r0, sp, #4
 80013fc:	f004 f95b 	bl	80056b6 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001400:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001402:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001406:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001408:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001410:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001416:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001418:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141a:	f001 fffd 	bl	8003418 <HAL_RCC_OscConfig>
 800141e:	b108      	cbz	r0, 8001424 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001422:	e7fe      	b.n	8001422 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001424:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142e:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001430:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001434:	4621      	mov	r1, r4
 8001436:	a805      	add	r0, sp, #20
 8001438:	f002 f9b0 	bl	800379c <HAL_RCC_ClockConfig>
 800143c:	b108      	cbz	r0, 8001442 <SystemClock_Config+0x66>
 800143e:	b672      	cpsid	i
  while (1)
 8001440:	e7fe      	b.n	8001440 <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001446:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001448:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800144a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144c:	f002 fa62 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 8001450:	b108      	cbz	r0, 8001456 <SystemClock_Config+0x7a>
 8001452:	b672      	cpsid	i
  while (1)
 8001454:	e7fe      	b.n	8001454 <SystemClock_Config+0x78>
}
 8001456:	b014      	add	sp, #80	@ 0x50
 8001458:	bd10      	pop	{r4, pc}
	...

0800145c <main>:
{
 800145c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001460:	4ca5      	ldr	r4, [pc, #660]	@ (80016f8 <main+0x29c>)
{
 8001462:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 8001464:	f000 ff70 	bl	8002348 <HAL_Init>
  SystemClock_Config();
 8001468:	f7ff ffb8 	bl	80013dc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	2210      	movs	r2, #16
 800146e:	2100      	movs	r1, #0
 8001470:	a814      	add	r0, sp, #80	@ 0x50
 8001472:	f004 f920 	bl	80056b6 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2500      	movs	r5, #0
 800147a:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800147c:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	f043 0310 	orr.w	r3, r3, #16
 8001482:	61a3      	str	r3, [r4, #24]
 8001484:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	9303      	str	r3, [sp, #12]
 800148e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001490:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001492:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	61a3      	str	r3, [r4, #24]
 800149a:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800149c:	4897      	ldr	r0, [pc, #604]	@ (80016fc <main+0x2a0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	9304      	str	r3, [sp, #16]
 80014a4:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	69a3      	ldr	r3, [r4, #24]
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	61a3      	str	r3, [r4, #24]
 80014ae:	69a3      	ldr	r3, [r4, #24]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	9305      	str	r3, [sp, #20]
 80014b6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	69a3      	ldr	r3, [r4, #24]
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	61a3      	str	r3, [r4, #24]
 80014c0:	69a3      	ldr	r3, [r4, #24]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	9306      	str	r3, [sp, #24]
 80014c8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80014ca:	f001 fd1f 	bl	8002f0c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80014ce:	488b      	ldr	r0, [pc, #556]	@ (80016fc <main+0x2a0>)
 80014d0:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	e9cd 7514 	strd	r7, r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	9716      	str	r7, [sp, #88]	@ 0x58
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f001 fc3a 	bl	8002d50 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	4887      	ldr	r0, [pc, #540]	@ (80016fc <main+0x2a0>)
 80014de:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	e9cd 5616 	strd	r5, r6, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f001 fc32 	bl	8002d50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin|KEY_2_Pin|KEY_3_Pin;
 80014ec:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	4882      	ldr	r0, [pc, #520]	@ (80016fc <main+0x2a0>)
 80014f2:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	e9cd 3514 	strd	r3, r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f8:	9616      	str	r6, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f001 fc29 	bl	8002d50 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014fe:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001500:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001502:	433b      	orrs	r3, r7
 8001504:	6163      	str	r3, [r4, #20]
 8001506:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001508:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150a:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800150c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001512:	f001 fa63 	bl	80029dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001516:	200b      	movs	r0, #11
 8001518:	f001 fa90 	bl	8002a3c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800151c:	462a      	mov	r2, r5
 800151e:	4629      	mov	r1, r5
 8001520:	200c      	movs	r0, #12
 8001522:	f001 fa5b 	bl	80029dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001526:	200c      	movs	r0, #12
 8001528:	f001 fa88 	bl	8002a3c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800152c:	462a      	mov	r2, r5
 800152e:	4629      	mov	r1, r5
 8001530:	200d      	movs	r0, #13
 8001532:	f001 fa53 	bl	80029dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001536:	200d      	movs	r0, #13
 8001538:	f001 fa80 	bl	8002a3c <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 800153c:	4c70      	ldr	r4, [pc, #448]	@ (8001700 <main+0x2a4>)
 800153e:	4b71      	ldr	r3, [pc, #452]	@ (8001704 <main+0x2a8>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001540:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8001542:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001548:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800154a:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800154e:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
 8001552:	9516      	str	r5, [sp, #88]	@ 0x58
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001554:	7327      	strb	r7, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001556:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8001558:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800155a:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 800155c:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800155e:	f001 f9ab 	bl	80028b8 <HAL_ADC_Init>
 8001562:	b108      	cbz	r0, 8001568 <main+0x10c>
 8001564:	b672      	cpsid	i
  while (1)
 8001566:	e7fe      	b.n	8001566 <main+0x10a>
  sConfig.Channel = ADC_CHANNEL_4;
 8001568:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800156a:	e9cd 3714 	strd	r3, r7, [sp, #80]	@ 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800156e:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001570:	4620      	mov	r0, r4
 8001572:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001574:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001576:	f000 ffcf 	bl	8002518 <HAL_ADC_ConfigChannel>
 800157a:	b108      	cbz	r0, 8001580 <main+0x124>
 800157c:	b672      	cpsid	i
  while (1)
 800157e:	e7fe      	b.n	800157e <main+0x122>
  sConfig.Channel = ADC_CHANNEL_5;
 8001580:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001582:	4620      	mov	r0, r4
 8001584:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001586:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158a:	f000 ffc5 	bl	8002518 <HAL_ADC_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	b108      	cbz	r0, 8001596 <main+0x13a>
 8001592:	b672      	cpsid	i
  while (1)
 8001594:	e7fe      	b.n	8001594 <main+0x138>
  hi2c1.Instance = I2C1;
 8001596:	485c      	ldr	r0, [pc, #368]	@ (8001708 <main+0x2ac>)
  hi2c1.Init.ClockSpeed = 100000;
 8001598:	4a5c      	ldr	r2, [pc, #368]	@ (800170c <main+0x2b0>)
 800159a:	4c5d      	ldr	r4, [pc, #372]	@ (8001710 <main+0x2b4>)
  hi2c1.Init.OwnAddress1 = 0;
 800159c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80015a0:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b2:	f001 fdf9 	bl	80031a8 <HAL_I2C_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b108      	cbz	r0, 80015be <main+0x162>
 80015ba:	b672      	cpsid	i
  while (1)
 80015bc:	e7fe      	b.n	80015bc <main+0x160>
  huart1.Init.BaudRate = 115200;
 80015be:	f44f 35e1 	mov.w	r5, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c2:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 80015c4:	4853      	ldr	r0, [pc, #332]	@ (8001714 <main+0x2b8>)
  huart1.Init.BaudRate = 115200;
 80015c6:	4a54      	ldr	r2, [pc, #336]	@ (8001718 <main+0x2bc>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015cc:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015d0:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d2:	61c3      	str	r3, [r0, #28]
  huart1.Init.BaudRate = 115200;
 80015d4:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d8:	f002 fe80 	bl	80042dc <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	b108      	cbz	r0, 80015e4 <main+0x188>
 80015e0:	b672      	cpsid	i
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <main+0x186>
  huart3.Instance = USART3;
 80015e4:	484d      	ldr	r0, [pc, #308]	@ (800171c <main+0x2c0>)
 80015e6:	4a4e      	ldr	r2, [pc, #312]	@ (8001720 <main+0x2c4>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80015ec:	e9c0 2500 	strd	r2, r5, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f0:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f8:	f002 fe70 	bl	80042dc <HAL_UART_Init>
 80015fc:	4605      	mov	r5, r0
 80015fe:	b108      	cbz	r0, 8001604 <main+0x1a8>
 8001600:	b672      	cpsid	i
  while (1)
 8001602:	e7fe      	b.n	8001602 <main+0x1a6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001604:	4601      	mov	r1, r0
 8001606:	2210      	movs	r2, #16
 8001608:	a809      	add	r0, sp, #36	@ 0x24
 800160a:	f004 f854 	bl	80056b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800160e:	221c      	movs	r2, #28
 8001610:	4629      	mov	r1, r5
 8001612:	a80d      	add	r0, sp, #52	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	e9cd 5507 	strd	r5, r5, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	f004 f84d 	bl	80056b6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800161c:	4629      	mov	r1, r5
 800161e:	2220      	movs	r2, #32
 8001620:	a814      	add	r0, sp, #80	@ 0x50
 8001622:	f004 f848 	bl	80056b6 <memset>
  htim1.Init.Prescaler = 65535;
 8001626:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim1.Instance = TIM1;
 800162a:	4c3e      	ldr	r4, [pc, #248]	@ (8001724 <main+0x2c8>)
  htim1.Init.Prescaler = 65535;
 800162c:	493e      	ldr	r1, [pc, #248]	@ (8001728 <main+0x2cc>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800162e:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 65535;
 8001630:	e9c4 1300 	strd	r1, r3, [r4]
  htim1.Init.Period = 65535;
 8001634:	e9c4 5302 	strd	r5, r3, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 8001638:	e9c4 5504 	strd	r5, r5, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800163e:	f002 fb5f 	bl	8003d00 <HAL_TIM_Base_Init>
 8001642:	b108      	cbz	r0, 8001648 <main+0x1ec>
 8001644:	b672      	cpsid	i
  while (1)
 8001646:	e7fe      	b.n	8001646 <main+0x1ea>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800164c:	4620      	mov	r0, r4
 800164e:	a909      	add	r1, sp, #36	@ 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001652:	f002 fc8d 	bl	8003f70 <HAL_TIM_ConfigClockSource>
 8001656:	b108      	cbz	r0, 800165c <main+0x200>
 8001658:	b672      	cpsid	i
  while (1)
 800165a:	e7fe      	b.n	800165a <main+0x1fe>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800165c:	4620      	mov	r0, r4
 800165e:	f002 fba7 	bl	8003db0 <HAL_TIM_PWM_Init>
 8001662:	b108      	cbz	r0, 8001668 <main+0x20c>
 8001664:	b672      	cpsid	i
  while (1)
 8001666:	e7fe      	b.n	8001666 <main+0x20a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166c:	a907      	add	r1, sp, #28
 800166e:	4620      	mov	r0, r4
 8001670:	f002 fd76 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	b108      	cbz	r0, 800167a <main+0x21e>
 8001676:	b672      	cpsid	i
  while (1)
 8001678:	e7fe      	b.n	8001678 <main+0x21c>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167a:	2200      	movs	r2, #0
  sConfigOC.Pulse = 2;
 800167c:	2370      	movs	r3, #112	@ 0x70
 800167e:	f04f 0802 	mov.w	r8, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001682:	4828      	ldr	r0, [pc, #160]	@ (8001724 <main+0x2c8>)
 8001684:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigOC.Pulse = 2;
 8001686:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800168a:	e9cd 220f 	strd	r2, r2, [sp, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168e:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001692:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001694:	f002 fc0a 	bl	8003eac <HAL_TIM_PWM_ConfigChannel>
 8001698:	b108      	cbz	r0, 800169e <main+0x242>
 800169a:	b672      	cpsid	i
  while (1)
 800169c:	e7fe      	b.n	800169c <main+0x240>
  sConfigOC.Pulse = 36;
 800169e:	2324      	movs	r3, #36	@ 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80016a0:	f44f 7980 	mov.w	r9, #256	@ 0x100
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016a4:	2204      	movs	r2, #4
 80016a6:	481f      	ldr	r0, [pc, #124]	@ (8001724 <main+0x2c8>)
 80016a8:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigOC.Pulse = 36;
 80016aa:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80016ac:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b0:	f002 fbfc 	bl	8003eac <HAL_TIM_PWM_ConfigChannel>
 80016b4:	b108      	cbz	r0, 80016ba <main+0x25e>
 80016b6:	b672      	cpsid	i
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <main+0x25c>
  sConfigOC.Pulse = 1;
 80016ba:	2360      	movs	r3, #96	@ 0x60
 80016bc:	2701      	movs	r7, #1
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016be:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016c0:	2208      	movs	r2, #8
 80016c2:	4818      	ldr	r0, [pc, #96]	@ (8001724 <main+0x2c8>)
 80016c4:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigOC.Pulse = 1;
 80016c6:	e9cd 370d 	strd	r3, r7, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016ca:	f002 fbef 	bl	8003eac <HAL_TIM_PWM_ConfigChannel>
 80016ce:	b108      	cbz	r0, 80016d4 <main+0x278>
 80016d0:	b672      	cpsid	i
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <main+0x276>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016d8:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 80016dc:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016e0:	9018      	str	r0, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e2:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e4:	a914      	add	r1, sp, #80	@ 0x50
 80016e6:	480f      	ldr	r0, [pc, #60]	@ (8001724 <main+0x2c8>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016e8:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ea:	f002 fd67 	bl	80041bc <HAL_TIMEx_ConfigBreakDeadTime>
 80016ee:	4606      	mov	r6, r0
 80016f0:	b1e0      	cbz	r0, 800172c <main+0x2d0>
 80016f2:	b672      	cpsid	i
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <main+0x298>
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010c00 	.word	0x40010c00
 8001700:	20000530 	.word	0x20000530
 8001704:	40012400 	.word	0x40012400
 8001708:	20000468 	.word	0x20000468
 800170c:	000186a0 	.word	0x000186a0
 8001710:	40005400 	.word	0x40005400
 8001714:	20000300 	.word	0x20000300
 8001718:	40013800 	.word	0x40013800
 800171c:	200002b8 	.word	0x200002b8
 8001720:	40004800 	.word	0x40004800
 8001724:	20000420 	.word	0x20000420
 8001728:	40012c00 	.word	0x40012c00
  HAL_TIM_MspPostInit(&htim1);
 800172c:	4875      	ldr	r0, [pc, #468]	@ (8001904 <main+0x4a8>)
 800172e:	f000 fc43 	bl	8001fb8 <HAL_TIM_MspPostInit>
  hadc2.Instance = ADC2;
 8001732:	4d75      	ldr	r5, [pc, #468]	@ (8001908 <main+0x4ac>)
 8001734:	4b75      	ldr	r3, [pc, #468]	@ (800190c <main+0x4b0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001736:	e9cd 6614 	strd	r6, r6, [sp, #80]	@ 0x50
 800173a:	9616      	str	r6, [sp, #88]	@ 0x58
  hadc2.Instance = ADC2;
 800173c:	602b      	str	r3, [r5, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800173e:	752e      	strb	r6, [r5, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001740:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001744:	606e      	str	r6, [r5, #4]
  hadc2.Init.NbrOfConversion = 3;
 8001746:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001748:	4628      	mov	r0, r5
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800174a:	f8c5 9008 	str.w	r9, [r5, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800174e:	732f      	strb	r7, [r5, #12]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001750:	61eb      	str	r3, [r5, #28]
  hadc2.Init.NbrOfConversion = 3;
 8001752:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001754:	f001 f8b0 	bl	80028b8 <HAL_ADC_Init>
 8001758:	b108      	cbz	r0, 800175e <main+0x302>
 800175a:	b672      	cpsid	i
  while (1)
 800175c:	e7fe      	b.n	800175c <main+0x300>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800175e:	9016      	str	r0, [sp, #88]	@ 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001760:	a914      	add	r1, sp, #80	@ 0x50
 8001762:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001764:	e9cd 7714 	strd	r7, r7, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001768:	f000 fed6 	bl	8002518 <HAL_ADC_ConfigChannel>
 800176c:	b108      	cbz	r0, 8001772 <main+0x316>
 800176e:	b672      	cpsid	i
  while (1)
 8001770:	e7fe      	b.n	8001770 <main+0x314>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001772:	4628      	mov	r0, r5
 8001774:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001776:	e9cd 8814 	strd	r8, r8, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800177a:	f000 fecd 	bl	8002518 <HAL_ADC_ConfigChannel>
 800177e:	b108      	cbz	r0, 8001784 <main+0x328>
 8001780:	b672      	cpsid	i
  while (1)
 8001782:	e7fe      	b.n	8001782 <main+0x326>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001784:	4628      	mov	r0, r5
 8001786:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001788:	e9cd 6614 	strd	r6, r6, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800178c:	f000 fec4 	bl	8002518 <HAL_ADC_ConfigChannel>
 8001790:	4605      	mov	r5, r0
 8001792:	b108      	cbz	r0, 8001798 <main+0x33c>
 8001794:	b672      	cpsid	i
  while (1)
 8001796:	e7fe      	b.n	8001796 <main+0x33a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001798:	4601      	mov	r1, r0
 800179a:	2210      	movs	r2, #16
 800179c:	a80d      	add	r0, sp, #52	@ 0x34
 800179e:	f003 ff8a 	bl	80056b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a2:	221c      	movs	r2, #28
 80017a4:	4629      	mov	r1, r5
 80017a6:	a814      	add	r0, sp, #80	@ 0x50
  htim3.Instance = TIM3;
 80017a8:	4f59      	ldr	r7, [pc, #356]	@ (8001910 <main+0x4b4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017aa:	e9cd 5509 	strd	r5, r5, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ae:	f003 ff82 	bl	80056b6 <memset>
  htim3.Instance = TIM3;
 80017b2:	4b58      	ldr	r3, [pc, #352]	@ (8001914 <main+0x4b8>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017b4:	4638      	mov	r0, r7
  htim3.Init.Prescaler = 0;
 80017b6:	e9c7 3500 	strd	r3, r5, [r7]
  htim3.Init.Period = 720;
 80017ba:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	60bd      	str	r5, [r7, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	e9c7 3503 	strd	r3, r5, [r7, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c6:	f002 fa9b 	bl	8003d00 <HAL_TIM_Base_Init>
 80017ca:	b108      	cbz	r0, 80017d0 <main+0x374>
 80017cc:	b672      	cpsid	i
  while (1)
 80017ce:	e7fe      	b.n	80017ce <main+0x372>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017d4:	4638      	mov	r0, r7
 80017d6:	a90d      	add	r1, sp, #52	@ 0x34
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017da:	f002 fbc9 	bl	8003f70 <HAL_TIM_ConfigClockSource>
 80017de:	b108      	cbz	r0, 80017e4 <main+0x388>
 80017e0:	b672      	cpsid	i
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <main+0x386>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017e4:	484a      	ldr	r0, [pc, #296]	@ (8001910 <main+0x4b4>)
 80017e6:	f002 fae3 	bl	8003db0 <HAL_TIM_PWM_Init>
 80017ea:	b108      	cbz	r0, 80017f0 <main+0x394>
 80017ec:	b672      	cpsid	i
  while (1)
 80017ee:	e7fe      	b.n	80017ee <main+0x392>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017f4:	a909      	add	r1, sp, #36	@ 0x24
 80017f6:	4846      	ldr	r0, [pc, #280]	@ (8001910 <main+0x4b4>)
 80017f8:	f002 fcb2 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	4602      	mov	r2, r0
 80017fe:	b108      	cbz	r0, 8001804 <main+0x3a8>
 8001800:	b672      	cpsid	i
  while (1)
 8001802:	e7fe      	b.n	8001802 <main+0x3a6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001804:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001806:	9016      	str	r0, [sp, #88]	@ 0x58
  sConfigOC.Pulse = 0;
 8001808:	e9cd 3014 	strd	r3, r0, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180c:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180e:	a914      	add	r1, sp, #80	@ 0x50
 8001810:	483f      	ldr	r0, [pc, #252]	@ (8001910 <main+0x4b4>)
 8001812:	f002 fb4b 	bl	8003eac <HAL_TIM_PWM_ConfigChannel>
 8001816:	4606      	mov	r6, r0
 8001818:	b108      	cbz	r0, 800181e <main+0x3c2>
 800181a:	b672      	cpsid	i
  while (1)
 800181c:	e7fe      	b.n	800181c <main+0x3c0>
  HAL_TIM_MspPostInit(&htim3);
 800181e:	483c      	ldr	r0, [pc, #240]	@ (8001910 <main+0x4b4>)
 8001820:	f000 fbca 	bl	8001fb8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001824:	2210      	movs	r2, #16
 8001826:	4631      	mov	r1, r6
 8001828:	a80d      	add	r0, sp, #52	@ 0x34
 800182a:	f003 ff44 	bl	80056b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182e:	221c      	movs	r2, #28
 8001830:	4631      	mov	r1, r6
 8001832:	a814      	add	r0, sp, #80	@ 0x50
  htim4.Instance = TIM4;
 8001834:	4d38      	ldr	r5, [pc, #224]	@ (8001918 <main+0x4bc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001836:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183a:	f003 ff3c 	bl	80056b6 <memset>
  htim4.Instance = TIM4;
 800183e:	4b37      	ldr	r3, [pc, #220]	@ (800191c <main+0x4c0>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001840:	4628      	mov	r0, r5
  htim4.Init.Prescaler = 0;
 8001842:	e9c5 3600 	strd	r3, r6, [r5]
  htim4.Init.Period = 72;
 8001846:	2348      	movs	r3, #72	@ 0x48
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	60ae      	str	r6, [r5, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184a:	e9c5 3603 	strd	r3, r6, [r5, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	61ae      	str	r6, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001850:	f002 fa56 	bl	8003d00 <HAL_TIM_Base_Init>
 8001854:	b108      	cbz	r0, 800185a <main+0x3fe>
 8001856:	b672      	cpsid	i
  while (1)
 8001858:	e7fe      	b.n	8001858 <main+0x3fc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185a:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800185e:	4628      	mov	r0, r5
 8001860:	a90d      	add	r1, sp, #52	@ 0x34
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001862:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001866:	f002 fb83 	bl	8003f70 <HAL_TIM_ConfigClockSource>
 800186a:	b108      	cbz	r0, 8001870 <main+0x414>
 800186c:	b672      	cpsid	i
  while (1)
 800186e:	e7fe      	b.n	800186e <main+0x412>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001870:	4628      	mov	r0, r5
 8001872:	f002 fa71 	bl	8003d58 <HAL_TIM_OC_Init>
 8001876:	b108      	cbz	r0, 800187c <main+0x420>
 8001878:	b672      	cpsid	i
  while (1)
 800187a:	e7fe      	b.n	800187a <main+0x41e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001880:	a909      	add	r1, sp, #36	@ 0x24
 8001882:	4628      	mov	r0, r5
 8001884:	f002 fc6c 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	b108      	cbz	r0, 800188e <main+0x432>
 800188a:	b672      	cpsid	i
  while (1)
 800188c:	e7fe      	b.n	800188c <main+0x430>
  sConfigOC.Pulse = 36;
 800188e:	2230      	movs	r2, #48	@ 0x30
 8001890:	2324      	movs	r3, #36	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001892:	9016      	str	r0, [sp, #88]	@ 0x58
  sConfigOC.Pulse = 36;
 8001894:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001898:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800189a:	220c      	movs	r2, #12
 800189c:	4628      	mov	r0, r5
 800189e:	a914      	add	r1, sp, #80	@ 0x50
 80018a0:	f002 fade 	bl	8003e60 <HAL_TIM_OC_ConfigChannel>
 80018a4:	4605      	mov	r5, r0
 80018a6:	b108      	cbz	r0, 80018ac <main+0x450>
 80018a8:	b672      	cpsid	i
  while (1)
 80018aa:	e7fe      	b.n	80018aa <main+0x44e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ac:	4601      	mov	r1, r0
 80018ae:	2210      	movs	r2, #16
 80018b0:	a814      	add	r0, sp, #80	@ 0x50
 80018b2:	f003 ff00 	bl	80056b6 <memset>
  htim2.Instance = TIM2;
 80018b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018ba:	4e19      	ldr	r6, [pc, #100]	@ (8001920 <main+0x4c4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018bc:	e9cd 550d 	strd	r5, r5, [sp, #52]	@ 0x34
  htim2.Init.Prescaler = 0;
 80018c0:	e9c6 3500 	strd	r3, r5, [r6]
  htim2.Init.Period = 72-1;
 80018c4:	2347      	movs	r3, #71	@ 0x47
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018c6:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	e9c6 3503 	strd	r3, r5, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	60b5      	str	r5, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018d0:	f002 fa16 	bl	8003d00 <HAL_TIM_Base_Init>
 80018d4:	b108      	cbz	r0, 80018da <main+0x47e>
 80018d6:	b672      	cpsid	i
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <main+0x47c>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018da:	4630      	mov	r0, r6
 80018dc:	a914      	add	r1, sp, #80	@ 0x50
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018de:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018e2:	f002 fb45 	bl	8003f70 <HAL_TIM_ConfigClockSource>
 80018e6:	b108      	cbz	r0, 80018ec <main+0x490>
 80018e8:	b672      	cpsid	i
  while (1)
 80018ea:	e7fe      	b.n	80018ea <main+0x48e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ee:	480c      	ldr	r0, [pc, #48]	@ (8001920 <main+0x4c4>)
 80018f0:	a90d      	add	r1, sp, #52	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f6:	f002 fc33 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 80018fa:	4605      	mov	r5, r0
 80018fc:	b190      	cbz	r0, 8001924 <main+0x4c8>
 80018fe:	b672      	cpsid	i
  while (1)
 8001900:	e7fe      	b.n	8001900 <main+0x4a4>
 8001902:	bf00      	nop
 8001904:	20000420 	.word	0x20000420
 8001908:	20000500 	.word	0x20000500
 800190c:	40012800 	.word	0x40012800
 8001910:	20000390 	.word	0x20000390
 8001914:	40000400 	.word	0x40000400
 8001918:	20000348 	.word	0x20000348
 800191c:	40000800 	.word	0x40000800
 8001920:	200003d8 	.word	0x200003d8
  HAL_ADC_Start(&hadc1);
 8001924:	485d      	ldr	r0, [pc, #372]	@ (8001a9c <main+0x640>)
 8001926:	f000 feb1 	bl	800268c <HAL_ADC_Start>
  ssd1306_Init();
 800192a:	f000 f921 	bl	8001b70 <ssd1306_Init>
  ssd1306_WelcomeView();
 800192e:	f7ff fc5f 	bl	80011f0 <ssd1306_WelcomeView>
  HAL_TIM_Base_Start(&htim1);
 8001932:	485b      	ldr	r0, [pc, #364]	@ (8001aa0 <main+0x644>)
 8001934:	f002 f8dc 	bl	8003af0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001938:	4629      	mov	r1, r5
 800193a:	4859      	ldr	r0, [pc, #356]	@ (8001aa0 <main+0x644>)
 800193c:	f002 fc0e 	bl	800415c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001940:	2104      	movs	r1, #4
 8001942:	4857      	ldr	r0, [pc, #348]	@ (8001aa0 <main+0x644>)
 8001944:	f002 fc0a 	bl	800415c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8001948:	4856      	ldr	r0, [pc, #344]	@ (8001aa4 <main+0x648>)
 800194a:	f002 f8d1 	bl	8003af0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800194e:	4629      	mov	r1, r5
 8001950:	4854      	ldr	r0, [pc, #336]	@ (8001aa4 <main+0x648>)
 8001952:	f002 fc03 	bl	800415c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 8001956:	4854      	ldr	r0, [pc, #336]	@ (8001aa8 <main+0x64c>)
 8001958:	f002 f8ca 	bl	8003af0 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)PUMP, 2);
 800195c:	2202      	movs	r2, #2
 800195e:	4953      	ldr	r1, [pc, #332]	@ (8001aac <main+0x650>)
 8001960:	484e      	ldr	r0, [pc, #312]	@ (8001a9c <main+0x640>)
 8001962:	f000 fef5 	bl	8002750 <HAL_ADC_Start_DMA>
  DHT_sensor DHT11_Sensor = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8001966:	220e      	movs	r2, #14
 8001968:	4629      	mov	r1, r5
 800196a:	f10d 0056 	add.w	r0, sp, #86	@ 0x56
 800196e:	f003 fea2 	bl	80056b6 <memset>
 8001972:	2301      	movs	r3, #1
 8001974:	4e4e      	ldr	r6, [pc, #312]	@ (8001ab0 <main+0x654>)
  Buzzer_Init(&buzzer);
 8001976:	484f      	ldr	r0, [pc, #316]	@ (8001ab4 <main+0x658>)
  DHT_sensor DHT11_Sensor = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8001978:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
 800197c:	9614      	str	r6, [sp, #80]	@ 0x50
  Buzzer_Init(&buzzer);
 800197e:	f7ff fc13 	bl	80011a8 <Buzzer_Init>
  HAL_Delay(100);
 8001982:	2064      	movs	r0, #100	@ 0x64
 8001984:	f000 fd04 	bl	8002390 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 200);
 8001988:	21c8      	movs	r1, #200	@ 0xc8
 800198a:	484a      	ldr	r0, [pc, #296]	@ (8001ab4 <main+0x658>)
 800198c:	f7ff fbf0 	bl	8001170 <Buzzer_SetFrequency>
  HAL_Delay(100);
 8001990:	2064      	movs	r0, #100	@ 0x64
 8001992:	f000 fcfd 	bl	8002390 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 300);
 8001996:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800199a:	4846      	ldr	r0, [pc, #280]	@ (8001ab4 <main+0x658>)
 800199c:	f7ff fbe8 	bl	8001170 <Buzzer_SetFrequency>
  HAL_Delay(100);
 80019a0:	2064      	movs	r0, #100	@ 0x64
 80019a2:	f000 fcf5 	bl	8002390 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 400);
 80019a6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80019aa:	4842      	ldr	r0, [pc, #264]	@ (8001ab4 <main+0x658>)
 80019ac:	f7ff fbe0 	bl	8001170 <Buzzer_SetFrequency>
  HAL_Delay(100);
 80019b0:	2064      	movs	r0, #100	@ 0x64
 80019b2:	f000 fced 	bl	8002390 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 500);
 80019b6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80019ba:	483e      	ldr	r0, [pc, #248]	@ (8001ab4 <main+0x658>)
 80019bc:	f7ff fbd8 	bl	8001170 <Buzzer_SetFrequency>
  HAL_Delay(100);
 80019c0:	2064      	movs	r0, #100	@ 0x64
 80019c2:	f000 fce5 	bl	8002390 <HAL_Delay>
  Buzzer_SetVolume(&buzzer, 2);
 80019c6:	2102      	movs	r1, #2
 80019c8:	483a      	ldr	r0, [pc, #232]	@ (8001ab4 <main+0x658>)
 80019ca:	f7ff fbdd 	bl	8001188 <Buzzer_SetVolume>
  ESP_UART_Init(&huart3);
 80019ce:	483a      	ldr	r0, [pc, #232]	@ (8001ab8 <main+0x65c>)
 80019d0:	f7ff fac2 	bl	8000f58 <ESP_UART_Init>
  Buzzer_SetVolume(&buzzer, 0);
 80019d4:	4629      	mov	r1, r5
 80019d6:	4837      	ldr	r0, [pc, #220]	@ (8001ab4 <main+0x658>)
 80019d8:	f7ff fbd6 	bl	8001188 <Buzzer_SetVolume>
  HAL_Delay(100);
 80019dc:	2064      	movs	r0, #100	@ 0x64
 80019de:	f000 fcd7 	bl	8002390 <HAL_Delay>
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 80019e2:	f8df a0b8 	ldr.w	sl, [pc, #184]	@ 8001a9c <main+0x640>
 80019e6:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 8001abc <main+0x660>
 80019ea:	4650      	mov	r0, sl
 80019ec:	f000 fce2 	bl	80023b4 <HAL_ADC_GetValue>
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 80019f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 80019f4:	f8a9 0000 	strh.w	r0, [r9]
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 80019f8:	4630      	mov	r0, r6
 80019fa:	f001 fa81 	bl	8002f00 <HAL_GPIO_ReadPin>
 80019fe:	4d30      	ldr	r5, [pc, #192]	@ (8001ac0 <main+0x664>)
 8001a00:	b140      	cbz	r0, 8001a14 <main+0x5b8>
	    	if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001a02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a06:	4630      	mov	r0, r6
 8001a08:	f001 fa7a 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001a0c:	b110      	cbz	r0, 8001a14 <main+0x5b8>
	    	Period_-=10;
 8001a0e:	882b      	ldrh	r3, [r5, #0]
 8001a10:	3b0a      	subs	r3, #10
 8001a12:	802b      	strh	r3, [r5, #0]
	    if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001a14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a18:	4630      	mov	r0, r6
 8001a1a:	f001 fa71 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001a1e:	b158      	cbz	r0, 8001a38 <main+0x5dc>
	        if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001a20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a24:	4630      	mov	r0, r6
 8001a26:	f001 fa6b 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001a2a:	b128      	cbz	r0, 8001a38 <main+0x5dc>
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a2c:	2200      	movs	r2, #0
	    	    	Period_--;
 8001a2e:	882b      	ldrh	r3, [r5, #0]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	802b      	strh	r3, [r5, #0]
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	63da      	str	r2, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001a38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	f001 fa5f 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001a42:	b158      	cbz	r0, 8001a5c <main+0x600>
	    	 if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001a44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a48:	4630      	mov	r0, r6
 8001a4a:	f001 fa59 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001a4e:	b128      	cbz	r0, 8001a5c <main+0x600>
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001a50:	220a      	movs	r2, #10
	    		    	Period_++;
 8001a52:	882b      	ldrh	r3, [r5, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	802b      	strh	r3, [r5, #0]
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001a5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a60:	4630      	mov	r0, r6
 8001a62:	f001 fa4d 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001a66:	b140      	cbz	r0, 8001a7a <main+0x61e>
		    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001a68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f001 fa47 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001a72:	b110      	cbz	r0, 8001a7a <main+0x61e>
		    	Period_+=10;
 8001a74:	882b      	ldrh	r3, [r5, #0]
 8001a76:	330a      	adds	r3, #10
 8001a78:	802b      	strh	r3, [r5, #0]
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 8001a7a:	46e8      	mov	r8, sp
 8001a7c:	a914      	add	r1, sp, #80	@ 0x50
 8001a7e:	4640      	mov	r0, r8
 8001a80:	f7ff fa70 	bl	8000f64 <DHT_getData>
 8001a84:	e898 0003 	ldmia.w	r8, {r0, r1}
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Period_);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	882a      	ldrh	r2, [r5, #0]
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 8001a8c:	f8df b034 	ldr.w	fp, [pc, #52]	@ 8001ac4 <main+0x668>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Period_);
 8001a90:	635a      	str	r2, [r3, #52]	@ 0x34
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 8001a92:	e88b 0003 	stmia.w	fp, {r0, r1}
		  ssd1306_PumpView();
 8001a96:	f7ff fbe9 	bl	800126c <ssd1306_PumpView>
  {
 8001a9a:	e7a6      	b.n	80019ea <main+0x58e>
 8001a9c:	20000530 	.word	0x20000530
 8001aa0:	20000420 	.word	0x20000420
 8001aa4:	20000390 	.word	0x20000390
 8001aa8:	20000348 	.word	0x20000348
 8001aac:	20000228 	.word	0x20000228
 8001ab0:	40010c00 	.word	0x40010c00
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	200002b8 	.word	0x200002b8
 8001abc:	2000022c 	.word	0x2000022c
 8001ac0:	20000010 	.word	0x20000010
 8001ac4:	20000220 	.word	0x20000220

08001ac8 <Error_Handler>:
 8001ac8:	b672      	cpsid	i
  while (1)
 8001aca:	e7fe      	b.n	8001aca <Error_Handler+0x2>

08001acc <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001acc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001ad8:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t byte) {
 8001adc:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001ae0:	9200      	str	r2, [sp, #0]
 8001ae2:	2178      	movs	r1, #120	@ 0x78
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <ssd1306_WriteCommand+0x28>)
 8001ae8:	f001 fc06 	bl	80032f8 <HAL_I2C_Mem_Write>
}
 8001aec:	b007      	add	sp, #28
 8001aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8001af2:	bf00      	nop
 8001af4:	20000468 	.word	0x20000468

08001af8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	b289      	uxth	r1, r1
 8001b00:	e9cd 0100 	strd	r0, r1, [sp]
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2240      	movs	r2, #64	@ 0x40
 8001b08:	2301      	movs	r3, #1
 8001b0a:	2178      	movs	r1, #120	@ 0x78
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <ssd1306_WriteData+0x20>)
 8001b0e:	f001 fbf3 	bl	80032f8 <HAL_I2C_Mem_Write>
}
 8001b12:	b005      	add	sp, #20
 8001b14:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b18:	20000468 	.word	0x20000468

08001b1c <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4906      	ldr	r1, [pc, #24]	@ (8001b38 <ssd1306_Fill+0x1c>)
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b20:	1e02      	subs	r2, r0, #0
 8001b22:	bf18      	it	ne
 8001b24:	2201      	movne	r2, #1
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b26:	3301      	adds	r3, #1
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b28:	4252      	negs	r2, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b2e:	f801 2b01 	strb.w	r2, [r1], #1
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b32:	d1f5      	bne.n	8001b20 <ssd1306_Fill+0x4>
    }
}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000566 	.word	0x20000566

08001b3c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	24b0      	movs	r4, #176	@ 0xb0
 8001b40:	4d0a      	ldr	r5, [pc, #40]	@ (8001b6c <ssd1306_UpdateScreen+0x30>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff ffc2 	bl	8001acc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff ffbf 	bl	8001acc <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b4e:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10);
 8001b50:	2010      	movs	r0, #16
 8001b52:	f7ff ffbb 	bl	8001acc <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b56:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b58:	4628      	mov	r0, r5
 8001b5a:	2180      	movs	r1, #128	@ 0x80
 8001b5c:	f7ff ffcc 	bl	8001af8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b60:	2cb8      	cmp	r4, #184	@ 0xb8
 8001b62:	f105 0580 	add.w	r5, r5, #128	@ 0x80
 8001b66:	d1ec      	bne.n	8001b42 <ssd1306_UpdateScreen+0x6>
    }
}
 8001b68:	bd38      	pop	{r3, r4, r5, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000566 	.word	0x20000566

08001b70 <ssd1306_Init>:
void ssd1306_Init(void) {
 8001b70:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8001b72:	2064      	movs	r0, #100	@ 0x64
 8001b74:	f000 fc0c 	bl	8002390 <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 8001b78:	20ae      	movs	r0, #174	@ 0xae
 8001b7a:	f7ff ffa7 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001b7e:	2020      	movs	r0, #32
 8001b80:	f7ff ffa4 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff ffa1 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b8a:	20b0      	movs	r0, #176	@ 0xb0
 8001b8c:	f7ff ff9e 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001b90:	20c8      	movs	r0, #200	@ 0xc8
 8001b92:	f7ff ff9b 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff ff98 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001b9c:	2010      	movs	r0, #16
 8001b9e:	f7ff ff95 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001ba2:	2040      	movs	r0, #64	@ 0x40
 8001ba4:	f7ff ff92 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001ba8:	2081      	movs	r0, #129	@ 0x81
 8001baa:	f7ff ff8f 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001bae:	20ff      	movs	r0, #255	@ 0xff
 8001bb0:	f7ff ff8c 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001bb4:	20a1      	movs	r0, #161	@ 0xa1
 8001bb6:	f7ff ff89 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001bba:	20a6      	movs	r0, #166	@ 0xa6
 8001bbc:	f7ff ff86 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001bc0:	20a8      	movs	r0, #168	@ 0xa8
 8001bc2:	f7ff ff83 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001bc6:	203f      	movs	r0, #63	@ 0x3f
 8001bc8:	f7ff ff80 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001bcc:	20a4      	movs	r0, #164	@ 0xa4
 8001bce:	f7ff ff7d 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001bd2:	20d3      	movs	r0, #211	@ 0xd3
 8001bd4:	f7ff ff7a 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff ff77 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001bde:	20d5      	movs	r0, #213	@ 0xd5
 8001be0:	f7ff ff74 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001be4:	20f0      	movs	r0, #240	@ 0xf0
 8001be6:	f7ff ff71 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001bea:	20d9      	movs	r0, #217	@ 0xd9
 8001bec:	f7ff ff6e 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001bf0:	2022      	movs	r0, #34	@ 0x22
 8001bf2:	f7ff ff6b 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001bf6:	20da      	movs	r0, #218	@ 0xda
 8001bf8:	f7ff ff68 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8001bfc:	2012      	movs	r0, #18
 8001bfe:	f7ff ff65 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001c02:	20db      	movs	r0, #219	@ 0xdb
 8001c04:	f7ff ff62 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001c08:	2020      	movs	r0, #32
 8001c0a:	f7ff ff5f 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001c0e:	208d      	movs	r0, #141	@ 0x8d
 8001c10:	f7ff ff5c 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001c14:	2014      	movs	r0, #20
 8001c16:	f7ff ff59 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001c1a:	20af      	movs	r0, #175	@ 0xaf
 8001c1c:	f7ff ff56 	bl	8001acc <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff ff7b 	bl	8001b1c <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8001c26:	f7ff ff89 	bl	8001b3c <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4b02      	ldr	r3, [pc, #8]	@ (8001c38 <ssd1306_Init+0xc8>)
 8001c2e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001c30:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8001c32:	2201      	movs	r2, #1
 8001c34:	715a      	strb	r2, [r3, #5]
}
 8001c36:	bd08      	pop	{r3, pc}
 8001c38:	20000560 	.word	0x20000560

08001c3c <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c3c:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c3e:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c40:	d410      	bmi.n	8001c64 <ssd1306_DrawPixel+0x28>
 8001c42:	293f      	cmp	r1, #63	@ 0x3f
 8001c44:	d80e      	bhi.n	8001c64 <ssd1306_DrawPixel+0x28>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001c46:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <ssd1306_DrawPixel+0x40>)
 8001c48:	4c0d      	ldr	r4, [pc, #52]	@ (8001c80 <ssd1306_DrawPixel+0x44>)
 8001c4a:	791d      	ldrb	r5, [r3, #4]
 8001c4c:	08cb      	lsrs	r3, r1, #3
 8001c4e:	f001 0107 	and.w	r1, r1, #7
 8001c52:	b145      	cbz	r5, 8001c66 <ssd1306_DrawPixel+0x2a>
        color = (SSD1306_COLOR)!color;
    }
    
    // Draw in the right color
    if(color == White) {
 8001c54:	b94a      	cbnz	r2, 8001c6a <ssd1306_DrawPixel+0x2e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c56:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	5c22      	ldrb	r2, [r4, r0]
 8001c5e:	408b      	lsls	r3, r1
 8001c60:	4313      	orrs	r3, r2
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c62:	5423      	strb	r3, [r4, r0]
    }
}
 8001c64:	bd30      	pop	{r4, r5, pc}
    if(color == White) {
 8001c66:	2a01      	cmp	r2, #1
 8001c68:	d0f5      	beq.n	8001c56 <ssd1306_DrawPixel+0x1a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001c70:	5c23      	ldrb	r3, [r4, r0]
 8001c72:	408a      	lsls	r2, r1
 8001c74:	ea23 0302 	bic.w	r3, r3, r2
 8001c78:	e7f3      	b.n	8001c62 <ssd1306_DrawPixel+0x26>
 8001c7a:	bf00      	nop
 8001c7c:	20000560 	.word	0x20000560
 8001c80:	20000566 	.word	0x20000566

08001c84 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c88:	4605      	mov	r5, r0
 8001c8a:	b087      	sub	sp, #28
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c8c:	f1a5 0420 	sub.w	r4, r5, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c90:	9301      	str	r3, [sp, #4]
    if (ch < 32 || ch > 126)
 8001c92:	b2e3      	uxtb	r3, r4
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c94:	a806      	add	r0, sp, #24
    if (ch < 32 || ch > 126)
 8001c96:	2b5e      	cmp	r3, #94	@ 0x5e
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c98:	e900 0006 	stmdb	r0, {r1, r2}
    if (ch < 32 || ch > 126)
 8001c9c:	d842      	bhi.n	8001d24 <ssd1306_WriteChar+0xa0>
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c9e:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8001d28 <ssd1306_WriteChar+0xa4>
 8001ca2:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8001ca6:	f8b9 a000 	ldrh.w	sl, [r9]
 8001caa:	eb0a 0306 	add.w	r3, sl, r6
 8001cae:	2b80      	cmp	r3, #128	@ 0x80
 8001cb0:	dc38      	bgt.n	8001d24 <ssd1306_WriteChar+0xa0>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001cb2:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8001cb6:	f89d b011 	ldrb.w	fp, [sp, #17]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	eb03 020b 	add.w	r2, r3, fp
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001cc0:	2a40      	cmp	r2, #64	@ 0x40
 8001cc2:	dc2f      	bgt.n	8001d24 <ssd1306_WriteChar+0xa0>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001cc4:	f04f 0800 	mov.w	r8, #0
 8001cc8:	fb0b f404 	mul.w	r4, fp, r4
 8001ccc:	0064      	lsls	r4, r4, #1
 8001cce:	45c3      	cmp	fp, r8
 8001cd0:	d806      	bhi.n	8001ce0 <ssd1306_WriteChar+0x5c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001cd2:	4456      	add	r6, sl
 8001cd4:	f8a9 6000 	strh.w	r6, [r9]
    
    // Return written char for validation
    return ch;
}
 8001cd8:	4628      	mov	r0, r5
 8001cda:	b007      	add	sp, #28
 8001cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8001ce0:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001ce2:	9a05      	ldr	r2, [sp, #20]
 8001ce4:	5b13      	ldrh	r3, [r2, r4]
 8001ce6:	9303      	str	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ce8:	9b00      	ldr	r3, [sp, #0]
 8001cea:	eb08 0203 	add.w	r2, r8, r3
 8001cee:	b2d3      	uxtb	r3, r2
 8001cf0:	9302      	str	r3, [sp, #8]
        for(j = 0; j < Font.FontWidth; j++) {
 8001cf2:	42be      	cmp	r6, r7
 8001cf4:	d803      	bhi.n	8001cfe <ssd1306_WriteChar+0x7a>
    for(i = 0; i < Font.FontHeight; i++) {
 8001cf6:	f108 0801 	add.w	r8, r8, #1
 8001cfa:	3402      	adds	r4, #2
 8001cfc:	e7e7      	b.n	8001cce <ssd1306_WriteChar+0x4a>
            if((b << j) & 0x8000)  {
 8001cfe:	9b03      	ldr	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d00:	eb07 000a 	add.w	r0, r7, sl
            if((b << j) & 0x8000)  {
 8001d04:	fa03 f207 	lsl.w	r2, r3, r7
 8001d08:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d0a:	bf56      	itet	pl
 8001d0c:	9b01      	ldrpl	r3, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d0e:	9a01      	ldrmi	r2, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d10:	fab3 f283 	clzpl	r2, r3
 8001d14:	9902      	ldr	r1, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d16:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d18:	bf58      	it	pl
 8001d1a:	0952      	lsrpl	r2, r2, #5
 8001d1c:	f7ff ff8e 	bl	8001c3c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001d20:	3701      	adds	r7, #1
 8001d22:	e7e6      	b.n	8001cf2 <ssd1306_WriteChar+0x6e>
        return 0;
 8001d24:	2500      	movs	r5, #0
 8001d26:	e7d7      	b.n	8001cd8 <ssd1306_WriteChar+0x54>
 8001d28:	20000560 	.word	0x20000560

08001d2c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d2e:	466d      	mov	r5, sp
 8001d30:	461e      	mov	r6, r3
 8001d32:	e885 0006 	stmia.w	r5, {r1, r2}
 8001d36:	1e44      	subs	r4, r0, #1
    // Write until null-byte
    while (*str) {
 8001d38:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001d3c:	b140      	cbz	r0, 8001d50 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d3e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001d42:	4633      	mov	r3, r6
 8001d44:	f7ff ff9e 	bl	8001c84 <ssd1306_WriteChar>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	7820      	ldrb	r0, [r4, #0]
 8001d4c:	4283      	cmp	r3, r0
 8001d4e:	d0f3      	beq.n	8001d38 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8001d50:	b002      	add	sp, #8
 8001d52:	bd70      	pop	{r4, r5, r6, pc}

08001d54 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8001d54:	4b01      	ldr	r3, [pc, #4]	@ (8001d5c <ssd1306_SetCursor+0x8>)
 8001d56:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8001d58:	8059      	strh	r1, [r3, #2]
}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000560 	.word	0x20000560

08001d60 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <HAL_MspInit+0x3c>)
{
 8001d62:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	619a      	str	r2, [r3, #24]
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	f002 0201 	and.w	r2, r2, #1
 8001d72:	9200      	str	r2, [sp, #0]
 8001d74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001d7c:	61da      	str	r2, [r3, #28]
 8001d7e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d80:	4a07      	ldr	r2, [pc, #28]	@ (8001da0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d8a:	6853      	ldr	r3, [r2, #4]
 8001d8c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	b002      	add	sp, #8
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000

08001da4 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	2210      	movs	r2, #16
{
 8001da6:	b530      	push	{r4, r5, lr}
 8001da8:	4605      	mov	r5, r0
 8001daa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	eb0d 0002 	add.w	r0, sp, r2
 8001db0:	2100      	movs	r1, #0
 8001db2:	f003 fc80 	bl	80056b6 <memset>
  if(hadc->Instance==ADC1)
 8001db6:	682b      	ldr	r3, [r5, #0]
 8001db8:	4a30      	ldr	r2, [pc, #192]	@ (8001e7c <HAL_ADC_MspInit+0xd8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d13e      	bne.n	8001e3c <HAL_ADC_MspInit+0x98>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dbe:	4b30      	ldr	r3, [pc, #192]	@ (8001e80 <HAL_ADC_MspInit+0xdc>)
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc0:	2130      	movs	r1, #48	@ 0x30
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dc2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	482f      	ldr	r0, [pc, #188]	@ (8001e84 <HAL_ADC_MspInit+0xe0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dca:	619a      	str	r2, [r3, #24]
 8001dcc:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001dce:	4c2e      	ldr	r4, [pc, #184]	@ (8001e88 <HAL_ADC_MspInit+0xe4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dd0:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001dd4:	9200      	str	r2, [sp, #0]
 8001dd6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	f042 0204 	orr.w	r2, r2, #4
 8001dde:	619a      	str	r2, [r3, #24]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	a904      	add	r1, sp, #16
 8001df2:	f000 ffad 	bl	8002d50 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001df6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfa:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfe:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e00:	f44f 6e80 	mov.w	lr, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e04:	e9c4 c203 	strd	ip, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e08:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e0a:	4820      	ldr	r0, [pc, #128]	@ (8001e8c <HAL_ADC_MspInit+0xe8>)
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e0c:	e9c4 e205 	strd	lr, r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e10:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e14:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e16:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e18:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e1a:	f000 fe31 	bl	8002a80 <HAL_DMA_Init>
 8001e1e:	b108      	cbz	r0, 8001e24 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001e20:	f7ff fe52 	bl	8001ac8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e24:	622c      	str	r4, [r5, #32]
 8001e26:	6265      	str	r5, [r4, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2012      	movs	r0, #18
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	f000 fdd5 	bl	80029dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e32:	2012      	movs	r0, #18
 8001e34:	f000 fe02 	bl	8002a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e38:	b009      	add	sp, #36	@ 0x24
 8001e3a:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8001e3c:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <HAL_ADC_MspInit+0xec>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d1fa      	bne.n	8001e38 <HAL_ADC_MspInit+0x94>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e42:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <HAL_ADC_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	480f      	ldr	r0, [pc, #60]	@ (8001e84 <HAL_ADC_MspInit+0xe0>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e46:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e4e:	619a      	str	r2, [r3, #24]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001e56:	9202      	str	r2, [sp, #8]
 8001e58:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	699a      	ldr	r2, [r3, #24]
 8001e5c:	f042 0204 	orr.w	r2, r2, #4
 8001e60:	619a      	str	r2, [r3, #24]
 8001e62:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e64:	220e      	movs	r2, #14
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	9303      	str	r3, [sp, #12]
 8001e6c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f000 ff6c 	bl	8002d50 <HAL_GPIO_Init>
 8001e78:	e7d6      	b.n	8001e28 <HAL_ADC_MspInit+0x84>
 8001e7a:	bf00      	nop
 8001e7c:	40012400 	.word	0x40012400
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010800 	.word	0x40010800
 8001e88:	200004bc 	.word	0x200004bc
 8001e8c:	40020008 	.word	0x40020008
 8001e90:	40012800 	.word	0x40012800

08001e94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e94:	b510      	push	{r4, lr}
 8001e96:	4604      	mov	r4, r0
 8001e98:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	a802      	add	r0, sp, #8
 8001ea0:	f003 fc09 	bl	80056b6 <memset>
  if(hi2c->Instance==I2C1)
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_I2C_MspInit+0x68>)
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d124      	bne.n	8001ef6 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eac:	4c14      	ldr	r4, [pc, #80]	@ (8001f00 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eae:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	4813      	ldr	r0, [pc, #76]	@ (8001f04 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	f043 0308 	orr.w	r3, r3, #8
 8001eba:	61a3      	str	r3, [r4, #24]
 8001ebc:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebe:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f000 ff3d 	bl	8002d50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <HAL_I2C_MspInit+0x74>)
 8001ed8:	6853      	ldr	r3, [r2, #4]
 8001eda:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee4:	69e3      	ldr	r3, [r4, #28]
 8001ee6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eea:	61e3      	str	r3, [r4, #28]
 8001eec:	69e3      	ldr	r3, [r4, #28]
 8001eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ef6:	b006      	add	sp, #24
 8001ef8:	bd10      	pop	{r4, pc}
 8001efa:	bf00      	nop
 8001efc:	40005400 	.word	0x40005400
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010c00 	.word	0x40010c00
 8001f08:	40010000 	.word	0x40010000

08001f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM1)
 8001f0e:	6803      	ldr	r3, [r0, #0]
 8001f10:	4a25      	ldr	r2, [pc, #148]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x9c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10c      	bne.n	8001f30 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f16:	4b25      	ldr	r3, [pc, #148]	@ (8001fac <HAL_TIM_Base_MspInit+0xa0>)
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f1e:	619a      	str	r2, [r3, #24]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f2a:	b005      	add	sp, #20
 8001f2c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f34:	d115      	bne.n	8001f62 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f36:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001f3a:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f3c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f44:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f46:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f48:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f52:	f000 fd43 	bl	80029dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f56:	201c      	movs	r0, #28
}
 8001f58:	b005      	add	sp, #20
 8001f5a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f5e:	f000 bd6d 	b.w	8002a3c <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 8001f62:	4a13      	ldr	r2, [pc, #76]	@ (8001fb0 <HAL_TIM_Base_MspInit+0xa4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d110      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f68:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_TIM_Base_MspInit+0xa0>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f6a:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	f042 0202 	orr.w	r2, r2, #2
 8001f72:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f76:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f78:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	9302      	str	r3, [sp, #8]
 8001f80:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f82:	f000 fd2b 	bl	80029dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f86:	201d      	movs	r0, #29
 8001f88:	e7e6      	b.n	8001f58 <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM4)
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb4 <HAL_TIM_Base_MspInit+0xa8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d1cc      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_TIM_Base_MspInit+0xa0>)
 8001f92:	69da      	ldr	r2, [r3, #28]
 8001f94:	f042 0204 	orr.w	r2, r2, #4
 8001f98:	61da      	str	r2, [r3, #28]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	9303      	str	r3, [sp, #12]
 8001fa2:	9b03      	ldr	r3, [sp, #12]
}
 8001fa4:	e7c1      	b.n	8001f2a <HAL_TIM_Base_MspInit+0x1e>
 8001fa6:	bf00      	nop
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40000800 	.word	0x40000800

08001fb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb8:	b510      	push	{r4, lr}
 8001fba:	4604      	mov	r4, r0
 8001fbc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	a802      	add	r0, sp, #8
 8001fc4:	f003 fb77 	bl	80056b6 <memset>
  if(htim->Instance==TIM1)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	4a14      	ldr	r2, [pc, #80]	@ (800201c <HAL_TIM_MspPostInit+0x64>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d115      	bne.n	8001ffc <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <HAL_TIM_MspPostInit+0x68>)
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	f042 0204 	orr.w	r2, r2, #4
 8001fd8:	619a      	str	r2, [r3, #24]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|BEEP_Pin;
 8001fe4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 8001fe8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001fec:	480d      	ldr	r0, [pc, #52]	@ (8002024 <HAL_TIM_MspPostInit+0x6c>)
 8001fee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f000 feac 	bl	8002d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ff8:	b006      	add	sp, #24
 8001ffa:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <HAL_TIM_MspPostInit+0x70>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d1fa      	bne.n	8001ff8 <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <HAL_TIM_MspPostInit+0x68>)
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	f042 0204 	orr.w	r2, r2, #4
 800200a:	619a      	str	r2, [r3, #24]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 8002016:	2340      	movs	r3, #64	@ 0x40
 8002018:	e7e6      	b.n	8001fe8 <HAL_TIM_MspPostInit+0x30>
 800201a:	bf00      	nop
 800201c:	40012c00 	.word	0x40012c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40010800 	.word	0x40010800
 8002028:	40000400 	.word	0x40000400

0800202c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	2710      	movs	r7, #16
{
 8002030:	4605      	mov	r5, r0
 8002032:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	463a      	mov	r2, r7
 8002036:	2100      	movs	r1, #0
 8002038:	eb0d 0007 	add.w	r0, sp, r7
 800203c:	f003 fb3b 	bl	80056b6 <memset>
  if(huart->Instance==USART1)
 8002040:	682b      	ldr	r3, [r5, #0]
 8002042:	4a48      	ldr	r2, [pc, #288]	@ (8002164 <HAL_UART_MspInit+0x138>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d130      	bne.n	80020aa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002048:	4b47      	ldr	r3, [pc, #284]	@ (8002168 <HAL_UART_MspInit+0x13c>)
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2040      	movs	r0, #64	@ 0x40
    __HAL_RCC_USART1_CLK_ENABLE();
 800204c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	eb0d 0107 	add.w	r1, sp, r7
    __HAL_RCC_USART1_CLK_ENABLE();
 8002052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002056:	619a      	str	r2, [r3, #24]
 8002058:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205a:	2480      	movs	r4, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 800205c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002060:	9200      	str	r2, [sp, #0]
 8002062:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	f042 0208 	orr.w	r2, r2, #8
 800206a:	619a      	str	r2, [r3, #24]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	483b      	ldr	r0, [pc, #236]	@ (800216c <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002080:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f000 fe65 	bl	8002d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002086:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	4838      	ldr	r0, [pc, #224]	@ (800216c <HAL_UART_MspInit+0x140>)
 800208a:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208e:	e9cd 4304 	strd	r4, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f000 fe5c 	bl	8002d50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002098:	4a35      	ldr	r2, [pc, #212]	@ (8002170 <HAL_UART_MspInit+0x144>)
 800209a:	6853      	ldr	r3, [r2, #4]
 800209c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020a6:	b009      	add	sp, #36	@ 0x24
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART3)
 80020aa:	4a32      	ldr	r2, [pc, #200]	@ (8002174 <HAL_UART_MspInit+0x148>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d1fa      	bne.n	80020a6 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002168 <HAL_UART_MspInit+0x13c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	482c      	ldr	r0, [pc, #176]	@ (800216c <HAL_UART_MspInit+0x140>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ba:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80020be:	61da      	str	r2, [r3, #28]
 80020c0:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c2:	2600      	movs	r6, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80020c4:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80020c8:	9202      	str	r2, [sp, #8]
 80020ca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80020ce:	4c2a      	ldr	r4, [pc, #168]	@ (8002178 <HAL_UART_MspInit+0x14c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d0:	f042 0208 	orr.w	r2, r2, #8
 80020d4:	619a      	str	r2, [r3, #24]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	9303      	str	r3, [sp, #12]
 80020de:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ec:	f000 fe30 	bl	8002d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	481d      	ldr	r0, [pc, #116]	@ (800216c <HAL_UART_MspInit+0x140>)
 80020f6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f8:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f000 fe27 	bl	8002d50 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002102:	4b1e      	ldr	r3, [pc, #120]	@ (800217c <HAL_UART_MspInit+0x150>)
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002104:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002106:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800210a:	2380      	movs	r3, #128	@ 0x80
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800210c:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002110:	e9c4 3603 	strd	r3, r6, [r4, #12]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002114:	60a6      	str	r6, [r4, #8]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002116:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002118:	f000 fcb2 	bl	8002a80 <HAL_DMA_Init>
 800211c:	b108      	cbz	r0, 8002122 <HAL_UART_MspInit+0xf6>
      Error_Handler();
 800211e:	f7ff fcd3 	bl	8001ac8 <Error_Handler>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002122:	2300      	movs	r3, #0
 8002124:	4a16      	ldr	r2, [pc, #88]	@ (8002180 <HAL_UART_MspInit+0x154>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002126:	63ac      	str	r4, [r5, #56]	@ 0x38
 8002128:	6265      	str	r5, [r4, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800212a:	4c16      	ldr	r4, [pc, #88]	@ (8002184 <HAL_UART_MspInit+0x158>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800212c:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002130:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002132:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002136:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002138:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800213a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800213e:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002140:	6163      	str	r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002142:	f000 fc9d 	bl	8002a80 <HAL_DMA_Init>
 8002146:	b108      	cbz	r0, 800214c <HAL_UART_MspInit+0x120>
      Error_Handler();
 8002148:	f7ff fcbe 	bl	8001ac8 <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2027      	movs	r0, #39	@ 0x27
 8002150:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002152:	63ec      	str	r4, [r5, #60]	@ 0x3c
 8002154:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002156:	f000 fc41 	bl	80029dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800215a:	2027      	movs	r0, #39	@ 0x27
 800215c:	f000 fc6e 	bl	8002a3c <HAL_NVIC_EnableIRQ>
}
 8002160:	e7a1      	b.n	80020a6 <HAL_UART_MspInit+0x7a>
 8002162:	bf00      	nop
 8002164:	40013800 	.word	0x40013800
 8002168:	40021000 	.word	0x40021000
 800216c:	40010c00 	.word	0x40010c00
 8002170:	40010000 	.word	0x40010000
 8002174:	40004800 	.word	0x40004800
 8002178:	20000274 	.word	0x20000274
 800217c:	4002001c 	.word	0x4002001c
 8002180:	40020030 	.word	0x40020030
 8002184:	20000230 	.word	0x20000230

08002188 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler>

0800218a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <HardFault_Handler>

0800218c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <MemManage_Handler>

0800218e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <BusFault_Handler>

08002190 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <UsageFault_Handler>

08002192 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	4770      	bx	lr

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002194:	4770      	bx	lr

08002196 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002196:	4770      	bx	lr

08002198 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002198:	f000 b8e8 	b.w	800236c <HAL_IncTick>

0800219c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800219c:	4801      	ldr	r0, [pc, #4]	@ (80021a4 <DMA1_Channel1_IRQHandler+0x8>)
 800219e:	f000 bd43 	b.w	8002c28 <HAL_DMA_IRQHandler>
 80021a2:	bf00      	nop
 80021a4:	200004bc 	.word	0x200004bc

080021a8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80021a8:	4801      	ldr	r0, [pc, #4]	@ (80021b0 <DMA1_Channel2_IRQHandler+0x8>)
 80021aa:	f000 bd3d 	b.w	8002c28 <HAL_DMA_IRQHandler>
 80021ae:	bf00      	nop
 80021b0:	20000274 	.word	0x20000274

080021b4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021b4:	4801      	ldr	r0, [pc, #4]	@ (80021bc <DMA1_Channel3_IRQHandler+0x8>)
 80021b6:	f000 bd37 	b.w	8002c28 <HAL_DMA_IRQHandler>
 80021ba:	bf00      	nop
 80021bc:	20000230 	.word	0x20000230

080021c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80021c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021c2:	4804      	ldr	r0, [pc, #16]	@ (80021d4 <ADC1_2_IRQHandler+0x14>)
 80021c4:	f000 f928 	bl	8002418 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80021c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 80021cc:	4802      	ldr	r0, [pc, #8]	@ (80021d8 <ADC1_2_IRQHandler+0x18>)
 80021ce:	f000 b923 	b.w	8002418 <HAL_ADC_IRQHandler>
 80021d2:	bf00      	nop
 80021d4:	20000530 	.word	0x20000530
 80021d8:	20000500 	.word	0x20000500

080021dc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021dc:	4801      	ldr	r0, [pc, #4]	@ (80021e4 <TIM2_IRQHandler+0x8>)
 80021de:	f001 bcb4 	b.w	8003b4a <HAL_TIM_IRQHandler>
 80021e2:	bf00      	nop
 80021e4:	200003d8 	.word	0x200003d8

080021e8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021e8:	4801      	ldr	r0, [pc, #4]	@ (80021f0 <TIM3_IRQHandler+0x8>)
 80021ea:	f001 bcae 	b.w	8003b4a <HAL_TIM_IRQHandler>
 80021ee:	bf00      	nop
 80021f0:	20000390 	.word	0x20000390

080021f4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021f4:	4801      	ldr	r0, [pc, #4]	@ (80021fc <USART3_IRQHandler+0x8>)
 80021f6:	f002 b907 	b.w	8004408 <HAL_UART_IRQHandler>
 80021fa:	bf00      	nop
 80021fc:	200002b8 	.word	0x200002b8

08002200 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002200:	2001      	movs	r0, #1
 8002202:	4770      	bx	lr

08002204 <_kill>:

int _kill(int pid, int sig)
{
 8002204:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002206:	f003 faa9 	bl	800575c <__errno>
 800220a:	2316      	movs	r3, #22
 800220c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800220e:	f04f 30ff 	mov.w	r0, #4294967295
 8002212:	bd08      	pop	{r3, pc}

08002214 <_exit>:

void _exit (int status)
{
 8002214:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002216:	f003 faa1 	bl	800575c <__errno>
 800221a:	2316      	movs	r3, #22
 800221c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800221e:	e7fe      	b.n	800221e <_exit+0xa>

08002220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	460d      	mov	r5, r1
 8002224:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002226:	460e      	mov	r6, r1
 8002228:	1b73      	subs	r3, r6, r5
 800222a:	429c      	cmp	r4, r3
 800222c:	dc01      	bgt.n	8002232 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800222e:	4620      	mov	r0, r4
 8002230:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8002232:	f3af 8000 	nop.w
 8002236:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223a:	e7f5      	b.n	8002228 <_read+0x8>

0800223c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	460d      	mov	r5, r1
 8002240:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	460e      	mov	r6, r1
 8002244:	1b73      	subs	r3, r6, r5
 8002246:	429c      	cmp	r4, r3
 8002248:	dc01      	bgt.n	800224e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800224a:	4620      	mov	r0, r4
 800224c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800224e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002252:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	e7f5      	b.n	8002244 <_write+0x8>

08002258 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	4770      	bx	lr

0800225e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800225e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8002262:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002264:	604b      	str	r3, [r1, #4]
}
 8002266:	4770      	bx	lr

08002268 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002268:	2001      	movs	r0, #1
 800226a:	4770      	bx	lr

0800226c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800226c:	2000      	movs	r0, #0
 800226e:	4770      	bx	lr

08002270 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002270:	4a0b      	ldr	r2, [pc, #44]	@ (80022a0 <_sbrk+0x30>)
{
 8002272:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002274:	6811      	ldr	r1, [r2, #0]
{
 8002276:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002278:	b909      	cbnz	r1, 800227e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800227a:	490a      	ldr	r1, [pc, #40]	@ (80022a4 <_sbrk+0x34>)
 800227c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227e:	6810      	ldr	r0, [r2, #0]
 8002280:	4909      	ldr	r1, [pc, #36]	@ (80022a8 <_sbrk+0x38>)
 8002282:	4c0a      	ldr	r4, [pc, #40]	@ (80022ac <_sbrk+0x3c>)
 8002284:	4403      	add	r3, r0
 8002286:	1b09      	subs	r1, r1, r4
 8002288:	428b      	cmp	r3, r1
 800228a:	d906      	bls.n	800229a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800228c:	f003 fa66 	bl	800575c <__errno>
 8002290:	230c      	movs	r3, #12
 8002292:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002294:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002298:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800229a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800229c:	e7fc      	b.n	8002298 <_sbrk+0x28>
 800229e:	bf00      	nop
 80022a0:	20000968 	.word	0x20000968
 80022a4:	20000ac0 	.word	0x20000ac0
 80022a8:	20005000 	.word	0x20005000
 80022ac:	00000400 	.word	0x00000400

080022b0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b0:	4770      	bx	lr
	...

080022b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022b4:	f7ff fffc 	bl	80022b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80022b8:	480b      	ldr	r0, [pc, #44]	@ (80022e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022ba:	490c      	ldr	r1, [pc, #48]	@ (80022ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022bc:	4a0c      	ldr	r2, [pc, #48]	@ (80022f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c0:	e002      	b.n	80022c8 <LoopCopyDataInit>

080022c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c6:	3304      	adds	r3, #4

080022c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022cc:	d3f9      	bcc.n	80022c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ce:	4a09      	ldr	r2, [pc, #36]	@ (80022f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022d0:	4c09      	ldr	r4, [pc, #36]	@ (80022f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d4:	e001      	b.n	80022da <LoopFillZerobss>

080022d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d8:	3204      	adds	r2, #4

080022da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022dc:	d3fb      	bcc.n	80022d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022de:	f003 fa43 	bl	8005768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022e2:	f7ff f8bb 	bl	800145c <main>
  bx lr
 80022e6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80022e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ec:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80022f0:	0800ad18 	.word	0x0800ad18
  ldr r2, =_sbss
 80022f4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80022f8:	20000abc 	.word	0x20000abc

080022fc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <CAN1_RX1_IRQHandler>
	...

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002302:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <HAL_InitTick+0x3c>)
{
 8002304:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800230c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002310:	4a0b      	ldr	r2, [pc, #44]	@ (8002340 <HAL_InitTick+0x40>)
 8002312:	6810      	ldr	r0, [r2, #0]
 8002314:	fbb0 f0f3 	udiv	r0, r0, r3
 8002318:	f000 fb9e 	bl	8002a58 <HAL_SYSTICK_Config>
 800231c:	4604      	mov	r4, r0
 800231e:	b958      	cbnz	r0, 8002338 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002320:	2d0f      	cmp	r5, #15
 8002322:	d809      	bhi.n	8002338 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002324:	4602      	mov	r2, r0
 8002326:	4629      	mov	r1, r5
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f000 fb56 	bl	80029dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002330:	4620      	mov	r0, r4
 8002332:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <HAL_InitTick+0x44>)
 8002334:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002336:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002338:	2001      	movs	r0, #1
 800233a:	e7fc      	b.n	8002336 <HAL_InitTick+0x36>
 800233c:	20000030 	.word	0x20000030
 8002340:	2000002c 	.word	0x2000002c
 8002344:	20000034 	.word	0x20000034

08002348 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002348:	4a07      	ldr	r2, [pc, #28]	@ (8002368 <HAL_Init+0x20>)
{
 800234a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800234c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002350:	f043 0310 	orr.w	r3, r3, #16
 8002354:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002356:	f000 fb2f 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800235a:	200f      	movs	r0, #15
 800235c:	f7ff ffd0 	bl	8002300 <HAL_InitTick>
  HAL_MspInit();
 8002360:	f7ff fcfe 	bl	8001d60 <HAL_MspInit>
}
 8002364:	2000      	movs	r0, #0
 8002366:	bd08      	pop	{r3, pc}
 8002368:	40022000 	.word	0x40022000

0800236c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800236c:	4a03      	ldr	r2, [pc, #12]	@ (800237c <HAL_IncTick+0x10>)
 800236e:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <HAL_IncTick+0x14>)
 8002370:	6811      	ldr	r1, [r2, #0]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	440b      	add	r3, r1
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	2000096c 	.word	0x2000096c
 8002380:	20000030 	.word	0x20000030

08002384 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002384:	4b01      	ldr	r3, [pc, #4]	@ (800238c <HAL_GetTick+0x8>)
 8002386:	6818      	ldr	r0, [r3, #0]
}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000096c 	.word	0x2000096c

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002394:	f7ff fff6 	bl	8002384 <HAL_GetTick>
 8002398:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800239c:	bf1e      	ittt	ne
 800239e:	4b04      	ldrne	r3, [pc, #16]	@ (80023b0 <HAL_Delay+0x20>)
 80023a0:	781b      	ldrbne	r3, [r3, #0]
 80023a2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a4:	f7ff ffee 	bl	8002384 <HAL_GetTick>
 80023a8:	1b43      	subs	r3, r0, r5
 80023aa:	42a3      	cmp	r3, r4
 80023ac:	d3fa      	bcc.n	80023a4 <HAL_Delay+0x14>
  {
  }
}
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
 80023b0:	20000030 	.word	0x20000030

080023b4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023b4:	6803      	ldr	r3, [r0, #0]
 80023b6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 80023b8:	4770      	bx	lr

080023ba <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 80023ba:	4770      	bx	lr

080023bc <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 80023be:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023c2:	f012 0f50 	tst.w	r2, #80	@ 0x50
 80023c6:	d11b      	bne.n	8002400 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	6892      	ldr	r2, [r2, #8]
 80023d4:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80023d8:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80023dc:	d10c      	bne.n	80023f8 <ADC_DMAConvCplt+0x3c>
 80023de:	7b1a      	ldrb	r2, [r3, #12]
 80023e0:	b952      	cbnz	r2, 80023f8 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ec:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ee:	bf5e      	ittt	pl
 80023f0:	6a9a      	ldrpl	r2, [r3, #40]	@ 0x28
 80023f2:	f042 0201 	orrpl.w	r2, r2, #1
 80023f6:	629a      	strpl	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ffde 	bl	80023ba <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023fe:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002400:	6a1b      	ldr	r3, [r3, #32]
}
 8002402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002408:	4718      	bx	r3

0800240a <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 800240a:	4770      	bx	lr

0800240c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800240c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800240e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002410:	f7ff fffb 	bl	800240a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002414:	bd08      	pop	{r3, pc}

08002416 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8002416:	4770      	bx	lr

08002418 <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 8002418:	6803      	ldr	r3, [r0, #0]
{
 800241a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 800241c:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800241e:	685e      	ldr	r6, [r3, #4]
{
 8002420:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002422:	06b0      	lsls	r0, r6, #26
 8002424:	d526      	bpl.n	8002474 <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002426:	07a9      	lsls	r1, r5, #30
 8002428:	d524      	bpl.n	8002474 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800242a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800242c:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800242e:	bf5e      	ittt	pl
 8002430:	6aa2      	ldrpl	r2, [r4, #40]	@ 0x28
 8002432:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8002436:	62a2      	strpl	r2, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800243e:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002442:	d110      	bne.n	8002466 <HAL_ADC_IRQHandler+0x4e>
 8002444:	7b22      	ldrb	r2, [r4, #12]
 8002446:	b972      	cbnz	r2, 8002466 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	f022 0220 	bic.w	r2, r2, #32
 800244e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002450:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002452:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002456:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002458:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800245a:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800245c:	bf5e      	ittt	pl
 800245e:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8002460:	f043 0301 	orrpl.w	r3, r3, #1
 8002464:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff ffa7 	bl	80023ba <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800246c:	f06f 0212 	mvn.w	r2, #18
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002474:	0631      	lsls	r1, r6, #24
 8002476:	d530      	bpl.n	80024da <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002478:	076a      	lsls	r2, r5, #29
 800247a:	d52e      	bpl.n	80024da <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800247c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800247e:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002480:	bf5e      	ittt	pl
 8002482:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8002484:	f443 5300 	orrpl.w	r3, r3, #8192	@ 0x2000
 8002488:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
 8002492:	f5b2 4fe0 	cmp.w	r2, #28672	@ 0x7000
 8002496:	d00a      	beq.n	80024ae <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002498:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800249a:	0550      	lsls	r0, r2, #21
 800249c:	d416      	bmi.n	80024cc <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80024a4:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80024a8:	d110      	bne.n	80024cc <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80024aa:	7b22      	ldrb	r2, [r4, #12]
 80024ac:	b972      	cbnz	r2, 80024cc <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024b4:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80024b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80024b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024bc:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80024c0:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c2:	bf5e      	ittt	pl
 80024c4:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 80024c6:	f043 0301 	orrpl.w	r3, r3, #1
 80024ca:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024cc:	4620      	mov	r0, r4
 80024ce:	f000 fa71 	bl	80029b4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024d2:	f06f 020c 	mvn.w	r2, #12
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80024da:	0672      	lsls	r2, r6, #25
 80024dc:	d50c      	bpl.n	80024f8 <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80024de:	07eb      	lsls	r3, r5, #31
 80024e0:	d50a      	bpl.n	80024f8 <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024e4:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ea:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024ec:	f7ff ff93 	bl	8002416 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024f0:	f06f 0201 	mvn.w	r2, #1
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	601a      	str	r2, [r3, #0]
}
 80024f8:	bd70      	pop	{r4, r5, r6, pc}

080024fa <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80024fa:	4770      	bx	lr

080024fc <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80024fe:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002500:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002506:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002508:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002510:	f7ff fff3 	bl	80024fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002514:	bd08      	pop	{r3, pc}
	...

08002518 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002518:	2300      	movs	r3, #0
{ 
 800251a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800251c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800251e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 8002522:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002524:	2b01      	cmp	r3, #1
 8002526:	d06c      	beq.n	8002602 <HAL_ADC_ConfigChannel+0xea>
 8002528:	2301      	movs	r3, #1
 800252a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 800252e:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002530:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8002532:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002534:	6808      	ldr	r0, [r1, #0]
 8002536:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 800253a:	d822      	bhi.n	8002582 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800253c:	261f      	movs	r6, #31
 800253e:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8002540:	3b05      	subs	r3, #5
 8002542:	409e      	lsls	r6, r3
 8002544:	ea25 0506 	bic.w	r5, r5, r6
 8002548:	fa00 f303 	lsl.w	r3, r0, r3
 800254c:	432b      	orrs	r3, r5
 800254e:	6353      	str	r3, [r2, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002550:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002552:	688b      	ldr	r3, [r1, #8]
 8002554:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8002558:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800255c:	d929      	bls.n	80025b2 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800255e:	68d6      	ldr	r6, [r2, #12]
 8002560:	3d1e      	subs	r5, #30
 8002562:	40a9      	lsls	r1, r5
 8002564:	ea26 0101 	bic.w	r1, r6, r1
 8002568:	40ab      	lsls	r3, r5
 800256a:	430b      	orrs	r3, r1
 800256c:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800256e:	f1a0 0310 	sub.w	r3, r0, #16
 8002572:	2b01      	cmp	r3, #1
 8002574:	d925      	bls.n	80025c2 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002576:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002578:	2300      	movs	r3, #0
 800257a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 800257e:	b002      	add	sp, #8
 8002580:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002582:	2d0c      	cmp	r5, #12
 8002584:	f04f 051f 	mov.w	r5, #31
 8002588:	d809      	bhi.n	800259e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800258a:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 800258c:	3b23      	subs	r3, #35	@ 0x23
 800258e:	409d      	lsls	r5, r3
 8002590:	ea26 0505 	bic.w	r5, r6, r5
 8002594:	fa00 f303 	lsl.w	r3, r0, r3
 8002598:	432b      	orrs	r3, r5
 800259a:	6313      	str	r3, [r2, #48]	@ 0x30
 800259c:	e7d8      	b.n	8002550 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800259e:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 80025a0:	3b41      	subs	r3, #65	@ 0x41
 80025a2:	409d      	lsls	r5, r3
 80025a4:	ea26 0505 	bic.w	r5, r6, r5
 80025a8:	fa00 f303 	lsl.w	r3, r0, r3
 80025ac:	432b      	orrs	r3, r5
 80025ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80025b0:	e7ce      	b.n	8002550 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025b2:	6910      	ldr	r0, [r2, #16]
 80025b4:	40a9      	lsls	r1, r5
 80025b6:	ea20 0101 	bic.w	r1, r0, r1
 80025ba:	40ab      	lsls	r3, r5
 80025bc:	430b      	orrs	r3, r1
 80025be:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025c0:	e7d9      	b.n	8002576 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_ADC_ConfigChannel+0xf0>)
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d116      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025c8:	6893      	ldr	r3, [r2, #8]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	d4d3      	bmi.n	8002576 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025ce:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d0:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025d6:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d8:	d1cd      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025da:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <HAL_ADC_ConfigChannel+0xf4>)
 80025dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002610 <HAL_ADC_ConfigChannel+0xf8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80025e4:	220a      	movs	r2, #10
 80025e6:	4353      	muls	r3, r2
            wait_loop_index--;
 80025e8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80025ea:	9b01      	ldr	r3, [sp, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0c2      	beq.n	8002576 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80025f0:	9b01      	ldr	r3, [sp, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	e7f8      	b.n	80025e8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80025f8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fa:	f043 0320 	orr.w	r3, r3, #32
 80025fe:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002600:	e7ba      	b.n	8002578 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8002602:	2002      	movs	r0, #2
 8002604:	e7bb      	b.n	800257e <HAL_ADC_ConfigChannel+0x66>
 8002606:	bf00      	nop
 8002608:	40012400 	.word	0x40012400
 800260c:	2000002c 	.word	0x2000002c
 8002610:	000f4240 	.word	0x000f4240

08002614 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8002614:	2300      	movs	r3, #0
{
 8002616:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002618:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800261a:	6803      	ldr	r3, [r0, #0]
{
 800261c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	07d2      	lsls	r2, r2, #31
 8002622:	d502      	bpl.n	800262a <ADC_Enable+0x16>
  return HAL_OK;
 8002624:	2000      	movs	r0, #0
}
 8002626:	b003      	add	sp, #12
 8002628:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002632:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <ADC_Enable+0x70>)
 8002634:	4a14      	ldr	r2, [pc, #80]	@ (8002688 <ADC_Enable+0x74>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800263c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800263e:	9b01      	ldr	r3, [sp, #4]
 8002640:	b9e3      	cbnz	r3, 800267c <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8002642:	f7ff fe9f 	bl	8002384 <HAL_GetTick>
 8002646:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	07db      	lsls	r3, r3, #31
 800264e:	d4e9      	bmi.n	8002624 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002650:	f7ff fe98 	bl	8002384 <HAL_GetTick>
 8002654:	1b40      	subs	r0, r0, r5
 8002656:	2802      	cmp	r0, #2
 8002658:	d9f6      	bls.n	8002648 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f013 0301 	ands.w	r3, r3, #1
 8002662:	d1f1      	bne.n	8002648 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002664:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8002666:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002668:	f042 0210 	orr.w	r2, r2, #16
 800266c:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8002670:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800267a:	e7d4      	b.n	8002626 <ADC_Enable+0x12>
      wait_loop_index--;
 800267c:	9b01      	ldr	r3, [sp, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	e7dc      	b.n	800263c <ADC_Enable+0x28>
 8002682:	bf00      	nop
 8002684:	2000002c 	.word	0x2000002c
 8002688:	000f4240 	.word	0x000f4240

0800268c <HAL_ADC_Start>:
{
 800268c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800268e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8002692:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002694:	2b01      	cmp	r3, #1
 8002696:	d054      	beq.n	8002742 <HAL_ADC_Start+0xb6>
 8002698:	2301      	movs	r3, #1
 800269a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800269e:	f7ff ffb9 	bl	8002614 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d149      	bne.n	800273a <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80026a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026a8:	4a27      	ldr	r2, [pc, #156]	@ (8002748 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80026aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b6:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d104      	bne.n	80026c8 <HAL_ADC_Start+0x3c>
 80026be:	4923      	ldr	r1, [pc, #140]	@ (800274c <HAL_ADC_Start+0xc0>)
 80026c0:	684a      	ldr	r2, [r1, #4]
 80026c2:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80026c6:	d12e      	bne.n	8002726 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026c8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80026ca:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80026ce:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026d0:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026d2:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026d4:	bf41      	itttt	mi
 80026d6:	6aa2      	ldrmi	r2, [r4, #40]	@ 0x28
 80026d8:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 80026dc:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 80026e0:	62a2      	strmi	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80026e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026e8:	bf1c      	itt	ne
 80026ea:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 80026ec:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 80026f2:	2200      	movs	r2, #0
 80026f4:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026f8:	f06f 0202 	mvn.w	r2, #2
 80026fc:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002704:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002708:	d113      	bne.n	8002732 <HAL_ADC_Start+0xa6>
 800270a:	4a0f      	ldr	r2, [pc, #60]	@ (8002748 <HAL_ADC_Start+0xbc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d105      	bne.n	800271c <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002710:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8002714:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002716:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 800271a:	d10a      	bne.n	8002732 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002726:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002728:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800272c:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800272e:	684a      	ldr	r2, [r1, #4]
 8002730:	e7cf      	b.n	80026d2 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002738:	e7f3      	b.n	8002722 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800273a:	2300      	movs	r3, #0
 800273c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8002740:	e7f0      	b.n	8002724 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8002742:	2002      	movs	r0, #2
 8002744:	e7ee      	b.n	8002724 <HAL_ADC_Start+0x98>
 8002746:	bf00      	nop
 8002748:	40012800 	.word	0x40012800
 800274c:	40012400 	.word	0x40012400

08002750 <HAL_ADC_Start_DMA>:
{
 8002750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002754:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <HAL_ADC_Start_DMA+0x108>)
{
 8002756:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002758:	6802      	ldr	r2, [r0, #0]
{
 800275a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800275c:	429a      	cmp	r2, r3
{
 800275e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002760:	d002      	beq.n	8002768 <HAL_ADC_Start_DMA+0x18>
 8002762:	493e      	ldr	r1, [pc, #248]	@ (800285c <HAL_ADC_Start_DMA+0x10c>)
 8002764:	428a      	cmp	r2, r1
 8002766:	d103      	bne.n	8002770 <HAL_ADC_Start_DMA+0x20>
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 800276e:	d16e      	bne.n	800284e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8002770:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002774:	2b01      	cmp	r3, #1
 8002776:	d06c      	beq.n	8002852 <HAL_ADC_Start_DMA+0x102>
 8002778:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800277a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800277c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002780:	f7ff ff48 	bl	8002614 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002784:	4606      	mov	r6, r0
 8002786:	2800      	cmp	r0, #0
 8002788:	d15d      	bne.n	8002846 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800278a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800278c:	6821      	ldr	r1, [r4, #0]
 800278e:	4b33      	ldr	r3, [pc, #204]	@ (800285c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8002790:	f425 6570 	bic.w	r5, r5, #3840	@ 0xf00
 8002794:	f025 0501 	bic.w	r5, r5, #1
 8002798:	f445 7580 	orr.w	r5, r5, #256	@ 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800279c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800279e:	62a5      	str	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027a0:	d104      	bne.n	80027ac <HAL_ADC_Start_DMA+0x5c>
 80027a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002858 <HAL_ADC_Start_DMA+0x108>)
 80027a4:	6853      	ldr	r3, [r2, #4]
 80027a6:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 80027aa:	d13e      	bne.n	800282a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80027ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027b2:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027b4:	684b      	ldr	r3, [r1, #4]
 80027b6:	055a      	lsls	r2, r3, #21
 80027b8:	d505      	bpl.n	80027c6 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80027bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027c4:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027c8:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ca:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027ce:	bf18      	it	ne
 80027d0:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027d2:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027d4:	bf18      	it	ne
 80027d6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80027da:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 80027dc:	2300      	movs	r3, #0
 80027de:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027e4:	314c      	adds	r1, #76	@ 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027e6:	6283      	str	r3, [r0, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <HAL_ADC_Start_DMA+0x114>)
 80027ea:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <HAL_ADC_Start_DMA+0x118>)
 80027ee:	6303      	str	r3, [r0, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027f0:	f06f 0302 	mvn.w	r3, #2
 80027f4:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027f8:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80027fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002800:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002804:	4643      	mov	r3, r8
 8002806:	f000 f96d 	bl	8002ae4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002812:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	bf0c      	ite	eq
 800281a:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800281e:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	4630      	mov	r0, r6
 8002826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800282a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800282c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002830:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002832:	6853      	ldr	r3, [r2, #4]
 8002834:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002836:	bf41      	itttt	mi
 8002838:	6aa0      	ldrmi	r0, [r4, #40]	@ 0x28
 800283a:	f420 5040 	bicmi.w	r0, r0, #12288	@ 0x3000
 800283e:	f440 5080 	orrmi.w	r0, r0, #4096	@ 0x1000
 8002842:	62a0      	strmi	r0, [r4, #40]	@ 0x28
 8002844:	e7bf      	b.n	80027c6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8002846:	2300      	movs	r3, #0
 8002848:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800284c:	e7ea      	b.n	8002824 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800284e:	2601      	movs	r6, #1
 8002850:	e7e8      	b.n	8002824 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002852:	2602      	movs	r6, #2
 8002854:	e7e6      	b.n	8002824 <HAL_ADC_Start_DMA+0xd4>
 8002856:	bf00      	nop
 8002858:	40012400 	.word	0x40012400
 800285c:	40012800 	.word	0x40012800
 8002860:	080023bd 	.word	0x080023bd
 8002864:	0800240d 	.word	0x0800240d
 8002868:	080024fd 	.word	0x080024fd

0800286c <ADC_ConversionStop_Disable>:
{
 800286c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800286e:	6803      	ldr	r3, [r0, #0]
{
 8002870:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	07d1      	lsls	r1, r2, #31
 8002876:	d401      	bmi.n	800287c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002878:	2000      	movs	r0, #0
}
 800287a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002884:	f7ff fd7e 	bl	8002384 <HAL_GetTick>
 8002888:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	07db      	lsls	r3, r3, #31
 8002890:	d5f2      	bpl.n	8002878 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002892:	f7ff fd77 	bl	8002384 <HAL_GetTick>
 8002896:	1b40      	subs	r0, r0, r5
 8002898:	2802      	cmp	r0, #2
 800289a:	d9f6      	bls.n	800288a <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	07da      	lsls	r2, r3, #31
 80028a2:	d5f2      	bpl.n	800288a <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 80028a6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a8:	f043 0310 	orr.w	r3, r3, #16
 80028ac:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80028b6:	e7e0      	b.n	800287a <ADC_ConversionStop_Disable+0xe>

080028b8 <HAL_ADC_Init>:
{
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80028ba:	4604      	mov	r4, r0
 80028bc:	2800      	cmp	r0, #0
 80028be:	d06d      	beq.n	800299c <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80028c2:	b923      	cbnz	r3, 80028ce <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80028c4:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80028c6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 80028ca:	f7ff fa6b 	bl	8001da4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7ff ffcc 	bl	800286c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80028d6:	f013 0310 	ands.w	r3, r3, #16
 80028da:	d161      	bne.n	80029a0 <HAL_ADC_Init+0xe8>
 80028dc:	2800      	cmp	r0, #0
 80028de:	d15f      	bne.n	80029a0 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 80028e0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028e2:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80028e4:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80028e8:	f022 0202 	bic.w	r2, r2, #2
 80028ec:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028f0:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028f2:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80028f4:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028f6:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028f8:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028fa:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028fe:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002902:	d036      	beq.n	8002972 <HAL_ADC_Init+0xba>
 8002904:	1e77      	subs	r7, r6, #1
 8002906:	427d      	negs	r5, r7
 8002908:	417d      	adcs	r5, r7
 800290a:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800290c:	7d27      	ldrb	r7, [r4, #20]
 800290e:	2f01      	cmp	r7, #1
 8002910:	d106      	bne.n	8002920 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002912:	bb82      	cbnz	r2, 8002976 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002914:	69a2      	ldr	r2, [r4, #24]
 8002916:	3a01      	subs	r2, #1
 8002918:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 800291c:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002920:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002922:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002926:	6857      	ldr	r7, [r2, #4]
 8002928:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 800292c:	ea45 0507 	orr.w	r5, r5, r7
 8002930:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002932:	6897      	ldr	r7, [r2, #8]
 8002934:	4d1d      	ldr	r5, [pc, #116]	@ (80029ac <HAL_ADC_Init+0xf4>)
 8002936:	ea05 0507 	and.w	r5, r5, r7
 800293a:	ea45 0501 	orr.w	r5, r5, r1
 800293e:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002940:	d001      	beq.n	8002946 <HAL_ADC_Init+0x8e>
 8002942:	2e01      	cmp	r6, #1
 8002944:	d102      	bne.n	800294c <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002946:	6923      	ldr	r3, [r4, #16]
 8002948:	3b01      	subs	r3, #1
 800294a:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800294c:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800294e:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 8002952:	432b      	orrs	r3, r5
 8002954:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002956:	6892      	ldr	r2, [r2, #8]
 8002958:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <HAL_ADC_Init+0xf8>)
 800295a:	4013      	ands	r3, r2
 800295c:	4299      	cmp	r1, r3
 800295e:	d113      	bne.n	8002988 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8002960:	2300      	movs	r3, #0
 8002962:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002964:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002972:	4635      	mov	r5, r6
 8002974:	e7ca      	b.n	800290c <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002976:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002978:	f042 0220 	orr.w	r2, r2, #32
 800297c:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8002986:	e7cb      	b.n	8002920 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8002988:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800298a:	f023 0312 	bic.w	r3, r3, #18
 800298e:	f043 0310 	orr.w	r3, r3, #16
 8002992:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 800299c:	2001      	movs	r0, #1
 800299e:	e7e7      	b.n	8002970 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80029a2:	f043 0310 	orr.w	r3, r3, #16
 80029a6:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 80029a8:	e7f8      	b.n	800299c <HAL_ADC_Init+0xe4>
 80029aa:	bf00      	nop
 80029ac:	ffe1f7fd 	.word	0xffe1f7fd
 80029b0:	ff1f0efe 	.word	0xff1f0efe

080029b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b8:	4907      	ldr	r1, [pc, #28]	@ (80029d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029ba:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029bc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029be:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029c6:	0412      	lsls	r2, r2, #16
 80029c8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80029d4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029dc:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029de:	b530      	push	{r4, r5, lr}
 80029e0:	68dc      	ldr	r4, [r3, #12]
 80029e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	bf28      	it	cs
 80029f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f8:	bf94      	ite	ls
 80029fa:	2400      	movls	r4, #0
 80029fc:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fe:	fa05 f303 	lsl.w	r3, r5, r3
 8002a02:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a06:	40a5      	lsls	r5, r4
 8002a08:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002a0e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a14:	bfac      	ite	ge
 8002a16:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	4a07      	ldrlt	r2, [pc, #28]	@ (8002a38 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	bfab      	itete	ge
 8002a24:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a28:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a30:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a32:	bd30      	pop	{r4, r5, pc}
 8002a34:	e000ed00 	.word	0xe000ed00
 8002a38:	e000ed14 	.word	0xe000ed14

08002a3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	db07      	blt.n	8002a50 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a40:	2301      	movs	r3, #1
 8002a42:	0941      	lsrs	r1, r0, #5
 8002a44:	4a03      	ldr	r2, [pc, #12]	@ (8002a54 <HAL_NVIC_EnableIRQ+0x18>)
 8002a46:	f000 001f 	and.w	r0, r0, #31
 8002a4a:	4083      	lsls	r3, r0
 8002a4c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	3801      	subs	r0, #1
 8002a5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002a5e:	d20b      	bcs.n	8002a78 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a60:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	21f0      	movs	r1, #240	@ 0xf0
 8002a66:	4a05      	ldr	r2, [pc, #20]	@ (8002a7c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a68:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a6e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a70:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a72:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a74:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a76:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002a78:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a80:	4603      	mov	r3, r0
{
 8002a82:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8002a84:	b340      	cbz	r0, 8002ad8 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a86:	2114      	movs	r1, #20
 8002a88:	6800      	ldr	r0, [r0, #0]
 8002a8a:	4a14      	ldr	r2, [pc, #80]	@ (8002adc <HAL_DMA_Init+0x5c>)
 8002a8c:	4402      	add	r2, r0
 8002a8e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a96:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <HAL_DMA_Init+0x60>)
 8002a98:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002aa0:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8002aa4:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8002aa8:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aaa:	4322      	orrs	r2, r4
 8002aac:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002aae:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab2:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab4:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ab6:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aba:	4322      	orrs	r2, r4
 8002abc:	699c      	ldr	r4, [r3, #24]
 8002abe:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac0:	69dc      	ldr	r4, [r3, #28]
 8002ac2:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8002ac4:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ac6:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac8:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aca:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002acc:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ace:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 8002ad6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ad8:	2001      	movs	r0, #1
 8002ada:	e7fc      	b.n	8002ad6 <HAL_DMA_Init+0x56>
 8002adc:	bffdfff8 	.word	0xbffdfff8
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ae6:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002aea:	2c01      	cmp	r4, #1
 8002aec:	d034      	beq.n	8002b58 <HAL_DMA_Start_IT+0x74>
 8002aee:	2401      	movs	r4, #1
 8002af0:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002af4:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8002af8:	2c01      	cmp	r4, #1
 8002afa:	b2e5      	uxtb	r5, r4
 8002afc:	f04f 0400 	mov.w	r4, #0
 8002b00:	d128      	bne.n	8002b54 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b02:	2602      	movs	r6, #2
 8002b04:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b0a:	6804      	ldr	r4, [r0, #0]
 8002b0c:	6826      	ldr	r6, [r4, #0]
 8002b0e:	f026 0601 	bic.w	r6, r6, #1
 8002b12:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b14:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8002b18:	40bd      	lsls	r5, r7
 8002b1a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b1c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b1e:	6843      	ldr	r3, [r0, #4]
 8002b20:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002b22:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b24:	bf0b      	itete	eq
 8002b26:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002b28:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002b2a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002b2c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002b2e:	b14b      	cbz	r3, 8002b44 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b38:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6023      	str	r3, [r4, #0]
}
 8002b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	f043 030a 	orr.w	r3, r3, #10
 8002b52:	e7f0      	b.n	8002b36 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8002b54:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8002b58:	2002      	movs	r0, #2
 8002b5a:	e7f2      	b.n	8002b42 <HAL_DMA_Start_IT+0x5e>

08002b5c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5c:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8002b60:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b62:	2a02      	cmp	r2, #2
 8002b64:	d006      	beq.n	8002b74 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b66:	2204      	movs	r2, #4
 8002b68:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8002b6a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002b72:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b74:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b76:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b78:	6811      	ldr	r1, [r2, #0]
 8002b7a:	f021 010e 	bic.w	r1, r1, #14
 8002b7e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002b80:	6811      	ldr	r1, [r2, #0]
 8002b82:	f021 0101 	bic.w	r1, r1, #1
 8002b86:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b88:	2101      	movs	r1, #1
 8002b8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b90:	6042      	str	r2, [r0, #4]
  return status; 
 8002b92:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002b94:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8002b98:	e7e8      	b.n	8002b6c <HAL_DMA_Abort+0x10>
	...

08002b9c <HAL_DMA_Abort_IT>:
{  
 8002b9c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b9e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d003      	beq.n	8002bae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
}
 8002bac:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bae:	6803      	ldr	r3, [r0, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f022 020e 	bic.w	r2, r2, #14
 8002bb6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bc0:	4a17      	ldr	r2, [pc, #92]	@ (8002c20 <HAL_DMA_Abort_IT+0x84>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <HAL_DMA_Abort_IT+0x6a>
 8002bc6:	3214      	adds	r2, #20
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d01e      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x6e>
 8002bcc:	3214      	adds	r2, #20
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x72>
 8002bd2:	3214      	adds	r2, #20
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d01d      	beq.n	8002c14 <HAL_DMA_Abort_IT+0x78>
 8002bd8:	3214      	adds	r2, #20
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01d      	beq.n	8002c1a <HAL_DMA_Abort_IT+0x7e>
 8002bde:	3214      	adds	r2, #20
 8002be0:	4293      	cmp	r3, r2
 8002be2:	bf14      	ite	ne
 8002be4:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8002be8:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <HAL_DMA_Abort_IT+0x88>)
 8002bee:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002bfc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002bfe:	b103      	cbz	r3, 8002c02 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8002c00:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2000      	movs	r0, #0
 8002c04:	e7d2      	b.n	8002bac <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c06:	2301      	movs	r3, #1
 8002c08:	e7f0      	b.n	8002bec <HAL_DMA_Abort_IT+0x50>
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	e7ee      	b.n	8002bec <HAL_DMA_Abort_IT+0x50>
 8002c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c12:	e7eb      	b.n	8002bec <HAL_DMA_Abort_IT+0x50>
 8002c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c18:	e7e8      	b.n	8002bec <HAL_DMA_Abort_IT+0x50>
 8002c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c1e:	e7e5      	b.n	8002bec <HAL_DMA_Abort_IT+0x50>
 8002c20:	40020008 	.word	0x40020008
 8002c24:	40020000 	.word	0x40020000

08002c28 <HAL_DMA_IRQHandler>:
{
 8002c28:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c2a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c2c:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c2e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c30:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002c32:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c34:	4095      	lsls	r5, r2
 8002c36:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002c38:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c3a:	d032      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x7a>
 8002c3c:	074d      	lsls	r5, r1, #29
 8002c3e:	d530      	bpl.n	8002ca2 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c44:	bf5e      	ittt	pl
 8002c46:	681a      	ldrpl	r2, [r3, #0]
 8002c48:	f022 0204 	bicpl.w	r2, r2, #4
 8002c4c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d48 <HAL_DMA_IRQHandler+0x120>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d019      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x60>
 8002c54:	3214      	adds	r2, #20
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d018      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x64>
 8002c5a:	3214      	adds	r2, #20
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d017      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x68>
 8002c60:	3214      	adds	r2, #20
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d017      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x6e>
 8002c66:	3214      	adds	r2, #20
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d017      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x74>
 8002c6c:	3214      	adds	r2, #20
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	bf14      	ite	ne
 8002c72:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8002c76:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8002c7a:	4a34      	ldr	r2, [pc, #208]	@ (8002d4c <HAL_DMA_IRQHandler+0x124>)
 8002c7c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002c7e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d05e      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x11a>
}
 8002c84:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002c86:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c88:	2304      	movs	r3, #4
 8002c8a:	e7f6      	b.n	8002c7a <HAL_DMA_IRQHandler+0x52>
 8002c8c:	2340      	movs	r3, #64	@ 0x40
 8002c8e:	e7f4      	b.n	8002c7a <HAL_DMA_IRQHandler+0x52>
 8002c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c94:	e7f1      	b.n	8002c7a <HAL_DMA_IRQHandler+0x52>
 8002c96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c9a:	e7ee      	b.n	8002c7a <HAL_DMA_IRQHandler+0x52>
 8002c9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ca0:	e7eb      	b.n	8002c7a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ca2:	2502      	movs	r5, #2
 8002ca4:	4095      	lsls	r5, r2
 8002ca6:	4225      	tst	r5, r4
 8002ca8:	d035      	beq.n	8002d16 <HAL_DMA_IRQHandler+0xee>
 8002caa:	078d      	lsls	r5, r1, #30
 8002cac:	d533      	bpl.n	8002d16 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	0694      	lsls	r4, r2, #26
 8002cb2:	d406      	bmi.n	8002cc2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	f022 020a 	bic.w	r2, r2, #10
 8002cba:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cc2:	4a21      	ldr	r2, [pc, #132]	@ (8002d48 <HAL_DMA_IRQHandler+0x120>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d019      	beq.n	8002cfc <HAL_DMA_IRQHandler+0xd4>
 8002cc8:	3214      	adds	r2, #20
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d018      	beq.n	8002d00 <HAL_DMA_IRQHandler+0xd8>
 8002cce:	3214      	adds	r2, #20
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d017      	beq.n	8002d04 <HAL_DMA_IRQHandler+0xdc>
 8002cd4:	3214      	adds	r2, #20
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d017      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xe2>
 8002cda:	3214      	adds	r2, #20
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d017      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xe8>
 8002ce0:	3214      	adds	r2, #20
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	bf14      	ite	ne
 8002ce6:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8002cea:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8002cee:	4a17      	ldr	r2, [pc, #92]	@ (8002d4c <HAL_DMA_IRQHandler+0x124>)
 8002cf0:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002cf8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002cfa:	e7c1      	b.n	8002c80 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e7f6      	b.n	8002cee <HAL_DMA_IRQHandler+0xc6>
 8002d00:	2320      	movs	r3, #32
 8002d02:	e7f4      	b.n	8002cee <HAL_DMA_IRQHandler+0xc6>
 8002d04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d08:	e7f1      	b.n	8002cee <HAL_DMA_IRQHandler+0xc6>
 8002d0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d0e:	e7ee      	b.n	8002cee <HAL_DMA_IRQHandler+0xc6>
 8002d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d14:	e7eb      	b.n	8002cee <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d16:	2508      	movs	r5, #8
 8002d18:	4095      	lsls	r5, r2
 8002d1a:	4225      	tst	r5, r4
 8002d1c:	d011      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x11a>
 8002d1e:	0709      	lsls	r1, r1, #28
 8002d20:	d50f      	bpl.n	8002d42 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	f021 010e 	bic.w	r1, r1, #14
 8002d28:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	fa03 f202 	lsl.w	r2, r3, r2
 8002d30:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d32:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002d34:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002d3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002d40:	e79e      	b.n	8002c80 <HAL_DMA_IRQHandler+0x58>
}
 8002d42:	bc70      	pop	{r4, r5, r6}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40020008 	.word	0x40020008
 8002d4c:	40020000 	.word	0x40020000

08002d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d54:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002d56:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d58:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8002ee4 <HAL_GPIO_Init+0x194>
 8002d5c:	4b62      	ldr	r3, [pc, #392]	@ (8002ee8 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8002d5e:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8002eec <HAL_GPIO_Init+0x19c>
 8002d62:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8002ef0 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d66:	680a      	ldr	r2, [r1, #0]
 8002d68:	fa32 f506 	lsrs.w	r5, r2, r6
 8002d6c:	d102      	bne.n	8002d74 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8002d6e:	b003      	add	sp, #12
 8002d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002d74:	2701      	movs	r7, #1
 8002d76:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d78:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8002d7c:	ea37 0202 	bics.w	r2, r7, r2
 8002d80:	d17a      	bne.n	8002e78 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8002d82:	684a      	ldr	r2, [r1, #4]
 8002d84:	2a03      	cmp	r2, #3
 8002d86:	d807      	bhi.n	8002d98 <HAL_GPIO_Init+0x48>
 8002d88:	3a01      	subs	r2, #1
 8002d8a:	2a02      	cmp	r2, #2
 8002d8c:	f200 8083 	bhi.w	8002e96 <HAL_GPIO_Init+0x146>
 8002d90:	e8df f002 	tbb	[pc, r2]
 8002d94:	9792      	.short	0x9792
 8002d96:	9d          	.byte	0x9d
 8002d97:	00          	.byte	0x00
 8002d98:	2a12      	cmp	r2, #18
 8002d9a:	f000 8095 	beq.w	8002ec8 <HAL_GPIO_Init+0x178>
 8002d9e:	d86d      	bhi.n	8002e7c <HAL_GPIO_Init+0x12c>
 8002da0:	2a11      	cmp	r2, #17
 8002da2:	f000 808b 	beq.w	8002ebc <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da6:	2dff      	cmp	r5, #255	@ 0xff
 8002da8:	bf98      	it	ls
 8002daa:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dac:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002db0:	bf88      	it	hi
 8002db2:	f100 0904 	addhi.w	r9, r0, #4
 8002db6:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dba:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dbe:	bf88      	it	hi
 8002dc0:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dc2:	fa0b fa02 	lsl.w	sl, fp, r2
 8002dc6:	ea27 070a 	bic.w	r7, r7, sl
 8002dca:	fa04 f202 	lsl.w	r2, r4, r2
 8002dce:	4317      	orrs	r7, r2
 8002dd0:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd4:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002dd8:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8002ddc:	d04c      	beq.n	8002e78 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dde:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8002de2:	f026 0703 	bic.w	r7, r6, #3
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	f8cc 2018 	str.w	r2, [ip, #24]
 8002dee:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8002df2:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8002df6:	f002 0201 	and.w	r2, r2, #1
 8002dfa:	9201      	str	r2, [sp, #4]
 8002dfc:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e00:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e04:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e06:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002e0a:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e0c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002e10:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e14:	4a37      	ldr	r2, [pc, #220]	@ (8002ef4 <HAL_GPIO_Init+0x1a4>)
 8002e16:	4290      	cmp	r0, r2
 8002e18:	d05d      	beq.n	8002ed6 <HAL_GPIO_Init+0x186>
 8002e1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e1e:	4290      	cmp	r0, r2
 8002e20:	d05b      	beq.n	8002eda <HAL_GPIO_Init+0x18a>
 8002e22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e26:	4290      	cmp	r0, r2
 8002e28:	d059      	beq.n	8002ede <HAL_GPIO_Init+0x18e>
 8002e2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e2e:	4290      	cmp	r0, r2
 8002e30:	bf14      	ite	ne
 8002e32:	2204      	movne	r2, #4
 8002e34:	2203      	moveq	r2, #3
 8002e36:	fa02 f20a 	lsl.w	r2, r2, sl
 8002e3a:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8002e3e:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e40:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e42:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e46:	bf14      	ite	ne
 8002e48:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e4a:	43aa      	biceq	r2, r5
 8002e4c:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e4e:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e50:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e54:	bf14      	ite	ne
 8002e56:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e58:	43aa      	biceq	r2, r5
 8002e5a:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002e5c:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e5e:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002e62:	bf14      	ite	ne
 8002e64:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e66:	43aa      	biceq	r2, r5
 8002e68:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002e6a:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e6c:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002e70:	bf14      	ite	ne
 8002e72:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e74:	43aa      	biceq	r2, r5
 8002e76:	601a      	str	r2, [r3, #0]
	position++;
 8002e78:	3601      	adds	r6, #1
 8002e7a:	e774      	b.n	8002d66 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8002e7c:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8002ef8 <HAL_GPIO_Init+0x1a8>
 8002e80:	454a      	cmp	r2, r9
 8002e82:	d008      	beq.n	8002e96 <HAL_GPIO_Init+0x146>
 8002e84:	d810      	bhi.n	8002ea8 <HAL_GPIO_Init+0x158>
 8002e86:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8002e8a:	454a      	cmp	r2, r9
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x146>
 8002e8e:	4572      	cmp	r2, lr
 8002e90:	d001      	beq.n	8002e96 <HAL_GPIO_Init+0x146>
 8002e92:	4542      	cmp	r2, r8
 8002e94:	d187      	bne.n	8002da6 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e96:	688a      	ldr	r2, [r1, #8]
 8002e98:	b1da      	cbz	r2, 8002ed2 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e9a:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e9c:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8002ea0:	bf0c      	ite	eq
 8002ea2:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8002ea4:	6147      	strne	r7, [r0, #20]
 8002ea6:	e77e      	b.n	8002da6 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8002ea8:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8002efc <HAL_GPIO_Init+0x1ac>
 8002eac:	454a      	cmp	r2, r9
 8002eae:	d0f2      	beq.n	8002e96 <HAL_GPIO_Init+0x146>
 8002eb0:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8002eb4:	454a      	cmp	r2, r9
 8002eb6:	e7ed      	b.n	8002e94 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002eb8:	68cc      	ldr	r4, [r1, #12]
          break;
 8002eba:	e774      	b.n	8002da6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ebc:	68cc      	ldr	r4, [r1, #12]
 8002ebe:	3404      	adds	r4, #4
          break;
 8002ec0:	e771      	b.n	8002da6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ec2:	68cc      	ldr	r4, [r1, #12]
 8002ec4:	3408      	adds	r4, #8
          break;
 8002ec6:	e76e      	b.n	8002da6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ec8:	68cc      	ldr	r4, [r1, #12]
 8002eca:	340c      	adds	r4, #12
          break;
 8002ecc:	e76b      	b.n	8002da6 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8002ece:	2400      	movs	r4, #0
 8002ed0:	e769      	b.n	8002da6 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ed2:	2404      	movs	r4, #4
 8002ed4:	e767      	b.n	8002da6 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	e7ad      	b.n	8002e36 <HAL_GPIO_Init+0xe6>
 8002eda:	2201      	movs	r2, #1
 8002edc:	e7ab      	b.n	8002e36 <HAL_GPIO_Init+0xe6>
 8002ede:	2202      	movs	r2, #2
 8002ee0:	e7a9      	b.n	8002e36 <HAL_GPIO_Init+0xe6>
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40010400 	.word	0x40010400
 8002eec:	10210000 	.word	0x10210000
 8002ef0:	10110000 	.word	0x10110000
 8002ef4:	40010800 	.word	0x40010800
 8002ef8:	10220000 	.word	0x10220000
 8002efc:	10310000 	.word	0x10310000

08002f00 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f00:	6883      	ldr	r3, [r0, #8]
 8002f02:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002f04:	bf14      	ite	ne
 8002f06:	2001      	movne	r0, #1
 8002f08:	2000      	moveq	r0, #0
 8002f0a:	4770      	bx	lr

08002f0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f0c:	b10a      	cbz	r2, 8002f12 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f0e:	6101      	str	r1, [r0, #16]
  }
}
 8002f10:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f12:	0409      	lsls	r1, r1, #16
 8002f14:	e7fb      	b.n	8002f0e <HAL_GPIO_WritePin+0x2>

08002f16 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f16:	6801      	ldr	r1, [r0, #0]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	694b      	ldr	r3, [r1, #20]
 8002f1c:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8002f20:	d010      	beq.n	8002f44 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f22:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8002f26:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f28:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2a:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f30:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f34:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f36:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8002f40:	2001      	movs	r0, #1
 8002f42:	4770      	bx	lr
  }
  return HAL_OK;
 8002f44:	4618      	mov	r0, r3
}
 8002f46:	4770      	bx	lr

08002f48 <I2C_WaitOnFlagUntilTimeout>:
{
 8002f48:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002f4c:	4606      	mov	r6, r0
 8002f4e:	460f      	mov	r7, r1
 8002f50:	4691      	mov	r9, r2
 8002f52:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002f58:	6833      	ldr	r3, [r6, #0]
 8002f5a:	f1ba 0f01 	cmp.w	sl, #1
 8002f5e:	bf0c      	ite	eq
 8002f60:	695c      	ldreq	r4, [r3, #20]
 8002f62:	699c      	ldrne	r4, [r3, #24]
 8002f64:	ea27 0404 	bic.w	r4, r7, r4
 8002f68:	b2a4      	uxth	r4, r4
 8002f6a:	fab4 f484 	clz	r4, r4
 8002f6e:	0964      	lsrs	r4, r4, #5
 8002f70:	45a1      	cmp	r9, r4
 8002f72:	d001      	beq.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002f74:	2000      	movs	r0, #0
 8002f76:	e025      	b.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	1c6a      	adds	r2, r5, #1
 8002f7a:	d0ee      	beq.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7c:	f7ff fa02 	bl	8002384 <HAL_GetTick>
 8002f80:	9b08      	ldr	r3, [sp, #32]
 8002f82:	1ac0      	subs	r0, r0, r3
 8002f84:	42a8      	cmp	r0, r5
 8002f86:	d801      	bhi.n	8002f8c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f88:	2d00      	cmp	r5, #0
 8002f8a:	d1e5      	bne.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f8c:	6833      	ldr	r3, [r6, #0]
 8002f8e:	f1ba 0f01 	cmp.w	sl, #1
 8002f92:	bf0c      	ite	eq
 8002f94:	695b      	ldreq	r3, [r3, #20]
 8002f96:	699b      	ldrne	r3, [r3, #24]
 8002f98:	ea27 0303 	bic.w	r3, r7, r3
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	4599      	cmp	r9, r3
 8002fa6:	d1d7      	bne.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fa8:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002faa:	2220      	movs	r2, #32
          return HAL_ERROR;
 8002fac:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fae:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fb0:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fb4:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002fba:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fbe:	f042 0220 	orr.w	r2, r2, #32
 8002fc2:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8002fc4:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fcc:	4604      	mov	r4, r0
 8002fce:	460f      	mov	r7, r1
 8002fd0:	4616      	mov	r6, r2
 8002fd2:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd4:	6825      	ldr	r5, [r4, #0]
 8002fd6:	6968      	ldr	r0, [r5, #20]
 8002fd8:	ea27 0000 	bic.w	r0, r7, r0
 8002fdc:	b280      	uxth	r0, r0
 8002fde:	b1c0      	cbz	r0, 8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe0:	696b      	ldr	r3, [r5, #20]
 8002fe2:	055a      	lsls	r2, r3, #21
 8002fe4:	d517      	bpl.n	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe6:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fee:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff0:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8002ff4:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ffa:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003002:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003004:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003008:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800300a:	2300      	movs	r3, #0
      return HAL_ERROR;
 800300c:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800300e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003016:	1c73      	adds	r3, r6, #1
 8003018:	d0dd      	beq.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7ff f9b3 	bl	8002384 <HAL_GetTick>
 800301e:	eba0 0008 	sub.w	r0, r0, r8
 8003022:	42b0      	cmp	r0, r6
 8003024:	d801      	bhi.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8003026:	2e00      	cmp	r6, #0
 8003028:	d1d4      	bne.n	8002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	ea27 0202 	bic.w	r2, r7, r2
 8003032:	b292      	uxth	r2, r2
 8003034:	2a00      	cmp	r2, #0
 8003036:	d0cd      	beq.n	8002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003038:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 800303a:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800303c:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800303e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003042:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003046:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003048:	4313      	orrs	r3, r2
 800304a:	e7dd      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800304c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	4604      	mov	r4, r0
 8003050:	460d      	mov	r5, r1
 8003052:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	d501      	bpl.n	8003060 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800305c:	2000      	movs	r0, #0
 800305e:	e01e      	b.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003060:	4620      	mov	r0, r4
 8003062:	f7ff ff58 	bl	8002f16 <I2C_IsAcknowledgeFailed>
 8003066:	b9c8      	cbnz	r0, 800309c <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003068:	1c6a      	adds	r2, r5, #1
 800306a:	d0f3      	beq.n	8003054 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7ff f98a 	bl	8002384 <HAL_GetTick>
 8003070:	1b80      	subs	r0, r0, r6
 8003072:	42a8      	cmp	r0, r5
 8003074:	d801      	bhi.n	800307a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003076:	2d00      	cmp	r5, #0
 8003078:	d1ec      	bne.n	8003054 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8003082:	d1e7      	bne.n	8003054 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003084:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003086:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003090:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003092:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003096:	f042 0220 	orr.w	r2, r2, #32
 800309a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800309c:	2001      	movs	r0, #1
}
 800309e:	bd70      	pop	{r4, r5, r6, pc}

080030a0 <I2C_RequestMemoryWrite>:
{
 80030a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030a4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a6:	6802      	ldr	r2, [r0, #0]
{
 80030a8:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030aa:	6813      	ldr	r3, [r2, #0]
{
 80030ac:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b2:	6013      	str	r3, [r2, #0]
{
 80030b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 80030b8:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ba:	463b      	mov	r3, r7
 80030bc:	2200      	movs	r2, #0
 80030be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030c2:	f8cd 8000 	str.w	r8, [sp]
{
 80030c6:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c8:	f7ff ff3e 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	b138      	cbz	r0, 80030e0 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	05db      	lsls	r3, r3, #23
 80030d4:	d502      	bpl.n	80030dc <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030da:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80030dc:	2603      	movs	r6, #3
 80030de:	e020      	b.n	8003122 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030e0:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80030e4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030e6:	463a      	mov	r2, r7
 80030e8:	4643      	mov	r3, r8
 80030ea:	4620      	mov	r0, r4
 80030ec:	4918      	ldr	r1, [pc, #96]	@ (8003150 <I2C_RequestMemoryWrite+0xb0>)
 80030ee:	f7ff ff6b 	bl	8002fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f2:	b9a8      	cbnz	r0, 8003120 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	9003      	str	r0, [sp, #12]
 80030f8:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fa:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fc:	9203      	str	r2, [sp, #12]
 80030fe:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003100:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003102:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003104:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003106:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003108:	f7ff ffa0 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 800310c:	4606      	mov	r6, r0
 800310e:	b160      	cbz	r0, 800312a <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003110:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003112:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	bf01      	itttt	eq
 8003116:	6822      	ldreq	r2, [r4, #0]
 8003118:	6813      	ldreq	r3, [r2, #0]
 800311a:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800311e:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8003120:	2601      	movs	r6, #1
}
 8003122:	4630      	mov	r0, r6
 8003124:	b005      	add	sp, #20
 8003126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800312a:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003130:	d102      	bne.n	8003138 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003132:	b2ed      	uxtb	r5, r5
 8003134:	611d      	str	r5, [r3, #16]
 8003136:	e7f4      	b.n	8003122 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003138:	0a2a      	lsrs	r2, r5, #8
 800313a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800313c:	4639      	mov	r1, r7
 800313e:	4642      	mov	r2, r8
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff ff83 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8003146:	2800      	cmp	r0, #0
 8003148:	d1e2      	bne.n	8003110 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	e7f1      	b.n	8003132 <I2C_RequestMemoryWrite+0x92>
 800314e:	bf00      	nop
 8003150:	00010002 	.word	0x00010002

08003154 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	4604      	mov	r4, r0
 8003158:	460d      	mov	r5, r1
 800315a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	075b      	lsls	r3, r3, #29
 8003162:	d501      	bpl.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003164:	2000      	movs	r0, #0
 8003166:	e01e      	b.n	80031a6 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003168:	4620      	mov	r0, r4
 800316a:	f7ff fed4 	bl	8002f16 <I2C_IsAcknowledgeFailed>
 800316e:	b9c8      	cbnz	r0, 80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003170:	1c6a      	adds	r2, r5, #1
 8003172:	d0f3      	beq.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003174:	f7ff f906 	bl	8002384 <HAL_GetTick>
 8003178:	1b80      	subs	r0, r0, r6
 800317a:	42a8      	cmp	r0, r5
 800317c:	d801      	bhi.n	8003182 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800317e:	2d00      	cmp	r5, #0
 8003180:	d1ec      	bne.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f013 0304 	ands.w	r3, r3, #4
 800318a:	d1e7      	bne.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 800318c:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800318e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003194:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800319a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	f042 0220 	orr.w	r2, r2, #32
 80031a2:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80031a4:	2001      	movs	r0, #1
}
 80031a6:	bd70      	pop	{r4, r5, r6, pc}

080031a8 <HAL_I2C_Init>:
{
 80031a8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80031aa:	4604      	mov	r4, r0
 80031ac:	b908      	cbnz	r0, 80031b2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80031ae:	2001      	movs	r0, #1
}
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80031b6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80031ba:	b91b      	cbnz	r3, 80031c4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80031bc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80031c0:	f7fe fe68 	bl	8001e94 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c4:	2324      	movs	r3, #36	@ 0x24
 80031c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031e2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031e4:	f000 fb76 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031e8:	4b3f      	ldr	r3, [pc, #252]	@ (80032e8 <HAL_I2C_Init+0x140>)
 80031ea:	6865      	ldr	r5, [r4, #4]
 80031ec:	429d      	cmp	r5, r3
 80031ee:	bf94      	ite	ls
 80031f0:	4b3e      	ldrls	r3, [pc, #248]	@ (80032ec <HAL_I2C_Init+0x144>)
 80031f2:	4b3f      	ldrhi	r3, [pc, #252]	@ (80032f0 <HAL_I2C_Init+0x148>)
 80031f4:	4298      	cmp	r0, r3
 80031f6:	bf8c      	ite	hi
 80031f8:	2300      	movhi	r3, #0
 80031fa:	2301      	movls	r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1d6      	bne.n	80031ae <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003200:	4e39      	ldr	r6, [pc, #228]	@ (80032e8 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003202:	4b3c      	ldr	r3, [pc, #240]	@ (80032f4 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003204:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800320a:	bf88      	it	hi
 800320c:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003210:	6822      	ldr	r2, [r4, #0]
 8003212:	6851      	ldr	r1, [r2, #4]
 8003214:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003218:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800321c:	bf82      	ittt	hi
 800321e:	4373      	mulhi	r3, r6
 8003220:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8003224:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003228:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800322a:	6a11      	ldr	r1, [r2, #32]
 800322c:	3301      	adds	r3, #1
 800322e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003232:	430b      	orrs	r3, r1
 8003234:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003236:	69d1      	ldr	r1, [r2, #28]
 8003238:	1e43      	subs	r3, r0, #1
 800323a:	482b      	ldr	r0, [pc, #172]	@ (80032e8 <HAL_I2C_Init+0x140>)
 800323c:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8003240:	4285      	cmp	r5, r0
 8003242:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003246:	d832      	bhi.n	80032ae <HAL_I2C_Init+0x106>
 8003248:	006d      	lsls	r5, r5, #1
 800324a:	fbb3 f3f5 	udiv	r3, r3, r5
 800324e:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8003252:	3301      	adds	r3, #1
 8003254:	4203      	tst	r3, r0
 8003256:	d042      	beq.n	80032de <HAL_I2C_Init+0x136>
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	4319      	orrs	r1, r3
 800325e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003260:	6811      	ldr	r1, [r2, #0]
 8003262:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003266:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800326a:	4303      	orrs	r3, r0
 800326c:	430b      	orrs	r3, r1
 800326e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003270:	6891      	ldr	r1, [r2, #8]
 8003272:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003276:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800327a:	4303      	orrs	r3, r0
 800327c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003280:	430b      	orrs	r3, r1
 8003282:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003284:	68d1      	ldr	r1, [r2, #12]
 8003286:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800328a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800328e:	4303      	orrs	r3, r0
 8003290:	430b      	orrs	r3, r1
 8003292:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003294:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003296:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800329e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a0:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032a6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 80032ac:	e780      	b.n	80031b0 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032ae:	68a0      	ldr	r0, [r4, #8]
 80032b0:	b950      	cbnz	r0, 80032c8 <HAL_I2C_Init+0x120>
 80032b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032b6:	fbb3 f3f5 	udiv	r3, r3, r5
 80032ba:	3301      	adds	r3, #1
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	b17b      	cbz	r3, 80032e2 <HAL_I2C_Init+0x13a>
 80032c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032c6:	e7c9      	b.n	800325c <HAL_I2C_Init+0xb4>
 80032c8:	2019      	movs	r0, #25
 80032ca:	4368      	muls	r0, r5
 80032cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80032d0:	3301      	adds	r3, #1
 80032d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d6:	b123      	cbz	r3, 80032e2 <HAL_I2C_Init+0x13a>
 80032d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032dc:	e7be      	b.n	800325c <HAL_I2C_Init+0xb4>
 80032de:	2304      	movs	r3, #4
 80032e0:	e7bc      	b.n	800325c <HAL_I2C_Init+0xb4>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e7ba      	b.n	800325c <HAL_I2C_Init+0xb4>
 80032e6:	bf00      	nop
 80032e8:	000186a0 	.word	0x000186a0
 80032ec:	001e847f 	.word	0x001e847f
 80032f0:	003d08ff 	.word	0x003d08ff
 80032f4:	000f4240 	.word	0x000f4240

080032f8 <HAL_I2C_Mem_Write>:
{
 80032f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80032fc:	4604      	mov	r4, r0
 80032fe:	4699      	mov	r9, r3
 8003300:	460f      	mov	r7, r1
 8003302:	4690      	mov	r8, r2
 8003304:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8003306:	f7ff f83d 	bl	8002384 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800330a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 800330e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003310:	2b20      	cmp	r3, #32
 8003312:	d003      	beq.n	800331c <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8003314:	2002      	movs	r0, #2
}
 8003316:	b003      	add	sp, #12
 8003318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800331c:	9000      	str	r0, [sp, #0]
 800331e:	2319      	movs	r3, #25
 8003320:	2201      	movs	r2, #1
 8003322:	4620      	mov	r0, r4
 8003324:	493a      	ldr	r1, [pc, #232]	@ (8003410 <HAL_I2C_Mem_Write+0x118>)
 8003326:	f7ff fe0f 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 800332a:	2800      	cmp	r0, #0
 800332c:	d1f2      	bne.n	8003314 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800332e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003332:	2b01      	cmp	r3, #1
 8003334:	d0ee      	beq.n	8003314 <HAL_I2C_Mem_Write+0x1c>
 8003336:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003338:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800333a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800333e:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003340:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003342:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003344:	bf58      	it	pl
 8003346:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003348:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800334a:	bf5c      	itt	pl
 800334c:	f043 0301 	orrpl.w	r3, r3, #1
 8003350:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003352:	6803      	ldr	r3, [r0, #0]
 8003354:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003358:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800335a:	2321      	movs	r3, #33	@ 0x21
 800335c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003360:	2340      	movs	r3, #64	@ 0x40
 8003362:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003366:	2300      	movs	r3, #0
 8003368:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800336a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800336c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800336e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003370:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8003374:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003376:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003378:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337a:	4b26      	ldr	r3, [pc, #152]	@ (8003414 <HAL_I2C_Mem_Write+0x11c>)
 800337c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800337e:	464b      	mov	r3, r9
 8003380:	e9cd 6500 	strd	r6, r5, [sp]
 8003384:	f7ff fe8c 	bl	80030a0 <I2C_RequestMemoryWrite>
 8003388:	2800      	cmp	r0, #0
 800338a:	d02a      	beq.n	80033e2 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 800338c:	2001      	movs	r0, #1
 800338e:	e7c2      	b.n	8003316 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003390:	f7ff fe5c 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8003394:	b140      	cbz	r0, 80033a8 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003396:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003398:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339a:	bf01      	itttt	eq
 800339c:	6822      	ldreq	r2, [r4, #0]
 800339e:	6813      	ldreq	r3, [r2, #0]
 80033a0:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80033a4:	6013      	streq	r3, [r2, #0]
 80033a6:	e7f1      	b.n	800338c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80033aa:	6827      	ldr	r7, [r4, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	f812 1b01 	ldrb.w	r1, [r2], #1
 80033b2:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80033b4:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80033b6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80033b8:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80033ba:	3a01      	subs	r2, #1
 80033bc:	b292      	uxth	r2, r2
 80033be:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033c0:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80033c2:	1e48      	subs	r0, r1, #1
 80033c4:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033c6:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80033c8:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ca:	d50a      	bpl.n	80033e2 <HAL_I2C_Mem_Write+0xea>
 80033cc:	b148      	cbz	r0, 80033e2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ce:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80033d0:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d2:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80033d4:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80033d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 80033d8:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80033de:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80033e0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033e2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e4:	462a      	mov	r2, r5
 80033e6:	4631      	mov	r1, r6
 80033e8:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1d0      	bne.n	8003390 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ee:	f7ff feb1 	bl	8003154 <I2C_WaitOnBTFFlagUntilTimeout>
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d1cf      	bne.n	8003396 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	6813      	ldr	r3, [r2, #0]
 80033fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033fe:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003400:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8003402:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003406:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800340a:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 800340e:	e782      	b.n	8003316 <HAL_I2C_Mem_Write+0x1e>
 8003410:	00100002 	.word	0x00100002
 8003414:	ffff0000 	.word	0xffff0000

08003418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800341c:	4605      	mov	r5, r0
 800341e:	b338      	cbz	r0, 8003470 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003420:	6803      	ldr	r3, [r0, #0]
 8003422:	07db      	lsls	r3, r3, #31
 8003424:	d410      	bmi.n	8003448 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003426:	682b      	ldr	r3, [r5, #0]
 8003428:	079f      	lsls	r7, r3, #30
 800342a:	d45e      	bmi.n	80034ea <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	0719      	lsls	r1, r3, #28
 8003430:	f100 8095 	bmi.w	800355e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	075a      	lsls	r2, r3, #29
 8003438:	f100 80c1 	bmi.w	80035be <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343c:	69eb      	ldr	r3, [r5, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 812c 	bne.w	800369c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8003444:	2000      	movs	r0, #0
 8003446:	e029      	b.n	800349c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003448:	4c90      	ldr	r4, [pc, #576]	@ (800368c <HAL_RCC_OscConfig+0x274>)
 800344a:	6863      	ldr	r3, [r4, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b04      	cmp	r3, #4
 8003452:	d007      	beq.n	8003464 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d10a      	bne.n	8003474 <HAL_RCC_OscConfig+0x5c>
 800345e:	6863      	ldr	r3, [r4, #4]
 8003460:	03de      	lsls	r6, r3, #15
 8003462:	d507      	bpl.n	8003474 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	039c      	lsls	r4, r3, #14
 8003468:	d5dd      	bpl.n	8003426 <HAL_RCC_OscConfig+0xe>
 800346a:	686b      	ldr	r3, [r5, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1da      	bne.n	8003426 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8003470:	2001      	movs	r0, #1
 8003472:	e013      	b.n	800349c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003474:	686b      	ldr	r3, [r5, #4]
 8003476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347a:	d112      	bne.n	80034a2 <HAL_RCC_OscConfig+0x8a>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003482:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003484:	f7fe ff7e 	bl	8002384 <HAL_GetTick>
 8003488:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	0398      	lsls	r0, r3, #14
 800348e:	d4ca      	bmi.n	8003426 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe ff78 	bl	8002384 <HAL_GetTick>
 8003494:	1b80      	subs	r0, r0, r6
 8003496:	2864      	cmp	r0, #100	@ 0x64
 8003498:	d9f7      	bls.n	800348a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800349a:	2003      	movs	r0, #3
}
 800349c:	b002      	add	sp, #8
 800349e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a2:	b99b      	cbnz	r3, 80034cc <HAL_RCC_OscConfig+0xb4>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034aa:	6023      	str	r3, [r4, #0]
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80034b4:	f7fe ff66 	bl	8002384 <HAL_GetTick>
 80034b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	0399      	lsls	r1, r3, #14
 80034be:	d5b2      	bpl.n	8003426 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fe ff60 	bl	8002384 <HAL_GetTick>
 80034c4:	1b80      	subs	r0, r0, r6
 80034c6:	2864      	cmp	r0, #100	@ 0x64
 80034c8:	d9f7      	bls.n	80034ba <HAL_RCC_OscConfig+0xa2>
 80034ca:	e7e6      	b.n	800349a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	d103      	bne.n	80034dc <HAL_RCC_OscConfig+0xc4>
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	e7cf      	b.n	800347c <HAL_RCC_OscConfig+0x64>
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e8:	e7cb      	b.n	8003482 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ea:	4c68      	ldr	r4, [pc, #416]	@ (800368c <HAL_RCC_OscConfig+0x274>)
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	f013 0f0c 	tst.w	r3, #12
 80034f2:	d007      	beq.n	8003504 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034f4:	6863      	ldr	r3, [r4, #4]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d110      	bne.n	8003520 <HAL_RCC_OscConfig+0x108>
 80034fe:	6863      	ldr	r3, [r4, #4]
 8003500:	03da      	lsls	r2, r3, #15
 8003502:	d40d      	bmi.n	8003520 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	079b      	lsls	r3, r3, #30
 8003508:	d502      	bpl.n	8003510 <HAL_RCC_OscConfig+0xf8>
 800350a:	692b      	ldr	r3, [r5, #16]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d1af      	bne.n	8003470 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	696a      	ldr	r2, [r5, #20]
 8003514:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003518:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	e785      	b.n	800342c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003520:	692a      	ldr	r2, [r5, #16]
 8003522:	4b5b      	ldr	r3, [pc, #364]	@ (8003690 <HAL_RCC_OscConfig+0x278>)
 8003524:	b16a      	cbz	r2, 8003542 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800352a:	f7fe ff2b 	bl	8002384 <HAL_GetTick>
 800352e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	079f      	lsls	r7, r3, #30
 8003534:	d4ec      	bmi.n	8003510 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003536:	f7fe ff25 	bl	8002384 <HAL_GetTick>
 800353a:	1b80      	subs	r0, r0, r6
 800353c:	2802      	cmp	r0, #2
 800353e:	d9f7      	bls.n	8003530 <HAL_RCC_OscConfig+0x118>
 8003540:	e7ab      	b.n	800349a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8003542:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003544:	f7fe ff1e 	bl	8002384 <HAL_GetTick>
 8003548:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	0798      	lsls	r0, r3, #30
 800354e:	f57f af6d 	bpl.w	800342c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003552:	f7fe ff17 	bl	8002384 <HAL_GetTick>
 8003556:	1b80      	subs	r0, r0, r6
 8003558:	2802      	cmp	r0, #2
 800355a:	d9f6      	bls.n	800354a <HAL_RCC_OscConfig+0x132>
 800355c:	e79d      	b.n	800349a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355e:	69aa      	ldr	r2, [r5, #24]
 8003560:	4e4a      	ldr	r6, [pc, #296]	@ (800368c <HAL_RCC_OscConfig+0x274>)
 8003562:	4b4b      	ldr	r3, [pc, #300]	@ (8003690 <HAL_RCC_OscConfig+0x278>)
 8003564:	b1e2      	cbz	r2, 80035a0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003566:	2201      	movs	r2, #1
 8003568:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800356c:	f7fe ff0a 	bl	8002384 <HAL_GetTick>
 8003570:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003574:	079b      	lsls	r3, r3, #30
 8003576:	d50d      	bpl.n	8003594 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003578:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800357c:	4b45      	ldr	r3, [pc, #276]	@ (8003694 <HAL_RCC_OscConfig+0x27c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	fbb3 f3f2 	udiv	r3, r3, r2
 8003584:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003586:	bf00      	nop
  }
  while (Delay --);
 8003588:	9b01      	ldr	r3, [sp, #4]
 800358a:	1e5a      	subs	r2, r3, #1
 800358c:	9201      	str	r2, [sp, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f9      	bne.n	8003586 <HAL_RCC_OscConfig+0x16e>
 8003592:	e74f      	b.n	8003434 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003594:	f7fe fef6 	bl	8002384 <HAL_GetTick>
 8003598:	1b00      	subs	r0, r0, r4
 800359a:	2802      	cmp	r0, #2
 800359c:	d9e9      	bls.n	8003572 <HAL_RCC_OscConfig+0x15a>
 800359e:	e77c      	b.n	800349a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80035a0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80035a4:	f7fe feee 	bl	8002384 <HAL_GetTick>
 80035a8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035aa:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80035ac:	079f      	lsls	r7, r3, #30
 80035ae:	f57f af41 	bpl.w	8003434 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b2:	f7fe fee7 	bl	8002384 <HAL_GetTick>
 80035b6:	1b00      	subs	r0, r0, r4
 80035b8:	2802      	cmp	r0, #2
 80035ba:	d9f6      	bls.n	80035aa <HAL_RCC_OscConfig+0x192>
 80035bc:	e76d      	b.n	800349a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035be:	4c33      	ldr	r4, [pc, #204]	@ (800368c <HAL_RCC_OscConfig+0x274>)
 80035c0:	69e3      	ldr	r3, [r4, #28]
 80035c2:	00d8      	lsls	r0, r3, #3
 80035c4:	d424      	bmi.n	8003610 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80035c6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	69e3      	ldr	r3, [r4, #28]
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	61e3      	str	r3, [r4, #28]
 80035d0:	69e3      	ldr	r3, [r4, #28]
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4e2f      	ldr	r6, [pc, #188]	@ (8003698 <HAL_RCC_OscConfig+0x280>)
 80035dc:	6833      	ldr	r3, [r6, #0]
 80035de:	05d9      	lsls	r1, r3, #23
 80035e0:	d518      	bpl.n	8003614 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e2:	68eb      	ldr	r3, [r5, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d126      	bne.n	8003636 <HAL_RCC_OscConfig+0x21e>
 80035e8:	6a23      	ldr	r3, [r4, #32]
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80035f0:	f7fe fec8 	bl	8002384 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80035f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fa:	6a23      	ldr	r3, [r4, #32]
 80035fc:	079b      	lsls	r3, r3, #30
 80035fe:	d53f      	bpl.n	8003680 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003600:	2f00      	cmp	r7, #0
 8003602:	f43f af1b 	beq.w	800343c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	69e3      	ldr	r3, [r4, #28]
 8003608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800360c:	61e3      	str	r3, [r4, #28]
 800360e:	e715      	b.n	800343c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003610:	2700      	movs	r7, #0
 8003612:	e7e2      	b.n	80035da <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003614:	6833      	ldr	r3, [r6, #0]
 8003616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800361c:	f7fe feb2 	bl	8002384 <HAL_GetTick>
 8003620:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	6833      	ldr	r3, [r6, #0]
 8003624:	05da      	lsls	r2, r3, #23
 8003626:	d4dc      	bmi.n	80035e2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003628:	f7fe feac 	bl	8002384 <HAL_GetTick>
 800362c:	eba0 0008 	sub.w	r0, r0, r8
 8003630:	2864      	cmp	r0, #100	@ 0x64
 8003632:	d9f6      	bls.n	8003622 <HAL_RCC_OscConfig+0x20a>
 8003634:	e731      	b.n	800349a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003636:	b9ab      	cbnz	r3, 8003664 <HAL_RCC_OscConfig+0x24c>
 8003638:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	6223      	str	r3, [r4, #32]
 8003644:	6a23      	ldr	r3, [r4, #32]
 8003646:	f023 0304 	bic.w	r3, r3, #4
 800364a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800364c:	f7fe fe9a 	bl	8002384 <HAL_GetTick>
 8003650:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003652:	6a23      	ldr	r3, [r4, #32]
 8003654:	0798      	lsls	r0, r3, #30
 8003656:	d5d3      	bpl.n	8003600 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fe fe94 	bl	8002384 <HAL_GetTick>
 800365c:	1b80      	subs	r0, r0, r6
 800365e:	4540      	cmp	r0, r8
 8003660:	d9f7      	bls.n	8003652 <HAL_RCC_OscConfig+0x23a>
 8003662:	e71a      	b.n	800349a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003664:	2b05      	cmp	r3, #5
 8003666:	6a23      	ldr	r3, [r4, #32]
 8003668:	d103      	bne.n	8003672 <HAL_RCC_OscConfig+0x25a>
 800366a:	f043 0304 	orr.w	r3, r3, #4
 800366e:	6223      	str	r3, [r4, #32]
 8003670:	e7ba      	b.n	80035e8 <HAL_RCC_OscConfig+0x1d0>
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	6223      	str	r3, [r4, #32]
 8003678:	6a23      	ldr	r3, [r4, #32]
 800367a:	f023 0304 	bic.w	r3, r3, #4
 800367e:	e7b6      	b.n	80035ee <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fe fe80 	bl	8002384 <HAL_GetTick>
 8003684:	1b80      	subs	r0, r0, r6
 8003686:	4540      	cmp	r0, r8
 8003688:	d9b7      	bls.n	80035fa <HAL_RCC_OscConfig+0x1e2>
 800368a:	e706      	b.n	800349a <HAL_RCC_OscConfig+0x82>
 800368c:	40021000 	.word	0x40021000
 8003690:	42420000 	.word	0x42420000
 8003694:	2000002c 	.word	0x2000002c
 8003698:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800369c:	4c2a      	ldr	r4, [pc, #168]	@ (8003748 <HAL_RCC_OscConfig+0x330>)
 800369e:	6862      	ldr	r2, [r4, #4]
 80036a0:	f002 020c 	and.w	r2, r2, #12
 80036a4:	2a08      	cmp	r2, #8
 80036a6:	d03e      	beq.n	8003726 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a8:	2200      	movs	r2, #0
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	4b27      	ldr	r3, [pc, #156]	@ (800374c <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80036ae:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b0:	d12c      	bne.n	800370c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80036b2:	f7fe fe67 	bl	8002384 <HAL_GetTick>
 80036b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	0199      	lsls	r1, r3, #6
 80036bc:	d420      	bmi.n	8003700 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036be:	6a2b      	ldr	r3, [r5, #32]
 80036c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c4:	d105      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036c6:	6862      	ldr	r2, [r4, #4]
 80036c8:	68a9      	ldr	r1, [r5, #8]
 80036ca:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80036ce:	430a      	orrs	r2, r1
 80036d0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80036d4:	6862      	ldr	r2, [r4, #4]
 80036d6:	430b      	orrs	r3, r1
 80036d8:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80036dc:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80036de:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80036e2:	4b1a      	ldr	r3, [pc, #104]	@ (800374c <HAL_RCC_OscConfig+0x334>)
 80036e4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80036e6:	f7fe fe4d 	bl	8002384 <HAL_GetTick>
 80036ea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	019a      	lsls	r2, r3, #6
 80036f0:	f53f aea8 	bmi.w	8003444 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe fe46 	bl	8002384 <HAL_GetTick>
 80036f8:	1b40      	subs	r0, r0, r5
 80036fa:	2802      	cmp	r0, #2
 80036fc:	d9f6      	bls.n	80036ec <HAL_RCC_OscConfig+0x2d4>
 80036fe:	e6cc      	b.n	800349a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe fe40 	bl	8002384 <HAL_GetTick>
 8003704:	1b80      	subs	r0, r0, r6
 8003706:	2802      	cmp	r0, #2
 8003708:	d9d6      	bls.n	80036b8 <HAL_RCC_OscConfig+0x2a0>
 800370a:	e6c6      	b.n	800349a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800370c:	f7fe fe3a 	bl	8002384 <HAL_GetTick>
 8003710:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	019b      	lsls	r3, r3, #6
 8003716:	f57f ae95 	bpl.w	8003444 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7fe fe33 	bl	8002384 <HAL_GetTick>
 800371e:	1b40      	subs	r0, r0, r5
 8003720:	2802      	cmp	r0, #2
 8003722:	d9f6      	bls.n	8003712 <HAL_RCC_OscConfig+0x2fa>
 8003724:	e6b9      	b.n	800349a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003726:	2b01      	cmp	r3, #1
 8003728:	f43f aea2 	beq.w	8003470 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 800372c:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	6a2b      	ldr	r3, [r5, #32]
 8003730:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8003734:	429a      	cmp	r2, r3
 8003736:	f47f ae9b 	bne.w	8003470 <HAL_RCC_OscConfig+0x58>
 800373a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800373c:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003740:	1ac0      	subs	r0, r0, r3
 8003742:	bf18      	it	ne
 8003744:	2001      	movne	r0, #1
 8003746:	e6a9      	b.n	800349c <HAL_RCC_OscConfig+0x84>
 8003748:	40021000 	.word	0x40021000
 800374c:	42420000 	.word	0x42420000

08003750 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003750:	4a0d      	ldr	r2, [pc, #52]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x38>)
 8003752:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003754:	f003 010c 	and.w	r1, r3, #12
 8003758:	2908      	cmp	r1, #8
 800375a:	d112      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800375c:	480b      	ldr	r0, [pc, #44]	@ (800378c <HAL_RCC_GetSysClockFreq+0x3c>)
 800375e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003762:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003764:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003766:	d509      	bpl.n	800377c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003768:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800376a:	4a09      	ldr	r2, [pc, #36]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800376c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003770:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003772:	4a08      	ldr	r2, [pc, #32]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x44>)
 8003774:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003776:	fbb0 f0f3 	udiv	r0, r0, r3
 800377a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800377c:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x48>)
 800377e:	4358      	muls	r0, r3
 8003780:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003782:	4803      	ldr	r0, [pc, #12]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000
 800378c:	0800a8d4 	.word	0x0800a8d4
 8003790:	007a1200 	.word	0x007a1200
 8003794:	0800a8d2 	.word	0x0800a8d2
 8003798:	003d0900 	.word	0x003d0900

0800379c <HAL_RCC_ClockConfig>:
{
 800379c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80037a2:	4604      	mov	r4, r0
 80037a4:	b910      	cbnz	r0, 80037ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80037a6:	2001      	movs	r0, #1
}
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4a44      	ldr	r2, [pc, #272]	@ (80038c0 <HAL_RCC_ClockConfig+0x124>)
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	428b      	cmp	r3, r1
 80037b6:	d328      	bcc.n	800380a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	6821      	ldr	r1, [r4, #0]
 80037ba:	078e      	lsls	r6, r1, #30
 80037bc:	d430      	bmi.n	8003820 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037be:	07ca      	lsls	r2, r1, #31
 80037c0:	d443      	bmi.n	800384a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c2:	4a3f      	ldr	r2, [pc, #252]	@ (80038c0 <HAL_RCC_ClockConfig+0x124>)
 80037c4:	6813      	ldr	r3, [r2, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	42ab      	cmp	r3, r5
 80037cc:	d865      	bhi.n	800389a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	4d3c      	ldr	r5, [pc, #240]	@ (80038c4 <HAL_RCC_ClockConfig+0x128>)
 80037d2:	f012 0f04 	tst.w	r2, #4
 80037d6:	d16c      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	0713      	lsls	r3, r2, #28
 80037da:	d506      	bpl.n	80037ea <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037dc:	686b      	ldr	r3, [r5, #4]
 80037de:	6922      	ldr	r2, [r4, #16]
 80037e0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80037e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80037e8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ea:	f7ff ffb1 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 80037ee:	686b      	ldr	r3, [r5, #4]
 80037f0:	4a35      	ldr	r2, [pc, #212]	@ (80038c8 <HAL_RCC_ClockConfig+0x12c>)
 80037f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80037f6:	5cd3      	ldrb	r3, [r2, r3]
 80037f8:	40d8      	lsrs	r0, r3
 80037fa:	4b34      	ldr	r3, [pc, #208]	@ (80038cc <HAL_RCC_ClockConfig+0x130>)
 80037fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80037fe:	4b34      	ldr	r3, [pc, #208]	@ (80038d0 <HAL_RCC_ClockConfig+0x134>)
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	f7fe fd7d 	bl	8002300 <HAL_InitTick>
  return HAL_OK;
 8003806:	2000      	movs	r0, #0
 8003808:	e7ce      	b.n	80037a8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	6813      	ldr	r3, [r2, #0]
 800380c:	f023 0307 	bic.w	r3, r3, #7
 8003810:	430b      	orrs	r3, r1
 8003812:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003814:	6813      	ldr	r3, [r2, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	428b      	cmp	r3, r1
 800381c:	d1c3      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xa>
 800381e:	e7cb      	b.n	80037b8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	4b28      	ldr	r3, [pc, #160]	@ (80038c4 <HAL_RCC_ClockConfig+0x128>)
 8003822:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003826:	bf1e      	ittt	ne
 8003828:	685a      	ldrne	r2, [r3, #4]
 800382a:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 800382e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003832:	bf42      	ittt	mi
 8003834:	685a      	ldrmi	r2, [r3, #4]
 8003836:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 800383a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	68a0      	ldr	r0, [r4, #8]
 8003840:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003844:	4302      	orrs	r2, r0
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	e7b9      	b.n	80037be <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384a:	6862      	ldr	r2, [r4, #4]
 800384c:	4e1d      	ldr	r6, [pc, #116]	@ (80038c4 <HAL_RCC_ClockConfig+0x128>)
 800384e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003850:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	d11a      	bne.n	800388a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003854:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	d0a5      	beq.n	80037a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003860:	f023 0303 	bic.w	r3, r3, #3
 8003864:	4313      	orrs	r3, r2
 8003866:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003868:	f7fe fd8c 	bl	8002384 <HAL_GetTick>
 800386c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	6873      	ldr	r3, [r6, #4]
 8003870:	6862      	ldr	r2, [r4, #4]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800387a:	d0a2      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387c:	f7fe fd82 	bl	8002384 <HAL_GetTick>
 8003880:	1bc0      	subs	r0, r0, r7
 8003882:	4540      	cmp	r0, r8
 8003884:	d9f3      	bls.n	800386e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003886:	2003      	movs	r0, #3
 8003888:	e78e      	b.n	80037a8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388a:	2a02      	cmp	r2, #2
 800388c:	d102      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003892:	e7e1      	b.n	8003858 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	f013 0f02 	tst.w	r3, #2
 8003898:	e7de      	b.n	8003858 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	f023 0307 	bic.w	r3, r3, #7
 80038a0:	432b      	orrs	r3, r5
 80038a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	42ab      	cmp	r3, r5
 80038ac:	f47f af7b 	bne.w	80037a6 <HAL_RCC_ClockConfig+0xa>
 80038b0:	e78d      	b.n	80037ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b2:	686b      	ldr	r3, [r5, #4]
 80038b4:	68e1      	ldr	r1, [r4, #12]
 80038b6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80038ba:	430b      	orrs	r3, r1
 80038bc:	606b      	str	r3, [r5, #4]
 80038be:	e78b      	b.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
 80038c0:	40022000 	.word	0x40022000
 80038c4:	40021000 	.word	0x40021000
 80038c8:	0800a8c2 	.word	0x0800a8c2
 80038cc:	2000002c 	.word	0x2000002c
 80038d0:	20000034 	.word	0x20000034

080038d4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038d4:	4b04      	ldr	r3, [pc, #16]	@ (80038e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80038d6:	4a05      	ldr	r2, [pc, #20]	@ (80038ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80038de:	5cd3      	ldrb	r3, [r2, r3]
 80038e0:	4a03      	ldr	r2, [pc, #12]	@ (80038f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80038e2:	6810      	ldr	r0, [r2, #0]
}
 80038e4:	40d8      	lsrs	r0, r3
 80038e6:	4770      	bx	lr
 80038e8:	40021000 	.word	0x40021000
 80038ec:	0800a8ba 	.word	0x0800a8ba
 80038f0:	2000002c 	.word	0x2000002c

080038f4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038f4:	4b04      	ldr	r3, [pc, #16]	@ (8003908 <HAL_RCC_GetPCLK2Freq+0x14>)
 80038f6:	4a05      	ldr	r2, [pc, #20]	@ (800390c <HAL_RCC_GetPCLK2Freq+0x18>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80038fe:	5cd3      	ldrb	r3, [r2, r3]
 8003900:	4a03      	ldr	r2, [pc, #12]	@ (8003910 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003902:	6810      	ldr	r0, [r2, #0]
}
 8003904:	40d8      	lsrs	r0, r3
 8003906:	4770      	bx	lr
 8003908:	40021000 	.word	0x40021000
 800390c:	0800a8ba 	.word	0x0800a8ba
 8003910:	2000002c 	.word	0x2000002c

08003914 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003914:	6803      	ldr	r3, [r0, #0]
{
 8003916:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800391a:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800391c:	07d8      	lsls	r0, r3, #31
 800391e:	d521      	bpl.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003920:	4c36      	ldr	r4, [pc, #216]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003922:	69e3      	ldr	r3, [r4, #28]
 8003924:	00d9      	lsls	r1, r3, #3
 8003926:	d42b      	bmi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003928:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	69e3      	ldr	r3, [r4, #28]
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003930:	61e3      	str	r3, [r4, #28]
 8003932:	69e3      	ldr	r3, [r4, #28]
 8003934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	4f30      	ldr	r7, [pc, #192]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	05da      	lsls	r2, r3, #23
 8003942:	d51f      	bpl.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003944:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003946:	686a      	ldr	r2, [r5, #4]
 8003948:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800394c:	d12e      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800394e:	6a23      	ldr	r3, [r4, #32]
 8003950:	686a      	ldr	r2, [r5, #4]
 8003952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003956:	4313      	orrs	r3, r2
 8003958:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800395a:	b11e      	cbz	r6, 8003964 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	69e3      	ldr	r3, [r4, #28]
 800395e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003962:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003964:	682a      	ldr	r2, [r5, #0]
 8003966:	0791      	lsls	r1, r2, #30
 8003968:	d506      	bpl.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800396a:	4924      	ldr	r1, [pc, #144]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800396c:	68a8      	ldr	r0, [r5, #8]
 800396e:	684b      	ldr	r3, [r1, #4]
 8003970:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003974:	4303      	orrs	r3, r0
 8003976:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003978:	06d3      	lsls	r3, r2, #27
 800397a:	d436      	bmi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800397c:	2000      	movs	r0, #0
 800397e:	e012      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8003980:	2600      	movs	r6, #0
 8003982:	e7db      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800398a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800398c:	f7fe fcfa 	bl	8002384 <HAL_GetTick>
 8003990:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	05db      	lsls	r3, r3, #23
 8003996:	d4d5      	bmi.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003998:	f7fe fcf4 	bl	8002384 <HAL_GetTick>
 800399c:	eba0 0008 	sub.w	r0, r0, r8
 80039a0:	2864      	cmp	r0, #100	@ 0x64
 80039a2:	d9f6      	bls.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 80039a4:	2003      	movs	r0, #3
}
 80039a6:	b002      	add	sp, #8
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ac:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d0cc      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80039b4:	2001      	movs	r0, #1
 80039b6:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ba:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039be:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039c4:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c6:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 80039ca:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039cc:	d5bf      	bpl.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80039ce:	f7fe fcd9 	bl	8002384 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80039d6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	6a23      	ldr	r3, [r4, #32]
 80039da:	0798      	lsls	r0, r3, #30
 80039dc:	d4b7      	bmi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fe fcd1 	bl	8002384 <HAL_GetTick>
 80039e2:	1bc0      	subs	r0, r0, r7
 80039e4:	4540      	cmp	r0, r8
 80039e6:	d9f7      	bls.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80039e8:	e7dc      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ea:	4a04      	ldr	r2, [pc, #16]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80039ec:	68e9      	ldr	r1, [r5, #12]
 80039ee:	6853      	ldr	r3, [r2, #4]
 80039f0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6053      	str	r3, [r2, #4]
 80039f8:	e7c0      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x68>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40007000 	.word	0x40007000
 8003a04:	42420000 	.word	0x42420000

08003a08 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a08:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0a:	6a02      	ldr	r2, [r0, #32]
{
 8003a0c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a16:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a1a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003a1e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a20:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003a22:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003a26:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a28:	4d0a      	ldr	r5, [pc, #40]	@ (8003a54 <TIM_OC1_SetConfig+0x4c>)
 8003a2a:	42a8      	cmp	r0, r5
 8003a2c:	d10b      	bne.n	8003a46 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a2e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a30:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003a34:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a36:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a3a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003a3e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a40:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a44:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a46:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a48:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a4a:	684a      	ldr	r2, [r1, #4]
 8003a4c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4e:	6203      	str	r3, [r0, #32]
}
 8003a50:	bd70      	pop	{r4, r5, r6, pc}
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00

08003a58 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a58:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a5a:	6a02      	ldr	r2, [r0, #32]
{
 8003a5c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a62:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a64:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a66:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a68:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a6a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003a6e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a70:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003a72:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a76:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a7a:	4d0b      	ldr	r5, [pc, #44]	@ (8003aa8 <TIM_OC3_SetConfig+0x50>)
 8003a7c:	42a8      	cmp	r0, r5
 8003a7e:	d10d      	bne.n	8003a9c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a80:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a86:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a8a:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a8e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003a92:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a98:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a9e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aa0:	684a      	ldr	r2, [r1, #4]
 8003aa2:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa4:	6203      	str	r3, [r0, #32]
}
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
 8003aa8:	40012c00 	.word	0x40012c00

08003aac <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aac:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aae:	6a02      	ldr	r2, [r0, #32]
{
 8003ab0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ab6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aba:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003abc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003abe:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003ac8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003acc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad0:	4d06      	ldr	r5, [pc, #24]	@ (8003aec <TIM_OC4_SetConfig+0x40>)
 8003ad2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ad4:	bf02      	ittt	eq
 8003ad6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ad8:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003adc:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ae2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ae4:	684a      	ldr	r2, [r1, #4]
 8003ae6:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae8:	6203      	str	r3, [r0, #32]
}
 8003aea:	bd30      	pop	{r4, r5, pc}
 8003aec:	40012c00 	.word	0x40012c00

08003af0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003af0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d11c      	bne.n	8003b32 <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afa:	4a0f      	ldr	r2, [pc, #60]	@ (8003b38 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	6803      	ldr	r3, [r0, #0]
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00a      	beq.n	8003b1c <HAL_TIM_Base_Start+0x2c>
 8003b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_Base_Start+0x2c>
 8003b0c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <HAL_TIM_Base_Start+0x2c>
 8003b14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d104      	bne.n	8003b26 <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b22:	2a06      	cmp	r2, #6
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b2e:	2000      	movs	r0, #0
 8003b30:	4770      	bx	lr
    return HAL_ERROR;
 8003b32:	2001      	movs	r0, #1
}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40012c00 	.word	0x40012c00

08003b3c <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8003b40:	4770      	bx	lr

08003b42 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003b44:	4770      	bx	lr

08003b46 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003b48:	4770      	bx	lr

08003b4a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b4a:	6803      	ldr	r3, [r0, #0]
{
 8003b4c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b4e:	691a      	ldr	r2, [r3, #16]
{
 8003b50:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b52:	0791      	lsls	r1, r2, #30
 8003b54:	d50e      	bpl.n	8003b74 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	0792      	lsls	r2, r2, #30
 8003b5a:	d50b      	bpl.n	8003b74 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b5c:	f06f 0202 	mvn.w	r2, #2
 8003b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b62:	2201      	movs	r2, #1
 8003b64:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	079b      	lsls	r3, r3, #30
 8003b6a:	d077      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003b6c:	f7ff ffea 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b70:	2300      	movs	r3, #0
 8003b72:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	0750      	lsls	r0, r2, #29
 8003b7a:	d510      	bpl.n	8003b9e <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	0751      	lsls	r1, r2, #29
 8003b80:	d50d      	bpl.n	8003b9e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b82:	f06f 0204 	mvn.w	r2, #4
 8003b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b88:	2202      	movs	r2, #2
 8003b8a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b8c:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b90:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003b94:	d068      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	f7ff ffd5 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	0712      	lsls	r2, r2, #28
 8003ba4:	d50f      	bpl.n	8003bc6 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	0710      	lsls	r0, r2, #28
 8003baa:	d50c      	bpl.n	8003bc6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bac:	f06f 0208 	mvn.w	r2, #8
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb6:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bba:	0799      	lsls	r1, r3, #30
 8003bbc:	d05a      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	f7ff ffc1 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	06d2      	lsls	r2, r2, #27
 8003bcc:	d510      	bpl.n	8003bf0 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	06d0      	lsls	r0, r2, #27
 8003bd2:	d50d      	bpl.n	8003bf0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bd4:	f06f 0210 	mvn.w	r2, #16
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bda:	2208      	movs	r2, #8
 8003bdc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bde:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003be0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003be6:	d04b      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003be8:	f7ff ffac 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bec:	2300      	movs	r3, #0
 8003bee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	07d1      	lsls	r1, r2, #31
 8003bf6:	d508      	bpl.n	8003c0a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	07d2      	lsls	r2, r2, #31
 8003bfc:	d505      	bpl.n	8003c0a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bfe:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c04:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c06:	f7ff ff9b 	bl	8003b40 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	0610      	lsls	r0, r2, #24
 8003c10:	d508      	bpl.n	8003c24 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	0611      	lsls	r1, r2, #24
 8003c16:	d505      	bpl.n	8003c24 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003c1c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c20:	f000 faf3 	bl	800420a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	0652      	lsls	r2, r2, #25
 8003c2a:	d508      	bpl.n	8003c3e <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	0650      	lsls	r0, r2, #25
 8003c30:	d505      	bpl.n	8003c3e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8003c36:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c38:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c3a:	f7ff ff85 	bl	8003b48 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	0691      	lsls	r1, r2, #26
 8003c44:	d522      	bpl.n	8003c8c <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	0692      	lsls	r2, r2, #26
 8003c4a:	d51f      	bpl.n	8003c8c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c4c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003c50:	4620      	mov	r0, r4
}
 8003c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003c58:	f000 bad6 	b.w	8004208 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5c:	f7ff ff71 	bl	8003b42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	4620      	mov	r0, r4
 8003c62:	f7ff ff70 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c66:	e783      	b.n	8003b70 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c68:	f7ff ff6b 	bl	8003b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff ff6a 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c72:	e792      	b.n	8003b9a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c74:	f7ff ff65 	bl	8003b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7ff ff64 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c7e:	e7a0      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c80:	f7ff ff5f 	bl	8003b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	4620      	mov	r0, r4
 8003c86:	f7ff ff5e 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c8a:	e7af      	b.n	8003bec <HAL_TIM_IRQHandler+0xa2>
}
 8003c8c:	bd10      	pop	{r4, pc}
	...

08003c90 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c90:	4a1a      	ldr	r2, [pc, #104]	@ (8003cfc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003c92:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c94:	4290      	cmp	r0, r2
 8003c96:	d00a      	beq.n	8003cae <TIM_Base_SetConfig+0x1e>
 8003c98:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003c9c:	d007      	beq.n	8003cae <TIM_Base_SetConfig+0x1e>
 8003c9e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003ca2:	4290      	cmp	r0, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_Base_SetConfig+0x1e>
 8003ca6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003caa:	4290      	cmp	r0, r2
 8003cac:	d115      	bne.n	8003cda <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003cae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003cb4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb6:	4a11      	ldr	r2, [pc, #68]	@ (8003cfc <TIM_Base_SetConfig+0x6c>)
 8003cb8:	4290      	cmp	r0, r2
 8003cba:	d00a      	beq.n	8003cd2 <TIM_Base_SetConfig+0x42>
 8003cbc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003cc0:	d007      	beq.n	8003cd2 <TIM_Base_SetConfig+0x42>
 8003cc2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003cc6:	4290      	cmp	r0, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_Base_SetConfig+0x42>
 8003cca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cce:	4290      	cmp	r0, r2
 8003cd0:	d103      	bne.n	8003cda <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cda:	694a      	ldr	r2, [r1, #20]
 8003cdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003ce2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce4:	688b      	ldr	r3, [r1, #8]
 8003ce6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ce8:	680b      	ldr	r3, [r1, #0]
 8003cea:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cec:	4b03      	ldr	r3, [pc, #12]	@ (8003cfc <TIM_Base_SetConfig+0x6c>)
 8003cee:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf0:	bf04      	itt	eq
 8003cf2:	690b      	ldreq	r3, [r1, #16]
 8003cf4:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	6143      	str	r3, [r0, #20]
}
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00

08003d00 <HAL_TIM_Base_Init>:
{
 8003d00:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003d02:	4604      	mov	r4, r0
 8003d04:	b330      	cbz	r0, 8003d54 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d06:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003d0a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003d0e:	b91b      	cbnz	r3, 8003d18 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003d10:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d14:	f7fe f8fa 	bl	8001f0c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d20:	1d21      	adds	r1, r4, #4
 8003d22:	f7ff ffb5 	bl	8003c90 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d26:	2301      	movs	r3, #1
  return HAL_OK;
 8003d28:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d2a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003d32:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003d36:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003d3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d46:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003d4a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003d52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d54:	2001      	movs	r0, #1
 8003d56:	e7fc      	b.n	8003d52 <HAL_TIM_Base_Init+0x52>

08003d58 <HAL_TIM_OC_Init>:
{
 8003d58:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	b330      	cbz	r0, 8003dac <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003d62:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003d66:	b91b      	cbnz	r3, 8003d70 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003d68:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003d6c:	f7ff fee6 	bl	8003b3c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003d72:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003d78:	1d21      	adds	r1, r4, #4
 8003d7a:	f7ff ff89 	bl	8003c90 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7e:	2301      	movs	r3, #1
  return HAL_OK;
 8003d80:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d82:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003d8a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003d8e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003d92:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d96:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d9e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003da2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003da6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003daa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003dac:	2001      	movs	r0, #1
 8003dae:	e7fc      	b.n	8003daa <HAL_TIM_OC_Init+0x52>

08003db0 <HAL_TIM_PWM_Init>:
{
 8003db0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003db2:	4604      	mov	r4, r0
 8003db4:	b330      	cbz	r0, 8003e04 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003dba:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003dbe:	b91b      	cbnz	r3, 8003dc8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003dc0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003dc4:	f7ff febb 	bl	8003b3e <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dca:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003dcc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd0:	1d21      	adds	r1, r4, #4
 8003dd2:	f7ff ff5d 	bl	8003c90 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd6:	2301      	movs	r3, #1
  return HAL_OK;
 8003dd8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dda:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003de2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003de6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003dea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003df2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003df6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003dfa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003dfe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003e02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e04:	2001      	movs	r0, #1
 8003e06:	e7fc      	b.n	8003e02 <HAL_TIM_PWM_Init+0x52>

08003e08 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8003e08:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0a:	6a02      	ldr	r2, [r0, #32]
{
 8003e0c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0e:	f022 0210 	bic.w	r2, r2, #16
 8003e12:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003e14:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e16:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e1a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e22:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003e24:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e5c <TIM_OC2_SetConfig+0x54>)
 8003e2e:	42a8      	cmp	r0, r5
 8003e30:	d10d      	bne.n	8003e4e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e32:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e3c:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e40:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003e44:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e4a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003e4e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e50:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003e52:	684a      	ldr	r2, [r1, #4]
 8003e54:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003e56:	6203      	str	r3, [r0, #32]
}
 8003e58:	bd70      	pop	{r4, r5, r6, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40012c00 	.word	0x40012c00

08003e60 <HAL_TIM_OC_ConfigChannel>:
{
 8003e60:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003e62:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003e66:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d01d      	beq.n	8003ea8 <HAL_TIM_OC_ConfigChannel+0x48>
  switch (Channel)
 8003e6c:	2a08      	cmp	r2, #8
 8003e6e:	d017      	beq.n	8003ea0 <HAL_TIM_OC_ConfigChannel+0x40>
 8003e70:	d807      	bhi.n	8003e82 <HAL_TIM_OC_ConfigChannel+0x22>
 8003e72:	b162      	cbz	r2, 8003e8e <HAL_TIM_OC_ConfigChannel+0x2e>
 8003e74:	2a04      	cmp	r2, #4
 8003e76:	d00f      	beq.n	8003e98 <HAL_TIM_OC_ConfigChannel+0x38>
 8003e78:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003e80:	bd10      	pop	{r4, pc}
  switch (Channel)
 8003e82:	2a0c      	cmp	r2, #12
 8003e84:	d1f8      	bne.n	8003e78 <HAL_TIM_OC_ConfigChannel+0x18>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e86:	6800      	ldr	r0, [r0, #0]
 8003e88:	f7ff fe10 	bl	8003aac <TIM_OC4_SetConfig>
      break;
 8003e8c:	e002      	b.n	8003e94 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e8e:	6800      	ldr	r0, [r0, #0]
 8003e90:	f7ff fdba 	bl	8003a08 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003e94:	2000      	movs	r0, #0
 8003e96:	e7f0      	b.n	8003e7a <HAL_TIM_OC_ConfigChannel+0x1a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e98:	6800      	ldr	r0, [r0, #0]
 8003e9a:	f7ff ffb5 	bl	8003e08 <TIM_OC2_SetConfig>
      break;
 8003e9e:	e7f9      	b.n	8003e94 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ea0:	6800      	ldr	r0, [r0, #0]
 8003ea2:	f7ff fdd9 	bl	8003a58 <TIM_OC3_SetConfig>
      break;
 8003ea6:	e7f5      	b.n	8003e94 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 8003ea8:	2002      	movs	r0, #2
 8003eaa:	e7e9      	b.n	8003e80 <HAL_TIM_OC_ConfigChannel+0x20>

08003eac <HAL_TIM_PWM_ConfigChannel>:
{
 8003eac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003eae:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003eb2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d04f      	beq.n	8003f58 <HAL_TIM_PWM_ConfigChannel+0xac>
 8003eb8:	2001      	movs	r0, #1
  switch (Channel)
 8003eba:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003ebc:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8003ec0:	d03a      	beq.n	8003f38 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8003ec2:	d806      	bhi.n	8003ed2 <HAL_TIM_PWM_ConfigChannel+0x26>
 8003ec4:	b1ba      	cbz	r2, 8003ef6 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8003ec6:	2a04      	cmp	r2, #4
 8003ec8:	d026      	beq.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003ed0:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003ed2:	2a0c      	cmp	r2, #12
 8003ed4:	d1f9      	bne.n	8003eca <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ed6:	6820      	ldr	r0, [r4, #0]
 8003ed8:	f7ff fde8 	bl	8003aac <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003edc:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ede:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ee0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ee4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ee6:	69c3      	ldr	r3, [r0, #28]
 8003ee8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eec:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eee:	69c3      	ldr	r3, [r0, #28]
 8003ef0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ef4:	e02e      	b.n	8003f54 <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ef6:	6820      	ldr	r0, [r4, #0]
 8003ef8:	f7ff fd86 	bl	8003a08 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003efc:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003efe:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f00:	f043 0308 	orr.w	r3, r3, #8
 8003f04:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f06:	6983      	ldr	r3, [r0, #24]
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f0e:	6983      	ldr	r3, [r0, #24]
 8003f10:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f12:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003f14:	2000      	movs	r0, #0
 8003f16:	e7d8      	b.n	8003eca <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f18:	6820      	ldr	r0, [r4, #0]
 8003f1a:	f7ff ff75 	bl	8003e08 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f1e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f20:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f26:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f28:	6983      	ldr	r3, [r0, #24]
 8003f2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f2e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f30:	6983      	ldr	r3, [r0, #24]
 8003f32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f36:	e7ec      	b.n	8003f12 <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f38:	6820      	ldr	r0, [r4, #0]
 8003f3a:	f7ff fd8d 	bl	8003a58 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f3e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f40:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f42:	f043 0308 	orr.w	r3, r3, #8
 8003f46:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f48:	69c3      	ldr	r3, [r0, #28]
 8003f4a:	f023 0304 	bic.w	r3, r3, #4
 8003f4e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f50:	69c3      	ldr	r3, [r0, #28]
 8003f52:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f54:	61c3      	str	r3, [r0, #28]
      break;
 8003f56:	e7dd      	b.n	8003f14 <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 8003f58:	2002      	movs	r0, #2
 8003f5a:	e7b9      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x24>

08003f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f5c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f5e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f60:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f62:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f66:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003f6a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6c:	6082      	str	r2, [r0, #8]
}
 8003f6e:	bd10      	pop	{r4, pc}

08003f70 <HAL_TIM_ConfigClockSource>:
{
 8003f70:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003f72:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003f76:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f04f 0002 	mov.w	r0, #2
 8003f7e:	f000 808e 	beq.w	800409e <HAL_TIM_ConfigClockSource+0x12e>
 8003f82:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003f88:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003f8a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003f8e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f94:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003f98:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f9a:	680b      	ldr	r3, [r1, #0]
 8003f9c:	2b60      	cmp	r3, #96	@ 0x60
 8003f9e:	d04f      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0xd0>
 8003fa0:	d832      	bhi.n	8004008 <HAL_TIM_ConfigClockSource+0x98>
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	d064      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0x100>
 8003fa6:	d816      	bhi.n	8003fd6 <HAL_TIM_ConfigClockSource+0x66>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d00d      	beq.n	8003fc8 <HAL_TIM_ConfigClockSource+0x58>
 8003fac:	d80a      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x54>
 8003fae:	f033 0110 	bics.w	r1, r3, #16
 8003fb2:	d009      	beq.n	8003fc8 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8003fc4:	2b30      	cmp	r3, #48	@ 0x30
 8003fc6:	d1f5      	bne.n	8003fb4 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8003fc8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003fd4:	e028      	b.n	8004028 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8003fd6:	2b50      	cmp	r3, #80	@ 0x50
 8003fd8:	d1ec      	bne.n	8003fb4 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8003fda:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003fdc:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003fde:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe0:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fec:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003fee:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ff4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003ff8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ffa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003ffc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004002:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8004006:	e00f      	b.n	8004028 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400c:	d00d      	beq.n	800402a <HAL_TIM_ConfigClockSource+0xba>
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004012:	d00c      	beq.n	800402e <HAL_TIM_ConfigClockSource+0xbe>
 8004014:	2b70      	cmp	r3, #112	@ 0x70
 8004016:	d1cd      	bne.n	8003fb4 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8004018:	68cb      	ldr	r3, [r1, #12]
 800401a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800401e:	f7ff ff9d 	bl	8003f5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004022:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004024:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004028:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2200      	movs	r2, #0
 800402c:	e7c2      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800402e:	68cb      	ldr	r3, [r1, #12]
 8004030:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004034:	f7ff ff92 	bl	8003f5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004038:	6883      	ldr	r3, [r0, #8]
 800403a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800403e:	e7f3      	b.n	8004028 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8004040:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004042:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8004044:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004046:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 800404a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404c:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404e:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004050:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004054:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8004058:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800405c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004060:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004062:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004064:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800406a:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800406e:	e7db      	b.n	8004028 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8004070:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004072:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004074:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004076:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004078:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004082:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004084:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004086:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800408a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800408e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004090:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004092:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004098:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800409c:	e7c4      	b.n	8004028 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800409e:	4602      	mov	r2, r0
 80040a0:	e78e      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x50>

080040a2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040a2:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040a4:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040a6:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040a8:	f001 011f 	and.w	r1, r1, #31
 80040ac:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80040ae:	ea23 0304 	bic.w	r3, r3, r4
 80040b2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040b4:	6a03      	ldr	r3, [r0, #32]
 80040b6:	408a      	lsls	r2, r1
 80040b8:	431a      	orrs	r2, r3
 80040ba:	6202      	str	r2, [r0, #32]
}
 80040bc:	bd10      	pop	{r4, pc}
	...

080040c0 <HAL_TIM_OC_Start>:
{
 80040c0:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040c2:	b929      	cbnz	r1, 80040d0 <HAL_TIM_OC_Start+0x10>
 80040c4:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d01d      	beq.n	8004108 <HAL_TIM_OC_Start+0x48>
    return HAL_ERROR;
 80040cc:	2001      	movs	r0, #1
 80040ce:	e02e      	b.n	800412e <HAL_TIM_OC_Start+0x6e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040d0:	2904      	cmp	r1, #4
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_OC_Start+0x24>
 80040d4:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d1f7      	bne.n	80040cc <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040dc:	2302      	movs	r3, #2
 80040de:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 80040e2:	e014      	b.n	800410e <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040e4:	2908      	cmp	r1, #8
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_OC_Start+0x38>
 80040e8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d1ed      	bne.n	80040cc <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f0:	2302      	movs	r3, #2
 80040f2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80040f6:	e00a      	b.n	800410e <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040f8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d1e5      	bne.n	80040cc <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004100:	2302      	movs	r3, #2
 8004102:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8004106:	e002      	b.n	800410e <HAL_TIM_OC_Start+0x4e>
 8004108:	2302      	movs	r3, #2
 800410a:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800410e:	6800      	ldr	r0, [r0, #0]
 8004110:	2201      	movs	r2, #1
 8004112:	f7ff ffc6 	bl	80040a2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004116:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <HAL_TIM_OC_Start+0x94>)
 8004118:	4298      	cmp	r0, r3
 800411a:	d009      	beq.n	8004130 <HAL_TIM_OC_Start+0x70>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004120:	d10b      	bne.n	800413a <HAL_TIM_OC_Start+0x7a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004122:	6883      	ldr	r3, [r0, #8]
 8004124:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004128:	2b06      	cmp	r3, #6
 800412a:	d10d      	bne.n	8004148 <HAL_TIM_OC_Start+0x88>
  return HAL_OK;
 800412c:	2000      	movs	r0, #0
}
 800412e:	bd08      	pop	{r3, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8004130:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004136:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004138:	e7f3      	b.n	8004122 <HAL_TIM_OC_Start+0x62>
 800413a:	4b07      	ldr	r3, [pc, #28]	@ (8004158 <HAL_TIM_OC_Start+0x98>)
 800413c:	4298      	cmp	r0, r3
 800413e:	d0f0      	beq.n	8004122 <HAL_TIM_OC_Start+0x62>
 8004140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004144:	4298      	cmp	r0, r3
 8004146:	d0ec      	beq.n	8004122 <HAL_TIM_OC_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8004148:	6803      	ldr	r3, [r0, #0]
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6003      	str	r3, [r0, #0]
 8004150:	e7ec      	b.n	800412c <HAL_TIM_OC_Start+0x6c>
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40000400 	.word	0x40000400

0800415c <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800415c:	f7ff bfb0 	b.w	80040c0 <HAL_TIM_OC_Start>

08004160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004160:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004162:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8004166:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8004168:	2b01      	cmp	r3, #1
 800416a:	f04f 0002 	mov.w	r0, #2
 800416e:	d022      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004170:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004172:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004176:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004178:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800417a:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800417e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8004180:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004182:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004184:	4c0c      	ldr	r4, [pc, #48]	@ (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004186:	42a3      	cmp	r3, r4
 8004188:	d00a      	beq.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418e:	d007      	beq.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004190:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8004194:	42a3      	cmp	r3, r4
 8004196:	d003      	beq.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004198:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800419c:	42a3      	cmp	r3, r4
 800419e:	d104      	bne.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041a0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041a2:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041a6:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a8:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041aa:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80041ac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80041ae:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80041b2:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 80041b6:	bd30      	pop	{r4, r5, pc}
 80041b8:	40012c00 	.word	0x40012c00

080041bc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041bc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80041c0:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d01e      	beq.n	8004204 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041c6:	68cb      	ldr	r3, [r1, #12]
 80041c8:	6888      	ldr	r0, [r1, #8]
 80041ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041d0:	6848      	ldr	r0, [r1, #4]
 80041d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041d8:	6808      	ldr	r0, [r1, #0]
 80041da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041de:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041e0:	6908      	ldr	r0, [r1, #16]
 80041e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041e6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041e8:	6948      	ldr	r0, [r1, #20]
 80041ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041ee:	4303      	orrs	r3, r0


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80041f0:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041f2:	69c9      	ldr	r1, [r1, #28]
 80041f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041f8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80041fa:	6811      	ldr	r1, [r2, #0]
 80041fc:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80041fe:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8004202:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004204:	2002      	movs	r0, #2
}
 8004206:	4770      	bx	lr

08004208 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004208:	4770      	bx	lr

0800420a <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800420a:	4770      	bx	lr

0800420c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	f102 030c 	add.w	r3, r2, #12
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	320c      	adds	r2, #12
 800421c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004220:	6802      	ldr	r2, [r0, #0]
 8004222:	2900      	cmp	r1, #0
 8004224:	d1f2      	bne.n	800420c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	f102 0314 	add.w	r3, r2, #20
 800422a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	f102 0c14 	add.w	ip, r2, #20
 8004236:	e84c 3100 	strex	r1, r3, [ip]
 800423a:	2900      	cmp	r1, #0
 800423c:	d1f3      	bne.n	8004226 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800423e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10b      	bne.n	800425c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	f102 030c 	add.w	r3, r2, #12
 8004248:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	f102 0c0c 	add.w	ip, r2, #12
 8004254:	e84c 3100 	strex	r1, r3, [ip]
 8004258:	2900      	cmp	r1, #0
 800425a:	d1f3      	bne.n	8004244 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800425c:	2320      	movs	r3, #32
 800425e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004262:	2300      	movs	r3, #0
 8004264:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8004266:	4770      	bx	lr

08004268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004268:	b510      	push	{r4, lr}
 800426a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800426c:	6803      	ldr	r3, [r0, #0]
 800426e:	68c1      	ldr	r1, [r0, #12]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004276:	430a      	orrs	r2, r1
 8004278:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800427a:	6882      	ldr	r2, [r0, #8]
 800427c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800427e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004280:	4302      	orrs	r2, r0
 8004282:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004284:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8004288:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800428c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800428e:	430a      	orrs	r2, r1
 8004290:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	69a1      	ldr	r1, [r4, #24]
 8004296:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800429a:	430a      	orrs	r2, r1
 800429c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800429e:	4a0e      	ldr	r2, [pc, #56]	@ (80042d8 <UART_SetConfig+0x70>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d115      	bne.n	80042d0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042a4:	f7ff fb26 	bl	80038f4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a8:	2319      	movs	r3, #25
 80042aa:	4343      	muls	r3, r0
 80042ac:	6862      	ldr	r2, [r4, #4]
 80042ae:	6820      	ldr	r0, [r4, #0]
 80042b0:	0092      	lsls	r2, r2, #2
 80042b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b6:	2264      	movs	r2, #100	@ 0x64
 80042b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80042bc:	fb02 3311 	mls	r3, r2, r1, r3
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	3332      	adds	r3, #50	@ 0x32
 80042c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80042c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80042cc:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80042ce:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7ff fb00 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 80042d4:	e7e8      	b.n	80042a8 <UART_SetConfig+0x40>
 80042d6:	bf00      	nop
 80042d8:	40013800 	.word	0x40013800

080042dc <HAL_UART_Init>:
{
 80042dc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80042de:	4604      	mov	r4, r0
 80042e0:	b348      	cbz	r0, 8004336 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80042e2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80042e6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80042ea:	b91b      	cbnz	r3, 80042f4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80042ec:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80042f0:	f7fd fe9c 	bl	800202c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80042f4:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80042f6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042f8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80042fc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80042fe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004300:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004304:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004306:	f7ff ffaf 	bl	8004268 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800430a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800431c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004324:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004326:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004328:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800432a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800432e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004332:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004334:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004336:	2001      	movs	r0, #1
 8004338:	e7fc      	b.n	8004334 <HAL_UART_Init+0x58>

0800433a <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800433a:	4770      	bx	lr

0800433c <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 800433c:	4770      	bx	lr

0800433e <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800433e:	4770      	bx	lr

08004340 <UART_DMAAbortOnError>:
{
 8004340:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004342:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004344:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8004346:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004348:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800434a:	f7ff fff8 	bl	800433e <HAL_UART_ErrorCallback>
}
 800434e:	bd08      	pop	{r3, pc}

08004350 <HAL_UARTEx_RxEventCallback>:
}
 8004350:	4770      	bx	lr

08004352 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004352:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004356:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004358:	2b22      	cmp	r3, #34	@ 0x22
 800435a:	d142      	bne.n	80043e2 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435c:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800435e:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004360:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004364:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004366:	d13f      	bne.n	80043e8 <UART_Receive_IT.isra.0+0x96>
 8004368:	6901      	ldr	r1, [r0, #16]
 800436a:	2900      	cmp	r1, #0
 800436c:	d13f      	bne.n	80043ee <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800436e:	6852      	ldr	r2, [r2, #4]
 8004370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004374:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8004378:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800437a:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800437c:	3b01      	subs	r3, #1
 800437e:	b29b      	uxth	r3, r3
 8004380:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8004382:	2b00      	cmp	r3, #0
 8004384:	d12d      	bne.n	80043e2 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004386:	6802      	ldr	r2, [r0, #0]
 8004388:	68d1      	ldr	r1, [r2, #12]
 800438a:	f021 0120 	bic.w	r1, r1, #32
 800438e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004390:	68d1      	ldr	r1, [r2, #12]
 8004392:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8004396:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004398:	6951      	ldr	r1, [r2, #20]
 800439a:	f021 0101 	bic.w	r1, r1, #1
 800439e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80043a0:	2220      	movs	r2, #32
 80043a2:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a6:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80043aa:	2a01      	cmp	r2, #1
 80043ac:	6802      	ldr	r2, [r0, #0]
 80043ae:	d128      	bne.n	8004402 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b0:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	f102 030c 	add.w	r3, r2, #12
 80043b6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ba:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	f102 0c0c 	add.w	ip, r2, #12
 80043c2:	e84c 3100 	strex	r1, r3, [ip]
 80043c6:	2900      	cmp	r1, #0
 80043c8:	d1f3      	bne.n	80043b2 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043ca:	6813      	ldr	r3, [r2, #0]
 80043cc:	06db      	lsls	r3, r3, #27
 80043ce:	d505      	bpl.n	80043dc <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043d0:	9101      	str	r1, [sp, #4]
 80043d2:	6813      	ldr	r3, [r2, #0]
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	6853      	ldr	r3, [r2, #4]
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043dc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80043de:	f7ff ffb7 	bl	8004350 <HAL_UARTEx_RxEventCallback>
}
 80043e2:	b003      	add	sp, #12
 80043e4:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043e8:	b939      	cbnz	r1, 80043fa <UART_Receive_IT.isra.0+0xa8>
 80043ea:	6901      	ldr	r1, [r0, #16]
 80043ec:	b929      	cbnz	r1, 80043fa <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ee:	6852      	ldr	r2, [r2, #4]
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80043f4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80043f6:	3301      	adds	r3, #1
 80043f8:	e7be      	b.n	8004378 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043fa:	6852      	ldr	r2, [r2, #4]
 80043fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004400:	e7f7      	b.n	80043f2 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8004402:	f7ff ff9b 	bl	800433c <HAL_UART_RxCpltCallback>
 8004406:	e7ec      	b.n	80043e2 <UART_Receive_IT.isra.0+0x90>

08004408 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004408:	6803      	ldr	r3, [r0, #0]
{
 800440a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800440c:	681a      	ldr	r2, [r3, #0]
{
 800440e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004410:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004412:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004414:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004416:	d108      	bne.n	800442a <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004418:	0696      	lsls	r6, r2, #26
 800441a:	d568      	bpl.n	80044ee <HAL_UART_IRQHandler+0xe6>
 800441c:	068d      	lsls	r5, r1, #26
 800441e:	d566      	bpl.n	80044ee <HAL_UART_IRQHandler+0xe6>
}
 8004420:	b002      	add	sp, #8
 8004422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8004426:	f7ff bf94 	b.w	8004352 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800442a:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800442e:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 8004432:	4305      	orrs	r5, r0
 8004434:	d05b      	beq.n	80044ee <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004436:	07d6      	lsls	r6, r2, #31
 8004438:	d505      	bpl.n	8004446 <HAL_UART_IRQHandler+0x3e>
 800443a:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800443c:	bf42      	ittt	mi
 800443e:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 8004440:	f043 0301 	orrmi.w	r3, r3, #1
 8004444:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004446:	0753      	lsls	r3, r2, #29
 8004448:	d504      	bpl.n	8004454 <HAL_UART_IRQHandler+0x4c>
 800444a:	b118      	cbz	r0, 8004454 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800444c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800444e:	f043 0302 	orr.w	r3, r3, #2
 8004452:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004454:	0796      	lsls	r6, r2, #30
 8004456:	d504      	bpl.n	8004462 <HAL_UART_IRQHandler+0x5a>
 8004458:	b118      	cbz	r0, 8004462 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800445a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800445c:	f043 0304 	orr.w	r3, r3, #4
 8004460:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004462:	0715      	lsls	r5, r2, #28
 8004464:	d507      	bpl.n	8004476 <HAL_UART_IRQHandler+0x6e>
 8004466:	f001 0320 	and.w	r3, r1, #32
 800446a:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800446c:	bf1e      	ittt	ne
 800446e:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8004470:	f043 0308 	orrne.w	r3, r3, #8
 8004474:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004476:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004478:	2b00      	cmp	r3, #0
 800447a:	d032      	beq.n	80044e2 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800447c:	0692      	lsls	r2, r2, #26
 800447e:	d504      	bpl.n	800448a <HAL_UART_IRQHandler+0x82>
 8004480:	068b      	lsls	r3, r1, #26
 8004482:	d502      	bpl.n	800448a <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8004484:	4620      	mov	r0, r4
 8004486:	f7ff ff64 	bl	8004352 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800448a:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800448c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800448e:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004490:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004496:	f002 0208 	and.w	r2, r2, #8
 800449a:	ea53 0502 	orrs.w	r5, r3, r2
 800449e:	d022      	beq.n	80044e6 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 80044a0:	f7ff feb4 	bl	800420c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	6973      	ldr	r3, [r6, #20]
 80044a6:	065e      	lsls	r6, r3, #25
 80044a8:	d518      	bpl.n	80044dc <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	f102 0314 	add.w	r3, r2, #20
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	3214      	adds	r2, #20
 80044ba:	e842 3100 	strex	r1, r3, [r2]
 80044be:	2900      	cmp	r1, #0
 80044c0:	d1f3      	bne.n	80044aa <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 80044c2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80044c4:	b150      	cbz	r0, 80044dc <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044c6:	4b74      	ldr	r3, [pc, #464]	@ (8004698 <HAL_UART_IRQHandler+0x290>)
 80044c8:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ca:	f7fe fb67 	bl	8002b9c <HAL_DMA_Abort_IT>
 80044ce:	b140      	cbz	r0, 80044e2 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044d0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80044d2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 80044d4:	b002      	add	sp, #8
 80044d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044da:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80044dc:	4620      	mov	r0, r4
 80044de:	f7ff ff2e 	bl	800433e <HAL_UART_ErrorCallback>
}
 80044e2:	b002      	add	sp, #8
 80044e4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80044e6:	f7ff ff2a 	bl	800433e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ea:	6465      	str	r5, [r4, #68]	@ 0x44
 80044ec:	e7f9      	b.n	80044e2 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80044f0:	2801      	cmp	r0, #1
 80044f2:	f040 8094 	bne.w	800461e <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044f6:	06d5      	lsls	r5, r2, #27
 80044f8:	f140 8091 	bpl.w	800461e <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044fc:	06c8      	lsls	r0, r1, #27
 80044fe:	f140 808e 	bpl.w	800461e <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004502:	2200      	movs	r2, #0
 8004504:	9201      	str	r2, [sp, #4]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	9201      	str	r2, [sp, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	9201      	str	r2, [sp, #4]
 800450e:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	0652      	lsls	r2, r2, #25
 8004514:	d54d      	bpl.n	80045b2 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004516:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8004518:	680a      	ldr	r2, [r1, #0]
 800451a:	6852      	ldr	r2, [r2, #4]
 800451c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800451e:	2a00      	cmp	r2, #0
 8004520:	d0df      	beq.n	80044e2 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004522:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8004524:	4290      	cmp	r0, r2
 8004526:	d9dc      	bls.n	80044e2 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8004528:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800452a:	698a      	ldr	r2, [r1, #24]
 800452c:	2a20      	cmp	r2, #32
 800452e:	d036      	beq.n	800459e <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	f103 020c 	add.w	r2, r3, #12
 8004534:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	f103 000c 	add.w	r0, r3, #12
 8004540:	e840 2100 	strex	r1, r2, [r0]
 8004544:	2900      	cmp	r1, #0
 8004546:	d1f3      	bne.n	8004530 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	f103 0214 	add.w	r2, r3, #20
 800454c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	f103 0014 	add.w	r0, r3, #20
 8004558:	e840 2100 	strex	r1, r2, [r0]
 800455c:	2900      	cmp	r1, #0
 800455e:	d1f3      	bne.n	8004548 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	f103 0214 	add.w	r2, r3, #20
 8004564:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	f103 0014 	add.w	r0, r3, #20
 8004570:	e840 2100 	strex	r1, r2, [r0]
 8004574:	2900      	cmp	r1, #0
 8004576:	d1f3      	bne.n	8004560 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8004578:	2220      	movs	r2, #32
 800457a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457e:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	f103 020c 	add.w	r2, r3, #12
 8004584:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004588:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	f103 000c 	add.w	r0, r3, #12
 8004590:	e840 2100 	strex	r1, r2, [r0]
 8004594:	2900      	cmp	r1, #0
 8004596:	d1f3      	bne.n	8004580 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004598:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800459a:	f7fe fadf 	bl	8002b5c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800459e:	2302      	movs	r3, #2
 80045a0:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045a2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80045a4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80045a6:	1ac9      	subs	r1, r1, r3
 80045a8:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045aa:	4620      	mov	r0, r4
 80045ac:	f7ff fed0 	bl	8004350 <HAL_UARTEx_RxEventCallback>
 80045b0:	e797      	b.n	80044e2 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045b2:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 80045b4:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045b6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 80045b8:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ba:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 80045bc:	2800      	cmp	r0, #0
 80045be:	d090      	beq.n	80044e2 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045c0:	1a89      	subs	r1, r1, r2
 80045c2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80045c4:	2900      	cmp	r1, #0
 80045c6:	d08c      	beq.n	80044e2 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	f103 020c 	add.w	r2, r3, #12
 80045cc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	f103 050c 	add.w	r5, r3, #12
 80045d8:	e845 2000 	strex	r0, r2, [r5]
 80045dc:	2800      	cmp	r0, #0
 80045de:	d1f3      	bne.n	80045c8 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	f103 0214 	add.w	r2, r3, #20
 80045e4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	f103 0514 	add.w	r5, r3, #20
 80045f0:	e845 2000 	strex	r0, r2, [r5]
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d1f3      	bne.n	80045e0 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 80045f8:	2220      	movs	r2, #32
 80045fa:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fe:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	f103 020c 	add.w	r2, r3, #12
 8004604:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004608:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	f103 050c 	add.w	r5, r3, #12
 8004610:	e845 2000 	strex	r0, r2, [r5]
 8004614:	2800      	cmp	r0, #0
 8004616:	d1f3      	bne.n	8004600 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004618:	2302      	movs	r3, #2
 800461a:	6363      	str	r3, [r4, #52]	@ 0x34
 800461c:	e7c5      	b.n	80045aa <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800461e:	0616      	lsls	r6, r2, #24
 8004620:	d528      	bpl.n	8004674 <HAL_UART_IRQHandler+0x26c>
 8004622:	060d      	lsls	r5, r1, #24
 8004624:	d526      	bpl.n	8004674 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004626:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800462a:	2a21      	cmp	r2, #33	@ 0x21
 800462c:	f47f af59 	bne.w	80044e2 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004630:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004632:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004634:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004638:	d117      	bne.n	800466a <HAL_UART_IRQHandler+0x262>
 800463a:	6921      	ldr	r1, [r4, #16]
 800463c:	b9a9      	cbnz	r1, 800466a <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800463e:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004642:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004646:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004648:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800464a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800464c:	3a01      	subs	r2, #1
 800464e:	b292      	uxth	r2, r2
 8004650:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8004652:	2a00      	cmp	r2, #0
 8004654:	f47f af45 	bne.w	80044e2 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800465e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	e73b      	b.n	80044e2 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800466a:	1c51      	adds	r1, r2, #1
 800466c:	6221      	str	r1, [r4, #32]
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	e7ea      	b.n	800464a <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004674:	0650      	lsls	r0, r2, #25
 8004676:	f57f af34 	bpl.w	80044e2 <HAL_UART_IRQHandler+0xda>
 800467a:	064a      	lsls	r2, r1, #25
 800467c:	f57f af31 	bpl.w	80044e2 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004680:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004682:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004684:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004688:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800468a:	2320      	movs	r3, #32
 800468c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004690:	f7ff fe53 	bl	800433a <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004694:	e725      	b.n	80044e2 <HAL_UART_IRQHandler+0xda>
 8004696:	bf00      	nop
 8004698:	08004341 	.word	0x08004341

0800469c <_strtol_l.constprop.0>:
 800469c:	2b24      	cmp	r3, #36	@ 0x24
 800469e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a2:	4686      	mov	lr, r0
 80046a4:	4690      	mov	r8, r2
 80046a6:	d801      	bhi.n	80046ac <_strtol_l.constprop.0+0x10>
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d106      	bne.n	80046ba <_strtol_l.constprop.0+0x1e>
 80046ac:	f001 f856 	bl	800575c <__errno>
 80046b0:	2316      	movs	r3, #22
 80046b2:	6003      	str	r3, [r0, #0]
 80046b4:	2000      	movs	r0, #0
 80046b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ba:	460d      	mov	r5, r1
 80046bc:	4833      	ldr	r0, [pc, #204]	@ (800478c <_strtol_l.constprop.0+0xf0>)
 80046be:	462a      	mov	r2, r5
 80046c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046c4:	5d06      	ldrb	r6, [r0, r4]
 80046c6:	f016 0608 	ands.w	r6, r6, #8
 80046ca:	d1f8      	bne.n	80046be <_strtol_l.constprop.0+0x22>
 80046cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80046ce:	d12d      	bne.n	800472c <_strtol_l.constprop.0+0x90>
 80046d0:	2601      	movs	r6, #1
 80046d2:	782c      	ldrb	r4, [r5, #0]
 80046d4:	1c95      	adds	r5, r2, #2
 80046d6:	f033 0210 	bics.w	r2, r3, #16
 80046da:	d109      	bne.n	80046f0 <_strtol_l.constprop.0+0x54>
 80046dc:	2c30      	cmp	r4, #48	@ 0x30
 80046de:	d12a      	bne.n	8004736 <_strtol_l.constprop.0+0x9a>
 80046e0:	782a      	ldrb	r2, [r5, #0]
 80046e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80046e6:	2a58      	cmp	r2, #88	@ 0x58
 80046e8:	d125      	bne.n	8004736 <_strtol_l.constprop.0+0x9a>
 80046ea:	2310      	movs	r3, #16
 80046ec:	786c      	ldrb	r4, [r5, #1]
 80046ee:	3502      	adds	r5, #2
 80046f0:	2200      	movs	r2, #0
 80046f2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80046f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80046fa:	fbbc f9f3 	udiv	r9, ip, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	fb03 ca19 	mls	sl, r3, r9, ip
 8004704:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004708:	2f09      	cmp	r7, #9
 800470a:	d81b      	bhi.n	8004744 <_strtol_l.constprop.0+0xa8>
 800470c:	463c      	mov	r4, r7
 800470e:	42a3      	cmp	r3, r4
 8004710:	dd27      	ble.n	8004762 <_strtol_l.constprop.0+0xc6>
 8004712:	1c57      	adds	r7, r2, #1
 8004714:	d007      	beq.n	8004726 <_strtol_l.constprop.0+0x8a>
 8004716:	4581      	cmp	r9, r0
 8004718:	d320      	bcc.n	800475c <_strtol_l.constprop.0+0xc0>
 800471a:	d101      	bne.n	8004720 <_strtol_l.constprop.0+0x84>
 800471c:	45a2      	cmp	sl, r4
 800471e:	db1d      	blt.n	800475c <_strtol_l.constprop.0+0xc0>
 8004720:	2201      	movs	r2, #1
 8004722:	fb00 4003 	mla	r0, r0, r3, r4
 8004726:	f815 4b01 	ldrb.w	r4, [r5], #1
 800472a:	e7eb      	b.n	8004704 <_strtol_l.constprop.0+0x68>
 800472c:	2c2b      	cmp	r4, #43	@ 0x2b
 800472e:	bf04      	itt	eq
 8004730:	782c      	ldrbeq	r4, [r5, #0]
 8004732:	1c95      	addeq	r5, r2, #2
 8004734:	e7cf      	b.n	80046d6 <_strtol_l.constprop.0+0x3a>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1da      	bne.n	80046f0 <_strtol_l.constprop.0+0x54>
 800473a:	2c30      	cmp	r4, #48	@ 0x30
 800473c:	bf0c      	ite	eq
 800473e:	2308      	moveq	r3, #8
 8004740:	230a      	movne	r3, #10
 8004742:	e7d5      	b.n	80046f0 <_strtol_l.constprop.0+0x54>
 8004744:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004748:	2f19      	cmp	r7, #25
 800474a:	d801      	bhi.n	8004750 <_strtol_l.constprop.0+0xb4>
 800474c:	3c37      	subs	r4, #55	@ 0x37
 800474e:	e7de      	b.n	800470e <_strtol_l.constprop.0+0x72>
 8004750:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004754:	2f19      	cmp	r7, #25
 8004756:	d804      	bhi.n	8004762 <_strtol_l.constprop.0+0xc6>
 8004758:	3c57      	subs	r4, #87	@ 0x57
 800475a:	e7d8      	b.n	800470e <_strtol_l.constprop.0+0x72>
 800475c:	f04f 32ff 	mov.w	r2, #4294967295
 8004760:	e7e1      	b.n	8004726 <_strtol_l.constprop.0+0x8a>
 8004762:	1c53      	adds	r3, r2, #1
 8004764:	d108      	bne.n	8004778 <_strtol_l.constprop.0+0xdc>
 8004766:	2322      	movs	r3, #34	@ 0x22
 8004768:	4660      	mov	r0, ip
 800476a:	f8ce 3000 	str.w	r3, [lr]
 800476e:	f1b8 0f00 	cmp.w	r8, #0
 8004772:	d0a0      	beq.n	80046b6 <_strtol_l.constprop.0+0x1a>
 8004774:	1e69      	subs	r1, r5, #1
 8004776:	e006      	b.n	8004786 <_strtol_l.constprop.0+0xea>
 8004778:	b106      	cbz	r6, 800477c <_strtol_l.constprop.0+0xe0>
 800477a:	4240      	negs	r0, r0
 800477c:	f1b8 0f00 	cmp.w	r8, #0
 8004780:	d099      	beq.n	80046b6 <_strtol_l.constprop.0+0x1a>
 8004782:	2a00      	cmp	r2, #0
 8004784:	d1f6      	bne.n	8004774 <_strtol_l.constprop.0+0xd8>
 8004786:	f8c8 1000 	str.w	r1, [r8]
 800478a:	e794      	b.n	80046b6 <_strtol_l.constprop.0+0x1a>
 800478c:	0800a8e5 	.word	0x0800a8e5

08004790 <_strtol_r>:
 8004790:	f7ff bf84 	b.w	800469c <_strtol_l.constprop.0>

08004794 <__cvt>:
 8004794:	2b00      	cmp	r3, #0
 8004796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800479a:	461d      	mov	r5, r3
 800479c:	bfbb      	ittet	lt
 800479e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80047a2:	461d      	movlt	r5, r3
 80047a4:	2300      	movge	r3, #0
 80047a6:	232d      	movlt	r3, #45	@ 0x2d
 80047a8:	b088      	sub	sp, #32
 80047aa:	4614      	mov	r4, r2
 80047ac:	bfb8      	it	lt
 80047ae:	4614      	movlt	r4, r2
 80047b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80047b2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80047b4:	7013      	strb	r3, [r2, #0]
 80047b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80047b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80047bc:	f023 0820 	bic.w	r8, r3, #32
 80047c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047c4:	d005      	beq.n	80047d2 <__cvt+0x3e>
 80047c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80047ca:	d100      	bne.n	80047ce <__cvt+0x3a>
 80047cc:	3601      	adds	r6, #1
 80047ce:	2302      	movs	r3, #2
 80047d0:	e000      	b.n	80047d4 <__cvt+0x40>
 80047d2:	2303      	movs	r3, #3
 80047d4:	aa07      	add	r2, sp, #28
 80047d6:	9204      	str	r2, [sp, #16]
 80047d8:	aa06      	add	r2, sp, #24
 80047da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80047de:	e9cd 3600 	strd	r3, r6, [sp]
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
 80047e6:	f001 f8b7 	bl	8005958 <_dtoa_r>
 80047ea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047ee:	4607      	mov	r7, r0
 80047f0:	d119      	bne.n	8004826 <__cvt+0x92>
 80047f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80047f4:	07db      	lsls	r3, r3, #31
 80047f6:	d50e      	bpl.n	8004816 <__cvt+0x82>
 80047f8:	eb00 0906 	add.w	r9, r0, r6
 80047fc:	2200      	movs	r2, #0
 80047fe:	2300      	movs	r3, #0
 8004800:	4620      	mov	r0, r4
 8004802:	4629      	mov	r1, r5
 8004804:	f7fc f984 	bl	8000b10 <__aeabi_dcmpeq>
 8004808:	b108      	cbz	r0, 800480e <__cvt+0x7a>
 800480a:	f8cd 901c 	str.w	r9, [sp, #28]
 800480e:	2230      	movs	r2, #48	@ 0x30
 8004810:	9b07      	ldr	r3, [sp, #28]
 8004812:	454b      	cmp	r3, r9
 8004814:	d31e      	bcc.n	8004854 <__cvt+0xc0>
 8004816:	4638      	mov	r0, r7
 8004818:	9b07      	ldr	r3, [sp, #28]
 800481a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800481c:	1bdb      	subs	r3, r3, r7
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	b008      	add	sp, #32
 8004822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004826:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800482a:	eb00 0906 	add.w	r9, r0, r6
 800482e:	d1e5      	bne.n	80047fc <__cvt+0x68>
 8004830:	7803      	ldrb	r3, [r0, #0]
 8004832:	2b30      	cmp	r3, #48	@ 0x30
 8004834:	d10a      	bne.n	800484c <__cvt+0xb8>
 8004836:	2200      	movs	r2, #0
 8004838:	2300      	movs	r3, #0
 800483a:	4620      	mov	r0, r4
 800483c:	4629      	mov	r1, r5
 800483e:	f7fc f967 	bl	8000b10 <__aeabi_dcmpeq>
 8004842:	b918      	cbnz	r0, 800484c <__cvt+0xb8>
 8004844:	f1c6 0601 	rsb	r6, r6, #1
 8004848:	f8ca 6000 	str.w	r6, [sl]
 800484c:	f8da 3000 	ldr.w	r3, [sl]
 8004850:	4499      	add	r9, r3
 8004852:	e7d3      	b.n	80047fc <__cvt+0x68>
 8004854:	1c59      	adds	r1, r3, #1
 8004856:	9107      	str	r1, [sp, #28]
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e7d9      	b.n	8004810 <__cvt+0x7c>

0800485c <__exponent>:
 800485c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800485e:	2900      	cmp	r1, #0
 8004860:	bfb6      	itet	lt
 8004862:	232d      	movlt	r3, #45	@ 0x2d
 8004864:	232b      	movge	r3, #43	@ 0x2b
 8004866:	4249      	neglt	r1, r1
 8004868:	2909      	cmp	r1, #9
 800486a:	7002      	strb	r2, [r0, #0]
 800486c:	7043      	strb	r3, [r0, #1]
 800486e:	dd29      	ble.n	80048c4 <__exponent+0x68>
 8004870:	f10d 0307 	add.w	r3, sp, #7
 8004874:	461d      	mov	r5, r3
 8004876:	270a      	movs	r7, #10
 8004878:	fbb1 f6f7 	udiv	r6, r1, r7
 800487c:	461a      	mov	r2, r3
 800487e:	fb07 1416 	mls	r4, r7, r6, r1
 8004882:	3430      	adds	r4, #48	@ 0x30
 8004884:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004888:	460c      	mov	r4, r1
 800488a:	2c63      	cmp	r4, #99	@ 0x63
 800488c:	4631      	mov	r1, r6
 800488e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004892:	dcf1      	bgt.n	8004878 <__exponent+0x1c>
 8004894:	3130      	adds	r1, #48	@ 0x30
 8004896:	1e94      	subs	r4, r2, #2
 8004898:	f803 1c01 	strb.w	r1, [r3, #-1]
 800489c:	4623      	mov	r3, r4
 800489e:	1c41      	adds	r1, r0, #1
 80048a0:	42ab      	cmp	r3, r5
 80048a2:	d30a      	bcc.n	80048ba <__exponent+0x5e>
 80048a4:	f10d 0309 	add.w	r3, sp, #9
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	42ac      	cmp	r4, r5
 80048ac:	bf88      	it	hi
 80048ae:	2300      	movhi	r3, #0
 80048b0:	3302      	adds	r3, #2
 80048b2:	4403      	add	r3, r0
 80048b4:	1a18      	subs	r0, r3, r0
 80048b6:	b003      	add	sp, #12
 80048b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80048be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80048c2:	e7ed      	b.n	80048a0 <__exponent+0x44>
 80048c4:	2330      	movs	r3, #48	@ 0x30
 80048c6:	3130      	adds	r1, #48	@ 0x30
 80048c8:	7083      	strb	r3, [r0, #2]
 80048ca:	70c1      	strb	r1, [r0, #3]
 80048cc:	1d03      	adds	r3, r0, #4
 80048ce:	e7f1      	b.n	80048b4 <__exponent+0x58>

080048d0 <_printf_float>:
 80048d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d4:	b091      	sub	sp, #68	@ 0x44
 80048d6:	460c      	mov	r4, r1
 80048d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80048dc:	4616      	mov	r6, r2
 80048de:	461f      	mov	r7, r3
 80048e0:	4605      	mov	r5, r0
 80048e2:	f000 fef1 	bl	80056c8 <_localeconv_r>
 80048e6:	6803      	ldr	r3, [r0, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	9308      	str	r3, [sp, #32]
 80048ec:	f7fb fc30 	bl	8000150 <strlen>
 80048f0:	2300      	movs	r3, #0
 80048f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80048f4:	f8d8 3000 	ldr.w	r3, [r8]
 80048f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80048fa:	3307      	adds	r3, #7
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	f103 0208 	add.w	r2, r3, #8
 8004904:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004908:	f8d4 b000 	ldr.w	fp, [r4]
 800490c:	f8c8 2000 	str.w	r2, [r8]
 8004910:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004914:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004918:	930b      	str	r3, [sp, #44]	@ 0x2c
 800491a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800491e:	f04f 32ff 	mov.w	r2, #4294967295
 8004922:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004926:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800492a:	4b9c      	ldr	r3, [pc, #624]	@ (8004b9c <_printf_float+0x2cc>)
 800492c:	f7fc f922 	bl	8000b74 <__aeabi_dcmpun>
 8004930:	bb70      	cbnz	r0, 8004990 <_printf_float+0xc0>
 8004932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004936:	f04f 32ff 	mov.w	r2, #4294967295
 800493a:	4b98      	ldr	r3, [pc, #608]	@ (8004b9c <_printf_float+0x2cc>)
 800493c:	f7fc f8fc 	bl	8000b38 <__aeabi_dcmple>
 8004940:	bb30      	cbnz	r0, 8004990 <_printf_float+0xc0>
 8004942:	2200      	movs	r2, #0
 8004944:	2300      	movs	r3, #0
 8004946:	4640      	mov	r0, r8
 8004948:	4649      	mov	r1, r9
 800494a:	f7fc f8eb 	bl	8000b24 <__aeabi_dcmplt>
 800494e:	b110      	cbz	r0, 8004956 <_printf_float+0x86>
 8004950:	232d      	movs	r3, #45	@ 0x2d
 8004952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004956:	4a92      	ldr	r2, [pc, #584]	@ (8004ba0 <_printf_float+0x2d0>)
 8004958:	4b92      	ldr	r3, [pc, #584]	@ (8004ba4 <_printf_float+0x2d4>)
 800495a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800495e:	bf94      	ite	ls
 8004960:	4690      	movls	r8, r2
 8004962:	4698      	movhi	r8, r3
 8004964:	2303      	movs	r3, #3
 8004966:	f04f 0900 	mov.w	r9, #0
 800496a:	6123      	str	r3, [r4, #16]
 800496c:	f02b 0304 	bic.w	r3, fp, #4
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	4633      	mov	r3, r6
 8004974:	4621      	mov	r1, r4
 8004976:	4628      	mov	r0, r5
 8004978:	9700      	str	r7, [sp, #0]
 800497a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800497c:	f000 f9d4 	bl	8004d28 <_printf_common>
 8004980:	3001      	adds	r0, #1
 8004982:	f040 8090 	bne.w	8004aa6 <_printf_float+0x1d6>
 8004986:	f04f 30ff 	mov.w	r0, #4294967295
 800498a:	b011      	add	sp, #68	@ 0x44
 800498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004990:	4642      	mov	r2, r8
 8004992:	464b      	mov	r3, r9
 8004994:	4640      	mov	r0, r8
 8004996:	4649      	mov	r1, r9
 8004998:	f7fc f8ec 	bl	8000b74 <__aeabi_dcmpun>
 800499c:	b148      	cbz	r0, 80049b2 <_printf_float+0xe2>
 800499e:	464b      	mov	r3, r9
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bfb8      	it	lt
 80049a4:	232d      	movlt	r3, #45	@ 0x2d
 80049a6:	4a80      	ldr	r2, [pc, #512]	@ (8004ba8 <_printf_float+0x2d8>)
 80049a8:	bfb8      	it	lt
 80049aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80049ae:	4b7f      	ldr	r3, [pc, #508]	@ (8004bac <_printf_float+0x2dc>)
 80049b0:	e7d3      	b.n	800495a <_printf_float+0x8a>
 80049b2:	6863      	ldr	r3, [r4, #4]
 80049b4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	d13f      	bne.n	8004a3c <_printf_float+0x16c>
 80049bc:	2306      	movs	r3, #6
 80049be:	6063      	str	r3, [r4, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	9206      	str	r2, [sp, #24]
 80049ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80049cc:	e9cd a204 	strd	sl, r2, [sp, #16]
 80049d0:	aa0d      	add	r2, sp, #52	@ 0x34
 80049d2:	9203      	str	r2, [sp, #12]
 80049d4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80049d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80049dc:	6863      	ldr	r3, [r4, #4]
 80049de:	4642      	mov	r2, r8
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	4628      	mov	r0, r5
 80049e4:	464b      	mov	r3, r9
 80049e6:	910a      	str	r1, [sp, #40]	@ 0x28
 80049e8:	f7ff fed4 	bl	8004794 <__cvt>
 80049ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80049ee:	4680      	mov	r8, r0
 80049f0:	2947      	cmp	r1, #71	@ 0x47
 80049f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80049f4:	d128      	bne.n	8004a48 <_printf_float+0x178>
 80049f6:	1cc8      	adds	r0, r1, #3
 80049f8:	db02      	blt.n	8004a00 <_printf_float+0x130>
 80049fa:	6863      	ldr	r3, [r4, #4]
 80049fc:	4299      	cmp	r1, r3
 80049fe:	dd40      	ble.n	8004a82 <_printf_float+0x1b2>
 8004a00:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a04:	fa5f fa8a 	uxtb.w	sl, sl
 8004a08:	4652      	mov	r2, sl
 8004a0a:	3901      	subs	r1, #1
 8004a0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004a10:	910d      	str	r1, [sp, #52]	@ 0x34
 8004a12:	f7ff ff23 	bl	800485c <__exponent>
 8004a16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a18:	4681      	mov	r9, r0
 8004a1a:	1813      	adds	r3, r2, r0
 8004a1c:	2a01      	cmp	r2, #1
 8004a1e:	6123      	str	r3, [r4, #16]
 8004a20:	dc02      	bgt.n	8004a28 <_printf_float+0x158>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	07d2      	lsls	r2, r2, #31
 8004a26:	d501      	bpl.n	8004a2c <_printf_float+0x15c>
 8004a28:	3301      	adds	r3, #1
 8004a2a:	6123      	str	r3, [r4, #16]
 8004a2c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d09e      	beq.n	8004972 <_printf_float+0xa2>
 8004a34:	232d      	movs	r3, #45	@ 0x2d
 8004a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a3a:	e79a      	b.n	8004972 <_printf_float+0xa2>
 8004a3c:	2947      	cmp	r1, #71	@ 0x47
 8004a3e:	d1bf      	bne.n	80049c0 <_printf_float+0xf0>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1bd      	bne.n	80049c0 <_printf_float+0xf0>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e7ba      	b.n	80049be <_printf_float+0xee>
 8004a48:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a4c:	d9dc      	bls.n	8004a08 <_printf_float+0x138>
 8004a4e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a52:	d118      	bne.n	8004a86 <_printf_float+0x1b6>
 8004a54:	2900      	cmp	r1, #0
 8004a56:	6863      	ldr	r3, [r4, #4]
 8004a58:	dd0b      	ble.n	8004a72 <_printf_float+0x1a2>
 8004a5a:	6121      	str	r1, [r4, #16]
 8004a5c:	b913      	cbnz	r3, 8004a64 <_printf_float+0x194>
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	07d0      	lsls	r0, r2, #31
 8004a62:	d502      	bpl.n	8004a6a <_printf_float+0x19a>
 8004a64:	3301      	adds	r3, #1
 8004a66:	440b      	add	r3, r1
 8004a68:	6123      	str	r3, [r4, #16]
 8004a6a:	f04f 0900 	mov.w	r9, #0
 8004a6e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a70:	e7dc      	b.n	8004a2c <_printf_float+0x15c>
 8004a72:	b913      	cbnz	r3, 8004a7a <_printf_float+0x1aa>
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	07d2      	lsls	r2, r2, #31
 8004a78:	d501      	bpl.n	8004a7e <_printf_float+0x1ae>
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	e7f4      	b.n	8004a68 <_printf_float+0x198>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e7f2      	b.n	8004a68 <_printf_float+0x198>
 8004a82:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a88:	4299      	cmp	r1, r3
 8004a8a:	db05      	blt.n	8004a98 <_printf_float+0x1c8>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	6121      	str	r1, [r4, #16]
 8004a90:	07d8      	lsls	r0, r3, #31
 8004a92:	d5ea      	bpl.n	8004a6a <_printf_float+0x19a>
 8004a94:	1c4b      	adds	r3, r1, #1
 8004a96:	e7e7      	b.n	8004a68 <_printf_float+0x198>
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	bfcc      	ite	gt
 8004a9c:	2201      	movgt	r2, #1
 8004a9e:	f1c1 0202 	rsble	r2, r1, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	e7e0      	b.n	8004a68 <_printf_float+0x198>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	055a      	lsls	r2, r3, #21
 8004aaa:	d407      	bmi.n	8004abc <_printf_float+0x1ec>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	4642      	mov	r2, r8
 8004ab0:	4631      	mov	r1, r6
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b8      	blx	r7
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d12b      	bne.n	8004b12 <_printf_float+0x242>
 8004aba:	e764      	b.n	8004986 <_printf_float+0xb6>
 8004abc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ac0:	f240 80dc 	bls.w	8004c7c <_printf_float+0x3ac>
 8004ac4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2300      	movs	r3, #0
 8004acc:	f7fc f820 	bl	8000b10 <__aeabi_dcmpeq>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d033      	beq.n	8004b3c <_printf_float+0x26c>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4628      	mov	r0, r5
 8004ada:	4a35      	ldr	r2, [pc, #212]	@ (8004bb0 <_printf_float+0x2e0>)
 8004adc:	47b8      	blx	r7
 8004ade:	3001      	adds	r0, #1
 8004ae0:	f43f af51 	beq.w	8004986 <_printf_float+0xb6>
 8004ae4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004ae8:	4543      	cmp	r3, r8
 8004aea:	db02      	blt.n	8004af2 <_printf_float+0x222>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	07d8      	lsls	r0, r3, #31
 8004af0:	d50f      	bpl.n	8004b12 <_printf_float+0x242>
 8004af2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004af6:	4631      	mov	r1, r6
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b8      	blx	r7
 8004afc:	3001      	adds	r0, #1
 8004afe:	f43f af42 	beq.w	8004986 <_printf_float+0xb6>
 8004b02:	f04f 0900 	mov.w	r9, #0
 8004b06:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b0a:	f104 0a1a 	add.w	sl, r4, #26
 8004b0e:	45c8      	cmp	r8, r9
 8004b10:	dc09      	bgt.n	8004b26 <_printf_float+0x256>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	079b      	lsls	r3, r3, #30
 8004b16:	f100 8102 	bmi.w	8004d1e <_printf_float+0x44e>
 8004b1a:	68e0      	ldr	r0, [r4, #12]
 8004b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b1e:	4298      	cmp	r0, r3
 8004b20:	bfb8      	it	lt
 8004b22:	4618      	movlt	r0, r3
 8004b24:	e731      	b.n	800498a <_printf_float+0xba>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	f43f af28 	beq.w	8004986 <_printf_float+0xb6>
 8004b36:	f109 0901 	add.w	r9, r9, #1
 8004b3a:	e7e8      	b.n	8004b0e <_printf_float+0x23e>
 8004b3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	dc38      	bgt.n	8004bb4 <_printf_float+0x2e4>
 8004b42:	2301      	movs	r3, #1
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	4a19      	ldr	r2, [pc, #100]	@ (8004bb0 <_printf_float+0x2e0>)
 8004b4a:	47b8      	blx	r7
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	f43f af1a 	beq.w	8004986 <_printf_float+0xb6>
 8004b52:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004b56:	ea59 0303 	orrs.w	r3, r9, r3
 8004b5a:	d102      	bne.n	8004b62 <_printf_float+0x292>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	07d9      	lsls	r1, r3, #31
 8004b60:	d5d7      	bpl.n	8004b12 <_printf_float+0x242>
 8004b62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b66:	4631      	mov	r1, r6
 8004b68:	4628      	mov	r0, r5
 8004b6a:	47b8      	blx	r7
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	f43f af0a 	beq.w	8004986 <_printf_float+0xb6>
 8004b72:	f04f 0a00 	mov.w	sl, #0
 8004b76:	f104 0b1a 	add.w	fp, r4, #26
 8004b7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b7c:	425b      	negs	r3, r3
 8004b7e:	4553      	cmp	r3, sl
 8004b80:	dc01      	bgt.n	8004b86 <_printf_float+0x2b6>
 8004b82:	464b      	mov	r3, r9
 8004b84:	e793      	b.n	8004aae <_printf_float+0x1de>
 8004b86:	2301      	movs	r3, #1
 8004b88:	465a      	mov	r2, fp
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	47b8      	blx	r7
 8004b90:	3001      	adds	r0, #1
 8004b92:	f43f aef8 	beq.w	8004986 <_printf_float+0xb6>
 8004b96:	f10a 0a01 	add.w	sl, sl, #1
 8004b9a:	e7ee      	b.n	8004b7a <_printf_float+0x2aa>
 8004b9c:	7fefffff 	.word	0x7fefffff
 8004ba0:	0800a9e5 	.word	0x0800a9e5
 8004ba4:	0800a9e9 	.word	0x0800a9e9
 8004ba8:	0800a9ed 	.word	0x0800a9ed
 8004bac:	0800a9f1 	.word	0x0800a9f1
 8004bb0:	08008df5 	.word	0x08008df5
 8004bb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bb6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004bba:	4553      	cmp	r3, sl
 8004bbc:	bfa8      	it	ge
 8004bbe:	4653      	movge	r3, sl
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	4699      	mov	r9, r3
 8004bc4:	dc36      	bgt.n	8004c34 <_printf_float+0x364>
 8004bc6:	f04f 0b00 	mov.w	fp, #0
 8004bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bce:	f104 021a 	add.w	r2, r4, #26
 8004bd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bd6:	eba3 0309 	sub.w	r3, r3, r9
 8004bda:	455b      	cmp	r3, fp
 8004bdc:	dc31      	bgt.n	8004c42 <_printf_float+0x372>
 8004bde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004be0:	459a      	cmp	sl, r3
 8004be2:	dc3a      	bgt.n	8004c5a <_printf_float+0x38a>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	07da      	lsls	r2, r3, #31
 8004be8:	d437      	bmi.n	8004c5a <_printf_float+0x38a>
 8004bea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bec:	ebaa 0903 	sub.w	r9, sl, r3
 8004bf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bf2:	ebaa 0303 	sub.w	r3, sl, r3
 8004bf6:	4599      	cmp	r9, r3
 8004bf8:	bfa8      	it	ge
 8004bfa:	4699      	movge	r9, r3
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	dc33      	bgt.n	8004c6a <_printf_float+0x39a>
 8004c02:	f04f 0800 	mov.w	r8, #0
 8004c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c0a:	f104 0b1a 	add.w	fp, r4, #26
 8004c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c10:	ebaa 0303 	sub.w	r3, sl, r3
 8004c14:	eba3 0309 	sub.w	r3, r3, r9
 8004c18:	4543      	cmp	r3, r8
 8004c1a:	f77f af7a 	ble.w	8004b12 <_printf_float+0x242>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	465a      	mov	r2, fp
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f aeac 	beq.w	8004986 <_printf_float+0xb6>
 8004c2e:	f108 0801 	add.w	r8, r8, #1
 8004c32:	e7ec      	b.n	8004c0e <_printf_float+0x33e>
 8004c34:	4642      	mov	r2, r8
 8004c36:	4631      	mov	r1, r6
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b8      	blx	r7
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d1c2      	bne.n	8004bc6 <_printf_float+0x2f6>
 8004c40:	e6a1      	b.n	8004986 <_printf_float+0xb6>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4631      	mov	r1, r6
 8004c46:	4628      	mov	r0, r5
 8004c48:	920a      	str	r2, [sp, #40]	@ 0x28
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	f43f ae9a 	beq.w	8004986 <_printf_float+0xb6>
 8004c52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c54:	f10b 0b01 	add.w	fp, fp, #1
 8004c58:	e7bb      	b.n	8004bd2 <_printf_float+0x302>
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	d1c0      	bne.n	8004bea <_printf_float+0x31a>
 8004c68:	e68d      	b.n	8004986 <_printf_float+0xb6>
 8004c6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	4442      	add	r2, r8
 8004c74:	47b8      	blx	r7
 8004c76:	3001      	adds	r0, #1
 8004c78:	d1c3      	bne.n	8004c02 <_printf_float+0x332>
 8004c7a:	e684      	b.n	8004986 <_printf_float+0xb6>
 8004c7c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c80:	f1ba 0f01 	cmp.w	sl, #1
 8004c84:	dc01      	bgt.n	8004c8a <_printf_float+0x3ba>
 8004c86:	07db      	lsls	r3, r3, #31
 8004c88:	d536      	bpl.n	8004cf8 <_printf_float+0x428>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b8      	blx	r7
 8004c94:	3001      	adds	r0, #1
 8004c96:	f43f ae76 	beq.w	8004986 <_printf_float+0xb6>
 8004c9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b8      	blx	r7
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f43f ae6e 	beq.w	8004986 <_printf_float+0xb6>
 8004caa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cb6:	f7fb ff2b 	bl	8000b10 <__aeabi_dcmpeq>
 8004cba:	b9c0      	cbnz	r0, 8004cee <_printf_float+0x41e>
 8004cbc:	4653      	mov	r3, sl
 8004cbe:	f108 0201 	add.w	r2, r8, #1
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	47b8      	blx	r7
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d10c      	bne.n	8004ce6 <_printf_float+0x416>
 8004ccc:	e65b      	b.n	8004986 <_printf_float+0xb6>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	465a      	mov	r2, fp
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f ae54 	beq.w	8004986 <_printf_float+0xb6>
 8004cde:	f108 0801 	add.w	r8, r8, #1
 8004ce2:	45d0      	cmp	r8, sl
 8004ce4:	dbf3      	blt.n	8004cce <_printf_float+0x3fe>
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004cec:	e6e0      	b.n	8004ab0 <_printf_float+0x1e0>
 8004cee:	f04f 0800 	mov.w	r8, #0
 8004cf2:	f104 0b1a 	add.w	fp, r4, #26
 8004cf6:	e7f4      	b.n	8004ce2 <_printf_float+0x412>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	e7e1      	b.n	8004cc2 <_printf_float+0x3f2>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	464a      	mov	r2, r9
 8004d02:	4631      	mov	r1, r6
 8004d04:	4628      	mov	r0, r5
 8004d06:	47b8      	blx	r7
 8004d08:	3001      	adds	r0, #1
 8004d0a:	f43f ae3c 	beq.w	8004986 <_printf_float+0xb6>
 8004d0e:	f108 0801 	add.w	r8, r8, #1
 8004d12:	68e3      	ldr	r3, [r4, #12]
 8004d14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004d16:	1a5b      	subs	r3, r3, r1
 8004d18:	4543      	cmp	r3, r8
 8004d1a:	dcf0      	bgt.n	8004cfe <_printf_float+0x42e>
 8004d1c:	e6fd      	b.n	8004b1a <_printf_float+0x24a>
 8004d1e:	f04f 0800 	mov.w	r8, #0
 8004d22:	f104 0919 	add.w	r9, r4, #25
 8004d26:	e7f4      	b.n	8004d12 <_printf_float+0x442>

08004d28 <_printf_common>:
 8004d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	4698      	mov	r8, r3
 8004d30:	688a      	ldr	r2, [r1, #8]
 8004d32:	690b      	ldr	r3, [r1, #16]
 8004d34:	4607      	mov	r7, r0
 8004d36:	4293      	cmp	r3, r2
 8004d38:	bfb8      	it	lt
 8004d3a:	4613      	movlt	r3, r2
 8004d3c:	6033      	str	r3, [r6, #0]
 8004d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d42:	460c      	mov	r4, r1
 8004d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d48:	b10a      	cbz	r2, 8004d4e <_printf_common+0x26>
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	6033      	str	r3, [r6, #0]
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	0699      	lsls	r1, r3, #26
 8004d52:	bf42      	ittt	mi
 8004d54:	6833      	ldrmi	r3, [r6, #0]
 8004d56:	3302      	addmi	r3, #2
 8004d58:	6033      	strmi	r3, [r6, #0]
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	f015 0506 	ands.w	r5, r5, #6
 8004d60:	d106      	bne.n	8004d70 <_printf_common+0x48>
 8004d62:	f104 0a19 	add.w	sl, r4, #25
 8004d66:	68e3      	ldr	r3, [r4, #12]
 8004d68:	6832      	ldr	r2, [r6, #0]
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	42ab      	cmp	r3, r5
 8004d6e:	dc2b      	bgt.n	8004dc8 <_printf_common+0xa0>
 8004d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	3b00      	subs	r3, #0
 8004d78:	bf18      	it	ne
 8004d7a:	2301      	movne	r3, #1
 8004d7c:	0692      	lsls	r2, r2, #26
 8004d7e:	d430      	bmi.n	8004de2 <_printf_common+0xba>
 8004d80:	4641      	mov	r1, r8
 8004d82:	4638      	mov	r0, r7
 8004d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d88:	47c8      	blx	r9
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d023      	beq.n	8004dd6 <_printf_common+0xae>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	6922      	ldr	r2, [r4, #16]
 8004d92:	f003 0306 	and.w	r3, r3, #6
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	bf14      	ite	ne
 8004d9a:	2500      	movne	r5, #0
 8004d9c:	6833      	ldreq	r3, [r6, #0]
 8004d9e:	f04f 0600 	mov.w	r6, #0
 8004da2:	bf08      	it	eq
 8004da4:	68e5      	ldreq	r5, [r4, #12]
 8004da6:	f104 041a 	add.w	r4, r4, #26
 8004daa:	bf08      	it	eq
 8004dac:	1aed      	subeq	r5, r5, r3
 8004dae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004db2:	bf08      	it	eq
 8004db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db8:	4293      	cmp	r3, r2
 8004dba:	bfc4      	itt	gt
 8004dbc:	1a9b      	subgt	r3, r3, r2
 8004dbe:	18ed      	addgt	r5, r5, r3
 8004dc0:	42b5      	cmp	r5, r6
 8004dc2:	d11a      	bne.n	8004dfa <_printf_common+0xd2>
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	e008      	b.n	8004dda <_printf_common+0xb2>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	4652      	mov	r2, sl
 8004dcc:	4641      	mov	r1, r8
 8004dce:	4638      	mov	r0, r7
 8004dd0:	47c8      	blx	r9
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d103      	bne.n	8004dde <_printf_common+0xb6>
 8004dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dde:	3501      	adds	r5, #1
 8004de0:	e7c1      	b.n	8004d66 <_printf_common+0x3e>
 8004de2:	2030      	movs	r0, #48	@ 0x30
 8004de4:	18e1      	adds	r1, r4, r3
 8004de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004df0:	4422      	add	r2, r4
 8004df2:	3302      	adds	r3, #2
 8004df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004df8:	e7c2      	b.n	8004d80 <_printf_common+0x58>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	4641      	mov	r1, r8
 8004e00:	4638      	mov	r0, r7
 8004e02:	47c8      	blx	r9
 8004e04:	3001      	adds	r0, #1
 8004e06:	d0e6      	beq.n	8004dd6 <_printf_common+0xae>
 8004e08:	3601      	adds	r6, #1
 8004e0a:	e7d9      	b.n	8004dc0 <_printf_common+0x98>

08004e0c <_printf_i>:
 8004e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	7e0f      	ldrb	r7, [r1, #24]
 8004e12:	4691      	mov	r9, r2
 8004e14:	2f78      	cmp	r7, #120	@ 0x78
 8004e16:	4680      	mov	r8, r0
 8004e18:	460c      	mov	r4, r1
 8004e1a:	469a      	mov	sl, r3
 8004e1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e22:	d807      	bhi.n	8004e34 <_printf_i+0x28>
 8004e24:	2f62      	cmp	r7, #98	@ 0x62
 8004e26:	d80a      	bhi.n	8004e3e <_printf_i+0x32>
 8004e28:	2f00      	cmp	r7, #0
 8004e2a:	f000 80d3 	beq.w	8004fd4 <_printf_i+0x1c8>
 8004e2e:	2f58      	cmp	r7, #88	@ 0x58
 8004e30:	f000 80ba 	beq.w	8004fa8 <_printf_i+0x19c>
 8004e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e3c:	e03a      	b.n	8004eb4 <_printf_i+0xa8>
 8004e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e42:	2b15      	cmp	r3, #21
 8004e44:	d8f6      	bhi.n	8004e34 <_printf_i+0x28>
 8004e46:	a101      	add	r1, pc, #4	@ (adr r1, 8004e4c <_printf_i+0x40>)
 8004e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e4c:	08004ea5 	.word	0x08004ea5
 8004e50:	08004eb9 	.word	0x08004eb9
 8004e54:	08004e35 	.word	0x08004e35
 8004e58:	08004e35 	.word	0x08004e35
 8004e5c:	08004e35 	.word	0x08004e35
 8004e60:	08004e35 	.word	0x08004e35
 8004e64:	08004eb9 	.word	0x08004eb9
 8004e68:	08004e35 	.word	0x08004e35
 8004e6c:	08004e35 	.word	0x08004e35
 8004e70:	08004e35 	.word	0x08004e35
 8004e74:	08004e35 	.word	0x08004e35
 8004e78:	08004fbb 	.word	0x08004fbb
 8004e7c:	08004ee3 	.word	0x08004ee3
 8004e80:	08004f75 	.word	0x08004f75
 8004e84:	08004e35 	.word	0x08004e35
 8004e88:	08004e35 	.word	0x08004e35
 8004e8c:	08004fdd 	.word	0x08004fdd
 8004e90:	08004e35 	.word	0x08004e35
 8004e94:	08004ee3 	.word	0x08004ee3
 8004e98:	08004e35 	.word	0x08004e35
 8004e9c:	08004e35 	.word	0x08004e35
 8004ea0:	08004f7d 	.word	0x08004f7d
 8004ea4:	6833      	ldr	r3, [r6, #0]
 8004ea6:	1d1a      	adds	r2, r3, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6032      	str	r2, [r6, #0]
 8004eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e09e      	b.n	8004ff6 <_printf_i+0x1ea>
 8004eb8:	6833      	ldr	r3, [r6, #0]
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	1d19      	adds	r1, r3, #4
 8004ebe:	6031      	str	r1, [r6, #0]
 8004ec0:	0606      	lsls	r6, r0, #24
 8004ec2:	d501      	bpl.n	8004ec8 <_printf_i+0xbc>
 8004ec4:	681d      	ldr	r5, [r3, #0]
 8004ec6:	e003      	b.n	8004ed0 <_printf_i+0xc4>
 8004ec8:	0645      	lsls	r5, r0, #25
 8004eca:	d5fb      	bpl.n	8004ec4 <_printf_i+0xb8>
 8004ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ed0:	2d00      	cmp	r5, #0
 8004ed2:	da03      	bge.n	8004edc <_printf_i+0xd0>
 8004ed4:	232d      	movs	r3, #45	@ 0x2d
 8004ed6:	426d      	negs	r5, r5
 8004ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004edc:	230a      	movs	r3, #10
 8004ede:	4859      	ldr	r0, [pc, #356]	@ (8005044 <_printf_i+0x238>)
 8004ee0:	e011      	b.n	8004f06 <_printf_i+0xfa>
 8004ee2:	6821      	ldr	r1, [r4, #0]
 8004ee4:	6833      	ldr	r3, [r6, #0]
 8004ee6:	0608      	lsls	r0, r1, #24
 8004ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004eec:	d402      	bmi.n	8004ef4 <_printf_i+0xe8>
 8004eee:	0649      	lsls	r1, r1, #25
 8004ef0:	bf48      	it	mi
 8004ef2:	b2ad      	uxthmi	r5, r5
 8004ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ef6:	6033      	str	r3, [r6, #0]
 8004ef8:	bf14      	ite	ne
 8004efa:	230a      	movne	r3, #10
 8004efc:	2308      	moveq	r3, #8
 8004efe:	4851      	ldr	r0, [pc, #324]	@ (8005044 <_printf_i+0x238>)
 8004f00:	2100      	movs	r1, #0
 8004f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f06:	6866      	ldr	r6, [r4, #4]
 8004f08:	2e00      	cmp	r6, #0
 8004f0a:	bfa8      	it	ge
 8004f0c:	6821      	ldrge	r1, [r4, #0]
 8004f0e:	60a6      	str	r6, [r4, #8]
 8004f10:	bfa4      	itt	ge
 8004f12:	f021 0104 	bicge.w	r1, r1, #4
 8004f16:	6021      	strge	r1, [r4, #0]
 8004f18:	b90d      	cbnz	r5, 8004f1e <_printf_i+0x112>
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	d04b      	beq.n	8004fb6 <_printf_i+0x1aa>
 8004f1e:	4616      	mov	r6, r2
 8004f20:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f24:	fb03 5711 	mls	r7, r3, r1, r5
 8004f28:	5dc7      	ldrb	r7, [r0, r7]
 8004f2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f2e:	462f      	mov	r7, r5
 8004f30:	42bb      	cmp	r3, r7
 8004f32:	460d      	mov	r5, r1
 8004f34:	d9f4      	bls.n	8004f20 <_printf_i+0x114>
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d10b      	bne.n	8004f52 <_printf_i+0x146>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	07df      	lsls	r7, r3, #31
 8004f3e:	d508      	bpl.n	8004f52 <_printf_i+0x146>
 8004f40:	6923      	ldr	r3, [r4, #16]
 8004f42:	6861      	ldr	r1, [r4, #4]
 8004f44:	4299      	cmp	r1, r3
 8004f46:	bfde      	ittt	le
 8004f48:	2330      	movle	r3, #48	@ 0x30
 8004f4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f52:	1b92      	subs	r2, r2, r6
 8004f54:	6122      	str	r2, [r4, #16]
 8004f56:	464b      	mov	r3, r9
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f8cd a000 	str.w	sl, [sp]
 8004f60:	aa03      	add	r2, sp, #12
 8004f62:	f7ff fee1 	bl	8004d28 <_printf_common>
 8004f66:	3001      	adds	r0, #1
 8004f68:	d14a      	bne.n	8005000 <_printf_i+0x1f4>
 8004f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6e:	b004      	add	sp, #16
 8004f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	f043 0320 	orr.w	r3, r3, #32
 8004f7a:	6023      	str	r3, [r4, #0]
 8004f7c:	2778      	movs	r7, #120	@ 0x78
 8004f7e:	4832      	ldr	r0, [pc, #200]	@ (8005048 <_printf_i+0x23c>)
 8004f80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	6831      	ldr	r1, [r6, #0]
 8004f88:	061f      	lsls	r7, r3, #24
 8004f8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f8e:	d402      	bmi.n	8004f96 <_printf_i+0x18a>
 8004f90:	065f      	lsls	r7, r3, #25
 8004f92:	bf48      	it	mi
 8004f94:	b2ad      	uxthmi	r5, r5
 8004f96:	6031      	str	r1, [r6, #0]
 8004f98:	07d9      	lsls	r1, r3, #31
 8004f9a:	bf44      	itt	mi
 8004f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004fa0:	6023      	strmi	r3, [r4, #0]
 8004fa2:	b11d      	cbz	r5, 8004fac <_printf_i+0x1a0>
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	e7ab      	b.n	8004f00 <_printf_i+0xf4>
 8004fa8:	4826      	ldr	r0, [pc, #152]	@ (8005044 <_printf_i+0x238>)
 8004faa:	e7e9      	b.n	8004f80 <_printf_i+0x174>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	f023 0320 	bic.w	r3, r3, #32
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	e7f6      	b.n	8004fa4 <_printf_i+0x198>
 8004fb6:	4616      	mov	r6, r2
 8004fb8:	e7bd      	b.n	8004f36 <_printf_i+0x12a>
 8004fba:	6833      	ldr	r3, [r6, #0]
 8004fbc:	6825      	ldr	r5, [r4, #0]
 8004fbe:	1d18      	adds	r0, r3, #4
 8004fc0:	6961      	ldr	r1, [r4, #20]
 8004fc2:	6030      	str	r0, [r6, #0]
 8004fc4:	062e      	lsls	r6, r5, #24
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	d501      	bpl.n	8004fce <_printf_i+0x1c2>
 8004fca:	6019      	str	r1, [r3, #0]
 8004fcc:	e002      	b.n	8004fd4 <_printf_i+0x1c8>
 8004fce:	0668      	lsls	r0, r5, #25
 8004fd0:	d5fb      	bpl.n	8004fca <_printf_i+0x1be>
 8004fd2:	8019      	strh	r1, [r3, #0]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4616      	mov	r6, r2
 8004fd8:	6123      	str	r3, [r4, #16]
 8004fda:	e7bc      	b.n	8004f56 <_printf_i+0x14a>
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	2100      	movs	r1, #0
 8004fe0:	1d1a      	adds	r2, r3, #4
 8004fe2:	6032      	str	r2, [r6, #0]
 8004fe4:	681e      	ldr	r6, [r3, #0]
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f000 fbec 	bl	80057c6 <memchr>
 8004fee:	b108      	cbz	r0, 8004ff4 <_printf_i+0x1e8>
 8004ff0:	1b80      	subs	r0, r0, r6
 8004ff2:	6060      	str	r0, [r4, #4]
 8004ff4:	6863      	ldr	r3, [r4, #4]
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ffe:	e7aa      	b.n	8004f56 <_printf_i+0x14a>
 8005000:	4632      	mov	r2, r6
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	6923      	ldr	r3, [r4, #16]
 8005008:	47d0      	blx	sl
 800500a:	3001      	adds	r0, #1
 800500c:	d0ad      	beq.n	8004f6a <_printf_i+0x15e>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	079b      	lsls	r3, r3, #30
 8005012:	d413      	bmi.n	800503c <_printf_i+0x230>
 8005014:	68e0      	ldr	r0, [r4, #12]
 8005016:	9b03      	ldr	r3, [sp, #12]
 8005018:	4298      	cmp	r0, r3
 800501a:	bfb8      	it	lt
 800501c:	4618      	movlt	r0, r3
 800501e:	e7a6      	b.n	8004f6e <_printf_i+0x162>
 8005020:	2301      	movs	r3, #1
 8005022:	4632      	mov	r2, r6
 8005024:	4649      	mov	r1, r9
 8005026:	4640      	mov	r0, r8
 8005028:	47d0      	blx	sl
 800502a:	3001      	adds	r0, #1
 800502c:	d09d      	beq.n	8004f6a <_printf_i+0x15e>
 800502e:	3501      	adds	r5, #1
 8005030:	68e3      	ldr	r3, [r4, #12]
 8005032:	9903      	ldr	r1, [sp, #12]
 8005034:	1a5b      	subs	r3, r3, r1
 8005036:	42ab      	cmp	r3, r5
 8005038:	dcf2      	bgt.n	8005020 <_printf_i+0x214>
 800503a:	e7eb      	b.n	8005014 <_printf_i+0x208>
 800503c:	2500      	movs	r5, #0
 800503e:	f104 0619 	add.w	r6, r4, #25
 8005042:	e7f5      	b.n	8005030 <_printf_i+0x224>
 8005044:	0800a9f5 	.word	0x0800a9f5
 8005048:	0800aa06 	.word	0x0800aa06

0800504c <_scanf_float>:
 800504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005050:	b087      	sub	sp, #28
 8005052:	9303      	str	r3, [sp, #12]
 8005054:	688b      	ldr	r3, [r1, #8]
 8005056:	4617      	mov	r7, r2
 8005058:	1e5a      	subs	r2, r3, #1
 800505a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800505e:	bf82      	ittt	hi
 8005060:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005064:	eb03 0b05 	addhi.w	fp, r3, r5
 8005068:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800506c:	460a      	mov	r2, r1
 800506e:	f04f 0500 	mov.w	r5, #0
 8005072:	bf88      	it	hi
 8005074:	608b      	strhi	r3, [r1, #8]
 8005076:	680b      	ldr	r3, [r1, #0]
 8005078:	4680      	mov	r8, r0
 800507a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800507e:	f842 3b1c 	str.w	r3, [r2], #28
 8005082:	460c      	mov	r4, r1
 8005084:	bf98      	it	ls
 8005086:	f04f 0b00 	movls.w	fp, #0
 800508a:	4616      	mov	r6, r2
 800508c:	46aa      	mov	sl, r5
 800508e:	46a9      	mov	r9, r5
 8005090:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005094:	9201      	str	r2, [sp, #4]
 8005096:	9502      	str	r5, [sp, #8]
 8005098:	68a2      	ldr	r2, [r4, #8]
 800509a:	b152      	cbz	r2, 80050b2 <_scanf_float+0x66>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b4e      	cmp	r3, #78	@ 0x4e
 80050a2:	d865      	bhi.n	8005170 <_scanf_float+0x124>
 80050a4:	2b40      	cmp	r3, #64	@ 0x40
 80050a6:	d83d      	bhi.n	8005124 <_scanf_float+0xd8>
 80050a8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80050ac:	b2c8      	uxtb	r0, r1
 80050ae:	280e      	cmp	r0, #14
 80050b0:	d93b      	bls.n	800512a <_scanf_float+0xde>
 80050b2:	f1b9 0f00 	cmp.w	r9, #0
 80050b6:	d003      	beq.n	80050c0 <_scanf_float+0x74>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050c4:	f1ba 0f01 	cmp.w	sl, #1
 80050c8:	f200 8118 	bhi.w	80052fc <_scanf_float+0x2b0>
 80050cc:	9b01      	ldr	r3, [sp, #4]
 80050ce:	429e      	cmp	r6, r3
 80050d0:	f200 8109 	bhi.w	80052e6 <_scanf_float+0x29a>
 80050d4:	2001      	movs	r0, #1
 80050d6:	b007      	add	sp, #28
 80050d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050dc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80050e0:	2a0d      	cmp	r2, #13
 80050e2:	d8e6      	bhi.n	80050b2 <_scanf_float+0x66>
 80050e4:	a101      	add	r1, pc, #4	@ (adr r1, 80050ec <_scanf_float+0xa0>)
 80050e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	08005233 	.word	0x08005233
 80050f0:	080050b3 	.word	0x080050b3
 80050f4:	080050b3 	.word	0x080050b3
 80050f8:	080050b3 	.word	0x080050b3
 80050fc:	08005293 	.word	0x08005293
 8005100:	0800526b 	.word	0x0800526b
 8005104:	080050b3 	.word	0x080050b3
 8005108:	080050b3 	.word	0x080050b3
 800510c:	08005241 	.word	0x08005241
 8005110:	080050b3 	.word	0x080050b3
 8005114:	080050b3 	.word	0x080050b3
 8005118:	080050b3 	.word	0x080050b3
 800511c:	080050b3 	.word	0x080050b3
 8005120:	080051f9 	.word	0x080051f9
 8005124:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005128:	e7da      	b.n	80050e0 <_scanf_float+0x94>
 800512a:	290e      	cmp	r1, #14
 800512c:	d8c1      	bhi.n	80050b2 <_scanf_float+0x66>
 800512e:	a001      	add	r0, pc, #4	@ (adr r0, 8005134 <_scanf_float+0xe8>)
 8005130:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005134:	080051e9 	.word	0x080051e9
 8005138:	080050b3 	.word	0x080050b3
 800513c:	080051e9 	.word	0x080051e9
 8005140:	0800527f 	.word	0x0800527f
 8005144:	080050b3 	.word	0x080050b3
 8005148:	08005191 	.word	0x08005191
 800514c:	080051cf 	.word	0x080051cf
 8005150:	080051cf 	.word	0x080051cf
 8005154:	080051cf 	.word	0x080051cf
 8005158:	080051cf 	.word	0x080051cf
 800515c:	080051cf 	.word	0x080051cf
 8005160:	080051cf 	.word	0x080051cf
 8005164:	080051cf 	.word	0x080051cf
 8005168:	080051cf 	.word	0x080051cf
 800516c:	080051cf 	.word	0x080051cf
 8005170:	2b6e      	cmp	r3, #110	@ 0x6e
 8005172:	d809      	bhi.n	8005188 <_scanf_float+0x13c>
 8005174:	2b60      	cmp	r3, #96	@ 0x60
 8005176:	d8b1      	bhi.n	80050dc <_scanf_float+0x90>
 8005178:	2b54      	cmp	r3, #84	@ 0x54
 800517a:	d07b      	beq.n	8005274 <_scanf_float+0x228>
 800517c:	2b59      	cmp	r3, #89	@ 0x59
 800517e:	d198      	bne.n	80050b2 <_scanf_float+0x66>
 8005180:	2d07      	cmp	r5, #7
 8005182:	d196      	bne.n	80050b2 <_scanf_float+0x66>
 8005184:	2508      	movs	r5, #8
 8005186:	e02c      	b.n	80051e2 <_scanf_float+0x196>
 8005188:	2b74      	cmp	r3, #116	@ 0x74
 800518a:	d073      	beq.n	8005274 <_scanf_float+0x228>
 800518c:	2b79      	cmp	r3, #121	@ 0x79
 800518e:	e7f6      	b.n	800517e <_scanf_float+0x132>
 8005190:	6821      	ldr	r1, [r4, #0]
 8005192:	05c8      	lsls	r0, r1, #23
 8005194:	d51b      	bpl.n	80051ce <_scanf_float+0x182>
 8005196:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800519a:	6021      	str	r1, [r4, #0]
 800519c:	f109 0901 	add.w	r9, r9, #1
 80051a0:	f1bb 0f00 	cmp.w	fp, #0
 80051a4:	d003      	beq.n	80051ae <_scanf_float+0x162>
 80051a6:	3201      	adds	r2, #1
 80051a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051ac:	60a2      	str	r2, [r4, #8]
 80051ae:	68a3      	ldr	r3, [r4, #8]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	60a3      	str	r3, [r4, #8]
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	3301      	adds	r3, #1
 80051b8:	6123      	str	r3, [r4, #16]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3b01      	subs	r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	f340 8087 	ble.w	80052d4 <_scanf_float+0x288>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	3301      	adds	r3, #1
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	e764      	b.n	8005098 <_scanf_float+0x4c>
 80051ce:	eb1a 0105 	adds.w	r1, sl, r5
 80051d2:	f47f af6e 	bne.w	80050b2 <_scanf_float+0x66>
 80051d6:	460d      	mov	r5, r1
 80051d8:	468a      	mov	sl, r1
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80051e0:	6022      	str	r2, [r4, #0]
 80051e2:	f806 3b01 	strb.w	r3, [r6], #1
 80051e6:	e7e2      	b.n	80051ae <_scanf_float+0x162>
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	0610      	lsls	r0, r2, #24
 80051ec:	f57f af61 	bpl.w	80050b2 <_scanf_float+0x66>
 80051f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051f4:	6022      	str	r2, [r4, #0]
 80051f6:	e7f4      	b.n	80051e2 <_scanf_float+0x196>
 80051f8:	f1ba 0f00 	cmp.w	sl, #0
 80051fc:	d10e      	bne.n	800521c <_scanf_float+0x1d0>
 80051fe:	f1b9 0f00 	cmp.w	r9, #0
 8005202:	d10e      	bne.n	8005222 <_scanf_float+0x1d6>
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800520a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800520e:	d108      	bne.n	8005222 <_scanf_float+0x1d6>
 8005210:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005214:	f04f 0a01 	mov.w	sl, #1
 8005218:	6022      	str	r2, [r4, #0]
 800521a:	e7e2      	b.n	80051e2 <_scanf_float+0x196>
 800521c:	f1ba 0f02 	cmp.w	sl, #2
 8005220:	d055      	beq.n	80052ce <_scanf_float+0x282>
 8005222:	2d01      	cmp	r5, #1
 8005224:	d002      	beq.n	800522c <_scanf_float+0x1e0>
 8005226:	2d04      	cmp	r5, #4
 8005228:	f47f af43 	bne.w	80050b2 <_scanf_float+0x66>
 800522c:	3501      	adds	r5, #1
 800522e:	b2ed      	uxtb	r5, r5
 8005230:	e7d7      	b.n	80051e2 <_scanf_float+0x196>
 8005232:	f1ba 0f01 	cmp.w	sl, #1
 8005236:	f47f af3c 	bne.w	80050b2 <_scanf_float+0x66>
 800523a:	f04f 0a02 	mov.w	sl, #2
 800523e:	e7d0      	b.n	80051e2 <_scanf_float+0x196>
 8005240:	b97d      	cbnz	r5, 8005262 <_scanf_float+0x216>
 8005242:	f1b9 0f00 	cmp.w	r9, #0
 8005246:	f47f af37 	bne.w	80050b8 <_scanf_float+0x6c>
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005250:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005254:	f040 8103 	bne.w	800545e <_scanf_float+0x412>
 8005258:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800525c:	2501      	movs	r5, #1
 800525e:	6022      	str	r2, [r4, #0]
 8005260:	e7bf      	b.n	80051e2 <_scanf_float+0x196>
 8005262:	2d03      	cmp	r5, #3
 8005264:	d0e2      	beq.n	800522c <_scanf_float+0x1e0>
 8005266:	2d05      	cmp	r5, #5
 8005268:	e7de      	b.n	8005228 <_scanf_float+0x1dc>
 800526a:	2d02      	cmp	r5, #2
 800526c:	f47f af21 	bne.w	80050b2 <_scanf_float+0x66>
 8005270:	2503      	movs	r5, #3
 8005272:	e7b6      	b.n	80051e2 <_scanf_float+0x196>
 8005274:	2d06      	cmp	r5, #6
 8005276:	f47f af1c 	bne.w	80050b2 <_scanf_float+0x66>
 800527a:	2507      	movs	r5, #7
 800527c:	e7b1      	b.n	80051e2 <_scanf_float+0x196>
 800527e:	6822      	ldr	r2, [r4, #0]
 8005280:	0591      	lsls	r1, r2, #22
 8005282:	f57f af16 	bpl.w	80050b2 <_scanf_float+0x66>
 8005286:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800528a:	6022      	str	r2, [r4, #0]
 800528c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005290:	e7a7      	b.n	80051e2 <_scanf_float+0x196>
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005298:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800529c:	d006      	beq.n	80052ac <_scanf_float+0x260>
 800529e:	0550      	lsls	r0, r2, #21
 80052a0:	f57f af07 	bpl.w	80050b2 <_scanf_float+0x66>
 80052a4:	f1b9 0f00 	cmp.w	r9, #0
 80052a8:	f000 80d9 	beq.w	800545e <_scanf_float+0x412>
 80052ac:	0591      	lsls	r1, r2, #22
 80052ae:	bf58      	it	pl
 80052b0:	9902      	ldrpl	r1, [sp, #8]
 80052b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80052b6:	bf58      	it	pl
 80052b8:	eba9 0101 	subpl.w	r1, r9, r1
 80052bc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80052c0:	f04f 0900 	mov.w	r9, #0
 80052c4:	bf58      	it	pl
 80052c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80052ca:	6022      	str	r2, [r4, #0]
 80052cc:	e789      	b.n	80051e2 <_scanf_float+0x196>
 80052ce:	f04f 0a03 	mov.w	sl, #3
 80052d2:	e786      	b.n	80051e2 <_scanf_float+0x196>
 80052d4:	4639      	mov	r1, r7
 80052d6:	4640      	mov	r0, r8
 80052d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80052dc:	4798      	blx	r3
 80052de:	2800      	cmp	r0, #0
 80052e0:	f43f aeda 	beq.w	8005098 <_scanf_float+0x4c>
 80052e4:	e6e5      	b.n	80050b2 <_scanf_float+0x66>
 80052e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052ea:	463a      	mov	r2, r7
 80052ec:	4640      	mov	r0, r8
 80052ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052f2:	4798      	blx	r3
 80052f4:	6923      	ldr	r3, [r4, #16]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	e6e7      	b.n	80050cc <_scanf_float+0x80>
 80052fc:	1e6b      	subs	r3, r5, #1
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d824      	bhi.n	800534c <_scanf_float+0x300>
 8005302:	2d02      	cmp	r5, #2
 8005304:	d836      	bhi.n	8005374 <_scanf_float+0x328>
 8005306:	9b01      	ldr	r3, [sp, #4]
 8005308:	429e      	cmp	r6, r3
 800530a:	f67f aee3 	bls.w	80050d4 <_scanf_float+0x88>
 800530e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005312:	463a      	mov	r2, r7
 8005314:	4640      	mov	r0, r8
 8005316:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800531a:	4798      	blx	r3
 800531c:	6923      	ldr	r3, [r4, #16]
 800531e:	3b01      	subs	r3, #1
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	e7f0      	b.n	8005306 <_scanf_float+0x2ba>
 8005324:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005328:	463a      	mov	r2, r7
 800532a:	4640      	mov	r0, r8
 800532c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005330:	4798      	blx	r3
 8005332:	6923      	ldr	r3, [r4, #16]
 8005334:	3b01      	subs	r3, #1
 8005336:	6123      	str	r3, [r4, #16]
 8005338:	f10a 3aff 	add.w	sl, sl, #4294967295
 800533c:	fa5f fa8a 	uxtb.w	sl, sl
 8005340:	f1ba 0f02 	cmp.w	sl, #2
 8005344:	d1ee      	bne.n	8005324 <_scanf_float+0x2d8>
 8005346:	3d03      	subs	r5, #3
 8005348:	b2ed      	uxtb	r5, r5
 800534a:	1b76      	subs	r6, r6, r5
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	05da      	lsls	r2, r3, #23
 8005350:	d530      	bpl.n	80053b4 <_scanf_float+0x368>
 8005352:	055b      	lsls	r3, r3, #21
 8005354:	d511      	bpl.n	800537a <_scanf_float+0x32e>
 8005356:	9b01      	ldr	r3, [sp, #4]
 8005358:	429e      	cmp	r6, r3
 800535a:	f67f aebb 	bls.w	80050d4 <_scanf_float+0x88>
 800535e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005362:	463a      	mov	r2, r7
 8005364:	4640      	mov	r0, r8
 8005366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800536a:	4798      	blx	r3
 800536c:	6923      	ldr	r3, [r4, #16]
 800536e:	3b01      	subs	r3, #1
 8005370:	6123      	str	r3, [r4, #16]
 8005372:	e7f0      	b.n	8005356 <_scanf_float+0x30a>
 8005374:	46aa      	mov	sl, r5
 8005376:	46b3      	mov	fp, r6
 8005378:	e7de      	b.n	8005338 <_scanf_float+0x2ec>
 800537a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	2965      	cmp	r1, #101	@ 0x65
 8005382:	f103 33ff 	add.w	r3, r3, #4294967295
 8005386:	f106 35ff 	add.w	r5, r6, #4294967295
 800538a:	6123      	str	r3, [r4, #16]
 800538c:	d00c      	beq.n	80053a8 <_scanf_float+0x35c>
 800538e:	2945      	cmp	r1, #69	@ 0x45
 8005390:	d00a      	beq.n	80053a8 <_scanf_float+0x35c>
 8005392:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005396:	463a      	mov	r2, r7
 8005398:	4640      	mov	r0, r8
 800539a:	4798      	blx	r3
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	1eb5      	subs	r5, r6, #2
 80053a6:	6123      	str	r3, [r4, #16]
 80053a8:	463a      	mov	r2, r7
 80053aa:	4640      	mov	r0, r8
 80053ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053b0:	4798      	blx	r3
 80053b2:	462e      	mov	r6, r5
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	f012 0210 	ands.w	r2, r2, #16
 80053ba:	d001      	beq.n	80053c0 <_scanf_float+0x374>
 80053bc:	2000      	movs	r0, #0
 80053be:	e68a      	b.n	80050d6 <_scanf_float+0x8a>
 80053c0:	7032      	strb	r2, [r6, #0]
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053cc:	d11c      	bne.n	8005408 <_scanf_float+0x3bc>
 80053ce:	9b02      	ldr	r3, [sp, #8]
 80053d0:	454b      	cmp	r3, r9
 80053d2:	eba3 0209 	sub.w	r2, r3, r9
 80053d6:	d123      	bne.n	8005420 <_scanf_float+0x3d4>
 80053d8:	2200      	movs	r2, #0
 80053da:	4640      	mov	r0, r8
 80053dc:	9901      	ldr	r1, [sp, #4]
 80053de:	f002 fc23 	bl	8007c28 <_strtod_r>
 80053e2:	9b03      	ldr	r3, [sp, #12]
 80053e4:	6825      	ldr	r5, [r4, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f015 0f02 	tst.w	r5, #2
 80053ec:	4606      	mov	r6, r0
 80053ee:	460f      	mov	r7, r1
 80053f0:	f103 0204 	add.w	r2, r3, #4
 80053f4:	d01f      	beq.n	8005436 <_scanf_float+0x3ea>
 80053f6:	9903      	ldr	r1, [sp, #12]
 80053f8:	600a      	str	r2, [r1, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	e9c3 6700 	strd	r6, r7, [r3]
 8005400:	68e3      	ldr	r3, [r4, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60e3      	str	r3, [r4, #12]
 8005406:	e7d9      	b.n	80053bc <_scanf_float+0x370>
 8005408:	9b04      	ldr	r3, [sp, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0e4      	beq.n	80053d8 <_scanf_float+0x38c>
 800540e:	9905      	ldr	r1, [sp, #20]
 8005410:	230a      	movs	r3, #10
 8005412:	4640      	mov	r0, r8
 8005414:	3101      	adds	r1, #1
 8005416:	f7ff f9bb 	bl	8004790 <_strtol_r>
 800541a:	9b04      	ldr	r3, [sp, #16]
 800541c:	9e05      	ldr	r6, [sp, #20]
 800541e:	1ac2      	subs	r2, r0, r3
 8005420:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005424:	429e      	cmp	r6, r3
 8005426:	bf28      	it	cs
 8005428:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800542c:	4630      	mov	r0, r6
 800542e:	490d      	ldr	r1, [pc, #52]	@ (8005464 <_scanf_float+0x418>)
 8005430:	f000 f8de 	bl	80055f0 <siprintf>
 8005434:	e7d0      	b.n	80053d8 <_scanf_float+0x38c>
 8005436:	076d      	lsls	r5, r5, #29
 8005438:	d4dd      	bmi.n	80053f6 <_scanf_float+0x3aa>
 800543a:	9d03      	ldr	r5, [sp, #12]
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	681d      	ldr	r5, [r3, #0]
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	f7fb fb96 	bl	8000b74 <__aeabi_dcmpun>
 8005448:	b120      	cbz	r0, 8005454 <_scanf_float+0x408>
 800544a:	4807      	ldr	r0, [pc, #28]	@ (8005468 <_scanf_float+0x41c>)
 800544c:	f000 f9d8 	bl	8005800 <nanf>
 8005450:	6028      	str	r0, [r5, #0]
 8005452:	e7d5      	b.n	8005400 <_scanf_float+0x3b4>
 8005454:	4630      	mov	r0, r6
 8005456:	4639      	mov	r1, r7
 8005458:	f7fb fbea 	bl	8000c30 <__aeabi_d2f>
 800545c:	e7f8      	b.n	8005450 <_scanf_float+0x404>
 800545e:	f04f 0900 	mov.w	r9, #0
 8005462:	e62d      	b.n	80050c0 <_scanf_float+0x74>
 8005464:	0800aa17 	.word	0x0800aa17
 8005468:	08008de6 	.word	0x08008de6

0800546c <std>:
 800546c:	2300      	movs	r3, #0
 800546e:	b510      	push	{r4, lr}
 8005470:	4604      	mov	r4, r0
 8005472:	e9c0 3300 	strd	r3, r3, [r0]
 8005476:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800547a:	6083      	str	r3, [r0, #8]
 800547c:	8181      	strh	r1, [r0, #12]
 800547e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005480:	81c2      	strh	r2, [r0, #14]
 8005482:	6183      	str	r3, [r0, #24]
 8005484:	4619      	mov	r1, r3
 8005486:	2208      	movs	r2, #8
 8005488:	305c      	adds	r0, #92	@ 0x5c
 800548a:	f000 f914 	bl	80056b6 <memset>
 800548e:	4b0d      	ldr	r3, [pc, #52]	@ (80054c4 <std+0x58>)
 8005490:	6224      	str	r4, [r4, #32]
 8005492:	6263      	str	r3, [r4, #36]	@ 0x24
 8005494:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <std+0x5c>)
 8005496:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005498:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <std+0x60>)
 800549a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800549c:	4b0c      	ldr	r3, [pc, #48]	@ (80054d0 <std+0x64>)
 800549e:	6323      	str	r3, [r4, #48]	@ 0x30
 80054a0:	4b0c      	ldr	r3, [pc, #48]	@ (80054d4 <std+0x68>)
 80054a2:	429c      	cmp	r4, r3
 80054a4:	d006      	beq.n	80054b4 <std+0x48>
 80054a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054aa:	4294      	cmp	r4, r2
 80054ac:	d002      	beq.n	80054b4 <std+0x48>
 80054ae:	33d0      	adds	r3, #208	@ 0xd0
 80054b0:	429c      	cmp	r4, r3
 80054b2:	d105      	bne.n	80054c0 <std+0x54>
 80054b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054bc:	f000 b978 	b.w	80057b0 <__retarget_lock_init_recursive>
 80054c0:	bd10      	pop	{r4, pc}
 80054c2:	bf00      	nop
 80054c4:	08005631 	.word	0x08005631
 80054c8:	08005653 	.word	0x08005653
 80054cc:	0800568b 	.word	0x0800568b
 80054d0:	080056af 	.word	0x080056af
 80054d4:	20000970 	.word	0x20000970

080054d8 <stdio_exit_handler>:
 80054d8:	4a02      	ldr	r2, [pc, #8]	@ (80054e4 <stdio_exit_handler+0xc>)
 80054da:	4903      	ldr	r1, [pc, #12]	@ (80054e8 <stdio_exit_handler+0x10>)
 80054dc:	4803      	ldr	r0, [pc, #12]	@ (80054ec <stdio_exit_handler+0x14>)
 80054de:	f000 b869 	b.w	80055b4 <_fwalk_sglue>
 80054e2:	bf00      	nop
 80054e4:	20000038 	.word	0x20000038
 80054e8:	08007fe5 	.word	0x08007fe5
 80054ec:	20000048 	.word	0x20000048

080054f0 <cleanup_stdio>:
 80054f0:	6841      	ldr	r1, [r0, #4]
 80054f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005524 <cleanup_stdio+0x34>)
 80054f4:	b510      	push	{r4, lr}
 80054f6:	4299      	cmp	r1, r3
 80054f8:	4604      	mov	r4, r0
 80054fa:	d001      	beq.n	8005500 <cleanup_stdio+0x10>
 80054fc:	f002 fd72 	bl	8007fe4 <_fflush_r>
 8005500:	68a1      	ldr	r1, [r4, #8]
 8005502:	4b09      	ldr	r3, [pc, #36]	@ (8005528 <cleanup_stdio+0x38>)
 8005504:	4299      	cmp	r1, r3
 8005506:	d002      	beq.n	800550e <cleanup_stdio+0x1e>
 8005508:	4620      	mov	r0, r4
 800550a:	f002 fd6b 	bl	8007fe4 <_fflush_r>
 800550e:	68e1      	ldr	r1, [r4, #12]
 8005510:	4b06      	ldr	r3, [pc, #24]	@ (800552c <cleanup_stdio+0x3c>)
 8005512:	4299      	cmp	r1, r3
 8005514:	d004      	beq.n	8005520 <cleanup_stdio+0x30>
 8005516:	4620      	mov	r0, r4
 8005518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800551c:	f002 bd62 	b.w	8007fe4 <_fflush_r>
 8005520:	bd10      	pop	{r4, pc}
 8005522:	bf00      	nop
 8005524:	20000970 	.word	0x20000970
 8005528:	200009d8 	.word	0x200009d8
 800552c:	20000a40 	.word	0x20000a40

08005530 <global_stdio_init.part.0>:
 8005530:	b510      	push	{r4, lr}
 8005532:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <global_stdio_init.part.0+0x30>)
 8005534:	4c0b      	ldr	r4, [pc, #44]	@ (8005564 <global_stdio_init.part.0+0x34>)
 8005536:	4a0c      	ldr	r2, [pc, #48]	@ (8005568 <global_stdio_init.part.0+0x38>)
 8005538:	4620      	mov	r0, r4
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	2104      	movs	r1, #4
 800553e:	2200      	movs	r2, #0
 8005540:	f7ff ff94 	bl	800546c <std>
 8005544:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005548:	2201      	movs	r2, #1
 800554a:	2109      	movs	r1, #9
 800554c:	f7ff ff8e 	bl	800546c <std>
 8005550:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005554:	2202      	movs	r2, #2
 8005556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800555a:	2112      	movs	r1, #18
 800555c:	f7ff bf86 	b.w	800546c <std>
 8005560:	20000aa8 	.word	0x20000aa8
 8005564:	20000970 	.word	0x20000970
 8005568:	080054d9 	.word	0x080054d9

0800556c <__sfp_lock_acquire>:
 800556c:	4801      	ldr	r0, [pc, #4]	@ (8005574 <__sfp_lock_acquire+0x8>)
 800556e:	f000 b920 	b.w	80057b2 <__retarget_lock_acquire_recursive>
 8005572:	bf00      	nop
 8005574:	20000ab1 	.word	0x20000ab1

08005578 <__sfp_lock_release>:
 8005578:	4801      	ldr	r0, [pc, #4]	@ (8005580 <__sfp_lock_release+0x8>)
 800557a:	f000 b91b 	b.w	80057b4 <__retarget_lock_release_recursive>
 800557e:	bf00      	nop
 8005580:	20000ab1 	.word	0x20000ab1

08005584 <__sinit>:
 8005584:	b510      	push	{r4, lr}
 8005586:	4604      	mov	r4, r0
 8005588:	f7ff fff0 	bl	800556c <__sfp_lock_acquire>
 800558c:	6a23      	ldr	r3, [r4, #32]
 800558e:	b11b      	cbz	r3, 8005598 <__sinit+0x14>
 8005590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005594:	f7ff bff0 	b.w	8005578 <__sfp_lock_release>
 8005598:	4b04      	ldr	r3, [pc, #16]	@ (80055ac <__sinit+0x28>)
 800559a:	6223      	str	r3, [r4, #32]
 800559c:	4b04      	ldr	r3, [pc, #16]	@ (80055b0 <__sinit+0x2c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f5      	bne.n	8005590 <__sinit+0xc>
 80055a4:	f7ff ffc4 	bl	8005530 <global_stdio_init.part.0>
 80055a8:	e7f2      	b.n	8005590 <__sinit+0xc>
 80055aa:	bf00      	nop
 80055ac:	080054f1 	.word	0x080054f1
 80055b0:	20000aa8 	.word	0x20000aa8

080055b4 <_fwalk_sglue>:
 80055b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b8:	4607      	mov	r7, r0
 80055ba:	4688      	mov	r8, r1
 80055bc:	4614      	mov	r4, r2
 80055be:	2600      	movs	r6, #0
 80055c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055c4:	f1b9 0901 	subs.w	r9, r9, #1
 80055c8:	d505      	bpl.n	80055d6 <_fwalk_sglue+0x22>
 80055ca:	6824      	ldr	r4, [r4, #0]
 80055cc:	2c00      	cmp	r4, #0
 80055ce:	d1f7      	bne.n	80055c0 <_fwalk_sglue+0xc>
 80055d0:	4630      	mov	r0, r6
 80055d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055d6:	89ab      	ldrh	r3, [r5, #12]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d907      	bls.n	80055ec <_fwalk_sglue+0x38>
 80055dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055e0:	3301      	adds	r3, #1
 80055e2:	d003      	beq.n	80055ec <_fwalk_sglue+0x38>
 80055e4:	4629      	mov	r1, r5
 80055e6:	4638      	mov	r0, r7
 80055e8:	47c0      	blx	r8
 80055ea:	4306      	orrs	r6, r0
 80055ec:	3568      	adds	r5, #104	@ 0x68
 80055ee:	e7e9      	b.n	80055c4 <_fwalk_sglue+0x10>

080055f0 <siprintf>:
 80055f0:	b40e      	push	{r1, r2, r3}
 80055f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055f6:	b500      	push	{lr}
 80055f8:	b09c      	sub	sp, #112	@ 0x70
 80055fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80055fc:	9002      	str	r0, [sp, #8]
 80055fe:	9006      	str	r0, [sp, #24]
 8005600:	9107      	str	r1, [sp, #28]
 8005602:	9104      	str	r1, [sp, #16]
 8005604:	4808      	ldr	r0, [pc, #32]	@ (8005628 <siprintf+0x38>)
 8005606:	4909      	ldr	r1, [pc, #36]	@ (800562c <siprintf+0x3c>)
 8005608:	f853 2b04 	ldr.w	r2, [r3], #4
 800560c:	9105      	str	r1, [sp, #20]
 800560e:	6800      	ldr	r0, [r0, #0]
 8005610:	a902      	add	r1, sp, #8
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	f002 fb6a 	bl	8007cec <_svfiprintf_r>
 8005618:	2200      	movs	r2, #0
 800561a:	9b02      	ldr	r3, [sp, #8]
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	b01c      	add	sp, #112	@ 0x70
 8005620:	f85d eb04 	ldr.w	lr, [sp], #4
 8005624:	b003      	add	sp, #12
 8005626:	4770      	bx	lr
 8005628:	20000044 	.word	0x20000044
 800562c:	ffff0208 	.word	0xffff0208

08005630 <__sread>:
 8005630:	b510      	push	{r4, lr}
 8005632:	460c      	mov	r4, r1
 8005634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005638:	f000 f86c 	bl	8005714 <_read_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	bfab      	itete	ge
 8005640:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005642:	89a3      	ldrhlt	r3, [r4, #12]
 8005644:	181b      	addge	r3, r3, r0
 8005646:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800564a:	bfac      	ite	ge
 800564c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800564e:	81a3      	strhlt	r3, [r4, #12]
 8005650:	bd10      	pop	{r4, pc}

08005652 <__swrite>:
 8005652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005656:	461f      	mov	r7, r3
 8005658:	898b      	ldrh	r3, [r1, #12]
 800565a:	4605      	mov	r5, r0
 800565c:	05db      	lsls	r3, r3, #23
 800565e:	460c      	mov	r4, r1
 8005660:	4616      	mov	r6, r2
 8005662:	d505      	bpl.n	8005670 <__swrite+0x1e>
 8005664:	2302      	movs	r3, #2
 8005666:	2200      	movs	r2, #0
 8005668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566c:	f000 f840 	bl	80056f0 <_lseek_r>
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	4632      	mov	r2, r6
 8005674:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005678:	81a3      	strh	r3, [r4, #12]
 800567a:	4628      	mov	r0, r5
 800567c:	463b      	mov	r3, r7
 800567e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005686:	f000 b857 	b.w	8005738 <_write_r>

0800568a <__sseek>:
 800568a:	b510      	push	{r4, lr}
 800568c:	460c      	mov	r4, r1
 800568e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005692:	f000 f82d 	bl	80056f0 <_lseek_r>
 8005696:	1c43      	adds	r3, r0, #1
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	bf15      	itete	ne
 800569c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800569e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056a6:	81a3      	strheq	r3, [r4, #12]
 80056a8:	bf18      	it	ne
 80056aa:	81a3      	strhne	r3, [r4, #12]
 80056ac:	bd10      	pop	{r4, pc}

080056ae <__sclose>:
 80056ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b2:	f000 b80d 	b.w	80056d0 <_close_r>

080056b6 <memset>:
 80056b6:	4603      	mov	r3, r0
 80056b8:	4402      	add	r2, r0
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d100      	bne.n	80056c0 <memset+0xa>
 80056be:	4770      	bx	lr
 80056c0:	f803 1b01 	strb.w	r1, [r3], #1
 80056c4:	e7f9      	b.n	80056ba <memset+0x4>
	...

080056c8 <_localeconv_r>:
 80056c8:	4800      	ldr	r0, [pc, #0]	@ (80056cc <_localeconv_r+0x4>)
 80056ca:	4770      	bx	lr
 80056cc:	20000184 	.word	0x20000184

080056d0 <_close_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	2300      	movs	r3, #0
 80056d4:	4d05      	ldr	r5, [pc, #20]	@ (80056ec <_close_r+0x1c>)
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	602b      	str	r3, [r5, #0]
 80056dc:	f7fc fdbc 	bl	8002258 <_close>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_close_r+0x1a>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_close_r+0x1a>
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	20000aac 	.word	0x20000aac

080056f0 <_lseek_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4604      	mov	r4, r0
 80056f4:	4608      	mov	r0, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	2200      	movs	r2, #0
 80056fa:	4d05      	ldr	r5, [pc, #20]	@ (8005710 <_lseek_r+0x20>)
 80056fc:	602a      	str	r2, [r5, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	f7fc fdb4 	bl	800226c <_lseek>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_lseek_r+0x1e>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	b103      	cbz	r3, 800570e <_lseek_r+0x1e>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	20000aac 	.word	0x20000aac

08005714 <_read_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	2200      	movs	r2, #0
 800571e:	4d05      	ldr	r5, [pc, #20]	@ (8005734 <_read_r+0x20>)
 8005720:	602a      	str	r2, [r5, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	f7fc fd7c 	bl	8002220 <_read>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d102      	bne.n	8005732 <_read_r+0x1e>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	b103      	cbz	r3, 8005732 <_read_r+0x1e>
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	20000aac 	.word	0x20000aac

08005738 <_write_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	2200      	movs	r2, #0
 8005742:	4d05      	ldr	r5, [pc, #20]	@ (8005758 <_write_r+0x20>)
 8005744:	602a      	str	r2, [r5, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	f7fc fd78 	bl	800223c <_write>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_write_r+0x1e>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_write_r+0x1e>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	20000aac 	.word	0x20000aac

0800575c <__errno>:
 800575c:	4b01      	ldr	r3, [pc, #4]	@ (8005764 <__errno+0x8>)
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000044 	.word	0x20000044

08005768 <__libc_init_array>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	2600      	movs	r6, #0
 800576c:	4d0c      	ldr	r5, [pc, #48]	@ (80057a0 <__libc_init_array+0x38>)
 800576e:	4c0d      	ldr	r4, [pc, #52]	@ (80057a4 <__libc_init_array+0x3c>)
 8005770:	1b64      	subs	r4, r4, r5
 8005772:	10a4      	asrs	r4, r4, #2
 8005774:	42a6      	cmp	r6, r4
 8005776:	d109      	bne.n	800578c <__libc_init_array+0x24>
 8005778:	f003 faf6 	bl	8008d68 <_init>
 800577c:	2600      	movs	r6, #0
 800577e:	4d0a      	ldr	r5, [pc, #40]	@ (80057a8 <__libc_init_array+0x40>)
 8005780:	4c0a      	ldr	r4, [pc, #40]	@ (80057ac <__libc_init_array+0x44>)
 8005782:	1b64      	subs	r4, r4, r5
 8005784:	10a4      	asrs	r4, r4, #2
 8005786:	42a6      	cmp	r6, r4
 8005788:	d105      	bne.n	8005796 <__libc_init_array+0x2e>
 800578a:	bd70      	pop	{r4, r5, r6, pc}
 800578c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005790:	4798      	blx	r3
 8005792:	3601      	adds	r6, #1
 8005794:	e7ee      	b.n	8005774 <__libc_init_array+0xc>
 8005796:	f855 3b04 	ldr.w	r3, [r5], #4
 800579a:	4798      	blx	r3
 800579c:	3601      	adds	r6, #1
 800579e:	e7f2      	b.n	8005786 <__libc_init_array+0x1e>
 80057a0:	0800ad10 	.word	0x0800ad10
 80057a4:	0800ad10 	.word	0x0800ad10
 80057a8:	0800ad10 	.word	0x0800ad10
 80057ac:	0800ad14 	.word	0x0800ad14

080057b0 <__retarget_lock_init_recursive>:
 80057b0:	4770      	bx	lr

080057b2 <__retarget_lock_acquire_recursive>:
 80057b2:	4770      	bx	lr

080057b4 <__retarget_lock_release_recursive>:
 80057b4:	4770      	bx	lr

080057b6 <strcpy>:
 80057b6:	4603      	mov	r3, r0
 80057b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057bc:	f803 2b01 	strb.w	r2, [r3], #1
 80057c0:	2a00      	cmp	r2, #0
 80057c2:	d1f9      	bne.n	80057b8 <strcpy+0x2>
 80057c4:	4770      	bx	lr

080057c6 <memchr>:
 80057c6:	4603      	mov	r3, r0
 80057c8:	b510      	push	{r4, lr}
 80057ca:	b2c9      	uxtb	r1, r1
 80057cc:	4402      	add	r2, r0
 80057ce:	4293      	cmp	r3, r2
 80057d0:	4618      	mov	r0, r3
 80057d2:	d101      	bne.n	80057d8 <memchr+0x12>
 80057d4:	2000      	movs	r0, #0
 80057d6:	e003      	b.n	80057e0 <memchr+0x1a>
 80057d8:	7804      	ldrb	r4, [r0, #0]
 80057da:	3301      	adds	r3, #1
 80057dc:	428c      	cmp	r4, r1
 80057de:	d1f6      	bne.n	80057ce <memchr+0x8>
 80057e0:	bd10      	pop	{r4, pc}

080057e2 <memcpy>:
 80057e2:	440a      	add	r2, r1
 80057e4:	4291      	cmp	r1, r2
 80057e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80057ea:	d100      	bne.n	80057ee <memcpy+0xc>
 80057ec:	4770      	bx	lr
 80057ee:	b510      	push	{r4, lr}
 80057f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057f4:	4291      	cmp	r1, r2
 80057f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057fa:	d1f9      	bne.n	80057f0 <memcpy+0xe>
 80057fc:	bd10      	pop	{r4, pc}
	...

08005800 <nanf>:
 8005800:	4800      	ldr	r0, [pc, #0]	@ (8005804 <nanf+0x4>)
 8005802:	4770      	bx	lr
 8005804:	7fc00000 	.word	0x7fc00000

08005808 <__assert_func>:
 8005808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800580a:	4614      	mov	r4, r2
 800580c:	461a      	mov	r2, r3
 800580e:	4b09      	ldr	r3, [pc, #36]	@ (8005834 <__assert_func+0x2c>)
 8005810:	4605      	mov	r5, r0
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68d8      	ldr	r0, [r3, #12]
 8005816:	b954      	cbnz	r4, 800582e <__assert_func+0x26>
 8005818:	4b07      	ldr	r3, [pc, #28]	@ (8005838 <__assert_func+0x30>)
 800581a:	461c      	mov	r4, r3
 800581c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005820:	9100      	str	r1, [sp, #0]
 8005822:	462b      	mov	r3, r5
 8005824:	4905      	ldr	r1, [pc, #20]	@ (800583c <__assert_func+0x34>)
 8005826:	f002 fc05 	bl	8008034 <fiprintf>
 800582a:	f002 fc57 	bl	80080dc <abort>
 800582e:	4b04      	ldr	r3, [pc, #16]	@ (8005840 <__assert_func+0x38>)
 8005830:	e7f4      	b.n	800581c <__assert_func+0x14>
 8005832:	bf00      	nop
 8005834:	20000044 	.word	0x20000044
 8005838:	08008de6 	.word	0x08008de6
 800583c:	0800aa29 	.word	0x0800aa29
 8005840:	0800aa1c 	.word	0x0800aa1c

08005844 <quorem>:
 8005844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005848:	6903      	ldr	r3, [r0, #16]
 800584a:	690c      	ldr	r4, [r1, #16]
 800584c:	4607      	mov	r7, r0
 800584e:	42a3      	cmp	r3, r4
 8005850:	db7e      	blt.n	8005950 <quorem+0x10c>
 8005852:	3c01      	subs	r4, #1
 8005854:	00a3      	lsls	r3, r4, #2
 8005856:	f100 0514 	add.w	r5, r0, #20
 800585a:	f101 0814 	add.w	r8, r1, #20
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800586a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800586e:	3301      	adds	r3, #1
 8005870:	429a      	cmp	r2, r3
 8005872:	fbb2 f6f3 	udiv	r6, r2, r3
 8005876:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800587a:	d32e      	bcc.n	80058da <quorem+0x96>
 800587c:	f04f 0a00 	mov.w	sl, #0
 8005880:	46c4      	mov	ip, r8
 8005882:	46ae      	mov	lr, r5
 8005884:	46d3      	mov	fp, sl
 8005886:	f85c 3b04 	ldr.w	r3, [ip], #4
 800588a:	b298      	uxth	r0, r3
 800588c:	fb06 a000 	mla	r0, r6, r0, sl
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	0c02      	lsrs	r2, r0, #16
 8005894:	fb06 2303 	mla	r3, r6, r3, r2
 8005898:	f8de 2000 	ldr.w	r2, [lr]
 800589c:	b280      	uxth	r0, r0
 800589e:	b292      	uxth	r2, r2
 80058a0:	1a12      	subs	r2, r2, r0
 80058a2:	445a      	add	r2, fp
 80058a4:	f8de 0000 	ldr.w	r0, [lr]
 80058a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80058b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80058b6:	b292      	uxth	r2, r2
 80058b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80058bc:	45e1      	cmp	r9, ip
 80058be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80058c2:	f84e 2b04 	str.w	r2, [lr], #4
 80058c6:	d2de      	bcs.n	8005886 <quorem+0x42>
 80058c8:	9b00      	ldr	r3, [sp, #0]
 80058ca:	58eb      	ldr	r3, [r5, r3]
 80058cc:	b92b      	cbnz	r3, 80058da <quorem+0x96>
 80058ce:	9b01      	ldr	r3, [sp, #4]
 80058d0:	3b04      	subs	r3, #4
 80058d2:	429d      	cmp	r5, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	d32f      	bcc.n	8005938 <quorem+0xf4>
 80058d8:	613c      	str	r4, [r7, #16]
 80058da:	4638      	mov	r0, r7
 80058dc:	f001 f9c4 	bl	8006c68 <__mcmp>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	db25      	blt.n	8005930 <quorem+0xec>
 80058e4:	4629      	mov	r1, r5
 80058e6:	2000      	movs	r0, #0
 80058e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80058ec:	f8d1 c000 	ldr.w	ip, [r1]
 80058f0:	fa1f fe82 	uxth.w	lr, r2
 80058f4:	fa1f f38c 	uxth.w	r3, ip
 80058f8:	eba3 030e 	sub.w	r3, r3, lr
 80058fc:	4403      	add	r3, r0
 80058fe:	0c12      	lsrs	r2, r2, #16
 8005900:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005904:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005908:	b29b      	uxth	r3, r3
 800590a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800590e:	45c1      	cmp	r9, r8
 8005910:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005914:	f841 3b04 	str.w	r3, [r1], #4
 8005918:	d2e6      	bcs.n	80058e8 <quorem+0xa4>
 800591a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800591e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005922:	b922      	cbnz	r2, 800592e <quorem+0xea>
 8005924:	3b04      	subs	r3, #4
 8005926:	429d      	cmp	r5, r3
 8005928:	461a      	mov	r2, r3
 800592a:	d30b      	bcc.n	8005944 <quorem+0x100>
 800592c:	613c      	str	r4, [r7, #16]
 800592e:	3601      	adds	r6, #1
 8005930:	4630      	mov	r0, r6
 8005932:	b003      	add	sp, #12
 8005934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	3b04      	subs	r3, #4
 800593c:	2a00      	cmp	r2, #0
 800593e:	d1cb      	bne.n	80058d8 <quorem+0x94>
 8005940:	3c01      	subs	r4, #1
 8005942:	e7c6      	b.n	80058d2 <quorem+0x8e>
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	3b04      	subs	r3, #4
 8005948:	2a00      	cmp	r2, #0
 800594a:	d1ef      	bne.n	800592c <quorem+0xe8>
 800594c:	3c01      	subs	r4, #1
 800594e:	e7ea      	b.n	8005926 <quorem+0xe2>
 8005950:	2000      	movs	r0, #0
 8005952:	e7ee      	b.n	8005932 <quorem+0xee>
 8005954:	0000      	movs	r0, r0
	...

08005958 <_dtoa_r>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	4614      	mov	r4, r2
 800595e:	461d      	mov	r5, r3
 8005960:	69c7      	ldr	r7, [r0, #28]
 8005962:	b097      	sub	sp, #92	@ 0x5c
 8005964:	4683      	mov	fp, r0
 8005966:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800596a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800596c:	b97f      	cbnz	r7, 800598e <_dtoa_r+0x36>
 800596e:	2010      	movs	r0, #16
 8005970:	f000 fe02 	bl	8006578 <malloc>
 8005974:	4602      	mov	r2, r0
 8005976:	f8cb 001c 	str.w	r0, [fp, #28]
 800597a:	b920      	cbnz	r0, 8005986 <_dtoa_r+0x2e>
 800597c:	21ef      	movs	r1, #239	@ 0xef
 800597e:	4ba8      	ldr	r3, [pc, #672]	@ (8005c20 <_dtoa_r+0x2c8>)
 8005980:	48a8      	ldr	r0, [pc, #672]	@ (8005c24 <_dtoa_r+0x2cc>)
 8005982:	f7ff ff41 	bl	8005808 <__assert_func>
 8005986:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800598a:	6007      	str	r7, [r0, #0]
 800598c:	60c7      	str	r7, [r0, #12]
 800598e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	b159      	cbz	r1, 80059ae <_dtoa_r+0x56>
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	2301      	movs	r3, #1
 800599a:	4093      	lsls	r3, r2
 800599c:	604a      	str	r2, [r1, #4]
 800599e:	608b      	str	r3, [r1, #8]
 80059a0:	4658      	mov	r0, fp
 80059a2:	f000 fedf 	bl	8006764 <_Bfree>
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	1e2b      	subs	r3, r5, #0
 80059b0:	bfaf      	iteee	ge
 80059b2:	2300      	movge	r3, #0
 80059b4:	2201      	movlt	r2, #1
 80059b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80059ba:	9303      	strlt	r3, [sp, #12]
 80059bc:	bfa8      	it	ge
 80059be:	6033      	strge	r3, [r6, #0]
 80059c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059c4:	4b98      	ldr	r3, [pc, #608]	@ (8005c28 <_dtoa_r+0x2d0>)
 80059c6:	bfb8      	it	lt
 80059c8:	6032      	strlt	r2, [r6, #0]
 80059ca:	ea33 0308 	bics.w	r3, r3, r8
 80059ce:	d112      	bne.n	80059f6 <_dtoa_r+0x9e>
 80059d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80059d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80059dc:	4323      	orrs	r3, r4
 80059de:	f000 8550 	beq.w	8006482 <_dtoa_r+0xb2a>
 80059e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80059e4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005c2c <_dtoa_r+0x2d4>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 8552 	beq.w	8006492 <_dtoa_r+0xb3a>
 80059ee:	f10a 0303 	add.w	r3, sl, #3
 80059f2:	f000 bd4c 	b.w	800648e <_dtoa_r+0xb36>
 80059f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80059fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a02:	2200      	movs	r2, #0
 8005a04:	2300      	movs	r3, #0
 8005a06:	f7fb f883 	bl	8000b10 <__aeabi_dcmpeq>
 8005a0a:	4607      	mov	r7, r0
 8005a0c:	b158      	cbz	r0, 8005a26 <_dtoa_r+0xce>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a16:	b113      	cbz	r3, 8005a1e <_dtoa_r+0xc6>
 8005a18:	4b85      	ldr	r3, [pc, #532]	@ (8005c30 <_dtoa_r+0x2d8>)
 8005a1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005c34 <_dtoa_r+0x2dc>
 8005a22:	f000 bd36 	b.w	8006492 <_dtoa_r+0xb3a>
 8005a26:	ab14      	add	r3, sp, #80	@ 0x50
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	ab15      	add	r3, sp, #84	@ 0x54
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	4658      	mov	r0, fp
 8005a30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005a34:	f001 fa30 	bl	8006e98 <__d2b>
 8005a38:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005a3c:	4681      	mov	r9, r0
 8005a3e:	2e00      	cmp	r6, #0
 8005a40:	d077      	beq.n	8005b32 <_dtoa_r+0x1da>
 8005a42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a48:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a50:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005a54:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005a58:	9712      	str	r7, [sp, #72]	@ 0x48
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4b76      	ldr	r3, [pc, #472]	@ (8005c38 <_dtoa_r+0x2e0>)
 8005a60:	f7fa fc36 	bl	80002d0 <__aeabi_dsub>
 8005a64:	a368      	add	r3, pc, #416	@ (adr r3, 8005c08 <_dtoa_r+0x2b0>)
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f7fa fde9 	bl	8000640 <__aeabi_dmul>
 8005a6e:	a368      	add	r3, pc, #416	@ (adr r3, 8005c10 <_dtoa_r+0x2b8>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f7fa fc2e 	bl	80002d4 <__adddf3>
 8005a78:	4604      	mov	r4, r0
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	460d      	mov	r5, r1
 8005a7e:	f7fa fd75 	bl	800056c <__aeabi_i2d>
 8005a82:	a365      	add	r3, pc, #404	@ (adr r3, 8005c18 <_dtoa_r+0x2c0>)
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f7fa fdda 	bl	8000640 <__aeabi_dmul>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4620      	mov	r0, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7fa fc1e 	bl	80002d4 <__adddf3>
 8005a98:	4604      	mov	r4, r0
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	f7fb f880 	bl	8000ba0 <__aeabi_d2iz>
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	4607      	mov	r7, r0
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	f7fb f83b 	bl	8000b24 <__aeabi_dcmplt>
 8005aae:	b140      	cbz	r0, 8005ac2 <_dtoa_r+0x16a>
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f7fa fd5b 	bl	800056c <__aeabi_i2d>
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	462b      	mov	r3, r5
 8005aba:	f7fb f829 	bl	8000b10 <__aeabi_dcmpeq>
 8005abe:	b900      	cbnz	r0, 8005ac2 <_dtoa_r+0x16a>
 8005ac0:	3f01      	subs	r7, #1
 8005ac2:	2f16      	cmp	r7, #22
 8005ac4:	d853      	bhi.n	8005b6e <_dtoa_r+0x216>
 8005ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005aca:	4b5c      	ldr	r3, [pc, #368]	@ (8005c3c <_dtoa_r+0x2e4>)
 8005acc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	f7fb f826 	bl	8000b24 <__aeabi_dcmplt>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d04a      	beq.n	8005b72 <_dtoa_r+0x21a>
 8005adc:	2300      	movs	r3, #0
 8005ade:	3f01      	subs	r7, #1
 8005ae0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ae2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ae4:	1b9b      	subs	r3, r3, r6
 8005ae6:	1e5a      	subs	r2, r3, #1
 8005ae8:	bf46      	itte	mi
 8005aea:	f1c3 0801 	rsbmi	r8, r3, #1
 8005aee:	2300      	movmi	r3, #0
 8005af0:	f04f 0800 	movpl.w	r8, #0
 8005af4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005af6:	bf48      	it	mi
 8005af8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005afa:	2f00      	cmp	r7, #0
 8005afc:	db3b      	blt.n	8005b76 <_dtoa_r+0x21e>
 8005afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b00:	970e      	str	r7, [sp, #56]	@ 0x38
 8005b02:	443b      	add	r3, r7
 8005b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b06:	2300      	movs	r3, #0
 8005b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b0c:	2b09      	cmp	r3, #9
 8005b0e:	d866      	bhi.n	8005bde <_dtoa_r+0x286>
 8005b10:	2b05      	cmp	r3, #5
 8005b12:	bfc4      	itt	gt
 8005b14:	3b04      	subgt	r3, #4
 8005b16:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005b18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b1a:	bfc8      	it	gt
 8005b1c:	2400      	movgt	r4, #0
 8005b1e:	f1a3 0302 	sub.w	r3, r3, #2
 8005b22:	bfd8      	it	le
 8005b24:	2401      	movle	r4, #1
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d864      	bhi.n	8005bf4 <_dtoa_r+0x29c>
 8005b2a:	e8df f003 	tbb	[pc, r3]
 8005b2e:	382b      	.short	0x382b
 8005b30:	5636      	.short	0x5636
 8005b32:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005b36:	441e      	add	r6, r3
 8005b38:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	bfc1      	itttt	gt
 8005b40:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005b44:	fa08 f803 	lslgt.w	r8, r8, r3
 8005b48:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005b4c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005b50:	bfd6      	itet	le
 8005b52:	f1c3 0320 	rsble	r3, r3, #32
 8005b56:	ea48 0003 	orrgt.w	r0, r8, r3
 8005b5a:	fa04 f003 	lslle.w	r0, r4, r3
 8005b5e:	f7fa fcf5 	bl	800054c <__aeabi_ui2d>
 8005b62:	2201      	movs	r2, #1
 8005b64:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005b68:	3e01      	subs	r6, #1
 8005b6a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005b6c:	e775      	b.n	8005a5a <_dtoa_r+0x102>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e7b6      	b.n	8005ae0 <_dtoa_r+0x188>
 8005b72:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005b74:	e7b5      	b.n	8005ae2 <_dtoa_r+0x18a>
 8005b76:	427b      	negs	r3, r7
 8005b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	eba8 0807 	sub.w	r8, r8, r7
 8005b80:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b82:	e7c2      	b.n	8005b0a <_dtoa_r+0x1b2>
 8005b84:	2300      	movs	r3, #0
 8005b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dc35      	bgt.n	8005bfa <_dtoa_r+0x2a2>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	461a      	mov	r2, r3
 8005b92:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005b96:	9221      	str	r2, [sp, #132]	@ 0x84
 8005b98:	e00b      	b.n	8005bb2 <_dtoa_r+0x25a>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e7f3      	b.n	8005b86 <_dtoa_r+0x22e>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ba2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ba4:	18fb      	adds	r3, r7, r3
 8005ba6:	9308      	str	r3, [sp, #32]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	9307      	str	r3, [sp, #28]
 8005bae:	bfb8      	it	lt
 8005bb0:	2301      	movlt	r3, #1
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005bba:	f102 0514 	add.w	r5, r2, #20
 8005bbe:	429d      	cmp	r5, r3
 8005bc0:	d91f      	bls.n	8005c02 <_dtoa_r+0x2aa>
 8005bc2:	6041      	str	r1, [r0, #4]
 8005bc4:	4658      	mov	r0, fp
 8005bc6:	f000 fd8d 	bl	80066e4 <_Balloc>
 8005bca:	4682      	mov	sl, r0
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d139      	bne.n	8005c44 <_dtoa_r+0x2ec>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c40 <_dtoa_r+0x2e8>)
 8005bd8:	e6d2      	b.n	8005980 <_dtoa_r+0x28>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e7e0      	b.n	8005ba0 <_dtoa_r+0x248>
 8005bde:	2401      	movs	r4, #1
 8005be0:	2300      	movs	r3, #0
 8005be2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005be4:	9320      	str	r3, [sp, #128]	@ 0x80
 8005be6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bea:	2200      	movs	r2, #0
 8005bec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005bf0:	2312      	movs	r3, #18
 8005bf2:	e7d0      	b.n	8005b96 <_dtoa_r+0x23e>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bf8:	e7f5      	b.n	8005be6 <_dtoa_r+0x28e>
 8005bfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005bfc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005c00:	e7d7      	b.n	8005bb2 <_dtoa_r+0x25a>
 8005c02:	3101      	adds	r1, #1
 8005c04:	0052      	lsls	r2, r2, #1
 8005c06:	e7d8      	b.n	8005bba <_dtoa_r+0x262>
 8005c08:	636f4361 	.word	0x636f4361
 8005c0c:	3fd287a7 	.word	0x3fd287a7
 8005c10:	8b60c8b3 	.word	0x8b60c8b3
 8005c14:	3fc68a28 	.word	0x3fc68a28
 8005c18:	509f79fb 	.word	0x509f79fb
 8005c1c:	3fd34413 	.word	0x3fd34413
 8005c20:	0800aa65 	.word	0x0800aa65
 8005c24:	0800aa7c 	.word	0x0800aa7c
 8005c28:	7ff00000 	.word	0x7ff00000
 8005c2c:	0800aa61 	.word	0x0800aa61
 8005c30:	08008df6 	.word	0x08008df6
 8005c34:	08008df5 	.word	0x08008df5
 8005c38:	3ff80000 	.word	0x3ff80000
 8005c3c:	0800ab78 	.word	0x0800ab78
 8005c40:	0800aad4 	.word	0x0800aad4
 8005c44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c48:	6018      	str	r0, [r3, #0]
 8005c4a:	9b07      	ldr	r3, [sp, #28]
 8005c4c:	2b0e      	cmp	r3, #14
 8005c4e:	f200 80a4 	bhi.w	8005d9a <_dtoa_r+0x442>
 8005c52:	2c00      	cmp	r4, #0
 8005c54:	f000 80a1 	beq.w	8005d9a <_dtoa_r+0x442>
 8005c58:	2f00      	cmp	r7, #0
 8005c5a:	dd33      	ble.n	8005cc4 <_dtoa_r+0x36c>
 8005c5c:	4b86      	ldr	r3, [pc, #536]	@ (8005e78 <_dtoa_r+0x520>)
 8005c5e:	f007 020f 	and.w	r2, r7, #15
 8005c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c66:	05f8      	lsls	r0, r7, #23
 8005c68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c6c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005c74:	d516      	bpl.n	8005ca4 <_dtoa_r+0x34c>
 8005c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c7a:	4b80      	ldr	r3, [pc, #512]	@ (8005e7c <_dtoa_r+0x524>)
 8005c7c:	2603      	movs	r6, #3
 8005c7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c82:	f7fa fe07 	bl	8000894 <__aeabi_ddiv>
 8005c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c8a:	f004 040f 	and.w	r4, r4, #15
 8005c8e:	4d7b      	ldr	r5, [pc, #492]	@ (8005e7c <_dtoa_r+0x524>)
 8005c90:	b954      	cbnz	r4, 8005ca8 <_dtoa_r+0x350>
 8005c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9a:	f7fa fdfb 	bl	8000894 <__aeabi_ddiv>
 8005c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ca2:	e028      	b.n	8005cf6 <_dtoa_r+0x39e>
 8005ca4:	2602      	movs	r6, #2
 8005ca6:	e7f2      	b.n	8005c8e <_dtoa_r+0x336>
 8005ca8:	07e1      	lsls	r1, r4, #31
 8005caa:	d508      	bpl.n	8005cbe <_dtoa_r+0x366>
 8005cac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cb4:	f7fa fcc4 	bl	8000640 <__aeabi_dmul>
 8005cb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	1064      	asrs	r4, r4, #1
 8005cc0:	3508      	adds	r5, #8
 8005cc2:	e7e5      	b.n	8005c90 <_dtoa_r+0x338>
 8005cc4:	f000 80d2 	beq.w	8005e6c <_dtoa_r+0x514>
 8005cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ccc:	427c      	negs	r4, r7
 8005cce:	4b6a      	ldr	r3, [pc, #424]	@ (8005e78 <_dtoa_r+0x520>)
 8005cd0:	f004 020f 	and.w	r2, r4, #15
 8005cd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f7fa fcb0 	bl	8000640 <__aeabi_dmul>
 8005ce0:	2602      	movs	r6, #2
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce8:	4d64      	ldr	r5, [pc, #400]	@ (8005e7c <_dtoa_r+0x524>)
 8005cea:	1124      	asrs	r4, r4, #4
 8005cec:	2c00      	cmp	r4, #0
 8005cee:	f040 80b2 	bne.w	8005e56 <_dtoa_r+0x4fe>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1d3      	bne.n	8005c9e <_dtoa_r+0x346>
 8005cf6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005cfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80b7 	beq.w	8005e70 <_dtoa_r+0x518>
 8005d02:	2200      	movs	r2, #0
 8005d04:	4620      	mov	r0, r4
 8005d06:	4629      	mov	r1, r5
 8005d08:	4b5d      	ldr	r3, [pc, #372]	@ (8005e80 <_dtoa_r+0x528>)
 8005d0a:	f7fa ff0b 	bl	8000b24 <__aeabi_dcmplt>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f000 80ae 	beq.w	8005e70 <_dtoa_r+0x518>
 8005d14:	9b07      	ldr	r3, [sp, #28]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 80aa 	beq.w	8005e70 <_dtoa_r+0x518>
 8005d1c:	9b08      	ldr	r3, [sp, #32]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dd37      	ble.n	8005d92 <_dtoa_r+0x43a>
 8005d22:	1e7b      	subs	r3, r7, #1
 8005d24:	4620      	mov	r0, r4
 8005d26:	9304      	str	r3, [sp, #16]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4b55      	ldr	r3, [pc, #340]	@ (8005e84 <_dtoa_r+0x52c>)
 8005d2e:	f7fa fc87 	bl	8000640 <__aeabi_dmul>
 8005d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d36:	9c08      	ldr	r4, [sp, #32]
 8005d38:	3601      	adds	r6, #1
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7fa fc16 	bl	800056c <__aeabi_i2d>
 8005d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d44:	f7fa fc7c 	bl	8000640 <__aeabi_dmul>
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8005e88 <_dtoa_r+0x530>)
 8005d4c:	f7fa fac2 	bl	80002d4 <__adddf3>
 8005d50:	4605      	mov	r5, r0
 8005d52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005d56:	2c00      	cmp	r4, #0
 8005d58:	f040 809a 	bne.w	8005e90 <_dtoa_r+0x538>
 8005d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d60:	2200      	movs	r2, #0
 8005d62:	4b4a      	ldr	r3, [pc, #296]	@ (8005e8c <_dtoa_r+0x534>)
 8005d64:	f7fa fab4 	bl	80002d0 <__aeabi_dsub>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d70:	462a      	mov	r2, r5
 8005d72:	4633      	mov	r3, r6
 8005d74:	f7fa fef4 	bl	8000b60 <__aeabi_dcmpgt>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f040 828e 	bne.w	800629a <_dtoa_r+0x942>
 8005d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d82:	462a      	mov	r2, r5
 8005d84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d88:	f7fa fecc 	bl	8000b24 <__aeabi_dcmplt>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	f040 8127 	bne.w	8005fe0 <_dtoa_r+0x688>
 8005d92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005d96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005d9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f2c0 8163 	blt.w	8006068 <_dtoa_r+0x710>
 8005da2:	2f0e      	cmp	r7, #14
 8005da4:	f300 8160 	bgt.w	8006068 <_dtoa_r+0x710>
 8005da8:	4b33      	ldr	r3, [pc, #204]	@ (8005e78 <_dtoa_r+0x520>)
 8005daa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005db2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005db6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	da03      	bge.n	8005dc4 <_dtoa_r+0x46c>
 8005dbc:	9b07      	ldr	r3, [sp, #28]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f340 8100 	ble.w	8005fc4 <_dtoa_r+0x66c>
 8005dc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005dc8:	4656      	mov	r6, sl
 8005dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dce:	4620      	mov	r0, r4
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	f7fa fd5f 	bl	8000894 <__aeabi_ddiv>
 8005dd6:	f7fa fee3 	bl	8000ba0 <__aeabi_d2iz>
 8005dda:	4680      	mov	r8, r0
 8005ddc:	f7fa fbc6 	bl	800056c <__aeabi_i2d>
 8005de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005de4:	f7fa fc2c 	bl	8000640 <__aeabi_dmul>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4620      	mov	r0, r4
 8005dee:	4629      	mov	r1, r5
 8005df0:	f7fa fa6e 	bl	80002d0 <__aeabi_dsub>
 8005df4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005df8:	9d07      	ldr	r5, [sp, #28]
 8005dfa:	f806 4b01 	strb.w	r4, [r6], #1
 8005dfe:	eba6 040a 	sub.w	r4, r6, sl
 8005e02:	42a5      	cmp	r5, r4
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	f040 8116 	bne.w	8006038 <_dtoa_r+0x6e0>
 8005e0c:	f7fa fa62 	bl	80002d4 <__adddf3>
 8005e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e14:	4604      	mov	r4, r0
 8005e16:	460d      	mov	r5, r1
 8005e18:	f7fa fea2 	bl	8000b60 <__aeabi_dcmpgt>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f040 80f8 	bne.w	8006012 <_dtoa_r+0x6ba>
 8005e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7fa fe71 	bl	8000b10 <__aeabi_dcmpeq>
 8005e2e:	b118      	cbz	r0, 8005e38 <_dtoa_r+0x4e0>
 8005e30:	f018 0f01 	tst.w	r8, #1
 8005e34:	f040 80ed 	bne.w	8006012 <_dtoa_r+0x6ba>
 8005e38:	4649      	mov	r1, r9
 8005e3a:	4658      	mov	r0, fp
 8005e3c:	f000 fc92 	bl	8006764 <_Bfree>
 8005e40:	2300      	movs	r3, #0
 8005e42:	7033      	strb	r3, [r6, #0]
 8005e44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005e46:	3701      	adds	r7, #1
 8005e48:	601f      	str	r7, [r3, #0]
 8005e4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8320 	beq.w	8006492 <_dtoa_r+0xb3a>
 8005e52:	601e      	str	r6, [r3, #0]
 8005e54:	e31d      	b.n	8006492 <_dtoa_r+0xb3a>
 8005e56:	07e2      	lsls	r2, r4, #31
 8005e58:	d505      	bpl.n	8005e66 <_dtoa_r+0x50e>
 8005e5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e5e:	f7fa fbef 	bl	8000640 <__aeabi_dmul>
 8005e62:	2301      	movs	r3, #1
 8005e64:	3601      	adds	r6, #1
 8005e66:	1064      	asrs	r4, r4, #1
 8005e68:	3508      	adds	r5, #8
 8005e6a:	e73f      	b.n	8005cec <_dtoa_r+0x394>
 8005e6c:	2602      	movs	r6, #2
 8005e6e:	e742      	b.n	8005cf6 <_dtoa_r+0x39e>
 8005e70:	9c07      	ldr	r4, [sp, #28]
 8005e72:	9704      	str	r7, [sp, #16]
 8005e74:	e761      	b.n	8005d3a <_dtoa_r+0x3e2>
 8005e76:	bf00      	nop
 8005e78:	0800ab78 	.word	0x0800ab78
 8005e7c:	0800ab50 	.word	0x0800ab50
 8005e80:	3ff00000 	.word	0x3ff00000
 8005e84:	40240000 	.word	0x40240000
 8005e88:	401c0000 	.word	0x401c0000
 8005e8c:	40140000 	.word	0x40140000
 8005e90:	4b70      	ldr	r3, [pc, #448]	@ (8006054 <_dtoa_r+0x6fc>)
 8005e92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e9c:	4454      	add	r4, sl
 8005e9e:	2900      	cmp	r1, #0
 8005ea0:	d045      	beq.n	8005f2e <_dtoa_r+0x5d6>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	496c      	ldr	r1, [pc, #432]	@ (8006058 <_dtoa_r+0x700>)
 8005ea6:	f7fa fcf5 	bl	8000894 <__aeabi_ddiv>
 8005eaa:	4633      	mov	r3, r6
 8005eac:	462a      	mov	r2, r5
 8005eae:	f7fa fa0f 	bl	80002d0 <__aeabi_dsub>
 8005eb2:	4656      	mov	r6, sl
 8005eb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ebc:	f7fa fe70 	bl	8000ba0 <__aeabi_d2iz>
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	f7fa fb53 	bl	800056c <__aeabi_i2d>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ece:	f7fa f9ff 	bl	80002d0 <__aeabi_dsub>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	3530      	adds	r5, #48	@ 0x30
 8005ed8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005edc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ee0:	f806 5b01 	strb.w	r5, [r6], #1
 8005ee4:	f7fa fe1e 	bl	8000b24 <__aeabi_dcmplt>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d163      	bne.n	8005fb4 <_dtoa_r+0x65c>
 8005eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	495a      	ldr	r1, [pc, #360]	@ (800605c <_dtoa_r+0x704>)
 8005ef4:	f7fa f9ec 	bl	80002d0 <__aeabi_dsub>
 8005ef8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005efc:	f7fa fe12 	bl	8000b24 <__aeabi_dcmplt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f040 8087 	bne.w	8006014 <_dtoa_r+0x6bc>
 8005f06:	42a6      	cmp	r6, r4
 8005f08:	f43f af43 	beq.w	8005d92 <_dtoa_r+0x43a>
 8005f0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f10:	2200      	movs	r2, #0
 8005f12:	4b53      	ldr	r3, [pc, #332]	@ (8006060 <_dtoa_r+0x708>)
 8005f14:	f7fa fb94 	bl	8000640 <__aeabi_dmul>
 8005f18:	2200      	movs	r2, #0
 8005f1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f22:	4b4f      	ldr	r3, [pc, #316]	@ (8006060 <_dtoa_r+0x708>)
 8005f24:	f7fa fb8c 	bl	8000640 <__aeabi_dmul>
 8005f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f2c:	e7c4      	b.n	8005eb8 <_dtoa_r+0x560>
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	f7fa fb85 	bl	8000640 <__aeabi_dmul>
 8005f36:	4656      	mov	r6, sl
 8005f38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f3c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f42:	f7fa fe2d 	bl	8000ba0 <__aeabi_d2iz>
 8005f46:	4605      	mov	r5, r0
 8005f48:	f7fa fb10 	bl	800056c <__aeabi_i2d>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f54:	f7fa f9bc 	bl	80002d0 <__aeabi_dsub>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	3530      	adds	r5, #48	@ 0x30
 8005f5e:	f806 5b01 	strb.w	r5, [r6], #1
 8005f62:	42a6      	cmp	r6, r4
 8005f64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	d124      	bne.n	8005fb8 <_dtoa_r+0x660>
 8005f6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f72:	4b39      	ldr	r3, [pc, #228]	@ (8006058 <_dtoa_r+0x700>)
 8005f74:	f7fa f9ae 	bl	80002d4 <__adddf3>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f80:	f7fa fdee 	bl	8000b60 <__aeabi_dcmpgt>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d145      	bne.n	8006014 <_dtoa_r+0x6bc>
 8005f88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	4932      	ldr	r1, [pc, #200]	@ (8006058 <_dtoa_r+0x700>)
 8005f90:	f7fa f99e 	bl	80002d0 <__aeabi_dsub>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f9c:	f7fa fdc2 	bl	8000b24 <__aeabi_dcmplt>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f43f aef6 	beq.w	8005d92 <_dtoa_r+0x43a>
 8005fa6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005fa8:	1e73      	subs	r3, r6, #1
 8005faa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005fac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005fb0:	2b30      	cmp	r3, #48	@ 0x30
 8005fb2:	d0f8      	beq.n	8005fa6 <_dtoa_r+0x64e>
 8005fb4:	9f04      	ldr	r7, [sp, #16]
 8005fb6:	e73f      	b.n	8005e38 <_dtoa_r+0x4e0>
 8005fb8:	4b29      	ldr	r3, [pc, #164]	@ (8006060 <_dtoa_r+0x708>)
 8005fba:	f7fa fb41 	bl	8000640 <__aeabi_dmul>
 8005fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc2:	e7bc      	b.n	8005f3e <_dtoa_r+0x5e6>
 8005fc4:	d10c      	bne.n	8005fe0 <_dtoa_r+0x688>
 8005fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	4b25      	ldr	r3, [pc, #148]	@ (8006064 <_dtoa_r+0x70c>)
 8005fce:	f7fa fb37 	bl	8000640 <__aeabi_dmul>
 8005fd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fd6:	f7fa fdb9 	bl	8000b4c <__aeabi_dcmpge>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	f000 815b 	beq.w	8006296 <_dtoa_r+0x93e>
 8005fe0:	2400      	movs	r4, #0
 8005fe2:	4625      	mov	r5, r4
 8005fe4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fe6:	4656      	mov	r6, sl
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	9304      	str	r3, [sp, #16]
 8005fec:	2700      	movs	r7, #0
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4658      	mov	r0, fp
 8005ff2:	f000 fbb7 	bl	8006764 <_Bfree>
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	d0dc      	beq.n	8005fb4 <_dtoa_r+0x65c>
 8005ffa:	b12f      	cbz	r7, 8006008 <_dtoa_r+0x6b0>
 8005ffc:	42af      	cmp	r7, r5
 8005ffe:	d003      	beq.n	8006008 <_dtoa_r+0x6b0>
 8006000:	4639      	mov	r1, r7
 8006002:	4658      	mov	r0, fp
 8006004:	f000 fbae 	bl	8006764 <_Bfree>
 8006008:	4629      	mov	r1, r5
 800600a:	4658      	mov	r0, fp
 800600c:	f000 fbaa 	bl	8006764 <_Bfree>
 8006010:	e7d0      	b.n	8005fb4 <_dtoa_r+0x65c>
 8006012:	9704      	str	r7, [sp, #16]
 8006014:	4633      	mov	r3, r6
 8006016:	461e      	mov	r6, r3
 8006018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800601c:	2a39      	cmp	r2, #57	@ 0x39
 800601e:	d107      	bne.n	8006030 <_dtoa_r+0x6d8>
 8006020:	459a      	cmp	sl, r3
 8006022:	d1f8      	bne.n	8006016 <_dtoa_r+0x6be>
 8006024:	9a04      	ldr	r2, [sp, #16]
 8006026:	3201      	adds	r2, #1
 8006028:	9204      	str	r2, [sp, #16]
 800602a:	2230      	movs	r2, #48	@ 0x30
 800602c:	f88a 2000 	strb.w	r2, [sl]
 8006030:	781a      	ldrb	r2, [r3, #0]
 8006032:	3201      	adds	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e7bd      	b.n	8005fb4 <_dtoa_r+0x65c>
 8006038:	2200      	movs	r2, #0
 800603a:	4b09      	ldr	r3, [pc, #36]	@ (8006060 <_dtoa_r+0x708>)
 800603c:	f7fa fb00 	bl	8000640 <__aeabi_dmul>
 8006040:	2200      	movs	r2, #0
 8006042:	2300      	movs	r3, #0
 8006044:	4604      	mov	r4, r0
 8006046:	460d      	mov	r5, r1
 8006048:	f7fa fd62 	bl	8000b10 <__aeabi_dcmpeq>
 800604c:	2800      	cmp	r0, #0
 800604e:	f43f aebc 	beq.w	8005dca <_dtoa_r+0x472>
 8006052:	e6f1      	b.n	8005e38 <_dtoa_r+0x4e0>
 8006054:	0800ab78 	.word	0x0800ab78
 8006058:	3fe00000 	.word	0x3fe00000
 800605c:	3ff00000 	.word	0x3ff00000
 8006060:	40240000 	.word	0x40240000
 8006064:	40140000 	.word	0x40140000
 8006068:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800606a:	2a00      	cmp	r2, #0
 800606c:	f000 80db 	beq.w	8006226 <_dtoa_r+0x8ce>
 8006070:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006072:	2a01      	cmp	r2, #1
 8006074:	f300 80bf 	bgt.w	80061f6 <_dtoa_r+0x89e>
 8006078:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800607a:	2a00      	cmp	r2, #0
 800607c:	f000 80b7 	beq.w	80061ee <_dtoa_r+0x896>
 8006080:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006084:	4646      	mov	r6, r8
 8006086:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800608a:	2101      	movs	r1, #1
 800608c:	441a      	add	r2, r3
 800608e:	4658      	mov	r0, fp
 8006090:	4498      	add	r8, r3
 8006092:	9209      	str	r2, [sp, #36]	@ 0x24
 8006094:	f000 fc64 	bl	8006960 <__i2b>
 8006098:	4605      	mov	r5, r0
 800609a:	b15e      	cbz	r6, 80060b4 <_dtoa_r+0x75c>
 800609c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800609e:	2b00      	cmp	r3, #0
 80060a0:	dd08      	ble.n	80060b4 <_dtoa_r+0x75c>
 80060a2:	42b3      	cmp	r3, r6
 80060a4:	bfa8      	it	ge
 80060a6:	4633      	movge	r3, r6
 80060a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060aa:	eba8 0803 	sub.w	r8, r8, r3
 80060ae:	1af6      	subs	r6, r6, r3
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060b6:	b1f3      	cbz	r3, 80060f6 <_dtoa_r+0x79e>
 80060b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80b7 	beq.w	800622e <_dtoa_r+0x8d6>
 80060c0:	b18c      	cbz	r4, 80060e6 <_dtoa_r+0x78e>
 80060c2:	4629      	mov	r1, r5
 80060c4:	4622      	mov	r2, r4
 80060c6:	4658      	mov	r0, fp
 80060c8:	f000 fd08 	bl	8006adc <__pow5mult>
 80060cc:	464a      	mov	r2, r9
 80060ce:	4601      	mov	r1, r0
 80060d0:	4605      	mov	r5, r0
 80060d2:	4658      	mov	r0, fp
 80060d4:	f000 fc5a 	bl	800698c <__multiply>
 80060d8:	4649      	mov	r1, r9
 80060da:	9004      	str	r0, [sp, #16]
 80060dc:	4658      	mov	r0, fp
 80060de:	f000 fb41 	bl	8006764 <_Bfree>
 80060e2:	9b04      	ldr	r3, [sp, #16]
 80060e4:	4699      	mov	r9, r3
 80060e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060e8:	1b1a      	subs	r2, r3, r4
 80060ea:	d004      	beq.n	80060f6 <_dtoa_r+0x79e>
 80060ec:	4649      	mov	r1, r9
 80060ee:	4658      	mov	r0, fp
 80060f0:	f000 fcf4 	bl	8006adc <__pow5mult>
 80060f4:	4681      	mov	r9, r0
 80060f6:	2101      	movs	r1, #1
 80060f8:	4658      	mov	r0, fp
 80060fa:	f000 fc31 	bl	8006960 <__i2b>
 80060fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006100:	4604      	mov	r4, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 81c9 	beq.w	800649a <_dtoa_r+0xb42>
 8006108:	461a      	mov	r2, r3
 800610a:	4601      	mov	r1, r0
 800610c:	4658      	mov	r0, fp
 800610e:	f000 fce5 	bl	8006adc <__pow5mult>
 8006112:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006114:	4604      	mov	r4, r0
 8006116:	2b01      	cmp	r3, #1
 8006118:	f300 808f 	bgt.w	800623a <_dtoa_r+0x8e2>
 800611c:	9b02      	ldr	r3, [sp, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 8087 	bne.w	8006232 <_dtoa_r+0x8da>
 8006124:	9b03      	ldr	r3, [sp, #12]
 8006126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800612a:	2b00      	cmp	r3, #0
 800612c:	f040 8083 	bne.w	8006236 <_dtoa_r+0x8de>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006136:	0d1b      	lsrs	r3, r3, #20
 8006138:	051b      	lsls	r3, r3, #20
 800613a:	b12b      	cbz	r3, 8006148 <_dtoa_r+0x7f0>
 800613c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800613e:	f108 0801 	add.w	r8, r8, #1
 8006142:	3301      	adds	r3, #1
 8006144:	9309      	str	r3, [sp, #36]	@ 0x24
 8006146:	2301      	movs	r3, #1
 8006148:	930a      	str	r3, [sp, #40]	@ 0x28
 800614a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 81aa 	beq.w	80064a6 <_dtoa_r+0xb4e>
 8006152:	6923      	ldr	r3, [r4, #16]
 8006154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006158:	6918      	ldr	r0, [r3, #16]
 800615a:	f000 fbb5 	bl	80068c8 <__hi0bits>
 800615e:	f1c0 0020 	rsb	r0, r0, #32
 8006162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006164:	4418      	add	r0, r3
 8006166:	f010 001f 	ands.w	r0, r0, #31
 800616a:	d071      	beq.n	8006250 <_dtoa_r+0x8f8>
 800616c:	f1c0 0320 	rsb	r3, r0, #32
 8006170:	2b04      	cmp	r3, #4
 8006172:	dd65      	ble.n	8006240 <_dtoa_r+0x8e8>
 8006174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006176:	f1c0 001c 	rsb	r0, r0, #28
 800617a:	4403      	add	r3, r0
 800617c:	4480      	add	r8, r0
 800617e:	4406      	add	r6, r0
 8006180:	9309      	str	r3, [sp, #36]	@ 0x24
 8006182:	f1b8 0f00 	cmp.w	r8, #0
 8006186:	dd05      	ble.n	8006194 <_dtoa_r+0x83c>
 8006188:	4649      	mov	r1, r9
 800618a:	4642      	mov	r2, r8
 800618c:	4658      	mov	r0, fp
 800618e:	f000 fcff 	bl	8006b90 <__lshift>
 8006192:	4681      	mov	r9, r0
 8006194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	dd05      	ble.n	80061a6 <_dtoa_r+0x84e>
 800619a:	4621      	mov	r1, r4
 800619c:	461a      	mov	r2, r3
 800619e:	4658      	mov	r0, fp
 80061a0:	f000 fcf6 	bl	8006b90 <__lshift>
 80061a4:	4604      	mov	r4, r0
 80061a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d053      	beq.n	8006254 <_dtoa_r+0x8fc>
 80061ac:	4621      	mov	r1, r4
 80061ae:	4648      	mov	r0, r9
 80061b0:	f000 fd5a 	bl	8006c68 <__mcmp>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	da4d      	bge.n	8006254 <_dtoa_r+0x8fc>
 80061b8:	1e7b      	subs	r3, r7, #1
 80061ba:	4649      	mov	r1, r9
 80061bc:	9304      	str	r3, [sp, #16]
 80061be:	220a      	movs	r2, #10
 80061c0:	2300      	movs	r3, #0
 80061c2:	4658      	mov	r0, fp
 80061c4:	f000 faf0 	bl	80067a8 <__multadd>
 80061c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061ca:	4681      	mov	r9, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 816c 	beq.w	80064aa <_dtoa_r+0xb52>
 80061d2:	2300      	movs	r3, #0
 80061d4:	4629      	mov	r1, r5
 80061d6:	220a      	movs	r2, #10
 80061d8:	4658      	mov	r0, fp
 80061da:	f000 fae5 	bl	80067a8 <__multadd>
 80061de:	9b08      	ldr	r3, [sp, #32]
 80061e0:	4605      	mov	r5, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dc61      	bgt.n	80062aa <_dtoa_r+0x952>
 80061e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	dc3b      	bgt.n	8006264 <_dtoa_r+0x90c>
 80061ec:	e05d      	b.n	80062aa <_dtoa_r+0x952>
 80061ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061f0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80061f4:	e746      	b.n	8006084 <_dtoa_r+0x72c>
 80061f6:	9b07      	ldr	r3, [sp, #28]
 80061f8:	1e5c      	subs	r4, r3, #1
 80061fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	bfbf      	itttt	lt
 8006200:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006202:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006204:	1ae3      	sublt	r3, r4, r3
 8006206:	18d2      	addlt	r2, r2, r3
 8006208:	bfa8      	it	ge
 800620a:	1b1c      	subge	r4, r3, r4
 800620c:	9b07      	ldr	r3, [sp, #28]
 800620e:	bfbe      	ittt	lt
 8006210:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006212:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006214:	2400      	movlt	r4, #0
 8006216:	2b00      	cmp	r3, #0
 8006218:	bfb5      	itete	lt
 800621a:	eba8 0603 	sublt.w	r6, r8, r3
 800621e:	4646      	movge	r6, r8
 8006220:	2300      	movlt	r3, #0
 8006222:	9b07      	ldrge	r3, [sp, #28]
 8006224:	e730      	b.n	8006088 <_dtoa_r+0x730>
 8006226:	4646      	mov	r6, r8
 8006228:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800622a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800622c:	e735      	b.n	800609a <_dtoa_r+0x742>
 800622e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006230:	e75c      	b.n	80060ec <_dtoa_r+0x794>
 8006232:	2300      	movs	r3, #0
 8006234:	e788      	b.n	8006148 <_dtoa_r+0x7f0>
 8006236:	9b02      	ldr	r3, [sp, #8]
 8006238:	e786      	b.n	8006148 <_dtoa_r+0x7f0>
 800623a:	2300      	movs	r3, #0
 800623c:	930a      	str	r3, [sp, #40]	@ 0x28
 800623e:	e788      	b.n	8006152 <_dtoa_r+0x7fa>
 8006240:	d09f      	beq.n	8006182 <_dtoa_r+0x82a>
 8006242:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006244:	331c      	adds	r3, #28
 8006246:	441a      	add	r2, r3
 8006248:	4498      	add	r8, r3
 800624a:	441e      	add	r6, r3
 800624c:	9209      	str	r2, [sp, #36]	@ 0x24
 800624e:	e798      	b.n	8006182 <_dtoa_r+0x82a>
 8006250:	4603      	mov	r3, r0
 8006252:	e7f6      	b.n	8006242 <_dtoa_r+0x8ea>
 8006254:	9b07      	ldr	r3, [sp, #28]
 8006256:	9704      	str	r7, [sp, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	dc20      	bgt.n	800629e <_dtoa_r+0x946>
 800625c:	9308      	str	r3, [sp, #32]
 800625e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006260:	2b02      	cmp	r3, #2
 8006262:	dd1e      	ble.n	80062a2 <_dtoa_r+0x94a>
 8006264:	9b08      	ldr	r3, [sp, #32]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f47f aebc 	bne.w	8005fe4 <_dtoa_r+0x68c>
 800626c:	4621      	mov	r1, r4
 800626e:	2205      	movs	r2, #5
 8006270:	4658      	mov	r0, fp
 8006272:	f000 fa99 	bl	80067a8 <__multadd>
 8006276:	4601      	mov	r1, r0
 8006278:	4604      	mov	r4, r0
 800627a:	4648      	mov	r0, r9
 800627c:	f000 fcf4 	bl	8006c68 <__mcmp>
 8006280:	2800      	cmp	r0, #0
 8006282:	f77f aeaf 	ble.w	8005fe4 <_dtoa_r+0x68c>
 8006286:	2331      	movs	r3, #49	@ 0x31
 8006288:	4656      	mov	r6, sl
 800628a:	f806 3b01 	strb.w	r3, [r6], #1
 800628e:	9b04      	ldr	r3, [sp, #16]
 8006290:	3301      	adds	r3, #1
 8006292:	9304      	str	r3, [sp, #16]
 8006294:	e6aa      	b.n	8005fec <_dtoa_r+0x694>
 8006296:	9c07      	ldr	r4, [sp, #28]
 8006298:	9704      	str	r7, [sp, #16]
 800629a:	4625      	mov	r5, r4
 800629c:	e7f3      	b.n	8006286 <_dtoa_r+0x92e>
 800629e:	9b07      	ldr	r3, [sp, #28]
 80062a0:	9308      	str	r3, [sp, #32]
 80062a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8104 	beq.w	80064b2 <_dtoa_r+0xb5a>
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	dd05      	ble.n	80062ba <_dtoa_r+0x962>
 80062ae:	4629      	mov	r1, r5
 80062b0:	4632      	mov	r2, r6
 80062b2:	4658      	mov	r0, fp
 80062b4:	f000 fc6c 	bl	8006b90 <__lshift>
 80062b8:	4605      	mov	r5, r0
 80062ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d05a      	beq.n	8006376 <_dtoa_r+0xa1e>
 80062c0:	4658      	mov	r0, fp
 80062c2:	6869      	ldr	r1, [r5, #4]
 80062c4:	f000 fa0e 	bl	80066e4 <_Balloc>
 80062c8:	4606      	mov	r6, r0
 80062ca:	b928      	cbnz	r0, 80062d8 <_dtoa_r+0x980>
 80062cc:	4602      	mov	r2, r0
 80062ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80062d2:	4b83      	ldr	r3, [pc, #524]	@ (80064e0 <_dtoa_r+0xb88>)
 80062d4:	f7ff bb54 	b.w	8005980 <_dtoa_r+0x28>
 80062d8:	692a      	ldr	r2, [r5, #16]
 80062da:	f105 010c 	add.w	r1, r5, #12
 80062de:	3202      	adds	r2, #2
 80062e0:	0092      	lsls	r2, r2, #2
 80062e2:	300c      	adds	r0, #12
 80062e4:	f7ff fa7d 	bl	80057e2 <memcpy>
 80062e8:	2201      	movs	r2, #1
 80062ea:	4631      	mov	r1, r6
 80062ec:	4658      	mov	r0, fp
 80062ee:	f000 fc4f 	bl	8006b90 <__lshift>
 80062f2:	462f      	mov	r7, r5
 80062f4:	4605      	mov	r5, r0
 80062f6:	f10a 0301 	add.w	r3, sl, #1
 80062fa:	9307      	str	r3, [sp, #28]
 80062fc:	9b08      	ldr	r3, [sp, #32]
 80062fe:	4453      	add	r3, sl
 8006300:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006302:	9b02      	ldr	r3, [sp, #8]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	930a      	str	r3, [sp, #40]	@ 0x28
 800630a:	9b07      	ldr	r3, [sp, #28]
 800630c:	4621      	mov	r1, r4
 800630e:	3b01      	subs	r3, #1
 8006310:	4648      	mov	r0, r9
 8006312:	9302      	str	r3, [sp, #8]
 8006314:	f7ff fa96 	bl	8005844 <quorem>
 8006318:	4639      	mov	r1, r7
 800631a:	9008      	str	r0, [sp, #32]
 800631c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006320:	4648      	mov	r0, r9
 8006322:	f000 fca1 	bl	8006c68 <__mcmp>
 8006326:	462a      	mov	r2, r5
 8006328:	9009      	str	r0, [sp, #36]	@ 0x24
 800632a:	4621      	mov	r1, r4
 800632c:	4658      	mov	r0, fp
 800632e:	f000 fcb7 	bl	8006ca0 <__mdiff>
 8006332:	68c2      	ldr	r2, [r0, #12]
 8006334:	4606      	mov	r6, r0
 8006336:	bb02      	cbnz	r2, 800637a <_dtoa_r+0xa22>
 8006338:	4601      	mov	r1, r0
 800633a:	4648      	mov	r0, r9
 800633c:	f000 fc94 	bl	8006c68 <__mcmp>
 8006340:	4602      	mov	r2, r0
 8006342:	4631      	mov	r1, r6
 8006344:	4658      	mov	r0, fp
 8006346:	920c      	str	r2, [sp, #48]	@ 0x30
 8006348:	f000 fa0c 	bl	8006764 <_Bfree>
 800634c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800634e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006350:	9e07      	ldr	r6, [sp, #28]
 8006352:	ea43 0102 	orr.w	r1, r3, r2
 8006356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006358:	4319      	orrs	r1, r3
 800635a:	d110      	bne.n	800637e <_dtoa_r+0xa26>
 800635c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006360:	d029      	beq.n	80063b6 <_dtoa_r+0xa5e>
 8006362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	dd02      	ble.n	800636e <_dtoa_r+0xa16>
 8006368:	9b08      	ldr	r3, [sp, #32]
 800636a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800636e:	9b02      	ldr	r3, [sp, #8]
 8006370:	f883 8000 	strb.w	r8, [r3]
 8006374:	e63b      	b.n	8005fee <_dtoa_r+0x696>
 8006376:	4628      	mov	r0, r5
 8006378:	e7bb      	b.n	80062f2 <_dtoa_r+0x99a>
 800637a:	2201      	movs	r2, #1
 800637c:	e7e1      	b.n	8006342 <_dtoa_r+0x9ea>
 800637e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	db04      	blt.n	800638e <_dtoa_r+0xa36>
 8006384:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006386:	430b      	orrs	r3, r1
 8006388:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800638a:	430b      	orrs	r3, r1
 800638c:	d120      	bne.n	80063d0 <_dtoa_r+0xa78>
 800638e:	2a00      	cmp	r2, #0
 8006390:	dded      	ble.n	800636e <_dtoa_r+0xa16>
 8006392:	4649      	mov	r1, r9
 8006394:	2201      	movs	r2, #1
 8006396:	4658      	mov	r0, fp
 8006398:	f000 fbfa 	bl	8006b90 <__lshift>
 800639c:	4621      	mov	r1, r4
 800639e:	4681      	mov	r9, r0
 80063a0:	f000 fc62 	bl	8006c68 <__mcmp>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	dc03      	bgt.n	80063b0 <_dtoa_r+0xa58>
 80063a8:	d1e1      	bne.n	800636e <_dtoa_r+0xa16>
 80063aa:	f018 0f01 	tst.w	r8, #1
 80063ae:	d0de      	beq.n	800636e <_dtoa_r+0xa16>
 80063b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80063b4:	d1d8      	bne.n	8006368 <_dtoa_r+0xa10>
 80063b6:	2339      	movs	r3, #57	@ 0x39
 80063b8:	9a02      	ldr	r2, [sp, #8]
 80063ba:	7013      	strb	r3, [r2, #0]
 80063bc:	4633      	mov	r3, r6
 80063be:	461e      	mov	r6, r3
 80063c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	2a39      	cmp	r2, #57	@ 0x39
 80063c8:	d052      	beq.n	8006470 <_dtoa_r+0xb18>
 80063ca:	3201      	adds	r2, #1
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	e60e      	b.n	8005fee <_dtoa_r+0x696>
 80063d0:	2a00      	cmp	r2, #0
 80063d2:	dd07      	ble.n	80063e4 <_dtoa_r+0xa8c>
 80063d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80063d8:	d0ed      	beq.n	80063b6 <_dtoa_r+0xa5e>
 80063da:	9a02      	ldr	r2, [sp, #8]
 80063dc:	f108 0301 	add.w	r3, r8, #1
 80063e0:	7013      	strb	r3, [r2, #0]
 80063e2:	e604      	b.n	8005fee <_dtoa_r+0x696>
 80063e4:	9b07      	ldr	r3, [sp, #28]
 80063e6:	9a07      	ldr	r2, [sp, #28]
 80063e8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80063ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d028      	beq.n	8006444 <_dtoa_r+0xaec>
 80063f2:	4649      	mov	r1, r9
 80063f4:	2300      	movs	r3, #0
 80063f6:	220a      	movs	r2, #10
 80063f8:	4658      	mov	r0, fp
 80063fa:	f000 f9d5 	bl	80067a8 <__multadd>
 80063fe:	42af      	cmp	r7, r5
 8006400:	4681      	mov	r9, r0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	f04f 020a 	mov.w	r2, #10
 800640a:	4639      	mov	r1, r7
 800640c:	4658      	mov	r0, fp
 800640e:	d107      	bne.n	8006420 <_dtoa_r+0xac8>
 8006410:	f000 f9ca 	bl	80067a8 <__multadd>
 8006414:	4607      	mov	r7, r0
 8006416:	4605      	mov	r5, r0
 8006418:	9b07      	ldr	r3, [sp, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	9307      	str	r3, [sp, #28]
 800641e:	e774      	b.n	800630a <_dtoa_r+0x9b2>
 8006420:	f000 f9c2 	bl	80067a8 <__multadd>
 8006424:	4629      	mov	r1, r5
 8006426:	4607      	mov	r7, r0
 8006428:	2300      	movs	r3, #0
 800642a:	220a      	movs	r2, #10
 800642c:	4658      	mov	r0, fp
 800642e:	f000 f9bb 	bl	80067a8 <__multadd>
 8006432:	4605      	mov	r5, r0
 8006434:	e7f0      	b.n	8006418 <_dtoa_r+0xac0>
 8006436:	9b08      	ldr	r3, [sp, #32]
 8006438:	2700      	movs	r7, #0
 800643a:	2b00      	cmp	r3, #0
 800643c:	bfcc      	ite	gt
 800643e:	461e      	movgt	r6, r3
 8006440:	2601      	movle	r6, #1
 8006442:	4456      	add	r6, sl
 8006444:	4649      	mov	r1, r9
 8006446:	2201      	movs	r2, #1
 8006448:	4658      	mov	r0, fp
 800644a:	f000 fba1 	bl	8006b90 <__lshift>
 800644e:	4621      	mov	r1, r4
 8006450:	4681      	mov	r9, r0
 8006452:	f000 fc09 	bl	8006c68 <__mcmp>
 8006456:	2800      	cmp	r0, #0
 8006458:	dcb0      	bgt.n	80063bc <_dtoa_r+0xa64>
 800645a:	d102      	bne.n	8006462 <_dtoa_r+0xb0a>
 800645c:	f018 0f01 	tst.w	r8, #1
 8006460:	d1ac      	bne.n	80063bc <_dtoa_r+0xa64>
 8006462:	4633      	mov	r3, r6
 8006464:	461e      	mov	r6, r3
 8006466:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800646a:	2a30      	cmp	r2, #48	@ 0x30
 800646c:	d0fa      	beq.n	8006464 <_dtoa_r+0xb0c>
 800646e:	e5be      	b.n	8005fee <_dtoa_r+0x696>
 8006470:	459a      	cmp	sl, r3
 8006472:	d1a4      	bne.n	80063be <_dtoa_r+0xa66>
 8006474:	9b04      	ldr	r3, [sp, #16]
 8006476:	3301      	adds	r3, #1
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	2331      	movs	r3, #49	@ 0x31
 800647c:	f88a 3000 	strb.w	r3, [sl]
 8006480:	e5b5      	b.n	8005fee <_dtoa_r+0x696>
 8006482:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006484:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80064e4 <_dtoa_r+0xb8c>
 8006488:	b11b      	cbz	r3, 8006492 <_dtoa_r+0xb3a>
 800648a:	f10a 0308 	add.w	r3, sl, #8
 800648e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4650      	mov	r0, sl
 8006494:	b017      	add	sp, #92	@ 0x5c
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800649c:	2b01      	cmp	r3, #1
 800649e:	f77f ae3d 	ble.w	800611c <_dtoa_r+0x7c4>
 80064a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80064a6:	2001      	movs	r0, #1
 80064a8:	e65b      	b.n	8006162 <_dtoa_r+0x80a>
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f77f aed6 	ble.w	800625e <_dtoa_r+0x906>
 80064b2:	4656      	mov	r6, sl
 80064b4:	4621      	mov	r1, r4
 80064b6:	4648      	mov	r0, r9
 80064b8:	f7ff f9c4 	bl	8005844 <quorem>
 80064bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80064c0:	9b08      	ldr	r3, [sp, #32]
 80064c2:	f806 8b01 	strb.w	r8, [r6], #1
 80064c6:	eba6 020a 	sub.w	r2, r6, sl
 80064ca:	4293      	cmp	r3, r2
 80064cc:	ddb3      	ble.n	8006436 <_dtoa_r+0xade>
 80064ce:	4649      	mov	r1, r9
 80064d0:	2300      	movs	r3, #0
 80064d2:	220a      	movs	r2, #10
 80064d4:	4658      	mov	r0, fp
 80064d6:	f000 f967 	bl	80067a8 <__multadd>
 80064da:	4681      	mov	r9, r0
 80064dc:	e7ea      	b.n	80064b4 <_dtoa_r+0xb5c>
 80064de:	bf00      	nop
 80064e0:	0800aad4 	.word	0x0800aad4
 80064e4:	0800aa58 	.word	0x0800aa58

080064e8 <_free_r>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	4605      	mov	r5, r0
 80064ec:	2900      	cmp	r1, #0
 80064ee:	d040      	beq.n	8006572 <_free_r+0x8a>
 80064f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064f4:	1f0c      	subs	r4, r1, #4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bfb8      	it	lt
 80064fa:	18e4      	addlt	r4, r4, r3
 80064fc:	f000 f8e6 	bl	80066cc <__malloc_lock>
 8006500:	4a1c      	ldr	r2, [pc, #112]	@ (8006574 <_free_r+0x8c>)
 8006502:	6813      	ldr	r3, [r2, #0]
 8006504:	b933      	cbnz	r3, 8006514 <_free_r+0x2c>
 8006506:	6063      	str	r3, [r4, #4]
 8006508:	6014      	str	r4, [r2, #0]
 800650a:	4628      	mov	r0, r5
 800650c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006510:	f000 b8e2 	b.w	80066d8 <__malloc_unlock>
 8006514:	42a3      	cmp	r3, r4
 8006516:	d908      	bls.n	800652a <_free_r+0x42>
 8006518:	6820      	ldr	r0, [r4, #0]
 800651a:	1821      	adds	r1, r4, r0
 800651c:	428b      	cmp	r3, r1
 800651e:	bf01      	itttt	eq
 8006520:	6819      	ldreq	r1, [r3, #0]
 8006522:	685b      	ldreq	r3, [r3, #4]
 8006524:	1809      	addeq	r1, r1, r0
 8006526:	6021      	streq	r1, [r4, #0]
 8006528:	e7ed      	b.n	8006506 <_free_r+0x1e>
 800652a:	461a      	mov	r2, r3
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	b10b      	cbz	r3, 8006534 <_free_r+0x4c>
 8006530:	42a3      	cmp	r3, r4
 8006532:	d9fa      	bls.n	800652a <_free_r+0x42>
 8006534:	6811      	ldr	r1, [r2, #0]
 8006536:	1850      	adds	r0, r2, r1
 8006538:	42a0      	cmp	r0, r4
 800653a:	d10b      	bne.n	8006554 <_free_r+0x6c>
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	4401      	add	r1, r0
 8006540:	1850      	adds	r0, r2, r1
 8006542:	4283      	cmp	r3, r0
 8006544:	6011      	str	r1, [r2, #0]
 8006546:	d1e0      	bne.n	800650a <_free_r+0x22>
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	4408      	add	r0, r1
 800654e:	6010      	str	r0, [r2, #0]
 8006550:	6053      	str	r3, [r2, #4]
 8006552:	e7da      	b.n	800650a <_free_r+0x22>
 8006554:	d902      	bls.n	800655c <_free_r+0x74>
 8006556:	230c      	movs	r3, #12
 8006558:	602b      	str	r3, [r5, #0]
 800655a:	e7d6      	b.n	800650a <_free_r+0x22>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	1821      	adds	r1, r4, r0
 8006560:	428b      	cmp	r3, r1
 8006562:	bf01      	itttt	eq
 8006564:	6819      	ldreq	r1, [r3, #0]
 8006566:	685b      	ldreq	r3, [r3, #4]
 8006568:	1809      	addeq	r1, r1, r0
 800656a:	6021      	streq	r1, [r4, #0]
 800656c:	6063      	str	r3, [r4, #4]
 800656e:	6054      	str	r4, [r2, #4]
 8006570:	e7cb      	b.n	800650a <_free_r+0x22>
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20000ab8 	.word	0x20000ab8

08006578 <malloc>:
 8006578:	4b02      	ldr	r3, [pc, #8]	@ (8006584 <malloc+0xc>)
 800657a:	4601      	mov	r1, r0
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	f000 b825 	b.w	80065cc <_malloc_r>
 8006582:	bf00      	nop
 8006584:	20000044 	.word	0x20000044

08006588 <sbrk_aligned>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4e0f      	ldr	r6, [pc, #60]	@ (80065c8 <sbrk_aligned+0x40>)
 800658c:	460c      	mov	r4, r1
 800658e:	6831      	ldr	r1, [r6, #0]
 8006590:	4605      	mov	r5, r0
 8006592:	b911      	cbnz	r1, 800659a <sbrk_aligned+0x12>
 8006594:	f001 fd8c 	bl	80080b0 <_sbrk_r>
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f001 fd87 	bl	80080b0 <_sbrk_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d103      	bne.n	80065ae <sbrk_aligned+0x26>
 80065a6:	f04f 34ff 	mov.w	r4, #4294967295
 80065aa:	4620      	mov	r0, r4
 80065ac:	bd70      	pop	{r4, r5, r6, pc}
 80065ae:	1cc4      	adds	r4, r0, #3
 80065b0:	f024 0403 	bic.w	r4, r4, #3
 80065b4:	42a0      	cmp	r0, r4
 80065b6:	d0f8      	beq.n	80065aa <sbrk_aligned+0x22>
 80065b8:	1a21      	subs	r1, r4, r0
 80065ba:	4628      	mov	r0, r5
 80065bc:	f001 fd78 	bl	80080b0 <_sbrk_r>
 80065c0:	3001      	adds	r0, #1
 80065c2:	d1f2      	bne.n	80065aa <sbrk_aligned+0x22>
 80065c4:	e7ef      	b.n	80065a6 <sbrk_aligned+0x1e>
 80065c6:	bf00      	nop
 80065c8:	20000ab4 	.word	0x20000ab4

080065cc <_malloc_r>:
 80065cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d0:	1ccd      	adds	r5, r1, #3
 80065d2:	f025 0503 	bic.w	r5, r5, #3
 80065d6:	3508      	adds	r5, #8
 80065d8:	2d0c      	cmp	r5, #12
 80065da:	bf38      	it	cc
 80065dc:	250c      	movcc	r5, #12
 80065de:	2d00      	cmp	r5, #0
 80065e0:	4606      	mov	r6, r0
 80065e2:	db01      	blt.n	80065e8 <_malloc_r+0x1c>
 80065e4:	42a9      	cmp	r1, r5
 80065e6:	d904      	bls.n	80065f2 <_malloc_r+0x26>
 80065e8:	230c      	movs	r3, #12
 80065ea:	6033      	str	r3, [r6, #0]
 80065ec:	2000      	movs	r0, #0
 80065ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066c8 <_malloc_r+0xfc>
 80065f6:	f000 f869 	bl	80066cc <__malloc_lock>
 80065fa:	f8d8 3000 	ldr.w	r3, [r8]
 80065fe:	461c      	mov	r4, r3
 8006600:	bb44      	cbnz	r4, 8006654 <_malloc_r+0x88>
 8006602:	4629      	mov	r1, r5
 8006604:	4630      	mov	r0, r6
 8006606:	f7ff ffbf 	bl	8006588 <sbrk_aligned>
 800660a:	1c43      	adds	r3, r0, #1
 800660c:	4604      	mov	r4, r0
 800660e:	d158      	bne.n	80066c2 <_malloc_r+0xf6>
 8006610:	f8d8 4000 	ldr.w	r4, [r8]
 8006614:	4627      	mov	r7, r4
 8006616:	2f00      	cmp	r7, #0
 8006618:	d143      	bne.n	80066a2 <_malloc_r+0xd6>
 800661a:	2c00      	cmp	r4, #0
 800661c:	d04b      	beq.n	80066b6 <_malloc_r+0xea>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	4639      	mov	r1, r7
 8006622:	4630      	mov	r0, r6
 8006624:	eb04 0903 	add.w	r9, r4, r3
 8006628:	f001 fd42 	bl	80080b0 <_sbrk_r>
 800662c:	4581      	cmp	r9, r0
 800662e:	d142      	bne.n	80066b6 <_malloc_r+0xea>
 8006630:	6821      	ldr	r1, [r4, #0]
 8006632:	4630      	mov	r0, r6
 8006634:	1a6d      	subs	r5, r5, r1
 8006636:	4629      	mov	r1, r5
 8006638:	f7ff ffa6 	bl	8006588 <sbrk_aligned>
 800663c:	3001      	adds	r0, #1
 800663e:	d03a      	beq.n	80066b6 <_malloc_r+0xea>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	442b      	add	r3, r5
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	f8d8 3000 	ldr.w	r3, [r8]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	bb62      	cbnz	r2, 80066a8 <_malloc_r+0xdc>
 800664e:	f8c8 7000 	str.w	r7, [r8]
 8006652:	e00f      	b.n	8006674 <_malloc_r+0xa8>
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	1b52      	subs	r2, r2, r5
 8006658:	d420      	bmi.n	800669c <_malloc_r+0xd0>
 800665a:	2a0b      	cmp	r2, #11
 800665c:	d917      	bls.n	800668e <_malloc_r+0xc2>
 800665e:	1961      	adds	r1, r4, r5
 8006660:	42a3      	cmp	r3, r4
 8006662:	6025      	str	r5, [r4, #0]
 8006664:	bf18      	it	ne
 8006666:	6059      	strne	r1, [r3, #4]
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	bf08      	it	eq
 800666c:	f8c8 1000 	streq.w	r1, [r8]
 8006670:	5162      	str	r2, [r4, r5]
 8006672:	604b      	str	r3, [r1, #4]
 8006674:	4630      	mov	r0, r6
 8006676:	f000 f82f 	bl	80066d8 <__malloc_unlock>
 800667a:	f104 000b 	add.w	r0, r4, #11
 800667e:	1d23      	adds	r3, r4, #4
 8006680:	f020 0007 	bic.w	r0, r0, #7
 8006684:	1ac2      	subs	r2, r0, r3
 8006686:	bf1c      	itt	ne
 8006688:	1a1b      	subne	r3, r3, r0
 800668a:	50a3      	strne	r3, [r4, r2]
 800668c:	e7af      	b.n	80065ee <_malloc_r+0x22>
 800668e:	6862      	ldr	r2, [r4, #4]
 8006690:	42a3      	cmp	r3, r4
 8006692:	bf0c      	ite	eq
 8006694:	f8c8 2000 	streq.w	r2, [r8]
 8006698:	605a      	strne	r2, [r3, #4]
 800669a:	e7eb      	b.n	8006674 <_malloc_r+0xa8>
 800669c:	4623      	mov	r3, r4
 800669e:	6864      	ldr	r4, [r4, #4]
 80066a0:	e7ae      	b.n	8006600 <_malloc_r+0x34>
 80066a2:	463c      	mov	r4, r7
 80066a4:	687f      	ldr	r7, [r7, #4]
 80066a6:	e7b6      	b.n	8006616 <_malloc_r+0x4a>
 80066a8:	461a      	mov	r2, r3
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	d1fb      	bne.n	80066a8 <_malloc_r+0xdc>
 80066b0:	2300      	movs	r3, #0
 80066b2:	6053      	str	r3, [r2, #4]
 80066b4:	e7de      	b.n	8006674 <_malloc_r+0xa8>
 80066b6:	230c      	movs	r3, #12
 80066b8:	4630      	mov	r0, r6
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	f000 f80c 	bl	80066d8 <__malloc_unlock>
 80066c0:	e794      	b.n	80065ec <_malloc_r+0x20>
 80066c2:	6005      	str	r5, [r0, #0]
 80066c4:	e7d6      	b.n	8006674 <_malloc_r+0xa8>
 80066c6:	bf00      	nop
 80066c8:	20000ab8 	.word	0x20000ab8

080066cc <__malloc_lock>:
 80066cc:	4801      	ldr	r0, [pc, #4]	@ (80066d4 <__malloc_lock+0x8>)
 80066ce:	f7ff b870 	b.w	80057b2 <__retarget_lock_acquire_recursive>
 80066d2:	bf00      	nop
 80066d4:	20000ab0 	.word	0x20000ab0

080066d8 <__malloc_unlock>:
 80066d8:	4801      	ldr	r0, [pc, #4]	@ (80066e0 <__malloc_unlock+0x8>)
 80066da:	f7ff b86b 	b.w	80057b4 <__retarget_lock_release_recursive>
 80066de:	bf00      	nop
 80066e0:	20000ab0 	.word	0x20000ab0

080066e4 <_Balloc>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	69c6      	ldr	r6, [r0, #28]
 80066e8:	4604      	mov	r4, r0
 80066ea:	460d      	mov	r5, r1
 80066ec:	b976      	cbnz	r6, 800670c <_Balloc+0x28>
 80066ee:	2010      	movs	r0, #16
 80066f0:	f7ff ff42 	bl	8006578 <malloc>
 80066f4:	4602      	mov	r2, r0
 80066f6:	61e0      	str	r0, [r4, #28]
 80066f8:	b920      	cbnz	r0, 8006704 <_Balloc+0x20>
 80066fa:	216b      	movs	r1, #107	@ 0x6b
 80066fc:	4b17      	ldr	r3, [pc, #92]	@ (800675c <_Balloc+0x78>)
 80066fe:	4818      	ldr	r0, [pc, #96]	@ (8006760 <_Balloc+0x7c>)
 8006700:	f7ff f882 	bl	8005808 <__assert_func>
 8006704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006708:	6006      	str	r6, [r0, #0]
 800670a:	60c6      	str	r6, [r0, #12]
 800670c:	69e6      	ldr	r6, [r4, #28]
 800670e:	68f3      	ldr	r3, [r6, #12]
 8006710:	b183      	cbz	r3, 8006734 <_Balloc+0x50>
 8006712:	69e3      	ldr	r3, [r4, #28]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800671a:	b9b8      	cbnz	r0, 800674c <_Balloc+0x68>
 800671c:	2101      	movs	r1, #1
 800671e:	fa01 f605 	lsl.w	r6, r1, r5
 8006722:	1d72      	adds	r2, r6, #5
 8006724:	4620      	mov	r0, r4
 8006726:	0092      	lsls	r2, r2, #2
 8006728:	f001 fcdf 	bl	80080ea <_calloc_r>
 800672c:	b160      	cbz	r0, 8006748 <_Balloc+0x64>
 800672e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006732:	e00e      	b.n	8006752 <_Balloc+0x6e>
 8006734:	2221      	movs	r2, #33	@ 0x21
 8006736:	2104      	movs	r1, #4
 8006738:	4620      	mov	r0, r4
 800673a:	f001 fcd6 	bl	80080ea <_calloc_r>
 800673e:	69e3      	ldr	r3, [r4, #28]
 8006740:	60f0      	str	r0, [r6, #12]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e4      	bne.n	8006712 <_Balloc+0x2e>
 8006748:	2000      	movs	r0, #0
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	6802      	ldr	r2, [r0, #0]
 800674e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006752:	2300      	movs	r3, #0
 8006754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006758:	e7f7      	b.n	800674a <_Balloc+0x66>
 800675a:	bf00      	nop
 800675c:	0800aa65 	.word	0x0800aa65
 8006760:	0800aae5 	.word	0x0800aae5

08006764 <_Bfree>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	69c6      	ldr	r6, [r0, #28]
 8006768:	4605      	mov	r5, r0
 800676a:	460c      	mov	r4, r1
 800676c:	b976      	cbnz	r6, 800678c <_Bfree+0x28>
 800676e:	2010      	movs	r0, #16
 8006770:	f7ff ff02 	bl	8006578 <malloc>
 8006774:	4602      	mov	r2, r0
 8006776:	61e8      	str	r0, [r5, #28]
 8006778:	b920      	cbnz	r0, 8006784 <_Bfree+0x20>
 800677a:	218f      	movs	r1, #143	@ 0x8f
 800677c:	4b08      	ldr	r3, [pc, #32]	@ (80067a0 <_Bfree+0x3c>)
 800677e:	4809      	ldr	r0, [pc, #36]	@ (80067a4 <_Bfree+0x40>)
 8006780:	f7ff f842 	bl	8005808 <__assert_func>
 8006784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006788:	6006      	str	r6, [r0, #0]
 800678a:	60c6      	str	r6, [r0, #12]
 800678c:	b13c      	cbz	r4, 800679e <_Bfree+0x3a>
 800678e:	69eb      	ldr	r3, [r5, #28]
 8006790:	6862      	ldr	r2, [r4, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006798:	6021      	str	r1, [r4, #0]
 800679a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	0800aa65 	.word	0x0800aa65
 80067a4:	0800aae5 	.word	0x0800aae5

080067a8 <__multadd>:
 80067a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ac:	4607      	mov	r7, r0
 80067ae:	460c      	mov	r4, r1
 80067b0:	461e      	mov	r6, r3
 80067b2:	2000      	movs	r0, #0
 80067b4:	690d      	ldr	r5, [r1, #16]
 80067b6:	f101 0c14 	add.w	ip, r1, #20
 80067ba:	f8dc 3000 	ldr.w	r3, [ip]
 80067be:	3001      	adds	r0, #1
 80067c0:	b299      	uxth	r1, r3
 80067c2:	fb02 6101 	mla	r1, r2, r1, r6
 80067c6:	0c1e      	lsrs	r6, r3, #16
 80067c8:	0c0b      	lsrs	r3, r1, #16
 80067ca:	fb02 3306 	mla	r3, r2, r6, r3
 80067ce:	b289      	uxth	r1, r1
 80067d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80067d4:	4285      	cmp	r5, r0
 80067d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067da:	f84c 1b04 	str.w	r1, [ip], #4
 80067de:	dcec      	bgt.n	80067ba <__multadd+0x12>
 80067e0:	b30e      	cbz	r6, 8006826 <__multadd+0x7e>
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	42ab      	cmp	r3, r5
 80067e6:	dc19      	bgt.n	800681c <__multadd+0x74>
 80067e8:	6861      	ldr	r1, [r4, #4]
 80067ea:	4638      	mov	r0, r7
 80067ec:	3101      	adds	r1, #1
 80067ee:	f7ff ff79 	bl	80066e4 <_Balloc>
 80067f2:	4680      	mov	r8, r0
 80067f4:	b928      	cbnz	r0, 8006802 <__multadd+0x5a>
 80067f6:	4602      	mov	r2, r0
 80067f8:	21ba      	movs	r1, #186	@ 0xba
 80067fa:	4b0c      	ldr	r3, [pc, #48]	@ (800682c <__multadd+0x84>)
 80067fc:	480c      	ldr	r0, [pc, #48]	@ (8006830 <__multadd+0x88>)
 80067fe:	f7ff f803 	bl	8005808 <__assert_func>
 8006802:	6922      	ldr	r2, [r4, #16]
 8006804:	f104 010c 	add.w	r1, r4, #12
 8006808:	3202      	adds	r2, #2
 800680a:	0092      	lsls	r2, r2, #2
 800680c:	300c      	adds	r0, #12
 800680e:	f7fe ffe8 	bl	80057e2 <memcpy>
 8006812:	4621      	mov	r1, r4
 8006814:	4638      	mov	r0, r7
 8006816:	f7ff ffa5 	bl	8006764 <_Bfree>
 800681a:	4644      	mov	r4, r8
 800681c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006820:	3501      	adds	r5, #1
 8006822:	615e      	str	r6, [r3, #20]
 8006824:	6125      	str	r5, [r4, #16]
 8006826:	4620      	mov	r0, r4
 8006828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800682c:	0800aad4 	.word	0x0800aad4
 8006830:	0800aae5 	.word	0x0800aae5

08006834 <__s2b>:
 8006834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006838:	4615      	mov	r5, r2
 800683a:	2209      	movs	r2, #9
 800683c:	461f      	mov	r7, r3
 800683e:	3308      	adds	r3, #8
 8006840:	460c      	mov	r4, r1
 8006842:	fb93 f3f2 	sdiv	r3, r3, r2
 8006846:	4606      	mov	r6, r0
 8006848:	2201      	movs	r2, #1
 800684a:	2100      	movs	r1, #0
 800684c:	429a      	cmp	r2, r3
 800684e:	db09      	blt.n	8006864 <__s2b+0x30>
 8006850:	4630      	mov	r0, r6
 8006852:	f7ff ff47 	bl	80066e4 <_Balloc>
 8006856:	b940      	cbnz	r0, 800686a <__s2b+0x36>
 8006858:	4602      	mov	r2, r0
 800685a:	21d3      	movs	r1, #211	@ 0xd3
 800685c:	4b18      	ldr	r3, [pc, #96]	@ (80068c0 <__s2b+0x8c>)
 800685e:	4819      	ldr	r0, [pc, #100]	@ (80068c4 <__s2b+0x90>)
 8006860:	f7fe ffd2 	bl	8005808 <__assert_func>
 8006864:	0052      	lsls	r2, r2, #1
 8006866:	3101      	adds	r1, #1
 8006868:	e7f0      	b.n	800684c <__s2b+0x18>
 800686a:	9b08      	ldr	r3, [sp, #32]
 800686c:	2d09      	cmp	r5, #9
 800686e:	6143      	str	r3, [r0, #20]
 8006870:	f04f 0301 	mov.w	r3, #1
 8006874:	6103      	str	r3, [r0, #16]
 8006876:	dd16      	ble.n	80068a6 <__s2b+0x72>
 8006878:	f104 0909 	add.w	r9, r4, #9
 800687c:	46c8      	mov	r8, r9
 800687e:	442c      	add	r4, r5
 8006880:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006884:	4601      	mov	r1, r0
 8006886:	220a      	movs	r2, #10
 8006888:	4630      	mov	r0, r6
 800688a:	3b30      	subs	r3, #48	@ 0x30
 800688c:	f7ff ff8c 	bl	80067a8 <__multadd>
 8006890:	45a0      	cmp	r8, r4
 8006892:	d1f5      	bne.n	8006880 <__s2b+0x4c>
 8006894:	f1a5 0408 	sub.w	r4, r5, #8
 8006898:	444c      	add	r4, r9
 800689a:	1b2d      	subs	r5, r5, r4
 800689c:	1963      	adds	r3, r4, r5
 800689e:	42bb      	cmp	r3, r7
 80068a0:	db04      	blt.n	80068ac <__s2b+0x78>
 80068a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068a6:	2509      	movs	r5, #9
 80068a8:	340a      	adds	r4, #10
 80068aa:	e7f6      	b.n	800689a <__s2b+0x66>
 80068ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068b0:	4601      	mov	r1, r0
 80068b2:	220a      	movs	r2, #10
 80068b4:	4630      	mov	r0, r6
 80068b6:	3b30      	subs	r3, #48	@ 0x30
 80068b8:	f7ff ff76 	bl	80067a8 <__multadd>
 80068bc:	e7ee      	b.n	800689c <__s2b+0x68>
 80068be:	bf00      	nop
 80068c0:	0800aad4 	.word	0x0800aad4
 80068c4:	0800aae5 	.word	0x0800aae5

080068c8 <__hi0bits>:
 80068c8:	4603      	mov	r3, r0
 80068ca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80068ce:	bf3a      	itte	cc
 80068d0:	0403      	lslcc	r3, r0, #16
 80068d2:	2010      	movcc	r0, #16
 80068d4:	2000      	movcs	r0, #0
 80068d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068da:	bf3c      	itt	cc
 80068dc:	021b      	lslcc	r3, r3, #8
 80068de:	3008      	addcc	r0, #8
 80068e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e4:	bf3c      	itt	cc
 80068e6:	011b      	lslcc	r3, r3, #4
 80068e8:	3004      	addcc	r0, #4
 80068ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ee:	bf3c      	itt	cc
 80068f0:	009b      	lslcc	r3, r3, #2
 80068f2:	3002      	addcc	r0, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	db05      	blt.n	8006904 <__hi0bits+0x3c>
 80068f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80068fc:	f100 0001 	add.w	r0, r0, #1
 8006900:	bf08      	it	eq
 8006902:	2020      	moveq	r0, #32
 8006904:	4770      	bx	lr

08006906 <__lo0bits>:
 8006906:	6803      	ldr	r3, [r0, #0]
 8006908:	4602      	mov	r2, r0
 800690a:	f013 0007 	ands.w	r0, r3, #7
 800690e:	d00b      	beq.n	8006928 <__lo0bits+0x22>
 8006910:	07d9      	lsls	r1, r3, #31
 8006912:	d421      	bmi.n	8006958 <__lo0bits+0x52>
 8006914:	0798      	lsls	r0, r3, #30
 8006916:	bf49      	itett	mi
 8006918:	085b      	lsrmi	r3, r3, #1
 800691a:	089b      	lsrpl	r3, r3, #2
 800691c:	2001      	movmi	r0, #1
 800691e:	6013      	strmi	r3, [r2, #0]
 8006920:	bf5c      	itt	pl
 8006922:	2002      	movpl	r0, #2
 8006924:	6013      	strpl	r3, [r2, #0]
 8006926:	4770      	bx	lr
 8006928:	b299      	uxth	r1, r3
 800692a:	b909      	cbnz	r1, 8006930 <__lo0bits+0x2a>
 800692c:	2010      	movs	r0, #16
 800692e:	0c1b      	lsrs	r3, r3, #16
 8006930:	b2d9      	uxtb	r1, r3
 8006932:	b909      	cbnz	r1, 8006938 <__lo0bits+0x32>
 8006934:	3008      	adds	r0, #8
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	0719      	lsls	r1, r3, #28
 800693a:	bf04      	itt	eq
 800693c:	091b      	lsreq	r3, r3, #4
 800693e:	3004      	addeq	r0, #4
 8006940:	0799      	lsls	r1, r3, #30
 8006942:	bf04      	itt	eq
 8006944:	089b      	lsreq	r3, r3, #2
 8006946:	3002      	addeq	r0, #2
 8006948:	07d9      	lsls	r1, r3, #31
 800694a:	d403      	bmi.n	8006954 <__lo0bits+0x4e>
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	f100 0001 	add.w	r0, r0, #1
 8006952:	d003      	beq.n	800695c <__lo0bits+0x56>
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	4770      	bx	lr
 8006958:	2000      	movs	r0, #0
 800695a:	4770      	bx	lr
 800695c:	2020      	movs	r0, #32
 800695e:	4770      	bx	lr

08006960 <__i2b>:
 8006960:	b510      	push	{r4, lr}
 8006962:	460c      	mov	r4, r1
 8006964:	2101      	movs	r1, #1
 8006966:	f7ff febd 	bl	80066e4 <_Balloc>
 800696a:	4602      	mov	r2, r0
 800696c:	b928      	cbnz	r0, 800697a <__i2b+0x1a>
 800696e:	f240 1145 	movw	r1, #325	@ 0x145
 8006972:	4b04      	ldr	r3, [pc, #16]	@ (8006984 <__i2b+0x24>)
 8006974:	4804      	ldr	r0, [pc, #16]	@ (8006988 <__i2b+0x28>)
 8006976:	f7fe ff47 	bl	8005808 <__assert_func>
 800697a:	2301      	movs	r3, #1
 800697c:	6144      	str	r4, [r0, #20]
 800697e:	6103      	str	r3, [r0, #16]
 8006980:	bd10      	pop	{r4, pc}
 8006982:	bf00      	nop
 8006984:	0800aad4 	.word	0x0800aad4
 8006988:	0800aae5 	.word	0x0800aae5

0800698c <__multiply>:
 800698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	4614      	mov	r4, r2
 8006992:	690a      	ldr	r2, [r1, #16]
 8006994:	6923      	ldr	r3, [r4, #16]
 8006996:	460f      	mov	r7, r1
 8006998:	429a      	cmp	r2, r3
 800699a:	bfa2      	ittt	ge
 800699c:	4623      	movge	r3, r4
 800699e:	460c      	movge	r4, r1
 80069a0:	461f      	movge	r7, r3
 80069a2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80069a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	6861      	ldr	r1, [r4, #4]
 80069ae:	eb0a 0609 	add.w	r6, sl, r9
 80069b2:	42b3      	cmp	r3, r6
 80069b4:	b085      	sub	sp, #20
 80069b6:	bfb8      	it	lt
 80069b8:	3101      	addlt	r1, #1
 80069ba:	f7ff fe93 	bl	80066e4 <_Balloc>
 80069be:	b930      	cbnz	r0, 80069ce <__multiply+0x42>
 80069c0:	4602      	mov	r2, r0
 80069c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80069c6:	4b43      	ldr	r3, [pc, #268]	@ (8006ad4 <__multiply+0x148>)
 80069c8:	4843      	ldr	r0, [pc, #268]	@ (8006ad8 <__multiply+0x14c>)
 80069ca:	f7fe ff1d 	bl	8005808 <__assert_func>
 80069ce:	f100 0514 	add.w	r5, r0, #20
 80069d2:	462b      	mov	r3, r5
 80069d4:	2200      	movs	r2, #0
 80069d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069da:	4543      	cmp	r3, r8
 80069dc:	d321      	bcc.n	8006a22 <__multiply+0x96>
 80069de:	f107 0114 	add.w	r1, r7, #20
 80069e2:	f104 0214 	add.w	r2, r4, #20
 80069e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80069ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80069ee:	9302      	str	r3, [sp, #8]
 80069f0:	1b13      	subs	r3, r2, r4
 80069f2:	3b15      	subs	r3, #21
 80069f4:	f023 0303 	bic.w	r3, r3, #3
 80069f8:	3304      	adds	r3, #4
 80069fa:	f104 0715 	add.w	r7, r4, #21
 80069fe:	42ba      	cmp	r2, r7
 8006a00:	bf38      	it	cc
 8006a02:	2304      	movcc	r3, #4
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	9103      	str	r1, [sp, #12]
 8006a0a:	428b      	cmp	r3, r1
 8006a0c:	d80c      	bhi.n	8006a28 <__multiply+0x9c>
 8006a0e:	2e00      	cmp	r6, #0
 8006a10:	dd03      	ble.n	8006a1a <__multiply+0x8e>
 8006a12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d05a      	beq.n	8006ad0 <__multiply+0x144>
 8006a1a:	6106      	str	r6, [r0, #16]
 8006a1c:	b005      	add	sp, #20
 8006a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a22:	f843 2b04 	str.w	r2, [r3], #4
 8006a26:	e7d8      	b.n	80069da <__multiply+0x4e>
 8006a28:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a2c:	f1ba 0f00 	cmp.w	sl, #0
 8006a30:	d023      	beq.n	8006a7a <__multiply+0xee>
 8006a32:	46a9      	mov	r9, r5
 8006a34:	f04f 0c00 	mov.w	ip, #0
 8006a38:	f104 0e14 	add.w	lr, r4, #20
 8006a3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006a40:	f8d9 3000 	ldr.w	r3, [r9]
 8006a44:	fa1f fb87 	uxth.w	fp, r7
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a4e:	4463      	add	r3, ip
 8006a50:	f8d9 c000 	ldr.w	ip, [r9]
 8006a54:	0c3f      	lsrs	r7, r7, #16
 8006a56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006a5a:	fb0a c707 	mla	r7, sl, r7, ip
 8006a5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a68:	4572      	cmp	r2, lr
 8006a6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006a6e:	f849 3b04 	str.w	r3, [r9], #4
 8006a72:	d8e3      	bhi.n	8006a3c <__multiply+0xb0>
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	f845 c003 	str.w	ip, [r5, r3]
 8006a7a:	9b03      	ldr	r3, [sp, #12]
 8006a7c:	3104      	adds	r1, #4
 8006a7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006a82:	f1b9 0f00 	cmp.w	r9, #0
 8006a86:	d021      	beq.n	8006acc <__multiply+0x140>
 8006a88:	46ae      	mov	lr, r5
 8006a8a:	f04f 0a00 	mov.w	sl, #0
 8006a8e:	682b      	ldr	r3, [r5, #0]
 8006a90:	f104 0c14 	add.w	ip, r4, #20
 8006a94:	f8bc b000 	ldrh.w	fp, [ip]
 8006a98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	fb09 770b 	mla	r7, r9, fp, r7
 8006aa2:	4457      	add	r7, sl
 8006aa4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006aa8:	f84e 3b04 	str.w	r3, [lr], #4
 8006aac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ab0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ab4:	f8be 3000 	ldrh.w	r3, [lr]
 8006ab8:	4562      	cmp	r2, ip
 8006aba:	fb09 330a 	mla	r3, r9, sl, r3
 8006abe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006ac2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ac6:	d8e5      	bhi.n	8006a94 <__multiply+0x108>
 8006ac8:	9f01      	ldr	r7, [sp, #4]
 8006aca:	51eb      	str	r3, [r5, r7]
 8006acc:	3504      	adds	r5, #4
 8006ace:	e79a      	b.n	8006a06 <__multiply+0x7a>
 8006ad0:	3e01      	subs	r6, #1
 8006ad2:	e79c      	b.n	8006a0e <__multiply+0x82>
 8006ad4:	0800aad4 	.word	0x0800aad4
 8006ad8:	0800aae5 	.word	0x0800aae5

08006adc <__pow5mult>:
 8006adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae0:	4615      	mov	r5, r2
 8006ae2:	f012 0203 	ands.w	r2, r2, #3
 8006ae6:	4607      	mov	r7, r0
 8006ae8:	460e      	mov	r6, r1
 8006aea:	d007      	beq.n	8006afc <__pow5mult+0x20>
 8006aec:	4c25      	ldr	r4, [pc, #148]	@ (8006b84 <__pow5mult+0xa8>)
 8006aee:	3a01      	subs	r2, #1
 8006af0:	2300      	movs	r3, #0
 8006af2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006af6:	f7ff fe57 	bl	80067a8 <__multadd>
 8006afa:	4606      	mov	r6, r0
 8006afc:	10ad      	asrs	r5, r5, #2
 8006afe:	d03d      	beq.n	8006b7c <__pow5mult+0xa0>
 8006b00:	69fc      	ldr	r4, [r7, #28]
 8006b02:	b97c      	cbnz	r4, 8006b24 <__pow5mult+0x48>
 8006b04:	2010      	movs	r0, #16
 8006b06:	f7ff fd37 	bl	8006578 <malloc>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	61f8      	str	r0, [r7, #28]
 8006b0e:	b928      	cbnz	r0, 8006b1c <__pow5mult+0x40>
 8006b10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b14:	4b1c      	ldr	r3, [pc, #112]	@ (8006b88 <__pow5mult+0xac>)
 8006b16:	481d      	ldr	r0, [pc, #116]	@ (8006b8c <__pow5mult+0xb0>)
 8006b18:	f7fe fe76 	bl	8005808 <__assert_func>
 8006b1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b20:	6004      	str	r4, [r0, #0]
 8006b22:	60c4      	str	r4, [r0, #12]
 8006b24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b2c:	b94c      	cbnz	r4, 8006b42 <__pow5mult+0x66>
 8006b2e:	f240 2171 	movw	r1, #625	@ 0x271
 8006b32:	4638      	mov	r0, r7
 8006b34:	f7ff ff14 	bl	8006960 <__i2b>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	f04f 0900 	mov.w	r9, #0
 8006b46:	07eb      	lsls	r3, r5, #31
 8006b48:	d50a      	bpl.n	8006b60 <__pow5mult+0x84>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	4638      	mov	r0, r7
 8006b50:	f7ff ff1c 	bl	800698c <__multiply>
 8006b54:	4680      	mov	r8, r0
 8006b56:	4631      	mov	r1, r6
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff fe03 	bl	8006764 <_Bfree>
 8006b5e:	4646      	mov	r6, r8
 8006b60:	106d      	asrs	r5, r5, #1
 8006b62:	d00b      	beq.n	8006b7c <__pow5mult+0xa0>
 8006b64:	6820      	ldr	r0, [r4, #0]
 8006b66:	b938      	cbnz	r0, 8006b78 <__pow5mult+0x9c>
 8006b68:	4622      	mov	r2, r4
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	f7ff ff0d 	bl	800698c <__multiply>
 8006b72:	6020      	str	r0, [r4, #0]
 8006b74:	f8c0 9000 	str.w	r9, [r0]
 8006b78:	4604      	mov	r4, r0
 8006b7a:	e7e4      	b.n	8006b46 <__pow5mult+0x6a>
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b82:	bf00      	nop
 8006b84:	0800ab40 	.word	0x0800ab40
 8006b88:	0800aa65 	.word	0x0800aa65
 8006b8c:	0800aae5 	.word	0x0800aae5

08006b90 <__lshift>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	460c      	mov	r4, r1
 8006b96:	4607      	mov	r7, r0
 8006b98:	4691      	mov	r9, r2
 8006b9a:	6923      	ldr	r3, [r4, #16]
 8006b9c:	6849      	ldr	r1, [r1, #4]
 8006b9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ba2:	68a3      	ldr	r3, [r4, #8]
 8006ba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ba8:	f108 0601 	add.w	r6, r8, #1
 8006bac:	42b3      	cmp	r3, r6
 8006bae:	db0b      	blt.n	8006bc8 <__lshift+0x38>
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f7ff fd97 	bl	80066e4 <_Balloc>
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	b948      	cbnz	r0, 8006bce <__lshift+0x3e>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006bc0:	4b27      	ldr	r3, [pc, #156]	@ (8006c60 <__lshift+0xd0>)
 8006bc2:	4828      	ldr	r0, [pc, #160]	@ (8006c64 <__lshift+0xd4>)
 8006bc4:	f7fe fe20 	bl	8005808 <__assert_func>
 8006bc8:	3101      	adds	r1, #1
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	e7ee      	b.n	8006bac <__lshift+0x1c>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f100 0114 	add.w	r1, r0, #20
 8006bd4:	f100 0210 	add.w	r2, r0, #16
 8006bd8:	4618      	mov	r0, r3
 8006bda:	4553      	cmp	r3, sl
 8006bdc:	db33      	blt.n	8006c46 <__lshift+0xb6>
 8006bde:	6920      	ldr	r0, [r4, #16]
 8006be0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006be4:	f104 0314 	add.w	r3, r4, #20
 8006be8:	f019 091f 	ands.w	r9, r9, #31
 8006bec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bf4:	d02b      	beq.n	8006c4e <__lshift+0xbe>
 8006bf6:	468a      	mov	sl, r1
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f1c9 0e20 	rsb	lr, r9, #32
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	fa00 f009 	lsl.w	r0, r0, r9
 8006c04:	4310      	orrs	r0, r2
 8006c06:	f84a 0b04 	str.w	r0, [sl], #4
 8006c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0e:	459c      	cmp	ip, r3
 8006c10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c14:	d8f3      	bhi.n	8006bfe <__lshift+0x6e>
 8006c16:	ebac 0304 	sub.w	r3, ip, r4
 8006c1a:	3b15      	subs	r3, #21
 8006c1c:	f023 0303 	bic.w	r3, r3, #3
 8006c20:	3304      	adds	r3, #4
 8006c22:	f104 0015 	add.w	r0, r4, #21
 8006c26:	4584      	cmp	ip, r0
 8006c28:	bf38      	it	cc
 8006c2a:	2304      	movcc	r3, #4
 8006c2c:	50ca      	str	r2, [r1, r3]
 8006c2e:	b10a      	cbz	r2, 8006c34 <__lshift+0xa4>
 8006c30:	f108 0602 	add.w	r6, r8, #2
 8006c34:	3e01      	subs	r6, #1
 8006c36:	4638      	mov	r0, r7
 8006c38:	4621      	mov	r1, r4
 8006c3a:	612e      	str	r6, [r5, #16]
 8006c3c:	f7ff fd92 	bl	8006764 <_Bfree>
 8006c40:	4628      	mov	r0, r5
 8006c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	e7c5      	b.n	8006bda <__lshift+0x4a>
 8006c4e:	3904      	subs	r1, #4
 8006c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c54:	459c      	cmp	ip, r3
 8006c56:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c5a:	d8f9      	bhi.n	8006c50 <__lshift+0xc0>
 8006c5c:	e7ea      	b.n	8006c34 <__lshift+0xa4>
 8006c5e:	bf00      	nop
 8006c60:	0800aad4 	.word	0x0800aad4
 8006c64:	0800aae5 	.word	0x0800aae5

08006c68 <__mcmp>:
 8006c68:	4603      	mov	r3, r0
 8006c6a:	690a      	ldr	r2, [r1, #16]
 8006c6c:	6900      	ldr	r0, [r0, #16]
 8006c6e:	b530      	push	{r4, r5, lr}
 8006c70:	1a80      	subs	r0, r0, r2
 8006c72:	d10e      	bne.n	8006c92 <__mcmp+0x2a>
 8006c74:	3314      	adds	r3, #20
 8006c76:	3114      	adds	r1, #20
 8006c78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c88:	4295      	cmp	r5, r2
 8006c8a:	d003      	beq.n	8006c94 <__mcmp+0x2c>
 8006c8c:	d205      	bcs.n	8006c9a <__mcmp+0x32>
 8006c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c92:	bd30      	pop	{r4, r5, pc}
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	d3f3      	bcc.n	8006c80 <__mcmp+0x18>
 8006c98:	e7fb      	b.n	8006c92 <__mcmp+0x2a>
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	e7f9      	b.n	8006c92 <__mcmp+0x2a>
	...

08006ca0 <__mdiff>:
 8006ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	4689      	mov	r9, r1
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	4611      	mov	r1, r2
 8006caa:	4648      	mov	r0, r9
 8006cac:	4614      	mov	r4, r2
 8006cae:	f7ff ffdb 	bl	8006c68 <__mcmp>
 8006cb2:	1e05      	subs	r5, r0, #0
 8006cb4:	d112      	bne.n	8006cdc <__mdiff+0x3c>
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7ff fd13 	bl	80066e4 <_Balloc>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	b928      	cbnz	r0, 8006cce <__mdiff+0x2e>
 8006cc2:	f240 2137 	movw	r1, #567	@ 0x237
 8006cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8006dc0 <__mdiff+0x120>)
 8006cc8:	483e      	ldr	r0, [pc, #248]	@ (8006dc4 <__mdiff+0x124>)
 8006cca:	f7fe fd9d 	bl	8005808 <__assert_func>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	b003      	add	sp, #12
 8006cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cdc:	bfbc      	itt	lt
 8006cde:	464b      	movlt	r3, r9
 8006ce0:	46a1      	movlt	r9, r4
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ce8:	bfba      	itte	lt
 8006cea:	461c      	movlt	r4, r3
 8006cec:	2501      	movlt	r5, #1
 8006cee:	2500      	movge	r5, #0
 8006cf0:	f7ff fcf8 	bl	80066e4 <_Balloc>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	b918      	cbnz	r0, 8006d00 <__mdiff+0x60>
 8006cf8:	f240 2145 	movw	r1, #581	@ 0x245
 8006cfc:	4b30      	ldr	r3, [pc, #192]	@ (8006dc0 <__mdiff+0x120>)
 8006cfe:	e7e3      	b.n	8006cc8 <__mdiff+0x28>
 8006d00:	f100 0b14 	add.w	fp, r0, #20
 8006d04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d08:	f109 0310 	add.w	r3, r9, #16
 8006d0c:	60c5      	str	r5, [r0, #12]
 8006d0e:	f04f 0c00 	mov.w	ip, #0
 8006d12:	f109 0514 	add.w	r5, r9, #20
 8006d16:	46d9      	mov	r9, fp
 8006d18:	6926      	ldr	r6, [r4, #16]
 8006d1a:	f104 0e14 	add.w	lr, r4, #20
 8006d1e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d22:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d26:	9301      	str	r3, [sp, #4]
 8006d28:	9b01      	ldr	r3, [sp, #4]
 8006d2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d32:	b281      	uxth	r1, r0
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	fa1f f38a 	uxth.w	r3, sl
 8006d3a:	1a5b      	subs	r3, r3, r1
 8006d3c:	0c00      	lsrs	r0, r0, #16
 8006d3e:	4463      	add	r3, ip
 8006d40:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d44:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d4e:	4576      	cmp	r6, lr
 8006d50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d54:	f849 3b04 	str.w	r3, [r9], #4
 8006d58:	d8e6      	bhi.n	8006d28 <__mdiff+0x88>
 8006d5a:	1b33      	subs	r3, r6, r4
 8006d5c:	3b15      	subs	r3, #21
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	3415      	adds	r4, #21
 8006d64:	3304      	adds	r3, #4
 8006d66:	42a6      	cmp	r6, r4
 8006d68:	bf38      	it	cc
 8006d6a:	2304      	movcc	r3, #4
 8006d6c:	441d      	add	r5, r3
 8006d6e:	445b      	add	r3, fp
 8006d70:	461e      	mov	r6, r3
 8006d72:	462c      	mov	r4, r5
 8006d74:	4544      	cmp	r4, r8
 8006d76:	d30e      	bcc.n	8006d96 <__mdiff+0xf6>
 8006d78:	f108 0103 	add.w	r1, r8, #3
 8006d7c:	1b49      	subs	r1, r1, r5
 8006d7e:	f021 0103 	bic.w	r1, r1, #3
 8006d82:	3d03      	subs	r5, #3
 8006d84:	45a8      	cmp	r8, r5
 8006d86:	bf38      	it	cc
 8006d88:	2100      	movcc	r1, #0
 8006d8a:	440b      	add	r3, r1
 8006d8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d90:	b199      	cbz	r1, 8006dba <__mdiff+0x11a>
 8006d92:	6117      	str	r7, [r2, #16]
 8006d94:	e79e      	b.n	8006cd4 <__mdiff+0x34>
 8006d96:	46e6      	mov	lr, ip
 8006d98:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d9c:	fa1f fc81 	uxth.w	ip, r1
 8006da0:	44f4      	add	ip, lr
 8006da2:	0c08      	lsrs	r0, r1, #16
 8006da4:	4471      	add	r1, lr
 8006da6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006daa:	b289      	uxth	r1, r1
 8006dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006db0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006db4:	f846 1b04 	str.w	r1, [r6], #4
 8006db8:	e7dc      	b.n	8006d74 <__mdiff+0xd4>
 8006dba:	3f01      	subs	r7, #1
 8006dbc:	e7e6      	b.n	8006d8c <__mdiff+0xec>
 8006dbe:	bf00      	nop
 8006dc0:	0800aad4 	.word	0x0800aad4
 8006dc4:	0800aae5 	.word	0x0800aae5

08006dc8 <__ulp>:
 8006dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e04 <__ulp+0x3c>)
 8006dca:	400b      	ands	r3, r1
 8006dcc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	dc08      	bgt.n	8006de6 <__ulp+0x1e>
 8006dd4:	425b      	negs	r3, r3
 8006dd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006dda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006dde:	da04      	bge.n	8006dea <__ulp+0x22>
 8006de0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006de4:	4113      	asrs	r3, r2
 8006de6:	2200      	movs	r2, #0
 8006de8:	e008      	b.n	8006dfc <__ulp+0x34>
 8006dea:	f1a2 0314 	sub.w	r3, r2, #20
 8006dee:	2b1e      	cmp	r3, #30
 8006df0:	bfd6      	itet	le
 8006df2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006df6:	2201      	movgt	r2, #1
 8006df8:	40da      	lsrle	r2, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	7ff00000 	.word	0x7ff00000

08006e08 <__b2d>:
 8006e08:	6902      	ldr	r2, [r0, #16]
 8006e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0c:	f100 0614 	add.w	r6, r0, #20
 8006e10:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006e14:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006e18:	4f1e      	ldr	r7, [pc, #120]	@ (8006e94 <__b2d+0x8c>)
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f7ff fd54 	bl	80068c8 <__hi0bits>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f1c0 0020 	rsb	r0, r0, #32
 8006e26:	2b0a      	cmp	r3, #10
 8006e28:	f1a2 0504 	sub.w	r5, r2, #4
 8006e2c:	6008      	str	r0, [r1, #0]
 8006e2e:	dc12      	bgt.n	8006e56 <__b2d+0x4e>
 8006e30:	42ae      	cmp	r6, r5
 8006e32:	bf2c      	ite	cs
 8006e34:	2200      	movcs	r2, #0
 8006e36:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006e3a:	f1c3 0c0b 	rsb	ip, r3, #11
 8006e3e:	3315      	adds	r3, #21
 8006e40:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006e44:	fa04 f303 	lsl.w	r3, r4, r3
 8006e48:	fa22 f20c 	lsr.w	r2, r2, ip
 8006e4c:	ea4e 0107 	orr.w	r1, lr, r7
 8006e50:	431a      	orrs	r2, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e56:	42ae      	cmp	r6, r5
 8006e58:	bf36      	itet	cc
 8006e5a:	f1a2 0508 	subcc.w	r5, r2, #8
 8006e5e:	2200      	movcs	r2, #0
 8006e60:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006e64:	3b0b      	subs	r3, #11
 8006e66:	d012      	beq.n	8006e8e <__b2d+0x86>
 8006e68:	f1c3 0720 	rsb	r7, r3, #32
 8006e6c:	fa22 f107 	lsr.w	r1, r2, r7
 8006e70:	409c      	lsls	r4, r3
 8006e72:	430c      	orrs	r4, r1
 8006e74:	42b5      	cmp	r5, r6
 8006e76:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006e7a:	bf94      	ite	ls
 8006e7c:	2400      	movls	r4, #0
 8006e7e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006e82:	409a      	lsls	r2, r3
 8006e84:	40fc      	lsrs	r4, r7
 8006e86:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006e8a:	4322      	orrs	r2, r4
 8006e8c:	e7e1      	b.n	8006e52 <__b2d+0x4a>
 8006e8e:	ea44 0107 	orr.w	r1, r4, r7
 8006e92:	e7de      	b.n	8006e52 <__b2d+0x4a>
 8006e94:	3ff00000 	.word	0x3ff00000

08006e98 <__d2b>:
 8006e98:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	4690      	mov	r8, r2
 8006ea0:	4699      	mov	r9, r3
 8006ea2:	9e08      	ldr	r6, [sp, #32]
 8006ea4:	f7ff fc1e 	bl	80066e4 <_Balloc>
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	b930      	cbnz	r0, 8006eba <__d2b+0x22>
 8006eac:	4602      	mov	r2, r0
 8006eae:	f240 310f 	movw	r1, #783	@ 0x30f
 8006eb2:	4b23      	ldr	r3, [pc, #140]	@ (8006f40 <__d2b+0xa8>)
 8006eb4:	4823      	ldr	r0, [pc, #140]	@ (8006f44 <__d2b+0xac>)
 8006eb6:	f7fe fca7 	bl	8005808 <__assert_func>
 8006eba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ebe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ec2:	b10d      	cbz	r5, 8006ec8 <__d2b+0x30>
 8006ec4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	f1b8 0300 	subs.w	r3, r8, #0
 8006ece:	d024      	beq.n	8006f1a <__d2b+0x82>
 8006ed0:	4668      	mov	r0, sp
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	f7ff fd17 	bl	8006906 <__lo0bits>
 8006ed8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006edc:	b1d8      	cbz	r0, 8006f16 <__d2b+0x7e>
 8006ede:	f1c0 0320 	rsb	r3, r0, #32
 8006ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	40c2      	lsrs	r2, r0
 8006eea:	6163      	str	r3, [r4, #20]
 8006eec:	9201      	str	r2, [sp, #4]
 8006eee:	9b01      	ldr	r3, [sp, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2201      	moveq	r2, #1
 8006ef6:	2202      	movne	r2, #2
 8006ef8:	61a3      	str	r3, [r4, #24]
 8006efa:	6122      	str	r2, [r4, #16]
 8006efc:	b1ad      	cbz	r5, 8006f2a <__d2b+0x92>
 8006efe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f02:	4405      	add	r5, r0
 8006f04:	6035      	str	r5, [r6, #0]
 8006f06:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0c:	6018      	str	r0, [r3, #0]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	b002      	add	sp, #8
 8006f12:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006f16:	6161      	str	r1, [r4, #20]
 8006f18:	e7e9      	b.n	8006eee <__d2b+0x56>
 8006f1a:	a801      	add	r0, sp, #4
 8006f1c:	f7ff fcf3 	bl	8006906 <__lo0bits>
 8006f20:	9b01      	ldr	r3, [sp, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	6163      	str	r3, [r4, #20]
 8006f26:	3020      	adds	r0, #32
 8006f28:	e7e7      	b.n	8006efa <__d2b+0x62>
 8006f2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f32:	6030      	str	r0, [r6, #0]
 8006f34:	6918      	ldr	r0, [r3, #16]
 8006f36:	f7ff fcc7 	bl	80068c8 <__hi0bits>
 8006f3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f3e:	e7e4      	b.n	8006f0a <__d2b+0x72>
 8006f40:	0800aad4 	.word	0x0800aad4
 8006f44:	0800aae5 	.word	0x0800aae5

08006f48 <__ratio>:
 8006f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	b085      	sub	sp, #20
 8006f4e:	e9cd 1000 	strd	r1, r0, [sp]
 8006f52:	a902      	add	r1, sp, #8
 8006f54:	f7ff ff58 	bl	8006e08 <__b2d>
 8006f58:	468b      	mov	fp, r1
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	460f      	mov	r7, r1
 8006f5e:	9800      	ldr	r0, [sp, #0]
 8006f60:	a903      	add	r1, sp, #12
 8006f62:	f7ff ff51 	bl	8006e08 <__b2d>
 8006f66:	460d      	mov	r5, r1
 8006f68:	9b01      	ldr	r3, [sp, #4]
 8006f6a:	4689      	mov	r9, r1
 8006f6c:	6919      	ldr	r1, [r3, #16]
 8006f6e:	9b00      	ldr	r3, [sp, #0]
 8006f70:	4604      	mov	r4, r0
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	4630      	mov	r0, r6
 8006f76:	1ac9      	subs	r1, r1, r3
 8006f78:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bfcd      	iteet	gt
 8006f86:	463a      	movgt	r2, r7
 8006f88:	462a      	movle	r2, r5
 8006f8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f8e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006f92:	bfd8      	it	le
 8006f94:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006f98:	464b      	mov	r3, r9
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	4659      	mov	r1, fp
 8006f9e:	f7f9 fc79 	bl	8000894 <__aeabi_ddiv>
 8006fa2:	b005      	add	sp, #20
 8006fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fa8 <__copybits>:
 8006fa8:	3901      	subs	r1, #1
 8006faa:	b570      	push	{r4, r5, r6, lr}
 8006fac:	1149      	asrs	r1, r1, #5
 8006fae:	6914      	ldr	r4, [r2, #16]
 8006fb0:	3101      	adds	r1, #1
 8006fb2:	f102 0314 	add.w	r3, r2, #20
 8006fb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006fba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006fbe:	1f05      	subs	r5, r0, #4
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d30c      	bcc.n	8006fde <__copybits+0x36>
 8006fc4:	1aa3      	subs	r3, r4, r2
 8006fc6:	3b11      	subs	r3, #17
 8006fc8:	f023 0303 	bic.w	r3, r3, #3
 8006fcc:	3211      	adds	r2, #17
 8006fce:	42a2      	cmp	r2, r4
 8006fd0:	bf88      	it	hi
 8006fd2:	2300      	movhi	r3, #0
 8006fd4:	4418      	add	r0, r3
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	4288      	cmp	r0, r1
 8006fda:	d305      	bcc.n	8006fe8 <__copybits+0x40>
 8006fdc:	bd70      	pop	{r4, r5, r6, pc}
 8006fde:	f853 6b04 	ldr.w	r6, [r3], #4
 8006fe2:	f845 6f04 	str.w	r6, [r5, #4]!
 8006fe6:	e7eb      	b.n	8006fc0 <__copybits+0x18>
 8006fe8:	f840 3b04 	str.w	r3, [r0], #4
 8006fec:	e7f4      	b.n	8006fd8 <__copybits+0x30>

08006fee <__any_on>:
 8006fee:	f100 0214 	add.w	r2, r0, #20
 8006ff2:	6900      	ldr	r0, [r0, #16]
 8006ff4:	114b      	asrs	r3, r1, #5
 8006ff6:	4298      	cmp	r0, r3
 8006ff8:	b510      	push	{r4, lr}
 8006ffa:	db11      	blt.n	8007020 <__any_on+0x32>
 8006ffc:	dd0a      	ble.n	8007014 <__any_on+0x26>
 8006ffe:	f011 011f 	ands.w	r1, r1, #31
 8007002:	d007      	beq.n	8007014 <__any_on+0x26>
 8007004:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007008:	fa24 f001 	lsr.w	r0, r4, r1
 800700c:	fa00 f101 	lsl.w	r1, r0, r1
 8007010:	428c      	cmp	r4, r1
 8007012:	d10b      	bne.n	800702c <__any_on+0x3e>
 8007014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007018:	4293      	cmp	r3, r2
 800701a:	d803      	bhi.n	8007024 <__any_on+0x36>
 800701c:	2000      	movs	r0, #0
 800701e:	bd10      	pop	{r4, pc}
 8007020:	4603      	mov	r3, r0
 8007022:	e7f7      	b.n	8007014 <__any_on+0x26>
 8007024:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007028:	2900      	cmp	r1, #0
 800702a:	d0f5      	beq.n	8007018 <__any_on+0x2a>
 800702c:	2001      	movs	r0, #1
 800702e:	e7f6      	b.n	800701e <__any_on+0x30>

08007030 <sulp>:
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	460f      	mov	r7, r1
 8007036:	4690      	mov	r8, r2
 8007038:	f7ff fec6 	bl	8006dc8 <__ulp>
 800703c:	4604      	mov	r4, r0
 800703e:	460d      	mov	r5, r1
 8007040:	f1b8 0f00 	cmp.w	r8, #0
 8007044:	d011      	beq.n	800706a <sulp+0x3a>
 8007046:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800704a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800704e:	2b00      	cmp	r3, #0
 8007050:	dd0b      	ble.n	800706a <sulp+0x3a>
 8007052:	2400      	movs	r4, #0
 8007054:	051b      	lsls	r3, r3, #20
 8007056:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800705a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800705e:	4622      	mov	r2, r4
 8007060:	462b      	mov	r3, r5
 8007062:	f7f9 faed 	bl	8000640 <__aeabi_dmul>
 8007066:	4604      	mov	r4, r0
 8007068:	460d      	mov	r5, r1
 800706a:	4620      	mov	r0, r4
 800706c:	4629      	mov	r1, r5
 800706e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007072:	0000      	movs	r0, r0
 8007074:	0000      	movs	r0, r0
	...

08007078 <_strtod_l>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	b09f      	sub	sp, #124	@ 0x7c
 800707e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007080:	2200      	movs	r2, #0
 8007082:	460c      	mov	r4, r1
 8007084:	921a      	str	r2, [sp, #104]	@ 0x68
 8007086:	f04f 0a00 	mov.w	sl, #0
 800708a:	f04f 0b00 	mov.w	fp, #0
 800708e:	460a      	mov	r2, r1
 8007090:	9005      	str	r0, [sp, #20]
 8007092:	9219      	str	r2, [sp, #100]	@ 0x64
 8007094:	7811      	ldrb	r1, [r2, #0]
 8007096:	292b      	cmp	r1, #43	@ 0x2b
 8007098:	d048      	beq.n	800712c <_strtod_l+0xb4>
 800709a:	d836      	bhi.n	800710a <_strtod_l+0x92>
 800709c:	290d      	cmp	r1, #13
 800709e:	d830      	bhi.n	8007102 <_strtod_l+0x8a>
 80070a0:	2908      	cmp	r1, #8
 80070a2:	d830      	bhi.n	8007106 <_strtod_l+0x8e>
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d039      	beq.n	800711c <_strtod_l+0xa4>
 80070a8:	2200      	movs	r2, #0
 80070aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80070ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80070ae:	782a      	ldrb	r2, [r5, #0]
 80070b0:	2a30      	cmp	r2, #48	@ 0x30
 80070b2:	f040 80b1 	bne.w	8007218 <_strtod_l+0x1a0>
 80070b6:	786a      	ldrb	r2, [r5, #1]
 80070b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070bc:	2a58      	cmp	r2, #88	@ 0x58
 80070be:	d16c      	bne.n	800719a <_strtod_l+0x122>
 80070c0:	9302      	str	r3, [sp, #8]
 80070c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007300 <_strtod_l+0x288>)
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	ab1a      	add	r3, sp, #104	@ 0x68
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	9805      	ldr	r0, [sp, #20]
 80070ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80070d0:	a919      	add	r1, sp, #100	@ 0x64
 80070d2:	f001 f887 	bl	80081e4 <__gethex>
 80070d6:	f010 060f 	ands.w	r6, r0, #15
 80070da:	4604      	mov	r4, r0
 80070dc:	d005      	beq.n	80070ea <_strtod_l+0x72>
 80070de:	2e06      	cmp	r6, #6
 80070e0:	d126      	bne.n	8007130 <_strtod_l+0xb8>
 80070e2:	2300      	movs	r3, #0
 80070e4:	3501      	adds	r5, #1
 80070e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80070e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 8584 	bne.w	8007bfa <_strtod_l+0xb82>
 80070f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070f4:	b1bb      	cbz	r3, 8007126 <_strtod_l+0xae>
 80070f6:	4650      	mov	r0, sl
 80070f8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80070fc:	b01f      	add	sp, #124	@ 0x7c
 80070fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007102:	2920      	cmp	r1, #32
 8007104:	d1d0      	bne.n	80070a8 <_strtod_l+0x30>
 8007106:	3201      	adds	r2, #1
 8007108:	e7c3      	b.n	8007092 <_strtod_l+0x1a>
 800710a:	292d      	cmp	r1, #45	@ 0x2d
 800710c:	d1cc      	bne.n	80070a8 <_strtod_l+0x30>
 800710e:	2101      	movs	r1, #1
 8007110:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007112:	1c51      	adds	r1, r2, #1
 8007114:	9119      	str	r1, [sp, #100]	@ 0x64
 8007116:	7852      	ldrb	r2, [r2, #1]
 8007118:	2a00      	cmp	r2, #0
 800711a:	d1c7      	bne.n	80070ac <_strtod_l+0x34>
 800711c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800711e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007120:	2b00      	cmp	r3, #0
 8007122:	f040 8568 	bne.w	8007bf6 <_strtod_l+0xb7e>
 8007126:	4650      	mov	r0, sl
 8007128:	4659      	mov	r1, fp
 800712a:	e7e7      	b.n	80070fc <_strtod_l+0x84>
 800712c:	2100      	movs	r1, #0
 800712e:	e7ef      	b.n	8007110 <_strtod_l+0x98>
 8007130:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007132:	b13a      	cbz	r2, 8007144 <_strtod_l+0xcc>
 8007134:	2135      	movs	r1, #53	@ 0x35
 8007136:	a81c      	add	r0, sp, #112	@ 0x70
 8007138:	f7ff ff36 	bl	8006fa8 <__copybits>
 800713c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800713e:	9805      	ldr	r0, [sp, #20]
 8007140:	f7ff fb10 	bl	8006764 <_Bfree>
 8007144:	3e01      	subs	r6, #1
 8007146:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007148:	2e04      	cmp	r6, #4
 800714a:	d806      	bhi.n	800715a <_strtod_l+0xe2>
 800714c:	e8df f006 	tbb	[pc, r6]
 8007150:	201d0314 	.word	0x201d0314
 8007154:	14          	.byte	0x14
 8007155:	00          	.byte	0x00
 8007156:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800715a:	05e1      	lsls	r1, r4, #23
 800715c:	bf48      	it	mi
 800715e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007162:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007166:	0d1b      	lsrs	r3, r3, #20
 8007168:	051b      	lsls	r3, r3, #20
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1bd      	bne.n	80070ea <_strtod_l+0x72>
 800716e:	f7fe faf5 	bl	800575c <__errno>
 8007172:	2322      	movs	r3, #34	@ 0x22
 8007174:	6003      	str	r3, [r0, #0]
 8007176:	e7b8      	b.n	80070ea <_strtod_l+0x72>
 8007178:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800717c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007180:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007184:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007188:	e7e7      	b.n	800715a <_strtod_l+0xe2>
 800718a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007304 <_strtod_l+0x28c>
 800718e:	e7e4      	b.n	800715a <_strtod_l+0xe2>
 8007190:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007194:	f04f 3aff 	mov.w	sl, #4294967295
 8007198:	e7df      	b.n	800715a <_strtod_l+0xe2>
 800719a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	9219      	str	r2, [sp, #100]	@ 0x64
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b30      	cmp	r3, #48	@ 0x30
 80071a4:	d0f9      	beq.n	800719a <_strtod_l+0x122>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d09f      	beq.n	80070ea <_strtod_l+0x72>
 80071aa:	2301      	movs	r3, #1
 80071ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071b0:	220a      	movs	r2, #10
 80071b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80071b4:	2300      	movs	r3, #0
 80071b6:	461f      	mov	r7, r3
 80071b8:	9308      	str	r3, [sp, #32]
 80071ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80071bc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80071be:	7805      	ldrb	r5, [r0, #0]
 80071c0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80071c4:	b2d9      	uxtb	r1, r3
 80071c6:	2909      	cmp	r1, #9
 80071c8:	d928      	bls.n	800721c <_strtod_l+0x1a4>
 80071ca:	2201      	movs	r2, #1
 80071cc:	494e      	ldr	r1, [pc, #312]	@ (8007308 <_strtod_l+0x290>)
 80071ce:	f000 ff5d 	bl	800808c <strncmp>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d032      	beq.n	800723c <_strtod_l+0x1c4>
 80071d6:	2000      	movs	r0, #0
 80071d8:	462a      	mov	r2, r5
 80071da:	4681      	mov	r9, r0
 80071dc:	463d      	mov	r5, r7
 80071de:	4603      	mov	r3, r0
 80071e0:	2a65      	cmp	r2, #101	@ 0x65
 80071e2:	d001      	beq.n	80071e8 <_strtod_l+0x170>
 80071e4:	2a45      	cmp	r2, #69	@ 0x45
 80071e6:	d114      	bne.n	8007212 <_strtod_l+0x19a>
 80071e8:	b91d      	cbnz	r5, 80071f2 <_strtod_l+0x17a>
 80071ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071ec:	4302      	orrs	r2, r0
 80071ee:	d095      	beq.n	800711c <_strtod_l+0xa4>
 80071f0:	2500      	movs	r5, #0
 80071f2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80071f4:	1c62      	adds	r2, r4, #1
 80071f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80071f8:	7862      	ldrb	r2, [r4, #1]
 80071fa:	2a2b      	cmp	r2, #43	@ 0x2b
 80071fc:	d077      	beq.n	80072ee <_strtod_l+0x276>
 80071fe:	2a2d      	cmp	r2, #45	@ 0x2d
 8007200:	d07b      	beq.n	80072fa <_strtod_l+0x282>
 8007202:	f04f 0c00 	mov.w	ip, #0
 8007206:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800720a:	2909      	cmp	r1, #9
 800720c:	f240 8082 	bls.w	8007314 <_strtod_l+0x29c>
 8007210:	9419      	str	r4, [sp, #100]	@ 0x64
 8007212:	f04f 0800 	mov.w	r8, #0
 8007216:	e0a2      	b.n	800735e <_strtod_l+0x2e6>
 8007218:	2300      	movs	r3, #0
 800721a:	e7c7      	b.n	80071ac <_strtod_l+0x134>
 800721c:	2f08      	cmp	r7, #8
 800721e:	bfd5      	itete	le
 8007220:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007222:	9908      	ldrgt	r1, [sp, #32]
 8007224:	fb02 3301 	mlale	r3, r2, r1, r3
 8007228:	fb02 3301 	mlagt	r3, r2, r1, r3
 800722c:	f100 0001 	add.w	r0, r0, #1
 8007230:	bfd4      	ite	le
 8007232:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007234:	9308      	strgt	r3, [sp, #32]
 8007236:	3701      	adds	r7, #1
 8007238:	9019      	str	r0, [sp, #100]	@ 0x64
 800723a:	e7bf      	b.n	80071bc <_strtod_l+0x144>
 800723c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	9219      	str	r2, [sp, #100]	@ 0x64
 8007242:	785a      	ldrb	r2, [r3, #1]
 8007244:	b37f      	cbz	r7, 80072a6 <_strtod_l+0x22e>
 8007246:	4681      	mov	r9, r0
 8007248:	463d      	mov	r5, r7
 800724a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800724e:	2b09      	cmp	r3, #9
 8007250:	d912      	bls.n	8007278 <_strtod_l+0x200>
 8007252:	2301      	movs	r3, #1
 8007254:	e7c4      	b.n	80071e0 <_strtod_l+0x168>
 8007256:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007258:	3001      	adds	r0, #1
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	9219      	str	r2, [sp, #100]	@ 0x64
 800725e:	785a      	ldrb	r2, [r3, #1]
 8007260:	2a30      	cmp	r2, #48	@ 0x30
 8007262:	d0f8      	beq.n	8007256 <_strtod_l+0x1de>
 8007264:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007268:	2b08      	cmp	r3, #8
 800726a:	f200 84cb 	bhi.w	8007c04 <_strtod_l+0xb8c>
 800726e:	4681      	mov	r9, r0
 8007270:	2000      	movs	r0, #0
 8007272:	4605      	mov	r5, r0
 8007274:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007276:	930c      	str	r3, [sp, #48]	@ 0x30
 8007278:	3a30      	subs	r2, #48	@ 0x30
 800727a:	f100 0301 	add.w	r3, r0, #1
 800727e:	d02a      	beq.n	80072d6 <_strtod_l+0x25e>
 8007280:	4499      	add	r9, r3
 8007282:	210a      	movs	r1, #10
 8007284:	462b      	mov	r3, r5
 8007286:	eb00 0c05 	add.w	ip, r0, r5
 800728a:	4563      	cmp	r3, ip
 800728c:	d10d      	bne.n	80072aa <_strtod_l+0x232>
 800728e:	1c69      	adds	r1, r5, #1
 8007290:	4401      	add	r1, r0
 8007292:	4428      	add	r0, r5
 8007294:	2808      	cmp	r0, #8
 8007296:	dc16      	bgt.n	80072c6 <_strtod_l+0x24e>
 8007298:	230a      	movs	r3, #10
 800729a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800729c:	fb03 2300 	mla	r3, r3, r0, r2
 80072a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072a2:	2300      	movs	r3, #0
 80072a4:	e018      	b.n	80072d8 <_strtod_l+0x260>
 80072a6:	4638      	mov	r0, r7
 80072a8:	e7da      	b.n	8007260 <_strtod_l+0x1e8>
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	f103 0301 	add.w	r3, r3, #1
 80072b0:	dc03      	bgt.n	80072ba <_strtod_l+0x242>
 80072b2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80072b4:	434e      	muls	r6, r1
 80072b6:	960a      	str	r6, [sp, #40]	@ 0x28
 80072b8:	e7e7      	b.n	800728a <_strtod_l+0x212>
 80072ba:	2b10      	cmp	r3, #16
 80072bc:	bfde      	ittt	le
 80072be:	9e08      	ldrle	r6, [sp, #32]
 80072c0:	434e      	mulle	r6, r1
 80072c2:	9608      	strle	r6, [sp, #32]
 80072c4:	e7e1      	b.n	800728a <_strtod_l+0x212>
 80072c6:	280f      	cmp	r0, #15
 80072c8:	dceb      	bgt.n	80072a2 <_strtod_l+0x22a>
 80072ca:	230a      	movs	r3, #10
 80072cc:	9808      	ldr	r0, [sp, #32]
 80072ce:	fb03 2300 	mla	r3, r3, r0, r2
 80072d2:	9308      	str	r3, [sp, #32]
 80072d4:	e7e5      	b.n	80072a2 <_strtod_l+0x22a>
 80072d6:	4629      	mov	r1, r5
 80072d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072da:	460d      	mov	r5, r1
 80072dc:	1c50      	adds	r0, r2, #1
 80072de:	9019      	str	r0, [sp, #100]	@ 0x64
 80072e0:	7852      	ldrb	r2, [r2, #1]
 80072e2:	4618      	mov	r0, r3
 80072e4:	e7b1      	b.n	800724a <_strtod_l+0x1d2>
 80072e6:	f04f 0900 	mov.w	r9, #0
 80072ea:	2301      	movs	r3, #1
 80072ec:	e77d      	b.n	80071ea <_strtod_l+0x172>
 80072ee:	f04f 0c00 	mov.w	ip, #0
 80072f2:	1ca2      	adds	r2, r4, #2
 80072f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80072f6:	78a2      	ldrb	r2, [r4, #2]
 80072f8:	e785      	b.n	8007206 <_strtod_l+0x18e>
 80072fa:	f04f 0c01 	mov.w	ip, #1
 80072fe:	e7f8      	b.n	80072f2 <_strtod_l+0x27a>
 8007300:	0800ac54 	.word	0x0800ac54
 8007304:	7ff00000 	.word	0x7ff00000
 8007308:	08008da5 	.word	0x08008da5
 800730c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800730e:	1c51      	adds	r1, r2, #1
 8007310:	9119      	str	r1, [sp, #100]	@ 0x64
 8007312:	7852      	ldrb	r2, [r2, #1]
 8007314:	2a30      	cmp	r2, #48	@ 0x30
 8007316:	d0f9      	beq.n	800730c <_strtod_l+0x294>
 8007318:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800731c:	2908      	cmp	r1, #8
 800731e:	f63f af78 	bhi.w	8007212 <_strtod_l+0x19a>
 8007322:	f04f 080a 	mov.w	r8, #10
 8007326:	3a30      	subs	r2, #48	@ 0x30
 8007328:	920e      	str	r2, [sp, #56]	@ 0x38
 800732a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800732c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800732e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007330:	1c56      	adds	r6, r2, #1
 8007332:	9619      	str	r6, [sp, #100]	@ 0x64
 8007334:	7852      	ldrb	r2, [r2, #1]
 8007336:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800733a:	f1be 0f09 	cmp.w	lr, #9
 800733e:	d939      	bls.n	80073b4 <_strtod_l+0x33c>
 8007340:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007342:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007346:	1a76      	subs	r6, r6, r1
 8007348:	2e08      	cmp	r6, #8
 800734a:	dc03      	bgt.n	8007354 <_strtod_l+0x2dc>
 800734c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800734e:	4588      	cmp	r8, r1
 8007350:	bfa8      	it	ge
 8007352:	4688      	movge	r8, r1
 8007354:	f1bc 0f00 	cmp.w	ip, #0
 8007358:	d001      	beq.n	800735e <_strtod_l+0x2e6>
 800735a:	f1c8 0800 	rsb	r8, r8, #0
 800735e:	2d00      	cmp	r5, #0
 8007360:	d14e      	bne.n	8007400 <_strtod_l+0x388>
 8007362:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007364:	4308      	orrs	r0, r1
 8007366:	f47f aec0 	bne.w	80070ea <_strtod_l+0x72>
 800736a:	2b00      	cmp	r3, #0
 800736c:	f47f aed6 	bne.w	800711c <_strtod_l+0xa4>
 8007370:	2a69      	cmp	r2, #105	@ 0x69
 8007372:	d028      	beq.n	80073c6 <_strtod_l+0x34e>
 8007374:	dc25      	bgt.n	80073c2 <_strtod_l+0x34a>
 8007376:	2a49      	cmp	r2, #73	@ 0x49
 8007378:	d025      	beq.n	80073c6 <_strtod_l+0x34e>
 800737a:	2a4e      	cmp	r2, #78	@ 0x4e
 800737c:	f47f aece 	bne.w	800711c <_strtod_l+0xa4>
 8007380:	499a      	ldr	r1, [pc, #616]	@ (80075ec <_strtod_l+0x574>)
 8007382:	a819      	add	r0, sp, #100	@ 0x64
 8007384:	f001 f950 	bl	8008628 <__match>
 8007388:	2800      	cmp	r0, #0
 800738a:	f43f aec7 	beq.w	800711c <_strtod_l+0xa4>
 800738e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b28      	cmp	r3, #40	@ 0x28
 8007394:	d12e      	bne.n	80073f4 <_strtod_l+0x37c>
 8007396:	4996      	ldr	r1, [pc, #600]	@ (80075f0 <_strtod_l+0x578>)
 8007398:	aa1c      	add	r2, sp, #112	@ 0x70
 800739a:	a819      	add	r0, sp, #100	@ 0x64
 800739c:	f001 f958 	bl	8008650 <__hexnan>
 80073a0:	2805      	cmp	r0, #5
 80073a2:	d127      	bne.n	80073f4 <_strtod_l+0x37c>
 80073a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80073a6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80073aa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80073ae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80073b2:	e69a      	b.n	80070ea <_strtod_l+0x72>
 80073b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80073b6:	fb08 2101 	mla	r1, r8, r1, r2
 80073ba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80073be:	920e      	str	r2, [sp, #56]	@ 0x38
 80073c0:	e7b5      	b.n	800732e <_strtod_l+0x2b6>
 80073c2:	2a6e      	cmp	r2, #110	@ 0x6e
 80073c4:	e7da      	b.n	800737c <_strtod_l+0x304>
 80073c6:	498b      	ldr	r1, [pc, #556]	@ (80075f4 <_strtod_l+0x57c>)
 80073c8:	a819      	add	r0, sp, #100	@ 0x64
 80073ca:	f001 f92d 	bl	8008628 <__match>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	f43f aea4 	beq.w	800711c <_strtod_l+0xa4>
 80073d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073d6:	4988      	ldr	r1, [pc, #544]	@ (80075f8 <_strtod_l+0x580>)
 80073d8:	3b01      	subs	r3, #1
 80073da:	a819      	add	r0, sp, #100	@ 0x64
 80073dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80073de:	f001 f923 	bl	8008628 <__match>
 80073e2:	b910      	cbnz	r0, 80073ea <_strtod_l+0x372>
 80073e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073e6:	3301      	adds	r3, #1
 80073e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80073ea:	f04f 0a00 	mov.w	sl, #0
 80073ee:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80075fc <_strtod_l+0x584>
 80073f2:	e67a      	b.n	80070ea <_strtod_l+0x72>
 80073f4:	4882      	ldr	r0, [pc, #520]	@ (8007600 <_strtod_l+0x588>)
 80073f6:	f000 fe6b 	bl	80080d0 <nan>
 80073fa:	4682      	mov	sl, r0
 80073fc:	468b      	mov	fp, r1
 80073fe:	e674      	b.n	80070ea <_strtod_l+0x72>
 8007400:	eba8 0309 	sub.w	r3, r8, r9
 8007404:	2f00      	cmp	r7, #0
 8007406:	bf08      	it	eq
 8007408:	462f      	moveq	r7, r5
 800740a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800740c:	2d10      	cmp	r5, #16
 800740e:	462c      	mov	r4, r5
 8007410:	9309      	str	r3, [sp, #36]	@ 0x24
 8007412:	bfa8      	it	ge
 8007414:	2410      	movge	r4, #16
 8007416:	f7f9 f899 	bl	800054c <__aeabi_ui2d>
 800741a:	2d09      	cmp	r5, #9
 800741c:	4682      	mov	sl, r0
 800741e:	468b      	mov	fp, r1
 8007420:	dc11      	bgt.n	8007446 <_strtod_l+0x3ce>
 8007422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	f43f ae60 	beq.w	80070ea <_strtod_l+0x72>
 800742a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742c:	dd76      	ble.n	800751c <_strtod_l+0x4a4>
 800742e:	2b16      	cmp	r3, #22
 8007430:	dc5d      	bgt.n	80074ee <_strtod_l+0x476>
 8007432:	4974      	ldr	r1, [pc, #464]	@ (8007604 <_strtod_l+0x58c>)
 8007434:	4652      	mov	r2, sl
 8007436:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800743a:	465b      	mov	r3, fp
 800743c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007440:	f7f9 f8fe 	bl	8000640 <__aeabi_dmul>
 8007444:	e7d9      	b.n	80073fa <_strtod_l+0x382>
 8007446:	4b6f      	ldr	r3, [pc, #444]	@ (8007604 <_strtod_l+0x58c>)
 8007448:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800744c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007450:	f7f9 f8f6 	bl	8000640 <__aeabi_dmul>
 8007454:	4682      	mov	sl, r0
 8007456:	9808      	ldr	r0, [sp, #32]
 8007458:	468b      	mov	fp, r1
 800745a:	f7f9 f877 	bl	800054c <__aeabi_ui2d>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4650      	mov	r0, sl
 8007464:	4659      	mov	r1, fp
 8007466:	f7f8 ff35 	bl	80002d4 <__adddf3>
 800746a:	2d0f      	cmp	r5, #15
 800746c:	4682      	mov	sl, r0
 800746e:	468b      	mov	fp, r1
 8007470:	ddd7      	ble.n	8007422 <_strtod_l+0x3aa>
 8007472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007474:	1b2c      	subs	r4, r5, r4
 8007476:	441c      	add	r4, r3
 8007478:	2c00      	cmp	r4, #0
 800747a:	f340 8096 	ble.w	80075aa <_strtod_l+0x532>
 800747e:	f014 030f 	ands.w	r3, r4, #15
 8007482:	d00a      	beq.n	800749a <_strtod_l+0x422>
 8007484:	495f      	ldr	r1, [pc, #380]	@ (8007604 <_strtod_l+0x58c>)
 8007486:	4652      	mov	r2, sl
 8007488:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800748c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007490:	465b      	mov	r3, fp
 8007492:	f7f9 f8d5 	bl	8000640 <__aeabi_dmul>
 8007496:	4682      	mov	sl, r0
 8007498:	468b      	mov	fp, r1
 800749a:	f034 040f 	bics.w	r4, r4, #15
 800749e:	d073      	beq.n	8007588 <_strtod_l+0x510>
 80074a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80074a4:	dd48      	ble.n	8007538 <_strtod_l+0x4c0>
 80074a6:	2400      	movs	r4, #0
 80074a8:	46a0      	mov	r8, r4
 80074aa:	46a1      	mov	r9, r4
 80074ac:	940a      	str	r4, [sp, #40]	@ 0x28
 80074ae:	2322      	movs	r3, #34	@ 0x22
 80074b0:	f04f 0a00 	mov.w	sl, #0
 80074b4:	9a05      	ldr	r2, [sp, #20]
 80074b6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80075fc <_strtod_l+0x584>
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f43f ae13 	beq.w	80070ea <_strtod_l+0x72>
 80074c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074c6:	9805      	ldr	r0, [sp, #20]
 80074c8:	f7ff f94c 	bl	8006764 <_Bfree>
 80074cc:	4649      	mov	r1, r9
 80074ce:	9805      	ldr	r0, [sp, #20]
 80074d0:	f7ff f948 	bl	8006764 <_Bfree>
 80074d4:	4641      	mov	r1, r8
 80074d6:	9805      	ldr	r0, [sp, #20]
 80074d8:	f7ff f944 	bl	8006764 <_Bfree>
 80074dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074de:	9805      	ldr	r0, [sp, #20]
 80074e0:	f7ff f940 	bl	8006764 <_Bfree>
 80074e4:	4621      	mov	r1, r4
 80074e6:	9805      	ldr	r0, [sp, #20]
 80074e8:	f7ff f93c 	bl	8006764 <_Bfree>
 80074ec:	e5fd      	b.n	80070ea <_strtod_l+0x72>
 80074ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80074f4:	4293      	cmp	r3, r2
 80074f6:	dbbc      	blt.n	8007472 <_strtod_l+0x3fa>
 80074f8:	4c42      	ldr	r4, [pc, #264]	@ (8007604 <_strtod_l+0x58c>)
 80074fa:	f1c5 050f 	rsb	r5, r5, #15
 80074fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007502:	4652      	mov	r2, sl
 8007504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007508:	465b      	mov	r3, fp
 800750a:	f7f9 f899 	bl	8000640 <__aeabi_dmul>
 800750e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007510:	1b5d      	subs	r5, r3, r5
 8007512:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007516:	e9d4 2300 	ldrd	r2, r3, [r4]
 800751a:	e791      	b.n	8007440 <_strtod_l+0x3c8>
 800751c:	3316      	adds	r3, #22
 800751e:	dba8      	blt.n	8007472 <_strtod_l+0x3fa>
 8007520:	4b38      	ldr	r3, [pc, #224]	@ (8007604 <_strtod_l+0x58c>)
 8007522:	eba9 0808 	sub.w	r8, r9, r8
 8007526:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800752a:	4650      	mov	r0, sl
 800752c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007530:	4659      	mov	r1, fp
 8007532:	f7f9 f9af 	bl	8000894 <__aeabi_ddiv>
 8007536:	e760      	b.n	80073fa <_strtod_l+0x382>
 8007538:	4b33      	ldr	r3, [pc, #204]	@ (8007608 <_strtod_l+0x590>)
 800753a:	4650      	mov	r0, sl
 800753c:	9308      	str	r3, [sp, #32]
 800753e:	2300      	movs	r3, #0
 8007540:	4659      	mov	r1, fp
 8007542:	461e      	mov	r6, r3
 8007544:	1124      	asrs	r4, r4, #4
 8007546:	2c01      	cmp	r4, #1
 8007548:	dc21      	bgt.n	800758e <_strtod_l+0x516>
 800754a:	b10b      	cbz	r3, 8007550 <_strtod_l+0x4d8>
 800754c:	4682      	mov	sl, r0
 800754e:	468b      	mov	fp, r1
 8007550:	492d      	ldr	r1, [pc, #180]	@ (8007608 <_strtod_l+0x590>)
 8007552:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007556:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800755a:	4652      	mov	r2, sl
 800755c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007560:	465b      	mov	r3, fp
 8007562:	f7f9 f86d 	bl	8000640 <__aeabi_dmul>
 8007566:	4b25      	ldr	r3, [pc, #148]	@ (80075fc <_strtod_l+0x584>)
 8007568:	460a      	mov	r2, r1
 800756a:	400b      	ands	r3, r1
 800756c:	4927      	ldr	r1, [pc, #156]	@ (800760c <_strtod_l+0x594>)
 800756e:	4682      	mov	sl, r0
 8007570:	428b      	cmp	r3, r1
 8007572:	d898      	bhi.n	80074a6 <_strtod_l+0x42e>
 8007574:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007578:	428b      	cmp	r3, r1
 800757a:	bf86      	itte	hi
 800757c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007580:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007610 <_strtod_l+0x598>
 8007584:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007588:	2300      	movs	r3, #0
 800758a:	9308      	str	r3, [sp, #32]
 800758c:	e07a      	b.n	8007684 <_strtod_l+0x60c>
 800758e:	07e2      	lsls	r2, r4, #31
 8007590:	d505      	bpl.n	800759e <_strtod_l+0x526>
 8007592:	9b08      	ldr	r3, [sp, #32]
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f9 f852 	bl	8000640 <__aeabi_dmul>
 800759c:	2301      	movs	r3, #1
 800759e:	9a08      	ldr	r2, [sp, #32]
 80075a0:	3601      	adds	r6, #1
 80075a2:	3208      	adds	r2, #8
 80075a4:	1064      	asrs	r4, r4, #1
 80075a6:	9208      	str	r2, [sp, #32]
 80075a8:	e7cd      	b.n	8007546 <_strtod_l+0x4ce>
 80075aa:	d0ed      	beq.n	8007588 <_strtod_l+0x510>
 80075ac:	4264      	negs	r4, r4
 80075ae:	f014 020f 	ands.w	r2, r4, #15
 80075b2:	d00a      	beq.n	80075ca <_strtod_l+0x552>
 80075b4:	4b13      	ldr	r3, [pc, #76]	@ (8007604 <_strtod_l+0x58c>)
 80075b6:	4650      	mov	r0, sl
 80075b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075bc:	4659      	mov	r1, fp
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	f7f9 f967 	bl	8000894 <__aeabi_ddiv>
 80075c6:	4682      	mov	sl, r0
 80075c8:	468b      	mov	fp, r1
 80075ca:	1124      	asrs	r4, r4, #4
 80075cc:	d0dc      	beq.n	8007588 <_strtod_l+0x510>
 80075ce:	2c1f      	cmp	r4, #31
 80075d0:	dd20      	ble.n	8007614 <_strtod_l+0x59c>
 80075d2:	2400      	movs	r4, #0
 80075d4:	46a0      	mov	r8, r4
 80075d6:	46a1      	mov	r9, r4
 80075d8:	940a      	str	r4, [sp, #40]	@ 0x28
 80075da:	2322      	movs	r3, #34	@ 0x22
 80075dc:	9a05      	ldr	r2, [sp, #20]
 80075de:	f04f 0a00 	mov.w	sl, #0
 80075e2:	f04f 0b00 	mov.w	fp, #0
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	e768      	b.n	80074bc <_strtod_l+0x444>
 80075ea:	bf00      	nop
 80075ec:	0800a9f2 	.word	0x0800a9f2
 80075f0:	0800ac40 	.word	0x0800ac40
 80075f4:	0800a9ea 	.word	0x0800a9ea
 80075f8:	0800aa5b 	.word	0x0800aa5b
 80075fc:	7ff00000 	.word	0x7ff00000
 8007600:	08008de6 	.word	0x08008de6
 8007604:	0800ab78 	.word	0x0800ab78
 8007608:	0800ab50 	.word	0x0800ab50
 800760c:	7ca00000 	.word	0x7ca00000
 8007610:	7fefffff 	.word	0x7fefffff
 8007614:	f014 0310 	ands.w	r3, r4, #16
 8007618:	bf18      	it	ne
 800761a:	236a      	movne	r3, #106	@ 0x6a
 800761c:	4650      	mov	r0, sl
 800761e:	9308      	str	r3, [sp, #32]
 8007620:	4659      	mov	r1, fp
 8007622:	2300      	movs	r3, #0
 8007624:	4ea9      	ldr	r6, [pc, #676]	@ (80078cc <_strtod_l+0x854>)
 8007626:	07e2      	lsls	r2, r4, #31
 8007628:	d504      	bpl.n	8007634 <_strtod_l+0x5bc>
 800762a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800762e:	f7f9 f807 	bl	8000640 <__aeabi_dmul>
 8007632:	2301      	movs	r3, #1
 8007634:	1064      	asrs	r4, r4, #1
 8007636:	f106 0608 	add.w	r6, r6, #8
 800763a:	d1f4      	bne.n	8007626 <_strtod_l+0x5ae>
 800763c:	b10b      	cbz	r3, 8007642 <_strtod_l+0x5ca>
 800763e:	4682      	mov	sl, r0
 8007640:	468b      	mov	fp, r1
 8007642:	9b08      	ldr	r3, [sp, #32]
 8007644:	b1b3      	cbz	r3, 8007674 <_strtod_l+0x5fc>
 8007646:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800764a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800764e:	2b00      	cmp	r3, #0
 8007650:	4659      	mov	r1, fp
 8007652:	dd0f      	ble.n	8007674 <_strtod_l+0x5fc>
 8007654:	2b1f      	cmp	r3, #31
 8007656:	dd57      	ble.n	8007708 <_strtod_l+0x690>
 8007658:	2b34      	cmp	r3, #52	@ 0x34
 800765a:	bfd8      	it	le
 800765c:	f04f 33ff 	movle.w	r3, #4294967295
 8007660:	f04f 0a00 	mov.w	sl, #0
 8007664:	bfcf      	iteee	gt
 8007666:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800766a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800766e:	4093      	lslle	r3, r2
 8007670:	ea03 0b01 	andle.w	fp, r3, r1
 8007674:	2200      	movs	r2, #0
 8007676:	2300      	movs	r3, #0
 8007678:	4650      	mov	r0, sl
 800767a:	4659      	mov	r1, fp
 800767c:	f7f9 fa48 	bl	8000b10 <__aeabi_dcmpeq>
 8007680:	2800      	cmp	r0, #0
 8007682:	d1a6      	bne.n	80075d2 <_strtod_l+0x55a>
 8007684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007686:	463a      	mov	r2, r7
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800768c:	462b      	mov	r3, r5
 800768e:	9805      	ldr	r0, [sp, #20]
 8007690:	f7ff f8d0 	bl	8006834 <__s2b>
 8007694:	900a      	str	r0, [sp, #40]	@ 0x28
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f af05 	beq.w	80074a6 <_strtod_l+0x42e>
 800769c:	2400      	movs	r4, #0
 800769e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076a0:	eba9 0308 	sub.w	r3, r9, r8
 80076a4:	2a00      	cmp	r2, #0
 80076a6:	bfa8      	it	ge
 80076a8:	2300      	movge	r3, #0
 80076aa:	46a0      	mov	r8, r4
 80076ac:	9312      	str	r3, [sp, #72]	@ 0x48
 80076ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80076b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b6:	9805      	ldr	r0, [sp, #20]
 80076b8:	6859      	ldr	r1, [r3, #4]
 80076ba:	f7ff f813 	bl	80066e4 <_Balloc>
 80076be:	4681      	mov	r9, r0
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f43f aef4 	beq.w	80074ae <_strtod_l+0x436>
 80076c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076c8:	300c      	adds	r0, #12
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	f103 010c 	add.w	r1, r3, #12
 80076d0:	3202      	adds	r2, #2
 80076d2:	0092      	lsls	r2, r2, #2
 80076d4:	f7fe f885 	bl	80057e2 <memcpy>
 80076d8:	ab1c      	add	r3, sp, #112	@ 0x70
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	4652      	mov	r2, sl
 80076e2:	465b      	mov	r3, fp
 80076e4:	9805      	ldr	r0, [sp, #20]
 80076e6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80076ea:	f7ff fbd5 	bl	8006e98 <__d2b>
 80076ee:	901a      	str	r0, [sp, #104]	@ 0x68
 80076f0:	2800      	cmp	r0, #0
 80076f2:	f43f aedc 	beq.w	80074ae <_strtod_l+0x436>
 80076f6:	2101      	movs	r1, #1
 80076f8:	9805      	ldr	r0, [sp, #20]
 80076fa:	f7ff f931 	bl	8006960 <__i2b>
 80076fe:	4680      	mov	r8, r0
 8007700:	b948      	cbnz	r0, 8007716 <_strtod_l+0x69e>
 8007702:	f04f 0800 	mov.w	r8, #0
 8007706:	e6d2      	b.n	80074ae <_strtod_l+0x436>
 8007708:	f04f 32ff 	mov.w	r2, #4294967295
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	ea03 0a0a 	and.w	sl, r3, sl
 8007714:	e7ae      	b.n	8007674 <_strtod_l+0x5fc>
 8007716:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007718:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800771a:	2d00      	cmp	r5, #0
 800771c:	bfab      	itete	ge
 800771e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007720:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007722:	18ef      	addge	r7, r5, r3
 8007724:	1b5e      	sublt	r6, r3, r5
 8007726:	9b08      	ldr	r3, [sp, #32]
 8007728:	bfa8      	it	ge
 800772a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800772c:	eba5 0503 	sub.w	r5, r5, r3
 8007730:	4415      	add	r5, r2
 8007732:	4b67      	ldr	r3, [pc, #412]	@ (80078d0 <_strtod_l+0x858>)
 8007734:	f105 35ff 	add.w	r5, r5, #4294967295
 8007738:	bfb8      	it	lt
 800773a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800773c:	429d      	cmp	r5, r3
 800773e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007742:	da50      	bge.n	80077e6 <_strtod_l+0x76e>
 8007744:	1b5b      	subs	r3, r3, r5
 8007746:	2b1f      	cmp	r3, #31
 8007748:	f04f 0101 	mov.w	r1, #1
 800774c:	eba2 0203 	sub.w	r2, r2, r3
 8007750:	dc3d      	bgt.n	80077ce <_strtod_l+0x756>
 8007752:	fa01 f303 	lsl.w	r3, r1, r3
 8007756:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007758:	2300      	movs	r3, #0
 800775a:	9310      	str	r3, [sp, #64]	@ 0x40
 800775c:	18bd      	adds	r5, r7, r2
 800775e:	9b08      	ldr	r3, [sp, #32]
 8007760:	42af      	cmp	r7, r5
 8007762:	4416      	add	r6, r2
 8007764:	441e      	add	r6, r3
 8007766:	463b      	mov	r3, r7
 8007768:	bfa8      	it	ge
 800776a:	462b      	movge	r3, r5
 800776c:	42b3      	cmp	r3, r6
 800776e:	bfa8      	it	ge
 8007770:	4633      	movge	r3, r6
 8007772:	2b00      	cmp	r3, #0
 8007774:	bfc2      	ittt	gt
 8007776:	1aed      	subgt	r5, r5, r3
 8007778:	1af6      	subgt	r6, r6, r3
 800777a:	1aff      	subgt	r7, r7, r3
 800777c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800777e:	2b00      	cmp	r3, #0
 8007780:	dd16      	ble.n	80077b0 <_strtod_l+0x738>
 8007782:	4641      	mov	r1, r8
 8007784:	461a      	mov	r2, r3
 8007786:	9805      	ldr	r0, [sp, #20]
 8007788:	f7ff f9a8 	bl	8006adc <__pow5mult>
 800778c:	4680      	mov	r8, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	d0b7      	beq.n	8007702 <_strtod_l+0x68a>
 8007792:	4601      	mov	r1, r0
 8007794:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007796:	9805      	ldr	r0, [sp, #20]
 8007798:	f7ff f8f8 	bl	800698c <__multiply>
 800779c:	900e      	str	r0, [sp, #56]	@ 0x38
 800779e:	2800      	cmp	r0, #0
 80077a0:	f43f ae85 	beq.w	80074ae <_strtod_l+0x436>
 80077a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077a6:	9805      	ldr	r0, [sp, #20]
 80077a8:	f7fe ffdc 	bl	8006764 <_Bfree>
 80077ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80077b0:	2d00      	cmp	r5, #0
 80077b2:	dc1d      	bgt.n	80077f0 <_strtod_l+0x778>
 80077b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	dd23      	ble.n	8007802 <_strtod_l+0x78a>
 80077ba:	4649      	mov	r1, r9
 80077bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80077be:	9805      	ldr	r0, [sp, #20]
 80077c0:	f7ff f98c 	bl	8006adc <__pow5mult>
 80077c4:	4681      	mov	r9, r0
 80077c6:	b9e0      	cbnz	r0, 8007802 <_strtod_l+0x78a>
 80077c8:	f04f 0900 	mov.w	r9, #0
 80077cc:	e66f      	b.n	80074ae <_strtod_l+0x436>
 80077ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80077d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80077d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80077da:	35e2      	adds	r5, #226	@ 0xe2
 80077dc:	fa01 f305 	lsl.w	r3, r1, r5
 80077e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80077e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80077e4:	e7ba      	b.n	800775c <_strtod_l+0x6e4>
 80077e6:	2300      	movs	r3, #0
 80077e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80077ea:	2301      	movs	r3, #1
 80077ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077ee:	e7b5      	b.n	800775c <_strtod_l+0x6e4>
 80077f0:	462a      	mov	r2, r5
 80077f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077f4:	9805      	ldr	r0, [sp, #20]
 80077f6:	f7ff f9cb 	bl	8006b90 <__lshift>
 80077fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d1d9      	bne.n	80077b4 <_strtod_l+0x73c>
 8007800:	e655      	b.n	80074ae <_strtod_l+0x436>
 8007802:	2e00      	cmp	r6, #0
 8007804:	dd07      	ble.n	8007816 <_strtod_l+0x79e>
 8007806:	4649      	mov	r1, r9
 8007808:	4632      	mov	r2, r6
 800780a:	9805      	ldr	r0, [sp, #20]
 800780c:	f7ff f9c0 	bl	8006b90 <__lshift>
 8007810:	4681      	mov	r9, r0
 8007812:	2800      	cmp	r0, #0
 8007814:	d0d8      	beq.n	80077c8 <_strtod_l+0x750>
 8007816:	2f00      	cmp	r7, #0
 8007818:	dd08      	ble.n	800782c <_strtod_l+0x7b4>
 800781a:	4641      	mov	r1, r8
 800781c:	463a      	mov	r2, r7
 800781e:	9805      	ldr	r0, [sp, #20]
 8007820:	f7ff f9b6 	bl	8006b90 <__lshift>
 8007824:	4680      	mov	r8, r0
 8007826:	2800      	cmp	r0, #0
 8007828:	f43f ae41 	beq.w	80074ae <_strtod_l+0x436>
 800782c:	464a      	mov	r2, r9
 800782e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007830:	9805      	ldr	r0, [sp, #20]
 8007832:	f7ff fa35 	bl	8006ca0 <__mdiff>
 8007836:	4604      	mov	r4, r0
 8007838:	2800      	cmp	r0, #0
 800783a:	f43f ae38 	beq.w	80074ae <_strtod_l+0x436>
 800783e:	68c3      	ldr	r3, [r0, #12]
 8007840:	4641      	mov	r1, r8
 8007842:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007844:	2300      	movs	r3, #0
 8007846:	60c3      	str	r3, [r0, #12]
 8007848:	f7ff fa0e 	bl	8006c68 <__mcmp>
 800784c:	2800      	cmp	r0, #0
 800784e:	da45      	bge.n	80078dc <_strtod_l+0x864>
 8007850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007852:	ea53 030a 	orrs.w	r3, r3, sl
 8007856:	d16b      	bne.n	8007930 <_strtod_l+0x8b8>
 8007858:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800785c:	2b00      	cmp	r3, #0
 800785e:	d167      	bne.n	8007930 <_strtod_l+0x8b8>
 8007860:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007864:	0d1b      	lsrs	r3, r3, #20
 8007866:	051b      	lsls	r3, r3, #20
 8007868:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800786c:	d960      	bls.n	8007930 <_strtod_l+0x8b8>
 800786e:	6963      	ldr	r3, [r4, #20]
 8007870:	b913      	cbnz	r3, 8007878 <_strtod_l+0x800>
 8007872:	6923      	ldr	r3, [r4, #16]
 8007874:	2b01      	cmp	r3, #1
 8007876:	dd5b      	ble.n	8007930 <_strtod_l+0x8b8>
 8007878:	4621      	mov	r1, r4
 800787a:	2201      	movs	r2, #1
 800787c:	9805      	ldr	r0, [sp, #20]
 800787e:	f7ff f987 	bl	8006b90 <__lshift>
 8007882:	4641      	mov	r1, r8
 8007884:	4604      	mov	r4, r0
 8007886:	f7ff f9ef 	bl	8006c68 <__mcmp>
 800788a:	2800      	cmp	r0, #0
 800788c:	dd50      	ble.n	8007930 <_strtod_l+0x8b8>
 800788e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007892:	9a08      	ldr	r2, [sp, #32]
 8007894:	0d1b      	lsrs	r3, r3, #20
 8007896:	051b      	lsls	r3, r3, #20
 8007898:	2a00      	cmp	r2, #0
 800789a:	d06a      	beq.n	8007972 <_strtod_l+0x8fa>
 800789c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80078a0:	d867      	bhi.n	8007972 <_strtod_l+0x8fa>
 80078a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80078a6:	f67f ae98 	bls.w	80075da <_strtod_l+0x562>
 80078aa:	4650      	mov	r0, sl
 80078ac:	4659      	mov	r1, fp
 80078ae:	4b09      	ldr	r3, [pc, #36]	@ (80078d4 <_strtod_l+0x85c>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	f7f8 fec5 	bl	8000640 <__aeabi_dmul>
 80078b6:	4b08      	ldr	r3, [pc, #32]	@ (80078d8 <_strtod_l+0x860>)
 80078b8:	4682      	mov	sl, r0
 80078ba:	400b      	ands	r3, r1
 80078bc:	468b      	mov	fp, r1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f47f ae00 	bne.w	80074c4 <_strtod_l+0x44c>
 80078c4:	2322      	movs	r3, #34	@ 0x22
 80078c6:	9a05      	ldr	r2, [sp, #20]
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	e5fb      	b.n	80074c4 <_strtod_l+0x44c>
 80078cc:	0800ac68 	.word	0x0800ac68
 80078d0:	fffffc02 	.word	0xfffffc02
 80078d4:	39500000 	.word	0x39500000
 80078d8:	7ff00000 	.word	0x7ff00000
 80078dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80078e0:	d165      	bne.n	80079ae <_strtod_l+0x936>
 80078e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078e8:	b35a      	cbz	r2, 8007942 <_strtod_l+0x8ca>
 80078ea:	4a99      	ldr	r2, [pc, #612]	@ (8007b50 <_strtod_l+0xad8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d12b      	bne.n	8007948 <_strtod_l+0x8d0>
 80078f0:	9b08      	ldr	r3, [sp, #32]
 80078f2:	4651      	mov	r1, sl
 80078f4:	b303      	cbz	r3, 8007938 <_strtod_l+0x8c0>
 80078f6:	465a      	mov	r2, fp
 80078f8:	4b96      	ldr	r3, [pc, #600]	@ (8007b54 <_strtod_l+0xadc>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007900:	f04f 32ff 	mov.w	r2, #4294967295
 8007904:	d81b      	bhi.n	800793e <_strtod_l+0x8c6>
 8007906:	0d1b      	lsrs	r3, r3, #20
 8007908:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	4299      	cmp	r1, r3
 8007912:	d119      	bne.n	8007948 <_strtod_l+0x8d0>
 8007914:	4b90      	ldr	r3, [pc, #576]	@ (8007b58 <_strtod_l+0xae0>)
 8007916:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007918:	429a      	cmp	r2, r3
 800791a:	d102      	bne.n	8007922 <_strtod_l+0x8aa>
 800791c:	3101      	adds	r1, #1
 800791e:	f43f adc6 	beq.w	80074ae <_strtod_l+0x436>
 8007922:	f04f 0a00 	mov.w	sl, #0
 8007926:	4b8b      	ldr	r3, [pc, #556]	@ (8007b54 <_strtod_l+0xadc>)
 8007928:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800792a:	401a      	ands	r2, r3
 800792c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007930:	9b08      	ldr	r3, [sp, #32]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1b9      	bne.n	80078aa <_strtod_l+0x832>
 8007936:	e5c5      	b.n	80074c4 <_strtod_l+0x44c>
 8007938:	f04f 33ff 	mov.w	r3, #4294967295
 800793c:	e7e8      	b.n	8007910 <_strtod_l+0x898>
 800793e:	4613      	mov	r3, r2
 8007940:	e7e6      	b.n	8007910 <_strtod_l+0x898>
 8007942:	ea53 030a 	orrs.w	r3, r3, sl
 8007946:	d0a2      	beq.n	800788e <_strtod_l+0x816>
 8007948:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800794a:	b1db      	cbz	r3, 8007984 <_strtod_l+0x90c>
 800794c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800794e:	4213      	tst	r3, r2
 8007950:	d0ee      	beq.n	8007930 <_strtod_l+0x8b8>
 8007952:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007954:	4650      	mov	r0, sl
 8007956:	4659      	mov	r1, fp
 8007958:	9a08      	ldr	r2, [sp, #32]
 800795a:	b1bb      	cbz	r3, 800798c <_strtod_l+0x914>
 800795c:	f7ff fb68 	bl	8007030 <sulp>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007968:	f7f8 fcb4 	bl	80002d4 <__adddf3>
 800796c:	4682      	mov	sl, r0
 800796e:	468b      	mov	fp, r1
 8007970:	e7de      	b.n	8007930 <_strtod_l+0x8b8>
 8007972:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007976:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800797a:	f04f 3aff 	mov.w	sl, #4294967295
 800797e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007982:	e7d5      	b.n	8007930 <_strtod_l+0x8b8>
 8007984:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007986:	ea13 0f0a 	tst.w	r3, sl
 800798a:	e7e1      	b.n	8007950 <_strtod_l+0x8d8>
 800798c:	f7ff fb50 	bl	8007030 <sulp>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007998:	f7f8 fc9a 	bl	80002d0 <__aeabi_dsub>
 800799c:	2200      	movs	r2, #0
 800799e:	2300      	movs	r3, #0
 80079a0:	4682      	mov	sl, r0
 80079a2:	468b      	mov	fp, r1
 80079a4:	f7f9 f8b4 	bl	8000b10 <__aeabi_dcmpeq>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d0c1      	beq.n	8007930 <_strtod_l+0x8b8>
 80079ac:	e615      	b.n	80075da <_strtod_l+0x562>
 80079ae:	4641      	mov	r1, r8
 80079b0:	4620      	mov	r0, r4
 80079b2:	f7ff fac9 	bl	8006f48 <__ratio>
 80079b6:	2200      	movs	r2, #0
 80079b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079bc:	4606      	mov	r6, r0
 80079be:	460f      	mov	r7, r1
 80079c0:	f7f9 f8ba 	bl	8000b38 <__aeabi_dcmple>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d06d      	beq.n	8007aa4 <_strtod_l+0xa2c>
 80079c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d178      	bne.n	8007ac0 <_strtod_l+0xa48>
 80079ce:	f1ba 0f00 	cmp.w	sl, #0
 80079d2:	d156      	bne.n	8007a82 <_strtod_l+0xa0a>
 80079d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d158      	bne.n	8007a90 <_strtod_l+0xa18>
 80079de:	2200      	movs	r2, #0
 80079e0:	4630      	mov	r0, r6
 80079e2:	4639      	mov	r1, r7
 80079e4:	4b5d      	ldr	r3, [pc, #372]	@ (8007b5c <_strtod_l+0xae4>)
 80079e6:	f7f9 f89d 	bl	8000b24 <__aeabi_dcmplt>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d157      	bne.n	8007a9e <_strtod_l+0xa26>
 80079ee:	4630      	mov	r0, r6
 80079f0:	4639      	mov	r1, r7
 80079f2:	2200      	movs	r2, #0
 80079f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007b60 <_strtod_l+0xae8>)
 80079f6:	f7f8 fe23 	bl	8000640 <__aeabi_dmul>
 80079fa:	4606      	mov	r6, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007a02:	9606      	str	r6, [sp, #24]
 8007a04:	9307      	str	r3, [sp, #28]
 8007a06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a0a:	4d52      	ldr	r5, [pc, #328]	@ (8007b54 <_strtod_l+0xadc>)
 8007a0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a12:	401d      	ands	r5, r3
 8007a14:	4b53      	ldr	r3, [pc, #332]	@ (8007b64 <_strtod_l+0xaec>)
 8007a16:	429d      	cmp	r5, r3
 8007a18:	f040 80aa 	bne.w	8007b70 <_strtod_l+0xaf8>
 8007a1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a1e:	4650      	mov	r0, sl
 8007a20:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007a24:	4659      	mov	r1, fp
 8007a26:	f7ff f9cf 	bl	8006dc8 <__ulp>
 8007a2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a2e:	f7f8 fe07 	bl	8000640 <__aeabi_dmul>
 8007a32:	4652      	mov	r2, sl
 8007a34:	465b      	mov	r3, fp
 8007a36:	f7f8 fc4d 	bl	80002d4 <__adddf3>
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4945      	ldr	r1, [pc, #276]	@ (8007b54 <_strtod_l+0xadc>)
 8007a3e:	4a4a      	ldr	r2, [pc, #296]	@ (8007b68 <_strtod_l+0xaf0>)
 8007a40:	4019      	ands	r1, r3
 8007a42:	4291      	cmp	r1, r2
 8007a44:	4682      	mov	sl, r0
 8007a46:	d942      	bls.n	8007ace <_strtod_l+0xa56>
 8007a48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a4a:	4b43      	ldr	r3, [pc, #268]	@ (8007b58 <_strtod_l+0xae0>)
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d103      	bne.n	8007a58 <_strtod_l+0x9e0>
 8007a50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a52:	3301      	adds	r3, #1
 8007a54:	f43f ad2b 	beq.w	80074ae <_strtod_l+0x436>
 8007a58:	f04f 3aff 	mov.w	sl, #4294967295
 8007a5c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007b58 <_strtod_l+0xae0>
 8007a60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a62:	9805      	ldr	r0, [sp, #20]
 8007a64:	f7fe fe7e 	bl	8006764 <_Bfree>
 8007a68:	4649      	mov	r1, r9
 8007a6a:	9805      	ldr	r0, [sp, #20]
 8007a6c:	f7fe fe7a 	bl	8006764 <_Bfree>
 8007a70:	4641      	mov	r1, r8
 8007a72:	9805      	ldr	r0, [sp, #20]
 8007a74:	f7fe fe76 	bl	8006764 <_Bfree>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	9805      	ldr	r0, [sp, #20]
 8007a7c:	f7fe fe72 	bl	8006764 <_Bfree>
 8007a80:	e618      	b.n	80076b4 <_strtod_l+0x63c>
 8007a82:	f1ba 0f01 	cmp.w	sl, #1
 8007a86:	d103      	bne.n	8007a90 <_strtod_l+0xa18>
 8007a88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f43f ada5 	beq.w	80075da <_strtod_l+0x562>
 8007a90:	2200      	movs	r2, #0
 8007a92:	4b36      	ldr	r3, [pc, #216]	@ (8007b6c <_strtod_l+0xaf4>)
 8007a94:	2600      	movs	r6, #0
 8007a96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a9a:	4f30      	ldr	r7, [pc, #192]	@ (8007b5c <_strtod_l+0xae4>)
 8007a9c:	e7b3      	b.n	8007a06 <_strtod_l+0x98e>
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	4f2f      	ldr	r7, [pc, #188]	@ (8007b60 <_strtod_l+0xae8>)
 8007aa2:	e7ac      	b.n	80079fe <_strtod_l+0x986>
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8007b60 <_strtod_l+0xae8>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f7f8 fdc8 	bl	8000640 <__aeabi_dmul>
 8007ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0a1      	beq.n	80079fe <_strtod_l+0x986>
 8007aba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007abe:	e7a2      	b.n	8007a06 <_strtod_l+0x98e>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4b26      	ldr	r3, [pc, #152]	@ (8007b5c <_strtod_l+0xae4>)
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	461f      	mov	r7, r3
 8007ac8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007acc:	e79b      	b.n	8007a06 <_strtod_l+0x98e>
 8007ace:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007ad2:	9b08      	ldr	r3, [sp, #32]
 8007ad4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1c1      	bne.n	8007a60 <_strtod_l+0x9e8>
 8007adc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ae0:	0d1b      	lsrs	r3, r3, #20
 8007ae2:	051b      	lsls	r3, r3, #20
 8007ae4:	429d      	cmp	r5, r3
 8007ae6:	d1bb      	bne.n	8007a60 <_strtod_l+0x9e8>
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f9 f9fe 	bl	8000eec <__aeabi_d2lz>
 8007af0:	f7f8 fd78 	bl	80005e4 <__aeabi_l2d>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4630      	mov	r0, r6
 8007afa:	4639      	mov	r1, r7
 8007afc:	f7f8 fbe8 	bl	80002d0 <__aeabi_dsub>
 8007b00:	460b      	mov	r3, r1
 8007b02:	4602      	mov	r2, r0
 8007b04:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007b08:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b0e:	ea46 060a 	orr.w	r6, r6, sl
 8007b12:	431e      	orrs	r6, r3
 8007b14:	d069      	beq.n	8007bea <_strtod_l+0xb72>
 8007b16:	a30a      	add	r3, pc, #40	@ (adr r3, 8007b40 <_strtod_l+0xac8>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f7f9 f802 	bl	8000b24 <__aeabi_dcmplt>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	f47f accf 	bne.w	80074c4 <_strtod_l+0x44c>
 8007b26:	a308      	add	r3, pc, #32	@ (adr r3, 8007b48 <_strtod_l+0xad0>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b30:	f7f9 f816 	bl	8000b60 <__aeabi_dcmpgt>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d093      	beq.n	8007a60 <_strtod_l+0x9e8>
 8007b38:	e4c4      	b.n	80074c4 <_strtod_l+0x44c>
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	94a03595 	.word	0x94a03595
 8007b44:	3fdfffff 	.word	0x3fdfffff
 8007b48:	35afe535 	.word	0x35afe535
 8007b4c:	3fe00000 	.word	0x3fe00000
 8007b50:	000fffff 	.word	0x000fffff
 8007b54:	7ff00000 	.word	0x7ff00000
 8007b58:	7fefffff 	.word	0x7fefffff
 8007b5c:	3ff00000 	.word	0x3ff00000
 8007b60:	3fe00000 	.word	0x3fe00000
 8007b64:	7fe00000 	.word	0x7fe00000
 8007b68:	7c9fffff 	.word	0x7c9fffff
 8007b6c:	bff00000 	.word	0xbff00000
 8007b70:	9b08      	ldr	r3, [sp, #32]
 8007b72:	b323      	cbz	r3, 8007bbe <_strtod_l+0xb46>
 8007b74:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007b78:	d821      	bhi.n	8007bbe <_strtod_l+0xb46>
 8007b7a:	a327      	add	r3, pc, #156	@ (adr r3, 8007c18 <_strtod_l+0xba0>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 ffd8 	bl	8000b38 <__aeabi_dcmple>
 8007b88:	b1a0      	cbz	r0, 8007bb4 <_strtod_l+0xb3c>
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f7f9 f82f 	bl	8000bf0 <__aeabi_d2uiz>
 8007b92:	2801      	cmp	r0, #1
 8007b94:	bf38      	it	cc
 8007b96:	2001      	movcc	r0, #1
 8007b98:	f7f8 fcd8 	bl	800054c <__aeabi_ui2d>
 8007b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	460f      	mov	r7, r1
 8007ba2:	b9fb      	cbnz	r3, 8007be4 <_strtod_l+0xb6c>
 8007ba4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ba8:	9014      	str	r0, [sp, #80]	@ 0x50
 8007baa:	9315      	str	r3, [sp, #84]	@ 0x54
 8007bac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007bb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007bb4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007bb6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007bba:	1b5b      	subs	r3, r3, r5
 8007bbc:	9311      	str	r3, [sp, #68]	@ 0x44
 8007bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bc2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007bc6:	f7ff f8ff 	bl	8006dc8 <__ulp>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4650      	mov	r0, sl
 8007bd0:	4659      	mov	r1, fp
 8007bd2:	f7f8 fd35 	bl	8000640 <__aeabi_dmul>
 8007bd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bda:	f7f8 fb7b 	bl	80002d4 <__adddf3>
 8007bde:	4682      	mov	sl, r0
 8007be0:	468b      	mov	fp, r1
 8007be2:	e776      	b.n	8007ad2 <_strtod_l+0xa5a>
 8007be4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007be8:	e7e0      	b.n	8007bac <_strtod_l+0xb34>
 8007bea:	a30d      	add	r3, pc, #52	@ (adr r3, 8007c20 <_strtod_l+0xba8>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 ff98 	bl	8000b24 <__aeabi_dcmplt>
 8007bf4:	e79e      	b.n	8007b34 <_strtod_l+0xabc>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bfc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	f7ff ba77 	b.w	80070f2 <_strtod_l+0x7a>
 8007c04:	2a65      	cmp	r2, #101	@ 0x65
 8007c06:	f43f ab6e 	beq.w	80072e6 <_strtod_l+0x26e>
 8007c0a:	2a45      	cmp	r2, #69	@ 0x45
 8007c0c:	f43f ab6b 	beq.w	80072e6 <_strtod_l+0x26e>
 8007c10:	2301      	movs	r3, #1
 8007c12:	f7ff bba6 	b.w	8007362 <_strtod_l+0x2ea>
 8007c16:	bf00      	nop
 8007c18:	ffc00000 	.word	0xffc00000
 8007c1c:	41dfffff 	.word	0x41dfffff
 8007c20:	94a03595 	.word	0x94a03595
 8007c24:	3fcfffff 	.word	0x3fcfffff

08007c28 <_strtod_r>:
 8007c28:	4b01      	ldr	r3, [pc, #4]	@ (8007c30 <_strtod_r+0x8>)
 8007c2a:	f7ff ba25 	b.w	8007078 <_strtod_l>
 8007c2e:	bf00      	nop
 8007c30:	20000094 	.word	0x20000094

08007c34 <__ssputs_r>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	461f      	mov	r7, r3
 8007c3a:	688e      	ldr	r6, [r1, #8]
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	42be      	cmp	r6, r7
 8007c40:	460c      	mov	r4, r1
 8007c42:	4690      	mov	r8, r2
 8007c44:	680b      	ldr	r3, [r1, #0]
 8007c46:	d82d      	bhi.n	8007ca4 <__ssputs_r+0x70>
 8007c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c50:	d026      	beq.n	8007ca0 <__ssputs_r+0x6c>
 8007c52:	6965      	ldr	r5, [r4, #20]
 8007c54:	6909      	ldr	r1, [r1, #16]
 8007c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c5a:	eba3 0901 	sub.w	r9, r3, r1
 8007c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c62:	1c7b      	adds	r3, r7, #1
 8007c64:	444b      	add	r3, r9
 8007c66:	106d      	asrs	r5, r5, #1
 8007c68:	429d      	cmp	r5, r3
 8007c6a:	bf38      	it	cc
 8007c6c:	461d      	movcc	r5, r3
 8007c6e:	0553      	lsls	r3, r2, #21
 8007c70:	d527      	bpl.n	8007cc2 <__ssputs_r+0x8e>
 8007c72:	4629      	mov	r1, r5
 8007c74:	f7fe fcaa 	bl	80065cc <_malloc_r>
 8007c78:	4606      	mov	r6, r0
 8007c7a:	b360      	cbz	r0, 8007cd6 <__ssputs_r+0xa2>
 8007c7c:	464a      	mov	r2, r9
 8007c7e:	6921      	ldr	r1, [r4, #16]
 8007c80:	f7fd fdaf 	bl	80057e2 <memcpy>
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	6126      	str	r6, [r4, #16]
 8007c92:	444e      	add	r6, r9
 8007c94:	6026      	str	r6, [r4, #0]
 8007c96:	463e      	mov	r6, r7
 8007c98:	6165      	str	r5, [r4, #20]
 8007c9a:	eba5 0509 	sub.w	r5, r5, r9
 8007c9e:	60a5      	str	r5, [r4, #8]
 8007ca0:	42be      	cmp	r6, r7
 8007ca2:	d900      	bls.n	8007ca6 <__ssputs_r+0x72>
 8007ca4:	463e      	mov	r6, r7
 8007ca6:	4632      	mov	r2, r6
 8007ca8:	4641      	mov	r1, r8
 8007caa:	6820      	ldr	r0, [r4, #0]
 8007cac:	f000 f9d4 	bl	8008058 <memmove>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	1b9b      	subs	r3, r3, r6
 8007cb6:	60a3      	str	r3, [r4, #8]
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	4433      	add	r3, r6
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc2:	462a      	mov	r2, r5
 8007cc4:	f000 fd71 	bl	80087aa <_realloc_r>
 8007cc8:	4606      	mov	r6, r0
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d1e0      	bne.n	8007c90 <__ssputs_r+0x5c>
 8007cce:	4650      	mov	r0, sl
 8007cd0:	6921      	ldr	r1, [r4, #16]
 8007cd2:	f7fe fc09 	bl	80064e8 <_free_r>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	f8ca 3000 	str.w	r3, [sl]
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	e7e9      	b.n	8007cbe <__ssputs_r+0x8a>
	...

08007cec <_svfiprintf_r>:
 8007cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	4698      	mov	r8, r3
 8007cf2:	898b      	ldrh	r3, [r1, #12]
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	061b      	lsls	r3, r3, #24
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	b09d      	sub	sp, #116	@ 0x74
 8007cfe:	d510      	bpl.n	8007d22 <_svfiprintf_r+0x36>
 8007d00:	690b      	ldr	r3, [r1, #16]
 8007d02:	b973      	cbnz	r3, 8007d22 <_svfiprintf_r+0x36>
 8007d04:	2140      	movs	r1, #64	@ 0x40
 8007d06:	f7fe fc61 	bl	80065cc <_malloc_r>
 8007d0a:	6028      	str	r0, [r5, #0]
 8007d0c:	6128      	str	r0, [r5, #16]
 8007d0e:	b930      	cbnz	r0, 8007d1e <_svfiprintf_r+0x32>
 8007d10:	230c      	movs	r3, #12
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	b01d      	add	sp, #116	@ 0x74
 8007d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1e:	2340      	movs	r3, #64	@ 0x40
 8007d20:	616b      	str	r3, [r5, #20]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d26:	2320      	movs	r3, #32
 8007d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d2c:	2330      	movs	r3, #48	@ 0x30
 8007d2e:	f04f 0901 	mov.w	r9, #1
 8007d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007ed0 <_svfiprintf_r+0x1e4>
 8007d3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d3e:	4623      	mov	r3, r4
 8007d40:	469a      	mov	sl, r3
 8007d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d46:	b10a      	cbz	r2, 8007d4c <_svfiprintf_r+0x60>
 8007d48:	2a25      	cmp	r2, #37	@ 0x25
 8007d4a:	d1f9      	bne.n	8007d40 <_svfiprintf_r+0x54>
 8007d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007d50:	d00b      	beq.n	8007d6a <_svfiprintf_r+0x7e>
 8007d52:	465b      	mov	r3, fp
 8007d54:	4622      	mov	r2, r4
 8007d56:	4629      	mov	r1, r5
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff ff6b 	bl	8007c34 <__ssputs_r>
 8007d5e:	3001      	adds	r0, #1
 8007d60:	f000 80a7 	beq.w	8007eb2 <_svfiprintf_r+0x1c6>
 8007d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d66:	445a      	add	r2, fp
 8007d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 809f 	beq.w	8007eb2 <_svfiprintf_r+0x1c6>
 8007d74:	2300      	movs	r3, #0
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7e:	f10a 0a01 	add.w	sl, sl, #1
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	9307      	str	r3, [sp, #28]
 8007d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d8c:	4654      	mov	r4, sl
 8007d8e:	2205      	movs	r2, #5
 8007d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d94:	484e      	ldr	r0, [pc, #312]	@ (8007ed0 <_svfiprintf_r+0x1e4>)
 8007d96:	f7fd fd16 	bl	80057c6 <memchr>
 8007d9a:	9a04      	ldr	r2, [sp, #16]
 8007d9c:	b9d8      	cbnz	r0, 8007dd6 <_svfiprintf_r+0xea>
 8007d9e:	06d0      	lsls	r0, r2, #27
 8007da0:	bf44      	itt	mi
 8007da2:	2320      	movmi	r3, #32
 8007da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007da8:	0711      	lsls	r1, r2, #28
 8007daa:	bf44      	itt	mi
 8007dac:	232b      	movmi	r3, #43	@ 0x2b
 8007dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007db2:	f89a 3000 	ldrb.w	r3, [sl]
 8007db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007db8:	d015      	beq.n	8007de6 <_svfiprintf_r+0xfa>
 8007dba:	4654      	mov	r4, sl
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f04f 0c0a 	mov.w	ip, #10
 8007dc2:	9a07      	ldr	r2, [sp, #28]
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dca:	3b30      	subs	r3, #48	@ 0x30
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	d94b      	bls.n	8007e68 <_svfiprintf_r+0x17c>
 8007dd0:	b1b0      	cbz	r0, 8007e00 <_svfiprintf_r+0x114>
 8007dd2:	9207      	str	r2, [sp, #28]
 8007dd4:	e014      	b.n	8007e00 <_svfiprintf_r+0x114>
 8007dd6:	eba0 0308 	sub.w	r3, r0, r8
 8007dda:	fa09 f303 	lsl.w	r3, r9, r3
 8007dde:	4313      	orrs	r3, r2
 8007de0:	46a2      	mov	sl, r4
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	e7d2      	b.n	8007d8c <_svfiprintf_r+0xa0>
 8007de6:	9b03      	ldr	r3, [sp, #12]
 8007de8:	1d19      	adds	r1, r3, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	9103      	str	r1, [sp, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bfbb      	ittet	lt
 8007df2:	425b      	neglt	r3, r3
 8007df4:	f042 0202 	orrlt.w	r2, r2, #2
 8007df8:	9307      	strge	r3, [sp, #28]
 8007dfa:	9307      	strlt	r3, [sp, #28]
 8007dfc:	bfb8      	it	lt
 8007dfe:	9204      	strlt	r2, [sp, #16]
 8007e00:	7823      	ldrb	r3, [r4, #0]
 8007e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e04:	d10a      	bne.n	8007e1c <_svfiprintf_r+0x130>
 8007e06:	7863      	ldrb	r3, [r4, #1]
 8007e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e0a:	d132      	bne.n	8007e72 <_svfiprintf_r+0x186>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	3402      	adds	r4, #2
 8007e10:	1d1a      	adds	r2, r3, #4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	9203      	str	r2, [sp, #12]
 8007e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e1a:	9305      	str	r3, [sp, #20]
 8007e1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007ed4 <_svfiprintf_r+0x1e8>
 8007e20:	2203      	movs	r2, #3
 8007e22:	4650      	mov	r0, sl
 8007e24:	7821      	ldrb	r1, [r4, #0]
 8007e26:	f7fd fcce 	bl	80057c6 <memchr>
 8007e2a:	b138      	cbz	r0, 8007e3c <_svfiprintf_r+0x150>
 8007e2c:	2240      	movs	r2, #64	@ 0x40
 8007e2e:	9b04      	ldr	r3, [sp, #16]
 8007e30:	eba0 000a 	sub.w	r0, r0, sl
 8007e34:	4082      	lsls	r2, r0
 8007e36:	4313      	orrs	r3, r2
 8007e38:	3401      	adds	r4, #1
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e40:	2206      	movs	r2, #6
 8007e42:	4825      	ldr	r0, [pc, #148]	@ (8007ed8 <_svfiprintf_r+0x1ec>)
 8007e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e48:	f7fd fcbd 	bl	80057c6 <memchr>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d036      	beq.n	8007ebe <_svfiprintf_r+0x1d2>
 8007e50:	4b22      	ldr	r3, [pc, #136]	@ (8007edc <_svfiprintf_r+0x1f0>)
 8007e52:	bb1b      	cbnz	r3, 8007e9c <_svfiprintf_r+0x1b0>
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	3307      	adds	r3, #7
 8007e58:	f023 0307 	bic.w	r3, r3, #7
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	9303      	str	r3, [sp, #12]
 8007e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e62:	4433      	add	r3, r6
 8007e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e66:	e76a      	b.n	8007d3e <_svfiprintf_r+0x52>
 8007e68:	460c      	mov	r4, r1
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e70:	e7a8      	b.n	8007dc4 <_svfiprintf_r+0xd8>
 8007e72:	2300      	movs	r3, #0
 8007e74:	f04f 0c0a 	mov.w	ip, #10
 8007e78:	4619      	mov	r1, r3
 8007e7a:	3401      	adds	r4, #1
 8007e7c:	9305      	str	r3, [sp, #20]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e84:	3a30      	subs	r2, #48	@ 0x30
 8007e86:	2a09      	cmp	r2, #9
 8007e88:	d903      	bls.n	8007e92 <_svfiprintf_r+0x1a6>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0c6      	beq.n	8007e1c <_svfiprintf_r+0x130>
 8007e8e:	9105      	str	r1, [sp, #20]
 8007e90:	e7c4      	b.n	8007e1c <_svfiprintf_r+0x130>
 8007e92:	4604      	mov	r4, r0
 8007e94:	2301      	movs	r3, #1
 8007e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e9a:	e7f0      	b.n	8007e7e <_svfiprintf_r+0x192>
 8007e9c:	ab03      	add	r3, sp, #12
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee0 <_svfiprintf_r+0x1f4>)
 8007ea6:	a904      	add	r1, sp, #16
 8007ea8:	f7fc fd12 	bl	80048d0 <_printf_float>
 8007eac:	1c42      	adds	r2, r0, #1
 8007eae:	4606      	mov	r6, r0
 8007eb0:	d1d6      	bne.n	8007e60 <_svfiprintf_r+0x174>
 8007eb2:	89ab      	ldrh	r3, [r5, #12]
 8007eb4:	065b      	lsls	r3, r3, #25
 8007eb6:	f53f af2d 	bmi.w	8007d14 <_svfiprintf_r+0x28>
 8007eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ebc:	e72c      	b.n	8007d18 <_svfiprintf_r+0x2c>
 8007ebe:	ab03      	add	r3, sp, #12
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	462a      	mov	r2, r5
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	4b06      	ldr	r3, [pc, #24]	@ (8007ee0 <_svfiprintf_r+0x1f4>)
 8007ec8:	a904      	add	r1, sp, #16
 8007eca:	f7fc ff9f 	bl	8004e0c <_printf_i>
 8007ece:	e7ed      	b.n	8007eac <_svfiprintf_r+0x1c0>
 8007ed0:	0800ac90 	.word	0x0800ac90
 8007ed4:	0800ac96 	.word	0x0800ac96
 8007ed8:	0800ac9a 	.word	0x0800ac9a
 8007edc:	080048d1 	.word	0x080048d1
 8007ee0:	08007c35 	.word	0x08007c35

08007ee4 <__sflush_r>:
 8007ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	0716      	lsls	r6, r2, #28
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	d454      	bmi.n	8007f9c <__sflush_r+0xb8>
 8007ef2:	684b      	ldr	r3, [r1, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dc02      	bgt.n	8007efe <__sflush_r+0x1a>
 8007ef8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	dd48      	ble.n	8007f90 <__sflush_r+0xac>
 8007efe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f00:	2e00      	cmp	r6, #0
 8007f02:	d045      	beq.n	8007f90 <__sflush_r+0xac>
 8007f04:	2300      	movs	r3, #0
 8007f06:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f0a:	682f      	ldr	r7, [r5, #0]
 8007f0c:	6a21      	ldr	r1, [r4, #32]
 8007f0e:	602b      	str	r3, [r5, #0]
 8007f10:	d030      	beq.n	8007f74 <__sflush_r+0x90>
 8007f12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	0759      	lsls	r1, r3, #29
 8007f18:	d505      	bpl.n	8007f26 <__sflush_r+0x42>
 8007f1a:	6863      	ldr	r3, [r4, #4]
 8007f1c:	1ad2      	subs	r2, r2, r3
 8007f1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f20:	b10b      	cbz	r3, 8007f26 <__sflush_r+0x42>
 8007f22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f24:	1ad2      	subs	r2, r2, r3
 8007f26:	2300      	movs	r3, #0
 8007f28:	4628      	mov	r0, r5
 8007f2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f2c:	6a21      	ldr	r1, [r4, #32]
 8007f2e:	47b0      	blx	r6
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	89a3      	ldrh	r3, [r4, #12]
 8007f34:	d106      	bne.n	8007f44 <__sflush_r+0x60>
 8007f36:	6829      	ldr	r1, [r5, #0]
 8007f38:	291d      	cmp	r1, #29
 8007f3a:	d82b      	bhi.n	8007f94 <__sflush_r+0xb0>
 8007f3c:	4a28      	ldr	r2, [pc, #160]	@ (8007fe0 <__sflush_r+0xfc>)
 8007f3e:	410a      	asrs	r2, r1
 8007f40:	07d6      	lsls	r6, r2, #31
 8007f42:	d427      	bmi.n	8007f94 <__sflush_r+0xb0>
 8007f44:	2200      	movs	r2, #0
 8007f46:	6062      	str	r2, [r4, #4]
 8007f48:	6922      	ldr	r2, [r4, #16]
 8007f4a:	04d9      	lsls	r1, r3, #19
 8007f4c:	6022      	str	r2, [r4, #0]
 8007f4e:	d504      	bpl.n	8007f5a <__sflush_r+0x76>
 8007f50:	1c42      	adds	r2, r0, #1
 8007f52:	d101      	bne.n	8007f58 <__sflush_r+0x74>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b903      	cbnz	r3, 8007f5a <__sflush_r+0x76>
 8007f58:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f5c:	602f      	str	r7, [r5, #0]
 8007f5e:	b1b9      	cbz	r1, 8007f90 <__sflush_r+0xac>
 8007f60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f64:	4299      	cmp	r1, r3
 8007f66:	d002      	beq.n	8007f6e <__sflush_r+0x8a>
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f7fe fabd 	bl	80064e8 <_free_r>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f72:	e00d      	b.n	8007f90 <__sflush_r+0xac>
 8007f74:	2301      	movs	r3, #1
 8007f76:	4628      	mov	r0, r5
 8007f78:	47b0      	blx	r6
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	1c50      	adds	r0, r2, #1
 8007f7e:	d1c9      	bne.n	8007f14 <__sflush_r+0x30>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0c6      	beq.n	8007f14 <__sflush_r+0x30>
 8007f86:	2b1d      	cmp	r3, #29
 8007f88:	d001      	beq.n	8007f8e <__sflush_r+0xaa>
 8007f8a:	2b16      	cmp	r3, #22
 8007f8c:	d11d      	bne.n	8007fca <__sflush_r+0xe6>
 8007f8e:	602f      	str	r7, [r5, #0]
 8007f90:	2000      	movs	r0, #0
 8007f92:	e021      	b.n	8007fd8 <__sflush_r+0xf4>
 8007f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f98:	b21b      	sxth	r3, r3
 8007f9a:	e01a      	b.n	8007fd2 <__sflush_r+0xee>
 8007f9c:	690f      	ldr	r7, [r1, #16]
 8007f9e:	2f00      	cmp	r7, #0
 8007fa0:	d0f6      	beq.n	8007f90 <__sflush_r+0xac>
 8007fa2:	0793      	lsls	r3, r2, #30
 8007fa4:	bf18      	it	ne
 8007fa6:	2300      	movne	r3, #0
 8007fa8:	680e      	ldr	r6, [r1, #0]
 8007faa:	bf08      	it	eq
 8007fac:	694b      	ldreq	r3, [r1, #20]
 8007fae:	1bf6      	subs	r6, r6, r7
 8007fb0:	600f      	str	r7, [r1, #0]
 8007fb2:	608b      	str	r3, [r1, #8]
 8007fb4:	2e00      	cmp	r6, #0
 8007fb6:	ddeb      	ble.n	8007f90 <__sflush_r+0xac>
 8007fb8:	4633      	mov	r3, r6
 8007fba:	463a      	mov	r2, r7
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	6a21      	ldr	r1, [r4, #32]
 8007fc0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007fc4:	47e0      	blx	ip
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	dc07      	bgt.n	8007fda <__sflush_r+0xf6>
 8007fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd6:	81a3      	strh	r3, [r4, #12]
 8007fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fda:	4407      	add	r7, r0
 8007fdc:	1a36      	subs	r6, r6, r0
 8007fde:	e7e9      	b.n	8007fb4 <__sflush_r+0xd0>
 8007fe0:	dfbffffe 	.word	0xdfbffffe

08007fe4 <_fflush_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	690b      	ldr	r3, [r1, #16]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	b913      	cbnz	r3, 8007ff4 <_fflush_r+0x10>
 8007fee:	2500      	movs	r5, #0
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	b118      	cbz	r0, 8007ffe <_fflush_r+0x1a>
 8007ff6:	6a03      	ldr	r3, [r0, #32]
 8007ff8:	b90b      	cbnz	r3, 8007ffe <_fflush_r+0x1a>
 8007ffa:	f7fd fac3 	bl	8005584 <__sinit>
 8007ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f3      	beq.n	8007fee <_fflush_r+0xa>
 8008006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008008:	07d0      	lsls	r0, r2, #31
 800800a:	d404      	bmi.n	8008016 <_fflush_r+0x32>
 800800c:	0599      	lsls	r1, r3, #22
 800800e:	d402      	bmi.n	8008016 <_fflush_r+0x32>
 8008010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008012:	f7fd fbce 	bl	80057b2 <__retarget_lock_acquire_recursive>
 8008016:	4628      	mov	r0, r5
 8008018:	4621      	mov	r1, r4
 800801a:	f7ff ff63 	bl	8007ee4 <__sflush_r>
 800801e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008020:	4605      	mov	r5, r0
 8008022:	07da      	lsls	r2, r3, #31
 8008024:	d4e4      	bmi.n	8007ff0 <_fflush_r+0xc>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	059b      	lsls	r3, r3, #22
 800802a:	d4e1      	bmi.n	8007ff0 <_fflush_r+0xc>
 800802c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800802e:	f7fd fbc1 	bl	80057b4 <__retarget_lock_release_recursive>
 8008032:	e7dd      	b.n	8007ff0 <_fflush_r+0xc>

08008034 <fiprintf>:
 8008034:	b40e      	push	{r1, r2, r3}
 8008036:	b503      	push	{r0, r1, lr}
 8008038:	4601      	mov	r1, r0
 800803a:	ab03      	add	r3, sp, #12
 800803c:	4805      	ldr	r0, [pc, #20]	@ (8008054 <fiprintf+0x20>)
 800803e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008042:	6800      	ldr	r0, [r0, #0]
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	f000 fc13 	bl	8008870 <_vfiprintf_r>
 800804a:	b002      	add	sp, #8
 800804c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008050:	b003      	add	sp, #12
 8008052:	4770      	bx	lr
 8008054:	20000044 	.word	0x20000044

08008058 <memmove>:
 8008058:	4288      	cmp	r0, r1
 800805a:	b510      	push	{r4, lr}
 800805c:	eb01 0402 	add.w	r4, r1, r2
 8008060:	d902      	bls.n	8008068 <memmove+0x10>
 8008062:	4284      	cmp	r4, r0
 8008064:	4623      	mov	r3, r4
 8008066:	d807      	bhi.n	8008078 <memmove+0x20>
 8008068:	1e43      	subs	r3, r0, #1
 800806a:	42a1      	cmp	r1, r4
 800806c:	d008      	beq.n	8008080 <memmove+0x28>
 800806e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008076:	e7f8      	b.n	800806a <memmove+0x12>
 8008078:	4601      	mov	r1, r0
 800807a:	4402      	add	r2, r0
 800807c:	428a      	cmp	r2, r1
 800807e:	d100      	bne.n	8008082 <memmove+0x2a>
 8008080:	bd10      	pop	{r4, pc}
 8008082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800808a:	e7f7      	b.n	800807c <memmove+0x24>

0800808c <strncmp>:
 800808c:	b510      	push	{r4, lr}
 800808e:	b16a      	cbz	r2, 80080ac <strncmp+0x20>
 8008090:	3901      	subs	r1, #1
 8008092:	1884      	adds	r4, r0, r2
 8008094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008098:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800809c:	429a      	cmp	r2, r3
 800809e:	d103      	bne.n	80080a8 <strncmp+0x1c>
 80080a0:	42a0      	cmp	r0, r4
 80080a2:	d001      	beq.n	80080a8 <strncmp+0x1c>
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	d1f5      	bne.n	8008094 <strncmp+0x8>
 80080a8:	1ad0      	subs	r0, r2, r3
 80080aa:	bd10      	pop	{r4, pc}
 80080ac:	4610      	mov	r0, r2
 80080ae:	e7fc      	b.n	80080aa <strncmp+0x1e>

080080b0 <_sbrk_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	2300      	movs	r3, #0
 80080b4:	4d05      	ldr	r5, [pc, #20]	@ (80080cc <_sbrk_r+0x1c>)
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	f7fa f8d8 	bl	8002270 <_sbrk>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_sbrk_r+0x1a>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_sbrk_r+0x1a>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	20000aac 	.word	0x20000aac

080080d0 <nan>:
 80080d0:	2000      	movs	r0, #0
 80080d2:	4901      	ldr	r1, [pc, #4]	@ (80080d8 <nan+0x8>)
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	7ff80000 	.word	0x7ff80000

080080dc <abort>:
 80080dc:	2006      	movs	r0, #6
 80080de:	b508      	push	{r3, lr}
 80080e0:	f000 fd9a 	bl	8008c18 <raise>
 80080e4:	2001      	movs	r0, #1
 80080e6:	f7fa f895 	bl	8002214 <_exit>

080080ea <_calloc_r>:
 80080ea:	b570      	push	{r4, r5, r6, lr}
 80080ec:	fba1 5402 	umull	r5, r4, r1, r2
 80080f0:	b93c      	cbnz	r4, 8008102 <_calloc_r+0x18>
 80080f2:	4629      	mov	r1, r5
 80080f4:	f7fe fa6a 	bl	80065cc <_malloc_r>
 80080f8:	4606      	mov	r6, r0
 80080fa:	b928      	cbnz	r0, 8008108 <_calloc_r+0x1e>
 80080fc:	2600      	movs	r6, #0
 80080fe:	4630      	mov	r0, r6
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	220c      	movs	r2, #12
 8008104:	6002      	str	r2, [r0, #0]
 8008106:	e7f9      	b.n	80080fc <_calloc_r+0x12>
 8008108:	462a      	mov	r2, r5
 800810a:	4621      	mov	r1, r4
 800810c:	f7fd fad3 	bl	80056b6 <memset>
 8008110:	e7f5      	b.n	80080fe <_calloc_r+0x14>

08008112 <rshift>:
 8008112:	6903      	ldr	r3, [r0, #16]
 8008114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008118:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800811c:	f100 0414 	add.w	r4, r0, #20
 8008120:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008124:	dd46      	ble.n	80081b4 <rshift+0xa2>
 8008126:	f011 011f 	ands.w	r1, r1, #31
 800812a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800812e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008132:	d10c      	bne.n	800814e <rshift+0x3c>
 8008134:	4629      	mov	r1, r5
 8008136:	f100 0710 	add.w	r7, r0, #16
 800813a:	42b1      	cmp	r1, r6
 800813c:	d335      	bcc.n	80081aa <rshift+0x98>
 800813e:	1a9b      	subs	r3, r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	1eea      	subs	r2, r5, #3
 8008144:	4296      	cmp	r6, r2
 8008146:	bf38      	it	cc
 8008148:	2300      	movcc	r3, #0
 800814a:	4423      	add	r3, r4
 800814c:	e015      	b.n	800817a <rshift+0x68>
 800814e:	46a1      	mov	r9, r4
 8008150:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008154:	f1c1 0820 	rsb	r8, r1, #32
 8008158:	40cf      	lsrs	r7, r1
 800815a:	f105 0e04 	add.w	lr, r5, #4
 800815e:	4576      	cmp	r6, lr
 8008160:	46f4      	mov	ip, lr
 8008162:	d816      	bhi.n	8008192 <rshift+0x80>
 8008164:	1a9a      	subs	r2, r3, r2
 8008166:	0092      	lsls	r2, r2, #2
 8008168:	3a04      	subs	r2, #4
 800816a:	3501      	adds	r5, #1
 800816c:	42ae      	cmp	r6, r5
 800816e:	bf38      	it	cc
 8008170:	2200      	movcc	r2, #0
 8008172:	18a3      	adds	r3, r4, r2
 8008174:	50a7      	str	r7, [r4, r2]
 8008176:	b107      	cbz	r7, 800817a <rshift+0x68>
 8008178:	3304      	adds	r3, #4
 800817a:	42a3      	cmp	r3, r4
 800817c:	eba3 0204 	sub.w	r2, r3, r4
 8008180:	bf08      	it	eq
 8008182:	2300      	moveq	r3, #0
 8008184:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008188:	6102      	str	r2, [r0, #16]
 800818a:	bf08      	it	eq
 800818c:	6143      	streq	r3, [r0, #20]
 800818e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008192:	f8dc c000 	ldr.w	ip, [ip]
 8008196:	fa0c fc08 	lsl.w	ip, ip, r8
 800819a:	ea4c 0707 	orr.w	r7, ip, r7
 800819e:	f849 7b04 	str.w	r7, [r9], #4
 80081a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081a6:	40cf      	lsrs	r7, r1
 80081a8:	e7d9      	b.n	800815e <rshift+0x4c>
 80081aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80081ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80081b2:	e7c2      	b.n	800813a <rshift+0x28>
 80081b4:	4623      	mov	r3, r4
 80081b6:	e7e0      	b.n	800817a <rshift+0x68>

080081b8 <__hexdig_fun>:
 80081b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80081bc:	2b09      	cmp	r3, #9
 80081be:	d802      	bhi.n	80081c6 <__hexdig_fun+0xe>
 80081c0:	3820      	subs	r0, #32
 80081c2:	b2c0      	uxtb	r0, r0
 80081c4:	4770      	bx	lr
 80081c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80081ca:	2b05      	cmp	r3, #5
 80081cc:	d801      	bhi.n	80081d2 <__hexdig_fun+0x1a>
 80081ce:	3847      	subs	r0, #71	@ 0x47
 80081d0:	e7f7      	b.n	80081c2 <__hexdig_fun+0xa>
 80081d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80081d6:	2b05      	cmp	r3, #5
 80081d8:	d801      	bhi.n	80081de <__hexdig_fun+0x26>
 80081da:	3827      	subs	r0, #39	@ 0x27
 80081dc:	e7f1      	b.n	80081c2 <__hexdig_fun+0xa>
 80081de:	2000      	movs	r0, #0
 80081e0:	4770      	bx	lr
	...

080081e4 <__gethex>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	468a      	mov	sl, r1
 80081ea:	4690      	mov	r8, r2
 80081ec:	b085      	sub	sp, #20
 80081ee:	9302      	str	r3, [sp, #8]
 80081f0:	680b      	ldr	r3, [r1, #0]
 80081f2:	9001      	str	r0, [sp, #4]
 80081f4:	1c9c      	adds	r4, r3, #2
 80081f6:	46a1      	mov	r9, r4
 80081f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80081fc:	2830      	cmp	r0, #48	@ 0x30
 80081fe:	d0fa      	beq.n	80081f6 <__gethex+0x12>
 8008200:	eba9 0303 	sub.w	r3, r9, r3
 8008204:	f1a3 0b02 	sub.w	fp, r3, #2
 8008208:	f7ff ffd6 	bl	80081b8 <__hexdig_fun>
 800820c:	4605      	mov	r5, r0
 800820e:	2800      	cmp	r0, #0
 8008210:	d168      	bne.n	80082e4 <__gethex+0x100>
 8008212:	2201      	movs	r2, #1
 8008214:	4648      	mov	r0, r9
 8008216:	499f      	ldr	r1, [pc, #636]	@ (8008494 <__gethex+0x2b0>)
 8008218:	f7ff ff38 	bl	800808c <strncmp>
 800821c:	4607      	mov	r7, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	d167      	bne.n	80082f2 <__gethex+0x10e>
 8008222:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008226:	4626      	mov	r6, r4
 8008228:	f7ff ffc6 	bl	80081b8 <__hexdig_fun>
 800822c:	2800      	cmp	r0, #0
 800822e:	d062      	beq.n	80082f6 <__gethex+0x112>
 8008230:	4623      	mov	r3, r4
 8008232:	7818      	ldrb	r0, [r3, #0]
 8008234:	4699      	mov	r9, r3
 8008236:	2830      	cmp	r0, #48	@ 0x30
 8008238:	f103 0301 	add.w	r3, r3, #1
 800823c:	d0f9      	beq.n	8008232 <__gethex+0x4e>
 800823e:	f7ff ffbb 	bl	80081b8 <__hexdig_fun>
 8008242:	fab0 f580 	clz	r5, r0
 8008246:	f04f 0b01 	mov.w	fp, #1
 800824a:	096d      	lsrs	r5, r5, #5
 800824c:	464a      	mov	r2, r9
 800824e:	4616      	mov	r6, r2
 8008250:	7830      	ldrb	r0, [r6, #0]
 8008252:	3201      	adds	r2, #1
 8008254:	f7ff ffb0 	bl	80081b8 <__hexdig_fun>
 8008258:	2800      	cmp	r0, #0
 800825a:	d1f8      	bne.n	800824e <__gethex+0x6a>
 800825c:	2201      	movs	r2, #1
 800825e:	4630      	mov	r0, r6
 8008260:	498c      	ldr	r1, [pc, #560]	@ (8008494 <__gethex+0x2b0>)
 8008262:	f7ff ff13 	bl	800808c <strncmp>
 8008266:	2800      	cmp	r0, #0
 8008268:	d13f      	bne.n	80082ea <__gethex+0x106>
 800826a:	b944      	cbnz	r4, 800827e <__gethex+0x9a>
 800826c:	1c74      	adds	r4, r6, #1
 800826e:	4622      	mov	r2, r4
 8008270:	4616      	mov	r6, r2
 8008272:	7830      	ldrb	r0, [r6, #0]
 8008274:	3201      	adds	r2, #1
 8008276:	f7ff ff9f 	bl	80081b8 <__hexdig_fun>
 800827a:	2800      	cmp	r0, #0
 800827c:	d1f8      	bne.n	8008270 <__gethex+0x8c>
 800827e:	1ba4      	subs	r4, r4, r6
 8008280:	00a7      	lsls	r7, r4, #2
 8008282:	7833      	ldrb	r3, [r6, #0]
 8008284:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008288:	2b50      	cmp	r3, #80	@ 0x50
 800828a:	d13e      	bne.n	800830a <__gethex+0x126>
 800828c:	7873      	ldrb	r3, [r6, #1]
 800828e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008290:	d033      	beq.n	80082fa <__gethex+0x116>
 8008292:	2b2d      	cmp	r3, #45	@ 0x2d
 8008294:	d034      	beq.n	8008300 <__gethex+0x11c>
 8008296:	2400      	movs	r4, #0
 8008298:	1c71      	adds	r1, r6, #1
 800829a:	7808      	ldrb	r0, [r1, #0]
 800829c:	f7ff ff8c 	bl	80081b8 <__hexdig_fun>
 80082a0:	1e43      	subs	r3, r0, #1
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b18      	cmp	r3, #24
 80082a6:	d830      	bhi.n	800830a <__gethex+0x126>
 80082a8:	f1a0 0210 	sub.w	r2, r0, #16
 80082ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80082b0:	f7ff ff82 	bl	80081b8 <__hexdig_fun>
 80082b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80082b8:	fa5f fc8c 	uxtb.w	ip, ip
 80082bc:	f1bc 0f18 	cmp.w	ip, #24
 80082c0:	f04f 030a 	mov.w	r3, #10
 80082c4:	d91e      	bls.n	8008304 <__gethex+0x120>
 80082c6:	b104      	cbz	r4, 80082ca <__gethex+0xe6>
 80082c8:	4252      	negs	r2, r2
 80082ca:	4417      	add	r7, r2
 80082cc:	f8ca 1000 	str.w	r1, [sl]
 80082d0:	b1ed      	cbz	r5, 800830e <__gethex+0x12a>
 80082d2:	f1bb 0f00 	cmp.w	fp, #0
 80082d6:	bf0c      	ite	eq
 80082d8:	2506      	moveq	r5, #6
 80082da:	2500      	movne	r5, #0
 80082dc:	4628      	mov	r0, r5
 80082de:	b005      	add	sp, #20
 80082e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e4:	2500      	movs	r5, #0
 80082e6:	462c      	mov	r4, r5
 80082e8:	e7b0      	b.n	800824c <__gethex+0x68>
 80082ea:	2c00      	cmp	r4, #0
 80082ec:	d1c7      	bne.n	800827e <__gethex+0x9a>
 80082ee:	4627      	mov	r7, r4
 80082f0:	e7c7      	b.n	8008282 <__gethex+0x9e>
 80082f2:	464e      	mov	r6, r9
 80082f4:	462f      	mov	r7, r5
 80082f6:	2501      	movs	r5, #1
 80082f8:	e7c3      	b.n	8008282 <__gethex+0x9e>
 80082fa:	2400      	movs	r4, #0
 80082fc:	1cb1      	adds	r1, r6, #2
 80082fe:	e7cc      	b.n	800829a <__gethex+0xb6>
 8008300:	2401      	movs	r4, #1
 8008302:	e7fb      	b.n	80082fc <__gethex+0x118>
 8008304:	fb03 0002 	mla	r0, r3, r2, r0
 8008308:	e7ce      	b.n	80082a8 <__gethex+0xc4>
 800830a:	4631      	mov	r1, r6
 800830c:	e7de      	b.n	80082cc <__gethex+0xe8>
 800830e:	4629      	mov	r1, r5
 8008310:	eba6 0309 	sub.w	r3, r6, r9
 8008314:	3b01      	subs	r3, #1
 8008316:	2b07      	cmp	r3, #7
 8008318:	dc0a      	bgt.n	8008330 <__gethex+0x14c>
 800831a:	9801      	ldr	r0, [sp, #4]
 800831c:	f7fe f9e2 	bl	80066e4 <_Balloc>
 8008320:	4604      	mov	r4, r0
 8008322:	b940      	cbnz	r0, 8008336 <__gethex+0x152>
 8008324:	4602      	mov	r2, r0
 8008326:	21e4      	movs	r1, #228	@ 0xe4
 8008328:	4b5b      	ldr	r3, [pc, #364]	@ (8008498 <__gethex+0x2b4>)
 800832a:	485c      	ldr	r0, [pc, #368]	@ (800849c <__gethex+0x2b8>)
 800832c:	f7fd fa6c 	bl	8005808 <__assert_func>
 8008330:	3101      	adds	r1, #1
 8008332:	105b      	asrs	r3, r3, #1
 8008334:	e7ef      	b.n	8008316 <__gethex+0x132>
 8008336:	2300      	movs	r3, #0
 8008338:	f100 0a14 	add.w	sl, r0, #20
 800833c:	4655      	mov	r5, sl
 800833e:	469b      	mov	fp, r3
 8008340:	45b1      	cmp	r9, r6
 8008342:	d337      	bcc.n	80083b4 <__gethex+0x1d0>
 8008344:	f845 bb04 	str.w	fp, [r5], #4
 8008348:	eba5 050a 	sub.w	r5, r5, sl
 800834c:	10ad      	asrs	r5, r5, #2
 800834e:	6125      	str	r5, [r4, #16]
 8008350:	4658      	mov	r0, fp
 8008352:	f7fe fab9 	bl	80068c8 <__hi0bits>
 8008356:	016d      	lsls	r5, r5, #5
 8008358:	f8d8 6000 	ldr.w	r6, [r8]
 800835c:	1a2d      	subs	r5, r5, r0
 800835e:	42b5      	cmp	r5, r6
 8008360:	dd54      	ble.n	800840c <__gethex+0x228>
 8008362:	1bad      	subs	r5, r5, r6
 8008364:	4629      	mov	r1, r5
 8008366:	4620      	mov	r0, r4
 8008368:	f7fe fe41 	bl	8006fee <__any_on>
 800836c:	4681      	mov	r9, r0
 800836e:	b178      	cbz	r0, 8008390 <__gethex+0x1ac>
 8008370:	f04f 0901 	mov.w	r9, #1
 8008374:	1e6b      	subs	r3, r5, #1
 8008376:	1159      	asrs	r1, r3, #5
 8008378:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800837c:	f003 021f 	and.w	r2, r3, #31
 8008380:	fa09 f202 	lsl.w	r2, r9, r2
 8008384:	420a      	tst	r2, r1
 8008386:	d003      	beq.n	8008390 <__gethex+0x1ac>
 8008388:	454b      	cmp	r3, r9
 800838a:	dc36      	bgt.n	80083fa <__gethex+0x216>
 800838c:	f04f 0902 	mov.w	r9, #2
 8008390:	4629      	mov	r1, r5
 8008392:	4620      	mov	r0, r4
 8008394:	f7ff febd 	bl	8008112 <rshift>
 8008398:	442f      	add	r7, r5
 800839a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800839e:	42bb      	cmp	r3, r7
 80083a0:	da42      	bge.n	8008428 <__gethex+0x244>
 80083a2:	4621      	mov	r1, r4
 80083a4:	9801      	ldr	r0, [sp, #4]
 80083a6:	f7fe f9dd 	bl	8006764 <_Bfree>
 80083aa:	2300      	movs	r3, #0
 80083ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083ae:	25a3      	movs	r5, #163	@ 0xa3
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	e793      	b.n	80082dc <__gethex+0xf8>
 80083b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80083b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80083ba:	d012      	beq.n	80083e2 <__gethex+0x1fe>
 80083bc:	2b20      	cmp	r3, #32
 80083be:	d104      	bne.n	80083ca <__gethex+0x1e6>
 80083c0:	f845 bb04 	str.w	fp, [r5], #4
 80083c4:	f04f 0b00 	mov.w	fp, #0
 80083c8:	465b      	mov	r3, fp
 80083ca:	7830      	ldrb	r0, [r6, #0]
 80083cc:	9303      	str	r3, [sp, #12]
 80083ce:	f7ff fef3 	bl	80081b8 <__hexdig_fun>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	f000 000f 	and.w	r0, r0, #15
 80083d8:	4098      	lsls	r0, r3
 80083da:	ea4b 0b00 	orr.w	fp, fp, r0
 80083de:	3304      	adds	r3, #4
 80083e0:	e7ae      	b.n	8008340 <__gethex+0x15c>
 80083e2:	45b1      	cmp	r9, r6
 80083e4:	d8ea      	bhi.n	80083bc <__gethex+0x1d8>
 80083e6:	2201      	movs	r2, #1
 80083e8:	4630      	mov	r0, r6
 80083ea:	492a      	ldr	r1, [pc, #168]	@ (8008494 <__gethex+0x2b0>)
 80083ec:	9303      	str	r3, [sp, #12]
 80083ee:	f7ff fe4d 	bl	800808c <strncmp>
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d1e1      	bne.n	80083bc <__gethex+0x1d8>
 80083f8:	e7a2      	b.n	8008340 <__gethex+0x15c>
 80083fa:	4620      	mov	r0, r4
 80083fc:	1ea9      	subs	r1, r5, #2
 80083fe:	f7fe fdf6 	bl	8006fee <__any_on>
 8008402:	2800      	cmp	r0, #0
 8008404:	d0c2      	beq.n	800838c <__gethex+0x1a8>
 8008406:	f04f 0903 	mov.w	r9, #3
 800840a:	e7c1      	b.n	8008390 <__gethex+0x1ac>
 800840c:	da09      	bge.n	8008422 <__gethex+0x23e>
 800840e:	1b75      	subs	r5, r6, r5
 8008410:	4621      	mov	r1, r4
 8008412:	462a      	mov	r2, r5
 8008414:	9801      	ldr	r0, [sp, #4]
 8008416:	f7fe fbbb 	bl	8006b90 <__lshift>
 800841a:	4604      	mov	r4, r0
 800841c:	1b7f      	subs	r7, r7, r5
 800841e:	f100 0a14 	add.w	sl, r0, #20
 8008422:	f04f 0900 	mov.w	r9, #0
 8008426:	e7b8      	b.n	800839a <__gethex+0x1b6>
 8008428:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800842c:	42bd      	cmp	r5, r7
 800842e:	dd6f      	ble.n	8008510 <__gethex+0x32c>
 8008430:	1bed      	subs	r5, r5, r7
 8008432:	42ae      	cmp	r6, r5
 8008434:	dc34      	bgt.n	80084a0 <__gethex+0x2bc>
 8008436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d022      	beq.n	8008484 <__gethex+0x2a0>
 800843e:	2b03      	cmp	r3, #3
 8008440:	d024      	beq.n	800848c <__gethex+0x2a8>
 8008442:	2b01      	cmp	r3, #1
 8008444:	d115      	bne.n	8008472 <__gethex+0x28e>
 8008446:	42ae      	cmp	r6, r5
 8008448:	d113      	bne.n	8008472 <__gethex+0x28e>
 800844a:	2e01      	cmp	r6, #1
 800844c:	d10b      	bne.n	8008466 <__gethex+0x282>
 800844e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008452:	9a02      	ldr	r2, [sp, #8]
 8008454:	2562      	movs	r5, #98	@ 0x62
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	2301      	movs	r3, #1
 800845a:	6123      	str	r3, [r4, #16]
 800845c:	f8ca 3000 	str.w	r3, [sl]
 8008460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008462:	601c      	str	r4, [r3, #0]
 8008464:	e73a      	b.n	80082dc <__gethex+0xf8>
 8008466:	4620      	mov	r0, r4
 8008468:	1e71      	subs	r1, r6, #1
 800846a:	f7fe fdc0 	bl	8006fee <__any_on>
 800846e:	2800      	cmp	r0, #0
 8008470:	d1ed      	bne.n	800844e <__gethex+0x26a>
 8008472:	4621      	mov	r1, r4
 8008474:	9801      	ldr	r0, [sp, #4]
 8008476:	f7fe f975 	bl	8006764 <_Bfree>
 800847a:	2300      	movs	r3, #0
 800847c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800847e:	2550      	movs	r5, #80	@ 0x50
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	e72b      	b.n	80082dc <__gethex+0xf8>
 8008484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1f3      	bne.n	8008472 <__gethex+0x28e>
 800848a:	e7e0      	b.n	800844e <__gethex+0x26a>
 800848c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1dd      	bne.n	800844e <__gethex+0x26a>
 8008492:	e7ee      	b.n	8008472 <__gethex+0x28e>
 8008494:	08008da5 	.word	0x08008da5
 8008498:	0800aad4 	.word	0x0800aad4
 800849c:	0800aca7 	.word	0x0800aca7
 80084a0:	1e6f      	subs	r7, r5, #1
 80084a2:	f1b9 0f00 	cmp.w	r9, #0
 80084a6:	d130      	bne.n	800850a <__gethex+0x326>
 80084a8:	b127      	cbz	r7, 80084b4 <__gethex+0x2d0>
 80084aa:	4639      	mov	r1, r7
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7fe fd9e 	bl	8006fee <__any_on>
 80084b2:	4681      	mov	r9, r0
 80084b4:	2301      	movs	r3, #1
 80084b6:	4629      	mov	r1, r5
 80084b8:	1b76      	subs	r6, r6, r5
 80084ba:	2502      	movs	r5, #2
 80084bc:	117a      	asrs	r2, r7, #5
 80084be:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80084c2:	f007 071f 	and.w	r7, r7, #31
 80084c6:	40bb      	lsls	r3, r7
 80084c8:	4213      	tst	r3, r2
 80084ca:	4620      	mov	r0, r4
 80084cc:	bf18      	it	ne
 80084ce:	f049 0902 	orrne.w	r9, r9, #2
 80084d2:	f7ff fe1e 	bl	8008112 <rshift>
 80084d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80084da:	f1b9 0f00 	cmp.w	r9, #0
 80084de:	d047      	beq.n	8008570 <__gethex+0x38c>
 80084e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d015      	beq.n	8008514 <__gethex+0x330>
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d017      	beq.n	800851c <__gethex+0x338>
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d109      	bne.n	8008504 <__gethex+0x320>
 80084f0:	f019 0f02 	tst.w	r9, #2
 80084f4:	d006      	beq.n	8008504 <__gethex+0x320>
 80084f6:	f8da 3000 	ldr.w	r3, [sl]
 80084fa:	ea49 0903 	orr.w	r9, r9, r3
 80084fe:	f019 0f01 	tst.w	r9, #1
 8008502:	d10e      	bne.n	8008522 <__gethex+0x33e>
 8008504:	f045 0510 	orr.w	r5, r5, #16
 8008508:	e032      	b.n	8008570 <__gethex+0x38c>
 800850a:	f04f 0901 	mov.w	r9, #1
 800850e:	e7d1      	b.n	80084b4 <__gethex+0x2d0>
 8008510:	2501      	movs	r5, #1
 8008512:	e7e2      	b.n	80084da <__gethex+0x2f6>
 8008514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008516:	f1c3 0301 	rsb	r3, r3, #1
 800851a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800851c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f0      	beq.n	8008504 <__gethex+0x320>
 8008522:	f04f 0c00 	mov.w	ip, #0
 8008526:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800852a:	f104 0314 	add.w	r3, r4, #20
 800852e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008532:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008536:	4618      	mov	r0, r3
 8008538:	f853 2b04 	ldr.w	r2, [r3], #4
 800853c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008540:	d01b      	beq.n	800857a <__gethex+0x396>
 8008542:	3201      	adds	r2, #1
 8008544:	6002      	str	r2, [r0, #0]
 8008546:	2d02      	cmp	r5, #2
 8008548:	f104 0314 	add.w	r3, r4, #20
 800854c:	d13c      	bne.n	80085c8 <__gethex+0x3e4>
 800854e:	f8d8 2000 	ldr.w	r2, [r8]
 8008552:	3a01      	subs	r2, #1
 8008554:	42b2      	cmp	r2, r6
 8008556:	d109      	bne.n	800856c <__gethex+0x388>
 8008558:	2201      	movs	r2, #1
 800855a:	1171      	asrs	r1, r6, #5
 800855c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008560:	f006 061f 	and.w	r6, r6, #31
 8008564:	fa02 f606 	lsl.w	r6, r2, r6
 8008568:	421e      	tst	r6, r3
 800856a:	d13a      	bne.n	80085e2 <__gethex+0x3fe>
 800856c:	f045 0520 	orr.w	r5, r5, #32
 8008570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008572:	601c      	str	r4, [r3, #0]
 8008574:	9b02      	ldr	r3, [sp, #8]
 8008576:	601f      	str	r7, [r3, #0]
 8008578:	e6b0      	b.n	80082dc <__gethex+0xf8>
 800857a:	4299      	cmp	r1, r3
 800857c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008580:	d8d9      	bhi.n	8008536 <__gethex+0x352>
 8008582:	68a3      	ldr	r3, [r4, #8]
 8008584:	459b      	cmp	fp, r3
 8008586:	db17      	blt.n	80085b8 <__gethex+0x3d4>
 8008588:	6861      	ldr	r1, [r4, #4]
 800858a:	9801      	ldr	r0, [sp, #4]
 800858c:	3101      	adds	r1, #1
 800858e:	f7fe f8a9 	bl	80066e4 <_Balloc>
 8008592:	4681      	mov	r9, r0
 8008594:	b918      	cbnz	r0, 800859e <__gethex+0x3ba>
 8008596:	4602      	mov	r2, r0
 8008598:	2184      	movs	r1, #132	@ 0x84
 800859a:	4b19      	ldr	r3, [pc, #100]	@ (8008600 <__gethex+0x41c>)
 800859c:	e6c5      	b.n	800832a <__gethex+0x146>
 800859e:	6922      	ldr	r2, [r4, #16]
 80085a0:	f104 010c 	add.w	r1, r4, #12
 80085a4:	3202      	adds	r2, #2
 80085a6:	0092      	lsls	r2, r2, #2
 80085a8:	300c      	adds	r0, #12
 80085aa:	f7fd f91a 	bl	80057e2 <memcpy>
 80085ae:	4621      	mov	r1, r4
 80085b0:	9801      	ldr	r0, [sp, #4]
 80085b2:	f7fe f8d7 	bl	8006764 <_Bfree>
 80085b6:	464c      	mov	r4, r9
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	6122      	str	r2, [r4, #16]
 80085be:	2201      	movs	r2, #1
 80085c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085c4:	615a      	str	r2, [r3, #20]
 80085c6:	e7be      	b.n	8008546 <__gethex+0x362>
 80085c8:	6922      	ldr	r2, [r4, #16]
 80085ca:	455a      	cmp	r2, fp
 80085cc:	dd0b      	ble.n	80085e6 <__gethex+0x402>
 80085ce:	2101      	movs	r1, #1
 80085d0:	4620      	mov	r0, r4
 80085d2:	f7ff fd9e 	bl	8008112 <rshift>
 80085d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085da:	3701      	adds	r7, #1
 80085dc:	42bb      	cmp	r3, r7
 80085de:	f6ff aee0 	blt.w	80083a2 <__gethex+0x1be>
 80085e2:	2501      	movs	r5, #1
 80085e4:	e7c2      	b.n	800856c <__gethex+0x388>
 80085e6:	f016 061f 	ands.w	r6, r6, #31
 80085ea:	d0fa      	beq.n	80085e2 <__gethex+0x3fe>
 80085ec:	4453      	add	r3, sl
 80085ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80085f2:	f7fe f969 	bl	80068c8 <__hi0bits>
 80085f6:	f1c6 0620 	rsb	r6, r6, #32
 80085fa:	42b0      	cmp	r0, r6
 80085fc:	dbe7      	blt.n	80085ce <__gethex+0x3ea>
 80085fe:	e7f0      	b.n	80085e2 <__gethex+0x3fe>
 8008600:	0800aad4 	.word	0x0800aad4

08008604 <L_shift>:
 8008604:	f1c2 0208 	rsb	r2, r2, #8
 8008608:	0092      	lsls	r2, r2, #2
 800860a:	b570      	push	{r4, r5, r6, lr}
 800860c:	f1c2 0620 	rsb	r6, r2, #32
 8008610:	6843      	ldr	r3, [r0, #4]
 8008612:	6804      	ldr	r4, [r0, #0]
 8008614:	fa03 f506 	lsl.w	r5, r3, r6
 8008618:	432c      	orrs	r4, r5
 800861a:	40d3      	lsrs	r3, r2
 800861c:	6004      	str	r4, [r0, #0]
 800861e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008622:	4288      	cmp	r0, r1
 8008624:	d3f4      	bcc.n	8008610 <L_shift+0xc>
 8008626:	bd70      	pop	{r4, r5, r6, pc}

08008628 <__match>:
 8008628:	b530      	push	{r4, r5, lr}
 800862a:	6803      	ldr	r3, [r0, #0]
 800862c:	3301      	adds	r3, #1
 800862e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008632:	b914      	cbnz	r4, 800863a <__match+0x12>
 8008634:	6003      	str	r3, [r0, #0]
 8008636:	2001      	movs	r0, #1
 8008638:	bd30      	pop	{r4, r5, pc}
 800863a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800863e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008642:	2d19      	cmp	r5, #25
 8008644:	bf98      	it	ls
 8008646:	3220      	addls	r2, #32
 8008648:	42a2      	cmp	r2, r4
 800864a:	d0f0      	beq.n	800862e <__match+0x6>
 800864c:	2000      	movs	r0, #0
 800864e:	e7f3      	b.n	8008638 <__match+0x10>

08008650 <__hexnan>:
 8008650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	2500      	movs	r5, #0
 8008656:	680b      	ldr	r3, [r1, #0]
 8008658:	4682      	mov	sl, r0
 800865a:	115e      	asrs	r6, r3, #5
 800865c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008660:	f013 031f 	ands.w	r3, r3, #31
 8008664:	bf18      	it	ne
 8008666:	3604      	addne	r6, #4
 8008668:	1f37      	subs	r7, r6, #4
 800866a:	4690      	mov	r8, r2
 800866c:	46b9      	mov	r9, r7
 800866e:	463c      	mov	r4, r7
 8008670:	46ab      	mov	fp, r5
 8008672:	b087      	sub	sp, #28
 8008674:	6801      	ldr	r1, [r0, #0]
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	f846 5c04 	str.w	r5, [r6, #-4]
 800867c:	9502      	str	r5, [sp, #8]
 800867e:	784a      	ldrb	r2, [r1, #1]
 8008680:	1c4b      	adds	r3, r1, #1
 8008682:	9303      	str	r3, [sp, #12]
 8008684:	b342      	cbz	r2, 80086d8 <__hexnan+0x88>
 8008686:	4610      	mov	r0, r2
 8008688:	9105      	str	r1, [sp, #20]
 800868a:	9204      	str	r2, [sp, #16]
 800868c:	f7ff fd94 	bl	80081b8 <__hexdig_fun>
 8008690:	2800      	cmp	r0, #0
 8008692:	d151      	bne.n	8008738 <__hexnan+0xe8>
 8008694:	9a04      	ldr	r2, [sp, #16]
 8008696:	9905      	ldr	r1, [sp, #20]
 8008698:	2a20      	cmp	r2, #32
 800869a:	d818      	bhi.n	80086ce <__hexnan+0x7e>
 800869c:	9b02      	ldr	r3, [sp, #8]
 800869e:	459b      	cmp	fp, r3
 80086a0:	dd13      	ble.n	80086ca <__hexnan+0x7a>
 80086a2:	454c      	cmp	r4, r9
 80086a4:	d206      	bcs.n	80086b4 <__hexnan+0x64>
 80086a6:	2d07      	cmp	r5, #7
 80086a8:	dc04      	bgt.n	80086b4 <__hexnan+0x64>
 80086aa:	462a      	mov	r2, r5
 80086ac:	4649      	mov	r1, r9
 80086ae:	4620      	mov	r0, r4
 80086b0:	f7ff ffa8 	bl	8008604 <L_shift>
 80086b4:	4544      	cmp	r4, r8
 80086b6:	d952      	bls.n	800875e <__hexnan+0x10e>
 80086b8:	2300      	movs	r3, #0
 80086ba:	f1a4 0904 	sub.w	r9, r4, #4
 80086be:	f844 3c04 	str.w	r3, [r4, #-4]
 80086c2:	461d      	mov	r5, r3
 80086c4:	464c      	mov	r4, r9
 80086c6:	f8cd b008 	str.w	fp, [sp, #8]
 80086ca:	9903      	ldr	r1, [sp, #12]
 80086cc:	e7d7      	b.n	800867e <__hexnan+0x2e>
 80086ce:	2a29      	cmp	r2, #41	@ 0x29
 80086d0:	d157      	bne.n	8008782 <__hexnan+0x132>
 80086d2:	3102      	adds	r1, #2
 80086d4:	f8ca 1000 	str.w	r1, [sl]
 80086d8:	f1bb 0f00 	cmp.w	fp, #0
 80086dc:	d051      	beq.n	8008782 <__hexnan+0x132>
 80086de:	454c      	cmp	r4, r9
 80086e0:	d206      	bcs.n	80086f0 <__hexnan+0xa0>
 80086e2:	2d07      	cmp	r5, #7
 80086e4:	dc04      	bgt.n	80086f0 <__hexnan+0xa0>
 80086e6:	462a      	mov	r2, r5
 80086e8:	4649      	mov	r1, r9
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7ff ff8a 	bl	8008604 <L_shift>
 80086f0:	4544      	cmp	r4, r8
 80086f2:	d936      	bls.n	8008762 <__hexnan+0x112>
 80086f4:	4623      	mov	r3, r4
 80086f6:	f1a8 0204 	sub.w	r2, r8, #4
 80086fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80086fe:	429f      	cmp	r7, r3
 8008700:	f842 1f04 	str.w	r1, [r2, #4]!
 8008704:	d2f9      	bcs.n	80086fa <__hexnan+0xaa>
 8008706:	1b3b      	subs	r3, r7, r4
 8008708:	f023 0303 	bic.w	r3, r3, #3
 800870c:	3304      	adds	r3, #4
 800870e:	3401      	adds	r4, #1
 8008710:	3e03      	subs	r6, #3
 8008712:	42b4      	cmp	r4, r6
 8008714:	bf88      	it	hi
 8008716:	2304      	movhi	r3, #4
 8008718:	2200      	movs	r2, #0
 800871a:	4443      	add	r3, r8
 800871c:	f843 2b04 	str.w	r2, [r3], #4
 8008720:	429f      	cmp	r7, r3
 8008722:	d2fb      	bcs.n	800871c <__hexnan+0xcc>
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	b91b      	cbnz	r3, 8008730 <__hexnan+0xe0>
 8008728:	4547      	cmp	r7, r8
 800872a:	d128      	bne.n	800877e <__hexnan+0x12e>
 800872c:	2301      	movs	r3, #1
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	2005      	movs	r0, #5
 8008732:	b007      	add	sp, #28
 8008734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008738:	3501      	adds	r5, #1
 800873a:	2d08      	cmp	r5, #8
 800873c:	f10b 0b01 	add.w	fp, fp, #1
 8008740:	dd06      	ble.n	8008750 <__hexnan+0x100>
 8008742:	4544      	cmp	r4, r8
 8008744:	d9c1      	bls.n	80086ca <__hexnan+0x7a>
 8008746:	2300      	movs	r3, #0
 8008748:	2501      	movs	r5, #1
 800874a:	f844 3c04 	str.w	r3, [r4, #-4]
 800874e:	3c04      	subs	r4, #4
 8008750:	6822      	ldr	r2, [r4, #0]
 8008752:	f000 000f 	and.w	r0, r0, #15
 8008756:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800875a:	6020      	str	r0, [r4, #0]
 800875c:	e7b5      	b.n	80086ca <__hexnan+0x7a>
 800875e:	2508      	movs	r5, #8
 8008760:	e7b3      	b.n	80086ca <__hexnan+0x7a>
 8008762:	9b01      	ldr	r3, [sp, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0dd      	beq.n	8008724 <__hexnan+0xd4>
 8008768:	f04f 32ff 	mov.w	r2, #4294967295
 800876c:	f1c3 0320 	rsb	r3, r3, #32
 8008770:	40da      	lsrs	r2, r3
 8008772:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008776:	4013      	ands	r3, r2
 8008778:	f846 3c04 	str.w	r3, [r6, #-4]
 800877c:	e7d2      	b.n	8008724 <__hexnan+0xd4>
 800877e:	3f04      	subs	r7, #4
 8008780:	e7d0      	b.n	8008724 <__hexnan+0xd4>
 8008782:	2004      	movs	r0, #4
 8008784:	e7d5      	b.n	8008732 <__hexnan+0xe2>

08008786 <__ascii_mbtowc>:
 8008786:	b082      	sub	sp, #8
 8008788:	b901      	cbnz	r1, 800878c <__ascii_mbtowc+0x6>
 800878a:	a901      	add	r1, sp, #4
 800878c:	b142      	cbz	r2, 80087a0 <__ascii_mbtowc+0x1a>
 800878e:	b14b      	cbz	r3, 80087a4 <__ascii_mbtowc+0x1e>
 8008790:	7813      	ldrb	r3, [r2, #0]
 8008792:	600b      	str	r3, [r1, #0]
 8008794:	7812      	ldrb	r2, [r2, #0]
 8008796:	1e10      	subs	r0, r2, #0
 8008798:	bf18      	it	ne
 800879a:	2001      	movne	r0, #1
 800879c:	b002      	add	sp, #8
 800879e:	4770      	bx	lr
 80087a0:	4610      	mov	r0, r2
 80087a2:	e7fb      	b.n	800879c <__ascii_mbtowc+0x16>
 80087a4:	f06f 0001 	mvn.w	r0, #1
 80087a8:	e7f8      	b.n	800879c <__ascii_mbtowc+0x16>

080087aa <_realloc_r>:
 80087aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ae:	4680      	mov	r8, r0
 80087b0:	4615      	mov	r5, r2
 80087b2:	460c      	mov	r4, r1
 80087b4:	b921      	cbnz	r1, 80087c0 <_realloc_r+0x16>
 80087b6:	4611      	mov	r1, r2
 80087b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087bc:	f7fd bf06 	b.w	80065cc <_malloc_r>
 80087c0:	b92a      	cbnz	r2, 80087ce <_realloc_r+0x24>
 80087c2:	f7fd fe91 	bl	80064e8 <_free_r>
 80087c6:	2400      	movs	r4, #0
 80087c8:	4620      	mov	r0, r4
 80087ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ce:	f000 fa3f 	bl	8008c50 <_malloc_usable_size_r>
 80087d2:	4285      	cmp	r5, r0
 80087d4:	4606      	mov	r6, r0
 80087d6:	d802      	bhi.n	80087de <_realloc_r+0x34>
 80087d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087dc:	d8f4      	bhi.n	80087c8 <_realloc_r+0x1e>
 80087de:	4629      	mov	r1, r5
 80087e0:	4640      	mov	r0, r8
 80087e2:	f7fd fef3 	bl	80065cc <_malloc_r>
 80087e6:	4607      	mov	r7, r0
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d0ec      	beq.n	80087c6 <_realloc_r+0x1c>
 80087ec:	42b5      	cmp	r5, r6
 80087ee:	462a      	mov	r2, r5
 80087f0:	4621      	mov	r1, r4
 80087f2:	bf28      	it	cs
 80087f4:	4632      	movcs	r2, r6
 80087f6:	f7fc fff4 	bl	80057e2 <memcpy>
 80087fa:	4621      	mov	r1, r4
 80087fc:	4640      	mov	r0, r8
 80087fe:	f7fd fe73 	bl	80064e8 <_free_r>
 8008802:	463c      	mov	r4, r7
 8008804:	e7e0      	b.n	80087c8 <_realloc_r+0x1e>

08008806 <__ascii_wctomb>:
 8008806:	4603      	mov	r3, r0
 8008808:	4608      	mov	r0, r1
 800880a:	b141      	cbz	r1, 800881e <__ascii_wctomb+0x18>
 800880c:	2aff      	cmp	r2, #255	@ 0xff
 800880e:	d904      	bls.n	800881a <__ascii_wctomb+0x14>
 8008810:	228a      	movs	r2, #138	@ 0x8a
 8008812:	f04f 30ff 	mov.w	r0, #4294967295
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	4770      	bx	lr
 800881a:	2001      	movs	r0, #1
 800881c:	700a      	strb	r2, [r1, #0]
 800881e:	4770      	bx	lr

08008820 <__sfputc_r>:
 8008820:	6893      	ldr	r3, [r2, #8]
 8008822:	b410      	push	{r4}
 8008824:	3b01      	subs	r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	6093      	str	r3, [r2, #8]
 800882a:	da07      	bge.n	800883c <__sfputc_r+0x1c>
 800882c:	6994      	ldr	r4, [r2, #24]
 800882e:	42a3      	cmp	r3, r4
 8008830:	db01      	blt.n	8008836 <__sfputc_r+0x16>
 8008832:	290a      	cmp	r1, #10
 8008834:	d102      	bne.n	800883c <__sfputc_r+0x1c>
 8008836:	bc10      	pop	{r4}
 8008838:	f000 b932 	b.w	8008aa0 <__swbuf_r>
 800883c:	6813      	ldr	r3, [r2, #0]
 800883e:	1c58      	adds	r0, r3, #1
 8008840:	6010      	str	r0, [r2, #0]
 8008842:	7019      	strb	r1, [r3, #0]
 8008844:	4608      	mov	r0, r1
 8008846:	bc10      	pop	{r4}
 8008848:	4770      	bx	lr

0800884a <__sfputs_r>:
 800884a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884c:	4606      	mov	r6, r0
 800884e:	460f      	mov	r7, r1
 8008850:	4614      	mov	r4, r2
 8008852:	18d5      	adds	r5, r2, r3
 8008854:	42ac      	cmp	r4, r5
 8008856:	d101      	bne.n	800885c <__sfputs_r+0x12>
 8008858:	2000      	movs	r0, #0
 800885a:	e007      	b.n	800886c <__sfputs_r+0x22>
 800885c:	463a      	mov	r2, r7
 800885e:	4630      	mov	r0, r6
 8008860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008864:	f7ff ffdc 	bl	8008820 <__sfputc_r>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d1f3      	bne.n	8008854 <__sfputs_r+0xa>
 800886c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008870 <_vfiprintf_r>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	460d      	mov	r5, r1
 8008876:	4614      	mov	r4, r2
 8008878:	4698      	mov	r8, r3
 800887a:	4606      	mov	r6, r0
 800887c:	b09d      	sub	sp, #116	@ 0x74
 800887e:	b118      	cbz	r0, 8008888 <_vfiprintf_r+0x18>
 8008880:	6a03      	ldr	r3, [r0, #32]
 8008882:	b90b      	cbnz	r3, 8008888 <_vfiprintf_r+0x18>
 8008884:	f7fc fe7e 	bl	8005584 <__sinit>
 8008888:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800888a:	07d9      	lsls	r1, r3, #31
 800888c:	d405      	bmi.n	800889a <_vfiprintf_r+0x2a>
 800888e:	89ab      	ldrh	r3, [r5, #12]
 8008890:	059a      	lsls	r2, r3, #22
 8008892:	d402      	bmi.n	800889a <_vfiprintf_r+0x2a>
 8008894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008896:	f7fc ff8c 	bl	80057b2 <__retarget_lock_acquire_recursive>
 800889a:	89ab      	ldrh	r3, [r5, #12]
 800889c:	071b      	lsls	r3, r3, #28
 800889e:	d501      	bpl.n	80088a4 <_vfiprintf_r+0x34>
 80088a0:	692b      	ldr	r3, [r5, #16]
 80088a2:	b99b      	cbnz	r3, 80088cc <_vfiprintf_r+0x5c>
 80088a4:	4629      	mov	r1, r5
 80088a6:	4630      	mov	r0, r6
 80088a8:	f000 f938 	bl	8008b1c <__swsetup_r>
 80088ac:	b170      	cbz	r0, 80088cc <_vfiprintf_r+0x5c>
 80088ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088b0:	07dc      	lsls	r4, r3, #31
 80088b2:	d504      	bpl.n	80088be <_vfiprintf_r+0x4e>
 80088b4:	f04f 30ff 	mov.w	r0, #4294967295
 80088b8:	b01d      	add	sp, #116	@ 0x74
 80088ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088be:	89ab      	ldrh	r3, [r5, #12]
 80088c0:	0598      	lsls	r0, r3, #22
 80088c2:	d4f7      	bmi.n	80088b4 <_vfiprintf_r+0x44>
 80088c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088c6:	f7fc ff75 	bl	80057b4 <__retarget_lock_release_recursive>
 80088ca:	e7f3      	b.n	80088b4 <_vfiprintf_r+0x44>
 80088cc:	2300      	movs	r3, #0
 80088ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80088d0:	2320      	movs	r3, #32
 80088d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088d6:	2330      	movs	r3, #48	@ 0x30
 80088d8:	f04f 0901 	mov.w	r9, #1
 80088dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80088e0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008a8c <_vfiprintf_r+0x21c>
 80088e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088e8:	4623      	mov	r3, r4
 80088ea:	469a      	mov	sl, r3
 80088ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088f0:	b10a      	cbz	r2, 80088f6 <_vfiprintf_r+0x86>
 80088f2:	2a25      	cmp	r2, #37	@ 0x25
 80088f4:	d1f9      	bne.n	80088ea <_vfiprintf_r+0x7a>
 80088f6:	ebba 0b04 	subs.w	fp, sl, r4
 80088fa:	d00b      	beq.n	8008914 <_vfiprintf_r+0xa4>
 80088fc:	465b      	mov	r3, fp
 80088fe:	4622      	mov	r2, r4
 8008900:	4629      	mov	r1, r5
 8008902:	4630      	mov	r0, r6
 8008904:	f7ff ffa1 	bl	800884a <__sfputs_r>
 8008908:	3001      	adds	r0, #1
 800890a:	f000 80a7 	beq.w	8008a5c <_vfiprintf_r+0x1ec>
 800890e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008910:	445a      	add	r2, fp
 8008912:	9209      	str	r2, [sp, #36]	@ 0x24
 8008914:	f89a 3000 	ldrb.w	r3, [sl]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 809f 	beq.w	8008a5c <_vfiprintf_r+0x1ec>
 800891e:	2300      	movs	r3, #0
 8008920:	f04f 32ff 	mov.w	r2, #4294967295
 8008924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008928:	f10a 0a01 	add.w	sl, sl, #1
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	9307      	str	r3, [sp, #28]
 8008930:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008934:	931a      	str	r3, [sp, #104]	@ 0x68
 8008936:	4654      	mov	r4, sl
 8008938:	2205      	movs	r2, #5
 800893a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800893e:	4853      	ldr	r0, [pc, #332]	@ (8008a8c <_vfiprintf_r+0x21c>)
 8008940:	f7fc ff41 	bl	80057c6 <memchr>
 8008944:	9a04      	ldr	r2, [sp, #16]
 8008946:	b9d8      	cbnz	r0, 8008980 <_vfiprintf_r+0x110>
 8008948:	06d1      	lsls	r1, r2, #27
 800894a:	bf44      	itt	mi
 800894c:	2320      	movmi	r3, #32
 800894e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008952:	0713      	lsls	r3, r2, #28
 8008954:	bf44      	itt	mi
 8008956:	232b      	movmi	r3, #43	@ 0x2b
 8008958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800895c:	f89a 3000 	ldrb.w	r3, [sl]
 8008960:	2b2a      	cmp	r3, #42	@ 0x2a
 8008962:	d015      	beq.n	8008990 <_vfiprintf_r+0x120>
 8008964:	4654      	mov	r4, sl
 8008966:	2000      	movs	r0, #0
 8008968:	f04f 0c0a 	mov.w	ip, #10
 800896c:	9a07      	ldr	r2, [sp, #28]
 800896e:	4621      	mov	r1, r4
 8008970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008974:	3b30      	subs	r3, #48	@ 0x30
 8008976:	2b09      	cmp	r3, #9
 8008978:	d94b      	bls.n	8008a12 <_vfiprintf_r+0x1a2>
 800897a:	b1b0      	cbz	r0, 80089aa <_vfiprintf_r+0x13a>
 800897c:	9207      	str	r2, [sp, #28]
 800897e:	e014      	b.n	80089aa <_vfiprintf_r+0x13a>
 8008980:	eba0 0308 	sub.w	r3, r0, r8
 8008984:	fa09 f303 	lsl.w	r3, r9, r3
 8008988:	4313      	orrs	r3, r2
 800898a:	46a2      	mov	sl, r4
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	e7d2      	b.n	8008936 <_vfiprintf_r+0xc6>
 8008990:	9b03      	ldr	r3, [sp, #12]
 8008992:	1d19      	adds	r1, r3, #4
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	9103      	str	r1, [sp, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	bfbb      	ittet	lt
 800899c:	425b      	neglt	r3, r3
 800899e:	f042 0202 	orrlt.w	r2, r2, #2
 80089a2:	9307      	strge	r3, [sp, #28]
 80089a4:	9307      	strlt	r3, [sp, #28]
 80089a6:	bfb8      	it	lt
 80089a8:	9204      	strlt	r2, [sp, #16]
 80089aa:	7823      	ldrb	r3, [r4, #0]
 80089ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80089ae:	d10a      	bne.n	80089c6 <_vfiprintf_r+0x156>
 80089b0:	7863      	ldrb	r3, [r4, #1]
 80089b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b4:	d132      	bne.n	8008a1c <_vfiprintf_r+0x1ac>
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	3402      	adds	r4, #2
 80089ba:	1d1a      	adds	r2, r3, #4
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	9203      	str	r2, [sp, #12]
 80089c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089c4:	9305      	str	r3, [sp, #20]
 80089c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008a90 <_vfiprintf_r+0x220>
 80089ca:	2203      	movs	r2, #3
 80089cc:	4650      	mov	r0, sl
 80089ce:	7821      	ldrb	r1, [r4, #0]
 80089d0:	f7fc fef9 	bl	80057c6 <memchr>
 80089d4:	b138      	cbz	r0, 80089e6 <_vfiprintf_r+0x176>
 80089d6:	2240      	movs	r2, #64	@ 0x40
 80089d8:	9b04      	ldr	r3, [sp, #16]
 80089da:	eba0 000a 	sub.w	r0, r0, sl
 80089de:	4082      	lsls	r2, r0
 80089e0:	4313      	orrs	r3, r2
 80089e2:	3401      	adds	r4, #1
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ea:	2206      	movs	r2, #6
 80089ec:	4829      	ldr	r0, [pc, #164]	@ (8008a94 <_vfiprintf_r+0x224>)
 80089ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089f2:	f7fc fee8 	bl	80057c6 <memchr>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d03f      	beq.n	8008a7a <_vfiprintf_r+0x20a>
 80089fa:	4b27      	ldr	r3, [pc, #156]	@ (8008a98 <_vfiprintf_r+0x228>)
 80089fc:	bb1b      	cbnz	r3, 8008a46 <_vfiprintf_r+0x1d6>
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	3307      	adds	r3, #7
 8008a02:	f023 0307 	bic.w	r3, r3, #7
 8008a06:	3308      	adds	r3, #8
 8008a08:	9303      	str	r3, [sp, #12]
 8008a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a0c:	443b      	add	r3, r7
 8008a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a10:	e76a      	b.n	80088e8 <_vfiprintf_r+0x78>
 8008a12:	460c      	mov	r4, r1
 8008a14:	2001      	movs	r0, #1
 8008a16:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a1a:	e7a8      	b.n	800896e <_vfiprintf_r+0xfe>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f04f 0c0a 	mov.w	ip, #10
 8008a22:	4619      	mov	r1, r3
 8008a24:	3401      	adds	r4, #1
 8008a26:	9305      	str	r3, [sp, #20]
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a2e:	3a30      	subs	r2, #48	@ 0x30
 8008a30:	2a09      	cmp	r2, #9
 8008a32:	d903      	bls.n	8008a3c <_vfiprintf_r+0x1cc>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0c6      	beq.n	80089c6 <_vfiprintf_r+0x156>
 8008a38:	9105      	str	r1, [sp, #20]
 8008a3a:	e7c4      	b.n	80089c6 <_vfiprintf_r+0x156>
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	2301      	movs	r3, #1
 8008a40:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a44:	e7f0      	b.n	8008a28 <_vfiprintf_r+0x1b8>
 8008a46:	ab03      	add	r3, sp, #12
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	4b13      	ldr	r3, [pc, #76]	@ (8008a9c <_vfiprintf_r+0x22c>)
 8008a50:	a904      	add	r1, sp, #16
 8008a52:	f7fb ff3d 	bl	80048d0 <_printf_float>
 8008a56:	4607      	mov	r7, r0
 8008a58:	1c78      	adds	r0, r7, #1
 8008a5a:	d1d6      	bne.n	8008a0a <_vfiprintf_r+0x19a>
 8008a5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a5e:	07d9      	lsls	r1, r3, #31
 8008a60:	d405      	bmi.n	8008a6e <_vfiprintf_r+0x1fe>
 8008a62:	89ab      	ldrh	r3, [r5, #12]
 8008a64:	059a      	lsls	r2, r3, #22
 8008a66:	d402      	bmi.n	8008a6e <_vfiprintf_r+0x1fe>
 8008a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a6a:	f7fc fea3 	bl	80057b4 <__retarget_lock_release_recursive>
 8008a6e:	89ab      	ldrh	r3, [r5, #12]
 8008a70:	065b      	lsls	r3, r3, #25
 8008a72:	f53f af1f 	bmi.w	80088b4 <_vfiprintf_r+0x44>
 8008a76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a78:	e71e      	b.n	80088b8 <_vfiprintf_r+0x48>
 8008a7a:	ab03      	add	r3, sp, #12
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	462a      	mov	r2, r5
 8008a80:	4630      	mov	r0, r6
 8008a82:	4b06      	ldr	r3, [pc, #24]	@ (8008a9c <_vfiprintf_r+0x22c>)
 8008a84:	a904      	add	r1, sp, #16
 8008a86:	f7fc f9c1 	bl	8004e0c <_printf_i>
 8008a8a:	e7e4      	b.n	8008a56 <_vfiprintf_r+0x1e6>
 8008a8c:	0800ac90 	.word	0x0800ac90
 8008a90:	0800ac96 	.word	0x0800ac96
 8008a94:	0800ac9a 	.word	0x0800ac9a
 8008a98:	080048d1 	.word	0x080048d1
 8008a9c:	0800884b 	.word	0x0800884b

08008aa0 <__swbuf_r>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	460e      	mov	r6, r1
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	b118      	cbz	r0, 8008ab2 <__swbuf_r+0x12>
 8008aaa:	6a03      	ldr	r3, [r0, #32]
 8008aac:	b90b      	cbnz	r3, 8008ab2 <__swbuf_r+0x12>
 8008aae:	f7fc fd69 	bl	8005584 <__sinit>
 8008ab2:	69a3      	ldr	r3, [r4, #24]
 8008ab4:	60a3      	str	r3, [r4, #8]
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	071a      	lsls	r2, r3, #28
 8008aba:	d501      	bpl.n	8008ac0 <__swbuf_r+0x20>
 8008abc:	6923      	ldr	r3, [r4, #16]
 8008abe:	b943      	cbnz	r3, 8008ad2 <__swbuf_r+0x32>
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f000 f82a 	bl	8008b1c <__swsetup_r>
 8008ac8:	b118      	cbz	r0, 8008ad2 <__swbuf_r+0x32>
 8008aca:	f04f 37ff 	mov.w	r7, #4294967295
 8008ace:	4638      	mov	r0, r7
 8008ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	6922      	ldr	r2, [r4, #16]
 8008ad6:	b2f6      	uxtb	r6, r6
 8008ad8:	1a98      	subs	r0, r3, r2
 8008ada:	6963      	ldr	r3, [r4, #20]
 8008adc:	4637      	mov	r7, r6
 8008ade:	4283      	cmp	r3, r0
 8008ae0:	dc05      	bgt.n	8008aee <__swbuf_r+0x4e>
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f7ff fa7d 	bl	8007fe4 <_fflush_r>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d1ed      	bne.n	8008aca <__swbuf_r+0x2a>
 8008aee:	68a3      	ldr	r3, [r4, #8]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	60a3      	str	r3, [r4, #8]
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	6022      	str	r2, [r4, #0]
 8008afa:	701e      	strb	r6, [r3, #0]
 8008afc:	6962      	ldr	r2, [r4, #20]
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d004      	beq.n	8008b0e <__swbuf_r+0x6e>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	07db      	lsls	r3, r3, #31
 8008b08:	d5e1      	bpl.n	8008ace <__swbuf_r+0x2e>
 8008b0a:	2e0a      	cmp	r6, #10
 8008b0c:	d1df      	bne.n	8008ace <__swbuf_r+0x2e>
 8008b0e:	4621      	mov	r1, r4
 8008b10:	4628      	mov	r0, r5
 8008b12:	f7ff fa67 	bl	8007fe4 <_fflush_r>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d0d9      	beq.n	8008ace <__swbuf_r+0x2e>
 8008b1a:	e7d6      	b.n	8008aca <__swbuf_r+0x2a>

08008b1c <__swsetup_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4b29      	ldr	r3, [pc, #164]	@ (8008bc4 <__swsetup_r+0xa8>)
 8008b20:	4605      	mov	r5, r0
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	460c      	mov	r4, r1
 8008b26:	b118      	cbz	r0, 8008b30 <__swsetup_r+0x14>
 8008b28:	6a03      	ldr	r3, [r0, #32]
 8008b2a:	b90b      	cbnz	r3, 8008b30 <__swsetup_r+0x14>
 8008b2c:	f7fc fd2a 	bl	8005584 <__sinit>
 8008b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b34:	0719      	lsls	r1, r3, #28
 8008b36:	d422      	bmi.n	8008b7e <__swsetup_r+0x62>
 8008b38:	06da      	lsls	r2, r3, #27
 8008b3a:	d407      	bmi.n	8008b4c <__swsetup_r+0x30>
 8008b3c:	2209      	movs	r2, #9
 8008b3e:	602a      	str	r2, [r5, #0]
 8008b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	e033      	b.n	8008bb4 <__swsetup_r+0x98>
 8008b4c:	0758      	lsls	r0, r3, #29
 8008b4e:	d512      	bpl.n	8008b76 <__swsetup_r+0x5a>
 8008b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b52:	b141      	cbz	r1, 8008b66 <__swsetup_r+0x4a>
 8008b54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b58:	4299      	cmp	r1, r3
 8008b5a:	d002      	beq.n	8008b62 <__swsetup_r+0x46>
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f7fd fcc3 	bl	80064e8 <_free_r>
 8008b62:	2300      	movs	r3, #0
 8008b64:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	6063      	str	r3, [r4, #4]
 8008b72:	6923      	ldr	r3, [r4, #16]
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	f043 0308 	orr.w	r3, r3, #8
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	b94b      	cbnz	r3, 8008b96 <__swsetup_r+0x7a>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b8c:	d003      	beq.n	8008b96 <__swsetup_r+0x7a>
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 f88a 	bl	8008caa <__smakebuf_r>
 8008b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9a:	f013 0201 	ands.w	r2, r3, #1
 8008b9e:	d00a      	beq.n	8008bb6 <__swsetup_r+0x9a>
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	60a2      	str	r2, [r4, #8]
 8008ba4:	6962      	ldr	r2, [r4, #20]
 8008ba6:	4252      	negs	r2, r2
 8008ba8:	61a2      	str	r2, [r4, #24]
 8008baa:	6922      	ldr	r2, [r4, #16]
 8008bac:	b942      	cbnz	r2, 8008bc0 <__swsetup_r+0xa4>
 8008bae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008bb2:	d1c5      	bne.n	8008b40 <__swsetup_r+0x24>
 8008bb4:	bd38      	pop	{r3, r4, r5, pc}
 8008bb6:	0799      	lsls	r1, r3, #30
 8008bb8:	bf58      	it	pl
 8008bba:	6962      	ldrpl	r2, [r4, #20]
 8008bbc:	60a2      	str	r2, [r4, #8]
 8008bbe:	e7f4      	b.n	8008baa <__swsetup_r+0x8e>
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	e7f7      	b.n	8008bb4 <__swsetup_r+0x98>
 8008bc4:	20000044 	.word	0x20000044

08008bc8 <_raise_r>:
 8008bc8:	291f      	cmp	r1, #31
 8008bca:	b538      	push	{r3, r4, r5, lr}
 8008bcc:	4605      	mov	r5, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	d904      	bls.n	8008bdc <_raise_r+0x14>
 8008bd2:	2316      	movs	r3, #22
 8008bd4:	6003      	str	r3, [r0, #0]
 8008bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008bde:	b112      	cbz	r2, 8008be6 <_raise_r+0x1e>
 8008be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008be4:	b94b      	cbnz	r3, 8008bfa <_raise_r+0x32>
 8008be6:	4628      	mov	r0, r5
 8008be8:	f000 f830 	bl	8008c4c <_getpid_r>
 8008bec:	4622      	mov	r2, r4
 8008bee:	4601      	mov	r1, r0
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf6:	f000 b817 	b.w	8008c28 <_kill_r>
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d00a      	beq.n	8008c14 <_raise_r+0x4c>
 8008bfe:	1c59      	adds	r1, r3, #1
 8008c00:	d103      	bne.n	8008c0a <_raise_r+0x42>
 8008c02:	2316      	movs	r3, #22
 8008c04:	6003      	str	r3, [r0, #0]
 8008c06:	2001      	movs	r0, #1
 8008c08:	e7e7      	b.n	8008bda <_raise_r+0x12>
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c12:	4798      	blx	r3
 8008c14:	2000      	movs	r0, #0
 8008c16:	e7e0      	b.n	8008bda <_raise_r+0x12>

08008c18 <raise>:
 8008c18:	4b02      	ldr	r3, [pc, #8]	@ (8008c24 <raise+0xc>)
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	f7ff bfd3 	b.w	8008bc8 <_raise_r>
 8008c22:	bf00      	nop
 8008c24:	20000044 	.word	0x20000044

08008c28 <_kill_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	4d06      	ldr	r5, [pc, #24]	@ (8008c48 <_kill_r+0x20>)
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	602b      	str	r3, [r5, #0]
 8008c36:	f7f9 fae5 	bl	8002204 <_kill>
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d102      	bne.n	8008c44 <_kill_r+0x1c>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b103      	cbz	r3, 8008c44 <_kill_r+0x1c>
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	bd38      	pop	{r3, r4, r5, pc}
 8008c46:	bf00      	nop
 8008c48:	20000aac 	.word	0x20000aac

08008c4c <_getpid_r>:
 8008c4c:	f7f9 bad8 	b.w	8002200 <_getpid>

08008c50 <_malloc_usable_size_r>:
 8008c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c54:	1f18      	subs	r0, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bfbc      	itt	lt
 8008c5a:	580b      	ldrlt	r3, [r1, r0]
 8008c5c:	18c0      	addlt	r0, r0, r3
 8008c5e:	4770      	bx	lr

08008c60 <__swhatbuf_r>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	460c      	mov	r4, r1
 8008c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c68:	4615      	mov	r5, r2
 8008c6a:	2900      	cmp	r1, #0
 8008c6c:	461e      	mov	r6, r3
 8008c6e:	b096      	sub	sp, #88	@ 0x58
 8008c70:	da0c      	bge.n	8008c8c <__swhatbuf_r+0x2c>
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	2100      	movs	r1, #0
 8008c76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c7a:	bf14      	ite	ne
 8008c7c:	2340      	movne	r3, #64	@ 0x40
 8008c7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c82:	2000      	movs	r0, #0
 8008c84:	6031      	str	r1, [r6, #0]
 8008c86:	602b      	str	r3, [r5, #0]
 8008c88:	b016      	add	sp, #88	@ 0x58
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	466a      	mov	r2, sp
 8008c8e:	f000 f849 	bl	8008d24 <_fstat_r>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	dbed      	blt.n	8008c72 <__swhatbuf_r+0x12>
 8008c96:	9901      	ldr	r1, [sp, #4]
 8008c98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ca0:	4259      	negs	r1, r3
 8008ca2:	4159      	adcs	r1, r3
 8008ca4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ca8:	e7eb      	b.n	8008c82 <__swhatbuf_r+0x22>

08008caa <__smakebuf_r>:
 8008caa:	898b      	ldrh	r3, [r1, #12]
 8008cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cae:	079d      	lsls	r5, r3, #30
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	d507      	bpl.n	8008cc6 <__smakebuf_r+0x1c>
 8008cb6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	6123      	str	r3, [r4, #16]
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	6163      	str	r3, [r4, #20]
 8008cc2:	b003      	add	sp, #12
 8008cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cc6:	466a      	mov	r2, sp
 8008cc8:	ab01      	add	r3, sp, #4
 8008cca:	f7ff ffc9 	bl	8008c60 <__swhatbuf_r>
 8008cce:	9f00      	ldr	r7, [sp, #0]
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f7fd fc79 	bl	80065cc <_malloc_r>
 8008cda:	b948      	cbnz	r0, 8008cf0 <__smakebuf_r+0x46>
 8008cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce0:	059a      	lsls	r2, r3, #22
 8008ce2:	d4ee      	bmi.n	8008cc2 <__smakebuf_r+0x18>
 8008ce4:	f023 0303 	bic.w	r3, r3, #3
 8008ce8:	f043 0302 	orr.w	r3, r3, #2
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	e7e2      	b.n	8008cb6 <__smakebuf_r+0xc>
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cfa:	81a3      	strh	r3, [r4, #12]
 8008cfc:	9b01      	ldr	r3, [sp, #4]
 8008cfe:	6020      	str	r0, [r4, #0]
 8008d00:	b15b      	cbz	r3, 8008d1a <__smakebuf_r+0x70>
 8008d02:	4630      	mov	r0, r6
 8008d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d08:	f000 f81e 	bl	8008d48 <_isatty_r>
 8008d0c:	b128      	cbz	r0, 8008d1a <__smakebuf_r+0x70>
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	f023 0303 	bic.w	r3, r3, #3
 8008d14:	f043 0301 	orr.w	r3, r3, #1
 8008d18:	81a3      	strh	r3, [r4, #12]
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	431d      	orrs	r5, r3
 8008d1e:	81a5      	strh	r5, [r4, #12]
 8008d20:	e7cf      	b.n	8008cc2 <__smakebuf_r+0x18>
	...

08008d24 <_fstat_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	2300      	movs	r3, #0
 8008d28:	4d06      	ldr	r5, [pc, #24]	@ (8008d44 <_fstat_r+0x20>)
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	4611      	mov	r1, r2
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	f7f9 fa94 	bl	800225e <_fstat>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d102      	bne.n	8008d40 <_fstat_r+0x1c>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	b103      	cbz	r3, 8008d40 <_fstat_r+0x1c>
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	bd38      	pop	{r3, r4, r5, pc}
 8008d42:	bf00      	nop
 8008d44:	20000aac 	.word	0x20000aac

08008d48 <_isatty_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	4d05      	ldr	r5, [pc, #20]	@ (8008d64 <_isatty_r+0x1c>)
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	f7f9 fa88 	bl	8002268 <_isatty>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_isatty_r+0x1a>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_isatty_r+0x1a>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000aac 	.word	0x20000aac

08008d68 <_init>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	bf00      	nop
 8008d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6e:	bc08      	pop	{r3}
 8008d70:	469e      	mov	lr, r3
 8008d72:	4770      	bx	lr

08008d74 <_fini>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	bf00      	nop
 8008d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7a:	bc08      	pop	{r3}
 8008d7c:	469e      	mov	lr, r3
 8008d7e:	4770      	bx	lr
