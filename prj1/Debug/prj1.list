
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008938  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003050  08008a48  08008a48  00009a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba98  0800ba98  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba98  0800ba98  0000ca98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baa0  0800baa0  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baa0  0800baa0  0000caa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800baa4  0800baa4  0000caa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800baa8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  200001f0  0800bc98  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  0800bc98  0000da1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b620  00000000  00000000  0000d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bbc  00000000  00000000  00028839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a7c2  00000000  00000000  0002c3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00036bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001178  00000000  00000000  00037d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a391  00000000  00000000  00038e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eaec  00000000  00000000  00053219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096b9f  00000000  00000000  00071d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001088a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004484  00000000  00000000  001088e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0010cd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a30 	.word	0x08008a30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08008a30 	.word	0x08008a30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_d2lz>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	460d      	mov	r5, r1
 8000ef6:	f7ff fe15 	bl	8000b24 <__aeabi_dcmplt>
 8000efa:	b928      	cbnz	r0, 8000f08 <__aeabi_d2lz+0x1c>
 8000efc:	4620      	mov	r0, r4
 8000efe:	4629      	mov	r1, r5
 8000f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f04:	f000 b80a 	b.w	8000f1c <__aeabi_d2ulz>
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f0e:	f000 f805 	bl	8000f1c <__aeabi_d2ulz>
 8000f12:	4240      	negs	r0, r0
 8000f14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
 8000f1a:	bf00      	nop

08000f1c <__aeabi_d2ulz>:
 8000f1c:	b5d0      	push	{r4, r6, r7, lr}
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <__aeabi_d2ulz+0x34>)
 8000f22:	4606      	mov	r6, r0
 8000f24:	460f      	mov	r7, r1
 8000f26:	f7ff fb8b 	bl	8000640 <__aeabi_dmul>
 8000f2a:	f7ff fe61 	bl	8000bf0 <__aeabi_d2uiz>
 8000f2e:	4604      	mov	r4, r0
 8000f30:	f7ff fb0c 	bl	800054c <__aeabi_ui2d>
 8000f34:	2200      	movs	r2, #0
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <__aeabi_d2ulz+0x38>)
 8000f38:	f7ff fb82 	bl	8000640 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4630      	mov	r0, r6
 8000f42:	4639      	mov	r1, r7
 8000f44:	f7ff f9c4 	bl	80002d0 <__aeabi_dsub>
 8000f48:	f7ff fe52 	bl	8000bf0 <__aeabi_d2uiz>
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000f50:	3df00000 	.word	0x3df00000
 8000f54:	41f00000 	.word	0x41f00000

08000f58 <ESP_UART_Init>:
    HAL_Delay(1); // Adjust this delay as needed
    HAL_UART_Transmit(AT_huart, (uint8_t *)data, strlen(data), 1000);
}

void ESP_UART_Init(UART_HandleTypeDef *huart){
    AT_huart = huart;
 8000f58:	4b01      	ldr	r3, [pc, #4]	@ (8000f60 <ESP_UART_Init+0x8>)
 8000f5a:	6018      	str	r0, [r3, #0]
}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2000020c 	.word	0x2000020c

08000f64 <DHT_getData>:
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
}

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8000f68:	798b      	ldrb	r3, [r1, #6]
DHT_data DHT_getData(DHT_sensor *sensor) {
 8000f6a:	460c      	mov	r4, r1
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000f6c:	2b00      	cmp	r3, #0
DHT_data DHT_getData(DHT_sensor *sensor) {
 8000f6e:	b085      	sub	sp, #20
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000f70:	bf14      	ite	ne
 8000f72:	f44f 757a 	movne.w	r5, #1000	@ 0x3e8
 8000f76:	f44f 65fa 	moveq.w	r5, #2000	@ 0x7d0
DHT_data DHT_getData(DHT_sensor *sensor) {
 8000f7a:	4606      	mov	r6, r0
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000f7c:	f001 f962 	bl	8002244 <HAL_GetTick>
 8000f80:	68a3      	ldr	r3, [r4, #8]
 8000f82:	1ac0      	subs	r0, r0, r3
 8000f84:	42a8      	cmp	r0, r5
 8000f86:	d208      	bcs.n	8000f9a <DHT_getData+0x36>
 8000f88:	b13b      	cbz	r3, 8000f9a <DHT_getData+0x36>
		data.hum = sensor->lastHum;
 8000f8a:	6925      	ldr	r5, [r4, #16]
		data.temp = sensor->lastTemp;
 8000f8c:	68e0      	ldr	r0, [r4, #12]
		return data;
 8000f8e:	6070      	str	r0, [r6, #4]
	sensor->lastHum = data.hum;
	sensor->lastTemp = data.temp;
	#endif

	return data;	
}
 8000f90:	4630      	mov	r0, r6
		return data;
 8000f92:	6035      	str	r5, [r6, #0]
}
 8000f94:	b005      	add	sp, #20
 8000f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8000f9a:	f001 f953 	bl	8002244 <HAL_GetTick>
 8000f9e:	3001      	adds	r0, #1
 8000fa0:	60a0      	str	r0, [r4, #8]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4668      	mov	r0, sp
 8000fa8:	f004 f9e9 	bl	800537e <memset>
  lineUp();
 8000fac:	2201      	movs	r2, #1
 8000fae:	88a1      	ldrh	r1, [r4, #4]
 8000fb0:	6820      	ldr	r0, [r4, #0]
 8000fb2:	f001 ff0b 	bl	8002dcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000fb6:	88a3      	ldrh	r3, [r4, #4]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000fb8:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000fba:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000fbc:	2311      	movs	r3, #17
 8000fbe:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000fc0:	79e3      	ldrb	r3, [r4, #7]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000fc2:	6820      	ldr	r0, [r4, #0]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000fc4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000fca:	f001 fe21 	bl	8002c10 <HAL_GPIO_Init>
	lineDown();
 8000fce:	88a1      	ldrh	r1, [r4, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6820      	ldr	r0, [r4, #0]
 8000fd4:	f001 fefa 	bl	8002dcc <HAL_GPIO_WritePin>
	Delay(18);
 8000fd8:	2012      	movs	r0, #18
 8000fda:	f001 f939 	bl	8002250 <HAL_Delay>
	lineUp();
 8000fde:	2201      	movs	r2, #1
 8000fe0:	88a1      	ldrh	r1, [r4, #4]
 8000fe2:	6820      	ldr	r0, [r4, #0]
 8000fe4:	f001 fef2 	bl	8002dcc <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	2300      	movs	r3, #0
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000fee:	88a3      	ldrh	r3, [r4, #4]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000ff0:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000ff2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000ff4:	79e3      	ldrb	r3, [r4, #7]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000ff6:	6820      	ldr	r0, [r4, #0]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000ff8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000ffa:	f001 fe09 	bl	8002c10 <HAL_GPIO_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffe:	b672      	cpsid	i
	while(getLine()) {
 8001000:	f242 7511 	movw	r5, #10001	@ 0x2711
 8001004:	88a1      	ldrh	r1, [r4, #4]
 8001006:	6820      	ldr	r0, [r4, #0]
 8001008:	f001 feda 	bl	8002dc0 <HAL_GPIO_ReadPin>
 800100c:	2801      	cmp	r0, #1
 800100e:	d01d      	beq.n	800104c <DHT_getData+0xe8>
 8001010:	f242 7511 	movw	r5, #10001	@ 0x2711
	while(!getLine()) {
 8001014:	88a1      	ldrh	r1, [r4, #4]
 8001016:	6820      	ldr	r0, [r4, #0]
 8001018:	f001 fed2 	bl	8002dc0 <HAL_GPIO_ReadPin>
 800101c:	2801      	cmp	r0, #1
 800101e:	d122      	bne.n	8001066 <DHT_getData+0x102>
 8001020:	f242 7511 	movw	r5, #10001	@ 0x2711
	while(getLine()) {
 8001024:	88a1      	ldrh	r1, [r4, #4]
 8001026:	6820      	ldr	r0, [r4, #0]
 8001028:	f001 feca 	bl	8002dc0 <HAL_GPIO_ReadPin>
 800102c:	2801      	cmp	r0, #1
 800102e:	d01f      	beq.n	8001070 <DHT_getData+0x10c>
	uint8_t rawData[5] = {0,0,0,0,0};
 8001030:	466d      	mov	r5, sp
 8001032:	f04f 0905 	mov.w	r9, #5
			if(hT > lT) rawData[a] |= (1<<b);
 8001036:	f04f 0a01 	mov.w	sl, #1
	uint8_t rawData[5] = {0,0,0,0,0};
 800103a:	4b4a      	ldr	r3, [pc, #296]	@ (8001164 <DHT_getData+0x200>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	9000      	str	r0, [sp, #0]
 8001042:	f88d 3004 	strb.w	r3, [sp, #4]
		for(uint8_t b = 7; b != 255; b--) {
 8001046:	f04f 0b07 	mov.w	fp, #7
 800104a:	e037      	b.n	80010bc <DHT_getData+0x158>
		if (timeout > DHT_TIMEOUT) {
 800104c:	3d01      	subs	r5, #1
 800104e:	b2ad      	uxth	r5, r5
 8001050:	2d00      	cmp	r5, #0
 8001052:	d1d7      	bne.n	8001004 <DHT_getData+0xa0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001054:	b662      	cpsie	i
			sensor->lastHum = -128.0f;
 8001056:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 800105a:	6123      	str	r3, [r4, #16]
			sensor->lastTemp = -128.0f;
 800105c:	60e3      	str	r3, [r4, #12]
	DHT_data data = {-128.0f, -128.0f};
 800105e:	f04f 4543 	mov.w	r5, #3271557120	@ 0xc3000000
 8001062:	4628      	mov	r0, r5
 8001064:	e793      	b.n	8000f8e <DHT_getData+0x2a>
		if (timeout > DHT_TIMEOUT) {
 8001066:	3d01      	subs	r5, #1
 8001068:	b2ad      	uxth	r5, r5
 800106a:	2d00      	cmp	r5, #0
 800106c:	d1d2      	bne.n	8001014 <DHT_getData+0xb0>
 800106e:	e7f1      	b.n	8001054 <DHT_getData+0xf0>
		if (timeout > DHT_TIMEOUT) {
 8001070:	3d01      	subs	r5, #1
 8001072:	b2ad      	uxth	r5, r5
 8001074:	2d00      	cmp	r5, #0
 8001076:	d1d5      	bne.n	8001024 <DHT_getData+0xc0>
 8001078:	b662      	cpsie	i
			return data;
 800107a:	e7f0      	b.n	800105e <DHT_getData+0xfa>
			while(!getLine() && lT != 65535) lT++;
 800107c:	88a1      	ldrh	r1, [r4, #4]
 800107e:	6820      	ldr	r0, [r4, #0]
 8001080:	f001 fe9e 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8001084:	2801      	cmp	r0, #1
 8001086:	d11b      	bne.n	80010c0 <DHT_getData+0x15c>
 8001088:	b2bf      	uxth	r7, r7
 800108a:	f04f 0800 	mov.w	r8, #0
			while(getLine()&& hT != 65535) hT++;
 800108e:	88a1      	ldrh	r1, [r4, #4]
 8001090:	6820      	ldr	r0, [r4, #0]
 8001092:	f001 fe95 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8001096:	2801      	cmp	r0, #1
 8001098:	d119      	bne.n	80010ce <DHT_getData+0x16a>
 800109a:	f108 0801 	add.w	r8, r8, #1
 800109e:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 80010a2:	d1f4      	bne.n	800108e <DHT_getData+0x12a>
 80010a4:	f64f 78ff 	movw	r8, #65535	@ 0xffff
			if(hT > lT) rawData[a] |= (1<<b);
 80010a8:	45b8      	cmp	r8, r7
 80010aa:	bf81      	itttt	hi
 80010ac:	782b      	ldrbhi	r3, [r5, #0]
 80010ae:	fa0a f20b 	lslhi.w	r2, sl, fp
 80010b2:	4313      	orrhi	r3, r2
 80010b4:	702b      	strbhi	r3, [r5, #0]
		for(uint8_t b = 7; b != 255; b--) {
 80010b6:	f1bb 0b01 	subs.w	fp, fp, #1
 80010ba:	d30b      	bcc.n	80010d4 <DHT_getData+0x170>
 80010bc:	2700      	movs	r7, #0
 80010be:	e7dd      	b.n	800107c <DHT_getData+0x118>
			while(!getLine() && lT != 65535) lT++;
 80010c0:	3701      	adds	r7, #1
 80010c2:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 80010c6:	d1d9      	bne.n	800107c <DHT_getData+0x118>
 80010c8:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80010cc:	e7dd      	b.n	800108a <DHT_getData+0x126>
 80010ce:	fa1f f888 	uxth.w	r8, r8
 80010d2:	e7e9      	b.n	80010a8 <DHT_getData+0x144>
	for(uint8_t a = 0; a < 5; a++) {
 80010d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80010d8:	f019 09ff 	ands.w	r9, r9, #255	@ 0xff
 80010dc:	f105 0501 	add.w	r5, r5, #1
 80010e0:	d1b1      	bne.n	8001046 <DHT_getData+0xe2>
 80010e2:	b662      	cpsie	i
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80010e4:	f89d 0000 	ldrb.w	r0, [sp]
 80010e8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80010ec:	f89d 7002 	ldrb.w	r7, [sp, #2]
 80010f0:	f89d 9003 	ldrb.w	r9, [sp, #3]
 80010f4:	4403      	add	r3, r0
 80010f6:	443b      	add	r3, r7
 80010f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80010fc:	444b      	add	r3, r9
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4299      	cmp	r1, r3
 8001102:	f8bd 2000 	ldrh.w	r2, [sp]
 8001106:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800110a:	d127      	bne.n	800115c <DHT_getData+0x1f8>
		if (sensor->type == DHT22) {
 800110c:	79a3      	ldrb	r3, [r4, #6]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d11c      	bne.n	800114c <DHT_getData+0x1e8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001112:	ba50      	rev16	r0, r2
 8001114:	b280      	uxth	r0, r0
 8001116:	f7ff fe95 	bl	8000e44 <__aeabi_i2f>
 800111a:	4913      	ldr	r1, [pc, #76]	@ (8001168 <DHT_getData+0x204>)
 800111c:	f7ff f820 	bl	8000160 <__aeabi_fmul>
			if(!(rawData[2] & (1<<7))) {
 8001120:	063b      	lsls	r3, r7, #24
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001122:	4605      	mov	r5, r0
			if(!(rawData[2] & (1<<7))) {
 8001124:	d40a      	bmi.n	800113c <DHT_getData+0x1d8>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001126:	fa98 f098 	rev16.w	r0, r8
 800112a:	b280      	uxth	r0, r0
 800112c:	f7ff fe8a 	bl	8000e44 <__aeabi_i2f>
 8001130:	490d      	ldr	r1, [pc, #52]	@ (8001168 <DHT_getData+0x204>)
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8001132:	f7ff f815 	bl	8000160 <__aeabi_fmul>
	sensor->lastHum = data.hum;
 8001136:	6125      	str	r5, [r4, #16]
	sensor->lastTemp = data.temp;
 8001138:	60e0      	str	r0, [r4, #12]
	return data;	
 800113a:	e728      	b.n	8000f8e <DHT_getData+0x2a>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800113c:	f007 007f 	and.w	r0, r7, #127	@ 0x7f
 8001140:	ea49 2000 	orr.w	r0, r9, r0, lsl #8
 8001144:	f7ff fe7e 	bl	8000e44 <__aeabi_i2f>
 8001148:	4908      	ldr	r1, [pc, #32]	@ (800116c <DHT_getData+0x208>)
 800114a:	e7f2      	b.n	8001132 <DHT_getData+0x1ce>
		if (sensor->type == DHT11) {
 800114c:	b933      	cbnz	r3, 800115c <DHT_getData+0x1f8>
			data.hum = (float)rawData[0];
 800114e:	f7ff fe75 	bl	8000e3c <__aeabi_ui2f>
 8001152:	4605      	mov	r5, r0
			data.temp = (float)rawData[2];
 8001154:	4638      	mov	r0, r7
 8001156:	f7ff fe71 	bl	8000e3c <__aeabi_ui2f>
 800115a:	e7ec      	b.n	8001136 <DHT_getData+0x1d2>
	DHT_data data = {-128.0f, -128.0f};
 800115c:	f04f 4043 	mov.w	r0, #3271557120	@ 0xc3000000
 8001160:	4605      	mov	r5, r0
 8001162:	e7e8      	b.n	8001136 <DHT_getData+0x1d2>
 8001164:	08008a48 	.word	0x08008a48
 8001168:	3dcccccd 	.word	0x3dcccccd
 800116c:	bdcccccd 	.word	0xbdcccccd

08001170 <Buzzer_SetFrequency>:
}

void Buzzer_SetFrequency(BuzzerTypeDef *buzzer, uint32_t frequency) {
    buzzer->frequency = frequency;

    uint32_t prescaler = 1000000/frequency  - 1;
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <Buzzer_SetFrequency+0x14>)
    buzzer->frequency = frequency;
 8001172:	6081      	str	r1, [r0, #8]
    uint32_t prescaler = 1000000/frequency  - 1;
 8001174:	fbb3 f1f1 	udiv	r1, r3, r1
    __HAL_TIM_SET_PRESCALER(buzzer->htim, prescaler);
 8001178:	6803      	ldr	r3, [r0, #0]
    uint32_t prescaler = 1000000/frequency  - 1;
 800117a:	3901      	subs	r1, #1
    __HAL_TIM_SET_PRESCALER(buzzer->htim, prescaler);
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6299      	str	r1, [r3, #40]	@ 0x28
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	000f4240 	.word	0x000f4240

08001188 <Buzzer_SetVolume>:

void Buzzer_SetVolume(BuzzerTypeDef *buzzer, uint8_t volume) {
    buzzer->volume = volume;
 8001188:	7301      	strb	r1, [r0, #12]
    uint32_t compare_value = volume;

    __HAL_TIM_SET_COMPARE(buzzer->htim, buzzer->channel, compare_value);
 800118a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b90a      	cbnz	r2, 8001196 <Buzzer_SetVolume+0xe>
 8001192:	6359      	str	r1, [r3, #52]	@ 0x34
 8001194:	4770      	bx	lr
 8001196:	2a04      	cmp	r2, #4
 8001198:	d101      	bne.n	800119e <Buzzer_SetVolume+0x16>
 800119a:	6399      	str	r1, [r3, #56]	@ 0x38
 800119c:	4770      	bx	lr
 800119e:	2a08      	cmp	r2, #8
 80011a0:	bf0c      	ite	eq
 80011a2:	63d9      	streq	r1, [r3, #60]	@ 0x3c
 80011a4:	6419      	strne	r1, [r3, #64]	@ 0x40
}
 80011a6:	4770      	bx	lr

080011a8 <Buzzer_Init>:
void Buzzer_Init(BuzzerTypeDef *buzzer) {
 80011a8:	b538      	push	{r3, r4, r5, lr}
    Buzzer_SetFrequency(buzzer, buzzer->frequency);
 80011aa:	6881      	ldr	r1, [r0, #8]
 80011ac:	f7ff ffe0 	bl	8001170 <Buzzer_SetFrequency>
    Buzzer_SetVolume(buzzer, buzzer->volume);
 80011b0:	7b01      	ldrb	r1, [r0, #12]
 80011b2:	f7ff ffe9 	bl	8001188 <Buzzer_SetVolume>
		if (buzzer->htim->Instance == TIM1){
 80011b6:	6803      	ldr	r3, [r0, #0]
void Buzzer_Init(BuzzerTypeDef *buzzer) {
 80011b8:	4604      	mov	r4, r0
		if (buzzer->htim->Instance == TIM1){
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <Buzzer_Init+0x40>)
 80011be:	4d0b      	ldr	r5, [pc, #44]	@ (80011ec <Buzzer_Init+0x44>)
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d10d      	bne.n	80011e0 <Buzzer_Init+0x38>
    	 period = HAL_RCC_GetPCLK2Freq()/1000000-1;
 80011c4:	f002 faf6 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
    	 period = HAL_RCC_GetPCLK1Freq()/1000000-1;
 80011c8:	fbb0 f3f5 	udiv	r3, r0, r5
    __HAL_TIM_SET_AUTORELOAD(buzzer->htim, period);
 80011cc:	6820      	ldr	r0, [r4, #0]
    	 period = HAL_RCC_GetPCLK1Freq()/1000000-1;
 80011ce:	3b01      	subs	r3, #1
    __HAL_TIM_SET_AUTORELOAD(buzzer->htim, period);
 80011d0:	6802      	ldr	r2, [r0, #0]
    HAL_TIM_PWM_Start(buzzer->htim, buzzer->channel);
 80011d2:	6861      	ldr	r1, [r4, #4]
    __HAL_TIM_SET_AUTORELOAD(buzzer->htim, period);
 80011d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011d6:	60c3      	str	r3, [r0, #12]
}
 80011d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_TIM_PWM_Start(buzzer->htim, buzzer->channel);
 80011dc:	f002 be24 	b.w	8003e28 <HAL_TIM_PWM_Start>
    	 period = HAL_RCC_GetPCLK1Freq()/1000000-1;
 80011e0:	f002 fad8 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 80011e4:	e7f0      	b.n	80011c8 <Buzzer_Init+0x20>
 80011e6:	bf00      	nop
 80011e8:	40012c00 	.word	0x40012c00
 80011ec:	000f4240 	.word	0x000f4240

080011f0 <playMelody>:


void playMelody(BuzzerTypeDef *buzzer) {
 80011f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f4:	f5ad 5d85 	sub.w	sp, sp, #4256	@ 0x10a0
 80011f8:	b086      	sub	sp, #24
 80011fa:	4604      	mov	r4, r0
    Note melody[] = {
 80011fc:	f241 02b4 	movw	r2, #4276	@ 0x10b4
 8001200:	4914      	ldr	r1, [pc, #80]	@ (8001254 <playMelody+0x64>)
 8001202:	a801      	add	r0, sp, #4
 8001204:	f004 f951 	bl	80054aa <memcpy>
    		Song_see_you_again
    };

    int length = sizeof(melody) / sizeof(Note);

    for (int i = 0; i < length; i++) {
 8001208:	2600      	movs	r6, #0
 800120a:	f240 482d 	movw	r8, #1069	@ 0x42d
 800120e:	ad01      	add	r5, sp, #4
        if (melody[i].frequency == 20) {
 8001210:	882f      	ldrh	r7, [r5, #0]
 8001212:	2f14      	cmp	r7, #20
 8001214:	d115      	bne.n	8001242 <playMelody+0x52>
            Buzzer_SetVolume(buzzer, 0);
 8001216:	2100      	movs	r1, #0
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff ffb5 	bl	8001188 <Buzzer_SetVolume>
        } else {
            Buzzer_SetVolume(buzzer, 36);

            Buzzer_SetFrequency(buzzer, melody[i].frequency*playback_speed);
        }
        HAL_Delay(melody[i].duration/playback_speed);
 800121e:	8868      	ldrh	r0, [r5, #2]
    for (int i = 0; i < length; i++) {
 8001220:	3601      	adds	r6, #1
        HAL_Delay(melody[i].duration/playback_speed);
 8001222:	0840      	lsrs	r0, r0, #1
 8001224:	f001 f814 	bl	8002250 <HAL_Delay>
    for (int i = 0; i < length; i++) {
 8001228:	4546      	cmp	r6, r8
 800122a:	f105 0504 	add.w	r5, r5, #4
 800122e:	d1ef      	bne.n	8001210 <playMelody+0x20>
    }
    Buzzer_SetVolume(buzzer, 0);
 8001230:	2100      	movs	r1, #0
 8001232:	4620      	mov	r0, r4
}
 8001234:	f50d 5d85 	add.w	sp, sp, #4256	@ 0x10a0
 8001238:	b006      	add	sp, #24
 800123a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Buzzer_SetVolume(buzzer, 0);
 800123e:	f7ff bfa3 	b.w	8001188 <Buzzer_SetVolume>
            Buzzer_SetVolume(buzzer, 36);
 8001242:	2124      	movs	r1, #36	@ 0x24
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff ff9f 	bl	8001188 <Buzzer_SetVolume>
            Buzzer_SetFrequency(buzzer, melody[i].frequency*playback_speed);
 800124a:	0079      	lsls	r1, r7, #1
 800124c:	f7ff ff90 	bl	8001170 <Buzzer_SetFrequency>
 8001250:	e7e5      	b.n	800121e <playMelody+0x2e>
 8001252:	bf00      	nop
 8001254:	08008a4e 	.word	0x08008a4e

08001258 <ssd1306_WelcomeView>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ssd1306_WelcomeView(){
 8001258:	b510      	push	{r4, lr}
	uint8_t msg[100];
	ssd1306_Fill(Black);
 800125a:	2000      	movs	r0, #0
void ssd1306_WelcomeView(){
 800125c:	b09a      	sub	sp, #104	@ 0x68
	ssd1306_Fill(Black);
 800125e:	f000 fbf9 	bl	8001a54 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001262:	2100      	movs	r1, #0
	sprintf(msg, "Welcome");
	ssd1306_WriteString(msg, Font_11x18, White);
 8001264:	4c16      	ldr	r4, [pc, #88]	@ (80012c0 <ssd1306_WelcomeView+0x68>)
	ssd1306_SetCursor(0, 0);
 8001266:	4608      	mov	r0, r1
 8001268:	f000 fd10 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, "Welcome");
 800126c:	4915      	ldr	r1, [pc, #84]	@ (80012c4 <ssd1306_WelcomeView+0x6c>)
 800126e:	a801      	add	r0, sp, #4
 8001270:	f004 f905 	bl	800547e <strcpy>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001274:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001278:	2301      	movs	r3, #1
 800127a:	a801      	add	r0, sp, #4
 800127c:	f000 fcf2 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 25);
 8001280:	2119      	movs	r1, #25
 8001282:	2000      	movs	r0, #0
 8001284:	f000 fd02 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, "Course PrjC");
 8001288:	490f      	ldr	r1, [pc, #60]	@ (80012c8 <ssd1306_WelcomeView+0x70>)
 800128a:	a801      	add	r0, sp, #4
 800128c:	f004 f8f7 	bl	800547e <strcpy>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001290:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001294:	2301      	movs	r3, #1
 8001296:	a801      	add	r0, sp, #4
 8001298:	f000 fce4 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 50);
 800129c:	2132      	movs	r1, #50	@ 0x32
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 fcf4 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, "Initialing...");
 80012a4:	4909      	ldr	r1, [pc, #36]	@ (80012cc <ssd1306_WelcomeView+0x74>)
 80012a6:	a801      	add	r0, sp, #4
 80012a8:	f004 f8e9 	bl	800547e <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 80012ac:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <ssd1306_WelcomeView+0x78>)
 80012ae:	2301      	movs	r3, #1
 80012b0:	ca06      	ldmia	r2, {r1, r2}
 80012b2:	a801      	add	r0, sp, #4
 80012b4:	f000 fcd6 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80012b8:	f000 fbdc 	bl	8001a74 <ssd1306_UpdateScreen>
}
 80012bc:	b01a      	add	sp, #104	@ 0x68
 80012be:	bd10      	pop	{r4, pc}
 80012c0:	20000004 	.word	0x20000004
 80012c4:	08009b14 	.word	0x08009b14
 80012c8:	08009b1c 	.word	0x08009b1c
 80012cc:	08009b28 	.word	0x08009b28
 80012d0:	2000000c 	.word	0x2000000c

080012d4 <ssd1306_PumpView>:
	sprintf(msg, ">>");
	ssd1306_WriteString(msg, Font_6x8, White);
	ssd1306_UpdateScreen();
}

void ssd1306_PumpView(){
 80012d4:	b530      	push	{r4, r5, lr}
	uint8_t msg[100];
	ssd1306_Fill(Black);
 80012d6:	2000      	movs	r0, #0
void ssd1306_PumpView(){
 80012d8:	b09b      	sub	sp, #108	@ 0x6c
	ssd1306_Fill(Black);
 80012da:	f000 fbbb 	bl	8001a54 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 80012de:	2100      	movs	r1, #0
	sprintf(msg, "Pump");
	ssd1306_WriteString(msg, Font_11x18, White);
 80012e0:	4c3c      	ldr	r4, [pc, #240]	@ (80013d4 <ssd1306_PumpView+0x100>)
	ssd1306_SetCursor(0, 0);
 80012e2:	4608      	mov	r0, r1
 80012e4:	f000 fcd2 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, "Pump");
 80012e8:	493b      	ldr	r1, [pc, #236]	@ (80013d8 <ssd1306_PumpView+0x104>)
 80012ea:	a801      	add	r0, sp, #4
 80012ec:	f004 f8c7 	bl	800547e <strcpy>
	ssd1306_WriteString(msg, Font_11x18, White);
 80012f0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80012f4:	2301      	movs	r3, #1
	ssd1306_SetCursor(0, 18);
	sprintf(msg, "U:%d\r\n", PUMP[1]);
 80012f6:	4d39      	ldr	r5, [pc, #228]	@ (80013dc <ssd1306_PumpView+0x108>)
	ssd1306_WriteString(msg, Font_11x18, White);
 80012f8:	a801      	add	r0, sp, #4
 80012fa:	f000 fcb3 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 80012fe:	2112      	movs	r1, #18
 8001300:	2000      	movs	r0, #0
 8001302:	f000 fcc3 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, "U:%d\r\n", PUMP[1]);
 8001306:	886a      	ldrh	r2, [r5, #2]
 8001308:	4935      	ldr	r1, [pc, #212]	@ (80013e0 <ssd1306_PumpView+0x10c>)
 800130a:	a801      	add	r0, sp, #4
 800130c:	f003 ffd4 	bl	80052b8 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001310:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001314:	2301      	movs	r3, #1
 8001316:	a801      	add	r0, sp, #4
 8001318:	f000 fca4 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 18);
 800131c:	2112      	movs	r1, #18
 800131e:	2040      	movs	r0, #64	@ 0x40
 8001320:	f000 fcb4 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, "I:%d\r\n", PUMP[0]);
 8001324:	882a      	ldrh	r2, [r5, #0]
 8001326:	492f      	ldr	r1, [pc, #188]	@ (80013e4 <ssd1306_PumpView+0x110>)
 8001328:	a801      	add	r0, sp, #4
 800132a:	f003 ffc5 	bl	80052b8 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 800132e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001332:	2301      	movs	r3, #1
 8001334:	a801      	add	r0, sp, #4
 8001336:	f000 fc95 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 800133a:	2124      	movs	r1, #36	@ 0x24
 800133c:	2000      	movs	r0, #0
 800133e:	f000 fca5 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, "Duty:%d", Period_);
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <ssd1306_PumpView+0x114>)
 8001344:	4929      	ldr	r1, [pc, #164]	@ (80013ec <ssd1306_PumpView+0x118>)
 8001346:	881a      	ldrh	r2, [r3, #0]
 8001348:	a801      	add	r0, sp, #4
 800134a:	f003 ffb5 	bl	80052b8 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 800134e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001352:	2301      	movs	r3, #1
 8001354:	a801      	add	r0, sp, #4
 8001356:	f000 fc85 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_SetCursor(0 , 56);
	sprintf(msg, "Back");
	ssd1306_WriteString(msg, Font_6x8, White);
 800135a:	4c25      	ldr	r4, [pc, #148]	@ (80013f0 <ssd1306_PumpView+0x11c>)
	ssd1306_SetCursor(0 , 56);
 800135c:	2138      	movs	r1, #56	@ 0x38
 800135e:	2000      	movs	r0, #0
 8001360:	f000 fc94 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, "Back");
 8001364:	4923      	ldr	r1, [pc, #140]	@ (80013f4 <ssd1306_PumpView+0x120>)
 8001366:	a801      	add	r0, sp, #4
 8001368:	f004 f889 	bl	800547e <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 800136c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001370:	2301      	movs	r3, #1
 8001372:	a801      	add	r0, sp, #4
 8001374:	f000 fc76 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 56);
 8001378:	2138      	movs	r1, #56	@ 0x38
 800137a:	2020      	movs	r0, #32
 800137c:	f000 fc86 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, "OFF");
 8001380:	491d      	ldr	r1, [pc, #116]	@ (80013f8 <ssd1306_PumpView+0x124>)
 8001382:	a801      	add	r0, sp, #4
 8001384:	f004 f87b 	bl	800547e <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 8001388:	e894 0006 	ldmia.w	r4, {r1, r2}
 800138c:	2301      	movs	r3, #1
 800138e:	a801      	add	r0, sp, #4
 8001390:	f000 fc68 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 8001394:	2138      	movs	r1, #56	@ 0x38
 8001396:	2040      	movs	r0, #64	@ 0x40
 8001398:	f000 fc78 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, " \\/");
 800139c:	4917      	ldr	r1, [pc, #92]	@ (80013fc <ssd1306_PumpView+0x128>)
 800139e:	a801      	add	r0, sp, #4
 80013a0:	f004 f86d 	bl	800547e <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 80013a4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80013a8:	2301      	movs	r3, #1
 80013aa:	a801      	add	r0, sp, #4
 80013ac:	f000 fc5a 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 80013b0:	2138      	movs	r1, #56	@ 0x38
 80013b2:	2060      	movs	r0, #96	@ 0x60
 80013b4:	f000 fc6a 	bl	8001c8c <ssd1306_SetCursor>
	sprintf(msg, " /\\");
 80013b8:	4911      	ldr	r1, [pc, #68]	@ (8001400 <ssd1306_PumpView+0x12c>)
 80013ba:	a801      	add	r0, sp, #4
 80013bc:	f004 f85f 	bl	800547e <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 80013c0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80013c4:	2301      	movs	r3, #1
 80013c6:	a801      	add	r0, sp, #4
 80013c8:	f000 fc4c 	bl	8001c64 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80013cc:	f000 fb52 	bl	8001a74 <ssd1306_UpdateScreen>
}
 80013d0:	b01b      	add	sp, #108	@ 0x6c
 80013d2:	bd30      	pop	{r4, r5, pc}
 80013d4:	20000004 	.word	0x20000004
 80013d8:	08009b68 	.word	0x08009b68
 80013dc:	20000218 	.word	0x20000218
 80013e0:	08009b6d 	.word	0x08009b6d
 80013e4:	08009b74 	.word	0x08009b74
 80013e8:	20000000 	.word	0x20000000
 80013ec:	08009b7b 	.word	0x08009b7b
 80013f0:	20000014 	.word	0x20000014
 80013f4:	08009b5e 	.word	0x08009b5e
 80013f8:	08009b83 	.word	0x08009b83
 80013fc:	08009b87 	.word	0x08009b87
 8001400:	08009b8b 	.word	0x08009b8b

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b510      	push	{r4, lr}
 8001406:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001408:	2214      	movs	r2, #20
 800140a:	2100      	movs	r1, #0
 800140c:	a80c      	add	r0, sp, #48	@ 0x30
 800140e:	f003 ffb6 	bl	800537e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001412:	2214      	movs	r2, #20
 8001414:	2100      	movs	r1, #0
 8001416:	eb0d 0002 	add.w	r0, sp, r2
 800141a:	f003 ffb0 	bl	800537e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141e:	2210      	movs	r2, #16
 8001420:	2100      	movs	r1, #0
 8001422:	a801      	add	r0, sp, #4
 8001424:	f003 ffab 	bl	800537e <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800142a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800142e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001430:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001438:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143c:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001440:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f001 ff49 	bl	80032d8 <HAL_RCC_OscConfig>
 8001446:	b108      	cbz	r0, 800144c <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144a:	e7fe      	b.n	800144a <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001456:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001458:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800145c:	4621      	mov	r1, r4
 800145e:	a805      	add	r0, sp, #20
 8001460:	f002 f8fc 	bl	800365c <HAL_RCC_ClockConfig>
 8001464:	b108      	cbz	r0, 800146a <SystemClock_Config+0x66>
 8001466:	b672      	cpsid	i
  while (1)
 8001468:	e7fe      	b.n	8001468 <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800146a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001470:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001472:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001474:	f002 f9ae 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	b108      	cbz	r0, 800147e <SystemClock_Config+0x7a>
 800147a:	b672      	cpsid	i
  while (1)
 800147c:	e7fe      	b.n	800147c <SystemClock_Config+0x78>
}
 800147e:	b014      	add	sp, #80	@ 0x50
 8001480:	bd10      	pop	{r4, pc}
	...

08001484 <main>:
{
 8001484:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	4ca4      	ldr	r4, [pc, #656]	@ (800171c <main+0x298>)
{
 800148a:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 800148c:	f000 febc 	bl	8002208 <HAL_Init>
  SystemClock_Config();
 8001490:	f7ff ffb8 	bl	8001404 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	2210      	movs	r2, #16
 8001496:	2100      	movs	r1, #0
 8001498:	a814      	add	r0, sp, #80	@ 0x50
 800149a:	f003 ff70 	bl	800537e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a0:	2500      	movs	r5, #0
 80014a2:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014a4:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	61a3      	str	r3, [r4, #24]
 80014ac:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	9303      	str	r3, [sp, #12]
 80014b6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b8:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80014ba:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	61a3      	str	r3, [r4, #24]
 80014c2:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80014c4:	4896      	ldr	r0, [pc, #600]	@ (8001720 <main+0x29c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	9304      	str	r3, [sp, #16]
 80014cc:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	69a3      	ldr	r3, [r4, #24]
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	61a3      	str	r3, [r4, #24]
 80014d6:	69a3      	ldr	r3, [r4, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	9305      	str	r3, [sp, #20]
 80014de:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	69a3      	ldr	r3, [r4, #24]
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	61a3      	str	r3, [r4, #24]
 80014e8:	69a3      	ldr	r3, [r4, #24]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	9306      	str	r3, [sp, #24]
 80014f0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80014f2:	f001 fc6b 	bl	8002dcc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80014f6:	488a      	ldr	r0, [pc, #552]	@ (8001720 <main+0x29c>)
 80014f8:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fa:	e9cd 7514 	strd	r7, r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fe:	9716      	str	r7, [sp, #88]	@ 0x58
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001500:	f001 fb86 	bl	8002c10 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	4886      	ldr	r0, [pc, #536]	@ (8001720 <main+0x29c>)
 8001506:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	e9cd 5616 	strd	r5, r6, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f001 fb7e 	bl	8002c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin|KEY_2_Pin|KEY_3_Pin;
 8001514:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	4881      	ldr	r0, [pc, #516]	@ (8001720 <main+0x29c>)
 800151a:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	e9cd 3514 	strd	r3, r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001520:	9616      	str	r6, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f001 fb75 	bl	8002c10 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001526:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001528:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800152a:	433b      	orrs	r3, r7
 800152c:	6163      	str	r3, [r4, #20]
 800152e:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001530:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001532:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001534:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800153a:	f001 f9af 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800153e:	200b      	movs	r0, #11
 8001540:	f001 f9dc 	bl	80028fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001544:	462a      	mov	r2, r5
 8001546:	4629      	mov	r1, r5
 8001548:	200c      	movs	r0, #12
 800154a:	f001 f9a7 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800154e:	200c      	movs	r0, #12
 8001550:	f001 f9d4 	bl	80028fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001554:	462a      	mov	r2, r5
 8001556:	4629      	mov	r1, r5
 8001558:	200d      	movs	r0, #13
 800155a:	f001 f99f 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800155e:	200d      	movs	r0, #13
 8001560:	f001 f9cc 	bl	80028fc <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8001564:	4c6f      	ldr	r4, [pc, #444]	@ (8001724 <main+0x2a0>)
 8001566:	4b70      	ldr	r3, [pc, #448]	@ (8001728 <main+0x2a4>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001568:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 800156a:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800156c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001570:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001572:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001576:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
 800157a:	9516      	str	r5, [sp, #88]	@ 0x58
  hadc1.Init.ContinuousConvMode = ENABLE;
 800157c:	7327      	strb	r7, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800157e:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001582:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001584:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001586:	f001 f8f7 	bl	8002778 <HAL_ADC_Init>
 800158a:	b108      	cbz	r0, 8001590 <main+0x10c>
 800158c:	b672      	cpsid	i
  while (1)
 800158e:	e7fe      	b.n	800158e <main+0x10a>
  sConfig.Channel = ADC_CHANNEL_4;
 8001590:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001592:	e9cd 3714 	strd	r3, r7, [sp, #80]	@ 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001596:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001598:	4620      	mov	r0, r4
 800159a:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800159c:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159e:	f000 ff1b 	bl	80023d8 <HAL_ADC_ConfigChannel>
 80015a2:	b108      	cbz	r0, 80015a8 <main+0x124>
 80015a4:	b672      	cpsid	i
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <main+0x122>
  sConfig.Channel = ADC_CHANNEL_5;
 80015a8:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015aa:	4620      	mov	r0, r4
 80015ac:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ae:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b2:	f000 ff11 	bl	80023d8 <HAL_ADC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b108      	cbz	r0, 80015be <main+0x13a>
 80015ba:	b672      	cpsid	i
  while (1)
 80015bc:	e7fe      	b.n	80015bc <main+0x138>
  hi2c1.Instance = I2C1;
 80015be:	485b      	ldr	r0, [pc, #364]	@ (800172c <main+0x2a8>)
  hi2c1.Init.ClockSpeed = 100000;
 80015c0:	495b      	ldr	r1, [pc, #364]	@ (8001730 <main+0x2ac>)
 80015c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001734 <main+0x2b0>)
  hi2c1.Init.OwnAddress1 = 0;
 80015c4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80015c8:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015cc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015da:	f001 fd45 	bl	8003068 <HAL_I2C_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	b108      	cbz	r0, 80015e6 <main+0x162>
 80015e2:	b672      	cpsid	i
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <main+0x160>
  huart1.Init.BaudRate = 115200;
 80015e6:	f44f 35e1 	mov.w	r5, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ea:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 80015ec:	4852      	ldr	r0, [pc, #328]	@ (8001738 <main+0x2b4>)
  huart1.Init.BaudRate = 115200;
 80015ee:	4a53      	ldr	r2, [pc, #332]	@ (800173c <main+0x2b8>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f4:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f8:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fa:	61c3      	str	r3, [r0, #28]
  huart1.Init.BaudRate = 115200;
 80015fc:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001600:	f002 fcd0 	bl	8003fa4 <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	b108      	cbz	r0, 800160c <main+0x188>
 8001608:	b672      	cpsid	i
  while (1)
 800160a:	e7fe      	b.n	800160a <main+0x186>
  huart3.Instance = USART3;
 800160c:	484c      	ldr	r0, [pc, #304]	@ (8001740 <main+0x2bc>)
 800160e:	4a4d      	ldr	r2, [pc, #308]	@ (8001744 <main+0x2c0>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001610:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001614:	e9c0 2500 	strd	r2, r5, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001618:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001620:	f002 fcc0 	bl	8003fa4 <HAL_UART_Init>
 8001624:	4606      	mov	r6, r0
 8001626:	b108      	cbz	r0, 800162c <main+0x1a8>
 8001628:	b672      	cpsid	i
  while (1)
 800162a:	e7fe      	b.n	800162a <main+0x1a6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162c:	4601      	mov	r1, r0
 800162e:	2210      	movs	r2, #16
 8001630:	a809      	add	r0, sp, #36	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	ac0d      	add	r4, sp, #52	@ 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001634:	f003 fea3 	bl	800537e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001638:	221c      	movs	r2, #28
 800163a:	4631      	mov	r1, r6
 800163c:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	e9cd 6607 	strd	r6, r6, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001642:	f003 fe9c 	bl	800537e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001646:	2220      	movs	r2, #32
 8001648:	4631      	mov	r1, r6
 800164a:	a814      	add	r0, sp, #80	@ 0x50
 800164c:	f003 fe97 	bl	800537e <memset>
  htim1.Init.Prescaler = 72;
 8001650:	2348      	movs	r3, #72	@ 0x48
  htim1.Instance = TIM1;
 8001652:	4d3d      	ldr	r5, [pc, #244]	@ (8001748 <main+0x2c4>)
  htim1.Init.Prescaler = 72;
 8001654:	4a3d      	ldr	r2, [pc, #244]	@ (800174c <main+0x2c8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001656:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 72;
 8001658:	e9c5 2300 	strd	r2, r3, [r5]
  htim1.Init.Period = 72-1;
 800165c:	2347      	movs	r3, #71	@ 0x47
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	e9c5 6605 	strd	r6, r6, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	e9c5 3603 	strd	r3, r6, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	60ae      	str	r6, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001668:	f002 fa02 	bl	8003a70 <HAL_TIM_Base_Init>
 800166c:	b108      	cbz	r0, 8001672 <main+0x1ee>
 800166e:	b672      	cpsid	i
  while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x1ec>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001676:	4628      	mov	r0, r5
 8001678:	a909      	add	r1, sp, #36	@ 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800167c:	f002 fade 	bl	8003c3c <HAL_TIM_ConfigClockSource>
 8001680:	b108      	cbz	r0, 8001686 <main+0x202>
 8001682:	b672      	cpsid	i
  while (1)
 8001684:	e7fe      	b.n	8001684 <main+0x200>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001686:	4628      	mov	r0, r5
 8001688:	f002 fa1e 	bl	8003ac8 <HAL_TIM_PWM_Init>
 800168c:	b108      	cbz	r0, 8001692 <main+0x20e>
 800168e:	b672      	cpsid	i
  while (1)
 8001690:	e7fe      	b.n	8001690 <main+0x20c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001696:	a907      	add	r1, sp, #28
 8001698:	4628      	mov	r0, r5
 800169a:	f002 fbc7 	bl	8003e2c <HAL_TIMEx_MasterConfigSynchronization>
 800169e:	b108      	cbz	r0, 80016a4 <main+0x220>
 80016a0:	b672      	cpsid	i
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <main+0x21e>
  sConfigOC.Pulse = 0;
 80016a4:	2200      	movs	r2, #0
 80016a6:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a8:	4621      	mov	r1, r4
 80016aa:	4827      	ldr	r0, [pc, #156]	@ (8001748 <main+0x2c4>)
  sConfigOC.Pulse = 0;
 80016ac:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b0:	e9cd 220f 	strd	r2, r2, [sp, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016b4:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016b8:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ba:	f002 fa5d 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 80016be:	b108      	cbz	r0, 80016c4 <main+0x240>
 80016c0:	b672      	cpsid	i
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <main+0x23e>
  sConfigOC.Pulse = 36;
 80016c4:	2324      	movs	r3, #36	@ 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80016c6:	f44f 7980 	mov.w	r9, #256	@ 0x100
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ca:	2204      	movs	r2, #4
 80016cc:	4621      	mov	r1, r4
 80016ce:	481e      	ldr	r0, [pc, #120]	@ (8001748 <main+0x2c4>)
  sConfigOC.Pulse = 36;
 80016d0:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80016d2:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d6:	f002 fa4f 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 80016da:	b108      	cbz	r0, 80016e0 <main+0x25c>
 80016dc:	b672      	cpsid	i
  while (1)
 80016de:	e7fe      	b.n	80016de <main+0x25a>
  sConfigOC.Pulse = 1;
 80016e0:	f04f 0801 	mov.w	r8, #1
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016e4:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016e6:	2208      	movs	r2, #8
 80016e8:	4621      	mov	r1, r4
 80016ea:	4817      	ldr	r0, [pc, #92]	@ (8001748 <main+0x2c4>)
  sConfigOC.Pulse = 1;
 80016ec:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016f0:	f002 fa42 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 80016f4:	b108      	cbz	r0, 80016fa <main+0x276>
 80016f6:	b672      	cpsid	i
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <main+0x274>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016fe:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 8001702:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001706:	9018      	str	r0, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001708:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800170a:	a914      	add	r1, sp, #80	@ 0x50
 800170c:	480e      	ldr	r0, [pc, #56]	@ (8001748 <main+0x2c4>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800170e:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001710:	f002 fbba 	bl	8003e88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001714:	4607      	mov	r7, r0
 8001716:	b1d8      	cbz	r0, 8001750 <main+0x2cc>
 8001718:	b672      	cpsid	i
  while (1)
 800171a:	e7fe      	b.n	800171a <main+0x296>
 800171c:	40021000 	.word	0x40021000
 8001720:	40010c00 	.word	0x40010c00
 8001724:	20000490 	.word	0x20000490
 8001728:	40012400 	.word	0x40012400
 800172c:	200003c8 	.word	0x200003c8
 8001730:	40005400 	.word	0x40005400
 8001734:	000186a0 	.word	0x000186a0
 8001738:	200002f0 	.word	0x200002f0
 800173c:	40013800 	.word	0x40013800
 8001740:	200002a8 	.word	0x200002a8
 8001744:	40004800 	.word	0x40004800
 8001748:	20000380 	.word	0x20000380
 800174c:	40012c00 	.word	0x40012c00
  HAL_TIM_MspPostInit(&htim1);
 8001750:	489e      	ldr	r0, [pc, #632]	@ (80019cc <main+0x548>)
 8001752:	f000 fb9d 	bl	8001e90 <HAL_TIM_MspPostInit>
  hadc2.Instance = ADC2;
 8001756:	4e9e      	ldr	r6, [pc, #632]	@ (80019d0 <main+0x54c>)
 8001758:	4b9e      	ldr	r3, [pc, #632]	@ (80019d4 <main+0x550>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800175a:	e9cd 7714 	strd	r7, r7, [sp, #80]	@ 0x50
 800175e:	9716      	str	r7, [sp, #88]	@ 0x58
  hadc2.Instance = ADC2;
 8001760:	6033      	str	r3, [r6, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001762:	7537      	strb	r7, [r6, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001764:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001768:	6077      	str	r7, [r6, #4]
  hadc2.Init.NbrOfConversion = 3;
 800176a:	2703      	movs	r7, #3
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800176c:	4630      	mov	r0, r6
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800176e:	f8c6 9008 	str.w	r9, [r6, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001772:	f886 800c 	strb.w	r8, [r6, #12]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001776:	61f3      	str	r3, [r6, #28]
  hadc2.Init.NbrOfConversion = 3;
 8001778:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800177a:	f000 fffd 	bl	8002778 <HAL_ADC_Init>
 800177e:	b108      	cbz	r0, 8001784 <main+0x300>
 8001780:	b672      	cpsid	i
  while (1)
 8001782:	e7fe      	b.n	8001782 <main+0x2fe>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001784:	9016      	str	r0, [sp, #88]	@ 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001786:	a914      	add	r1, sp, #80	@ 0x50
 8001788:	4630      	mov	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178a:	e9cd 8814 	strd	r8, r8, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800178e:	f000 fe23 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8001792:	b108      	cbz	r0, 8001798 <main+0x314>
 8001794:	b672      	cpsid	i
  while (1)
 8001796:	e7fe      	b.n	8001796 <main+0x312>
  sConfig.Channel = ADC_CHANNEL_2;
 8001798:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800179a:	4630      	mov	r0, r6
 800179c:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800179e:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017a2:	f000 fe19 	bl	80023d8 <HAL_ADC_ConfigChannel>
 80017a6:	b108      	cbz	r0, 80017ac <main+0x328>
 80017a8:	b672      	cpsid	i
  while (1)
 80017aa:	e7fe      	b.n	80017aa <main+0x326>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017ac:	4630      	mov	r0, r6
 80017ae:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017b0:	e9cd 7714 	strd	r7, r7, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017b4:	f000 fe10 	bl	80023d8 <HAL_ADC_ConfigChannel>
 80017b8:	4606      	mov	r6, r0
 80017ba:	b108      	cbz	r0, 80017c0 <main+0x33c>
 80017bc:	b672      	cpsid	i
  while (1)
 80017be:	e7fe      	b.n	80017be <main+0x33a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c0:	4601      	mov	r1, r0
 80017c2:	2210      	movs	r2, #16
 80017c4:	4620      	mov	r0, r4
 80017c6:	f003 fdda 	bl	800537e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ca:	221c      	movs	r2, #28
 80017cc:	4631      	mov	r1, r6
 80017ce:	a814      	add	r0, sp, #80	@ 0x50
  htim3.Instance = TIM3;
 80017d0:	4f81      	ldr	r7, [pc, #516]	@ (80019d8 <main+0x554>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d2:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	f003 fdd2 	bl	800537e <memset>
  htim3.Instance = TIM3;
 80017da:	4b80      	ldr	r3, [pc, #512]	@ (80019dc <main+0x558>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017dc:	4638      	mov	r0, r7
  htim3.Init.Prescaler = 0;
 80017de:	e9c7 3600 	strd	r3, r6, [r7]
  htim3.Init.Period = 720;
 80017e2:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	60be      	str	r6, [r7, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	e9c7 3603 	strd	r3, r6, [r7, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ec:	61be      	str	r6, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ee:	f002 f93f 	bl	8003a70 <HAL_TIM_Base_Init>
 80017f2:	b108      	cbz	r0, 80017f8 <main+0x374>
 80017f4:	b672      	cpsid	i
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <main+0x372>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017fc:	4621      	mov	r1, r4
 80017fe:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001800:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001802:	f002 fa1b 	bl	8003c3c <HAL_TIM_ConfigClockSource>
 8001806:	b108      	cbz	r0, 800180c <main+0x388>
 8001808:	b672      	cpsid	i
  while (1)
 800180a:	e7fe      	b.n	800180a <main+0x386>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800180c:	4872      	ldr	r0, [pc, #456]	@ (80019d8 <main+0x554>)
 800180e:	f002 f95b 	bl	8003ac8 <HAL_TIM_PWM_Init>
 8001812:	b108      	cbz	r0, 8001818 <main+0x394>
 8001814:	b672      	cpsid	i
  while (1)
 8001816:	e7fe      	b.n	8001816 <main+0x392>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001818:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800181c:	a909      	add	r1, sp, #36	@ 0x24
 800181e:	486e      	ldr	r0, [pc, #440]	@ (80019d8 <main+0x554>)
 8001820:	f002 fb04 	bl	8003e2c <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4602      	mov	r2, r0
 8001826:	b108      	cbz	r0, 800182c <main+0x3a8>
 8001828:	b672      	cpsid	i
  while (1)
 800182a:	e7fe      	b.n	800182a <main+0x3a6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182c:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182e:	9016      	str	r0, [sp, #88]	@ 0x58
  sConfigOC.Pulse = 0;
 8001830:	e9cd 3014 	strd	r3, r0, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001834:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001836:	a914      	add	r1, sp, #80	@ 0x50
 8001838:	4867      	ldr	r0, [pc, #412]	@ (80019d8 <main+0x554>)
 800183a:	f002 f99d 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 800183e:	4680      	mov	r8, r0
 8001840:	b108      	cbz	r0, 8001846 <main+0x3c2>
 8001842:	b672      	cpsid	i
  while (1)
 8001844:	e7fe      	b.n	8001844 <main+0x3c0>
  HAL_TIM_MspPostInit(&htim3);
 8001846:	4864      	ldr	r0, [pc, #400]	@ (80019d8 <main+0x554>)
 8001848:	f000 fb22 	bl	8001e90 <HAL_TIM_MspPostInit>
  HAL_ADC_Start(&hadc1);
 800184c:	4864      	ldr	r0, [pc, #400]	@ (80019e0 <main+0x55c>)
 800184e:	f000 fe7d 	bl	800254c <HAL_ADC_Start>
  ssd1306_Init();
 8001852:	f000 f929 	bl	8001aa8 <ssd1306_Init>
  ssd1306_WelcomeView();
 8001856:	f7ff fcff 	bl	8001258 <ssd1306_WelcomeView>
  HAL_TIM_Base_Start(&htim1);
 800185a:	485c      	ldr	r0, [pc, #368]	@ (80019cc <main+0x548>)
 800185c:	f002 f8a8 	bl	80039b0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001860:	4641      	mov	r1, r8
 8001862:	485a      	ldr	r0, [pc, #360]	@ (80019cc <main+0x548>)
 8001864:	f002 fae0 	bl	8003e28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001868:	2104      	movs	r1, #4
 800186a:	4858      	ldr	r0, [pc, #352]	@ (80019cc <main+0x548>)
 800186c:	f002 fadc 	bl	8003e28 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8001870:	4859      	ldr	r0, [pc, #356]	@ (80019d8 <main+0x554>)
 8001872:	f002 f89d 	bl	80039b0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001876:	4641      	mov	r1, r8
 8001878:	4857      	ldr	r0, [pc, #348]	@ (80019d8 <main+0x554>)
 800187a:	f002 fad5 	bl	8003e28 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)PUMP, 2);
 800187e:	2202      	movs	r2, #2
 8001880:	4958      	ldr	r1, [pc, #352]	@ (80019e4 <main+0x560>)
 8001882:	4857      	ldr	r0, [pc, #348]	@ (80019e0 <main+0x55c>)
 8001884:	f000 fec4 	bl	8002610 <HAL_ADC_Start_DMA>
  DHT_sensor DHT11_Sensor = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8001888:	220e      	movs	r2, #14
 800188a:	4641      	mov	r1, r8
 800188c:	f10d 0056 	add.w	r0, sp, #86	@ 0x56
 8001890:	f003 fd75 	bl	800537e <memset>
 8001894:	2301      	movs	r3, #1
 8001896:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
  BuzzerTypeDef buzzer = {&htim1, TIM_CHANNEL_3, 100, 36};
 800189a:	4b53      	ldr	r3, [pc, #332]	@ (80019e8 <main+0x564>)
  DHT_sensor DHT11_Sensor = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 800189c:	4e53      	ldr	r6, [pc, #332]	@ (80019ec <main+0x568>)
  BuzzerTypeDef buzzer = {&htim1, TIM_CHANNEL_3, 100, 36};
 800189e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Buzzer_Init(&buzzer);
 80018a4:	4620      	mov	r0, r4
  DHT_sensor DHT11_Sensor = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 80018a6:	9614      	str	r6, [sp, #80]	@ 0x50
  Buzzer_Init(&buzzer);
 80018a8:	f7ff fc7e 	bl	80011a8 <Buzzer_Init>
  HAL_Delay(100);
 80018ac:	2064      	movs	r0, #100	@ 0x64
 80018ae:	f000 fccf 	bl	8002250 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 200);
 80018b2:	21c8      	movs	r1, #200	@ 0xc8
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff fc5b 	bl	8001170 <Buzzer_SetFrequency>
  HAL_Delay(100);
 80018ba:	2064      	movs	r0, #100	@ 0x64
 80018bc:	f000 fcc8 	bl	8002250 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 300);
 80018c0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80018c4:	4620      	mov	r0, r4
 80018c6:	f7ff fc53 	bl	8001170 <Buzzer_SetFrequency>
  HAL_Delay(100);
 80018ca:	2064      	movs	r0, #100	@ 0x64
 80018cc:	f000 fcc0 	bl	8002250 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 400);
 80018d0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff fc4b 	bl	8001170 <Buzzer_SetFrequency>
  HAL_Delay(100);
 80018da:	2064      	movs	r0, #100	@ 0x64
 80018dc:	f000 fcb8 	bl	8002250 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 500);
 80018e0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80018e4:	4620      	mov	r0, r4
 80018e6:	f7ff fc43 	bl	8001170 <Buzzer_SetFrequency>
  HAL_Delay(100);
 80018ea:	2064      	movs	r0, #100	@ 0x64
 80018ec:	f000 fcb0 	bl	8002250 <HAL_Delay>
  playMelody(&buzzer);
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff fc7d 	bl	80011f0 <playMelody>
  Buzzer_SetVolume(&buzzer, 2);
 80018f6:	2102      	movs	r1, #2
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff fc45 	bl	8001188 <Buzzer_SetVolume>
  ESP_UART_Init(&huart3);
 80018fe:	483c      	ldr	r0, [pc, #240]	@ (80019f0 <main+0x56c>)
 8001900:	f7ff fb2a 	bl	8000f58 <ESP_UART_Init>
  Buzzer_SetVolume(&buzzer, 0);
 8001904:	4641      	mov	r1, r8
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff fc3e 	bl	8001188 <Buzzer_SetVolume>
  HAL_Delay(100);
 800190c:	2064      	movs	r0, #100	@ 0x64
 800190e:	f000 fc9f 	bl	8002250 <HAL_Delay>
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001912:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 80019e0 <main+0x55c>
 8001916:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 80019f4 <main+0x570>
 800191a:	4650      	mov	r0, sl
 800191c:	f000 fcaa 	bl	8002274 <HAL_ADC_GetValue>
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001920:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001924:	f8a9 0000 	strh.w	r0, [r9]
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001928:	4630      	mov	r0, r6
 800192a:	f001 fa49 	bl	8002dc0 <HAL_GPIO_ReadPin>
 800192e:	4c32      	ldr	r4, [pc, #200]	@ (80019f8 <main+0x574>)
 8001930:	b140      	cbz	r0, 8001944 <main+0x4c0>
	    	if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001936:	4630      	mov	r0, r6
 8001938:	f001 fa42 	bl	8002dc0 <HAL_GPIO_ReadPin>
 800193c:	b110      	cbz	r0, 8001944 <main+0x4c0>
	    	Period_-=10;
 800193e:	8823      	ldrh	r3, [r4, #0]
 8001940:	3b0a      	subs	r3, #10
 8001942:	8023      	strh	r3, [r4, #0]
	    if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001944:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001948:	4630      	mov	r0, r6
 800194a:	f001 fa39 	bl	8002dc0 <HAL_GPIO_ReadPin>
 800194e:	b158      	cbz	r0, 8001968 <main+0x4e4>
	        if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001950:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001954:	4630      	mov	r0, r6
 8001956:	f001 fa33 	bl	8002dc0 <HAL_GPIO_ReadPin>
 800195a:	b128      	cbz	r0, 8001968 <main+0x4e4>
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800195c:	2200      	movs	r2, #0
	    	    	Period_--;
 800195e:	8823      	ldrh	r3, [r4, #0]
 8001960:	3b01      	subs	r3, #1
 8001962:	8023      	strh	r3, [r4, #0]
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001964:	682b      	ldr	r3, [r5, #0]
 8001966:	63da      	str	r2, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001968:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800196c:	4630      	mov	r0, r6
 800196e:	f001 fa27 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8001972:	b158      	cbz	r0, 800198c <main+0x508>
	    	 if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001974:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001978:	4630      	mov	r0, r6
 800197a:	f001 fa21 	bl	8002dc0 <HAL_GPIO_ReadPin>
 800197e:	b128      	cbz	r0, 800198c <main+0x508>
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001980:	220a      	movs	r2, #10
	    		    	Period_++;
 8001982:	8823      	ldrh	r3, [r4, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	8023      	strh	r3, [r4, #0]
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001988:	682b      	ldr	r3, [r5, #0]
 800198a:	63da      	str	r2, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 800198c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001990:	4630      	mov	r0, r6
 8001992:	f001 fa15 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8001996:	b140      	cbz	r0, 80019aa <main+0x526>
		    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001998:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800199c:	4630      	mov	r0, r6
 800199e:	f001 fa0f 	bl	8002dc0 <HAL_GPIO_ReadPin>
 80019a2:	b110      	cbz	r0, 80019aa <main+0x526>
		    	Period_+=10;
 80019a4:	8823      	ldrh	r3, [r4, #0]
 80019a6:	330a      	adds	r3, #10
 80019a8:	8023      	strh	r3, [r4, #0]
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 80019aa:	46e8      	mov	r8, sp
 80019ac:	a914      	add	r1, sp, #80	@ 0x50
 80019ae:	4640      	mov	r0, r8
 80019b0:	f7ff fad8 	bl	8000f64 <DHT_getData>
 80019b4:	e898 0003 	ldmia.w	r8, {r0, r1}
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Period_);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	8822      	ldrh	r2, [r4, #0]
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 80019bc:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 80019fc <main+0x578>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Period_);
 80019c0:	635a      	str	r2, [r3, #52]	@ 0x34
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 80019c2:	e88b 0003 	stmia.w	fp, {r0, r1}
		  ssd1306_PumpView();
 80019c6:	f7ff fc85 	bl	80012d4 <ssd1306_PumpView>
  {
 80019ca:	e7a6      	b.n	800191a <main+0x496>
 80019cc:	20000380 	.word	0x20000380
 80019d0:	20000460 	.word	0x20000460
 80019d4:	40012800 	.word	0x40012800
 80019d8:	20000338 	.word	0x20000338
 80019dc:	40000400 	.word	0x40000400
 80019e0:	20000490 	.word	0x20000490
 80019e4:	20000218 	.word	0x20000218
 80019e8:	08009b04 	.word	0x08009b04
 80019ec:	40010c00 	.word	0x40010c00
 80019f0:	200002a8 	.word	0x200002a8
 80019f4:	2000021c 	.word	0x2000021c
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000210 	.word	0x20000210

08001a00 <Error_Handler>:
 8001a00:	b672      	cpsid	i
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <Error_Handler+0x2>

08001a04 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a06:	2301      	movs	r3, #1
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001a10:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t byte) {
 8001a14:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a18:	9200      	str	r2, [sp, #0]
 8001a1a:	2178      	movs	r1, #120	@ 0x78
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4803      	ldr	r0, [pc, #12]	@ (8001a2c <ssd1306_WriteCommand+0x28>)
 8001a20:	f001 fbca 	bl	80031b8 <HAL_I2C_Mem_Write>
}
 8001a24:	b007      	add	sp, #28
 8001a26:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a2a:	bf00      	nop
 8001a2c:	200003c8 	.word	0x200003c8

08001a30 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	b289      	uxth	r1, r1
 8001a38:	e9cd 0100 	strd	r0, r1, [sp]
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	2240      	movs	r2, #64	@ 0x40
 8001a40:	2301      	movs	r3, #1
 8001a42:	2178      	movs	r1, #120	@ 0x78
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <ssd1306_WriteData+0x20>)
 8001a46:	f001 fbb7 	bl	80031b8 <HAL_I2C_Mem_Write>
}
 8001a4a:	b005      	add	sp, #20
 8001a4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a50:	200003c8 	.word	0x200003c8

08001a54 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	4906      	ldr	r1, [pc, #24]	@ (8001a70 <ssd1306_Fill+0x1c>)
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a58:	1e02      	subs	r2, r0, #0
 8001a5a:	bf18      	it	ne
 8001a5c:	2201      	movne	r2, #1
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a5e:	3301      	adds	r3, #1
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a60:	4252      	negs	r2, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a66:	f801 2b01 	strb.w	r2, [r1], #1
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a6a:	d1f5      	bne.n	8001a58 <ssd1306_Fill+0x4>
    }
}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200004c6 	.word	0x200004c6

08001a74 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001a74:	b538      	push	{r3, r4, r5, lr}
 8001a76:	24b0      	movs	r4, #176	@ 0xb0
 8001a78:	4d0a      	ldr	r5, [pc, #40]	@ (8001aa4 <ssd1306_UpdateScreen+0x30>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff ffc2 	bl	8001a04 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff ffbf 	bl	8001a04 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a86:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10);
 8001a88:	2010      	movs	r0, #16
 8001a8a:	f7ff ffbb 	bl	8001a04 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a8e:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a90:	4628      	mov	r0, r5
 8001a92:	2180      	movs	r1, #128	@ 0x80
 8001a94:	f7ff ffcc 	bl	8001a30 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a98:	2cb8      	cmp	r4, #184	@ 0xb8
 8001a9a:	f105 0580 	add.w	r5, r5, #128	@ 0x80
 8001a9e:	d1ec      	bne.n	8001a7a <ssd1306_UpdateScreen+0x6>
    }
}
 8001aa0:	bd38      	pop	{r3, r4, r5, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200004c6 	.word	0x200004c6

08001aa8 <ssd1306_Init>:
void ssd1306_Init(void) {
 8001aa8:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8001aaa:	2064      	movs	r0, #100	@ 0x64
 8001aac:	f000 fbd0 	bl	8002250 <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 8001ab0:	20ae      	movs	r0, #174	@ 0xae
 8001ab2:	f7ff ffa7 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001ab6:	2020      	movs	r0, #32
 8001ab8:	f7ff ffa4 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff ffa1 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ac2:	20b0      	movs	r0, #176	@ 0xb0
 8001ac4:	f7ff ff9e 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001ac8:	20c8      	movs	r0, #200	@ 0xc8
 8001aca:	f7ff ff9b 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff ff98 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001ad4:	2010      	movs	r0, #16
 8001ad6:	f7ff ff95 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001ada:	2040      	movs	r0, #64	@ 0x40
 8001adc:	f7ff ff92 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001ae0:	2081      	movs	r0, #129	@ 0x81
 8001ae2:	f7ff ff8f 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001ae6:	20ff      	movs	r0, #255	@ 0xff
 8001ae8:	f7ff ff8c 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001aec:	20a1      	movs	r0, #161	@ 0xa1
 8001aee:	f7ff ff89 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001af2:	20a6      	movs	r0, #166	@ 0xa6
 8001af4:	f7ff ff86 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001af8:	20a8      	movs	r0, #168	@ 0xa8
 8001afa:	f7ff ff83 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001afe:	203f      	movs	r0, #63	@ 0x3f
 8001b00:	f7ff ff80 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b04:	20a4      	movs	r0, #164	@ 0xa4
 8001b06:	f7ff ff7d 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b0a:	20d3      	movs	r0, #211	@ 0xd3
 8001b0c:	f7ff ff7a 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff ff77 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b16:	20d5      	movs	r0, #213	@ 0xd5
 8001b18:	f7ff ff74 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b1c:	20f0      	movs	r0, #240	@ 0xf0
 8001b1e:	f7ff ff71 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b22:	20d9      	movs	r0, #217	@ 0xd9
 8001b24:	f7ff ff6e 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b28:	2022      	movs	r0, #34	@ 0x22
 8001b2a:	f7ff ff6b 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b2e:	20da      	movs	r0, #218	@ 0xda
 8001b30:	f7ff ff68 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8001b34:	2012      	movs	r0, #18
 8001b36:	f7ff ff65 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b3a:	20db      	movs	r0, #219	@ 0xdb
 8001b3c:	f7ff ff62 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001b40:	2020      	movs	r0, #32
 8001b42:	f7ff ff5f 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001b46:	208d      	movs	r0, #141	@ 0x8d
 8001b48:	f7ff ff5c 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001b4c:	2014      	movs	r0, #20
 8001b4e:	f7ff ff59 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001b52:	20af      	movs	r0, #175	@ 0xaf
 8001b54:	f7ff ff56 	bl	8001a04 <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff ff7b 	bl	8001a54 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8001b5e:	f7ff ff89 	bl	8001a74 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8001b62:	2200      	movs	r2, #0
 8001b64:	4b02      	ldr	r3, [pc, #8]	@ (8001b70 <ssd1306_Init+0xc8>)
 8001b66:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b68:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	715a      	strb	r2, [r3, #5]
}
 8001b6e:	bd08      	pop	{r3, pc}
 8001b70:	200004c0 	.word	0x200004c0

08001b74 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b74:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b76:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b78:	d410      	bmi.n	8001b9c <ssd1306_DrawPixel+0x28>
 8001b7a:	293f      	cmp	r1, #63	@ 0x3f
 8001b7c:	d80e      	bhi.n	8001b9c <ssd1306_DrawPixel+0x28>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <ssd1306_DrawPixel+0x40>)
 8001b80:	4c0d      	ldr	r4, [pc, #52]	@ (8001bb8 <ssd1306_DrawPixel+0x44>)
 8001b82:	791d      	ldrb	r5, [r3, #4]
 8001b84:	08cb      	lsrs	r3, r1, #3
 8001b86:	f001 0107 	and.w	r1, r1, #7
 8001b8a:	b145      	cbz	r5, 8001b9e <ssd1306_DrawPixel+0x2a>
        color = (SSD1306_COLOR)!color;
    }
    
    // Draw in the right color
    if(color == White) {
 8001b8c:	b94a      	cbnz	r2, 8001ba2 <ssd1306_DrawPixel+0x2e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b8e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001b92:	2301      	movs	r3, #1
 8001b94:	5c22      	ldrb	r2, [r4, r0]
 8001b96:	408b      	lsls	r3, r1
 8001b98:	4313      	orrs	r3, r2
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b9a:	5423      	strb	r3, [r4, r0]
    }
}
 8001b9c:	bd30      	pop	{r4, r5, pc}
    if(color == White) {
 8001b9e:	2a01      	cmp	r2, #1
 8001ba0:	d0f5      	beq.n	8001b8e <ssd1306_DrawPixel+0x1a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001ba8:	5c23      	ldrb	r3, [r4, r0]
 8001baa:	408a      	lsls	r2, r1
 8001bac:	ea23 0302 	bic.w	r3, r3, r2
 8001bb0:	e7f3      	b.n	8001b9a <ssd1306_DrawPixel+0x26>
 8001bb2:	bf00      	nop
 8001bb4:	200004c0 	.word	0x200004c0
 8001bb8:	200004c6 	.word	0x200004c6

08001bbc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc0:	4605      	mov	r5, r0
 8001bc2:	b087      	sub	sp, #28
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001bc4:	f1a5 0420 	sub.w	r4, r5, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001bc8:	9301      	str	r3, [sp, #4]
    if (ch < 32 || ch > 126)
 8001bca:	b2e3      	uxtb	r3, r4
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001bcc:	a806      	add	r0, sp, #24
    if (ch < 32 || ch > 126)
 8001bce:	2b5e      	cmp	r3, #94	@ 0x5e
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001bd0:	e900 0006 	stmdb	r0, {r1, r2}
    if (ch < 32 || ch > 126)
 8001bd4:	d842      	bhi.n	8001c5c <ssd1306_WriteChar+0xa0>
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001bd6:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8001c60 <ssd1306_WriteChar+0xa4>
 8001bda:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8001bde:	f8b9 a000 	ldrh.w	sl, [r9]
 8001be2:	eb0a 0306 	add.w	r3, sl, r6
 8001be6:	2b80      	cmp	r3, #128	@ 0x80
 8001be8:	dc38      	bgt.n	8001c5c <ssd1306_WriteChar+0xa0>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001bea:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8001bee:	f89d b011 	ldrb.w	fp, [sp, #17]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	eb03 020b 	add.w	r2, r3, fp
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001bf8:	2a40      	cmp	r2, #64	@ 0x40
 8001bfa:	dc2f      	bgt.n	8001c5c <ssd1306_WriteChar+0xa0>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001bfc:	f04f 0800 	mov.w	r8, #0
 8001c00:	fb0b f404 	mul.w	r4, fp, r4
 8001c04:	0064      	lsls	r4, r4, #1
 8001c06:	45c3      	cmp	fp, r8
 8001c08:	d806      	bhi.n	8001c18 <ssd1306_WriteChar+0x5c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001c0a:	4456      	add	r6, sl
 8001c0c:	f8a9 6000 	strh.w	r6, [r9]
    
    // Return written char for validation
    return ch;
}
 8001c10:	4628      	mov	r0, r5
 8001c12:	b007      	add	sp, #28
 8001c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8001c18:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c1a:	9a05      	ldr	r2, [sp, #20]
 8001c1c:	5b13      	ldrh	r3, [r2, r4]
 8001c1e:	9303      	str	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c20:	9b00      	ldr	r3, [sp, #0]
 8001c22:	eb08 0203 	add.w	r2, r8, r3
 8001c26:	b2d3      	uxtb	r3, r2
 8001c28:	9302      	str	r3, [sp, #8]
        for(j = 0; j < Font.FontWidth; j++) {
 8001c2a:	42be      	cmp	r6, r7
 8001c2c:	d803      	bhi.n	8001c36 <ssd1306_WriteChar+0x7a>
    for(i = 0; i < Font.FontHeight; i++) {
 8001c2e:	f108 0801 	add.w	r8, r8, #1
 8001c32:	3402      	adds	r4, #2
 8001c34:	e7e7      	b.n	8001c06 <ssd1306_WriteChar+0x4a>
            if((b << j) & 0x8000)  {
 8001c36:	9b03      	ldr	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c38:	eb07 000a 	add.w	r0, r7, sl
            if((b << j) & 0x8000)  {
 8001c3c:	fa03 f207 	lsl.w	r2, r3, r7
 8001c40:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c42:	bf56      	itet	pl
 8001c44:	9b01      	ldrpl	r3, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c46:	9a01      	ldrmi	r2, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c48:	fab3 f283 	clzpl	r2, r3
 8001c4c:	9902      	ldr	r1, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c4e:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c50:	bf58      	it	pl
 8001c52:	0952      	lsrpl	r2, r2, #5
 8001c54:	f7ff ff8e 	bl	8001b74 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001c58:	3701      	adds	r7, #1
 8001c5a:	e7e6      	b.n	8001c2a <ssd1306_WriteChar+0x6e>
        return 0;
 8001c5c:	2500      	movs	r5, #0
 8001c5e:	e7d7      	b.n	8001c10 <ssd1306_WriteChar+0x54>
 8001c60:	200004c0 	.word	0x200004c0

08001c64 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001c64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c66:	466d      	mov	r5, sp
 8001c68:	461e      	mov	r6, r3
 8001c6a:	e885 0006 	stmia.w	r5, {r1, r2}
 8001c6e:	1e44      	subs	r4, r0, #1
    // Write until null-byte
    while (*str) {
 8001c70:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001c74:	b140      	cbz	r0, 8001c88 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c76:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001c7a:	4633      	mov	r3, r6
 8001c7c:	f7ff ff9e 	bl	8001bbc <ssd1306_WriteChar>
 8001c80:	4603      	mov	r3, r0
 8001c82:	7820      	ldrb	r0, [r4, #0]
 8001c84:	4283      	cmp	r3, r0
 8001c86:	d0f3      	beq.n	8001c70 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}

08001c8c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8001c8c:	4b01      	ldr	r3, [pc, #4]	@ (8001c94 <ssd1306_SetCursor+0x8>)
 8001c8e:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8001c90:	8059      	strh	r1, [r3, #2]
}
 8001c92:	4770      	bx	lr
 8001c94:	200004c0 	.word	0x200004c0

08001c98 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <HAL_MspInit+0x3c>)
{
 8001c9a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	619a      	str	r2, [r3, #24]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	f002 0201 	and.w	r2, r2, #1
 8001caa:	9200      	str	r2, [sp, #0]
 8001cac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	69da      	ldr	r2, [r3, #28]
 8001cb0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001cb4:	61da      	str	r2, [r3, #28]
 8001cb6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cb8:	4a07      	ldr	r2, [pc, #28]	@ (8001cd8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cc2:	6853      	ldr	r3, [r2, #4]
 8001cc4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ccc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	b002      	add	sp, #8
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000

08001cdc <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	2210      	movs	r2, #16
{
 8001cde:	b530      	push	{r4, r5, lr}
 8001ce0:	4605      	mov	r5, r0
 8001ce2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	eb0d 0002 	add.w	r0, sp, r2
 8001ce8:	2100      	movs	r1, #0
 8001cea:	f003 fb48 	bl	800537e <memset>
  if(hadc->Instance==ADC1)
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	4a30      	ldr	r2, [pc, #192]	@ (8001db4 <HAL_ADC_MspInit+0xd8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d13e      	bne.n	8001d74 <HAL_ADC_MspInit+0x98>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf6:	4b30      	ldr	r3, [pc, #192]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf8:	2130      	movs	r1, #48	@ 0x30
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	482f      	ldr	r0, [pc, #188]	@ (8001dbc <HAL_ADC_MspInit+0xe0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d02:	619a      	str	r2, [r3, #24]
 8001d04:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d06:	4c2e      	ldr	r4, [pc, #184]	@ (8001dc0 <HAL_ADC_MspInit+0xe4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d08:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001d0c:	9200      	str	r2, [sp, #0]
 8001d0e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	f042 0204 	orr.w	r2, r2, #4
 8001d16:	619a      	str	r2, [r3, #24]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	a904      	add	r1, sp, #16
 8001d2a:	f000 ff71 	bl	8002c10 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d32:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d36:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d38:	f44f 6e80 	mov.w	lr, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d3c:	e9c4 c203 	strd	ip, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d40:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d42:	4820      	ldr	r0, [pc, #128]	@ (8001dc4 <HAL_ADC_MspInit+0xe8>)
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d44:	e9c4 e205 	strd	lr, r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d48:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d4c:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4e:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d50:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d52:	f000 fdf5 	bl	8002940 <HAL_DMA_Init>
 8001d56:	b108      	cbz	r0, 8001d5c <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001d58:	f7ff fe52 	bl	8001a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d5c:	622c      	str	r4, [r5, #32]
 8001d5e:	6265      	str	r5, [r4, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2012      	movs	r0, #18
 8001d64:	4611      	mov	r1, r2
 8001d66:	f000 fd99 	bl	800289c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d6a:	2012      	movs	r0, #18
 8001d6c:	f000 fdc6 	bl	80028fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d70:	b009      	add	sp, #36	@ 0x24
 8001d72:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8001d74:	4a14      	ldr	r2, [pc, #80]	@ (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d1fa      	bne.n	8001d70 <HAL_ADC_MspInit+0x94>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <HAL_ADC_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	480f      	ldr	r0, [pc, #60]	@ (8001dbc <HAL_ADC_MspInit+0xe0>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d7e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d86:	619a      	str	r2, [r3, #24]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001d8e:	9202      	str	r2, [sp, #8]
 8001d90:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	f042 0204 	orr.w	r2, r2, #4
 8001d98:	619a      	str	r2, [r3, #24]
 8001d9a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9c:	220e      	movs	r2, #14
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	9303      	str	r3, [sp, #12]
 8001da4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f000 ff30 	bl	8002c10 <HAL_GPIO_Init>
 8001db0:	e7d6      	b.n	8001d60 <HAL_ADC_MspInit+0x84>
 8001db2:	bf00      	nop
 8001db4:	40012400 	.word	0x40012400
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010800 	.word	0x40010800
 8001dc0:	2000041c 	.word	0x2000041c
 8001dc4:	40020008 	.word	0x40020008
 8001dc8:	40012800 	.word	0x40012800

08001dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4604      	mov	r4, r0
 8001dd0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	a802      	add	r0, sp, #8
 8001dd8:	f003 fad1 	bl	800537e <memset>
  if(hi2c->Instance==I2C1)
 8001ddc:	6822      	ldr	r2, [r4, #0]
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <HAL_I2C_MspInit+0x68>)
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d124      	bne.n	8001e2e <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de4:	4c14      	ldr	r4, [pc, #80]	@ (8001e38 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de6:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	4813      	ldr	r0, [pc, #76]	@ (8001e3c <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	61a3      	str	r3, [r4, #24]
 8001df4:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e00:	2312      	movs	r3, #18
 8001e02:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f000 ff01 	bl	8002c10 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e40 <HAL_I2C_MspInit+0x74>)
 8001e10:	6853      	ldr	r3, [r2, #4]
 8001e12:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1c:	69e3      	ldr	r3, [r4, #28]
 8001e1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e22:	61e3      	str	r3, [r4, #28]
 8001e24:	69e3      	ldr	r3, [r4, #28]
 8001e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e2e:	b006      	add	sp, #24
 8001e30:	bd10      	pop	{r4, pc}
 8001e32:	bf00      	nop
 8001e34:	40005400 	.word	0x40005400
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010c00 	.word	0x40010c00
 8001e40:	40010000 	.word	0x40010000

08001e44 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001e44:	6803      	ldr	r3, [r0, #0]
 8001e46:	4a0f      	ldr	r2, [pc, #60]	@ (8001e84 <HAL_TIM_Base_MspInit+0x40>)
{
 8001e48:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10b      	bne.n	8001e66 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_TIM_Base_MspInit+0x44>)
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e56:	619a      	str	r2, [r3, #24]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e62:	b002      	add	sp, #8
 8001e64:	4770      	bx	lr
  else if(htim_base->Instance==TIM3)
 8001e66:	4a09      	ldr	r2, [pc, #36]	@ (8001e8c <HAL_TIM_Base_MspInit+0x48>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d1fa      	bne.n	8001e62 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_TIM_Base_MspInit+0x44>)
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	f042 0202 	orr.w	r2, r2, #2
 8001e74:	61da      	str	r2, [r3, #28]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	9b01      	ldr	r3, [sp, #4]
}
 8001e80:	e7ef      	b.n	8001e62 <HAL_TIM_Base_MspInit+0x1e>
 8001e82:	bf00      	nop
 8001e84:	40012c00 	.word	0x40012c00
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40000400 	.word	0x40000400

08001e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4604      	mov	r4, r0
 8001e94:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	2210      	movs	r2, #16
 8001e98:	2100      	movs	r1, #0
 8001e9a:	a802      	add	r0, sp, #8
 8001e9c:	f003 fa6f 	bl	800537e <memset>
  if(htim->Instance==TIM1)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	4a14      	ldr	r2, [pc, #80]	@ (8001ef4 <HAL_TIM_MspPostInit+0x64>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d115      	bne.n	8001ed4 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <HAL_TIM_MspPostInit+0x68>)
 8001eaa:	699a      	ldr	r2, [r3, #24]
 8001eac:	f042 0204 	orr.w	r2, r2, #4
 8001eb0:	619a      	str	r2, [r3, #24]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|BEEP_Pin;
 8001ebc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 8001ec0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	480d      	ldr	r0, [pc, #52]	@ (8001efc <HAL_TIM_MspPostInit+0x6c>)
 8001ec6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f000 fea0 	bl	8002c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ed0:	b006      	add	sp, #24
 8001ed2:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <HAL_TIM_MspPostInit+0x70>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d1fa      	bne.n	8001ed0 <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <HAL_TIM_MspPostInit+0x68>)
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	f042 0204 	orr.w	r2, r2, #4
 8001ee2:	619a      	str	r2, [r3, #24]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 8001eee:	2340      	movs	r3, #64	@ 0x40
 8001ef0:	e7e6      	b.n	8001ec0 <HAL_TIM_MspPostInit+0x30>
 8001ef2:	bf00      	nop
 8001ef4:	40012c00 	.word	0x40012c00
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010800 	.word	0x40010800
 8001f00:	40000400 	.word	0x40000400

08001f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f06:	2710      	movs	r7, #16
{
 8001f08:	4605      	mov	r5, r0
 8001f0a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	463a      	mov	r2, r7
 8001f0e:	2100      	movs	r1, #0
 8001f10:	eb0d 0007 	add.w	r0, sp, r7
 8001f14:	f003 fa33 	bl	800537e <memset>
  if(huart->Instance==USART1)
 8001f18:	682b      	ldr	r3, [r5, #0]
 8001f1a:	4a48      	ldr	r2, [pc, #288]	@ (800203c <HAL_UART_MspInit+0x138>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d130      	bne.n	8001f82 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f20:	4b47      	ldr	r3, [pc, #284]	@ (8002040 <HAL_UART_MspInit+0x13c>)
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2040      	movs	r0, #64	@ 0x40
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f24:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	eb0d 0107 	add.w	r1, sp, r7
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f2e:	619a      	str	r2, [r3, #24]
 8001f30:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f32:	2480      	movs	r4, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f34:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001f38:	9200      	str	r2, [sp, #0]
 8001f3a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	f042 0208 	orr.w	r2, r2, #8
 8001f42:	619a      	str	r2, [r3, #24]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f54:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f56:	483b      	ldr	r0, [pc, #236]	@ (8002044 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f58:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5a:	f000 fe59 	bl	8002c10 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	4838      	ldr	r0, [pc, #224]	@ (8002044 <HAL_UART_MspInit+0x140>)
 8001f62:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f66:	e9cd 4304 	strd	r4, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f000 fe50 	bl	8002c10 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001f70:	4a35      	ldr	r2, [pc, #212]	@ (8002048 <HAL_UART_MspInit+0x144>)
 8001f72:	6853      	ldr	r3, [r2, #4]
 8001f74:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f7e:	b009      	add	sp, #36	@ 0x24
 8001f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART3)
 8001f82:	4a32      	ldr	r2, [pc, #200]	@ (800204c <HAL_UART_MspInit+0x148>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d1fa      	bne.n	8001f7e <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f88:	4b2d      	ldr	r3, [pc, #180]	@ (8002040 <HAL_UART_MspInit+0x13c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f8e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f90:	482c      	ldr	r0, [pc, #176]	@ (8002044 <HAL_UART_MspInit+0x140>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f92:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001f96:	61da      	str	r2, [r3, #28]
 8001f98:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9a:	2600      	movs	r6, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f9c:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001fa0:	9202      	str	r2, [sp, #8]
 8001fa2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001fa6:	4c2a      	ldr	r4, [pc, #168]	@ (8002050 <HAL_UART_MspInit+0x14c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	f042 0208 	orr.w	r2, r2, #8
 8001fac:	619a      	str	r2, [r3, #24]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	9303      	str	r3, [sp, #12]
 8001fb6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fbe:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f000 fe24 	bl	8002c10 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	481d      	ldr	r0, [pc, #116]	@ (8002044 <HAL_UART_MspInit+0x140>)
 8001fce:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd0:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd6:	f000 fe1b 	bl	8002c10 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001fda:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <HAL_UART_MspInit+0x150>)
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001fdc:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fde:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe2:	2380      	movs	r3, #128	@ 0x80
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001fe4:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe8:	e9c4 3603 	strd	r3, r6, [r4, #12]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fec:	60a6      	str	r6, [r4, #8]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fee:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001ff0:	f000 fca6 	bl	8002940 <HAL_DMA_Init>
 8001ff4:	b108      	cbz	r0, 8001ffa <HAL_UART_MspInit+0xf6>
      Error_Handler();
 8001ff6:	f7ff fd03 	bl	8001a00 <Error_Handler>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	4a16      	ldr	r2, [pc, #88]	@ (8002058 <HAL_UART_MspInit+0x154>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001ffe:	63ac      	str	r4, [r5, #56]	@ 0x38
 8002000:	6265      	str	r5, [r4, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002002:	4c16      	ldr	r4, [pc, #88]	@ (800205c <HAL_UART_MspInit+0x158>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002004:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002008:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800200a:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800200e:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002010:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002012:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002016:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002018:	6163      	str	r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800201a:	f000 fc91 	bl	8002940 <HAL_DMA_Init>
 800201e:	b108      	cbz	r0, 8002024 <HAL_UART_MspInit+0x120>
      Error_Handler();
 8002020:	f7ff fcee 	bl	8001a00 <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2027      	movs	r0, #39	@ 0x27
 8002028:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800202a:	63ec      	str	r4, [r5, #60]	@ 0x3c
 800202c:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800202e:	f000 fc35 	bl	800289c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002032:	2027      	movs	r0, #39	@ 0x27
 8002034:	f000 fc62 	bl	80028fc <HAL_NVIC_EnableIRQ>
}
 8002038:	e7a1      	b.n	8001f7e <HAL_UART_MspInit+0x7a>
 800203a:	bf00      	nop
 800203c:	40013800 	.word	0x40013800
 8002040:	40021000 	.word	0x40021000
 8002044:	40010c00 	.word	0x40010c00
 8002048:	40010000 	.word	0x40010000
 800204c:	40004800 	.word	0x40004800
 8002050:	20000264 	.word	0x20000264
 8002054:	4002001c 	.word	0x4002001c
 8002058:	40020030 	.word	0x40020030
 800205c:	20000220 	.word	0x20000220

08002060 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002060:	e7fe      	b.n	8002060 <NMI_Handler>

08002062 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <HardFault_Handler>

08002064 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <MemManage_Handler>

08002066 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <BusFault_Handler>

08002068 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <UsageFault_Handler>

0800206a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206a:	4770      	bx	lr

0800206c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800206e:	4770      	bx	lr

08002070 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002070:	f000 b8dc 	b.w	800222c <HAL_IncTick>

08002074 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002074:	4801      	ldr	r0, [pc, #4]	@ (800207c <DMA1_Channel1_IRQHandler+0x8>)
 8002076:	f000 bd37 	b.w	8002ae8 <HAL_DMA_IRQHandler>
 800207a:	bf00      	nop
 800207c:	2000041c 	.word	0x2000041c

08002080 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002080:	4801      	ldr	r0, [pc, #4]	@ (8002088 <DMA1_Channel2_IRQHandler+0x8>)
 8002082:	f000 bd31 	b.w	8002ae8 <HAL_DMA_IRQHandler>
 8002086:	bf00      	nop
 8002088:	20000264 	.word	0x20000264

0800208c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800208c:	4801      	ldr	r0, [pc, #4]	@ (8002094 <DMA1_Channel3_IRQHandler+0x8>)
 800208e:	f000 bd2b 	b.w	8002ae8 <HAL_DMA_IRQHandler>
 8002092:	bf00      	nop
 8002094:	20000220 	.word	0x20000220

08002098 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002098:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800209a:	4804      	ldr	r0, [pc, #16]	@ (80020ac <ADC1_2_IRQHandler+0x14>)
 800209c:	f000 f91c 	bl	80022d8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80020a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <ADC1_2_IRQHandler+0x18>)
 80020a6:	f000 b917 	b.w	80022d8 <HAL_ADC_IRQHandler>
 80020aa:	bf00      	nop
 80020ac:	20000490 	.word	0x20000490
 80020b0:	20000460 	.word	0x20000460

080020b4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020b4:	4801      	ldr	r0, [pc, #4]	@ (80020bc <USART3_IRQHandler+0x8>)
 80020b6:	f002 b80b 	b.w	80040d0 <HAL_UART_IRQHandler>
 80020ba:	bf00      	nop
 80020bc:	200002a8 	.word	0x200002a8

080020c0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80020c0:	2001      	movs	r0, #1
 80020c2:	4770      	bx	lr

080020c4 <_kill>:

int _kill(int pid, int sig)
{
 80020c4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020c6:	f003 f9ad 	bl	8005424 <__errno>
 80020ca:	2316      	movs	r3, #22
 80020cc:	6003      	str	r3, [r0, #0]
  return -1;
}
 80020ce:	f04f 30ff 	mov.w	r0, #4294967295
 80020d2:	bd08      	pop	{r3, pc}

080020d4 <_exit>:

void _exit (int status)
{
 80020d4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80020d6:	f003 f9a5 	bl	8005424 <__errno>
 80020da:	2316      	movs	r3, #22
 80020dc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80020de:	e7fe      	b.n	80020de <_exit+0xa>

080020e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	460d      	mov	r5, r1
 80020e4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e6:	460e      	mov	r6, r1
 80020e8:	1b73      	subs	r3, r6, r5
 80020ea:	429c      	cmp	r4, r3
 80020ec:	dc01      	bgt.n	80020f2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80020ee:	4620      	mov	r0, r4
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80020f2:	f3af 8000 	nop.w
 80020f6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	e7f5      	b.n	80020e8 <_read+0x8>

080020fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	460d      	mov	r5, r1
 8002100:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	460e      	mov	r6, r1
 8002104:	1b73      	subs	r3, r6, r5
 8002106:	429c      	cmp	r4, r3
 8002108:	dc01      	bgt.n	800210e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800210a:	4620      	mov	r0, r4
 800210c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800210e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002112:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	e7f5      	b.n	8002104 <_write+0x8>

08002118 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	4770      	bx	lr

0800211e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800211e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8002122:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002124:	604b      	str	r3, [r1, #4]
}
 8002126:	4770      	bx	lr

08002128 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002128:	2001      	movs	r0, #1
 800212a:	4770      	bx	lr

0800212c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800212c:	2000      	movs	r0, #0
 800212e:	4770      	bx	lr

08002130 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002130:	4a0b      	ldr	r2, [pc, #44]	@ (8002160 <_sbrk+0x30>)
{
 8002132:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002134:	6811      	ldr	r1, [r2, #0]
{
 8002136:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002138:	b909      	cbnz	r1, 800213e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800213a:	490a      	ldr	r1, [pc, #40]	@ (8002164 <_sbrk+0x34>)
 800213c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	6810      	ldr	r0, [r2, #0]
 8002140:	4909      	ldr	r1, [pc, #36]	@ (8002168 <_sbrk+0x38>)
 8002142:	4c0a      	ldr	r4, [pc, #40]	@ (800216c <_sbrk+0x3c>)
 8002144:	4403      	add	r3, r0
 8002146:	1b09      	subs	r1, r1, r4
 8002148:	428b      	cmp	r3, r1
 800214a:	d906      	bls.n	800215a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800214c:	f003 f96a 	bl	8005424 <__errno>
 8002150:	230c      	movs	r3, #12
 8002152:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002154:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002158:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800215a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800215c:	e7fc      	b.n	8002158 <_sbrk+0x28>
 800215e:	bf00      	nop
 8002160:	200008c8 	.word	0x200008c8
 8002164:	20000a20 	.word	0x20000a20
 8002168:	20005000 	.word	0x20005000
 800216c:	00000400 	.word	0x00000400

08002170 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002170:	4770      	bx	lr
	...

08002174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002174:	f7ff fffc 	bl	8002170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002178:	480b      	ldr	r0, [pc, #44]	@ (80021a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800217a:	490c      	ldr	r1, [pc, #48]	@ (80021ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800217c:	4a0c      	ldr	r2, [pc, #48]	@ (80021b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002190:	4c09      	ldr	r4, [pc, #36]	@ (80021b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219e:	f003 f947 	bl	8005430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021a2:	f7ff f96f 	bl	8001484 <main>
  bx lr
 80021a6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80021b0:	0800baa8 	.word	0x0800baa8
  ldr r2, =_sbss
 80021b4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80021b8:	20000a1c 	.word	0x20000a1c

080021bc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <CAN1_RX1_IRQHandler>
	...

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <HAL_InitTick+0x3c>)
{
 80021c4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80021d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002200 <HAL_InitTick+0x40>)
 80021d2:	6810      	ldr	r0, [r2, #0]
 80021d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80021d8:	f000 fb9e 	bl	8002918 <HAL_SYSTICK_Config>
 80021dc:	4604      	mov	r4, r0
 80021de:	b958      	cbnz	r0, 80021f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e0:	2d0f      	cmp	r5, #15
 80021e2:	d809      	bhi.n	80021f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e4:	4602      	mov	r2, r0
 80021e6:	4629      	mov	r1, r5
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f000 fb56 	bl	800289c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f0:	4620      	mov	r0, r4
 80021f2:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <HAL_InitTick+0x44>)
 80021f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80021f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80021f8:	2001      	movs	r0, #1
 80021fa:	e7fc      	b.n	80021f6 <HAL_InitTick+0x36>
 80021fc:	20000020 	.word	0x20000020
 8002200:	2000001c 	.word	0x2000001c
 8002204:	20000024 	.word	0x20000024

08002208 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4a07      	ldr	r2, [pc, #28]	@ (8002228 <HAL_Init+0x20>)
{
 800220a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800220e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	f043 0310 	orr.w	r3, r3, #16
 8002214:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002216:	f000 fb2f 	bl	8002878 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	200f      	movs	r0, #15
 800221c:	f7ff ffd0 	bl	80021c0 <HAL_InitTick>
  HAL_MspInit();
 8002220:	f7ff fd3a 	bl	8001c98 <HAL_MspInit>
}
 8002224:	2000      	movs	r0, #0
 8002226:	bd08      	pop	{r3, pc}
 8002228:	40022000 	.word	0x40022000

0800222c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800222c:	4a03      	ldr	r2, [pc, #12]	@ (800223c <HAL_IncTick+0x10>)
 800222e:	4b04      	ldr	r3, [pc, #16]	@ (8002240 <HAL_IncTick+0x14>)
 8002230:	6811      	ldr	r1, [r2, #0]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	440b      	add	r3, r1
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	200008cc 	.word	0x200008cc
 8002240:	20000020 	.word	0x20000020

08002244 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002244:	4b01      	ldr	r3, [pc, #4]	@ (800224c <HAL_GetTick+0x8>)
 8002246:	6818      	ldr	r0, [r3, #0]
}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	200008cc 	.word	0x200008cc

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b538      	push	{r3, r4, r5, lr}
 8002252:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fff6 	bl	8002244 <HAL_GetTick>
 8002258:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800225c:	bf1e      	ittt	ne
 800225e:	4b04      	ldrne	r3, [pc, #16]	@ (8002270 <HAL_Delay+0x20>)
 8002260:	781b      	ldrbne	r3, [r3, #0]
 8002262:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	1b43      	subs	r3, r0, r5
 800226a:	42a3      	cmp	r3, r4
 800226c:	d3fa      	bcc.n	8002264 <HAL_Delay+0x14>
  {
  }
}
 800226e:	bd38      	pop	{r3, r4, r5, pc}
 8002270:	20000020 	.word	0x20000020

08002274 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002274:	6803      	ldr	r3, [r0, #0]
 8002276:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8002278:	4770      	bx	lr

0800227a <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 800227a:	4770      	bx	lr

0800227c <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800227c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800227e:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002280:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002282:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8002286:	d11b      	bne.n	80022c0 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002288:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800228a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800228e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	6892      	ldr	r2, [r2, #8]
 8002294:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002298:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 800229c:	d10c      	bne.n	80022b8 <ADC_DMAConvCplt+0x3c>
 800229e:	7b1a      	ldrb	r2, [r3, #12]
 80022a0:	b952      	cbnz	r2, 80022b8 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022ac:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ae:	bf5e      	ittt	pl
 80022b0:	6a9a      	ldrpl	r2, [r3, #40]	@ 0x28
 80022b2:	f042 0201 	orrpl.w	r2, r2, #1
 80022b6:	629a      	strpl	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ffde 	bl	800227a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80022be:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022c0:	6a1b      	ldr	r3, [r3, #32]
}
 80022c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	4718      	bx	r3

080022ca <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 80022ca:	4770      	bx	lr

080022cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022cc:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022ce:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80022d0:	f7ff fffb 	bl	80022ca <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022d4:	bd08      	pop	{r3, pc}

080022d6 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 80022d6:	4770      	bx	lr

080022d8 <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 80022d8:	6803      	ldr	r3, [r0, #0]
{
 80022da:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80022dc:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80022de:	685e      	ldr	r6, [r3, #4]
{
 80022e0:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80022e2:	06b0      	lsls	r0, r6, #26
 80022e4:	d526      	bpl.n	8002334 <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80022e6:	07a9      	lsls	r1, r5, #30
 80022e8:	d524      	bpl.n	8002334 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ea:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80022ec:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022ee:	bf5e      	ittt	pl
 80022f0:	6aa2      	ldrpl	r2, [r4, #40]	@ 0x28
 80022f2:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 80022f6:	62a2      	strpl	r2, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80022fe:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002302:	d110      	bne.n	8002326 <HAL_ADC_IRQHandler+0x4e>
 8002304:	7b22      	ldrb	r2, [r4, #12]
 8002306:	b972      	cbnz	r2, 8002326 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	f022 0220 	bic.w	r2, r2, #32
 800230e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002310:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002312:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002316:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002318:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800231a:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800231c:	bf5e      	ittt	pl
 800231e:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8002320:	f043 0301 	orrpl.w	r3, r3, #1
 8002324:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff ffa7 	bl	800227a <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800232c:	f06f 0212 	mvn.w	r2, #18
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002334:	0631      	lsls	r1, r6, #24
 8002336:	d530      	bpl.n	800239a <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002338:	076a      	lsls	r2, r5, #29
 800233a:	d52e      	bpl.n	800239a <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800233c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800233e:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002340:	bf5e      	ittt	pl
 8002342:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8002344:	f443 5300 	orrpl.w	r3, r3, #8192	@ 0x2000
 8002348:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
 8002352:	f5b2 4fe0 	cmp.w	r2, #28672	@ 0x7000
 8002356:	d00a      	beq.n	800236e <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002358:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800235a:	0550      	lsls	r0, r2, #21
 800235c:	d416      	bmi.n	800238c <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002364:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002368:	d110      	bne.n	800238c <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800236a:	7b22      	ldrb	r2, [r4, #12]
 800236c:	b972      	cbnz	r2, 800238c <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002374:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002376:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002378:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800237c:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800237e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002380:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002382:	bf5e      	ittt	pl
 8002384:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8002386:	f043 0301 	orrpl.w	r3, r3, #1
 800238a:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800238c:	4620      	mov	r0, r4
 800238e:	f000 fa71 	bl	8002874 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002392:	f06f 020c 	mvn.w	r2, #12
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800239a:	0672      	lsls	r2, r6, #25
 800239c:	d50c      	bpl.n	80023b8 <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800239e:	07eb      	lsls	r3, r5, #31
 80023a0:	d50a      	bpl.n	80023b8 <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023a2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023a4:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023aa:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023ac:	f7ff ff93 	bl	80022d6 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023b0:	f06f 0201 	mvn.w	r2, #1
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	601a      	str	r2, [r3, #0]
}
 80023b8:	bd70      	pop	{r4, r5, r6, pc}

080023ba <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80023ba:	4770      	bx	lr

080023bc <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023bc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80023be:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80023c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023c6:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023c8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023d0:	f7ff fff3 	bl	80023ba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023d4:	bd08      	pop	{r3, pc}
	...

080023d8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80023d8:	2300      	movs	r3, #0
{ 
 80023da:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80023dc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80023de:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 80023e2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d06c      	beq.n	80024c2 <HAL_ADC_ConfigChannel+0xea>
 80023e8:	2301      	movs	r3, #1
 80023ea:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 80023ee:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023f0:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 80023f2:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023f4:	6808      	ldr	r0, [r1, #0]
 80023f6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 80023fa:	d822      	bhi.n	8002442 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023fc:	261f      	movs	r6, #31
 80023fe:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8002400:	3b05      	subs	r3, #5
 8002402:	409e      	lsls	r6, r3
 8002404:	ea25 0506 	bic.w	r5, r5, r6
 8002408:	fa00 f303 	lsl.w	r3, r0, r3
 800240c:	432b      	orrs	r3, r5
 800240e:	6353      	str	r3, [r2, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002410:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002412:	688b      	ldr	r3, [r1, #8]
 8002414:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8002418:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800241c:	d929      	bls.n	8002472 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800241e:	68d6      	ldr	r6, [r2, #12]
 8002420:	3d1e      	subs	r5, #30
 8002422:	40a9      	lsls	r1, r5
 8002424:	ea26 0101 	bic.w	r1, r6, r1
 8002428:	40ab      	lsls	r3, r5
 800242a:	430b      	orrs	r3, r1
 800242c:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800242e:	f1a0 0310 	sub.w	r3, r0, #16
 8002432:	2b01      	cmp	r3, #1
 8002434:	d925      	bls.n	8002482 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002436:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002438:	2300      	movs	r3, #0
 800243a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 800243e:	b002      	add	sp, #8
 8002440:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002442:	2d0c      	cmp	r5, #12
 8002444:	f04f 051f 	mov.w	r5, #31
 8002448:	d809      	bhi.n	800245e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800244a:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 800244c:	3b23      	subs	r3, #35	@ 0x23
 800244e:	409d      	lsls	r5, r3
 8002450:	ea26 0505 	bic.w	r5, r6, r5
 8002454:	fa00 f303 	lsl.w	r3, r0, r3
 8002458:	432b      	orrs	r3, r5
 800245a:	6313      	str	r3, [r2, #48]	@ 0x30
 800245c:	e7d8      	b.n	8002410 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800245e:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8002460:	3b41      	subs	r3, #65	@ 0x41
 8002462:	409d      	lsls	r5, r3
 8002464:	ea26 0505 	bic.w	r5, r6, r5
 8002468:	fa00 f303 	lsl.w	r3, r0, r3
 800246c:	432b      	orrs	r3, r5
 800246e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002470:	e7ce      	b.n	8002410 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002472:	6910      	ldr	r0, [r2, #16]
 8002474:	40a9      	lsls	r1, r5
 8002476:	ea20 0101 	bic.w	r1, r0, r1
 800247a:	40ab      	lsls	r3, r5
 800247c:	430b      	orrs	r3, r1
 800247e:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002480:	e7d9      	b.n	8002436 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_ADC_ConfigChannel+0xf0>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d116      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002488:	6893      	ldr	r3, [r2, #8]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	d4d3      	bmi.n	8002436 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800248e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002490:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002492:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002496:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002498:	d1cd      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800249a:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <HAL_ADC_ConfigChannel+0xf4>)
 800249c:	4a0c      	ldr	r2, [pc, #48]	@ (80024d0 <HAL_ADC_ConfigChannel+0xf8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80024a4:	220a      	movs	r2, #10
 80024a6:	4353      	muls	r3, r2
            wait_loop_index--;
 80024a8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80024aa:	9b01      	ldr	r3, [sp, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0c2      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80024b0:	9b01      	ldr	r3, [sp, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	e7f8      	b.n	80024a8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80024b8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ba:	f043 0320 	orr.w	r3, r3, #32
 80024be:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80024c0:	e7ba      	b.n	8002438 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80024c2:	2002      	movs	r0, #2
 80024c4:	e7bb      	b.n	800243e <HAL_ADC_ConfigChannel+0x66>
 80024c6:	bf00      	nop
 80024c8:	40012400 	.word	0x40012400
 80024cc:	2000001c 	.word	0x2000001c
 80024d0:	000f4240 	.word	0x000f4240

080024d4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80024d4:	2300      	movs	r3, #0
{
 80024d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80024d8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024da:	6803      	ldr	r3, [r0, #0]
{
 80024dc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	07d2      	lsls	r2, r2, #31
 80024e2:	d502      	bpl.n	80024ea <ADC_Enable+0x16>
  return HAL_OK;
 80024e4:	2000      	movs	r0, #0
}
 80024e6:	b003      	add	sp, #12
 80024e8:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024f2:	4b14      	ldr	r3, [pc, #80]	@ (8002544 <ADC_Enable+0x70>)
 80024f4:	4a14      	ldr	r2, [pc, #80]	@ (8002548 <ADC_Enable+0x74>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80024fc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80024fe:	9b01      	ldr	r3, [sp, #4]
 8002500:	b9e3      	cbnz	r3, 800253c <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8002502:	f7ff fe9f 	bl	8002244 <HAL_GetTick>
 8002506:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	07db      	lsls	r3, r3, #31
 800250e:	d4e9      	bmi.n	80024e4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002510:	f7ff fe98 	bl	8002244 <HAL_GetTick>
 8002514:	1b40      	subs	r0, r0, r5
 8002516:	2802      	cmp	r0, #2
 8002518:	d9f6      	bls.n	8002508 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f013 0301 	ands.w	r3, r3, #1
 8002522:	d1f1      	bne.n	8002508 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002524:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8002526:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002528:	f042 0210 	orr.w	r2, r2, #16
 800252c:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8002530:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800253a:	e7d4      	b.n	80024e6 <ADC_Enable+0x12>
      wait_loop_index--;
 800253c:	9b01      	ldr	r3, [sp, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	e7dc      	b.n	80024fc <ADC_Enable+0x28>
 8002542:	bf00      	nop
 8002544:	2000001c 	.word	0x2000001c
 8002548:	000f4240 	.word	0x000f4240

0800254c <HAL_ADC_Start>:
{
 800254c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800254e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8002552:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002554:	2b01      	cmp	r3, #1
 8002556:	d054      	beq.n	8002602 <HAL_ADC_Start+0xb6>
 8002558:	2301      	movs	r3, #1
 800255a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800255e:	f7ff ffb9 	bl	80024d4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002562:	2800      	cmp	r0, #0
 8002564:	d149      	bne.n	80025fa <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8002566:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002568:	4a27      	ldr	r2, [pc, #156]	@ (8002608 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800256a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002576:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	4293      	cmp	r3, r2
 800257c:	d104      	bne.n	8002588 <HAL_ADC_Start+0x3c>
 800257e:	4923      	ldr	r1, [pc, #140]	@ (800260c <HAL_ADC_Start+0xc0>)
 8002580:	684a      	ldr	r2, [r1, #4]
 8002582:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8002586:	d12e      	bne.n	80025e6 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002588:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800258a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800258e:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002590:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002592:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002594:	bf41      	itttt	mi
 8002596:	6aa2      	ldrmi	r2, [r4, #40]	@ 0x28
 8002598:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 800259c:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 80025a0:	62a2      	strmi	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80025a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025a8:	bf1c      	itt	ne
 80025aa:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 80025ac:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 80025b2:	2200      	movs	r2, #0
 80025b4:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025b8:	f06f 0202 	mvn.w	r2, #2
 80025bc:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80025c4:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80025c8:	d113      	bne.n	80025f2 <HAL_ADC_Start+0xa6>
 80025ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002608 <HAL_ADC_Start+0xbc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d105      	bne.n	80025dc <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025d0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80025d4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025d6:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80025da:	d10a      	bne.n	80025f2 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025e2:	609a      	str	r2, [r3, #8]
}
 80025e4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80025e8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025ec:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025ee:	684a      	ldr	r2, [r1, #4]
 80025f0:	e7cf      	b.n	8002592 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025f8:	e7f3      	b.n	80025e2 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80025fa:	2300      	movs	r3, #0
 80025fc:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8002600:	e7f0      	b.n	80025e4 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8002602:	2002      	movs	r0, #2
 8002604:	e7ee      	b.n	80025e4 <HAL_ADC_Start+0x98>
 8002606:	bf00      	nop
 8002608:	40012800 	.word	0x40012800
 800260c:	40012400 	.word	0x40012400

08002610 <HAL_ADC_Start_DMA>:
{
 8002610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002614:	4b40      	ldr	r3, [pc, #256]	@ (8002718 <HAL_ADC_Start_DMA+0x108>)
{
 8002616:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002618:	6802      	ldr	r2, [r0, #0]
{
 800261a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800261c:	429a      	cmp	r2, r3
{
 800261e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002620:	d002      	beq.n	8002628 <HAL_ADC_Start_DMA+0x18>
 8002622:	493e      	ldr	r1, [pc, #248]	@ (800271c <HAL_ADC_Start_DMA+0x10c>)
 8002624:	428a      	cmp	r2, r1
 8002626:	d103      	bne.n	8002630 <HAL_ADC_Start_DMA+0x20>
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 800262e:	d16e      	bne.n	800270e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8002630:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002634:	2b01      	cmp	r3, #1
 8002636:	d06c      	beq.n	8002712 <HAL_ADC_Start_DMA+0x102>
 8002638:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800263a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800263c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002640:	f7ff ff48 	bl	80024d4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002644:	4606      	mov	r6, r0
 8002646:	2800      	cmp	r0, #0
 8002648:	d15d      	bne.n	8002706 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800264a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800264c:	6821      	ldr	r1, [r4, #0]
 800264e:	4b33      	ldr	r3, [pc, #204]	@ (800271c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8002650:	f425 6570 	bic.w	r5, r5, #3840	@ 0xf00
 8002654:	f025 0501 	bic.w	r5, r5, #1
 8002658:	f445 7580 	orr.w	r5, r5, #256	@ 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800265c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800265e:	62a5      	str	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002660:	d104      	bne.n	800266c <HAL_ADC_Start_DMA+0x5c>
 8002662:	4a2d      	ldr	r2, [pc, #180]	@ (8002718 <HAL_ADC_Start_DMA+0x108>)
 8002664:	6853      	ldr	r3, [r2, #4]
 8002666:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 800266a:	d13e      	bne.n	80026ea <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800266c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800266e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002672:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002674:	684b      	ldr	r3, [r1, #4]
 8002676:	055a      	lsls	r2, r3, #21
 8002678:	d505      	bpl.n	8002686 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800267a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800267c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002684:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002686:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002688:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268a:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800268e:	bf18      	it	ne
 8002690:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002692:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002694:	bf18      	it	ne
 8002696:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800269a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 800269c:	2300      	movs	r3, #0
 800269e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002720 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026a4:	314c      	adds	r1, #76	@ 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026a6:	6283      	str	r3, [r0, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <HAL_ADC_Start_DMA+0x114>)
 80026aa:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <HAL_ADC_Start_DMA+0x118>)
 80026ae:	6303      	str	r3, [r0, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026b0:	f06f 0302 	mvn.w	r3, #2
 80026b4:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026b8:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80026bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c4:	4643      	mov	r3, r8
 80026c6:	f000 f96d 	bl	80029a4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80026d2:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	bf0c      	ite	eq
 80026da:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026de:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	4630      	mov	r0, r6
 80026e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80026ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026f0:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026f2:	6853      	ldr	r3, [r2, #4]
 80026f4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026f6:	bf41      	itttt	mi
 80026f8:	6aa0      	ldrmi	r0, [r4, #40]	@ 0x28
 80026fa:	f420 5040 	bicmi.w	r0, r0, #12288	@ 0x3000
 80026fe:	f440 5080 	orrmi.w	r0, r0, #4096	@ 0x1000
 8002702:	62a0      	strmi	r0, [r4, #40]	@ 0x28
 8002704:	e7bf      	b.n	8002686 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8002706:	2300      	movs	r3, #0
 8002708:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800270c:	e7ea      	b.n	80026e4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800270e:	2601      	movs	r6, #1
 8002710:	e7e8      	b.n	80026e4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002712:	2602      	movs	r6, #2
 8002714:	e7e6      	b.n	80026e4 <HAL_ADC_Start_DMA+0xd4>
 8002716:	bf00      	nop
 8002718:	40012400 	.word	0x40012400
 800271c:	40012800 	.word	0x40012800
 8002720:	0800227d 	.word	0x0800227d
 8002724:	080022cd 	.word	0x080022cd
 8002728:	080023bd 	.word	0x080023bd

0800272c <ADC_ConversionStop_Disable>:
{
 800272c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800272e:	6803      	ldr	r3, [r0, #0]
{
 8002730:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	07d1      	lsls	r1, r2, #31
 8002736:	d401      	bmi.n	800273c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002738:	2000      	movs	r0, #0
}
 800273a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002744:	f7ff fd7e 	bl	8002244 <HAL_GetTick>
 8002748:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	07db      	lsls	r3, r3, #31
 8002750:	d5f2      	bpl.n	8002738 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002752:	f7ff fd77 	bl	8002244 <HAL_GetTick>
 8002756:	1b40      	subs	r0, r0, r5
 8002758:	2802      	cmp	r0, #2
 800275a:	d9f6      	bls.n	800274a <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	07da      	lsls	r2, r3, #31
 8002762:	d5f2      	bpl.n	800274a <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002764:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8002766:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8002776:	e7e0      	b.n	800273a <ADC_ConversionStop_Disable+0xe>

08002778 <HAL_ADC_Init>:
{
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800277a:	4604      	mov	r4, r0
 800277c:	2800      	cmp	r0, #0
 800277e:	d06d      	beq.n	800285c <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002780:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002782:	b923      	cbnz	r3, 800278e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002784:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002786:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 800278a:	f7ff faa7 	bl	8001cdc <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff ffcc 	bl	800272c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002794:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002796:	f013 0310 	ands.w	r3, r3, #16
 800279a:	d161      	bne.n	8002860 <HAL_ADC_Init+0xe8>
 800279c:	2800      	cmp	r0, #0
 800279e:	d15f      	bne.n	8002860 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 80027a0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027a2:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80027a4:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80027a8:	f022 0202 	bic.w	r2, r2, #2
 80027ac:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027b0:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027b2:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80027b4:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027b6:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027b8:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027ba:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027be:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027c2:	d036      	beq.n	8002832 <HAL_ADC_Init+0xba>
 80027c4:	1e77      	subs	r7, r6, #1
 80027c6:	427d      	negs	r5, r7
 80027c8:	417d      	adcs	r5, r7
 80027ca:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027cc:	7d27      	ldrb	r7, [r4, #20]
 80027ce:	2f01      	cmp	r7, #1
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027d2:	bb82      	cbnz	r2, 8002836 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027d4:	69a2      	ldr	r2, [r4, #24]
 80027d6:	3a01      	subs	r2, #1
 80027d8:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 80027dc:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80027e0:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027e2:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80027e6:	6857      	ldr	r7, [r2, #4]
 80027e8:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 80027ec:	ea45 0507 	orr.w	r5, r5, r7
 80027f0:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80027f2:	6897      	ldr	r7, [r2, #8]
 80027f4:	4d1d      	ldr	r5, [pc, #116]	@ (800286c <HAL_ADC_Init+0xf4>)
 80027f6:	ea05 0507 	and.w	r5, r5, r7
 80027fa:	ea45 0501 	orr.w	r5, r5, r1
 80027fe:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002800:	d001      	beq.n	8002806 <HAL_ADC_Init+0x8e>
 8002802:	2e01      	cmp	r6, #1
 8002804:	d102      	bne.n	800280c <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002806:	6923      	ldr	r3, [r4, #16]
 8002808:	3b01      	subs	r3, #1
 800280a:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800280c:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800280e:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 8002812:	432b      	orrs	r3, r5
 8002814:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002816:	6892      	ldr	r2, [r2, #8]
 8002818:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <HAL_ADC_Init+0xf8>)
 800281a:	4013      	ands	r3, r2
 800281c:	4299      	cmp	r1, r3
 800281e:	d113      	bne.n	8002848 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8002820:	2300      	movs	r3, #0
 8002822:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002824:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002826:	f023 0303 	bic.w	r3, r3, #3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002832:	4635      	mov	r5, r6
 8002834:	e7ca      	b.n	80027cc <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002836:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002838:	f042 0220 	orr.w	r2, r2, #32
 800283c:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8002846:	e7cb      	b.n	80027e0 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8002848:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800284a:	f023 0312 	bic.w	r3, r3, #18
 800284e:	f043 0310 	orr.w	r3, r3, #16
 8002852:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002854:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 800285c:	2001      	movs	r0, #1
 800285e:	e7e7      	b.n	8002830 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002860:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002862:	f043 0310 	orr.w	r3, r3, #16
 8002866:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8002868:	e7f8      	b.n	800285c <HAL_ADC_Init+0xe4>
 800286a:	bf00      	nop
 800286c:	ffe1f7fd 	.word	0xffe1f7fd
 8002870:	ff1f0efe 	.word	0xff1f0efe

08002874 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002874:	4770      	bx	lr
	...

08002878 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002878:	4907      	ldr	r1, [pc, #28]	@ (8002898 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800287a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800287e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002882:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002886:	0412      	lsls	r2, r2, #16
 8002888:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800288a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800288c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002894:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800289c:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289e:	b530      	push	{r4, r5, lr}
 80028a0:	68dc      	ldr	r4, [r3, #12]
 80028a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	bf28      	it	cs
 80028b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b8:	bf94      	ite	ls
 80028ba:	2400      	movls	r4, #0
 80028bc:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028be:	fa05 f303 	lsl.w	r3, r5, r3
 80028c2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c6:	40a5      	lsls	r5, r4
 80028c8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80028ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	bfac      	ite	ge
 80028d6:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	4a07      	ldrlt	r2, [pc, #28]	@ (80028f8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	bfab      	itete	ge
 80028e4:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ec:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80028f2:	bd30      	pop	{r4, r5, pc}
 80028f4:	e000ed00 	.word	0xe000ed00
 80028f8:	e000ed14 	.word	0xe000ed14

080028fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028fc:	2800      	cmp	r0, #0
 80028fe:	db07      	blt.n	8002910 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002900:	2301      	movs	r3, #1
 8002902:	0941      	lsrs	r1, r0, #5
 8002904:	4a03      	ldr	r2, [pc, #12]	@ (8002914 <HAL_NVIC_EnableIRQ+0x18>)
 8002906:	f000 001f 	and.w	r0, r0, #31
 800290a:	4083      	lsls	r3, r0
 800290c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	3801      	subs	r0, #1
 800291a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800291e:	d20b      	bcs.n	8002938 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002920:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	21f0      	movs	r1, #240	@ 0xf0
 8002926:	4a05      	ldr	r2, [pc, #20]	@ (800293c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002928:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002930:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002932:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002934:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002936:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002938:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002940:	4603      	mov	r3, r0
{
 8002942:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8002944:	b340      	cbz	r0, 8002998 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002946:	2114      	movs	r1, #20
 8002948:	6800      	ldr	r0, [r0, #0]
 800294a:	4a14      	ldr	r2, [pc, #80]	@ (800299c <HAL_DMA_Init+0x5c>)
 800294c:	4402      	add	r2, r0
 800294e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002952:	0092      	lsls	r2, r2, #2
 8002954:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <HAL_DMA_Init+0x60>)
 8002958:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002960:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8002964:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002966:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8002968:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296a:	4322      	orrs	r2, r4
 800296c:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800296e:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002972:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002974:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002976:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297a:	4322      	orrs	r2, r4
 800297c:	699c      	ldr	r4, [r3, #24]
 800297e:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002980:	69dc      	ldr	r4, [r3, #28]
 8002982:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8002984:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002986:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002988:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800298a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298c:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800298e:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002992:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 8002996:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002998:	2001      	movs	r0, #1
 800299a:	e7fc      	b.n	8002996 <HAL_DMA_Init+0x56>
 800299c:	bffdfff8 	.word	0xbffdfff8
 80029a0:	40020000 	.word	0x40020000

080029a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029a6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80029aa:	2c01      	cmp	r4, #1
 80029ac:	d034      	beq.n	8002a18 <HAL_DMA_Start_IT+0x74>
 80029ae:	2401      	movs	r4, #1
 80029b0:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029b4:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 80029b8:	2c01      	cmp	r4, #1
 80029ba:	b2e5      	uxtb	r5, r4
 80029bc:	f04f 0400 	mov.w	r4, #0
 80029c0:	d128      	bne.n	8002a14 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c2:	2602      	movs	r6, #2
 80029c4:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c8:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029ca:	6804      	ldr	r4, [r0, #0]
 80029cc:	6826      	ldr	r6, [r4, #0]
 80029ce:	f026 0601 	bic.w	r6, r6, #1
 80029d2:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029d4:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 80029d8:	40bd      	lsls	r5, r7
 80029da:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029dc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029de:	6843      	ldr	r3, [r0, #4]
 80029e0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80029e2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029e4:	bf0b      	itete	eq
 80029e6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80029e8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80029ea:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80029ec:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80029ee:	b14b      	cbz	r3, 8002a04 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80029f6:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029f8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6023      	str	r3, [r4, #0]
}
 8002a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	f023 0304 	bic.w	r3, r3, #4
 8002a0a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	f043 030a 	orr.w	r3, r3, #10
 8002a12:	e7f0      	b.n	80029f6 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8002a14:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8002a18:	2002      	movs	r0, #2
 8002a1a:	e7f2      	b.n	8002a02 <HAL_DMA_Start_IT+0x5e>

08002a1c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a1c:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8002a20:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a22:	2a02      	cmp	r2, #2
 8002a24:	d006      	beq.n	8002a34 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a26:	2204      	movs	r2, #4
 8002a28:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8002a2a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002a32:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a34:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a36:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a38:	6811      	ldr	r1, [r2, #0]
 8002a3a:	f021 010e 	bic.w	r1, r1, #14
 8002a3e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002a40:	6811      	ldr	r1, [r2, #0]
 8002a42:	f021 0101 	bic.w	r1, r1, #1
 8002a46:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a48:	2101      	movs	r1, #1
 8002a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a50:	6042      	str	r2, [r0, #4]
  return status; 
 8002a52:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002a54:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8002a58:	e7e8      	b.n	8002a2c <HAL_DMA_Abort+0x10>
	...

08002a5c <HAL_DMA_Abort_IT>:
{  
 8002a5c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a5e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d003      	beq.n	8002a6e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a66:	2304      	movs	r3, #4
 8002a68:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8002a6a:	2001      	movs	r0, #1
}
 8002a6c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6e:	6803      	ldr	r3, [r0, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	f022 020e 	bic.w	r2, r2, #14
 8002a76:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a80:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_DMA_Abort_IT+0x84>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01f      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x6a>
 8002a86:	3214      	adds	r2, #20
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d01e      	beq.n	8002aca <HAL_DMA_Abort_IT+0x6e>
 8002a8c:	3214      	adds	r2, #20
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01d      	beq.n	8002ace <HAL_DMA_Abort_IT+0x72>
 8002a92:	3214      	adds	r2, #20
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d01d      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x78>
 8002a98:	3214      	adds	r2, #20
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01d      	beq.n	8002ada <HAL_DMA_Abort_IT+0x7e>
 8002a9e:	3214      	adds	r2, #20
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	bf14      	ite	ne
 8002aa4:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8002aa8:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8002aac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae4 <HAL_DMA_Abort_IT+0x88>)
 8002aae:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002abc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002abe:	b103      	cbz	r3, 8002ac2 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8002ac0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	e7d2      	b.n	8002a6c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e7f0      	b.n	8002aac <HAL_DMA_Abort_IT+0x50>
 8002aca:	2310      	movs	r3, #16
 8002acc:	e7ee      	b.n	8002aac <HAL_DMA_Abort_IT+0x50>
 8002ace:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad2:	e7eb      	b.n	8002aac <HAL_DMA_Abort_IT+0x50>
 8002ad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad8:	e7e8      	b.n	8002aac <HAL_DMA_Abort_IT+0x50>
 8002ada:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ade:	e7e5      	b.n	8002aac <HAL_DMA_Abort_IT+0x50>
 8002ae0:	40020008 	.word	0x40020008
 8002ae4:	40020000 	.word	0x40020000

08002ae8 <HAL_DMA_IRQHandler>:
{
 8002ae8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002aea:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aec:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002aee:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002af0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002af2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002af4:	4095      	lsls	r5, r2
 8002af6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002af8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002afa:	d032      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x7a>
 8002afc:	074d      	lsls	r5, r1, #29
 8002afe:	d530      	bpl.n	8002b62 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b04:	bf5e      	ittt	pl
 8002b06:	681a      	ldrpl	r2, [r3, #0]
 8002b08:	f022 0204 	bicpl.w	r2, r2, #4
 8002b0c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b0e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c08 <HAL_DMA_IRQHandler+0x120>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d019      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x60>
 8002b14:	3214      	adds	r2, #20
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d018      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x64>
 8002b1a:	3214      	adds	r2, #20
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d017      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x68>
 8002b20:	3214      	adds	r2, #20
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d017      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x6e>
 8002b26:	3214      	adds	r2, #20
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d017      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x74>
 8002b2c:	3214      	adds	r2, #20
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	bf14      	ite	ne
 8002b32:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8002b36:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8002b3a:	4a34      	ldr	r2, [pc, #208]	@ (8002c0c <HAL_DMA_IRQHandler+0x124>)
 8002b3c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002b3e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05e      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x11a>
}
 8002b44:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002b46:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b48:	2304      	movs	r3, #4
 8002b4a:	e7f6      	b.n	8002b3a <HAL_DMA_IRQHandler+0x52>
 8002b4c:	2340      	movs	r3, #64	@ 0x40
 8002b4e:	e7f4      	b.n	8002b3a <HAL_DMA_IRQHandler+0x52>
 8002b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b54:	e7f1      	b.n	8002b3a <HAL_DMA_IRQHandler+0x52>
 8002b56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b5a:	e7ee      	b.n	8002b3a <HAL_DMA_IRQHandler+0x52>
 8002b5c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b60:	e7eb      	b.n	8002b3a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b62:	2502      	movs	r5, #2
 8002b64:	4095      	lsls	r5, r2
 8002b66:	4225      	tst	r5, r4
 8002b68:	d035      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xee>
 8002b6a:	078d      	lsls	r5, r1, #30
 8002b6c:	d533      	bpl.n	8002bd6 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	0694      	lsls	r4, r2, #26
 8002b72:	d406      	bmi.n	8002b82 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f022 020a 	bic.w	r2, r2, #10
 8002b7a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b82:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <HAL_DMA_IRQHandler+0x120>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d019      	beq.n	8002bbc <HAL_DMA_IRQHandler+0xd4>
 8002b88:	3214      	adds	r2, #20
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d018      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0xd8>
 8002b8e:	3214      	adds	r2, #20
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d017      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0xdc>
 8002b94:	3214      	adds	r2, #20
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d017      	beq.n	8002bca <HAL_DMA_IRQHandler+0xe2>
 8002b9a:	3214      	adds	r2, #20
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d017      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xe8>
 8002ba0:	3214      	adds	r2, #20
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	bf14      	ite	ne
 8002ba6:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8002baa:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8002bae:	4a17      	ldr	r2, [pc, #92]	@ (8002c0c <HAL_DMA_IRQHandler+0x124>)
 8002bb0:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002bb8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002bba:	e7c1      	b.n	8002b40 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e7f6      	b.n	8002bae <HAL_DMA_IRQHandler+0xc6>
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e7f4      	b.n	8002bae <HAL_DMA_IRQHandler+0xc6>
 8002bc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bc8:	e7f1      	b.n	8002bae <HAL_DMA_IRQHandler+0xc6>
 8002bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bce:	e7ee      	b.n	8002bae <HAL_DMA_IRQHandler+0xc6>
 8002bd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd4:	e7eb      	b.n	8002bae <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bd6:	2508      	movs	r5, #8
 8002bd8:	4095      	lsls	r5, r2
 8002bda:	4225      	tst	r5, r4
 8002bdc:	d011      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x11a>
 8002bde:	0709      	lsls	r1, r1, #28
 8002be0:	d50f      	bpl.n	8002c02 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be2:	6819      	ldr	r1, [r3, #0]
 8002be4:	f021 010e 	bic.w	r1, r1, #14
 8002be8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bea:	2301      	movs	r3, #1
 8002bec:	fa03 f202 	lsl.w	r2, r3, r2
 8002bf0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bf2:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002bf4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002bfe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002c00:	e79e      	b.n	8002b40 <HAL_DMA_IRQHandler+0x58>
}
 8002c02:	bc70      	pop	{r4, r5, r6}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40020008 	.word	0x40020008
 8002c0c:	40020000 	.word	0x40020000

08002c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c14:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002c16:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c18:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8002da4 <HAL_GPIO_Init+0x194>
 8002c1c:	4b62      	ldr	r3, [pc, #392]	@ (8002da8 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8002c1e:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8002dac <HAL_GPIO_Init+0x19c>
 8002c22:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8002db0 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c26:	680a      	ldr	r2, [r1, #0]
 8002c28:	fa32 f506 	lsrs.w	r5, r2, r6
 8002c2c:	d102      	bne.n	8002c34 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8002c2e:	b003      	add	sp, #12
 8002c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002c34:	2701      	movs	r7, #1
 8002c36:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c38:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8002c3c:	ea37 0202 	bics.w	r2, r7, r2
 8002c40:	d17a      	bne.n	8002d38 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8002c42:	684a      	ldr	r2, [r1, #4]
 8002c44:	2a03      	cmp	r2, #3
 8002c46:	d807      	bhi.n	8002c58 <HAL_GPIO_Init+0x48>
 8002c48:	3a01      	subs	r2, #1
 8002c4a:	2a02      	cmp	r2, #2
 8002c4c:	f200 8083 	bhi.w	8002d56 <HAL_GPIO_Init+0x146>
 8002c50:	e8df f002 	tbb	[pc, r2]
 8002c54:	9792      	.short	0x9792
 8002c56:	9d          	.byte	0x9d
 8002c57:	00          	.byte	0x00
 8002c58:	2a12      	cmp	r2, #18
 8002c5a:	f000 8095 	beq.w	8002d88 <HAL_GPIO_Init+0x178>
 8002c5e:	d86d      	bhi.n	8002d3c <HAL_GPIO_Init+0x12c>
 8002c60:	2a11      	cmp	r2, #17
 8002c62:	f000 808b 	beq.w	8002d7c <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c66:	2dff      	cmp	r5, #255	@ 0xff
 8002c68:	bf98      	it	ls
 8002c6a:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c6c:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c70:	bf88      	it	hi
 8002c72:	f100 0904 	addhi.w	r9, r0, #4
 8002c76:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c7a:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c7e:	bf88      	it	hi
 8002c80:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c82:	fa0b fa02 	lsl.w	sl, fp, r2
 8002c86:	ea27 070a 	bic.w	r7, r7, sl
 8002c8a:	fa04 f202 	lsl.w	r2, r4, r2
 8002c8e:	4317      	orrs	r7, r2
 8002c90:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c94:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002c98:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8002c9c:	d04c      	beq.n	8002d38 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c9e:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8002ca2:	f026 0703 	bic.w	r7, r6, #3
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	f8cc 2018 	str.w	r2, [ip, #24]
 8002cae:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8002cb2:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8002cb6:	f002 0201 	and.w	r2, r2, #1
 8002cba:	9201      	str	r2, [sp, #4]
 8002cbc:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cc0:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cc4:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cc6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002cca:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ccc:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002cd0:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cd4:	4a37      	ldr	r2, [pc, #220]	@ (8002db4 <HAL_GPIO_Init+0x1a4>)
 8002cd6:	4290      	cmp	r0, r2
 8002cd8:	d05d      	beq.n	8002d96 <HAL_GPIO_Init+0x186>
 8002cda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002cde:	4290      	cmp	r0, r2
 8002ce0:	d05b      	beq.n	8002d9a <HAL_GPIO_Init+0x18a>
 8002ce2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ce6:	4290      	cmp	r0, r2
 8002ce8:	d059      	beq.n	8002d9e <HAL_GPIO_Init+0x18e>
 8002cea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002cee:	4290      	cmp	r0, r2
 8002cf0:	bf14      	ite	ne
 8002cf2:	2204      	movne	r2, #4
 8002cf4:	2203      	moveq	r2, #3
 8002cf6:	fa02 f20a 	lsl.w	r2, r2, sl
 8002cfa:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8002cfe:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d00:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d02:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d06:	bf14      	ite	ne
 8002d08:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d0a:	43aa      	biceq	r2, r5
 8002d0c:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d0e:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d10:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d14:	bf14      	ite	ne
 8002d16:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d18:	43aa      	biceq	r2, r5
 8002d1a:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002d1c:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d1e:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002d22:	bf14      	ite	ne
 8002d24:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d26:	43aa      	biceq	r2, r5
 8002d28:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002d2a:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d2c:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002d30:	bf14      	ite	ne
 8002d32:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d34:	43aa      	biceq	r2, r5
 8002d36:	601a      	str	r2, [r3, #0]
	position++;
 8002d38:	3601      	adds	r6, #1
 8002d3a:	e774      	b.n	8002c26 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8002d3c:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8002db8 <HAL_GPIO_Init+0x1a8>
 8002d40:	454a      	cmp	r2, r9
 8002d42:	d008      	beq.n	8002d56 <HAL_GPIO_Init+0x146>
 8002d44:	d810      	bhi.n	8002d68 <HAL_GPIO_Init+0x158>
 8002d46:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8002d4a:	454a      	cmp	r2, r9
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x146>
 8002d4e:	4572      	cmp	r2, lr
 8002d50:	d001      	beq.n	8002d56 <HAL_GPIO_Init+0x146>
 8002d52:	4542      	cmp	r2, r8
 8002d54:	d187      	bne.n	8002c66 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d56:	688a      	ldr	r2, [r1, #8]
 8002d58:	b1da      	cbz	r2, 8002d92 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d5a:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d5c:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8002d60:	bf0c      	ite	eq
 8002d62:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8002d64:	6147      	strne	r7, [r0, #20]
 8002d66:	e77e      	b.n	8002c66 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8002d68:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8002dbc <HAL_GPIO_Init+0x1ac>
 8002d6c:	454a      	cmp	r2, r9
 8002d6e:	d0f2      	beq.n	8002d56 <HAL_GPIO_Init+0x146>
 8002d70:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8002d74:	454a      	cmp	r2, r9
 8002d76:	e7ed      	b.n	8002d54 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d78:	68cc      	ldr	r4, [r1, #12]
          break;
 8002d7a:	e774      	b.n	8002c66 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d7c:	68cc      	ldr	r4, [r1, #12]
 8002d7e:	3404      	adds	r4, #4
          break;
 8002d80:	e771      	b.n	8002c66 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d82:	68cc      	ldr	r4, [r1, #12]
 8002d84:	3408      	adds	r4, #8
          break;
 8002d86:	e76e      	b.n	8002c66 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d88:	68cc      	ldr	r4, [r1, #12]
 8002d8a:	340c      	adds	r4, #12
          break;
 8002d8c:	e76b      	b.n	8002c66 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8002d8e:	2400      	movs	r4, #0
 8002d90:	e769      	b.n	8002c66 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d92:	2404      	movs	r4, #4
 8002d94:	e767      	b.n	8002c66 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d96:	2200      	movs	r2, #0
 8002d98:	e7ad      	b.n	8002cf6 <HAL_GPIO_Init+0xe6>
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	e7ab      	b.n	8002cf6 <HAL_GPIO_Init+0xe6>
 8002d9e:	2202      	movs	r2, #2
 8002da0:	e7a9      	b.n	8002cf6 <HAL_GPIO_Init+0xe6>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40010400 	.word	0x40010400
 8002dac:	10210000 	.word	0x10210000
 8002db0:	10110000 	.word	0x10110000
 8002db4:	40010800 	.word	0x40010800
 8002db8:	10220000 	.word	0x10220000
 8002dbc:	10310000 	.word	0x10310000

08002dc0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc0:	6883      	ldr	r3, [r0, #8]
 8002dc2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002dc4:	bf14      	ite	ne
 8002dc6:	2001      	movne	r0, #1
 8002dc8:	2000      	moveq	r0, #0
 8002dca:	4770      	bx	lr

08002dcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dcc:	b10a      	cbz	r2, 8002dd2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dce:	6101      	str	r1, [r0, #16]
  }
}
 8002dd0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dd2:	0409      	lsls	r1, r1, #16
 8002dd4:	e7fb      	b.n	8002dce <HAL_GPIO_WritePin+0x2>

08002dd6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dd6:	6801      	ldr	r1, [r0, #0]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	694b      	ldr	r3, [r1, #20]
 8002ddc:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8002de0:	d010      	beq.n	8002e04 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de2:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8002de6:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002de8:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dea:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dec:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df0:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df4:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8002e00:	2001      	movs	r0, #1
 8002e02:	4770      	bx	lr
  }
  return HAL_OK;
 8002e04:	4618      	mov	r0, r3
}
 8002e06:	4770      	bx	lr

08002e08 <I2C_WaitOnFlagUntilTimeout>:
{
 8002e08:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002e0c:	4606      	mov	r6, r0
 8002e0e:	460f      	mov	r7, r1
 8002e10:	4691      	mov	r9, r2
 8002e12:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002e18:	6833      	ldr	r3, [r6, #0]
 8002e1a:	f1ba 0f01 	cmp.w	sl, #1
 8002e1e:	bf0c      	ite	eq
 8002e20:	695c      	ldreq	r4, [r3, #20]
 8002e22:	699c      	ldrne	r4, [r3, #24]
 8002e24:	ea27 0404 	bic.w	r4, r7, r4
 8002e28:	b2a4      	uxth	r4, r4
 8002e2a:	fab4 f484 	clz	r4, r4
 8002e2e:	0964      	lsrs	r4, r4, #5
 8002e30:	45a1      	cmp	r9, r4
 8002e32:	d001      	beq.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002e34:	2000      	movs	r0, #0
 8002e36:	e025      	b.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8002e38:	1c6a      	adds	r2, r5, #1
 8002e3a:	d0ee      	beq.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3c:	f7ff fa02 	bl	8002244 <HAL_GetTick>
 8002e40:	9b08      	ldr	r3, [sp, #32]
 8002e42:	1ac0      	subs	r0, r0, r3
 8002e44:	42a8      	cmp	r0, r5
 8002e46:	d801      	bhi.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e48:	2d00      	cmp	r5, #0
 8002e4a:	d1e5      	bne.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e4c:	6833      	ldr	r3, [r6, #0]
 8002e4e:	f1ba 0f01 	cmp.w	sl, #1
 8002e52:	bf0c      	ite	eq
 8002e54:	695b      	ldreq	r3, [r3, #20]
 8002e56:	699b      	ldrne	r3, [r3, #24]
 8002e58:	ea27 0303 	bic.w	r3, r7, r3
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	4599      	cmp	r9, r3
 8002e66:	d1d7      	bne.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e68:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e6a:	2220      	movs	r2, #32
          return HAL_ERROR;
 8002e6c:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e6e:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e70:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e74:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002e7a:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e7e:	f042 0220 	orr.w	r2, r2, #32
 8002e82:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8002e84:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	460f      	mov	r7, r1
 8002e90:	4616      	mov	r6, r2
 8002e92:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e94:	6825      	ldr	r5, [r4, #0]
 8002e96:	6968      	ldr	r0, [r5, #20]
 8002e98:	ea27 0000 	bic.w	r0, r7, r0
 8002e9c:	b280      	uxth	r0, r0
 8002e9e:	b1c0      	cbz	r0, 8002ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ea0:	696b      	ldr	r3, [r5, #20]
 8002ea2:	055a      	lsls	r2, r3, #21
 8002ea4:	d517      	bpl.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ea8:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eae:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb0:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8002eb4:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002eca:	2300      	movs	r3, #0
      return HAL_ERROR;
 8002ecc:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8002ece:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	1c73      	adds	r3, r6, #1
 8002ed8:	d0dd      	beq.n	8002e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7ff f9b3 	bl	8002244 <HAL_GetTick>
 8002ede:	eba0 0008 	sub.w	r0, r0, r8
 8002ee2:	42b0      	cmp	r0, r6
 8002ee4:	d801      	bhi.n	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8002ee6:	2e00      	cmp	r6, #0
 8002ee8:	d1d4      	bne.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	ea27 0202 	bic.w	r2, r7, r2
 8002ef2:	b292      	uxth	r2, r2
 8002ef4:	2a00      	cmp	r2, #0
 8002ef6:	d0cd      	beq.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef8:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002efa:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efc:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002efe:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f02:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	e7dd      	b.n	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002f0c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4604      	mov	r4, r0
 8002f10:	460d      	mov	r5, r1
 8002f12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	d501      	bpl.n	8002f20 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	e01e      	b.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f20:	4620      	mov	r0, r4
 8002f22:	f7ff ff58 	bl	8002dd6 <I2C_IsAcknowledgeFailed>
 8002f26:	b9c8      	cbnz	r0, 8002f5c <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002f28:	1c6a      	adds	r2, r5, #1
 8002f2a:	d0f3      	beq.n	8002f14 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2c:	f7ff f98a 	bl	8002244 <HAL_GetTick>
 8002f30:	1b80      	subs	r0, r0, r6
 8002f32:	42a8      	cmp	r0, r5
 8002f34:	d801      	bhi.n	8002f3a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002f36:	2d00      	cmp	r5, #0
 8002f38:	d1ec      	bne.n	8002f14 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8002f42:	d1e7      	bne.n	8002f14 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f48:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f50:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002f52:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f56:	f042 0220 	orr.w	r2, r2, #32
 8002f5a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
}
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}

08002f60 <I2C_RequestMemoryWrite>:
{
 8002f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f64:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f66:	6802      	ldr	r2, [r0, #0]
{
 8002f68:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6a:	6813      	ldr	r3, [r2, #0]
{
 8002f6c:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f72:	6013      	str	r3, [r2, #0]
{
 8002f74:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8002f78:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f82:	f8cd 8000 	str.w	r8, [sp]
{
 8002f86:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f88:	f7ff ff3e 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	b138      	cbz	r0, 8002fa0 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	05db      	lsls	r3, r3, #23
 8002f94:	d502      	bpl.n	8002f9c <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f9a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002f9c:	2603      	movs	r6, #3
 8002f9e:	e020      	b.n	8002fe2 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa0:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8002fa4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa6:	463a      	mov	r2, r7
 8002fa8:	4643      	mov	r3, r8
 8002faa:	4620      	mov	r0, r4
 8002fac:	4918      	ldr	r1, [pc, #96]	@ (8003010 <I2C_RequestMemoryWrite+0xb0>)
 8002fae:	f7ff ff6b 	bl	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb2:	b9a8      	cbnz	r0, 8002fe0 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	9003      	str	r0, [sp, #12]
 8002fb8:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fba:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fbc:	9203      	str	r2, [sp, #12]
 8002fbe:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc0:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc8:	f7ff ffa0 	bl	8002f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fcc:	4606      	mov	r6, r0
 8002fce:	b160      	cbz	r0, 8002fea <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002fd2:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	bf01      	itttt	eq
 8002fd6:	6822      	ldreq	r2, [r4, #0]
 8002fd8:	6813      	ldreq	r3, [r2, #0]
 8002fda:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8002fde:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8002fe0:	2601      	movs	r6, #1
}
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	b005      	add	sp, #20
 8002fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fea:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff0:	d102      	bne.n	8002ff8 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff2:	b2ed      	uxtb	r5, r5
 8002ff4:	611d      	str	r5, [r3, #16]
 8002ff6:	e7f4      	b.n	8002fe2 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ff8:	0a2a      	lsrs	r2, r5, #8
 8002ffa:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffc:	4639      	mov	r1, r7
 8002ffe:	4642      	mov	r2, r8
 8003000:	4620      	mov	r0, r4
 8003002:	f7ff ff83 	bl	8002f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003006:	2800      	cmp	r0, #0
 8003008:	d1e2      	bne.n	8002fd0 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	e7f1      	b.n	8002ff2 <I2C_RequestMemoryWrite+0x92>
 800300e:	bf00      	nop
 8003010:	00010002 	.word	0x00010002

08003014 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	4604      	mov	r4, r0
 8003018:	460d      	mov	r5, r1
 800301a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	075b      	lsls	r3, r3, #29
 8003022:	d501      	bpl.n	8003028 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003024:	2000      	movs	r0, #0
 8003026:	e01e      	b.n	8003066 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff fed4 	bl	8002dd6 <I2C_IsAcknowledgeFailed>
 800302e:	b9c8      	cbnz	r0, 8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003030:	1c6a      	adds	r2, r5, #1
 8003032:	d0f3      	beq.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003034:	f7ff f906 	bl	8002244 <HAL_GetTick>
 8003038:	1b80      	subs	r0, r0, r6
 800303a:	42a8      	cmp	r0, r5
 800303c:	d801      	bhi.n	8003042 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800303e:	2d00      	cmp	r5, #0
 8003040:	d1ec      	bne.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f013 0304 	ands.w	r3, r3, #4
 800304a:	d1e7      	bne.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 800304c:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003054:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003058:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800305a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305e:	f042 0220 	orr.w	r2, r2, #32
 8003062:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003064:	2001      	movs	r0, #1
}
 8003066:	bd70      	pop	{r4, r5, r6, pc}

08003068 <HAL_I2C_Init>:
{
 8003068:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800306a:	4604      	mov	r4, r0
 800306c:	b908      	cbnz	r0, 8003072 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
}
 8003070:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003072:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003076:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800307a:	b91b      	cbnz	r3, 8003084 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800307c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8003080:	f7fe fea4 	bl	8001dcc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003084:	2324      	movs	r3, #36	@ 0x24
 8003086:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800309a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030a2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a4:	f000 fb76 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030a8:	4b3f      	ldr	r3, [pc, #252]	@ (80031a8 <HAL_I2C_Init+0x140>)
 80030aa:	6865      	ldr	r5, [r4, #4]
 80030ac:	429d      	cmp	r5, r3
 80030ae:	bf94      	ite	ls
 80030b0:	4b3e      	ldrls	r3, [pc, #248]	@ (80031ac <HAL_I2C_Init+0x144>)
 80030b2:	4b3f      	ldrhi	r3, [pc, #252]	@ (80031b0 <HAL_I2C_Init+0x148>)
 80030b4:	4298      	cmp	r0, r3
 80030b6:	bf8c      	ite	hi
 80030b8:	2300      	movhi	r3, #0
 80030ba:	2301      	movls	r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1d6      	bne.n	800306e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030c0:	4e39      	ldr	r6, [pc, #228]	@ (80031a8 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80030c2:	4b3c      	ldr	r3, [pc, #240]	@ (80031b4 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030c4:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80030c6:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ca:	bf88      	it	hi
 80030cc:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030d0:	6822      	ldr	r2, [r4, #0]
 80030d2:	6851      	ldr	r1, [r2, #4]
 80030d4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80030d8:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030dc:	bf82      	ittt	hi
 80030de:	4373      	mulhi	r3, r6
 80030e0:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 80030e4:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e8:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ea:	6a11      	ldr	r1, [r2, #32]
 80030ec:	3301      	adds	r3, #1
 80030ee:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80030f2:	430b      	orrs	r3, r1
 80030f4:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f6:	69d1      	ldr	r1, [r2, #28]
 80030f8:	1e43      	subs	r3, r0, #1
 80030fa:	482b      	ldr	r0, [pc, #172]	@ (80031a8 <HAL_I2C_Init+0x140>)
 80030fc:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8003100:	4285      	cmp	r5, r0
 8003102:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003106:	d832      	bhi.n	800316e <HAL_I2C_Init+0x106>
 8003108:	006d      	lsls	r5, r5, #1
 800310a:	fbb3 f3f5 	udiv	r3, r3, r5
 800310e:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8003112:	3301      	adds	r3, #1
 8003114:	4203      	tst	r3, r0
 8003116:	d042      	beq.n	800319e <HAL_I2C_Init+0x136>
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	4319      	orrs	r1, r3
 800311e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003120:	6811      	ldr	r1, [r2, #0]
 8003122:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003126:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800312a:	4303      	orrs	r3, r0
 800312c:	430b      	orrs	r3, r1
 800312e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003130:	6891      	ldr	r1, [r2, #8]
 8003132:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003136:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800313a:	4303      	orrs	r3, r0
 800313c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003140:	430b      	orrs	r3, r1
 8003142:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003144:	68d1      	ldr	r1, [r2, #12]
 8003146:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800314a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800314e:	4303      	orrs	r3, r0
 8003150:	430b      	orrs	r3, r1
 8003152:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003154:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003156:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003160:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003162:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 800316c:	e780      	b.n	8003070 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800316e:	68a0      	ldr	r0, [r4, #8]
 8003170:	b950      	cbnz	r0, 8003188 <HAL_I2C_Init+0x120>
 8003172:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003176:	fbb3 f3f5 	udiv	r3, r3, r5
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	b17b      	cbz	r3, 80031a2 <HAL_I2C_Init+0x13a>
 8003182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003186:	e7c9      	b.n	800311c <HAL_I2C_Init+0xb4>
 8003188:	2019      	movs	r0, #25
 800318a:	4368      	muls	r0, r5
 800318c:	fbb3 f3f0 	udiv	r3, r3, r0
 8003190:	3301      	adds	r3, #1
 8003192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003196:	b123      	cbz	r3, 80031a2 <HAL_I2C_Init+0x13a>
 8003198:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800319c:	e7be      	b.n	800311c <HAL_I2C_Init+0xb4>
 800319e:	2304      	movs	r3, #4
 80031a0:	e7bc      	b.n	800311c <HAL_I2C_Init+0xb4>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e7ba      	b.n	800311c <HAL_I2C_Init+0xb4>
 80031a6:	bf00      	nop
 80031a8:	000186a0 	.word	0x000186a0
 80031ac:	001e847f 	.word	0x001e847f
 80031b0:	003d08ff 	.word	0x003d08ff
 80031b4:	000f4240 	.word	0x000f4240

080031b8 <HAL_I2C_Mem_Write>:
{
 80031b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80031bc:	4604      	mov	r4, r0
 80031be:	4699      	mov	r9, r3
 80031c0:	460f      	mov	r7, r1
 80031c2:	4690      	mov	r8, r2
 80031c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80031c6:	f7ff f83d 	bl	8002244 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ca:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80031ce:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d003      	beq.n	80031dc <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 80031d4:	2002      	movs	r0, #2
}
 80031d6:	b003      	add	sp, #12
 80031d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031dc:	9000      	str	r0, [sp, #0]
 80031de:	2319      	movs	r3, #25
 80031e0:	2201      	movs	r2, #1
 80031e2:	4620      	mov	r0, r4
 80031e4:	493a      	ldr	r1, [pc, #232]	@ (80032d0 <HAL_I2C_Mem_Write+0x118>)
 80031e6:	f7ff fe0f 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d1f2      	bne.n	80031d4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80031ee:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d0ee      	beq.n	80031d4 <HAL_I2C_Mem_Write+0x1c>
 80031f6:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031f8:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80031fa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031fe:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003200:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003202:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003204:	bf58      	it	pl
 8003206:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003208:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800320a:	bf5c      	itt	pl
 800320c:	f043 0301 	orrpl.w	r3, r3, #1
 8003210:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003212:	6803      	ldr	r3, [r0, #0]
 8003214:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003218:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800321a:	2321      	movs	r3, #33	@ 0x21
 800321c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003220:	2340      	movs	r3, #64	@ 0x40
 8003222:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003226:	2300      	movs	r3, #0
 8003228:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800322a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800322c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800322e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003230:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8003234:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003236:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003238:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323a:	4b26      	ldr	r3, [pc, #152]	@ (80032d4 <HAL_I2C_Mem_Write+0x11c>)
 800323c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800323e:	464b      	mov	r3, r9
 8003240:	e9cd 6500 	strd	r6, r5, [sp]
 8003244:	f7ff fe8c 	bl	8002f60 <I2C_RequestMemoryWrite>
 8003248:	2800      	cmp	r0, #0
 800324a:	d02a      	beq.n	80032a2 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 800324c:	2001      	movs	r0, #1
 800324e:	e7c2      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003250:	f7ff fe5c 	bl	8002f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003254:	b140      	cbz	r0, 8003268 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003256:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003258:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	bf01      	itttt	eq
 800325c:	6822      	ldreq	r2, [r4, #0]
 800325e:	6813      	ldreq	r3, [r2, #0]
 8003260:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8003264:	6013      	streq	r3, [r2, #0]
 8003266:	e7f1      	b.n	800324c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003268:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800326a:	6827      	ldr	r7, [r4, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003272:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003274:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003276:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003278:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800327a:	3a01      	subs	r2, #1
 800327c:	b292      	uxth	r2, r2
 800327e:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003280:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003282:	1e48      	subs	r0, r1, #1
 8003284:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003286:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003288:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800328a:	d50a      	bpl.n	80032a2 <HAL_I2C_Mem_Write+0xea>
 800328c:	b148      	cbz	r0, 80032a2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800328e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8003290:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003292:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003294:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003296:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8003298:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800329a:	3b01      	subs	r3, #1
 800329c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800329e:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80032a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032a2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a4:	462a      	mov	r2, r5
 80032a6:	4631      	mov	r1, r6
 80032a8:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1d0      	bne.n	8003250 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ae:	f7ff feb1 	bl	8003014 <I2C_WaitOnBTFFlagUntilTimeout>
 80032b2:	2800      	cmp	r0, #0
 80032b4:	d1cf      	bne.n	8003256 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b6:	6822      	ldr	r2, [r4, #0]
 80032b8:	6813      	ldr	r3, [r2, #0]
 80032ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032be:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80032c2:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ca:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 80032ce:	e782      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e>
 80032d0:	00100002 	.word	0x00100002
 80032d4:	ffff0000 	.word	0xffff0000

080032d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032dc:	4605      	mov	r5, r0
 80032de:	b338      	cbz	r0, 8003330 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e0:	6803      	ldr	r3, [r0, #0]
 80032e2:	07db      	lsls	r3, r3, #31
 80032e4:	d410      	bmi.n	8003308 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e6:	682b      	ldr	r3, [r5, #0]
 80032e8:	079f      	lsls	r7, r3, #30
 80032ea:	d45e      	bmi.n	80033aa <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	0719      	lsls	r1, r3, #28
 80032f0:	f100 8095 	bmi.w	800341e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	075a      	lsls	r2, r3, #29
 80032f8:	f100 80c1 	bmi.w	800347e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032fc:	69eb      	ldr	r3, [r5, #28]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 812c 	bne.w	800355c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8003304:	2000      	movs	r0, #0
 8003306:	e029      	b.n	800335c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003308:	4c90      	ldr	r4, [pc, #576]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800330a:	6863      	ldr	r3, [r4, #4]
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	2b04      	cmp	r3, #4
 8003312:	d007      	beq.n	8003324 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003314:	6863      	ldr	r3, [r4, #4]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d10a      	bne.n	8003334 <HAL_RCC_OscConfig+0x5c>
 800331e:	6863      	ldr	r3, [r4, #4]
 8003320:	03de      	lsls	r6, r3, #15
 8003322:	d507      	bpl.n	8003334 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	039c      	lsls	r4, r3, #14
 8003328:	d5dd      	bpl.n	80032e6 <HAL_RCC_OscConfig+0xe>
 800332a:	686b      	ldr	r3, [r5, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1da      	bne.n	80032e6 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8003330:	2001      	movs	r0, #1
 8003332:	e013      	b.n	800335c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003334:	686b      	ldr	r3, [r5, #4]
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333a:	d112      	bne.n	8003362 <HAL_RCC_OscConfig+0x8a>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003342:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003344:	f7fe ff7e 	bl	8002244 <HAL_GetTick>
 8003348:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	0398      	lsls	r0, r3, #14
 800334e:	d4ca      	bmi.n	80032e6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe ff78 	bl	8002244 <HAL_GetTick>
 8003354:	1b80      	subs	r0, r0, r6
 8003356:	2864      	cmp	r0, #100	@ 0x64
 8003358:	d9f7      	bls.n	800334a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800335a:	2003      	movs	r0, #3
}
 800335c:	b002      	add	sp, #8
 800335e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	b99b      	cbnz	r3, 800338c <HAL_RCC_OscConfig+0xb4>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003372:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003374:	f7fe ff66 	bl	8002244 <HAL_GetTick>
 8003378:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	0399      	lsls	r1, r3, #14
 800337e:	d5b2      	bpl.n	80032e6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003380:	f7fe ff60 	bl	8002244 <HAL_GetTick>
 8003384:	1b80      	subs	r0, r0, r6
 8003386:	2864      	cmp	r0, #100	@ 0x64
 8003388:	d9f7      	bls.n	800337a <HAL_RCC_OscConfig+0xa2>
 800338a:	e7e6      	b.n	800335a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	d103      	bne.n	800339c <HAL_RCC_OscConfig+0xc4>
 8003394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	e7cf      	b.n	800333c <HAL_RCC_OscConfig+0x64>
 800339c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a8:	e7cb      	b.n	8003342 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033aa:	4c68      	ldr	r4, [pc, #416]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 80033ac:	6863      	ldr	r3, [r4, #4]
 80033ae:	f013 0f0c 	tst.w	r3, #12
 80033b2:	d007      	beq.n	80033c4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033b4:	6863      	ldr	r3, [r4, #4]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d110      	bne.n	80033e0 <HAL_RCC_OscConfig+0x108>
 80033be:	6863      	ldr	r3, [r4, #4]
 80033c0:	03da      	lsls	r2, r3, #15
 80033c2:	d40d      	bmi.n	80033e0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	079b      	lsls	r3, r3, #30
 80033c8:	d502      	bpl.n	80033d0 <HAL_RCC_OscConfig+0xf8>
 80033ca:	692b      	ldr	r3, [r5, #16]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d1af      	bne.n	8003330 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	696a      	ldr	r2, [r5, #20]
 80033d4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80033d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	e785      	b.n	80032ec <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e0:	692a      	ldr	r2, [r5, #16]
 80033e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003550 <HAL_RCC_OscConfig+0x278>)
 80033e4:	b16a      	cbz	r2, 8003402 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033ea:	f7fe ff2b 	bl	8002244 <HAL_GetTick>
 80033ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	079f      	lsls	r7, r3, #30
 80033f4:	d4ec      	bmi.n	80033d0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f6:	f7fe ff25 	bl	8002244 <HAL_GetTick>
 80033fa:	1b80      	subs	r0, r0, r6
 80033fc:	2802      	cmp	r0, #2
 80033fe:	d9f7      	bls.n	80033f0 <HAL_RCC_OscConfig+0x118>
 8003400:	e7ab      	b.n	800335a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8003402:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003404:	f7fe ff1e 	bl	8002244 <HAL_GetTick>
 8003408:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	0798      	lsls	r0, r3, #30
 800340e:	f57f af6d 	bpl.w	80032ec <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003412:	f7fe ff17 	bl	8002244 <HAL_GetTick>
 8003416:	1b80      	subs	r0, r0, r6
 8003418:	2802      	cmp	r0, #2
 800341a:	d9f6      	bls.n	800340a <HAL_RCC_OscConfig+0x132>
 800341c:	e79d      	b.n	800335a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341e:	69aa      	ldr	r2, [r5, #24]
 8003420:	4e4a      	ldr	r6, [pc, #296]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003422:	4b4b      	ldr	r3, [pc, #300]	@ (8003550 <HAL_RCC_OscConfig+0x278>)
 8003424:	b1e2      	cbz	r2, 8003460 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003426:	2201      	movs	r2, #1
 8003428:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800342c:	f7fe ff0a 	bl	8002244 <HAL_GetTick>
 8003430:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003434:	079b      	lsls	r3, r3, #30
 8003436:	d50d      	bpl.n	8003454 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003438:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800343c:	4b45      	ldr	r3, [pc, #276]	@ (8003554 <HAL_RCC_OscConfig+0x27c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	fbb3 f3f2 	udiv	r3, r3, r2
 8003444:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003446:	bf00      	nop
  }
  while (Delay --);
 8003448:	9b01      	ldr	r3, [sp, #4]
 800344a:	1e5a      	subs	r2, r3, #1
 800344c:	9201      	str	r2, [sp, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f9      	bne.n	8003446 <HAL_RCC_OscConfig+0x16e>
 8003452:	e74f      	b.n	80032f4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003454:	f7fe fef6 	bl	8002244 <HAL_GetTick>
 8003458:	1b00      	subs	r0, r0, r4
 800345a:	2802      	cmp	r0, #2
 800345c:	d9e9      	bls.n	8003432 <HAL_RCC_OscConfig+0x15a>
 800345e:	e77c      	b.n	800335a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003460:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003464:	f7fe feee 	bl	8002244 <HAL_GetTick>
 8003468:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800346c:	079f      	lsls	r7, r3, #30
 800346e:	f57f af41 	bpl.w	80032f4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003472:	f7fe fee7 	bl	8002244 <HAL_GetTick>
 8003476:	1b00      	subs	r0, r0, r4
 8003478:	2802      	cmp	r0, #2
 800347a:	d9f6      	bls.n	800346a <HAL_RCC_OscConfig+0x192>
 800347c:	e76d      	b.n	800335a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4c33      	ldr	r4, [pc, #204]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003480:	69e3      	ldr	r3, [r4, #28]
 8003482:	00d8      	lsls	r0, r3, #3
 8003484:	d424      	bmi.n	80034d0 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8003486:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003488:	69e3      	ldr	r3, [r4, #28]
 800348a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800348e:	61e3      	str	r3, [r4, #28]
 8003490:	69e3      	ldr	r3, [r4, #28]
 8003492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4e2f      	ldr	r6, [pc, #188]	@ (8003558 <HAL_RCC_OscConfig+0x280>)
 800349c:	6833      	ldr	r3, [r6, #0]
 800349e:	05d9      	lsls	r1, r3, #23
 80034a0:	d518      	bpl.n	80034d4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a2:	68eb      	ldr	r3, [r5, #12]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d126      	bne.n	80034f6 <HAL_RCC_OscConfig+0x21e>
 80034a8:	6a23      	ldr	r3, [r4, #32]
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80034b0:	f7fe fec8 	bl	8002244 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80034b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ba:	6a23      	ldr	r3, [r4, #32]
 80034bc:	079b      	lsls	r3, r3, #30
 80034be:	d53f      	bpl.n	8003540 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80034c0:	2f00      	cmp	r7, #0
 80034c2:	f43f af1b 	beq.w	80032fc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c6:	69e3      	ldr	r3, [r4, #28]
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	61e3      	str	r3, [r4, #28]
 80034ce:	e715      	b.n	80032fc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80034d0:	2700      	movs	r7, #0
 80034d2:	e7e2      	b.n	800349a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d4:	6833      	ldr	r3, [r6, #0]
 80034d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034da:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80034dc:	f7fe feb2 	bl	8002244 <HAL_GetTick>
 80034e0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	6833      	ldr	r3, [r6, #0]
 80034e4:	05da      	lsls	r2, r3, #23
 80034e6:	d4dc      	bmi.n	80034a2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e8:	f7fe feac 	bl	8002244 <HAL_GetTick>
 80034ec:	eba0 0008 	sub.w	r0, r0, r8
 80034f0:	2864      	cmp	r0, #100	@ 0x64
 80034f2:	d9f6      	bls.n	80034e2 <HAL_RCC_OscConfig+0x20a>
 80034f4:	e731      	b.n	800335a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f6:	b9ab      	cbnz	r3, 8003524 <HAL_RCC_OscConfig+0x24c>
 80034f8:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	6223      	str	r3, [r4, #32]
 8003504:	6a23      	ldr	r3, [r4, #32]
 8003506:	f023 0304 	bic.w	r3, r3, #4
 800350a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800350c:	f7fe fe9a 	bl	8002244 <HAL_GetTick>
 8003510:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003512:	6a23      	ldr	r3, [r4, #32]
 8003514:	0798      	lsls	r0, r3, #30
 8003516:	d5d3      	bpl.n	80034c0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fe fe94 	bl	8002244 <HAL_GetTick>
 800351c:	1b80      	subs	r0, r0, r6
 800351e:	4540      	cmp	r0, r8
 8003520:	d9f7      	bls.n	8003512 <HAL_RCC_OscConfig+0x23a>
 8003522:	e71a      	b.n	800335a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003524:	2b05      	cmp	r3, #5
 8003526:	6a23      	ldr	r3, [r4, #32]
 8003528:	d103      	bne.n	8003532 <HAL_RCC_OscConfig+0x25a>
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6223      	str	r3, [r4, #32]
 8003530:	e7ba      	b.n	80034a8 <HAL_RCC_OscConfig+0x1d0>
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	6223      	str	r3, [r4, #32]
 8003538:	6a23      	ldr	r3, [r4, #32]
 800353a:	f023 0304 	bic.w	r3, r3, #4
 800353e:	e7b6      	b.n	80034ae <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fe fe80 	bl	8002244 <HAL_GetTick>
 8003544:	1b80      	subs	r0, r0, r6
 8003546:	4540      	cmp	r0, r8
 8003548:	d9b7      	bls.n	80034ba <HAL_RCC_OscConfig+0x1e2>
 800354a:	e706      	b.n	800335a <HAL_RCC_OscConfig+0x82>
 800354c:	40021000 	.word	0x40021000
 8003550:	42420000 	.word	0x42420000
 8003554:	2000001c 	.word	0x2000001c
 8003558:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800355c:	4c2a      	ldr	r4, [pc, #168]	@ (8003608 <HAL_RCC_OscConfig+0x330>)
 800355e:	6862      	ldr	r2, [r4, #4]
 8003560:	f002 020c 	and.w	r2, r2, #12
 8003564:	2a08      	cmp	r2, #8
 8003566:	d03e      	beq.n	80035e6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003568:	2200      	movs	r2, #0
 800356a:	2b02      	cmp	r3, #2
 800356c:	4b27      	ldr	r3, [pc, #156]	@ (800360c <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 800356e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003570:	d12c      	bne.n	80035cc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8003572:	f7fe fe67 	bl	8002244 <HAL_GetTick>
 8003576:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	0199      	lsls	r1, r3, #6
 800357c:	d420      	bmi.n	80035c0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800357e:	6a2b      	ldr	r3, [r5, #32]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003584:	d105      	bne.n	8003592 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003586:	6862      	ldr	r2, [r4, #4]
 8003588:	68a9      	ldr	r1, [r5, #8]
 800358a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800358e:	430a      	orrs	r2, r1
 8003590:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003592:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8003594:	6862      	ldr	r2, [r4, #4]
 8003596:	430b      	orrs	r3, r1
 8003598:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800359c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800359e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80035a2:	4b1a      	ldr	r3, [pc, #104]	@ (800360c <HAL_RCC_OscConfig+0x334>)
 80035a4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80035a6:	f7fe fe4d 	bl	8002244 <HAL_GetTick>
 80035aa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	019a      	lsls	r2, r3, #6
 80035b0:	f53f aea8 	bmi.w	8003304 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fe fe46 	bl	8002244 <HAL_GetTick>
 80035b8:	1b40      	subs	r0, r0, r5
 80035ba:	2802      	cmp	r0, #2
 80035bc:	d9f6      	bls.n	80035ac <HAL_RCC_OscConfig+0x2d4>
 80035be:	e6cc      	b.n	800335a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe fe40 	bl	8002244 <HAL_GetTick>
 80035c4:	1b80      	subs	r0, r0, r6
 80035c6:	2802      	cmp	r0, #2
 80035c8:	d9d6      	bls.n	8003578 <HAL_RCC_OscConfig+0x2a0>
 80035ca:	e6c6      	b.n	800335a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80035cc:	f7fe fe3a 	bl	8002244 <HAL_GetTick>
 80035d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	019b      	lsls	r3, r3, #6
 80035d6:	f57f ae95 	bpl.w	8003304 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035da:	f7fe fe33 	bl	8002244 <HAL_GetTick>
 80035de:	1b40      	subs	r0, r0, r5
 80035e0:	2802      	cmp	r0, #2
 80035e2:	d9f6      	bls.n	80035d2 <HAL_RCC_OscConfig+0x2fa>
 80035e4:	e6b9      	b.n	800335a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	f43f aea2 	beq.w	8003330 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 80035ec:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	6a2b      	ldr	r3, [r5, #32]
 80035f0:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80035f4:	429a      	cmp	r2, r3
 80035f6:	f47f ae9b 	bne.w	8003330 <HAL_RCC_OscConfig+0x58>
 80035fa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035fc:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003600:	1ac0      	subs	r0, r0, r3
 8003602:	bf18      	it	ne
 8003604:	2001      	movne	r0, #1
 8003606:	e6a9      	b.n	800335c <HAL_RCC_OscConfig+0x84>
 8003608:	40021000 	.word	0x40021000
 800360c:	42420000 	.word	0x42420000

08003610 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003610:	4a0d      	ldr	r2, [pc, #52]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x38>)
 8003612:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003614:	f003 010c 	and.w	r1, r3, #12
 8003618:	2908      	cmp	r1, #8
 800361a:	d112      	bne.n	8003642 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800361c:	480b      	ldr	r0, [pc, #44]	@ (800364c <HAL_RCC_GetSysClockFreq+0x3c>)
 800361e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003622:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003624:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003626:	d509      	bpl.n	800363c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003628:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800362a:	4a09      	ldr	r2, [pc, #36]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800362c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003630:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003632:	4a08      	ldr	r2, [pc, #32]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x44>)
 8003634:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003636:	fbb0 f0f3 	udiv	r0, r0, r3
 800363a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x48>)
 800363e:	4358      	muls	r0, r3
 8003640:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003642:	4803      	ldr	r0, [pc, #12]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	0800b662 	.word	0x0800b662
 8003650:	007a1200 	.word	0x007a1200
 8003654:	0800b660 	.word	0x0800b660
 8003658:	003d0900 	.word	0x003d0900

0800365c <HAL_RCC_ClockConfig>:
{
 800365c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003660:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003662:	4604      	mov	r4, r0
 8003664:	b910      	cbnz	r0, 800366c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003666:	2001      	movs	r0, #1
}
 8003668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800366c:	4a44      	ldr	r2, [pc, #272]	@ (8003780 <HAL_RCC_ClockConfig+0x124>)
 800366e:	6813      	ldr	r3, [r2, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	428b      	cmp	r3, r1
 8003676:	d328      	bcc.n	80036ca <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	6821      	ldr	r1, [r4, #0]
 800367a:	078e      	lsls	r6, r1, #30
 800367c:	d430      	bmi.n	80036e0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367e:	07ca      	lsls	r2, r1, #31
 8003680:	d443      	bmi.n	800370a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003682:	4a3f      	ldr	r2, [pc, #252]	@ (8003780 <HAL_RCC_ClockConfig+0x124>)
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	42ab      	cmp	r3, r5
 800368c:	d865      	bhi.n	800375a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368e:	6822      	ldr	r2, [r4, #0]
 8003690:	4d3c      	ldr	r5, [pc, #240]	@ (8003784 <HAL_RCC_ClockConfig+0x128>)
 8003692:	f012 0f04 	tst.w	r2, #4
 8003696:	d16c      	bne.n	8003772 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	0713      	lsls	r3, r2, #28
 800369a:	d506      	bpl.n	80036aa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800369c:	686b      	ldr	r3, [r5, #4]
 800369e:	6922      	ldr	r2, [r4, #16]
 80036a0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80036a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80036a8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036aa:	f7ff ffb1 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 80036ae:	686b      	ldr	r3, [r5, #4]
 80036b0:	4a35      	ldr	r2, [pc, #212]	@ (8003788 <HAL_RCC_ClockConfig+0x12c>)
 80036b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	40d8      	lsrs	r0, r3
 80036ba:	4b34      	ldr	r3, [pc, #208]	@ (800378c <HAL_RCC_ClockConfig+0x130>)
 80036bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80036be:	4b34      	ldr	r3, [pc, #208]	@ (8003790 <HAL_RCC_ClockConfig+0x134>)
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	f7fe fd7d 	bl	80021c0 <HAL_InitTick>
  return HAL_OK;
 80036c6:	2000      	movs	r0, #0
 80036c8:	e7ce      	b.n	8003668 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	f023 0307 	bic.w	r3, r3, #7
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d4:	6813      	ldr	r3, [r2, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	428b      	cmp	r3, r1
 80036dc:	d1c3      	bne.n	8003666 <HAL_RCC_ClockConfig+0xa>
 80036de:	e7cb      	b.n	8003678 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	4b28      	ldr	r3, [pc, #160]	@ (8003784 <HAL_RCC_ClockConfig+0x128>)
 80036e2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e6:	bf1e      	ittt	ne
 80036e8:	685a      	ldrne	r2, [r3, #4]
 80036ea:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80036ee:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f2:	bf42      	ittt	mi
 80036f4:	685a      	ldrmi	r2, [r3, #4]
 80036f6:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80036fa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	68a0      	ldr	r0, [r4, #8]
 8003700:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003704:	4302      	orrs	r2, r0
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	e7b9      	b.n	800367e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370a:	6862      	ldr	r2, [r4, #4]
 800370c:	4e1d      	ldr	r6, [pc, #116]	@ (8003784 <HAL_RCC_ClockConfig+0x128>)
 800370e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003710:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	d11a      	bne.n	800374a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003714:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	d0a5      	beq.n	8003666 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003720:	f023 0303 	bic.w	r3, r3, #3
 8003724:	4313      	orrs	r3, r2
 8003726:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003728:	f7fe fd8c 	bl	8002244 <HAL_GetTick>
 800372c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	6873      	ldr	r3, [r6, #4]
 8003730:	6862      	ldr	r2, [r4, #4]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800373a:	d0a2      	beq.n	8003682 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373c:	f7fe fd82 	bl	8002244 <HAL_GetTick>
 8003740:	1bc0      	subs	r0, r0, r7
 8003742:	4540      	cmp	r0, r8
 8003744:	d9f3      	bls.n	800372e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003746:	2003      	movs	r0, #3
 8003748:	e78e      	b.n	8003668 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374a:	2a02      	cmp	r2, #2
 800374c:	d102      	bne.n	8003754 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003752:	e7e1      	b.n	8003718 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	f013 0f02 	tst.w	r3, #2
 8003758:	e7de      	b.n	8003718 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	f023 0307 	bic.w	r3, r3, #7
 8003760:	432b      	orrs	r3, r5
 8003762:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003764:	6813      	ldr	r3, [r2, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	42ab      	cmp	r3, r5
 800376c:	f47f af7b 	bne.w	8003666 <HAL_RCC_ClockConfig+0xa>
 8003770:	e78d      	b.n	800368e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003772:	686b      	ldr	r3, [r5, #4]
 8003774:	68e1      	ldr	r1, [r4, #12]
 8003776:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800377a:	430b      	orrs	r3, r1
 800377c:	606b      	str	r3, [r5, #4]
 800377e:	e78b      	b.n	8003698 <HAL_RCC_ClockConfig+0x3c>
 8003780:	40022000 	.word	0x40022000
 8003784:	40021000 	.word	0x40021000
 8003788:	0800b650 	.word	0x0800b650
 800378c:	2000001c 	.word	0x2000001c
 8003790:	20000024 	.word	0x20000024

08003794 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003794:	4b04      	ldr	r3, [pc, #16]	@ (80037a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003796:	4a05      	ldr	r2, [pc, #20]	@ (80037ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800379e:	5cd3      	ldrb	r3, [r2, r3]
 80037a0:	4a03      	ldr	r2, [pc, #12]	@ (80037b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80037a2:	6810      	ldr	r0, [r2, #0]
}
 80037a4:	40d8      	lsrs	r0, r3
 80037a6:	4770      	bx	lr
 80037a8:	40021000 	.word	0x40021000
 80037ac:	0800b648 	.word	0x0800b648
 80037b0:	2000001c 	.word	0x2000001c

080037b4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b4:	4b04      	ldr	r3, [pc, #16]	@ (80037c8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80037b6:	4a05      	ldr	r2, [pc, #20]	@ (80037cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80037be:	5cd3      	ldrb	r3, [r2, r3]
 80037c0:	4a03      	ldr	r2, [pc, #12]	@ (80037d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80037c2:	6810      	ldr	r0, [r2, #0]
}
 80037c4:	40d8      	lsrs	r0, r3
 80037c6:	4770      	bx	lr
 80037c8:	40021000 	.word	0x40021000
 80037cc:	0800b648 	.word	0x0800b648
 80037d0:	2000001c 	.word	0x2000001c

080037d4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037d4:	6803      	ldr	r3, [r0, #0]
{
 80037d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80037da:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037dc:	07d8      	lsls	r0, r3, #31
 80037de:	d521      	bpl.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e0:	4c36      	ldr	r4, [pc, #216]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80037e2:	69e3      	ldr	r3, [r4, #28]
 80037e4:	00d9      	lsls	r1, r3, #3
 80037e6:	d42b      	bmi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80037e8:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	69e3      	ldr	r3, [r4, #28]
 80037ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f0:	61e3      	str	r3, [r4, #28]
 80037f2:	69e3      	ldr	r3, [r4, #28]
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	4f30      	ldr	r7, [pc, #192]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	05da      	lsls	r2, r3, #23
 8003802:	d51f      	bpl.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003804:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003806:	686a      	ldr	r2, [r5, #4]
 8003808:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800380c:	d12e      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380e:	6a23      	ldr	r3, [r4, #32]
 8003810:	686a      	ldr	r2, [r5, #4]
 8003812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003816:	4313      	orrs	r3, r2
 8003818:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800381a:	b11e      	cbz	r6, 8003824 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381c:	69e3      	ldr	r3, [r4, #28]
 800381e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003822:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003824:	682a      	ldr	r2, [r5, #0]
 8003826:	0791      	lsls	r1, r2, #30
 8003828:	d506      	bpl.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800382a:	4924      	ldr	r1, [pc, #144]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800382c:	68a8      	ldr	r0, [r5, #8]
 800382e:	684b      	ldr	r3, [r1, #4]
 8003830:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003834:	4303      	orrs	r3, r0
 8003836:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003838:	06d3      	lsls	r3, r2, #27
 800383a:	d436      	bmi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800383c:	2000      	movs	r0, #0
 800383e:	e012      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8003840:	2600      	movs	r6, #0
 8003842:	e7db      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800384a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800384c:	f7fe fcfa 	bl	8002244 <HAL_GetTick>
 8003850:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	05db      	lsls	r3, r3, #23
 8003856:	d4d5      	bmi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003858:	f7fe fcf4 	bl	8002244 <HAL_GetTick>
 800385c:	eba0 0008 	sub.w	r0, r0, r8
 8003860:	2864      	cmp	r0, #100	@ 0x64
 8003862:	d9f6      	bls.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8003864:	2003      	movs	r0, #3
}
 8003866:	b002      	add	sp, #8
 8003868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800386c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003870:	429a      	cmp	r2, r3
 8003872:	d0cc      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003874:	2001      	movs	r0, #1
 8003876:	4a13      	ldr	r2, [pc, #76]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003878:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800387a:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800387e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003880:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003884:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003886:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 800388a:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800388c:	d5bf      	bpl.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800388e:	f7fe fcd9 	bl	8002244 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003896:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003898:	6a23      	ldr	r3, [r4, #32]
 800389a:	0798      	lsls	r0, r3, #30
 800389c:	d4b7      	bmi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fe fcd1 	bl	8002244 <HAL_GetTick>
 80038a2:	1bc0      	subs	r0, r0, r7
 80038a4:	4540      	cmp	r0, r8
 80038a6:	d9f7      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80038a8:	e7dc      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038aa:	4a04      	ldr	r2, [pc, #16]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80038ac:	68e9      	ldr	r1, [r5, #12]
 80038ae:	6853      	ldr	r3, [r2, #4]
 80038b0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6053      	str	r3, [r2, #4]
 80038b8:	e7c0      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x68>
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40007000 	.word	0x40007000
 80038c4:	42420000 	.word	0x42420000

080038c8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ca:	6a02      	ldr	r2, [r0, #32]
{
 80038cc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038d6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038da:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80038de:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038e0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80038e2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80038e6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038e8:	4d0a      	ldr	r5, [pc, #40]	@ (8003914 <TIM_OC1_SetConfig+0x4c>)
 80038ea:	42a8      	cmp	r0, r5
 80038ec:	d10b      	bne.n	8003906 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80038f0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80038f4:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038f6:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038fa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80038fe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003900:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003904:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003906:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003908:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800390a:	684a      	ldr	r2, [r1, #4]
 800390c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390e:	6203      	str	r3, [r0, #32]
}
 8003910:	bd70      	pop	{r4, r5, r6, pc}
 8003912:	bf00      	nop
 8003914:	40012c00 	.word	0x40012c00

08003918 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003918:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800391a:	6a02      	ldr	r2, [r0, #32]
{
 800391c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800391e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003922:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003926:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003928:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800392a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800392e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003930:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003932:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003936:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800393a:	4d0b      	ldr	r5, [pc, #44]	@ (8003968 <TIM_OC3_SetConfig+0x50>)
 800393c:	42a8      	cmp	r0, r5
 800393e:	d10d      	bne.n	800395c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003940:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003942:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003946:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800394a:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800394e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003952:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003954:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003958:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800395e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003960:	684a      	ldr	r2, [r1, #4]
 8003962:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003964:	6203      	str	r3, [r0, #32]
}
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	40012c00 	.word	0x40012c00

0800396c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800396e:	6a02      	ldr	r2, [r0, #32]
{
 8003970:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003972:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003976:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003978:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800397c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800397e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003982:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003986:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003988:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800398c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003990:	4d06      	ldr	r5, [pc, #24]	@ (80039ac <TIM_OC4_SetConfig+0x40>)
 8003992:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003994:	bf02      	ittt	eq
 8003996:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003998:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800399c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039a4:	684a      	ldr	r2, [r1, #4]
 80039a6:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a8:	6203      	str	r3, [r0, #32]
}
 80039aa:	bd30      	pop	{r4, r5, pc}
 80039ac:	40012c00 	.word	0x40012c00

080039b0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80039b0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d11c      	bne.n	80039f2 <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	4a0f      	ldr	r2, [pc, #60]	@ (80039f8 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c0:	6803      	ldr	r3, [r0, #0]
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00a      	beq.n	80039dc <HAL_TIM_Base_Start+0x2c>
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ca:	d007      	beq.n	80039dc <HAL_TIM_Base_Start+0x2c>
 80039cc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <HAL_TIM_Base_Start+0x2c>
 80039d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039d8:	4293      	cmp	r3, r2
 80039da:	d104      	bne.n	80039e6 <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e2:	2a06      	cmp	r2, #6
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80039ee:	2000      	movs	r0, #0
 80039f0:	4770      	bx	lr
    return HAL_ERROR;
 80039f2:	2001      	movs	r0, #1
}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40012c00 	.word	0x40012c00

080039fc <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80039fc:	4770      	bx	lr
	...

08003a00 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a00:	4a1a      	ldr	r2, [pc, #104]	@ (8003a6c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003a02:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	4290      	cmp	r0, r2
 8003a06:	d00a      	beq.n	8003a1e <TIM_Base_SetConfig+0x1e>
 8003a08:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003a0c:	d007      	beq.n	8003a1e <TIM_Base_SetConfig+0x1e>
 8003a0e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003a12:	4290      	cmp	r0, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_Base_SetConfig+0x1e>
 8003a16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a1a:	4290      	cmp	r0, r2
 8003a1c:	d115      	bne.n	8003a4a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003a1e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a24:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a26:	4a11      	ldr	r2, [pc, #68]	@ (8003a6c <TIM_Base_SetConfig+0x6c>)
 8003a28:	4290      	cmp	r0, r2
 8003a2a:	d00a      	beq.n	8003a42 <TIM_Base_SetConfig+0x42>
 8003a2c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003a30:	d007      	beq.n	8003a42 <TIM_Base_SetConfig+0x42>
 8003a32:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003a36:	4290      	cmp	r0, r2
 8003a38:	d003      	beq.n	8003a42 <TIM_Base_SetConfig+0x42>
 8003a3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a3e:	4290      	cmp	r0, r2
 8003a40:	d103      	bne.n	8003a4a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a42:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a48:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a4a:	694a      	ldr	r2, [r1, #20]
 8003a4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a50:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003a52:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a54:	688b      	ldr	r3, [r1, #8]
 8003a56:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a58:	680b      	ldr	r3, [r1, #0]
 8003a5a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a5c:	4b03      	ldr	r3, [pc, #12]	@ (8003a6c <TIM_Base_SetConfig+0x6c>)
 8003a5e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003a60:	bf04      	itt	eq
 8003a62:	690b      	ldreq	r3, [r1, #16]
 8003a64:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003a66:	2301      	movs	r3, #1
 8003a68:	6143      	str	r3, [r0, #20]
}
 8003a6a:	4770      	bx	lr
 8003a6c:	40012c00 	.word	0x40012c00

08003a70 <HAL_TIM_Base_Init>:
{
 8003a70:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003a72:	4604      	mov	r4, r0
 8003a74:	b330      	cbz	r0, 8003ac4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a76:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003a7a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003a7e:	b91b      	cbnz	r3, 8003a88 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003a80:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003a84:	f7fe f9de 	bl	8001e44 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a90:	1d21      	adds	r1, r4, #4
 8003a92:	f7ff ffb5 	bl	8003a00 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a96:	2301      	movs	r3, #1
  return HAL_OK;
 8003a98:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a9a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003aa2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003aa6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003aaa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ab6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003aba:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003abe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003ac2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	e7fc      	b.n	8003ac2 <HAL_TIM_Base_Init+0x52>

08003ac8 <HAL_TIM_PWM_Init>:
{
 8003ac8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003aca:	4604      	mov	r4, r0
 8003acc:	b330      	cbz	r0, 8003b1c <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ace:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003ad2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003ad6:	b91b      	cbnz	r3, 8003ae0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003ad8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003adc:	f7ff ff8e 	bl	80039fc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae8:	1d21      	adds	r1, r4, #4
 8003aea:	f7ff ff89 	bl	8003a00 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aee:	2301      	movs	r3, #1
  return HAL_OK;
 8003af0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003afa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003afe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003b02:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b06:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b0e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b12:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b16:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003b1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	e7fc      	b.n	8003b1a <HAL_TIM_PWM_Init+0x52>

08003b20 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8003b20:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b22:	6a02      	ldr	r2, [r0, #32]
{
 8003b24:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b26:	f022 0210 	bic.w	r2, r2, #16
 8003b2a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003b2c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003b2e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b32:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b3a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003b3c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b44:	4d0b      	ldr	r5, [pc, #44]	@ (8003b74 <TIM_OC2_SetConfig+0x54>)
 8003b46:	42a8      	cmp	r0, r5
 8003b48:	d10d      	bne.n	8003b66 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b4a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b54:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b58:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003b5c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b62:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003b66:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b68:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003b6a:	684a      	ldr	r2, [r1, #4]
 8003b6c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003b6e:	6203      	str	r3, [r0, #32]
}
 8003b70:	bd70      	pop	{r4, r5, r6, pc}
 8003b72:	bf00      	nop
 8003b74:	40012c00 	.word	0x40012c00

08003b78 <HAL_TIM_PWM_ConfigChannel>:
{
 8003b78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003b7a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003b7e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d04f      	beq.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0xac>
 8003b84:	2001      	movs	r0, #1
  switch (Channel)
 8003b86:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003b88:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8003b8c:	d03a      	beq.n	8003c04 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8003b8e:	d806      	bhi.n	8003b9e <HAL_TIM_PWM_ConfigChannel+0x26>
 8003b90:	b1ba      	cbz	r2, 8003bc2 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8003b92:	2a04      	cmp	r2, #4
 8003b94:	d026      	beq.n	8003be4 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 8003b96:	2300      	movs	r3, #0
 8003b98:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003b9c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003b9e:	2a0c      	cmp	r2, #12
 8003ba0:	d1f9      	bne.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	f7ff fee2 	bl	800396c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ba8:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003baa:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bb0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bb2:	69c3      	ldr	r3, [r0, #28]
 8003bb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bb8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bba:	69c3      	ldr	r3, [r0, #28]
 8003bbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003bc0:	e02e      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bc2:	6820      	ldr	r0, [r4, #0]
 8003bc4:	f7ff fe80 	bl	80038c8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bc8:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bca:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bcc:	f043 0308 	orr.w	r3, r3, #8
 8003bd0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bd2:	6983      	ldr	r3, [r0, #24]
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bda:	6983      	ldr	r3, [r0, #24]
 8003bdc:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bde:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003be0:	2000      	movs	r0, #0
 8003be2:	e7d8      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003be4:	6820      	ldr	r0, [r4, #0]
 8003be6:	f7ff ff9b 	bl	8003b20 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bea:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bec:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bf2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bf4:	6983      	ldr	r3, [r0, #24]
 8003bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bfa:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bfc:	6983      	ldr	r3, [r0, #24]
 8003bfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003c02:	e7ec      	b.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	f7ff fe87 	bl	8003918 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c0a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c0c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c0e:	f043 0308 	orr.w	r3, r3, #8
 8003c12:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c14:	69c3      	ldr	r3, [r0, #28]
 8003c16:	f023 0304 	bic.w	r3, r3, #4
 8003c1a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c1c:	69c3      	ldr	r3, [r0, #28]
 8003c1e:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c20:	61c3      	str	r3, [r0, #28]
      break;
 8003c22:	e7dd      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 8003c24:	2002      	movs	r0, #2
 8003c26:	e7b9      	b.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x24>

08003c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c28:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c2a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c2c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c2e:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c32:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003c36:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c38:	6082      	str	r2, [r0, #8]
}
 8003c3a:	bd10      	pop	{r4, pc}

08003c3c <HAL_TIM_ConfigClockSource>:
{
 8003c3c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003c3e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003c42:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	f04f 0002 	mov.w	r0, #2
 8003c4a:	f000 808e 	beq.w	8003d6a <HAL_TIM_ConfigClockSource+0x12e>
 8003c4e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003c54:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003c56:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003c5a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c60:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003c64:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003c66:	680b      	ldr	r3, [r1, #0]
 8003c68:	2b60      	cmp	r3, #96	@ 0x60
 8003c6a:	d04f      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0xd0>
 8003c6c:	d832      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x98>
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	d064      	beq.n	8003d3c <HAL_TIM_ConfigClockSource+0x100>
 8003c72:	d816      	bhi.n	8003ca2 <HAL_TIM_ConfigClockSource+0x66>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d00d      	beq.n	8003c94 <HAL_TIM_ConfigClockSource+0x58>
 8003c78:	d80a      	bhi.n	8003c90 <HAL_TIM_ConfigClockSource+0x54>
 8003c7a:	f033 0110 	bics.w	r1, r3, #16
 8003c7e:	d009      	beq.n	8003c94 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003c86:	2300      	movs	r3, #0
 8003c88:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8003c90:	2b30      	cmp	r3, #48	@ 0x30
 8003c92:	d1f5      	bne.n	8003c80 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8003c94:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c96:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003ca0:	e028      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8003ca2:	2b50      	cmp	r3, #80	@ 0x50
 8003ca4:	d1ec      	bne.n	8003c80 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8003ca6:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003ca8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003caa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cac:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cae:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003cba:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003cc4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003cc6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003cc8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cce:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8003cd2:	e00f      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd8:	d00d      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0xba>
 8003cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cde:	d00c      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0xbe>
 8003ce0:	2b70      	cmp	r3, #112	@ 0x70
 8003ce2:	d1cd      	bne.n	8003c80 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003ce4:	68cb      	ldr	r3, [r1, #12]
 8003ce6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003cea:	f7ff ff9d 	bl	8003c28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cee:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003cf4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	e7c2      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003cfa:	68cb      	ldr	r3, [r1, #12]
 8003cfc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003d00:	f7ff ff92 	bl	8003c28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d04:	6883      	ldr	r3, [r0, #8]
 8003d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d0a:	e7f3      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8003d0c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d0e:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8003d10:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d12:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8003d16:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d18:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1a:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d20:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d24:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d28:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003d2c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d2e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003d30:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d36:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003d3a:	e7db      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8003d3c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003d3e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003d40:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d42:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d44:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003d50:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d56:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003d5a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d5c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003d5e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d64:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8003d68:	e7c4      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	e78e      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x50>

08003d6e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d6e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d70:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d72:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d74:	f001 011f 	and.w	r1, r1, #31
 8003d78:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003d7a:	ea23 0304 	bic.w	r3, r3, r4
 8003d7e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d80:	6a03      	ldr	r3, [r0, #32]
 8003d82:	408a      	lsls	r2, r1
 8003d84:	431a      	orrs	r2, r3
 8003d86:	6202      	str	r2, [r0, #32]
}
 8003d88:	bd10      	pop	{r4, pc}
	...

08003d8c <HAL_TIM_OC_Start>:
{
 8003d8c:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d8e:	b929      	cbnz	r1, 8003d9c <HAL_TIM_OC_Start+0x10>
 8003d90:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d01d      	beq.n	8003dd4 <HAL_TIM_OC_Start+0x48>
    return HAL_ERROR;
 8003d98:	2001      	movs	r0, #1
 8003d9a:	e02e      	b.n	8003dfa <HAL_TIM_OC_Start+0x6e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d9c:	2904      	cmp	r1, #4
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_OC_Start+0x24>
 8003da0:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d1f7      	bne.n	8003d98 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003da8:	2302      	movs	r3, #2
 8003daa:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8003dae:	e014      	b.n	8003dda <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003db0:	2908      	cmp	r1, #8
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_OC_Start+0x38>
 8003db4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d1ed      	bne.n	8003d98 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8003dc2:	e00a      	b.n	8003dda <HAL_TIM_OC_Start+0x4e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dc4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d1e5      	bne.n	8003d98 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dcc:	2302      	movs	r3, #2
 8003dce:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8003dd2:	e002      	b.n	8003dda <HAL_TIM_OC_Start+0x4e>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f7ff ffc6 	bl	8003d6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003de2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e20 <HAL_TIM_OC_Start+0x94>)
 8003de4:	4298      	cmp	r0, r3
 8003de6:	d009      	beq.n	8003dfc <HAL_TIM_OC_Start+0x70>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003dec:	d10b      	bne.n	8003e06 <HAL_TIM_OC_Start+0x7a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dee:	6883      	ldr	r3, [r0, #8]
 8003df0:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	d10d      	bne.n	8003e14 <HAL_TIM_OC_Start+0x88>
  return HAL_OK;
 8003df8:	2000      	movs	r0, #0
}
 8003dfa:	bd08      	pop	{r3, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8003dfc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e02:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e04:	e7f3      	b.n	8003dee <HAL_TIM_OC_Start+0x62>
 8003e06:	4b07      	ldr	r3, [pc, #28]	@ (8003e24 <HAL_TIM_OC_Start+0x98>)
 8003e08:	4298      	cmp	r0, r3
 8003e0a:	d0f0      	beq.n	8003dee <HAL_TIM_OC_Start+0x62>
 8003e0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e10:	4298      	cmp	r0, r3
 8003e12:	d0ec      	beq.n	8003dee <HAL_TIM_OC_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8003e14:	6803      	ldr	r3, [r0, #0]
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6003      	str	r3, [r0, #0]
 8003e1c:	e7ec      	b.n	8003df8 <HAL_TIM_OC_Start+0x6c>
 8003e1e:	bf00      	nop
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40000400 	.word	0x40000400

08003e28 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8003e28:	f7ff bfb0 	b.w	8003d8c <HAL_TIM_OC_Start>

08003e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e2c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003e32:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f04f 0002 	mov.w	r0, #2
 8003e3a:	d022      	beq.n	8003e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e3c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3e:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003e42:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e44:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e46:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e4a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003e4c:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e50:	4c0c      	ldr	r4, [pc, #48]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003e52:	42a3      	cmp	r3, r4
 8003e54:	d00a      	beq.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5a:	d007      	beq.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003e5c:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8003e60:	42a3      	cmp	r3, r4
 8003e62:	d003      	beq.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003e64:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d104      	bne.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e6c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e6e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e72:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e74:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e76:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003e78:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e7a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003e7e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8003e82:	bd30      	pop	{r4, r5, pc}
 8003e84:	40012c00 	.word	0x40012c00

08003e88 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e88:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003e8c:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d01e      	beq.n	8003ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e92:	68cb      	ldr	r3, [r1, #12]
 8003e94:	6888      	ldr	r0, [r1, #8]
 8003e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e9a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e9c:	6848      	ldr	r0, [r1, #4]
 8003e9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ea2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ea4:	6808      	ldr	r0, [r1, #0]
 8003ea6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eaa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003eac:	6908      	ldr	r0, [r1, #16]
 8003eae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003eb2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003eb4:	6948      	ldr	r0, [r1, #20]
 8003eb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eba:	4303      	orrs	r3, r0


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8003ebc:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ebe:	69c9      	ldr	r1, [r1, #28]
 8003ec0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ec4:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003ec6:	6811      	ldr	r1, [r2, #0]
 8003ec8:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8003eca:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8003ece:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ed0:	2002      	movs	r0, #2
}
 8003ed2:	4770      	bx	lr

08003ed4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	f102 030c 	add.w	r3, r2, #12
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	320c      	adds	r2, #12
 8003ee4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003ee8:	6802      	ldr	r2, [r0, #0]
 8003eea:	2900      	cmp	r1, #0
 8003eec:	d1f2      	bne.n	8003ed4 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	f102 0314 	add.w	r3, r2, #20
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	f102 0c14 	add.w	ip, r2, #20
 8003efe:	e84c 3100 	strex	r1, r3, [ip]
 8003f02:	2900      	cmp	r1, #0
 8003f04:	d1f3      	bne.n	8003eee <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d10b      	bne.n	8003f24 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	f102 030c 	add.w	r3, r2, #12
 8003f10:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f14:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	f102 0c0c 	add.w	ip, r2, #12
 8003f1c:	e84c 3100 	strex	r1, r3, [ip]
 8003f20:	2900      	cmp	r1, #0
 8003f22:	d1f3      	bne.n	8003f0c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f24:	2320      	movs	r3, #32
 8003f26:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8003f2e:	4770      	bx	lr

08003f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f30:	b510      	push	{r4, lr}
 8003f32:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f34:	6803      	ldr	r3, [r0, #0]
 8003f36:	68c1      	ldr	r1, [r0, #12]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f42:	6882      	ldr	r2, [r0, #8]
 8003f44:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003f46:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f48:	4302      	orrs	r2, r0
 8003f4a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003f4c:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8003f50:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f54:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003f56:	430a      	orrs	r2, r1
 8003f58:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	69a1      	ldr	r1, [r4, #24]
 8003f5e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f62:	430a      	orrs	r2, r1
 8003f64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f66:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa0 <UART_SetConfig+0x70>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d115      	bne.n	8003f98 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f6c:	f7ff fc22 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f70:	2319      	movs	r3, #25
 8003f72:	4343      	muls	r3, r0
 8003f74:	6862      	ldr	r2, [r4, #4]
 8003f76:	6820      	ldr	r0, [r4, #0]
 8003f78:	0092      	lsls	r2, r2, #2
 8003f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f7e:	2264      	movs	r2, #100	@ 0x64
 8003f80:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f84:	fb02 3311 	mls	r3, r2, r1, r3
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	3332      	adds	r3, #50	@ 0x32
 8003f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f90:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003f94:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f96:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f98:	f7ff fbfc 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8003f9c:	e7e8      	b.n	8003f70 <UART_SetConfig+0x40>
 8003f9e:	bf00      	nop
 8003fa0:	40013800 	.word	0x40013800

08003fa4 <HAL_UART_Init>:
{
 8003fa4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	b348      	cbz	r0, 8003ffe <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003faa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003fae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003fb2:	b91b      	cbnz	r3, 8003fbc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003fb4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003fb8:	f7fd ffa4 	bl	8001f04 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003fbc:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8003fbe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003fc0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003fc4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003fc6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003fc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fcc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003fce:	f7ff ffaf 	bl	8003f30 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fe4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fec:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003fee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ff2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ffa:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8003ffc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003ffe:	2001      	movs	r0, #1
 8004000:	e7fc      	b.n	8003ffc <HAL_UART_Init+0x58>

08004002 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8004002:	4770      	bx	lr

08004004 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8004004:	4770      	bx	lr

08004006 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004006:	4770      	bx	lr

08004008 <UART_DMAAbortOnError>:
{
 8004008:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800400a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 800400e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004010:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8004012:	f7ff fff8 	bl	8004006 <HAL_UART_ErrorCallback>
}
 8004016:	bd08      	pop	{r3, pc}

08004018 <HAL_UARTEx_RxEventCallback>:
}
 8004018:	4770      	bx	lr

0800401a <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800401a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800401e:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004020:	2b22      	cmp	r3, #34	@ 0x22
 8004022:	d142      	bne.n	80040aa <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004024:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004026:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004028:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800402c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800402e:	d13f      	bne.n	80040b0 <UART_Receive_IT.isra.0+0x96>
 8004030:	6901      	ldr	r1, [r0, #16]
 8004032:	2900      	cmp	r1, #0
 8004034:	d13f      	bne.n	80040b6 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004036:	6852      	ldr	r2, [r2, #4]
 8004038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800403c:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8004040:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8004042:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8004044:	3b01      	subs	r3, #1
 8004046:	b29b      	uxth	r3, r3
 8004048:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800404a:	2b00      	cmp	r3, #0
 800404c:	d12d      	bne.n	80040aa <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800404e:	6802      	ldr	r2, [r0, #0]
 8004050:	68d1      	ldr	r1, [r2, #12]
 8004052:	f021 0120 	bic.w	r1, r1, #32
 8004056:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004058:	68d1      	ldr	r1, [r2, #12]
 800405a:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 800405e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004060:	6951      	ldr	r1, [r2, #20]
 8004062:	f021 0101 	bic.w	r1, r1, #1
 8004066:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004068:	2220      	movs	r2, #32
 800406a:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800406e:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004070:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004072:	2a01      	cmp	r2, #1
 8004074:	6802      	ldr	r2, [r0, #0]
 8004076:	d128      	bne.n	80040ca <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004078:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	f102 030c 	add.w	r3, r2, #12
 800407e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004082:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	f102 0c0c 	add.w	ip, r2, #12
 800408a:	e84c 3100 	strex	r1, r3, [ip]
 800408e:	2900      	cmp	r1, #0
 8004090:	d1f3      	bne.n	800407a <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	06db      	lsls	r3, r3, #27
 8004096:	d505      	bpl.n	80040a4 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004098:	9101      	str	r1, [sp, #4]
 800409a:	6813      	ldr	r3, [r2, #0]
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	6853      	ldr	r3, [r2, #4]
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040a4:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80040a6:	f7ff ffb7 	bl	8004018 <HAL_UARTEx_RxEventCallback>
}
 80040aa:	b003      	add	sp, #12
 80040ac:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040b0:	b939      	cbnz	r1, 80040c2 <UART_Receive_IT.isra.0+0xa8>
 80040b2:	6901      	ldr	r1, [r0, #16]
 80040b4:	b929      	cbnz	r1, 80040c2 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040b6:	6852      	ldr	r2, [r2, #4]
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80040bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80040be:	3301      	adds	r3, #1
 80040c0:	e7be      	b.n	8004040 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040c2:	6852      	ldr	r2, [r2, #4]
 80040c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040c8:	e7f7      	b.n	80040ba <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 80040ca:	f7ff ff9b 	bl	8004004 <HAL_UART_RxCpltCallback>
 80040ce:	e7ec      	b.n	80040aa <UART_Receive_IT.isra.0+0x90>

080040d0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040d0:	6803      	ldr	r3, [r0, #0]
{
 80040d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040d4:	681a      	ldr	r2, [r3, #0]
{
 80040d6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80040d8:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040da:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040dc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80040de:	d108      	bne.n	80040f2 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040e0:	0696      	lsls	r6, r2, #26
 80040e2:	d568      	bpl.n	80041b6 <HAL_UART_IRQHandler+0xe6>
 80040e4:	068d      	lsls	r5, r1, #26
 80040e6:	d566      	bpl.n	80041b6 <HAL_UART_IRQHandler+0xe6>
}
 80040e8:	b002      	add	sp, #8
 80040ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80040ee:	f7ff bf94 	b.w	800401a <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040f2:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040f6:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 80040fa:	4305      	orrs	r5, r0
 80040fc:	d05b      	beq.n	80041b6 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040fe:	07d6      	lsls	r6, r2, #31
 8004100:	d505      	bpl.n	800410e <HAL_UART_IRQHandler+0x3e>
 8004102:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004104:	bf42      	ittt	mi
 8004106:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 8004108:	f043 0301 	orrmi.w	r3, r3, #1
 800410c:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800410e:	0753      	lsls	r3, r2, #29
 8004110:	d504      	bpl.n	800411c <HAL_UART_IRQHandler+0x4c>
 8004112:	b118      	cbz	r0, 800411c <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004114:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004116:	f043 0302 	orr.w	r3, r3, #2
 800411a:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800411c:	0796      	lsls	r6, r2, #30
 800411e:	d504      	bpl.n	800412a <HAL_UART_IRQHandler+0x5a>
 8004120:	b118      	cbz	r0, 800412a <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004122:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004124:	f043 0304 	orr.w	r3, r3, #4
 8004128:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800412a:	0715      	lsls	r5, r2, #28
 800412c:	d507      	bpl.n	800413e <HAL_UART_IRQHandler+0x6e>
 800412e:	f001 0320 	and.w	r3, r1, #32
 8004132:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004134:	bf1e      	ittt	ne
 8004136:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8004138:	f043 0308 	orrne.w	r3, r3, #8
 800413c:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800413e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004140:	2b00      	cmp	r3, #0
 8004142:	d032      	beq.n	80041aa <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004144:	0692      	lsls	r2, r2, #26
 8004146:	d504      	bpl.n	8004152 <HAL_UART_IRQHandler+0x82>
 8004148:	068b      	lsls	r3, r1, #26
 800414a:	d502      	bpl.n	8004152 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 800414c:	4620      	mov	r0, r4
 800414e:	f7ff ff64 	bl	800401a <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004152:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8004154:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004156:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004158:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800415a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800415e:	f002 0208 	and.w	r2, r2, #8
 8004162:	ea53 0502 	orrs.w	r5, r3, r2
 8004166:	d022      	beq.n	80041ae <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8004168:	f7ff feb4 	bl	8003ed4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	6973      	ldr	r3, [r6, #20]
 800416e:	065e      	lsls	r6, r3, #25
 8004170:	d518      	bpl.n	80041a4 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004172:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	f102 0314 	add.w	r3, r2, #20
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	3214      	adds	r2, #20
 8004182:	e842 3100 	strex	r1, r3, [r2]
 8004186:	2900      	cmp	r1, #0
 8004188:	d1f3      	bne.n	8004172 <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 800418a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800418c:	b150      	cbz	r0, 80041a4 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800418e:	4b74      	ldr	r3, [pc, #464]	@ (8004360 <HAL_UART_IRQHandler+0x290>)
 8004190:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004192:	f7fe fc63 	bl	8002a5c <HAL_DMA_Abort_IT>
 8004196:	b140      	cbz	r0, 80041aa <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004198:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800419a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 800419c:	b002      	add	sp, #8
 800419e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041a2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7ff ff2e 	bl	8004006 <HAL_UART_ErrorCallback>
}
 80041aa:	b002      	add	sp, #8
 80041ac:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80041ae:	f7ff ff2a 	bl	8004006 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b2:	6465      	str	r5, [r4, #68]	@ 0x44
 80041b4:	e7f9      	b.n	80041aa <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80041b8:	2801      	cmp	r0, #1
 80041ba:	f040 8094 	bne.w	80042e6 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041be:	06d5      	lsls	r5, r2, #27
 80041c0:	f140 8091 	bpl.w	80042e6 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041c4:	06c8      	lsls	r0, r1, #27
 80041c6:	f140 808e 	bpl.w	80042e6 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ca:	2200      	movs	r2, #0
 80041cc:	9201      	str	r2, [sp, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	9201      	str	r2, [sp, #4]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	9201      	str	r2, [sp, #4]
 80041d6:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	0652      	lsls	r2, r2, #25
 80041dc:	d54d      	bpl.n	800427a <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041de:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80041e0:	680a      	ldr	r2, [r1, #0]
 80041e2:	6852      	ldr	r2, [r2, #4]
 80041e4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	d0df      	beq.n	80041aa <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ea:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 80041ec:	4290      	cmp	r0, r2
 80041ee:	d9dc      	bls.n	80041aa <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 80041f0:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041f2:	698a      	ldr	r2, [r1, #24]
 80041f4:	2a20      	cmp	r2, #32
 80041f6:	d036      	beq.n	8004266 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	f103 020c 	add.w	r2, r3, #12
 80041fc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	f103 000c 	add.w	r0, r3, #12
 8004208:	e840 2100 	strex	r1, r2, [r0]
 800420c:	2900      	cmp	r1, #0
 800420e:	d1f3      	bne.n	80041f8 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	f103 0214 	add.w	r2, r3, #20
 8004214:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004218:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	f103 0014 	add.w	r0, r3, #20
 8004220:	e840 2100 	strex	r1, r2, [r0]
 8004224:	2900      	cmp	r1, #0
 8004226:	d1f3      	bne.n	8004210 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	f103 0214 	add.w	r2, r3, #20
 800422c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004230:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	f103 0014 	add.w	r0, r3, #20
 8004238:	e840 2100 	strex	r1, r2, [r0]
 800423c:	2900      	cmp	r1, #0
 800423e:	d1f3      	bne.n	8004228 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8004240:	2220      	movs	r2, #32
 8004242:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004246:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	f103 020c 	add.w	r2, r3, #12
 800424c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	f103 000c 	add.w	r0, r3, #12
 8004258:	e840 2100 	strex	r1, r2, [r0]
 800425c:	2900      	cmp	r1, #0
 800425e:	d1f3      	bne.n	8004248 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004260:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004262:	f7fe fbdb 	bl	8002a1c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004266:	2302      	movs	r3, #2
 8004268:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800426a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800426c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800426e:	1ac9      	subs	r1, r1, r3
 8004270:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004272:	4620      	mov	r0, r4
 8004274:	f7ff fed0 	bl	8004018 <HAL_UARTEx_RxEventCallback>
 8004278:	e797      	b.n	80041aa <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800427a:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 800427c:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800427e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8004280:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004282:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8004284:	2800      	cmp	r0, #0
 8004286:	d090      	beq.n	80041aa <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004288:	1a89      	subs	r1, r1, r2
 800428a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800428c:	2900      	cmp	r1, #0
 800428e:	d08c      	beq.n	80041aa <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	f103 020c 	add.w	r2, r3, #12
 8004294:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004298:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	f103 050c 	add.w	r5, r3, #12
 80042a0:	e845 2000 	strex	r0, r2, [r5]
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d1f3      	bne.n	8004290 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	f103 0214 	add.w	r2, r3, #20
 80042ac:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	f103 0514 	add.w	r5, r3, #20
 80042b8:	e845 2000 	strex	r0, r2, [r5]
 80042bc:	2800      	cmp	r0, #0
 80042be:	d1f3      	bne.n	80042a8 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 80042c0:	2220      	movs	r2, #32
 80042c2:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	f103 020c 	add.w	r2, r3, #12
 80042cc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	f103 050c 	add.w	r5, r3, #12
 80042d8:	e845 2000 	strex	r0, r2, [r5]
 80042dc:	2800      	cmp	r0, #0
 80042de:	d1f3      	bne.n	80042c8 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042e0:	2302      	movs	r3, #2
 80042e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80042e4:	e7c5      	b.n	8004272 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042e6:	0616      	lsls	r6, r2, #24
 80042e8:	d528      	bpl.n	800433c <HAL_UART_IRQHandler+0x26c>
 80042ea:	060d      	lsls	r5, r1, #24
 80042ec:	d526      	bpl.n	800433c <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042ee:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80042f2:	2a21      	cmp	r2, #33	@ 0x21
 80042f4:	f47f af59 	bne.w	80041aa <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f8:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042fa:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fc:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004300:	d117      	bne.n	8004332 <HAL_UART_IRQHandler+0x262>
 8004302:	6921      	ldr	r1, [r4, #16]
 8004304:	b9a9      	cbnz	r1, 8004332 <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004306:	f832 1b02 	ldrh.w	r1, [r2], #2
 800430a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800430e:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004310:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8004312:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8004314:	3a01      	subs	r2, #1
 8004316:	b292      	uxth	r2, r2
 8004318:	84e2      	strh	r2, [r4, #38]	@ 0x26
 800431a:	2a00      	cmp	r2, #0
 800431c:	f47f af45 	bne.w	80041aa <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004326:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e73b      	b.n	80041aa <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004332:	1c51      	adds	r1, r2, #1
 8004334:	6221      	str	r1, [r4, #32]
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	e7ea      	b.n	8004312 <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800433c:	0650      	lsls	r0, r2, #25
 800433e:	f57f af34 	bpl.w	80041aa <HAL_UART_IRQHandler+0xda>
 8004342:	064a      	lsls	r2, r1, #25
 8004344:	f57f af31 	bpl.w	80041aa <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004348:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800434a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800434c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004350:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004352:	2320      	movs	r3, #32
 8004354:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004358:	f7ff fe53 	bl	8004002 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800435c:	e725      	b.n	80041aa <HAL_UART_IRQHandler+0xda>
 800435e:	bf00      	nop
 8004360:	08004009 	.word	0x08004009

08004364 <_strtol_l.constprop.0>:
 8004364:	2b24      	cmp	r3, #36	@ 0x24
 8004366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436a:	4686      	mov	lr, r0
 800436c:	4690      	mov	r8, r2
 800436e:	d801      	bhi.n	8004374 <_strtol_l.constprop.0+0x10>
 8004370:	2b01      	cmp	r3, #1
 8004372:	d106      	bne.n	8004382 <_strtol_l.constprop.0+0x1e>
 8004374:	f001 f856 	bl	8005424 <__errno>
 8004378:	2316      	movs	r3, #22
 800437a:	6003      	str	r3, [r0, #0]
 800437c:	2000      	movs	r0, #0
 800437e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004382:	460d      	mov	r5, r1
 8004384:	4833      	ldr	r0, [pc, #204]	@ (8004454 <_strtol_l.constprop.0+0xf0>)
 8004386:	462a      	mov	r2, r5
 8004388:	f815 4b01 	ldrb.w	r4, [r5], #1
 800438c:	5d06      	ldrb	r6, [r0, r4]
 800438e:	f016 0608 	ands.w	r6, r6, #8
 8004392:	d1f8      	bne.n	8004386 <_strtol_l.constprop.0+0x22>
 8004394:	2c2d      	cmp	r4, #45	@ 0x2d
 8004396:	d12d      	bne.n	80043f4 <_strtol_l.constprop.0+0x90>
 8004398:	2601      	movs	r6, #1
 800439a:	782c      	ldrb	r4, [r5, #0]
 800439c:	1c95      	adds	r5, r2, #2
 800439e:	f033 0210 	bics.w	r2, r3, #16
 80043a2:	d109      	bne.n	80043b8 <_strtol_l.constprop.0+0x54>
 80043a4:	2c30      	cmp	r4, #48	@ 0x30
 80043a6:	d12a      	bne.n	80043fe <_strtol_l.constprop.0+0x9a>
 80043a8:	782a      	ldrb	r2, [r5, #0]
 80043aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80043ae:	2a58      	cmp	r2, #88	@ 0x58
 80043b0:	d125      	bne.n	80043fe <_strtol_l.constprop.0+0x9a>
 80043b2:	2310      	movs	r3, #16
 80043b4:	786c      	ldrb	r4, [r5, #1]
 80043b6:	3502      	adds	r5, #2
 80043b8:	2200      	movs	r2, #0
 80043ba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80043be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80043c2:	fbbc f9f3 	udiv	r9, ip, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80043cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80043d0:	2f09      	cmp	r7, #9
 80043d2:	d81b      	bhi.n	800440c <_strtol_l.constprop.0+0xa8>
 80043d4:	463c      	mov	r4, r7
 80043d6:	42a3      	cmp	r3, r4
 80043d8:	dd27      	ble.n	800442a <_strtol_l.constprop.0+0xc6>
 80043da:	1c57      	adds	r7, r2, #1
 80043dc:	d007      	beq.n	80043ee <_strtol_l.constprop.0+0x8a>
 80043de:	4581      	cmp	r9, r0
 80043e0:	d320      	bcc.n	8004424 <_strtol_l.constprop.0+0xc0>
 80043e2:	d101      	bne.n	80043e8 <_strtol_l.constprop.0+0x84>
 80043e4:	45a2      	cmp	sl, r4
 80043e6:	db1d      	blt.n	8004424 <_strtol_l.constprop.0+0xc0>
 80043e8:	2201      	movs	r2, #1
 80043ea:	fb00 4003 	mla	r0, r0, r3, r4
 80043ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043f2:	e7eb      	b.n	80043cc <_strtol_l.constprop.0+0x68>
 80043f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80043f6:	bf04      	itt	eq
 80043f8:	782c      	ldrbeq	r4, [r5, #0]
 80043fa:	1c95      	addeq	r5, r2, #2
 80043fc:	e7cf      	b.n	800439e <_strtol_l.constprop.0+0x3a>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1da      	bne.n	80043b8 <_strtol_l.constprop.0+0x54>
 8004402:	2c30      	cmp	r4, #48	@ 0x30
 8004404:	bf0c      	ite	eq
 8004406:	2308      	moveq	r3, #8
 8004408:	230a      	movne	r3, #10
 800440a:	e7d5      	b.n	80043b8 <_strtol_l.constprop.0+0x54>
 800440c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004410:	2f19      	cmp	r7, #25
 8004412:	d801      	bhi.n	8004418 <_strtol_l.constprop.0+0xb4>
 8004414:	3c37      	subs	r4, #55	@ 0x37
 8004416:	e7de      	b.n	80043d6 <_strtol_l.constprop.0+0x72>
 8004418:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800441c:	2f19      	cmp	r7, #25
 800441e:	d804      	bhi.n	800442a <_strtol_l.constprop.0+0xc6>
 8004420:	3c57      	subs	r4, #87	@ 0x57
 8004422:	e7d8      	b.n	80043d6 <_strtol_l.constprop.0+0x72>
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	e7e1      	b.n	80043ee <_strtol_l.constprop.0+0x8a>
 800442a:	1c53      	adds	r3, r2, #1
 800442c:	d108      	bne.n	8004440 <_strtol_l.constprop.0+0xdc>
 800442e:	2322      	movs	r3, #34	@ 0x22
 8004430:	4660      	mov	r0, ip
 8004432:	f8ce 3000 	str.w	r3, [lr]
 8004436:	f1b8 0f00 	cmp.w	r8, #0
 800443a:	d0a0      	beq.n	800437e <_strtol_l.constprop.0+0x1a>
 800443c:	1e69      	subs	r1, r5, #1
 800443e:	e006      	b.n	800444e <_strtol_l.constprop.0+0xea>
 8004440:	b106      	cbz	r6, 8004444 <_strtol_l.constprop.0+0xe0>
 8004442:	4240      	negs	r0, r0
 8004444:	f1b8 0f00 	cmp.w	r8, #0
 8004448:	d099      	beq.n	800437e <_strtol_l.constprop.0+0x1a>
 800444a:	2a00      	cmp	r2, #0
 800444c:	d1f6      	bne.n	800443c <_strtol_l.constprop.0+0xd8>
 800444e:	f8c8 1000 	str.w	r1, [r8]
 8004452:	e794      	b.n	800437e <_strtol_l.constprop.0+0x1a>
 8004454:	0800b673 	.word	0x0800b673

08004458 <_strtol_r>:
 8004458:	f7ff bf84 	b.w	8004364 <_strtol_l.constprop.0>

0800445c <__cvt>:
 800445c:	2b00      	cmp	r3, #0
 800445e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004462:	461d      	mov	r5, r3
 8004464:	bfbb      	ittet	lt
 8004466:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800446a:	461d      	movlt	r5, r3
 800446c:	2300      	movge	r3, #0
 800446e:	232d      	movlt	r3, #45	@ 0x2d
 8004470:	b088      	sub	sp, #32
 8004472:	4614      	mov	r4, r2
 8004474:	bfb8      	it	lt
 8004476:	4614      	movlt	r4, r2
 8004478:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800447a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800447c:	7013      	strb	r3, [r2, #0]
 800447e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004480:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004484:	f023 0820 	bic.w	r8, r3, #32
 8004488:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800448c:	d005      	beq.n	800449a <__cvt+0x3e>
 800448e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004492:	d100      	bne.n	8004496 <__cvt+0x3a>
 8004494:	3601      	adds	r6, #1
 8004496:	2302      	movs	r3, #2
 8004498:	e000      	b.n	800449c <__cvt+0x40>
 800449a:	2303      	movs	r3, #3
 800449c:	aa07      	add	r2, sp, #28
 800449e:	9204      	str	r2, [sp, #16]
 80044a0:	aa06      	add	r2, sp, #24
 80044a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80044a6:	e9cd 3600 	strd	r3, r6, [sp]
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	f001 f8b7 	bl	8005620 <_dtoa_r>
 80044b2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80044b6:	4607      	mov	r7, r0
 80044b8:	d119      	bne.n	80044ee <__cvt+0x92>
 80044ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80044bc:	07db      	lsls	r3, r3, #31
 80044be:	d50e      	bpl.n	80044de <__cvt+0x82>
 80044c0:	eb00 0906 	add.w	r9, r0, r6
 80044c4:	2200      	movs	r2, #0
 80044c6:	2300      	movs	r3, #0
 80044c8:	4620      	mov	r0, r4
 80044ca:	4629      	mov	r1, r5
 80044cc:	f7fc fb20 	bl	8000b10 <__aeabi_dcmpeq>
 80044d0:	b108      	cbz	r0, 80044d6 <__cvt+0x7a>
 80044d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80044d6:	2230      	movs	r2, #48	@ 0x30
 80044d8:	9b07      	ldr	r3, [sp, #28]
 80044da:	454b      	cmp	r3, r9
 80044dc:	d31e      	bcc.n	800451c <__cvt+0xc0>
 80044de:	4638      	mov	r0, r7
 80044e0:	9b07      	ldr	r3, [sp, #28]
 80044e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80044e4:	1bdb      	subs	r3, r3, r7
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	b008      	add	sp, #32
 80044ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80044f2:	eb00 0906 	add.w	r9, r0, r6
 80044f6:	d1e5      	bne.n	80044c4 <__cvt+0x68>
 80044f8:	7803      	ldrb	r3, [r0, #0]
 80044fa:	2b30      	cmp	r3, #48	@ 0x30
 80044fc:	d10a      	bne.n	8004514 <__cvt+0xb8>
 80044fe:	2200      	movs	r2, #0
 8004500:	2300      	movs	r3, #0
 8004502:	4620      	mov	r0, r4
 8004504:	4629      	mov	r1, r5
 8004506:	f7fc fb03 	bl	8000b10 <__aeabi_dcmpeq>
 800450a:	b918      	cbnz	r0, 8004514 <__cvt+0xb8>
 800450c:	f1c6 0601 	rsb	r6, r6, #1
 8004510:	f8ca 6000 	str.w	r6, [sl]
 8004514:	f8da 3000 	ldr.w	r3, [sl]
 8004518:	4499      	add	r9, r3
 800451a:	e7d3      	b.n	80044c4 <__cvt+0x68>
 800451c:	1c59      	adds	r1, r3, #1
 800451e:	9107      	str	r1, [sp, #28]
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e7d9      	b.n	80044d8 <__cvt+0x7c>

08004524 <__exponent>:
 8004524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004526:	2900      	cmp	r1, #0
 8004528:	bfb6      	itet	lt
 800452a:	232d      	movlt	r3, #45	@ 0x2d
 800452c:	232b      	movge	r3, #43	@ 0x2b
 800452e:	4249      	neglt	r1, r1
 8004530:	2909      	cmp	r1, #9
 8004532:	7002      	strb	r2, [r0, #0]
 8004534:	7043      	strb	r3, [r0, #1]
 8004536:	dd29      	ble.n	800458c <__exponent+0x68>
 8004538:	f10d 0307 	add.w	r3, sp, #7
 800453c:	461d      	mov	r5, r3
 800453e:	270a      	movs	r7, #10
 8004540:	fbb1 f6f7 	udiv	r6, r1, r7
 8004544:	461a      	mov	r2, r3
 8004546:	fb07 1416 	mls	r4, r7, r6, r1
 800454a:	3430      	adds	r4, #48	@ 0x30
 800454c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004550:	460c      	mov	r4, r1
 8004552:	2c63      	cmp	r4, #99	@ 0x63
 8004554:	4631      	mov	r1, r6
 8004556:	f103 33ff 	add.w	r3, r3, #4294967295
 800455a:	dcf1      	bgt.n	8004540 <__exponent+0x1c>
 800455c:	3130      	adds	r1, #48	@ 0x30
 800455e:	1e94      	subs	r4, r2, #2
 8004560:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004564:	4623      	mov	r3, r4
 8004566:	1c41      	adds	r1, r0, #1
 8004568:	42ab      	cmp	r3, r5
 800456a:	d30a      	bcc.n	8004582 <__exponent+0x5e>
 800456c:	f10d 0309 	add.w	r3, sp, #9
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	42ac      	cmp	r4, r5
 8004574:	bf88      	it	hi
 8004576:	2300      	movhi	r3, #0
 8004578:	3302      	adds	r3, #2
 800457a:	4403      	add	r3, r0
 800457c:	1a18      	subs	r0, r3, r0
 800457e:	b003      	add	sp, #12
 8004580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004582:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004586:	f801 6f01 	strb.w	r6, [r1, #1]!
 800458a:	e7ed      	b.n	8004568 <__exponent+0x44>
 800458c:	2330      	movs	r3, #48	@ 0x30
 800458e:	3130      	adds	r1, #48	@ 0x30
 8004590:	7083      	strb	r3, [r0, #2]
 8004592:	70c1      	strb	r1, [r0, #3]
 8004594:	1d03      	adds	r3, r0, #4
 8004596:	e7f1      	b.n	800457c <__exponent+0x58>

08004598 <_printf_float>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	b091      	sub	sp, #68	@ 0x44
 800459e:	460c      	mov	r4, r1
 80045a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80045a4:	4616      	mov	r6, r2
 80045a6:	461f      	mov	r7, r3
 80045a8:	4605      	mov	r5, r0
 80045aa:	f000 fef1 	bl	8005390 <_localeconv_r>
 80045ae:	6803      	ldr	r3, [r0, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	9308      	str	r3, [sp, #32]
 80045b4:	f7fb fdcc 	bl	8000150 <strlen>
 80045b8:	2300      	movs	r3, #0
 80045ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80045bc:	f8d8 3000 	ldr.w	r3, [r8]
 80045c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80045c2:	3307      	adds	r3, #7
 80045c4:	f023 0307 	bic.w	r3, r3, #7
 80045c8:	f103 0208 	add.w	r2, r3, #8
 80045cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80045d0:	f8d4 b000 	ldr.w	fp, [r4]
 80045d4:	f8c8 2000 	str.w	r2, [r8]
 80045d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80045e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045e2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80045e6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80045ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80045f2:	4b9c      	ldr	r3, [pc, #624]	@ (8004864 <_printf_float+0x2cc>)
 80045f4:	f7fc fabe 	bl	8000b74 <__aeabi_dcmpun>
 80045f8:	bb70      	cbnz	r0, 8004658 <_printf_float+0xc0>
 80045fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80045fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004602:	4b98      	ldr	r3, [pc, #608]	@ (8004864 <_printf_float+0x2cc>)
 8004604:	f7fc fa98 	bl	8000b38 <__aeabi_dcmple>
 8004608:	bb30      	cbnz	r0, 8004658 <_printf_float+0xc0>
 800460a:	2200      	movs	r2, #0
 800460c:	2300      	movs	r3, #0
 800460e:	4640      	mov	r0, r8
 8004610:	4649      	mov	r1, r9
 8004612:	f7fc fa87 	bl	8000b24 <__aeabi_dcmplt>
 8004616:	b110      	cbz	r0, 800461e <_printf_float+0x86>
 8004618:	232d      	movs	r3, #45	@ 0x2d
 800461a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800461e:	4a92      	ldr	r2, [pc, #584]	@ (8004868 <_printf_float+0x2d0>)
 8004620:	4b92      	ldr	r3, [pc, #584]	@ (800486c <_printf_float+0x2d4>)
 8004622:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004626:	bf94      	ite	ls
 8004628:	4690      	movls	r8, r2
 800462a:	4698      	movhi	r8, r3
 800462c:	2303      	movs	r3, #3
 800462e:	f04f 0900 	mov.w	r9, #0
 8004632:	6123      	str	r3, [r4, #16]
 8004634:	f02b 0304 	bic.w	r3, fp, #4
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	4633      	mov	r3, r6
 800463c:	4621      	mov	r1, r4
 800463e:	4628      	mov	r0, r5
 8004640:	9700      	str	r7, [sp, #0]
 8004642:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004644:	f000 f9d4 	bl	80049f0 <_printf_common>
 8004648:	3001      	adds	r0, #1
 800464a:	f040 8090 	bne.w	800476e <_printf_float+0x1d6>
 800464e:	f04f 30ff 	mov.w	r0, #4294967295
 8004652:	b011      	add	sp, #68	@ 0x44
 8004654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004658:	4642      	mov	r2, r8
 800465a:	464b      	mov	r3, r9
 800465c:	4640      	mov	r0, r8
 800465e:	4649      	mov	r1, r9
 8004660:	f7fc fa88 	bl	8000b74 <__aeabi_dcmpun>
 8004664:	b148      	cbz	r0, 800467a <_printf_float+0xe2>
 8004666:	464b      	mov	r3, r9
 8004668:	2b00      	cmp	r3, #0
 800466a:	bfb8      	it	lt
 800466c:	232d      	movlt	r3, #45	@ 0x2d
 800466e:	4a80      	ldr	r2, [pc, #512]	@ (8004870 <_printf_float+0x2d8>)
 8004670:	bfb8      	it	lt
 8004672:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004676:	4b7f      	ldr	r3, [pc, #508]	@ (8004874 <_printf_float+0x2dc>)
 8004678:	e7d3      	b.n	8004622 <_printf_float+0x8a>
 800467a:	6863      	ldr	r3, [r4, #4]
 800467c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	d13f      	bne.n	8004704 <_printf_float+0x16c>
 8004684:	2306      	movs	r3, #6
 8004686:	6063      	str	r3, [r4, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	9206      	str	r2, [sp, #24]
 8004692:	aa0e      	add	r2, sp, #56	@ 0x38
 8004694:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004698:	aa0d      	add	r2, sp, #52	@ 0x34
 800469a:	9203      	str	r2, [sp, #12]
 800469c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80046a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80046a4:	6863      	ldr	r3, [r4, #4]
 80046a6:	4642      	mov	r2, r8
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	4628      	mov	r0, r5
 80046ac:	464b      	mov	r3, r9
 80046ae:	910a      	str	r1, [sp, #40]	@ 0x28
 80046b0:	f7ff fed4 	bl	800445c <__cvt>
 80046b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80046b6:	4680      	mov	r8, r0
 80046b8:	2947      	cmp	r1, #71	@ 0x47
 80046ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80046bc:	d128      	bne.n	8004710 <_printf_float+0x178>
 80046be:	1cc8      	adds	r0, r1, #3
 80046c0:	db02      	blt.n	80046c8 <_printf_float+0x130>
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	4299      	cmp	r1, r3
 80046c6:	dd40      	ble.n	800474a <_printf_float+0x1b2>
 80046c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80046cc:	fa5f fa8a 	uxtb.w	sl, sl
 80046d0:	4652      	mov	r2, sl
 80046d2:	3901      	subs	r1, #1
 80046d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80046d8:	910d      	str	r1, [sp, #52]	@ 0x34
 80046da:	f7ff ff23 	bl	8004524 <__exponent>
 80046de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046e0:	4681      	mov	r9, r0
 80046e2:	1813      	adds	r3, r2, r0
 80046e4:	2a01      	cmp	r2, #1
 80046e6:	6123      	str	r3, [r4, #16]
 80046e8:	dc02      	bgt.n	80046f0 <_printf_float+0x158>
 80046ea:	6822      	ldr	r2, [r4, #0]
 80046ec:	07d2      	lsls	r2, r2, #31
 80046ee:	d501      	bpl.n	80046f4 <_printf_float+0x15c>
 80046f0:	3301      	adds	r3, #1
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d09e      	beq.n	800463a <_printf_float+0xa2>
 80046fc:	232d      	movs	r3, #45	@ 0x2d
 80046fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004702:	e79a      	b.n	800463a <_printf_float+0xa2>
 8004704:	2947      	cmp	r1, #71	@ 0x47
 8004706:	d1bf      	bne.n	8004688 <_printf_float+0xf0>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1bd      	bne.n	8004688 <_printf_float+0xf0>
 800470c:	2301      	movs	r3, #1
 800470e:	e7ba      	b.n	8004686 <_printf_float+0xee>
 8004710:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004714:	d9dc      	bls.n	80046d0 <_printf_float+0x138>
 8004716:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800471a:	d118      	bne.n	800474e <_printf_float+0x1b6>
 800471c:	2900      	cmp	r1, #0
 800471e:	6863      	ldr	r3, [r4, #4]
 8004720:	dd0b      	ble.n	800473a <_printf_float+0x1a2>
 8004722:	6121      	str	r1, [r4, #16]
 8004724:	b913      	cbnz	r3, 800472c <_printf_float+0x194>
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	07d0      	lsls	r0, r2, #31
 800472a:	d502      	bpl.n	8004732 <_printf_float+0x19a>
 800472c:	3301      	adds	r3, #1
 800472e:	440b      	add	r3, r1
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	f04f 0900 	mov.w	r9, #0
 8004736:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004738:	e7dc      	b.n	80046f4 <_printf_float+0x15c>
 800473a:	b913      	cbnz	r3, 8004742 <_printf_float+0x1aa>
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	07d2      	lsls	r2, r2, #31
 8004740:	d501      	bpl.n	8004746 <_printf_float+0x1ae>
 8004742:	3302      	adds	r3, #2
 8004744:	e7f4      	b.n	8004730 <_printf_float+0x198>
 8004746:	2301      	movs	r3, #1
 8004748:	e7f2      	b.n	8004730 <_printf_float+0x198>
 800474a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800474e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004750:	4299      	cmp	r1, r3
 8004752:	db05      	blt.n	8004760 <_printf_float+0x1c8>
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	6121      	str	r1, [r4, #16]
 8004758:	07d8      	lsls	r0, r3, #31
 800475a:	d5ea      	bpl.n	8004732 <_printf_float+0x19a>
 800475c:	1c4b      	adds	r3, r1, #1
 800475e:	e7e7      	b.n	8004730 <_printf_float+0x198>
 8004760:	2900      	cmp	r1, #0
 8004762:	bfcc      	ite	gt
 8004764:	2201      	movgt	r2, #1
 8004766:	f1c1 0202 	rsble	r2, r1, #2
 800476a:	4413      	add	r3, r2
 800476c:	e7e0      	b.n	8004730 <_printf_float+0x198>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	055a      	lsls	r2, r3, #21
 8004772:	d407      	bmi.n	8004784 <_printf_float+0x1ec>
 8004774:	6923      	ldr	r3, [r4, #16]
 8004776:	4642      	mov	r2, r8
 8004778:	4631      	mov	r1, r6
 800477a:	4628      	mov	r0, r5
 800477c:	47b8      	blx	r7
 800477e:	3001      	adds	r0, #1
 8004780:	d12b      	bne.n	80047da <_printf_float+0x242>
 8004782:	e764      	b.n	800464e <_printf_float+0xb6>
 8004784:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004788:	f240 80dc 	bls.w	8004944 <_printf_float+0x3ac>
 800478c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004790:	2200      	movs	r2, #0
 8004792:	2300      	movs	r3, #0
 8004794:	f7fc f9bc 	bl	8000b10 <__aeabi_dcmpeq>
 8004798:	2800      	cmp	r0, #0
 800479a:	d033      	beq.n	8004804 <_printf_float+0x26c>
 800479c:	2301      	movs	r3, #1
 800479e:	4631      	mov	r1, r6
 80047a0:	4628      	mov	r0, r5
 80047a2:	4a35      	ldr	r2, [pc, #212]	@ (8004878 <_printf_float+0x2e0>)
 80047a4:	47b8      	blx	r7
 80047a6:	3001      	adds	r0, #1
 80047a8:	f43f af51 	beq.w	800464e <_printf_float+0xb6>
 80047ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80047b0:	4543      	cmp	r3, r8
 80047b2:	db02      	blt.n	80047ba <_printf_float+0x222>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	07d8      	lsls	r0, r3, #31
 80047b8:	d50f      	bpl.n	80047da <_printf_float+0x242>
 80047ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047be:	4631      	mov	r1, r6
 80047c0:	4628      	mov	r0, r5
 80047c2:	47b8      	blx	r7
 80047c4:	3001      	adds	r0, #1
 80047c6:	f43f af42 	beq.w	800464e <_printf_float+0xb6>
 80047ca:	f04f 0900 	mov.w	r9, #0
 80047ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80047d2:	f104 0a1a 	add.w	sl, r4, #26
 80047d6:	45c8      	cmp	r8, r9
 80047d8:	dc09      	bgt.n	80047ee <_printf_float+0x256>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	079b      	lsls	r3, r3, #30
 80047de:	f100 8102 	bmi.w	80049e6 <_printf_float+0x44e>
 80047e2:	68e0      	ldr	r0, [r4, #12]
 80047e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80047e6:	4298      	cmp	r0, r3
 80047e8:	bfb8      	it	lt
 80047ea:	4618      	movlt	r0, r3
 80047ec:	e731      	b.n	8004652 <_printf_float+0xba>
 80047ee:	2301      	movs	r3, #1
 80047f0:	4652      	mov	r2, sl
 80047f2:	4631      	mov	r1, r6
 80047f4:	4628      	mov	r0, r5
 80047f6:	47b8      	blx	r7
 80047f8:	3001      	adds	r0, #1
 80047fa:	f43f af28 	beq.w	800464e <_printf_float+0xb6>
 80047fe:	f109 0901 	add.w	r9, r9, #1
 8004802:	e7e8      	b.n	80047d6 <_printf_float+0x23e>
 8004804:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004806:	2b00      	cmp	r3, #0
 8004808:	dc38      	bgt.n	800487c <_printf_float+0x2e4>
 800480a:	2301      	movs	r3, #1
 800480c:	4631      	mov	r1, r6
 800480e:	4628      	mov	r0, r5
 8004810:	4a19      	ldr	r2, [pc, #100]	@ (8004878 <_printf_float+0x2e0>)
 8004812:	47b8      	blx	r7
 8004814:	3001      	adds	r0, #1
 8004816:	f43f af1a 	beq.w	800464e <_printf_float+0xb6>
 800481a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800481e:	ea59 0303 	orrs.w	r3, r9, r3
 8004822:	d102      	bne.n	800482a <_printf_float+0x292>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	07d9      	lsls	r1, r3, #31
 8004828:	d5d7      	bpl.n	80047da <_printf_float+0x242>
 800482a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800482e:	4631      	mov	r1, r6
 8004830:	4628      	mov	r0, r5
 8004832:	47b8      	blx	r7
 8004834:	3001      	adds	r0, #1
 8004836:	f43f af0a 	beq.w	800464e <_printf_float+0xb6>
 800483a:	f04f 0a00 	mov.w	sl, #0
 800483e:	f104 0b1a 	add.w	fp, r4, #26
 8004842:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004844:	425b      	negs	r3, r3
 8004846:	4553      	cmp	r3, sl
 8004848:	dc01      	bgt.n	800484e <_printf_float+0x2b6>
 800484a:	464b      	mov	r3, r9
 800484c:	e793      	b.n	8004776 <_printf_float+0x1de>
 800484e:	2301      	movs	r3, #1
 8004850:	465a      	mov	r2, fp
 8004852:	4631      	mov	r1, r6
 8004854:	4628      	mov	r0, r5
 8004856:	47b8      	blx	r7
 8004858:	3001      	adds	r0, #1
 800485a:	f43f aef8 	beq.w	800464e <_printf_float+0xb6>
 800485e:	f10a 0a01 	add.w	sl, sl, #1
 8004862:	e7ee      	b.n	8004842 <_printf_float+0x2aa>
 8004864:	7fefffff 	.word	0x7fefffff
 8004868:	0800b773 	.word	0x0800b773
 800486c:	0800b777 	.word	0x0800b777
 8004870:	0800b77b 	.word	0x0800b77b
 8004874:	0800b77f 	.word	0x0800b77f
 8004878:	0800b783 	.word	0x0800b783
 800487c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800487e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004882:	4553      	cmp	r3, sl
 8004884:	bfa8      	it	ge
 8004886:	4653      	movge	r3, sl
 8004888:	2b00      	cmp	r3, #0
 800488a:	4699      	mov	r9, r3
 800488c:	dc36      	bgt.n	80048fc <_printf_float+0x364>
 800488e:	f04f 0b00 	mov.w	fp, #0
 8004892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004896:	f104 021a 	add.w	r2, r4, #26
 800489a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800489c:	930a      	str	r3, [sp, #40]	@ 0x28
 800489e:	eba3 0309 	sub.w	r3, r3, r9
 80048a2:	455b      	cmp	r3, fp
 80048a4:	dc31      	bgt.n	800490a <_printf_float+0x372>
 80048a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048a8:	459a      	cmp	sl, r3
 80048aa:	dc3a      	bgt.n	8004922 <_printf_float+0x38a>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	07da      	lsls	r2, r3, #31
 80048b0:	d437      	bmi.n	8004922 <_printf_float+0x38a>
 80048b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048b4:	ebaa 0903 	sub.w	r9, sl, r3
 80048b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048ba:	ebaa 0303 	sub.w	r3, sl, r3
 80048be:	4599      	cmp	r9, r3
 80048c0:	bfa8      	it	ge
 80048c2:	4699      	movge	r9, r3
 80048c4:	f1b9 0f00 	cmp.w	r9, #0
 80048c8:	dc33      	bgt.n	8004932 <_printf_float+0x39a>
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048d2:	f104 0b1a 	add.w	fp, r4, #26
 80048d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048d8:	ebaa 0303 	sub.w	r3, sl, r3
 80048dc:	eba3 0309 	sub.w	r3, r3, r9
 80048e0:	4543      	cmp	r3, r8
 80048e2:	f77f af7a 	ble.w	80047da <_printf_float+0x242>
 80048e6:	2301      	movs	r3, #1
 80048e8:	465a      	mov	r2, fp
 80048ea:	4631      	mov	r1, r6
 80048ec:	4628      	mov	r0, r5
 80048ee:	47b8      	blx	r7
 80048f0:	3001      	adds	r0, #1
 80048f2:	f43f aeac 	beq.w	800464e <_printf_float+0xb6>
 80048f6:	f108 0801 	add.w	r8, r8, #1
 80048fa:	e7ec      	b.n	80048d6 <_printf_float+0x33e>
 80048fc:	4642      	mov	r2, r8
 80048fe:	4631      	mov	r1, r6
 8004900:	4628      	mov	r0, r5
 8004902:	47b8      	blx	r7
 8004904:	3001      	adds	r0, #1
 8004906:	d1c2      	bne.n	800488e <_printf_float+0x2f6>
 8004908:	e6a1      	b.n	800464e <_printf_float+0xb6>
 800490a:	2301      	movs	r3, #1
 800490c:	4631      	mov	r1, r6
 800490e:	4628      	mov	r0, r5
 8004910:	920a      	str	r2, [sp, #40]	@ 0x28
 8004912:	47b8      	blx	r7
 8004914:	3001      	adds	r0, #1
 8004916:	f43f ae9a 	beq.w	800464e <_printf_float+0xb6>
 800491a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800491c:	f10b 0b01 	add.w	fp, fp, #1
 8004920:	e7bb      	b.n	800489a <_printf_float+0x302>
 8004922:	4631      	mov	r1, r6
 8004924:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004928:	4628      	mov	r0, r5
 800492a:	47b8      	blx	r7
 800492c:	3001      	adds	r0, #1
 800492e:	d1c0      	bne.n	80048b2 <_printf_float+0x31a>
 8004930:	e68d      	b.n	800464e <_printf_float+0xb6>
 8004932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004934:	464b      	mov	r3, r9
 8004936:	4631      	mov	r1, r6
 8004938:	4628      	mov	r0, r5
 800493a:	4442      	add	r2, r8
 800493c:	47b8      	blx	r7
 800493e:	3001      	adds	r0, #1
 8004940:	d1c3      	bne.n	80048ca <_printf_float+0x332>
 8004942:	e684      	b.n	800464e <_printf_float+0xb6>
 8004944:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004948:	f1ba 0f01 	cmp.w	sl, #1
 800494c:	dc01      	bgt.n	8004952 <_printf_float+0x3ba>
 800494e:	07db      	lsls	r3, r3, #31
 8004950:	d536      	bpl.n	80049c0 <_printf_float+0x428>
 8004952:	2301      	movs	r3, #1
 8004954:	4642      	mov	r2, r8
 8004956:	4631      	mov	r1, r6
 8004958:	4628      	mov	r0, r5
 800495a:	47b8      	blx	r7
 800495c:	3001      	adds	r0, #1
 800495e:	f43f ae76 	beq.w	800464e <_printf_float+0xb6>
 8004962:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004966:	4631      	mov	r1, r6
 8004968:	4628      	mov	r0, r5
 800496a:	47b8      	blx	r7
 800496c:	3001      	adds	r0, #1
 800496e:	f43f ae6e 	beq.w	800464e <_printf_float+0xb6>
 8004972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004976:	2200      	movs	r2, #0
 8004978:	2300      	movs	r3, #0
 800497a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800497e:	f7fc f8c7 	bl	8000b10 <__aeabi_dcmpeq>
 8004982:	b9c0      	cbnz	r0, 80049b6 <_printf_float+0x41e>
 8004984:	4653      	mov	r3, sl
 8004986:	f108 0201 	add.w	r2, r8, #1
 800498a:	4631      	mov	r1, r6
 800498c:	4628      	mov	r0, r5
 800498e:	47b8      	blx	r7
 8004990:	3001      	adds	r0, #1
 8004992:	d10c      	bne.n	80049ae <_printf_float+0x416>
 8004994:	e65b      	b.n	800464e <_printf_float+0xb6>
 8004996:	2301      	movs	r3, #1
 8004998:	465a      	mov	r2, fp
 800499a:	4631      	mov	r1, r6
 800499c:	4628      	mov	r0, r5
 800499e:	47b8      	blx	r7
 80049a0:	3001      	adds	r0, #1
 80049a2:	f43f ae54 	beq.w	800464e <_printf_float+0xb6>
 80049a6:	f108 0801 	add.w	r8, r8, #1
 80049aa:	45d0      	cmp	r8, sl
 80049ac:	dbf3      	blt.n	8004996 <_printf_float+0x3fe>
 80049ae:	464b      	mov	r3, r9
 80049b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80049b4:	e6e0      	b.n	8004778 <_printf_float+0x1e0>
 80049b6:	f04f 0800 	mov.w	r8, #0
 80049ba:	f104 0b1a 	add.w	fp, r4, #26
 80049be:	e7f4      	b.n	80049aa <_printf_float+0x412>
 80049c0:	2301      	movs	r3, #1
 80049c2:	4642      	mov	r2, r8
 80049c4:	e7e1      	b.n	800498a <_printf_float+0x3f2>
 80049c6:	2301      	movs	r3, #1
 80049c8:	464a      	mov	r2, r9
 80049ca:	4631      	mov	r1, r6
 80049cc:	4628      	mov	r0, r5
 80049ce:	47b8      	blx	r7
 80049d0:	3001      	adds	r0, #1
 80049d2:	f43f ae3c 	beq.w	800464e <_printf_float+0xb6>
 80049d6:	f108 0801 	add.w	r8, r8, #1
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80049de:	1a5b      	subs	r3, r3, r1
 80049e0:	4543      	cmp	r3, r8
 80049e2:	dcf0      	bgt.n	80049c6 <_printf_float+0x42e>
 80049e4:	e6fd      	b.n	80047e2 <_printf_float+0x24a>
 80049e6:	f04f 0800 	mov.w	r8, #0
 80049ea:	f104 0919 	add.w	r9, r4, #25
 80049ee:	e7f4      	b.n	80049da <_printf_float+0x442>

080049f0 <_printf_common>:
 80049f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f4:	4616      	mov	r6, r2
 80049f6:	4698      	mov	r8, r3
 80049f8:	688a      	ldr	r2, [r1, #8]
 80049fa:	690b      	ldr	r3, [r1, #16]
 80049fc:	4607      	mov	r7, r0
 80049fe:	4293      	cmp	r3, r2
 8004a00:	bfb8      	it	lt
 8004a02:	4613      	movlt	r3, r2
 8004a04:	6033      	str	r3, [r6, #0]
 8004a06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a10:	b10a      	cbz	r2, 8004a16 <_printf_common+0x26>
 8004a12:	3301      	adds	r3, #1
 8004a14:	6033      	str	r3, [r6, #0]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	0699      	lsls	r1, r3, #26
 8004a1a:	bf42      	ittt	mi
 8004a1c:	6833      	ldrmi	r3, [r6, #0]
 8004a1e:	3302      	addmi	r3, #2
 8004a20:	6033      	strmi	r3, [r6, #0]
 8004a22:	6825      	ldr	r5, [r4, #0]
 8004a24:	f015 0506 	ands.w	r5, r5, #6
 8004a28:	d106      	bne.n	8004a38 <_printf_common+0x48>
 8004a2a:	f104 0a19 	add.w	sl, r4, #25
 8004a2e:	68e3      	ldr	r3, [r4, #12]
 8004a30:	6832      	ldr	r2, [r6, #0]
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	42ab      	cmp	r3, r5
 8004a36:	dc2b      	bgt.n	8004a90 <_printf_common+0xa0>
 8004a38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a3c:	6822      	ldr	r2, [r4, #0]
 8004a3e:	3b00      	subs	r3, #0
 8004a40:	bf18      	it	ne
 8004a42:	2301      	movne	r3, #1
 8004a44:	0692      	lsls	r2, r2, #26
 8004a46:	d430      	bmi.n	8004aaa <_printf_common+0xba>
 8004a48:	4641      	mov	r1, r8
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a50:	47c8      	blx	r9
 8004a52:	3001      	adds	r0, #1
 8004a54:	d023      	beq.n	8004a9e <_printf_common+0xae>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	6922      	ldr	r2, [r4, #16]
 8004a5a:	f003 0306 	and.w	r3, r3, #6
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	bf14      	ite	ne
 8004a62:	2500      	movne	r5, #0
 8004a64:	6833      	ldreq	r3, [r6, #0]
 8004a66:	f04f 0600 	mov.w	r6, #0
 8004a6a:	bf08      	it	eq
 8004a6c:	68e5      	ldreq	r5, [r4, #12]
 8004a6e:	f104 041a 	add.w	r4, r4, #26
 8004a72:	bf08      	it	eq
 8004a74:	1aed      	subeq	r5, r5, r3
 8004a76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a7a:	bf08      	it	eq
 8004a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a80:	4293      	cmp	r3, r2
 8004a82:	bfc4      	itt	gt
 8004a84:	1a9b      	subgt	r3, r3, r2
 8004a86:	18ed      	addgt	r5, r5, r3
 8004a88:	42b5      	cmp	r5, r6
 8004a8a:	d11a      	bne.n	8004ac2 <_printf_common+0xd2>
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	e008      	b.n	8004aa2 <_printf_common+0xb2>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4652      	mov	r2, sl
 8004a94:	4641      	mov	r1, r8
 8004a96:	4638      	mov	r0, r7
 8004a98:	47c8      	blx	r9
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d103      	bne.n	8004aa6 <_printf_common+0xb6>
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa6:	3501      	adds	r5, #1
 8004aa8:	e7c1      	b.n	8004a2e <_printf_common+0x3e>
 8004aaa:	2030      	movs	r0, #48	@ 0x30
 8004aac:	18e1      	adds	r1, r4, r3
 8004aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ab8:	4422      	add	r2, r4
 8004aba:	3302      	adds	r3, #2
 8004abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ac0:	e7c2      	b.n	8004a48 <_printf_common+0x58>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	4638      	mov	r0, r7
 8004aca:	47c8      	blx	r9
 8004acc:	3001      	adds	r0, #1
 8004ace:	d0e6      	beq.n	8004a9e <_printf_common+0xae>
 8004ad0:	3601      	adds	r6, #1
 8004ad2:	e7d9      	b.n	8004a88 <_printf_common+0x98>

08004ad4 <_printf_i>:
 8004ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad8:	7e0f      	ldrb	r7, [r1, #24]
 8004ada:	4691      	mov	r9, r2
 8004adc:	2f78      	cmp	r7, #120	@ 0x78
 8004ade:	4680      	mov	r8, r0
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	469a      	mov	sl, r3
 8004ae4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004aea:	d807      	bhi.n	8004afc <_printf_i+0x28>
 8004aec:	2f62      	cmp	r7, #98	@ 0x62
 8004aee:	d80a      	bhi.n	8004b06 <_printf_i+0x32>
 8004af0:	2f00      	cmp	r7, #0
 8004af2:	f000 80d3 	beq.w	8004c9c <_printf_i+0x1c8>
 8004af6:	2f58      	cmp	r7, #88	@ 0x58
 8004af8:	f000 80ba 	beq.w	8004c70 <_printf_i+0x19c>
 8004afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b04:	e03a      	b.n	8004b7c <_printf_i+0xa8>
 8004b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b0a:	2b15      	cmp	r3, #21
 8004b0c:	d8f6      	bhi.n	8004afc <_printf_i+0x28>
 8004b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b14 <_printf_i+0x40>)
 8004b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b81 	.word	0x08004b81
 8004b1c:	08004afd 	.word	0x08004afd
 8004b20:	08004afd 	.word	0x08004afd
 8004b24:	08004afd 	.word	0x08004afd
 8004b28:	08004afd 	.word	0x08004afd
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004afd 	.word	0x08004afd
 8004b34:	08004afd 	.word	0x08004afd
 8004b38:	08004afd 	.word	0x08004afd
 8004b3c:	08004afd 	.word	0x08004afd
 8004b40:	08004c83 	.word	0x08004c83
 8004b44:	08004bab 	.word	0x08004bab
 8004b48:	08004c3d 	.word	0x08004c3d
 8004b4c:	08004afd 	.word	0x08004afd
 8004b50:	08004afd 	.word	0x08004afd
 8004b54:	08004ca5 	.word	0x08004ca5
 8004b58:	08004afd 	.word	0x08004afd
 8004b5c:	08004bab 	.word	0x08004bab
 8004b60:	08004afd 	.word	0x08004afd
 8004b64:	08004afd 	.word	0x08004afd
 8004b68:	08004c45 	.word	0x08004c45
 8004b6c:	6833      	ldr	r3, [r6, #0]
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6032      	str	r2, [r6, #0]
 8004b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e09e      	b.n	8004cbe <_printf_i+0x1ea>
 8004b80:	6833      	ldr	r3, [r6, #0]
 8004b82:	6820      	ldr	r0, [r4, #0]
 8004b84:	1d19      	adds	r1, r3, #4
 8004b86:	6031      	str	r1, [r6, #0]
 8004b88:	0606      	lsls	r6, r0, #24
 8004b8a:	d501      	bpl.n	8004b90 <_printf_i+0xbc>
 8004b8c:	681d      	ldr	r5, [r3, #0]
 8004b8e:	e003      	b.n	8004b98 <_printf_i+0xc4>
 8004b90:	0645      	lsls	r5, r0, #25
 8004b92:	d5fb      	bpl.n	8004b8c <_printf_i+0xb8>
 8004b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	da03      	bge.n	8004ba4 <_printf_i+0xd0>
 8004b9c:	232d      	movs	r3, #45	@ 0x2d
 8004b9e:	426d      	negs	r5, r5
 8004ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ba4:	230a      	movs	r3, #10
 8004ba6:	4859      	ldr	r0, [pc, #356]	@ (8004d0c <_printf_i+0x238>)
 8004ba8:	e011      	b.n	8004bce <_printf_i+0xfa>
 8004baa:	6821      	ldr	r1, [r4, #0]
 8004bac:	6833      	ldr	r3, [r6, #0]
 8004bae:	0608      	lsls	r0, r1, #24
 8004bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bb4:	d402      	bmi.n	8004bbc <_printf_i+0xe8>
 8004bb6:	0649      	lsls	r1, r1, #25
 8004bb8:	bf48      	it	mi
 8004bba:	b2ad      	uxthmi	r5, r5
 8004bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bbe:	6033      	str	r3, [r6, #0]
 8004bc0:	bf14      	ite	ne
 8004bc2:	230a      	movne	r3, #10
 8004bc4:	2308      	moveq	r3, #8
 8004bc6:	4851      	ldr	r0, [pc, #324]	@ (8004d0c <_printf_i+0x238>)
 8004bc8:	2100      	movs	r1, #0
 8004bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bce:	6866      	ldr	r6, [r4, #4]
 8004bd0:	2e00      	cmp	r6, #0
 8004bd2:	bfa8      	it	ge
 8004bd4:	6821      	ldrge	r1, [r4, #0]
 8004bd6:	60a6      	str	r6, [r4, #8]
 8004bd8:	bfa4      	itt	ge
 8004bda:	f021 0104 	bicge.w	r1, r1, #4
 8004bde:	6021      	strge	r1, [r4, #0]
 8004be0:	b90d      	cbnz	r5, 8004be6 <_printf_i+0x112>
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	d04b      	beq.n	8004c7e <_printf_i+0x1aa>
 8004be6:	4616      	mov	r6, r2
 8004be8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bec:	fb03 5711 	mls	r7, r3, r1, r5
 8004bf0:	5dc7      	ldrb	r7, [r0, r7]
 8004bf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bf6:	462f      	mov	r7, r5
 8004bf8:	42bb      	cmp	r3, r7
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	d9f4      	bls.n	8004be8 <_printf_i+0x114>
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d10b      	bne.n	8004c1a <_printf_i+0x146>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	07df      	lsls	r7, r3, #31
 8004c06:	d508      	bpl.n	8004c1a <_printf_i+0x146>
 8004c08:	6923      	ldr	r3, [r4, #16]
 8004c0a:	6861      	ldr	r1, [r4, #4]
 8004c0c:	4299      	cmp	r1, r3
 8004c0e:	bfde      	ittt	le
 8004c10:	2330      	movle	r3, #48	@ 0x30
 8004c12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c1a:	1b92      	subs	r2, r2, r6
 8004c1c:	6122      	str	r2, [r4, #16]
 8004c1e:	464b      	mov	r3, r9
 8004c20:	4621      	mov	r1, r4
 8004c22:	4640      	mov	r0, r8
 8004c24:	f8cd a000 	str.w	sl, [sp]
 8004c28:	aa03      	add	r2, sp, #12
 8004c2a:	f7ff fee1 	bl	80049f0 <_printf_common>
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d14a      	bne.n	8004cc8 <_printf_i+0x1f4>
 8004c32:	f04f 30ff 	mov.w	r0, #4294967295
 8004c36:	b004      	add	sp, #16
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	f043 0320 	orr.w	r3, r3, #32
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	2778      	movs	r7, #120	@ 0x78
 8004c46:	4832      	ldr	r0, [pc, #200]	@ (8004d10 <_printf_i+0x23c>)
 8004c48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	6831      	ldr	r1, [r6, #0]
 8004c50:	061f      	lsls	r7, r3, #24
 8004c52:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c56:	d402      	bmi.n	8004c5e <_printf_i+0x18a>
 8004c58:	065f      	lsls	r7, r3, #25
 8004c5a:	bf48      	it	mi
 8004c5c:	b2ad      	uxthmi	r5, r5
 8004c5e:	6031      	str	r1, [r6, #0]
 8004c60:	07d9      	lsls	r1, r3, #31
 8004c62:	bf44      	itt	mi
 8004c64:	f043 0320 	orrmi.w	r3, r3, #32
 8004c68:	6023      	strmi	r3, [r4, #0]
 8004c6a:	b11d      	cbz	r5, 8004c74 <_printf_i+0x1a0>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	e7ab      	b.n	8004bc8 <_printf_i+0xf4>
 8004c70:	4826      	ldr	r0, [pc, #152]	@ (8004d0c <_printf_i+0x238>)
 8004c72:	e7e9      	b.n	8004c48 <_printf_i+0x174>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	f023 0320 	bic.w	r3, r3, #32
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	e7f6      	b.n	8004c6c <_printf_i+0x198>
 8004c7e:	4616      	mov	r6, r2
 8004c80:	e7bd      	b.n	8004bfe <_printf_i+0x12a>
 8004c82:	6833      	ldr	r3, [r6, #0]
 8004c84:	6825      	ldr	r5, [r4, #0]
 8004c86:	1d18      	adds	r0, r3, #4
 8004c88:	6961      	ldr	r1, [r4, #20]
 8004c8a:	6030      	str	r0, [r6, #0]
 8004c8c:	062e      	lsls	r6, r5, #24
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	d501      	bpl.n	8004c96 <_printf_i+0x1c2>
 8004c92:	6019      	str	r1, [r3, #0]
 8004c94:	e002      	b.n	8004c9c <_printf_i+0x1c8>
 8004c96:	0668      	lsls	r0, r5, #25
 8004c98:	d5fb      	bpl.n	8004c92 <_printf_i+0x1be>
 8004c9a:	8019      	strh	r1, [r3, #0]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	4616      	mov	r6, r2
 8004ca0:	6123      	str	r3, [r4, #16]
 8004ca2:	e7bc      	b.n	8004c1e <_printf_i+0x14a>
 8004ca4:	6833      	ldr	r3, [r6, #0]
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	1d1a      	adds	r2, r3, #4
 8004caa:	6032      	str	r2, [r6, #0]
 8004cac:	681e      	ldr	r6, [r3, #0]
 8004cae:	6862      	ldr	r2, [r4, #4]
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f000 fbec 	bl	800548e <memchr>
 8004cb6:	b108      	cbz	r0, 8004cbc <_printf_i+0x1e8>
 8004cb8:	1b80      	subs	r0, r0, r6
 8004cba:	6060      	str	r0, [r4, #4]
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cc6:	e7aa      	b.n	8004c1e <_printf_i+0x14a>
 8004cc8:	4632      	mov	r2, r6
 8004cca:	4649      	mov	r1, r9
 8004ccc:	4640      	mov	r0, r8
 8004cce:	6923      	ldr	r3, [r4, #16]
 8004cd0:	47d0      	blx	sl
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d0ad      	beq.n	8004c32 <_printf_i+0x15e>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	079b      	lsls	r3, r3, #30
 8004cda:	d413      	bmi.n	8004d04 <_printf_i+0x230>
 8004cdc:	68e0      	ldr	r0, [r4, #12]
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	4298      	cmp	r0, r3
 8004ce2:	bfb8      	it	lt
 8004ce4:	4618      	movlt	r0, r3
 8004ce6:	e7a6      	b.n	8004c36 <_printf_i+0x162>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4632      	mov	r2, r6
 8004cec:	4649      	mov	r1, r9
 8004cee:	4640      	mov	r0, r8
 8004cf0:	47d0      	blx	sl
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d09d      	beq.n	8004c32 <_printf_i+0x15e>
 8004cf6:	3501      	adds	r5, #1
 8004cf8:	68e3      	ldr	r3, [r4, #12]
 8004cfa:	9903      	ldr	r1, [sp, #12]
 8004cfc:	1a5b      	subs	r3, r3, r1
 8004cfe:	42ab      	cmp	r3, r5
 8004d00:	dcf2      	bgt.n	8004ce8 <_printf_i+0x214>
 8004d02:	e7eb      	b.n	8004cdc <_printf_i+0x208>
 8004d04:	2500      	movs	r5, #0
 8004d06:	f104 0619 	add.w	r6, r4, #25
 8004d0a:	e7f5      	b.n	8004cf8 <_printf_i+0x224>
 8004d0c:	0800b785 	.word	0x0800b785
 8004d10:	0800b796 	.word	0x0800b796

08004d14 <_scanf_float>:
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	b087      	sub	sp, #28
 8004d1a:	9303      	str	r3, [sp, #12]
 8004d1c:	688b      	ldr	r3, [r1, #8]
 8004d1e:	4617      	mov	r7, r2
 8004d20:	1e5a      	subs	r2, r3, #1
 8004d22:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004d26:	bf82      	ittt	hi
 8004d28:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004d2c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004d30:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004d34:	460a      	mov	r2, r1
 8004d36:	f04f 0500 	mov.w	r5, #0
 8004d3a:	bf88      	it	hi
 8004d3c:	608b      	strhi	r3, [r1, #8]
 8004d3e:	680b      	ldr	r3, [r1, #0]
 8004d40:	4680      	mov	r8, r0
 8004d42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004d46:	f842 3b1c 	str.w	r3, [r2], #28
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	bf98      	it	ls
 8004d4e:	f04f 0b00 	movls.w	fp, #0
 8004d52:	4616      	mov	r6, r2
 8004d54:	46aa      	mov	sl, r5
 8004d56:	46a9      	mov	r9, r5
 8004d58:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004d5c:	9201      	str	r2, [sp, #4]
 8004d5e:	9502      	str	r5, [sp, #8]
 8004d60:	68a2      	ldr	r2, [r4, #8]
 8004d62:	b152      	cbz	r2, 8004d7a <_scanf_float+0x66>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b4e      	cmp	r3, #78	@ 0x4e
 8004d6a:	d865      	bhi.n	8004e38 <_scanf_float+0x124>
 8004d6c:	2b40      	cmp	r3, #64	@ 0x40
 8004d6e:	d83d      	bhi.n	8004dec <_scanf_float+0xd8>
 8004d70:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004d74:	b2c8      	uxtb	r0, r1
 8004d76:	280e      	cmp	r0, #14
 8004d78:	d93b      	bls.n	8004df2 <_scanf_float+0xde>
 8004d7a:	f1b9 0f00 	cmp.w	r9, #0
 8004d7e:	d003      	beq.n	8004d88 <_scanf_float+0x74>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d86:	6023      	str	r3, [r4, #0]
 8004d88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d8c:	f1ba 0f01 	cmp.w	sl, #1
 8004d90:	f200 8118 	bhi.w	8004fc4 <_scanf_float+0x2b0>
 8004d94:	9b01      	ldr	r3, [sp, #4]
 8004d96:	429e      	cmp	r6, r3
 8004d98:	f200 8109 	bhi.w	8004fae <_scanf_float+0x29a>
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	b007      	add	sp, #28
 8004da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004da8:	2a0d      	cmp	r2, #13
 8004daa:	d8e6      	bhi.n	8004d7a <_scanf_float+0x66>
 8004dac:	a101      	add	r1, pc, #4	@ (adr r1, 8004db4 <_scanf_float+0xa0>)
 8004dae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004efb 	.word	0x08004efb
 8004db8:	08004d7b 	.word	0x08004d7b
 8004dbc:	08004d7b 	.word	0x08004d7b
 8004dc0:	08004d7b 	.word	0x08004d7b
 8004dc4:	08004f5b 	.word	0x08004f5b
 8004dc8:	08004f33 	.word	0x08004f33
 8004dcc:	08004d7b 	.word	0x08004d7b
 8004dd0:	08004d7b 	.word	0x08004d7b
 8004dd4:	08004f09 	.word	0x08004f09
 8004dd8:	08004d7b 	.word	0x08004d7b
 8004ddc:	08004d7b 	.word	0x08004d7b
 8004de0:	08004d7b 	.word	0x08004d7b
 8004de4:	08004d7b 	.word	0x08004d7b
 8004de8:	08004ec1 	.word	0x08004ec1
 8004dec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004df0:	e7da      	b.n	8004da8 <_scanf_float+0x94>
 8004df2:	290e      	cmp	r1, #14
 8004df4:	d8c1      	bhi.n	8004d7a <_scanf_float+0x66>
 8004df6:	a001      	add	r0, pc, #4	@ (adr r0, 8004dfc <_scanf_float+0xe8>)
 8004df8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004dfc:	08004eb1 	.word	0x08004eb1
 8004e00:	08004d7b 	.word	0x08004d7b
 8004e04:	08004eb1 	.word	0x08004eb1
 8004e08:	08004f47 	.word	0x08004f47
 8004e0c:	08004d7b 	.word	0x08004d7b
 8004e10:	08004e59 	.word	0x08004e59
 8004e14:	08004e97 	.word	0x08004e97
 8004e18:	08004e97 	.word	0x08004e97
 8004e1c:	08004e97 	.word	0x08004e97
 8004e20:	08004e97 	.word	0x08004e97
 8004e24:	08004e97 	.word	0x08004e97
 8004e28:	08004e97 	.word	0x08004e97
 8004e2c:	08004e97 	.word	0x08004e97
 8004e30:	08004e97 	.word	0x08004e97
 8004e34:	08004e97 	.word	0x08004e97
 8004e38:	2b6e      	cmp	r3, #110	@ 0x6e
 8004e3a:	d809      	bhi.n	8004e50 <_scanf_float+0x13c>
 8004e3c:	2b60      	cmp	r3, #96	@ 0x60
 8004e3e:	d8b1      	bhi.n	8004da4 <_scanf_float+0x90>
 8004e40:	2b54      	cmp	r3, #84	@ 0x54
 8004e42:	d07b      	beq.n	8004f3c <_scanf_float+0x228>
 8004e44:	2b59      	cmp	r3, #89	@ 0x59
 8004e46:	d198      	bne.n	8004d7a <_scanf_float+0x66>
 8004e48:	2d07      	cmp	r5, #7
 8004e4a:	d196      	bne.n	8004d7a <_scanf_float+0x66>
 8004e4c:	2508      	movs	r5, #8
 8004e4e:	e02c      	b.n	8004eaa <_scanf_float+0x196>
 8004e50:	2b74      	cmp	r3, #116	@ 0x74
 8004e52:	d073      	beq.n	8004f3c <_scanf_float+0x228>
 8004e54:	2b79      	cmp	r3, #121	@ 0x79
 8004e56:	e7f6      	b.n	8004e46 <_scanf_float+0x132>
 8004e58:	6821      	ldr	r1, [r4, #0]
 8004e5a:	05c8      	lsls	r0, r1, #23
 8004e5c:	d51b      	bpl.n	8004e96 <_scanf_float+0x182>
 8004e5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004e62:	6021      	str	r1, [r4, #0]
 8004e64:	f109 0901 	add.w	r9, r9, #1
 8004e68:	f1bb 0f00 	cmp.w	fp, #0
 8004e6c:	d003      	beq.n	8004e76 <_scanf_float+0x162>
 8004e6e:	3201      	adds	r2, #1
 8004e70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e74:	60a2      	str	r2, [r4, #8]
 8004e76:	68a3      	ldr	r3, [r4, #8]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	60a3      	str	r3, [r4, #8]
 8004e7c:	6923      	ldr	r3, [r4, #16]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
 8004e8a:	f340 8087 	ble.w	8004f9c <_scanf_float+0x288>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	e764      	b.n	8004d60 <_scanf_float+0x4c>
 8004e96:	eb1a 0105 	adds.w	r1, sl, r5
 8004e9a:	f47f af6e 	bne.w	8004d7a <_scanf_float+0x66>
 8004e9e:	460d      	mov	r5, r1
 8004ea0:	468a      	mov	sl, r1
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004ea8:	6022      	str	r2, [r4, #0]
 8004eaa:	f806 3b01 	strb.w	r3, [r6], #1
 8004eae:	e7e2      	b.n	8004e76 <_scanf_float+0x162>
 8004eb0:	6822      	ldr	r2, [r4, #0]
 8004eb2:	0610      	lsls	r0, r2, #24
 8004eb4:	f57f af61 	bpl.w	8004d7a <_scanf_float+0x66>
 8004eb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ebc:	6022      	str	r2, [r4, #0]
 8004ebe:	e7f4      	b.n	8004eaa <_scanf_float+0x196>
 8004ec0:	f1ba 0f00 	cmp.w	sl, #0
 8004ec4:	d10e      	bne.n	8004ee4 <_scanf_float+0x1d0>
 8004ec6:	f1b9 0f00 	cmp.w	r9, #0
 8004eca:	d10e      	bne.n	8004eea <_scanf_float+0x1d6>
 8004ecc:	6822      	ldr	r2, [r4, #0]
 8004ece:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004ed2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004ed6:	d108      	bne.n	8004eea <_scanf_float+0x1d6>
 8004ed8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004edc:	f04f 0a01 	mov.w	sl, #1
 8004ee0:	6022      	str	r2, [r4, #0]
 8004ee2:	e7e2      	b.n	8004eaa <_scanf_float+0x196>
 8004ee4:	f1ba 0f02 	cmp.w	sl, #2
 8004ee8:	d055      	beq.n	8004f96 <_scanf_float+0x282>
 8004eea:	2d01      	cmp	r5, #1
 8004eec:	d002      	beq.n	8004ef4 <_scanf_float+0x1e0>
 8004eee:	2d04      	cmp	r5, #4
 8004ef0:	f47f af43 	bne.w	8004d7a <_scanf_float+0x66>
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	b2ed      	uxtb	r5, r5
 8004ef8:	e7d7      	b.n	8004eaa <_scanf_float+0x196>
 8004efa:	f1ba 0f01 	cmp.w	sl, #1
 8004efe:	f47f af3c 	bne.w	8004d7a <_scanf_float+0x66>
 8004f02:	f04f 0a02 	mov.w	sl, #2
 8004f06:	e7d0      	b.n	8004eaa <_scanf_float+0x196>
 8004f08:	b97d      	cbnz	r5, 8004f2a <_scanf_float+0x216>
 8004f0a:	f1b9 0f00 	cmp.w	r9, #0
 8004f0e:	f47f af37 	bne.w	8004d80 <_scanf_float+0x6c>
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004f18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004f1c:	f040 8103 	bne.w	8005126 <_scanf_float+0x412>
 8004f20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f24:	2501      	movs	r5, #1
 8004f26:	6022      	str	r2, [r4, #0]
 8004f28:	e7bf      	b.n	8004eaa <_scanf_float+0x196>
 8004f2a:	2d03      	cmp	r5, #3
 8004f2c:	d0e2      	beq.n	8004ef4 <_scanf_float+0x1e0>
 8004f2e:	2d05      	cmp	r5, #5
 8004f30:	e7de      	b.n	8004ef0 <_scanf_float+0x1dc>
 8004f32:	2d02      	cmp	r5, #2
 8004f34:	f47f af21 	bne.w	8004d7a <_scanf_float+0x66>
 8004f38:	2503      	movs	r5, #3
 8004f3a:	e7b6      	b.n	8004eaa <_scanf_float+0x196>
 8004f3c:	2d06      	cmp	r5, #6
 8004f3e:	f47f af1c 	bne.w	8004d7a <_scanf_float+0x66>
 8004f42:	2507      	movs	r5, #7
 8004f44:	e7b1      	b.n	8004eaa <_scanf_float+0x196>
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	0591      	lsls	r1, r2, #22
 8004f4a:	f57f af16 	bpl.w	8004d7a <_scanf_float+0x66>
 8004f4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004f52:	6022      	str	r2, [r4, #0]
 8004f54:	f8cd 9008 	str.w	r9, [sp, #8]
 8004f58:	e7a7      	b.n	8004eaa <_scanf_float+0x196>
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004f60:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004f64:	d006      	beq.n	8004f74 <_scanf_float+0x260>
 8004f66:	0550      	lsls	r0, r2, #21
 8004f68:	f57f af07 	bpl.w	8004d7a <_scanf_float+0x66>
 8004f6c:	f1b9 0f00 	cmp.w	r9, #0
 8004f70:	f000 80d9 	beq.w	8005126 <_scanf_float+0x412>
 8004f74:	0591      	lsls	r1, r2, #22
 8004f76:	bf58      	it	pl
 8004f78:	9902      	ldrpl	r1, [sp, #8]
 8004f7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f7e:	bf58      	it	pl
 8004f80:	eba9 0101 	subpl.w	r1, r9, r1
 8004f84:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004f88:	f04f 0900 	mov.w	r9, #0
 8004f8c:	bf58      	it	pl
 8004f8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004f92:	6022      	str	r2, [r4, #0]
 8004f94:	e789      	b.n	8004eaa <_scanf_float+0x196>
 8004f96:	f04f 0a03 	mov.w	sl, #3
 8004f9a:	e786      	b.n	8004eaa <_scanf_float+0x196>
 8004f9c:	4639      	mov	r1, r7
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004fa4:	4798      	blx	r3
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f43f aeda 	beq.w	8004d60 <_scanf_float+0x4c>
 8004fac:	e6e5      	b.n	8004d7a <_scanf_float+0x66>
 8004fae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004fb2:	463a      	mov	r2, r7
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fba:	4798      	blx	r3
 8004fbc:	6923      	ldr	r3, [r4, #16]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	6123      	str	r3, [r4, #16]
 8004fc2:	e6e7      	b.n	8004d94 <_scanf_float+0x80>
 8004fc4:	1e6b      	subs	r3, r5, #1
 8004fc6:	2b06      	cmp	r3, #6
 8004fc8:	d824      	bhi.n	8005014 <_scanf_float+0x300>
 8004fca:	2d02      	cmp	r5, #2
 8004fcc:	d836      	bhi.n	800503c <_scanf_float+0x328>
 8004fce:	9b01      	ldr	r3, [sp, #4]
 8004fd0:	429e      	cmp	r6, r3
 8004fd2:	f67f aee3 	bls.w	8004d9c <_scanf_float+0x88>
 8004fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004fda:	463a      	mov	r2, r7
 8004fdc:	4640      	mov	r0, r8
 8004fde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fe2:	4798      	blx	r3
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	6123      	str	r3, [r4, #16]
 8004fea:	e7f0      	b.n	8004fce <_scanf_float+0x2ba>
 8004fec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ff0:	463a      	mov	r2, r7
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004ff8:	4798      	blx	r3
 8004ffa:	6923      	ldr	r3, [r4, #16]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	6123      	str	r3, [r4, #16]
 8005000:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005004:	fa5f fa8a 	uxtb.w	sl, sl
 8005008:	f1ba 0f02 	cmp.w	sl, #2
 800500c:	d1ee      	bne.n	8004fec <_scanf_float+0x2d8>
 800500e:	3d03      	subs	r5, #3
 8005010:	b2ed      	uxtb	r5, r5
 8005012:	1b76      	subs	r6, r6, r5
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	05da      	lsls	r2, r3, #23
 8005018:	d530      	bpl.n	800507c <_scanf_float+0x368>
 800501a:	055b      	lsls	r3, r3, #21
 800501c:	d511      	bpl.n	8005042 <_scanf_float+0x32e>
 800501e:	9b01      	ldr	r3, [sp, #4]
 8005020:	429e      	cmp	r6, r3
 8005022:	f67f aebb 	bls.w	8004d9c <_scanf_float+0x88>
 8005026:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800502a:	463a      	mov	r2, r7
 800502c:	4640      	mov	r0, r8
 800502e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005032:	4798      	blx	r3
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	3b01      	subs	r3, #1
 8005038:	6123      	str	r3, [r4, #16]
 800503a:	e7f0      	b.n	800501e <_scanf_float+0x30a>
 800503c:	46aa      	mov	sl, r5
 800503e:	46b3      	mov	fp, r6
 8005040:	e7de      	b.n	8005000 <_scanf_float+0x2ec>
 8005042:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	2965      	cmp	r1, #101	@ 0x65
 800504a:	f103 33ff 	add.w	r3, r3, #4294967295
 800504e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005052:	6123      	str	r3, [r4, #16]
 8005054:	d00c      	beq.n	8005070 <_scanf_float+0x35c>
 8005056:	2945      	cmp	r1, #69	@ 0x45
 8005058:	d00a      	beq.n	8005070 <_scanf_float+0x35c>
 800505a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800505e:	463a      	mov	r2, r7
 8005060:	4640      	mov	r0, r8
 8005062:	4798      	blx	r3
 8005064:	6923      	ldr	r3, [r4, #16]
 8005066:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800506a:	3b01      	subs	r3, #1
 800506c:	1eb5      	subs	r5, r6, #2
 800506e:	6123      	str	r3, [r4, #16]
 8005070:	463a      	mov	r2, r7
 8005072:	4640      	mov	r0, r8
 8005074:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005078:	4798      	blx	r3
 800507a:	462e      	mov	r6, r5
 800507c:	6822      	ldr	r2, [r4, #0]
 800507e:	f012 0210 	ands.w	r2, r2, #16
 8005082:	d001      	beq.n	8005088 <_scanf_float+0x374>
 8005084:	2000      	movs	r0, #0
 8005086:	e68a      	b.n	8004d9e <_scanf_float+0x8a>
 8005088:	7032      	strb	r2, [r6, #0]
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005094:	d11c      	bne.n	80050d0 <_scanf_float+0x3bc>
 8005096:	9b02      	ldr	r3, [sp, #8]
 8005098:	454b      	cmp	r3, r9
 800509a:	eba3 0209 	sub.w	r2, r3, r9
 800509e:	d123      	bne.n	80050e8 <_scanf_float+0x3d4>
 80050a0:	2200      	movs	r2, #0
 80050a2:	4640      	mov	r0, r8
 80050a4:	9901      	ldr	r1, [sp, #4]
 80050a6:	f002 fc23 	bl	80078f0 <_strtod_r>
 80050aa:	9b03      	ldr	r3, [sp, #12]
 80050ac:	6825      	ldr	r5, [r4, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f015 0f02 	tst.w	r5, #2
 80050b4:	4606      	mov	r6, r0
 80050b6:	460f      	mov	r7, r1
 80050b8:	f103 0204 	add.w	r2, r3, #4
 80050bc:	d01f      	beq.n	80050fe <_scanf_float+0x3ea>
 80050be:	9903      	ldr	r1, [sp, #12]
 80050c0:	600a      	str	r2, [r1, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	e9c3 6700 	strd	r6, r7, [r3]
 80050c8:	68e3      	ldr	r3, [r4, #12]
 80050ca:	3301      	adds	r3, #1
 80050cc:	60e3      	str	r3, [r4, #12]
 80050ce:	e7d9      	b.n	8005084 <_scanf_float+0x370>
 80050d0:	9b04      	ldr	r3, [sp, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0e4      	beq.n	80050a0 <_scanf_float+0x38c>
 80050d6:	9905      	ldr	r1, [sp, #20]
 80050d8:	230a      	movs	r3, #10
 80050da:	4640      	mov	r0, r8
 80050dc:	3101      	adds	r1, #1
 80050de:	f7ff f9bb 	bl	8004458 <_strtol_r>
 80050e2:	9b04      	ldr	r3, [sp, #16]
 80050e4:	9e05      	ldr	r6, [sp, #20]
 80050e6:	1ac2      	subs	r2, r0, r3
 80050e8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80050ec:	429e      	cmp	r6, r3
 80050ee:	bf28      	it	cs
 80050f0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80050f4:	4630      	mov	r0, r6
 80050f6:	490d      	ldr	r1, [pc, #52]	@ (800512c <_scanf_float+0x418>)
 80050f8:	f000 f8de 	bl	80052b8 <siprintf>
 80050fc:	e7d0      	b.n	80050a0 <_scanf_float+0x38c>
 80050fe:	076d      	lsls	r5, r5, #29
 8005100:	d4dd      	bmi.n	80050be <_scanf_float+0x3aa>
 8005102:	9d03      	ldr	r5, [sp, #12]
 8005104:	602a      	str	r2, [r5, #0]
 8005106:	681d      	ldr	r5, [r3, #0]
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	f7fb fd32 	bl	8000b74 <__aeabi_dcmpun>
 8005110:	b120      	cbz	r0, 800511c <_scanf_float+0x408>
 8005112:	4807      	ldr	r0, [pc, #28]	@ (8005130 <_scanf_float+0x41c>)
 8005114:	f000 f9d8 	bl	80054c8 <nanf>
 8005118:	6028      	str	r0, [r5, #0]
 800511a:	e7d5      	b.n	80050c8 <_scanf_float+0x3b4>
 800511c:	4630      	mov	r0, r6
 800511e:	4639      	mov	r1, r7
 8005120:	f7fb fd86 	bl	8000c30 <__aeabi_d2f>
 8005124:	e7f8      	b.n	8005118 <_scanf_float+0x404>
 8005126:	f04f 0900 	mov.w	r9, #0
 800512a:	e62d      	b.n	8004d88 <_scanf_float+0x74>
 800512c:	0800b7a7 	.word	0x0800b7a7
 8005130:	08009b7a 	.word	0x08009b7a

08005134 <std>:
 8005134:	2300      	movs	r3, #0
 8005136:	b510      	push	{r4, lr}
 8005138:	4604      	mov	r4, r0
 800513a:	e9c0 3300 	strd	r3, r3, [r0]
 800513e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005142:	6083      	str	r3, [r0, #8]
 8005144:	8181      	strh	r1, [r0, #12]
 8005146:	6643      	str	r3, [r0, #100]	@ 0x64
 8005148:	81c2      	strh	r2, [r0, #14]
 800514a:	6183      	str	r3, [r0, #24]
 800514c:	4619      	mov	r1, r3
 800514e:	2208      	movs	r2, #8
 8005150:	305c      	adds	r0, #92	@ 0x5c
 8005152:	f000 f914 	bl	800537e <memset>
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <std+0x58>)
 8005158:	6224      	str	r4, [r4, #32]
 800515a:	6263      	str	r3, [r4, #36]	@ 0x24
 800515c:	4b0c      	ldr	r3, [pc, #48]	@ (8005190 <std+0x5c>)
 800515e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005160:	4b0c      	ldr	r3, [pc, #48]	@ (8005194 <std+0x60>)
 8005162:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005164:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <std+0x64>)
 8005166:	6323      	str	r3, [r4, #48]	@ 0x30
 8005168:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <std+0x68>)
 800516a:	429c      	cmp	r4, r3
 800516c:	d006      	beq.n	800517c <std+0x48>
 800516e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005172:	4294      	cmp	r4, r2
 8005174:	d002      	beq.n	800517c <std+0x48>
 8005176:	33d0      	adds	r3, #208	@ 0xd0
 8005178:	429c      	cmp	r4, r3
 800517a:	d105      	bne.n	8005188 <std+0x54>
 800517c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005184:	f000 b978 	b.w	8005478 <__retarget_lock_init_recursive>
 8005188:	bd10      	pop	{r4, pc}
 800518a:	bf00      	nop
 800518c:	080052f9 	.word	0x080052f9
 8005190:	0800531b 	.word	0x0800531b
 8005194:	08005353 	.word	0x08005353
 8005198:	08005377 	.word	0x08005377
 800519c:	200008d0 	.word	0x200008d0

080051a0 <stdio_exit_handler>:
 80051a0:	4a02      	ldr	r2, [pc, #8]	@ (80051ac <stdio_exit_handler+0xc>)
 80051a2:	4903      	ldr	r1, [pc, #12]	@ (80051b0 <stdio_exit_handler+0x10>)
 80051a4:	4803      	ldr	r0, [pc, #12]	@ (80051b4 <stdio_exit_handler+0x14>)
 80051a6:	f000 b869 	b.w	800527c <_fwalk_sglue>
 80051aa:	bf00      	nop
 80051ac:	20000028 	.word	0x20000028
 80051b0:	08007cad 	.word	0x08007cad
 80051b4:	20000038 	.word	0x20000038

080051b8 <cleanup_stdio>:
 80051b8:	6841      	ldr	r1, [r0, #4]
 80051ba:	4b0c      	ldr	r3, [pc, #48]	@ (80051ec <cleanup_stdio+0x34>)
 80051bc:	b510      	push	{r4, lr}
 80051be:	4299      	cmp	r1, r3
 80051c0:	4604      	mov	r4, r0
 80051c2:	d001      	beq.n	80051c8 <cleanup_stdio+0x10>
 80051c4:	f002 fd72 	bl	8007cac <_fflush_r>
 80051c8:	68a1      	ldr	r1, [r4, #8]
 80051ca:	4b09      	ldr	r3, [pc, #36]	@ (80051f0 <cleanup_stdio+0x38>)
 80051cc:	4299      	cmp	r1, r3
 80051ce:	d002      	beq.n	80051d6 <cleanup_stdio+0x1e>
 80051d0:	4620      	mov	r0, r4
 80051d2:	f002 fd6b 	bl	8007cac <_fflush_r>
 80051d6:	68e1      	ldr	r1, [r4, #12]
 80051d8:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <cleanup_stdio+0x3c>)
 80051da:	4299      	cmp	r1, r3
 80051dc:	d004      	beq.n	80051e8 <cleanup_stdio+0x30>
 80051de:	4620      	mov	r0, r4
 80051e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e4:	f002 bd62 	b.w	8007cac <_fflush_r>
 80051e8:	bd10      	pop	{r4, pc}
 80051ea:	bf00      	nop
 80051ec:	200008d0 	.word	0x200008d0
 80051f0:	20000938 	.word	0x20000938
 80051f4:	200009a0 	.word	0x200009a0

080051f8 <global_stdio_init.part.0>:
 80051f8:	b510      	push	{r4, lr}
 80051fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <global_stdio_init.part.0+0x30>)
 80051fc:	4c0b      	ldr	r4, [pc, #44]	@ (800522c <global_stdio_init.part.0+0x34>)
 80051fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005230 <global_stdio_init.part.0+0x38>)
 8005200:	4620      	mov	r0, r4
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	2104      	movs	r1, #4
 8005206:	2200      	movs	r2, #0
 8005208:	f7ff ff94 	bl	8005134 <std>
 800520c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005210:	2201      	movs	r2, #1
 8005212:	2109      	movs	r1, #9
 8005214:	f7ff ff8e 	bl	8005134 <std>
 8005218:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800521c:	2202      	movs	r2, #2
 800521e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005222:	2112      	movs	r1, #18
 8005224:	f7ff bf86 	b.w	8005134 <std>
 8005228:	20000a08 	.word	0x20000a08
 800522c:	200008d0 	.word	0x200008d0
 8005230:	080051a1 	.word	0x080051a1

08005234 <__sfp_lock_acquire>:
 8005234:	4801      	ldr	r0, [pc, #4]	@ (800523c <__sfp_lock_acquire+0x8>)
 8005236:	f000 b920 	b.w	800547a <__retarget_lock_acquire_recursive>
 800523a:	bf00      	nop
 800523c:	20000a11 	.word	0x20000a11

08005240 <__sfp_lock_release>:
 8005240:	4801      	ldr	r0, [pc, #4]	@ (8005248 <__sfp_lock_release+0x8>)
 8005242:	f000 b91b 	b.w	800547c <__retarget_lock_release_recursive>
 8005246:	bf00      	nop
 8005248:	20000a11 	.word	0x20000a11

0800524c <__sinit>:
 800524c:	b510      	push	{r4, lr}
 800524e:	4604      	mov	r4, r0
 8005250:	f7ff fff0 	bl	8005234 <__sfp_lock_acquire>
 8005254:	6a23      	ldr	r3, [r4, #32]
 8005256:	b11b      	cbz	r3, 8005260 <__sinit+0x14>
 8005258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525c:	f7ff bff0 	b.w	8005240 <__sfp_lock_release>
 8005260:	4b04      	ldr	r3, [pc, #16]	@ (8005274 <__sinit+0x28>)
 8005262:	6223      	str	r3, [r4, #32]
 8005264:	4b04      	ldr	r3, [pc, #16]	@ (8005278 <__sinit+0x2c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f5      	bne.n	8005258 <__sinit+0xc>
 800526c:	f7ff ffc4 	bl	80051f8 <global_stdio_init.part.0>
 8005270:	e7f2      	b.n	8005258 <__sinit+0xc>
 8005272:	bf00      	nop
 8005274:	080051b9 	.word	0x080051b9
 8005278:	20000a08 	.word	0x20000a08

0800527c <_fwalk_sglue>:
 800527c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005280:	4607      	mov	r7, r0
 8005282:	4688      	mov	r8, r1
 8005284:	4614      	mov	r4, r2
 8005286:	2600      	movs	r6, #0
 8005288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800528c:	f1b9 0901 	subs.w	r9, r9, #1
 8005290:	d505      	bpl.n	800529e <_fwalk_sglue+0x22>
 8005292:	6824      	ldr	r4, [r4, #0]
 8005294:	2c00      	cmp	r4, #0
 8005296:	d1f7      	bne.n	8005288 <_fwalk_sglue+0xc>
 8005298:	4630      	mov	r0, r6
 800529a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800529e:	89ab      	ldrh	r3, [r5, #12]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d907      	bls.n	80052b4 <_fwalk_sglue+0x38>
 80052a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052a8:	3301      	adds	r3, #1
 80052aa:	d003      	beq.n	80052b4 <_fwalk_sglue+0x38>
 80052ac:	4629      	mov	r1, r5
 80052ae:	4638      	mov	r0, r7
 80052b0:	47c0      	blx	r8
 80052b2:	4306      	orrs	r6, r0
 80052b4:	3568      	adds	r5, #104	@ 0x68
 80052b6:	e7e9      	b.n	800528c <_fwalk_sglue+0x10>

080052b8 <siprintf>:
 80052b8:	b40e      	push	{r1, r2, r3}
 80052ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80052be:	b500      	push	{lr}
 80052c0:	b09c      	sub	sp, #112	@ 0x70
 80052c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80052c4:	9002      	str	r0, [sp, #8]
 80052c6:	9006      	str	r0, [sp, #24]
 80052c8:	9107      	str	r1, [sp, #28]
 80052ca:	9104      	str	r1, [sp, #16]
 80052cc:	4808      	ldr	r0, [pc, #32]	@ (80052f0 <siprintf+0x38>)
 80052ce:	4909      	ldr	r1, [pc, #36]	@ (80052f4 <siprintf+0x3c>)
 80052d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052d4:	9105      	str	r1, [sp, #20]
 80052d6:	6800      	ldr	r0, [r0, #0]
 80052d8:	a902      	add	r1, sp, #8
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	f002 fb6a 	bl	80079b4 <_svfiprintf_r>
 80052e0:	2200      	movs	r2, #0
 80052e2:	9b02      	ldr	r3, [sp, #8]
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	b01c      	add	sp, #112	@ 0x70
 80052e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052ec:	b003      	add	sp, #12
 80052ee:	4770      	bx	lr
 80052f0:	20000034 	.word	0x20000034
 80052f4:	ffff0208 	.word	0xffff0208

080052f8 <__sread>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	460c      	mov	r4, r1
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	f000 f86c 	bl	80053dc <_read_r>
 8005304:	2800      	cmp	r0, #0
 8005306:	bfab      	itete	ge
 8005308:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800530a:	89a3      	ldrhlt	r3, [r4, #12]
 800530c:	181b      	addge	r3, r3, r0
 800530e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005312:	bfac      	ite	ge
 8005314:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005316:	81a3      	strhlt	r3, [r4, #12]
 8005318:	bd10      	pop	{r4, pc}

0800531a <__swrite>:
 800531a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	461f      	mov	r7, r3
 8005320:	898b      	ldrh	r3, [r1, #12]
 8005322:	4605      	mov	r5, r0
 8005324:	05db      	lsls	r3, r3, #23
 8005326:	460c      	mov	r4, r1
 8005328:	4616      	mov	r6, r2
 800532a:	d505      	bpl.n	8005338 <__swrite+0x1e>
 800532c:	2302      	movs	r3, #2
 800532e:	2200      	movs	r2, #0
 8005330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005334:	f000 f840 	bl	80053b8 <_lseek_r>
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	4632      	mov	r2, r6
 800533c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005340:	81a3      	strh	r3, [r4, #12]
 8005342:	4628      	mov	r0, r5
 8005344:	463b      	mov	r3, r7
 8005346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800534a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800534e:	f000 b857 	b.w	8005400 <_write_r>

08005352 <__sseek>:
 8005352:	b510      	push	{r4, lr}
 8005354:	460c      	mov	r4, r1
 8005356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535a:	f000 f82d 	bl	80053b8 <_lseek_r>
 800535e:	1c43      	adds	r3, r0, #1
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	bf15      	itete	ne
 8005364:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005366:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800536a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800536e:	81a3      	strheq	r3, [r4, #12]
 8005370:	bf18      	it	ne
 8005372:	81a3      	strhne	r3, [r4, #12]
 8005374:	bd10      	pop	{r4, pc}

08005376 <__sclose>:
 8005376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537a:	f000 b80d 	b.w	8005398 <_close_r>

0800537e <memset>:
 800537e:	4603      	mov	r3, r0
 8005380:	4402      	add	r2, r0
 8005382:	4293      	cmp	r3, r2
 8005384:	d100      	bne.n	8005388 <memset+0xa>
 8005386:	4770      	bx	lr
 8005388:	f803 1b01 	strb.w	r1, [r3], #1
 800538c:	e7f9      	b.n	8005382 <memset+0x4>
	...

08005390 <_localeconv_r>:
 8005390:	4800      	ldr	r0, [pc, #0]	@ (8005394 <_localeconv_r+0x4>)
 8005392:	4770      	bx	lr
 8005394:	20000174 	.word	0x20000174

08005398 <_close_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	2300      	movs	r3, #0
 800539c:	4d05      	ldr	r5, [pc, #20]	@ (80053b4 <_close_r+0x1c>)
 800539e:	4604      	mov	r4, r0
 80053a0:	4608      	mov	r0, r1
 80053a2:	602b      	str	r3, [r5, #0]
 80053a4:	f7fc feb8 	bl	8002118 <_close>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_close_r+0x1a>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_close_r+0x1a>
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	20000a0c 	.word	0x20000a0c

080053b8 <_lseek_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4604      	mov	r4, r0
 80053bc:	4608      	mov	r0, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	2200      	movs	r2, #0
 80053c2:	4d05      	ldr	r5, [pc, #20]	@ (80053d8 <_lseek_r+0x20>)
 80053c4:	602a      	str	r2, [r5, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	f7fc feb0 	bl	800212c <_lseek>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d102      	bne.n	80053d6 <_lseek_r+0x1e>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	b103      	cbz	r3, 80053d6 <_lseek_r+0x1e>
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	20000a0c 	.word	0x20000a0c

080053dc <_read_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4604      	mov	r4, r0
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	2200      	movs	r2, #0
 80053e6:	4d05      	ldr	r5, [pc, #20]	@ (80053fc <_read_r+0x20>)
 80053e8:	602a      	str	r2, [r5, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f7fc fe78 	bl	80020e0 <_read>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_read_r+0x1e>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_read_r+0x1e>
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	20000a0c 	.word	0x20000a0c

08005400 <_write_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	4611      	mov	r1, r2
 8005408:	2200      	movs	r2, #0
 800540a:	4d05      	ldr	r5, [pc, #20]	@ (8005420 <_write_r+0x20>)
 800540c:	602a      	str	r2, [r5, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	f7fc fe74 	bl	80020fc <_write>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d102      	bne.n	800541e <_write_r+0x1e>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	b103      	cbz	r3, 800541e <_write_r+0x1e>
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	20000a0c 	.word	0x20000a0c

08005424 <__errno>:
 8005424:	4b01      	ldr	r3, [pc, #4]	@ (800542c <__errno+0x8>)
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	20000034 	.word	0x20000034

08005430 <__libc_init_array>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	2600      	movs	r6, #0
 8005434:	4d0c      	ldr	r5, [pc, #48]	@ (8005468 <__libc_init_array+0x38>)
 8005436:	4c0d      	ldr	r4, [pc, #52]	@ (800546c <__libc_init_array+0x3c>)
 8005438:	1b64      	subs	r4, r4, r5
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	42a6      	cmp	r6, r4
 800543e:	d109      	bne.n	8005454 <__libc_init_array+0x24>
 8005440:	f003 faf6 	bl	8008a30 <_init>
 8005444:	2600      	movs	r6, #0
 8005446:	4d0a      	ldr	r5, [pc, #40]	@ (8005470 <__libc_init_array+0x40>)
 8005448:	4c0a      	ldr	r4, [pc, #40]	@ (8005474 <__libc_init_array+0x44>)
 800544a:	1b64      	subs	r4, r4, r5
 800544c:	10a4      	asrs	r4, r4, #2
 800544e:	42a6      	cmp	r6, r4
 8005450:	d105      	bne.n	800545e <__libc_init_array+0x2e>
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	f855 3b04 	ldr.w	r3, [r5], #4
 8005458:	4798      	blx	r3
 800545a:	3601      	adds	r6, #1
 800545c:	e7ee      	b.n	800543c <__libc_init_array+0xc>
 800545e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005462:	4798      	blx	r3
 8005464:	3601      	adds	r6, #1
 8005466:	e7f2      	b.n	800544e <__libc_init_array+0x1e>
 8005468:	0800baa0 	.word	0x0800baa0
 800546c:	0800baa0 	.word	0x0800baa0
 8005470:	0800baa0 	.word	0x0800baa0
 8005474:	0800baa4 	.word	0x0800baa4

08005478 <__retarget_lock_init_recursive>:
 8005478:	4770      	bx	lr

0800547a <__retarget_lock_acquire_recursive>:
 800547a:	4770      	bx	lr

0800547c <__retarget_lock_release_recursive>:
 800547c:	4770      	bx	lr

0800547e <strcpy>:
 800547e:	4603      	mov	r3, r0
 8005480:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005484:	f803 2b01 	strb.w	r2, [r3], #1
 8005488:	2a00      	cmp	r2, #0
 800548a:	d1f9      	bne.n	8005480 <strcpy+0x2>
 800548c:	4770      	bx	lr

0800548e <memchr>:
 800548e:	4603      	mov	r3, r0
 8005490:	b510      	push	{r4, lr}
 8005492:	b2c9      	uxtb	r1, r1
 8005494:	4402      	add	r2, r0
 8005496:	4293      	cmp	r3, r2
 8005498:	4618      	mov	r0, r3
 800549a:	d101      	bne.n	80054a0 <memchr+0x12>
 800549c:	2000      	movs	r0, #0
 800549e:	e003      	b.n	80054a8 <memchr+0x1a>
 80054a0:	7804      	ldrb	r4, [r0, #0]
 80054a2:	3301      	adds	r3, #1
 80054a4:	428c      	cmp	r4, r1
 80054a6:	d1f6      	bne.n	8005496 <memchr+0x8>
 80054a8:	bd10      	pop	{r4, pc}

080054aa <memcpy>:
 80054aa:	440a      	add	r2, r1
 80054ac:	4291      	cmp	r1, r2
 80054ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80054b2:	d100      	bne.n	80054b6 <memcpy+0xc>
 80054b4:	4770      	bx	lr
 80054b6:	b510      	push	{r4, lr}
 80054b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054bc:	4291      	cmp	r1, r2
 80054be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c2:	d1f9      	bne.n	80054b8 <memcpy+0xe>
 80054c4:	bd10      	pop	{r4, pc}
	...

080054c8 <nanf>:
 80054c8:	4800      	ldr	r0, [pc, #0]	@ (80054cc <nanf+0x4>)
 80054ca:	4770      	bx	lr
 80054cc:	7fc00000 	.word	0x7fc00000

080054d0 <__assert_func>:
 80054d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054d2:	4614      	mov	r4, r2
 80054d4:	461a      	mov	r2, r3
 80054d6:	4b09      	ldr	r3, [pc, #36]	@ (80054fc <__assert_func+0x2c>)
 80054d8:	4605      	mov	r5, r0
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68d8      	ldr	r0, [r3, #12]
 80054de:	b954      	cbnz	r4, 80054f6 <__assert_func+0x26>
 80054e0:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <__assert_func+0x30>)
 80054e2:	461c      	mov	r4, r3
 80054e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054e8:	9100      	str	r1, [sp, #0]
 80054ea:	462b      	mov	r3, r5
 80054ec:	4905      	ldr	r1, [pc, #20]	@ (8005504 <__assert_func+0x34>)
 80054ee:	f002 fc05 	bl	8007cfc <fiprintf>
 80054f2:	f002 fc57 	bl	8007da4 <abort>
 80054f6:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <__assert_func+0x38>)
 80054f8:	e7f4      	b.n	80054e4 <__assert_func+0x14>
 80054fa:	bf00      	nop
 80054fc:	20000034 	.word	0x20000034
 8005500:	08009b7a 	.word	0x08009b7a
 8005504:	0800b7b9 	.word	0x0800b7b9
 8005508:	0800b7ac 	.word	0x0800b7ac

0800550c <quorem>:
 800550c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005510:	6903      	ldr	r3, [r0, #16]
 8005512:	690c      	ldr	r4, [r1, #16]
 8005514:	4607      	mov	r7, r0
 8005516:	42a3      	cmp	r3, r4
 8005518:	db7e      	blt.n	8005618 <quorem+0x10c>
 800551a:	3c01      	subs	r4, #1
 800551c:	00a3      	lsls	r3, r4, #2
 800551e:	f100 0514 	add.w	r5, r0, #20
 8005522:	f101 0814 	add.w	r8, r1, #20
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800552c:	9301      	str	r3, [sp, #4]
 800552e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005536:	3301      	adds	r3, #1
 8005538:	429a      	cmp	r2, r3
 800553a:	fbb2 f6f3 	udiv	r6, r2, r3
 800553e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005542:	d32e      	bcc.n	80055a2 <quorem+0x96>
 8005544:	f04f 0a00 	mov.w	sl, #0
 8005548:	46c4      	mov	ip, r8
 800554a:	46ae      	mov	lr, r5
 800554c:	46d3      	mov	fp, sl
 800554e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005552:	b298      	uxth	r0, r3
 8005554:	fb06 a000 	mla	r0, r6, r0, sl
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	0c02      	lsrs	r2, r0, #16
 800555c:	fb06 2303 	mla	r3, r6, r3, r2
 8005560:	f8de 2000 	ldr.w	r2, [lr]
 8005564:	b280      	uxth	r0, r0
 8005566:	b292      	uxth	r2, r2
 8005568:	1a12      	subs	r2, r2, r0
 800556a:	445a      	add	r2, fp
 800556c:	f8de 0000 	ldr.w	r0, [lr]
 8005570:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005574:	b29b      	uxth	r3, r3
 8005576:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800557a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800557e:	b292      	uxth	r2, r2
 8005580:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005584:	45e1      	cmp	r9, ip
 8005586:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800558a:	f84e 2b04 	str.w	r2, [lr], #4
 800558e:	d2de      	bcs.n	800554e <quorem+0x42>
 8005590:	9b00      	ldr	r3, [sp, #0]
 8005592:	58eb      	ldr	r3, [r5, r3]
 8005594:	b92b      	cbnz	r3, 80055a2 <quorem+0x96>
 8005596:	9b01      	ldr	r3, [sp, #4]
 8005598:	3b04      	subs	r3, #4
 800559a:	429d      	cmp	r5, r3
 800559c:	461a      	mov	r2, r3
 800559e:	d32f      	bcc.n	8005600 <quorem+0xf4>
 80055a0:	613c      	str	r4, [r7, #16]
 80055a2:	4638      	mov	r0, r7
 80055a4:	f001 f9c4 	bl	8006930 <__mcmp>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	db25      	blt.n	80055f8 <quorem+0xec>
 80055ac:	4629      	mov	r1, r5
 80055ae:	2000      	movs	r0, #0
 80055b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80055b4:	f8d1 c000 	ldr.w	ip, [r1]
 80055b8:	fa1f fe82 	uxth.w	lr, r2
 80055bc:	fa1f f38c 	uxth.w	r3, ip
 80055c0:	eba3 030e 	sub.w	r3, r3, lr
 80055c4:	4403      	add	r3, r0
 80055c6:	0c12      	lsrs	r2, r2, #16
 80055c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055d6:	45c1      	cmp	r9, r8
 80055d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055dc:	f841 3b04 	str.w	r3, [r1], #4
 80055e0:	d2e6      	bcs.n	80055b0 <quorem+0xa4>
 80055e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ea:	b922      	cbnz	r2, 80055f6 <quorem+0xea>
 80055ec:	3b04      	subs	r3, #4
 80055ee:	429d      	cmp	r5, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	d30b      	bcc.n	800560c <quorem+0x100>
 80055f4:	613c      	str	r4, [r7, #16]
 80055f6:	3601      	adds	r6, #1
 80055f8:	4630      	mov	r0, r6
 80055fa:	b003      	add	sp, #12
 80055fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	3b04      	subs	r3, #4
 8005604:	2a00      	cmp	r2, #0
 8005606:	d1cb      	bne.n	80055a0 <quorem+0x94>
 8005608:	3c01      	subs	r4, #1
 800560a:	e7c6      	b.n	800559a <quorem+0x8e>
 800560c:	6812      	ldr	r2, [r2, #0]
 800560e:	3b04      	subs	r3, #4
 8005610:	2a00      	cmp	r2, #0
 8005612:	d1ef      	bne.n	80055f4 <quorem+0xe8>
 8005614:	3c01      	subs	r4, #1
 8005616:	e7ea      	b.n	80055ee <quorem+0xe2>
 8005618:	2000      	movs	r0, #0
 800561a:	e7ee      	b.n	80055fa <quorem+0xee>
 800561c:	0000      	movs	r0, r0
	...

08005620 <_dtoa_r>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	4614      	mov	r4, r2
 8005626:	461d      	mov	r5, r3
 8005628:	69c7      	ldr	r7, [r0, #28]
 800562a:	b097      	sub	sp, #92	@ 0x5c
 800562c:	4683      	mov	fp, r0
 800562e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005632:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005634:	b97f      	cbnz	r7, 8005656 <_dtoa_r+0x36>
 8005636:	2010      	movs	r0, #16
 8005638:	f000 fe02 	bl	8006240 <malloc>
 800563c:	4602      	mov	r2, r0
 800563e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005642:	b920      	cbnz	r0, 800564e <_dtoa_r+0x2e>
 8005644:	21ef      	movs	r1, #239	@ 0xef
 8005646:	4ba8      	ldr	r3, [pc, #672]	@ (80058e8 <_dtoa_r+0x2c8>)
 8005648:	48a8      	ldr	r0, [pc, #672]	@ (80058ec <_dtoa_r+0x2cc>)
 800564a:	f7ff ff41 	bl	80054d0 <__assert_func>
 800564e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005652:	6007      	str	r7, [r0, #0]
 8005654:	60c7      	str	r7, [r0, #12]
 8005656:	f8db 301c 	ldr.w	r3, [fp, #28]
 800565a:	6819      	ldr	r1, [r3, #0]
 800565c:	b159      	cbz	r1, 8005676 <_dtoa_r+0x56>
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	2301      	movs	r3, #1
 8005662:	4093      	lsls	r3, r2
 8005664:	604a      	str	r2, [r1, #4]
 8005666:	608b      	str	r3, [r1, #8]
 8005668:	4658      	mov	r0, fp
 800566a:	f000 fedf 	bl	800642c <_Bfree>
 800566e:	2200      	movs	r2, #0
 8005670:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	1e2b      	subs	r3, r5, #0
 8005678:	bfaf      	iteee	ge
 800567a:	2300      	movge	r3, #0
 800567c:	2201      	movlt	r2, #1
 800567e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005682:	9303      	strlt	r3, [sp, #12]
 8005684:	bfa8      	it	ge
 8005686:	6033      	strge	r3, [r6, #0]
 8005688:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800568c:	4b98      	ldr	r3, [pc, #608]	@ (80058f0 <_dtoa_r+0x2d0>)
 800568e:	bfb8      	it	lt
 8005690:	6032      	strlt	r2, [r6, #0]
 8005692:	ea33 0308 	bics.w	r3, r3, r8
 8005696:	d112      	bne.n	80056be <_dtoa_r+0x9e>
 8005698:	f242 730f 	movw	r3, #9999	@ 0x270f
 800569c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80056a4:	4323      	orrs	r3, r4
 80056a6:	f000 8550 	beq.w	800614a <_dtoa_r+0xb2a>
 80056aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80058f4 <_dtoa_r+0x2d4>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8552 	beq.w	800615a <_dtoa_r+0xb3a>
 80056b6:	f10a 0303 	add.w	r3, sl, #3
 80056ba:	f000 bd4c 	b.w	8006156 <_dtoa_r+0xb36>
 80056be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80056c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056ca:	2200      	movs	r2, #0
 80056cc:	2300      	movs	r3, #0
 80056ce:	f7fb fa1f 	bl	8000b10 <__aeabi_dcmpeq>
 80056d2:	4607      	mov	r7, r0
 80056d4:	b158      	cbz	r0, 80056ee <_dtoa_r+0xce>
 80056d6:	2301      	movs	r3, #1
 80056d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056de:	b113      	cbz	r3, 80056e6 <_dtoa_r+0xc6>
 80056e0:	4b85      	ldr	r3, [pc, #532]	@ (80058f8 <_dtoa_r+0x2d8>)
 80056e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80058fc <_dtoa_r+0x2dc>
 80056ea:	f000 bd36 	b.w	800615a <_dtoa_r+0xb3a>
 80056ee:	ab14      	add	r3, sp, #80	@ 0x50
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	ab15      	add	r3, sp, #84	@ 0x54
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	4658      	mov	r0, fp
 80056f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80056fc:	f001 fa30 	bl	8006b60 <__d2b>
 8005700:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005704:	4681      	mov	r9, r0
 8005706:	2e00      	cmp	r6, #0
 8005708:	d077      	beq.n	80057fa <_dtoa_r+0x1da>
 800570a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800570e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005710:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005718:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800571c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005720:	9712      	str	r7, [sp, #72]	@ 0x48
 8005722:	4619      	mov	r1, r3
 8005724:	2200      	movs	r2, #0
 8005726:	4b76      	ldr	r3, [pc, #472]	@ (8005900 <_dtoa_r+0x2e0>)
 8005728:	f7fa fdd2 	bl	80002d0 <__aeabi_dsub>
 800572c:	a368      	add	r3, pc, #416	@ (adr r3, 80058d0 <_dtoa_r+0x2b0>)
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f7fa ff85 	bl	8000640 <__aeabi_dmul>
 8005736:	a368      	add	r3, pc, #416	@ (adr r3, 80058d8 <_dtoa_r+0x2b8>)
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f7fa fdca 	bl	80002d4 <__adddf3>
 8005740:	4604      	mov	r4, r0
 8005742:	4630      	mov	r0, r6
 8005744:	460d      	mov	r5, r1
 8005746:	f7fa ff11 	bl	800056c <__aeabi_i2d>
 800574a:	a365      	add	r3, pc, #404	@ (adr r3, 80058e0 <_dtoa_r+0x2c0>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f7fa ff76 	bl	8000640 <__aeabi_dmul>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4620      	mov	r0, r4
 800575a:	4629      	mov	r1, r5
 800575c:	f7fa fdba 	bl	80002d4 <__adddf3>
 8005760:	4604      	mov	r4, r0
 8005762:	460d      	mov	r5, r1
 8005764:	f7fb fa1c 	bl	8000ba0 <__aeabi_d2iz>
 8005768:	2200      	movs	r2, #0
 800576a:	4607      	mov	r7, r0
 800576c:	2300      	movs	r3, #0
 800576e:	4620      	mov	r0, r4
 8005770:	4629      	mov	r1, r5
 8005772:	f7fb f9d7 	bl	8000b24 <__aeabi_dcmplt>
 8005776:	b140      	cbz	r0, 800578a <_dtoa_r+0x16a>
 8005778:	4638      	mov	r0, r7
 800577a:	f7fa fef7 	bl	800056c <__aeabi_i2d>
 800577e:	4622      	mov	r2, r4
 8005780:	462b      	mov	r3, r5
 8005782:	f7fb f9c5 	bl	8000b10 <__aeabi_dcmpeq>
 8005786:	b900      	cbnz	r0, 800578a <_dtoa_r+0x16a>
 8005788:	3f01      	subs	r7, #1
 800578a:	2f16      	cmp	r7, #22
 800578c:	d853      	bhi.n	8005836 <_dtoa_r+0x216>
 800578e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005792:	4b5c      	ldr	r3, [pc, #368]	@ (8005904 <_dtoa_r+0x2e4>)
 8005794:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fb f9c2 	bl	8000b24 <__aeabi_dcmplt>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d04a      	beq.n	800583a <_dtoa_r+0x21a>
 80057a4:	2300      	movs	r3, #0
 80057a6:	3f01      	subs	r7, #1
 80057a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80057aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057ac:	1b9b      	subs	r3, r3, r6
 80057ae:	1e5a      	subs	r2, r3, #1
 80057b0:	bf46      	itte	mi
 80057b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80057b6:	2300      	movmi	r3, #0
 80057b8:	f04f 0800 	movpl.w	r8, #0
 80057bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80057be:	bf48      	it	mi
 80057c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80057c2:	2f00      	cmp	r7, #0
 80057c4:	db3b      	blt.n	800583e <_dtoa_r+0x21e>
 80057c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80057ca:	443b      	add	r3, r7
 80057cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ce:	2300      	movs	r3, #0
 80057d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80057d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057d4:	2b09      	cmp	r3, #9
 80057d6:	d866      	bhi.n	80058a6 <_dtoa_r+0x286>
 80057d8:	2b05      	cmp	r3, #5
 80057da:	bfc4      	itt	gt
 80057dc:	3b04      	subgt	r3, #4
 80057de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80057e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057e2:	bfc8      	it	gt
 80057e4:	2400      	movgt	r4, #0
 80057e6:	f1a3 0302 	sub.w	r3, r3, #2
 80057ea:	bfd8      	it	le
 80057ec:	2401      	movle	r4, #1
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d864      	bhi.n	80058bc <_dtoa_r+0x29c>
 80057f2:	e8df f003 	tbb	[pc, r3]
 80057f6:	382b      	.short	0x382b
 80057f8:	5636      	.short	0x5636
 80057fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80057fe:	441e      	add	r6, r3
 8005800:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005804:	2b20      	cmp	r3, #32
 8005806:	bfc1      	itttt	gt
 8005808:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800580c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005810:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005814:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005818:	bfd6      	itet	le
 800581a:	f1c3 0320 	rsble	r3, r3, #32
 800581e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005822:	fa04 f003 	lslle.w	r0, r4, r3
 8005826:	f7fa fe91 	bl	800054c <__aeabi_ui2d>
 800582a:	2201      	movs	r2, #1
 800582c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005830:	3e01      	subs	r6, #1
 8005832:	9212      	str	r2, [sp, #72]	@ 0x48
 8005834:	e775      	b.n	8005722 <_dtoa_r+0x102>
 8005836:	2301      	movs	r3, #1
 8005838:	e7b6      	b.n	80057a8 <_dtoa_r+0x188>
 800583a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800583c:	e7b5      	b.n	80057aa <_dtoa_r+0x18a>
 800583e:	427b      	negs	r3, r7
 8005840:	930a      	str	r3, [sp, #40]	@ 0x28
 8005842:	2300      	movs	r3, #0
 8005844:	eba8 0807 	sub.w	r8, r8, r7
 8005848:	930e      	str	r3, [sp, #56]	@ 0x38
 800584a:	e7c2      	b.n	80057d2 <_dtoa_r+0x1b2>
 800584c:	2300      	movs	r3, #0
 800584e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005850:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005852:	2b00      	cmp	r3, #0
 8005854:	dc35      	bgt.n	80058c2 <_dtoa_r+0x2a2>
 8005856:	2301      	movs	r3, #1
 8005858:	461a      	mov	r2, r3
 800585a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800585e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005860:	e00b      	b.n	800587a <_dtoa_r+0x25a>
 8005862:	2301      	movs	r3, #1
 8005864:	e7f3      	b.n	800584e <_dtoa_r+0x22e>
 8005866:	2300      	movs	r3, #0
 8005868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800586a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	9308      	str	r3, [sp, #32]
 8005870:	3301      	adds	r3, #1
 8005872:	2b01      	cmp	r3, #1
 8005874:	9307      	str	r3, [sp, #28]
 8005876:	bfb8      	it	lt
 8005878:	2301      	movlt	r3, #1
 800587a:	2100      	movs	r1, #0
 800587c:	2204      	movs	r2, #4
 800587e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005882:	f102 0514 	add.w	r5, r2, #20
 8005886:	429d      	cmp	r5, r3
 8005888:	d91f      	bls.n	80058ca <_dtoa_r+0x2aa>
 800588a:	6041      	str	r1, [r0, #4]
 800588c:	4658      	mov	r0, fp
 800588e:	f000 fd8d 	bl	80063ac <_Balloc>
 8005892:	4682      	mov	sl, r0
 8005894:	2800      	cmp	r0, #0
 8005896:	d139      	bne.n	800590c <_dtoa_r+0x2ec>
 8005898:	4602      	mov	r2, r0
 800589a:	f240 11af 	movw	r1, #431	@ 0x1af
 800589e:	4b1a      	ldr	r3, [pc, #104]	@ (8005908 <_dtoa_r+0x2e8>)
 80058a0:	e6d2      	b.n	8005648 <_dtoa_r+0x28>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e7e0      	b.n	8005868 <_dtoa_r+0x248>
 80058a6:	2401      	movs	r4, #1
 80058a8:	2300      	movs	r3, #0
 80058aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295
 80058b2:	2200      	movs	r2, #0
 80058b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80058b8:	2312      	movs	r3, #18
 80058ba:	e7d0      	b.n	800585e <_dtoa_r+0x23e>
 80058bc:	2301      	movs	r3, #1
 80058be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058c0:	e7f5      	b.n	80058ae <_dtoa_r+0x28e>
 80058c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80058c8:	e7d7      	b.n	800587a <_dtoa_r+0x25a>
 80058ca:	3101      	adds	r1, #1
 80058cc:	0052      	lsls	r2, r2, #1
 80058ce:	e7d8      	b.n	8005882 <_dtoa_r+0x262>
 80058d0:	636f4361 	.word	0x636f4361
 80058d4:	3fd287a7 	.word	0x3fd287a7
 80058d8:	8b60c8b3 	.word	0x8b60c8b3
 80058dc:	3fc68a28 	.word	0x3fc68a28
 80058e0:	509f79fb 	.word	0x509f79fb
 80058e4:	3fd34413 	.word	0x3fd34413
 80058e8:	0800b7f5 	.word	0x0800b7f5
 80058ec:	0800b80c 	.word	0x0800b80c
 80058f0:	7ff00000 	.word	0x7ff00000
 80058f4:	0800b7f1 	.word	0x0800b7f1
 80058f8:	0800b784 	.word	0x0800b784
 80058fc:	0800b783 	.word	0x0800b783
 8005900:	3ff80000 	.word	0x3ff80000
 8005904:	0800b908 	.word	0x0800b908
 8005908:	0800b864 	.word	0x0800b864
 800590c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005910:	6018      	str	r0, [r3, #0]
 8005912:	9b07      	ldr	r3, [sp, #28]
 8005914:	2b0e      	cmp	r3, #14
 8005916:	f200 80a4 	bhi.w	8005a62 <_dtoa_r+0x442>
 800591a:	2c00      	cmp	r4, #0
 800591c:	f000 80a1 	beq.w	8005a62 <_dtoa_r+0x442>
 8005920:	2f00      	cmp	r7, #0
 8005922:	dd33      	ble.n	800598c <_dtoa_r+0x36c>
 8005924:	4b86      	ldr	r3, [pc, #536]	@ (8005b40 <_dtoa_r+0x520>)
 8005926:	f007 020f 	and.w	r2, r7, #15
 800592a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800592e:	05f8      	lsls	r0, r7, #23
 8005930:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005934:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005938:	ea4f 1427 	mov.w	r4, r7, asr #4
 800593c:	d516      	bpl.n	800596c <_dtoa_r+0x34c>
 800593e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005942:	4b80      	ldr	r3, [pc, #512]	@ (8005b44 <_dtoa_r+0x524>)
 8005944:	2603      	movs	r6, #3
 8005946:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800594a:	f7fa ffa3 	bl	8000894 <__aeabi_ddiv>
 800594e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005952:	f004 040f 	and.w	r4, r4, #15
 8005956:	4d7b      	ldr	r5, [pc, #492]	@ (8005b44 <_dtoa_r+0x524>)
 8005958:	b954      	cbnz	r4, 8005970 <_dtoa_r+0x350>
 800595a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800595e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005962:	f7fa ff97 	bl	8000894 <__aeabi_ddiv>
 8005966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800596a:	e028      	b.n	80059be <_dtoa_r+0x39e>
 800596c:	2602      	movs	r6, #2
 800596e:	e7f2      	b.n	8005956 <_dtoa_r+0x336>
 8005970:	07e1      	lsls	r1, r4, #31
 8005972:	d508      	bpl.n	8005986 <_dtoa_r+0x366>
 8005974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800597c:	f7fa fe60 	bl	8000640 <__aeabi_dmul>
 8005980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005984:	3601      	adds	r6, #1
 8005986:	1064      	asrs	r4, r4, #1
 8005988:	3508      	adds	r5, #8
 800598a:	e7e5      	b.n	8005958 <_dtoa_r+0x338>
 800598c:	f000 80d2 	beq.w	8005b34 <_dtoa_r+0x514>
 8005990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005994:	427c      	negs	r4, r7
 8005996:	4b6a      	ldr	r3, [pc, #424]	@ (8005b40 <_dtoa_r+0x520>)
 8005998:	f004 020f 	and.w	r2, r4, #15
 800599c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f7fa fe4c 	bl	8000640 <__aeabi_dmul>
 80059a8:	2602      	movs	r6, #2
 80059aa:	2300      	movs	r3, #0
 80059ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b0:	4d64      	ldr	r5, [pc, #400]	@ (8005b44 <_dtoa_r+0x524>)
 80059b2:	1124      	asrs	r4, r4, #4
 80059b4:	2c00      	cmp	r4, #0
 80059b6:	f040 80b2 	bne.w	8005b1e <_dtoa_r+0x4fe>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1d3      	bne.n	8005966 <_dtoa_r+0x346>
 80059be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80059c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80b7 	beq.w	8005b38 <_dtoa_r+0x518>
 80059ca:	2200      	movs	r2, #0
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	4b5d      	ldr	r3, [pc, #372]	@ (8005b48 <_dtoa_r+0x528>)
 80059d2:	f7fb f8a7 	bl	8000b24 <__aeabi_dcmplt>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	f000 80ae 	beq.w	8005b38 <_dtoa_r+0x518>
 80059dc:	9b07      	ldr	r3, [sp, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 80aa 	beq.w	8005b38 <_dtoa_r+0x518>
 80059e4:	9b08      	ldr	r3, [sp, #32]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dd37      	ble.n	8005a5a <_dtoa_r+0x43a>
 80059ea:	1e7b      	subs	r3, r7, #1
 80059ec:	4620      	mov	r0, r4
 80059ee:	9304      	str	r3, [sp, #16]
 80059f0:	2200      	movs	r2, #0
 80059f2:	4629      	mov	r1, r5
 80059f4:	4b55      	ldr	r3, [pc, #340]	@ (8005b4c <_dtoa_r+0x52c>)
 80059f6:	f7fa fe23 	bl	8000640 <__aeabi_dmul>
 80059fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059fe:	9c08      	ldr	r4, [sp, #32]
 8005a00:	3601      	adds	r6, #1
 8005a02:	4630      	mov	r0, r6
 8005a04:	f7fa fdb2 	bl	800056c <__aeabi_i2d>
 8005a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a0c:	f7fa fe18 	bl	8000640 <__aeabi_dmul>
 8005a10:	2200      	movs	r2, #0
 8005a12:	4b4f      	ldr	r3, [pc, #316]	@ (8005b50 <_dtoa_r+0x530>)
 8005a14:	f7fa fc5e 	bl	80002d4 <__adddf3>
 8005a18:	4605      	mov	r5, r0
 8005a1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a1e:	2c00      	cmp	r4, #0
 8005a20:	f040 809a 	bne.w	8005b58 <_dtoa_r+0x538>
 8005a24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b54 <_dtoa_r+0x534>)
 8005a2c:	f7fa fc50 	bl	80002d0 <__aeabi_dsub>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a38:	462a      	mov	r2, r5
 8005a3a:	4633      	mov	r3, r6
 8005a3c:	f7fb f890 	bl	8000b60 <__aeabi_dcmpgt>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	f040 828e 	bne.w	8005f62 <_dtoa_r+0x942>
 8005a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a4a:	462a      	mov	r2, r5
 8005a4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a50:	f7fb f868 	bl	8000b24 <__aeabi_dcmplt>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f040 8127 	bne.w	8005ca8 <_dtoa_r+0x688>
 8005a5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005a62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f2c0 8163 	blt.w	8005d30 <_dtoa_r+0x710>
 8005a6a:	2f0e      	cmp	r7, #14
 8005a6c:	f300 8160 	bgt.w	8005d30 <_dtoa_r+0x710>
 8005a70:	4b33      	ldr	r3, [pc, #204]	@ (8005b40 <_dtoa_r+0x520>)
 8005a72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	da03      	bge.n	8005a8c <_dtoa_r+0x46c>
 8005a84:	9b07      	ldr	r3, [sp, #28]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f340 8100 	ble.w	8005c8c <_dtoa_r+0x66c>
 8005a8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a90:	4656      	mov	r6, sl
 8005a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a96:	4620      	mov	r0, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f7fa fefb 	bl	8000894 <__aeabi_ddiv>
 8005a9e:	f7fb f87f 	bl	8000ba0 <__aeabi_d2iz>
 8005aa2:	4680      	mov	r8, r0
 8005aa4:	f7fa fd62 	bl	800056c <__aeabi_i2d>
 8005aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aac:	f7fa fdc8 	bl	8000640 <__aeabi_dmul>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	f7fa fc0a 	bl	80002d0 <__aeabi_dsub>
 8005abc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005ac0:	9d07      	ldr	r5, [sp, #28]
 8005ac2:	f806 4b01 	strb.w	r4, [r6], #1
 8005ac6:	eba6 040a 	sub.w	r4, r6, sl
 8005aca:	42a5      	cmp	r5, r4
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	f040 8116 	bne.w	8005d00 <_dtoa_r+0x6e0>
 8005ad4:	f7fa fbfe 	bl	80002d4 <__adddf3>
 8005ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005adc:	4604      	mov	r4, r0
 8005ade:	460d      	mov	r5, r1
 8005ae0:	f7fb f83e 	bl	8000b60 <__aeabi_dcmpgt>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	f040 80f8 	bne.w	8005cda <_dtoa_r+0x6ba>
 8005aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7fb f80d 	bl	8000b10 <__aeabi_dcmpeq>
 8005af6:	b118      	cbz	r0, 8005b00 <_dtoa_r+0x4e0>
 8005af8:	f018 0f01 	tst.w	r8, #1
 8005afc:	f040 80ed 	bne.w	8005cda <_dtoa_r+0x6ba>
 8005b00:	4649      	mov	r1, r9
 8005b02:	4658      	mov	r0, fp
 8005b04:	f000 fc92 	bl	800642c <_Bfree>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	7033      	strb	r3, [r6, #0]
 8005b0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005b0e:	3701      	adds	r7, #1
 8005b10:	601f      	str	r7, [r3, #0]
 8005b12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 8320 	beq.w	800615a <_dtoa_r+0xb3a>
 8005b1a:	601e      	str	r6, [r3, #0]
 8005b1c:	e31d      	b.n	800615a <_dtoa_r+0xb3a>
 8005b1e:	07e2      	lsls	r2, r4, #31
 8005b20:	d505      	bpl.n	8005b2e <_dtoa_r+0x50e>
 8005b22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b26:	f7fa fd8b 	bl	8000640 <__aeabi_dmul>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	3601      	adds	r6, #1
 8005b2e:	1064      	asrs	r4, r4, #1
 8005b30:	3508      	adds	r5, #8
 8005b32:	e73f      	b.n	80059b4 <_dtoa_r+0x394>
 8005b34:	2602      	movs	r6, #2
 8005b36:	e742      	b.n	80059be <_dtoa_r+0x39e>
 8005b38:	9c07      	ldr	r4, [sp, #28]
 8005b3a:	9704      	str	r7, [sp, #16]
 8005b3c:	e761      	b.n	8005a02 <_dtoa_r+0x3e2>
 8005b3e:	bf00      	nop
 8005b40:	0800b908 	.word	0x0800b908
 8005b44:	0800b8e0 	.word	0x0800b8e0
 8005b48:	3ff00000 	.word	0x3ff00000
 8005b4c:	40240000 	.word	0x40240000
 8005b50:	401c0000 	.word	0x401c0000
 8005b54:	40140000 	.word	0x40140000
 8005b58:	4b70      	ldr	r3, [pc, #448]	@ (8005d1c <_dtoa_r+0x6fc>)
 8005b5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b64:	4454      	add	r4, sl
 8005b66:	2900      	cmp	r1, #0
 8005b68:	d045      	beq.n	8005bf6 <_dtoa_r+0x5d6>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	496c      	ldr	r1, [pc, #432]	@ (8005d20 <_dtoa_r+0x700>)
 8005b6e:	f7fa fe91 	bl	8000894 <__aeabi_ddiv>
 8005b72:	4633      	mov	r3, r6
 8005b74:	462a      	mov	r2, r5
 8005b76:	f7fa fbab 	bl	80002d0 <__aeabi_dsub>
 8005b7a:	4656      	mov	r6, sl
 8005b7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b84:	f7fb f80c 	bl	8000ba0 <__aeabi_d2iz>
 8005b88:	4605      	mov	r5, r0
 8005b8a:	f7fa fcef 	bl	800056c <__aeabi_i2d>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b96:	f7fa fb9b 	bl	80002d0 <__aeabi_dsub>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	3530      	adds	r5, #48	@ 0x30
 8005ba0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ba4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ba8:	f806 5b01 	strb.w	r5, [r6], #1
 8005bac:	f7fa ffba 	bl	8000b24 <__aeabi_dcmplt>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d163      	bne.n	8005c7c <_dtoa_r+0x65c>
 8005bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bb8:	2000      	movs	r0, #0
 8005bba:	495a      	ldr	r1, [pc, #360]	@ (8005d24 <_dtoa_r+0x704>)
 8005bbc:	f7fa fb88 	bl	80002d0 <__aeabi_dsub>
 8005bc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bc4:	f7fa ffae 	bl	8000b24 <__aeabi_dcmplt>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	f040 8087 	bne.w	8005cdc <_dtoa_r+0x6bc>
 8005bce:	42a6      	cmp	r6, r4
 8005bd0:	f43f af43 	beq.w	8005a5a <_dtoa_r+0x43a>
 8005bd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005bd8:	2200      	movs	r2, #0
 8005bda:	4b53      	ldr	r3, [pc, #332]	@ (8005d28 <_dtoa_r+0x708>)
 8005bdc:	f7fa fd30 	bl	8000640 <__aeabi_dmul>
 8005be0:	2200      	movs	r2, #0
 8005be2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bea:	4b4f      	ldr	r3, [pc, #316]	@ (8005d28 <_dtoa_r+0x708>)
 8005bec:	f7fa fd28 	bl	8000640 <__aeabi_dmul>
 8005bf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bf4:	e7c4      	b.n	8005b80 <_dtoa_r+0x560>
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	f7fa fd21 	bl	8000640 <__aeabi_dmul>
 8005bfe:	4656      	mov	r6, sl
 8005c00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c04:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c0a:	f7fa ffc9 	bl	8000ba0 <__aeabi_d2iz>
 8005c0e:	4605      	mov	r5, r0
 8005c10:	f7fa fcac 	bl	800056c <__aeabi_i2d>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c1c:	f7fa fb58 	bl	80002d0 <__aeabi_dsub>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	3530      	adds	r5, #48	@ 0x30
 8005c26:	f806 5b01 	strb.w	r5, [r6], #1
 8005c2a:	42a6      	cmp	r6, r4
 8005c2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	d124      	bne.n	8005c80 <_dtoa_r+0x660>
 8005c36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c3a:	4b39      	ldr	r3, [pc, #228]	@ (8005d20 <_dtoa_r+0x700>)
 8005c3c:	f7fa fb4a 	bl	80002d4 <__adddf3>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c48:	f7fa ff8a 	bl	8000b60 <__aeabi_dcmpgt>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d145      	bne.n	8005cdc <_dtoa_r+0x6bc>
 8005c50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c54:	2000      	movs	r0, #0
 8005c56:	4932      	ldr	r1, [pc, #200]	@ (8005d20 <_dtoa_r+0x700>)
 8005c58:	f7fa fb3a 	bl	80002d0 <__aeabi_dsub>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c64:	f7fa ff5e 	bl	8000b24 <__aeabi_dcmplt>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	f43f aef6 	beq.w	8005a5a <_dtoa_r+0x43a>
 8005c6e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c70:	1e73      	subs	r3, r6, #1
 8005c72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c78:	2b30      	cmp	r3, #48	@ 0x30
 8005c7a:	d0f8      	beq.n	8005c6e <_dtoa_r+0x64e>
 8005c7c:	9f04      	ldr	r7, [sp, #16]
 8005c7e:	e73f      	b.n	8005b00 <_dtoa_r+0x4e0>
 8005c80:	4b29      	ldr	r3, [pc, #164]	@ (8005d28 <_dtoa_r+0x708>)
 8005c82:	f7fa fcdd 	bl	8000640 <__aeabi_dmul>
 8005c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c8a:	e7bc      	b.n	8005c06 <_dtoa_r+0x5e6>
 8005c8c:	d10c      	bne.n	8005ca8 <_dtoa_r+0x688>
 8005c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c92:	2200      	movs	r2, #0
 8005c94:	4b25      	ldr	r3, [pc, #148]	@ (8005d2c <_dtoa_r+0x70c>)
 8005c96:	f7fa fcd3 	bl	8000640 <__aeabi_dmul>
 8005c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c9e:	f7fa ff55 	bl	8000b4c <__aeabi_dcmpge>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	f000 815b 	beq.w	8005f5e <_dtoa_r+0x93e>
 8005ca8:	2400      	movs	r4, #0
 8005caa:	4625      	mov	r5, r4
 8005cac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cae:	4656      	mov	r6, sl
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	9304      	str	r3, [sp, #16]
 8005cb4:	2700      	movs	r7, #0
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	4658      	mov	r0, fp
 8005cba:	f000 fbb7 	bl	800642c <_Bfree>
 8005cbe:	2d00      	cmp	r5, #0
 8005cc0:	d0dc      	beq.n	8005c7c <_dtoa_r+0x65c>
 8005cc2:	b12f      	cbz	r7, 8005cd0 <_dtoa_r+0x6b0>
 8005cc4:	42af      	cmp	r7, r5
 8005cc6:	d003      	beq.n	8005cd0 <_dtoa_r+0x6b0>
 8005cc8:	4639      	mov	r1, r7
 8005cca:	4658      	mov	r0, fp
 8005ccc:	f000 fbae 	bl	800642c <_Bfree>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4658      	mov	r0, fp
 8005cd4:	f000 fbaa 	bl	800642c <_Bfree>
 8005cd8:	e7d0      	b.n	8005c7c <_dtoa_r+0x65c>
 8005cda:	9704      	str	r7, [sp, #16]
 8005cdc:	4633      	mov	r3, r6
 8005cde:	461e      	mov	r6, r3
 8005ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ce4:	2a39      	cmp	r2, #57	@ 0x39
 8005ce6:	d107      	bne.n	8005cf8 <_dtoa_r+0x6d8>
 8005ce8:	459a      	cmp	sl, r3
 8005cea:	d1f8      	bne.n	8005cde <_dtoa_r+0x6be>
 8005cec:	9a04      	ldr	r2, [sp, #16]
 8005cee:	3201      	adds	r2, #1
 8005cf0:	9204      	str	r2, [sp, #16]
 8005cf2:	2230      	movs	r2, #48	@ 0x30
 8005cf4:	f88a 2000 	strb.w	r2, [sl]
 8005cf8:	781a      	ldrb	r2, [r3, #0]
 8005cfa:	3201      	adds	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	e7bd      	b.n	8005c7c <_dtoa_r+0x65c>
 8005d00:	2200      	movs	r2, #0
 8005d02:	4b09      	ldr	r3, [pc, #36]	@ (8005d28 <_dtoa_r+0x708>)
 8005d04:	f7fa fc9c 	bl	8000640 <__aeabi_dmul>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	460d      	mov	r5, r1
 8005d10:	f7fa fefe 	bl	8000b10 <__aeabi_dcmpeq>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	f43f aebc 	beq.w	8005a92 <_dtoa_r+0x472>
 8005d1a:	e6f1      	b.n	8005b00 <_dtoa_r+0x4e0>
 8005d1c:	0800b908 	.word	0x0800b908
 8005d20:	3fe00000 	.word	0x3fe00000
 8005d24:	3ff00000 	.word	0x3ff00000
 8005d28:	40240000 	.word	0x40240000
 8005d2c:	40140000 	.word	0x40140000
 8005d30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d32:	2a00      	cmp	r2, #0
 8005d34:	f000 80db 	beq.w	8005eee <_dtoa_r+0x8ce>
 8005d38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d3a:	2a01      	cmp	r2, #1
 8005d3c:	f300 80bf 	bgt.w	8005ebe <_dtoa_r+0x89e>
 8005d40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	f000 80b7 	beq.w	8005eb6 <_dtoa_r+0x896>
 8005d48:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d4c:	4646      	mov	r6, r8
 8005d4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d52:	2101      	movs	r1, #1
 8005d54:	441a      	add	r2, r3
 8005d56:	4658      	mov	r0, fp
 8005d58:	4498      	add	r8, r3
 8005d5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d5c:	f000 fc64 	bl	8006628 <__i2b>
 8005d60:	4605      	mov	r5, r0
 8005d62:	b15e      	cbz	r6, 8005d7c <_dtoa_r+0x75c>
 8005d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	dd08      	ble.n	8005d7c <_dtoa_r+0x75c>
 8005d6a:	42b3      	cmp	r3, r6
 8005d6c:	bfa8      	it	ge
 8005d6e:	4633      	movge	r3, r6
 8005d70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d72:	eba8 0803 	sub.w	r8, r8, r3
 8005d76:	1af6      	subs	r6, r6, r3
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d7e:	b1f3      	cbz	r3, 8005dbe <_dtoa_r+0x79e>
 8005d80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 80b7 	beq.w	8005ef6 <_dtoa_r+0x8d6>
 8005d88:	b18c      	cbz	r4, 8005dae <_dtoa_r+0x78e>
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	4658      	mov	r0, fp
 8005d90:	f000 fd08 	bl	80067a4 <__pow5mult>
 8005d94:	464a      	mov	r2, r9
 8005d96:	4601      	mov	r1, r0
 8005d98:	4605      	mov	r5, r0
 8005d9a:	4658      	mov	r0, fp
 8005d9c:	f000 fc5a 	bl	8006654 <__multiply>
 8005da0:	4649      	mov	r1, r9
 8005da2:	9004      	str	r0, [sp, #16]
 8005da4:	4658      	mov	r0, fp
 8005da6:	f000 fb41 	bl	800642c <_Bfree>
 8005daa:	9b04      	ldr	r3, [sp, #16]
 8005dac:	4699      	mov	r9, r3
 8005dae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005db0:	1b1a      	subs	r2, r3, r4
 8005db2:	d004      	beq.n	8005dbe <_dtoa_r+0x79e>
 8005db4:	4649      	mov	r1, r9
 8005db6:	4658      	mov	r0, fp
 8005db8:	f000 fcf4 	bl	80067a4 <__pow5mult>
 8005dbc:	4681      	mov	r9, r0
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	4658      	mov	r0, fp
 8005dc2:	f000 fc31 	bl	8006628 <__i2b>
 8005dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dc8:	4604      	mov	r4, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 81c9 	beq.w	8006162 <_dtoa_r+0xb42>
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4601      	mov	r1, r0
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	f000 fce5 	bl	80067a4 <__pow5mult>
 8005dda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ddc:	4604      	mov	r4, r0
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	f300 808f 	bgt.w	8005f02 <_dtoa_r+0x8e2>
 8005de4:	9b02      	ldr	r3, [sp, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 8087 	bne.w	8005efa <_dtoa_r+0x8da>
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f040 8083 	bne.w	8005efe <_dtoa_r+0x8de>
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dfe:	0d1b      	lsrs	r3, r3, #20
 8005e00:	051b      	lsls	r3, r3, #20
 8005e02:	b12b      	cbz	r3, 8005e10 <_dtoa_r+0x7f0>
 8005e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e06:	f108 0801 	add.w	r8, r8, #1
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e0e:	2301      	movs	r3, #1
 8005e10:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 81aa 	beq.w	800616e <_dtoa_r+0xb4e>
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e20:	6918      	ldr	r0, [r3, #16]
 8005e22:	f000 fbb5 	bl	8006590 <__hi0bits>
 8005e26:	f1c0 0020 	rsb	r0, r0, #32
 8005e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e2c:	4418      	add	r0, r3
 8005e2e:	f010 001f 	ands.w	r0, r0, #31
 8005e32:	d071      	beq.n	8005f18 <_dtoa_r+0x8f8>
 8005e34:	f1c0 0320 	rsb	r3, r0, #32
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	dd65      	ble.n	8005f08 <_dtoa_r+0x8e8>
 8005e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e3e:	f1c0 001c 	rsb	r0, r0, #28
 8005e42:	4403      	add	r3, r0
 8005e44:	4480      	add	r8, r0
 8005e46:	4406      	add	r6, r0
 8005e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e4a:	f1b8 0f00 	cmp.w	r8, #0
 8005e4e:	dd05      	ble.n	8005e5c <_dtoa_r+0x83c>
 8005e50:	4649      	mov	r1, r9
 8005e52:	4642      	mov	r2, r8
 8005e54:	4658      	mov	r0, fp
 8005e56:	f000 fcff 	bl	8006858 <__lshift>
 8005e5a:	4681      	mov	r9, r0
 8005e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	dd05      	ble.n	8005e6e <_dtoa_r+0x84e>
 8005e62:	4621      	mov	r1, r4
 8005e64:	461a      	mov	r2, r3
 8005e66:	4658      	mov	r0, fp
 8005e68:	f000 fcf6 	bl	8006858 <__lshift>
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d053      	beq.n	8005f1c <_dtoa_r+0x8fc>
 8005e74:	4621      	mov	r1, r4
 8005e76:	4648      	mov	r0, r9
 8005e78:	f000 fd5a 	bl	8006930 <__mcmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	da4d      	bge.n	8005f1c <_dtoa_r+0x8fc>
 8005e80:	1e7b      	subs	r3, r7, #1
 8005e82:	4649      	mov	r1, r9
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	220a      	movs	r2, #10
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4658      	mov	r0, fp
 8005e8c:	f000 faf0 	bl	8006470 <__multadd>
 8005e90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e92:	4681      	mov	r9, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 816c 	beq.w	8006172 <_dtoa_r+0xb52>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	220a      	movs	r2, #10
 8005ea0:	4658      	mov	r0, fp
 8005ea2:	f000 fae5 	bl	8006470 <__multadd>
 8005ea6:	9b08      	ldr	r3, [sp, #32]
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	dc61      	bgt.n	8005f72 <_dtoa_r+0x952>
 8005eae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	dc3b      	bgt.n	8005f2c <_dtoa_r+0x90c>
 8005eb4:	e05d      	b.n	8005f72 <_dtoa_r+0x952>
 8005eb6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005eb8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005ebc:	e746      	b.n	8005d4c <_dtoa_r+0x72c>
 8005ebe:	9b07      	ldr	r3, [sp, #28]
 8005ec0:	1e5c      	subs	r4, r3, #1
 8005ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	bfbf      	itttt	lt
 8005ec8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005eca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005ecc:	1ae3      	sublt	r3, r4, r3
 8005ece:	18d2      	addlt	r2, r2, r3
 8005ed0:	bfa8      	it	ge
 8005ed2:	1b1c      	subge	r4, r3, r4
 8005ed4:	9b07      	ldr	r3, [sp, #28]
 8005ed6:	bfbe      	ittt	lt
 8005ed8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005eda:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005edc:	2400      	movlt	r4, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfb5      	itete	lt
 8005ee2:	eba8 0603 	sublt.w	r6, r8, r3
 8005ee6:	4646      	movge	r6, r8
 8005ee8:	2300      	movlt	r3, #0
 8005eea:	9b07      	ldrge	r3, [sp, #28]
 8005eec:	e730      	b.n	8005d50 <_dtoa_r+0x730>
 8005eee:	4646      	mov	r6, r8
 8005ef0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ef2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005ef4:	e735      	b.n	8005d62 <_dtoa_r+0x742>
 8005ef6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ef8:	e75c      	b.n	8005db4 <_dtoa_r+0x794>
 8005efa:	2300      	movs	r3, #0
 8005efc:	e788      	b.n	8005e10 <_dtoa_r+0x7f0>
 8005efe:	9b02      	ldr	r3, [sp, #8]
 8005f00:	e786      	b.n	8005e10 <_dtoa_r+0x7f0>
 8005f02:	2300      	movs	r3, #0
 8005f04:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f06:	e788      	b.n	8005e1a <_dtoa_r+0x7fa>
 8005f08:	d09f      	beq.n	8005e4a <_dtoa_r+0x82a>
 8005f0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f0c:	331c      	adds	r3, #28
 8005f0e:	441a      	add	r2, r3
 8005f10:	4498      	add	r8, r3
 8005f12:	441e      	add	r6, r3
 8005f14:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f16:	e798      	b.n	8005e4a <_dtoa_r+0x82a>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	e7f6      	b.n	8005f0a <_dtoa_r+0x8ea>
 8005f1c:	9b07      	ldr	r3, [sp, #28]
 8005f1e:	9704      	str	r7, [sp, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	dc20      	bgt.n	8005f66 <_dtoa_r+0x946>
 8005f24:	9308      	str	r3, [sp, #32]
 8005f26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	dd1e      	ble.n	8005f6a <_dtoa_r+0x94a>
 8005f2c:	9b08      	ldr	r3, [sp, #32]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f47f aebc 	bne.w	8005cac <_dtoa_r+0x68c>
 8005f34:	4621      	mov	r1, r4
 8005f36:	2205      	movs	r2, #5
 8005f38:	4658      	mov	r0, fp
 8005f3a:	f000 fa99 	bl	8006470 <__multadd>
 8005f3e:	4601      	mov	r1, r0
 8005f40:	4604      	mov	r4, r0
 8005f42:	4648      	mov	r0, r9
 8005f44:	f000 fcf4 	bl	8006930 <__mcmp>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f77f aeaf 	ble.w	8005cac <_dtoa_r+0x68c>
 8005f4e:	2331      	movs	r3, #49	@ 0x31
 8005f50:	4656      	mov	r6, sl
 8005f52:	f806 3b01 	strb.w	r3, [r6], #1
 8005f56:	9b04      	ldr	r3, [sp, #16]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	9304      	str	r3, [sp, #16]
 8005f5c:	e6aa      	b.n	8005cb4 <_dtoa_r+0x694>
 8005f5e:	9c07      	ldr	r4, [sp, #28]
 8005f60:	9704      	str	r7, [sp, #16]
 8005f62:	4625      	mov	r5, r4
 8005f64:	e7f3      	b.n	8005f4e <_dtoa_r+0x92e>
 8005f66:	9b07      	ldr	r3, [sp, #28]
 8005f68:	9308      	str	r3, [sp, #32]
 8005f6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8104 	beq.w	800617a <_dtoa_r+0xb5a>
 8005f72:	2e00      	cmp	r6, #0
 8005f74:	dd05      	ble.n	8005f82 <_dtoa_r+0x962>
 8005f76:	4629      	mov	r1, r5
 8005f78:	4632      	mov	r2, r6
 8005f7a:	4658      	mov	r0, fp
 8005f7c:	f000 fc6c 	bl	8006858 <__lshift>
 8005f80:	4605      	mov	r5, r0
 8005f82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d05a      	beq.n	800603e <_dtoa_r+0xa1e>
 8005f88:	4658      	mov	r0, fp
 8005f8a:	6869      	ldr	r1, [r5, #4]
 8005f8c:	f000 fa0e 	bl	80063ac <_Balloc>
 8005f90:	4606      	mov	r6, r0
 8005f92:	b928      	cbnz	r0, 8005fa0 <_dtoa_r+0x980>
 8005f94:	4602      	mov	r2, r0
 8005f96:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f9a:	4b83      	ldr	r3, [pc, #524]	@ (80061a8 <_dtoa_r+0xb88>)
 8005f9c:	f7ff bb54 	b.w	8005648 <_dtoa_r+0x28>
 8005fa0:	692a      	ldr	r2, [r5, #16]
 8005fa2:	f105 010c 	add.w	r1, r5, #12
 8005fa6:	3202      	adds	r2, #2
 8005fa8:	0092      	lsls	r2, r2, #2
 8005faa:	300c      	adds	r0, #12
 8005fac:	f7ff fa7d 	bl	80054aa <memcpy>
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4658      	mov	r0, fp
 8005fb6:	f000 fc4f 	bl	8006858 <__lshift>
 8005fba:	462f      	mov	r7, r5
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	f10a 0301 	add.w	r3, sl, #1
 8005fc2:	9307      	str	r3, [sp, #28]
 8005fc4:	9b08      	ldr	r3, [sp, #32]
 8005fc6:	4453      	add	r3, sl
 8005fc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fca:	9b02      	ldr	r3, [sp, #8]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fd2:	9b07      	ldr	r3, [sp, #28]
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	4648      	mov	r0, r9
 8005fda:	9302      	str	r3, [sp, #8]
 8005fdc:	f7ff fa96 	bl	800550c <quorem>
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	9008      	str	r0, [sp, #32]
 8005fe4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005fe8:	4648      	mov	r0, r9
 8005fea:	f000 fca1 	bl	8006930 <__mcmp>
 8005fee:	462a      	mov	r2, r5
 8005ff0:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4658      	mov	r0, fp
 8005ff6:	f000 fcb7 	bl	8006968 <__mdiff>
 8005ffa:	68c2      	ldr	r2, [r0, #12]
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	bb02      	cbnz	r2, 8006042 <_dtoa_r+0xa22>
 8006000:	4601      	mov	r1, r0
 8006002:	4648      	mov	r0, r9
 8006004:	f000 fc94 	bl	8006930 <__mcmp>
 8006008:	4602      	mov	r2, r0
 800600a:	4631      	mov	r1, r6
 800600c:	4658      	mov	r0, fp
 800600e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006010:	f000 fa0c 	bl	800642c <_Bfree>
 8006014:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006016:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006018:	9e07      	ldr	r6, [sp, #28]
 800601a:	ea43 0102 	orr.w	r1, r3, r2
 800601e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006020:	4319      	orrs	r1, r3
 8006022:	d110      	bne.n	8006046 <_dtoa_r+0xa26>
 8006024:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006028:	d029      	beq.n	800607e <_dtoa_r+0xa5e>
 800602a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	dd02      	ble.n	8006036 <_dtoa_r+0xa16>
 8006030:	9b08      	ldr	r3, [sp, #32]
 8006032:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006036:	9b02      	ldr	r3, [sp, #8]
 8006038:	f883 8000 	strb.w	r8, [r3]
 800603c:	e63b      	b.n	8005cb6 <_dtoa_r+0x696>
 800603e:	4628      	mov	r0, r5
 8006040:	e7bb      	b.n	8005fba <_dtoa_r+0x99a>
 8006042:	2201      	movs	r2, #1
 8006044:	e7e1      	b.n	800600a <_dtoa_r+0x9ea>
 8006046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	db04      	blt.n	8006056 <_dtoa_r+0xa36>
 800604c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800604e:	430b      	orrs	r3, r1
 8006050:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006052:	430b      	orrs	r3, r1
 8006054:	d120      	bne.n	8006098 <_dtoa_r+0xa78>
 8006056:	2a00      	cmp	r2, #0
 8006058:	dded      	ble.n	8006036 <_dtoa_r+0xa16>
 800605a:	4649      	mov	r1, r9
 800605c:	2201      	movs	r2, #1
 800605e:	4658      	mov	r0, fp
 8006060:	f000 fbfa 	bl	8006858 <__lshift>
 8006064:	4621      	mov	r1, r4
 8006066:	4681      	mov	r9, r0
 8006068:	f000 fc62 	bl	8006930 <__mcmp>
 800606c:	2800      	cmp	r0, #0
 800606e:	dc03      	bgt.n	8006078 <_dtoa_r+0xa58>
 8006070:	d1e1      	bne.n	8006036 <_dtoa_r+0xa16>
 8006072:	f018 0f01 	tst.w	r8, #1
 8006076:	d0de      	beq.n	8006036 <_dtoa_r+0xa16>
 8006078:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800607c:	d1d8      	bne.n	8006030 <_dtoa_r+0xa10>
 800607e:	2339      	movs	r3, #57	@ 0x39
 8006080:	9a02      	ldr	r2, [sp, #8]
 8006082:	7013      	strb	r3, [r2, #0]
 8006084:	4633      	mov	r3, r6
 8006086:	461e      	mov	r6, r3
 8006088:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800608c:	3b01      	subs	r3, #1
 800608e:	2a39      	cmp	r2, #57	@ 0x39
 8006090:	d052      	beq.n	8006138 <_dtoa_r+0xb18>
 8006092:	3201      	adds	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e60e      	b.n	8005cb6 <_dtoa_r+0x696>
 8006098:	2a00      	cmp	r2, #0
 800609a:	dd07      	ble.n	80060ac <_dtoa_r+0xa8c>
 800609c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060a0:	d0ed      	beq.n	800607e <_dtoa_r+0xa5e>
 80060a2:	9a02      	ldr	r2, [sp, #8]
 80060a4:	f108 0301 	add.w	r3, r8, #1
 80060a8:	7013      	strb	r3, [r2, #0]
 80060aa:	e604      	b.n	8005cb6 <_dtoa_r+0x696>
 80060ac:	9b07      	ldr	r3, [sp, #28]
 80060ae:	9a07      	ldr	r2, [sp, #28]
 80060b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80060b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d028      	beq.n	800610c <_dtoa_r+0xaec>
 80060ba:	4649      	mov	r1, r9
 80060bc:	2300      	movs	r3, #0
 80060be:	220a      	movs	r2, #10
 80060c0:	4658      	mov	r0, fp
 80060c2:	f000 f9d5 	bl	8006470 <__multadd>
 80060c6:	42af      	cmp	r7, r5
 80060c8:	4681      	mov	r9, r0
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	f04f 020a 	mov.w	r2, #10
 80060d2:	4639      	mov	r1, r7
 80060d4:	4658      	mov	r0, fp
 80060d6:	d107      	bne.n	80060e8 <_dtoa_r+0xac8>
 80060d8:	f000 f9ca 	bl	8006470 <__multadd>
 80060dc:	4607      	mov	r7, r0
 80060de:	4605      	mov	r5, r0
 80060e0:	9b07      	ldr	r3, [sp, #28]
 80060e2:	3301      	adds	r3, #1
 80060e4:	9307      	str	r3, [sp, #28]
 80060e6:	e774      	b.n	8005fd2 <_dtoa_r+0x9b2>
 80060e8:	f000 f9c2 	bl	8006470 <__multadd>
 80060ec:	4629      	mov	r1, r5
 80060ee:	4607      	mov	r7, r0
 80060f0:	2300      	movs	r3, #0
 80060f2:	220a      	movs	r2, #10
 80060f4:	4658      	mov	r0, fp
 80060f6:	f000 f9bb 	bl	8006470 <__multadd>
 80060fa:	4605      	mov	r5, r0
 80060fc:	e7f0      	b.n	80060e0 <_dtoa_r+0xac0>
 80060fe:	9b08      	ldr	r3, [sp, #32]
 8006100:	2700      	movs	r7, #0
 8006102:	2b00      	cmp	r3, #0
 8006104:	bfcc      	ite	gt
 8006106:	461e      	movgt	r6, r3
 8006108:	2601      	movle	r6, #1
 800610a:	4456      	add	r6, sl
 800610c:	4649      	mov	r1, r9
 800610e:	2201      	movs	r2, #1
 8006110:	4658      	mov	r0, fp
 8006112:	f000 fba1 	bl	8006858 <__lshift>
 8006116:	4621      	mov	r1, r4
 8006118:	4681      	mov	r9, r0
 800611a:	f000 fc09 	bl	8006930 <__mcmp>
 800611e:	2800      	cmp	r0, #0
 8006120:	dcb0      	bgt.n	8006084 <_dtoa_r+0xa64>
 8006122:	d102      	bne.n	800612a <_dtoa_r+0xb0a>
 8006124:	f018 0f01 	tst.w	r8, #1
 8006128:	d1ac      	bne.n	8006084 <_dtoa_r+0xa64>
 800612a:	4633      	mov	r3, r6
 800612c:	461e      	mov	r6, r3
 800612e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006132:	2a30      	cmp	r2, #48	@ 0x30
 8006134:	d0fa      	beq.n	800612c <_dtoa_r+0xb0c>
 8006136:	e5be      	b.n	8005cb6 <_dtoa_r+0x696>
 8006138:	459a      	cmp	sl, r3
 800613a:	d1a4      	bne.n	8006086 <_dtoa_r+0xa66>
 800613c:	9b04      	ldr	r3, [sp, #16]
 800613e:	3301      	adds	r3, #1
 8006140:	9304      	str	r3, [sp, #16]
 8006142:	2331      	movs	r3, #49	@ 0x31
 8006144:	f88a 3000 	strb.w	r3, [sl]
 8006148:	e5b5      	b.n	8005cb6 <_dtoa_r+0x696>
 800614a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800614c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80061ac <_dtoa_r+0xb8c>
 8006150:	b11b      	cbz	r3, 800615a <_dtoa_r+0xb3a>
 8006152:	f10a 0308 	add.w	r3, sl, #8
 8006156:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	4650      	mov	r0, sl
 800615c:	b017      	add	sp, #92	@ 0x5c
 800615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006162:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006164:	2b01      	cmp	r3, #1
 8006166:	f77f ae3d 	ble.w	8005de4 <_dtoa_r+0x7c4>
 800616a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800616c:	930a      	str	r3, [sp, #40]	@ 0x28
 800616e:	2001      	movs	r0, #1
 8006170:	e65b      	b.n	8005e2a <_dtoa_r+0x80a>
 8006172:	9b08      	ldr	r3, [sp, #32]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f77f aed6 	ble.w	8005f26 <_dtoa_r+0x906>
 800617a:	4656      	mov	r6, sl
 800617c:	4621      	mov	r1, r4
 800617e:	4648      	mov	r0, r9
 8006180:	f7ff f9c4 	bl	800550c <quorem>
 8006184:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006188:	9b08      	ldr	r3, [sp, #32]
 800618a:	f806 8b01 	strb.w	r8, [r6], #1
 800618e:	eba6 020a 	sub.w	r2, r6, sl
 8006192:	4293      	cmp	r3, r2
 8006194:	ddb3      	ble.n	80060fe <_dtoa_r+0xade>
 8006196:	4649      	mov	r1, r9
 8006198:	2300      	movs	r3, #0
 800619a:	220a      	movs	r2, #10
 800619c:	4658      	mov	r0, fp
 800619e:	f000 f967 	bl	8006470 <__multadd>
 80061a2:	4681      	mov	r9, r0
 80061a4:	e7ea      	b.n	800617c <_dtoa_r+0xb5c>
 80061a6:	bf00      	nop
 80061a8:	0800b864 	.word	0x0800b864
 80061ac:	0800b7e8 	.word	0x0800b7e8

080061b0 <_free_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4605      	mov	r5, r0
 80061b4:	2900      	cmp	r1, #0
 80061b6:	d040      	beq.n	800623a <_free_r+0x8a>
 80061b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061bc:	1f0c      	subs	r4, r1, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bfb8      	it	lt
 80061c2:	18e4      	addlt	r4, r4, r3
 80061c4:	f000 f8e6 	bl	8006394 <__malloc_lock>
 80061c8:	4a1c      	ldr	r2, [pc, #112]	@ (800623c <_free_r+0x8c>)
 80061ca:	6813      	ldr	r3, [r2, #0]
 80061cc:	b933      	cbnz	r3, 80061dc <_free_r+0x2c>
 80061ce:	6063      	str	r3, [r4, #4]
 80061d0:	6014      	str	r4, [r2, #0]
 80061d2:	4628      	mov	r0, r5
 80061d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061d8:	f000 b8e2 	b.w	80063a0 <__malloc_unlock>
 80061dc:	42a3      	cmp	r3, r4
 80061de:	d908      	bls.n	80061f2 <_free_r+0x42>
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	1821      	adds	r1, r4, r0
 80061e4:	428b      	cmp	r3, r1
 80061e6:	bf01      	itttt	eq
 80061e8:	6819      	ldreq	r1, [r3, #0]
 80061ea:	685b      	ldreq	r3, [r3, #4]
 80061ec:	1809      	addeq	r1, r1, r0
 80061ee:	6021      	streq	r1, [r4, #0]
 80061f0:	e7ed      	b.n	80061ce <_free_r+0x1e>
 80061f2:	461a      	mov	r2, r3
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	b10b      	cbz	r3, 80061fc <_free_r+0x4c>
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	d9fa      	bls.n	80061f2 <_free_r+0x42>
 80061fc:	6811      	ldr	r1, [r2, #0]
 80061fe:	1850      	adds	r0, r2, r1
 8006200:	42a0      	cmp	r0, r4
 8006202:	d10b      	bne.n	800621c <_free_r+0x6c>
 8006204:	6820      	ldr	r0, [r4, #0]
 8006206:	4401      	add	r1, r0
 8006208:	1850      	adds	r0, r2, r1
 800620a:	4283      	cmp	r3, r0
 800620c:	6011      	str	r1, [r2, #0]
 800620e:	d1e0      	bne.n	80061d2 <_free_r+0x22>
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4408      	add	r0, r1
 8006216:	6010      	str	r0, [r2, #0]
 8006218:	6053      	str	r3, [r2, #4]
 800621a:	e7da      	b.n	80061d2 <_free_r+0x22>
 800621c:	d902      	bls.n	8006224 <_free_r+0x74>
 800621e:	230c      	movs	r3, #12
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	e7d6      	b.n	80061d2 <_free_r+0x22>
 8006224:	6820      	ldr	r0, [r4, #0]
 8006226:	1821      	adds	r1, r4, r0
 8006228:	428b      	cmp	r3, r1
 800622a:	bf01      	itttt	eq
 800622c:	6819      	ldreq	r1, [r3, #0]
 800622e:	685b      	ldreq	r3, [r3, #4]
 8006230:	1809      	addeq	r1, r1, r0
 8006232:	6021      	streq	r1, [r4, #0]
 8006234:	6063      	str	r3, [r4, #4]
 8006236:	6054      	str	r4, [r2, #4]
 8006238:	e7cb      	b.n	80061d2 <_free_r+0x22>
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	20000a18 	.word	0x20000a18

08006240 <malloc>:
 8006240:	4b02      	ldr	r3, [pc, #8]	@ (800624c <malloc+0xc>)
 8006242:	4601      	mov	r1, r0
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	f000 b825 	b.w	8006294 <_malloc_r>
 800624a:	bf00      	nop
 800624c:	20000034 	.word	0x20000034

08006250 <sbrk_aligned>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	4e0f      	ldr	r6, [pc, #60]	@ (8006290 <sbrk_aligned+0x40>)
 8006254:	460c      	mov	r4, r1
 8006256:	6831      	ldr	r1, [r6, #0]
 8006258:	4605      	mov	r5, r0
 800625a:	b911      	cbnz	r1, 8006262 <sbrk_aligned+0x12>
 800625c:	f001 fd8c 	bl	8007d78 <_sbrk_r>
 8006260:	6030      	str	r0, [r6, #0]
 8006262:	4621      	mov	r1, r4
 8006264:	4628      	mov	r0, r5
 8006266:	f001 fd87 	bl	8007d78 <_sbrk_r>
 800626a:	1c43      	adds	r3, r0, #1
 800626c:	d103      	bne.n	8006276 <sbrk_aligned+0x26>
 800626e:	f04f 34ff 	mov.w	r4, #4294967295
 8006272:	4620      	mov	r0, r4
 8006274:	bd70      	pop	{r4, r5, r6, pc}
 8006276:	1cc4      	adds	r4, r0, #3
 8006278:	f024 0403 	bic.w	r4, r4, #3
 800627c:	42a0      	cmp	r0, r4
 800627e:	d0f8      	beq.n	8006272 <sbrk_aligned+0x22>
 8006280:	1a21      	subs	r1, r4, r0
 8006282:	4628      	mov	r0, r5
 8006284:	f001 fd78 	bl	8007d78 <_sbrk_r>
 8006288:	3001      	adds	r0, #1
 800628a:	d1f2      	bne.n	8006272 <sbrk_aligned+0x22>
 800628c:	e7ef      	b.n	800626e <sbrk_aligned+0x1e>
 800628e:	bf00      	nop
 8006290:	20000a14 	.word	0x20000a14

08006294 <_malloc_r>:
 8006294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006298:	1ccd      	adds	r5, r1, #3
 800629a:	f025 0503 	bic.w	r5, r5, #3
 800629e:	3508      	adds	r5, #8
 80062a0:	2d0c      	cmp	r5, #12
 80062a2:	bf38      	it	cc
 80062a4:	250c      	movcc	r5, #12
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	4606      	mov	r6, r0
 80062aa:	db01      	blt.n	80062b0 <_malloc_r+0x1c>
 80062ac:	42a9      	cmp	r1, r5
 80062ae:	d904      	bls.n	80062ba <_malloc_r+0x26>
 80062b0:	230c      	movs	r3, #12
 80062b2:	6033      	str	r3, [r6, #0]
 80062b4:	2000      	movs	r0, #0
 80062b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006390 <_malloc_r+0xfc>
 80062be:	f000 f869 	bl	8006394 <__malloc_lock>
 80062c2:	f8d8 3000 	ldr.w	r3, [r8]
 80062c6:	461c      	mov	r4, r3
 80062c8:	bb44      	cbnz	r4, 800631c <_malloc_r+0x88>
 80062ca:	4629      	mov	r1, r5
 80062cc:	4630      	mov	r0, r6
 80062ce:	f7ff ffbf 	bl	8006250 <sbrk_aligned>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	4604      	mov	r4, r0
 80062d6:	d158      	bne.n	800638a <_malloc_r+0xf6>
 80062d8:	f8d8 4000 	ldr.w	r4, [r8]
 80062dc:	4627      	mov	r7, r4
 80062de:	2f00      	cmp	r7, #0
 80062e0:	d143      	bne.n	800636a <_malloc_r+0xd6>
 80062e2:	2c00      	cmp	r4, #0
 80062e4:	d04b      	beq.n	800637e <_malloc_r+0xea>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	4639      	mov	r1, r7
 80062ea:	4630      	mov	r0, r6
 80062ec:	eb04 0903 	add.w	r9, r4, r3
 80062f0:	f001 fd42 	bl	8007d78 <_sbrk_r>
 80062f4:	4581      	cmp	r9, r0
 80062f6:	d142      	bne.n	800637e <_malloc_r+0xea>
 80062f8:	6821      	ldr	r1, [r4, #0]
 80062fa:	4630      	mov	r0, r6
 80062fc:	1a6d      	subs	r5, r5, r1
 80062fe:	4629      	mov	r1, r5
 8006300:	f7ff ffa6 	bl	8006250 <sbrk_aligned>
 8006304:	3001      	adds	r0, #1
 8006306:	d03a      	beq.n	800637e <_malloc_r+0xea>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	442b      	add	r3, r5
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	f8d8 3000 	ldr.w	r3, [r8]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	bb62      	cbnz	r2, 8006370 <_malloc_r+0xdc>
 8006316:	f8c8 7000 	str.w	r7, [r8]
 800631a:	e00f      	b.n	800633c <_malloc_r+0xa8>
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	1b52      	subs	r2, r2, r5
 8006320:	d420      	bmi.n	8006364 <_malloc_r+0xd0>
 8006322:	2a0b      	cmp	r2, #11
 8006324:	d917      	bls.n	8006356 <_malloc_r+0xc2>
 8006326:	1961      	adds	r1, r4, r5
 8006328:	42a3      	cmp	r3, r4
 800632a:	6025      	str	r5, [r4, #0]
 800632c:	bf18      	it	ne
 800632e:	6059      	strne	r1, [r3, #4]
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	bf08      	it	eq
 8006334:	f8c8 1000 	streq.w	r1, [r8]
 8006338:	5162      	str	r2, [r4, r5]
 800633a:	604b      	str	r3, [r1, #4]
 800633c:	4630      	mov	r0, r6
 800633e:	f000 f82f 	bl	80063a0 <__malloc_unlock>
 8006342:	f104 000b 	add.w	r0, r4, #11
 8006346:	1d23      	adds	r3, r4, #4
 8006348:	f020 0007 	bic.w	r0, r0, #7
 800634c:	1ac2      	subs	r2, r0, r3
 800634e:	bf1c      	itt	ne
 8006350:	1a1b      	subne	r3, r3, r0
 8006352:	50a3      	strne	r3, [r4, r2]
 8006354:	e7af      	b.n	80062b6 <_malloc_r+0x22>
 8006356:	6862      	ldr	r2, [r4, #4]
 8006358:	42a3      	cmp	r3, r4
 800635a:	bf0c      	ite	eq
 800635c:	f8c8 2000 	streq.w	r2, [r8]
 8006360:	605a      	strne	r2, [r3, #4]
 8006362:	e7eb      	b.n	800633c <_malloc_r+0xa8>
 8006364:	4623      	mov	r3, r4
 8006366:	6864      	ldr	r4, [r4, #4]
 8006368:	e7ae      	b.n	80062c8 <_malloc_r+0x34>
 800636a:	463c      	mov	r4, r7
 800636c:	687f      	ldr	r7, [r7, #4]
 800636e:	e7b6      	b.n	80062de <_malloc_r+0x4a>
 8006370:	461a      	mov	r2, r3
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	42a3      	cmp	r3, r4
 8006376:	d1fb      	bne.n	8006370 <_malloc_r+0xdc>
 8006378:	2300      	movs	r3, #0
 800637a:	6053      	str	r3, [r2, #4]
 800637c:	e7de      	b.n	800633c <_malloc_r+0xa8>
 800637e:	230c      	movs	r3, #12
 8006380:	4630      	mov	r0, r6
 8006382:	6033      	str	r3, [r6, #0]
 8006384:	f000 f80c 	bl	80063a0 <__malloc_unlock>
 8006388:	e794      	b.n	80062b4 <_malloc_r+0x20>
 800638a:	6005      	str	r5, [r0, #0]
 800638c:	e7d6      	b.n	800633c <_malloc_r+0xa8>
 800638e:	bf00      	nop
 8006390:	20000a18 	.word	0x20000a18

08006394 <__malloc_lock>:
 8006394:	4801      	ldr	r0, [pc, #4]	@ (800639c <__malloc_lock+0x8>)
 8006396:	f7ff b870 	b.w	800547a <__retarget_lock_acquire_recursive>
 800639a:	bf00      	nop
 800639c:	20000a10 	.word	0x20000a10

080063a0 <__malloc_unlock>:
 80063a0:	4801      	ldr	r0, [pc, #4]	@ (80063a8 <__malloc_unlock+0x8>)
 80063a2:	f7ff b86b 	b.w	800547c <__retarget_lock_release_recursive>
 80063a6:	bf00      	nop
 80063a8:	20000a10 	.word	0x20000a10

080063ac <_Balloc>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	69c6      	ldr	r6, [r0, #28]
 80063b0:	4604      	mov	r4, r0
 80063b2:	460d      	mov	r5, r1
 80063b4:	b976      	cbnz	r6, 80063d4 <_Balloc+0x28>
 80063b6:	2010      	movs	r0, #16
 80063b8:	f7ff ff42 	bl	8006240 <malloc>
 80063bc:	4602      	mov	r2, r0
 80063be:	61e0      	str	r0, [r4, #28]
 80063c0:	b920      	cbnz	r0, 80063cc <_Balloc+0x20>
 80063c2:	216b      	movs	r1, #107	@ 0x6b
 80063c4:	4b17      	ldr	r3, [pc, #92]	@ (8006424 <_Balloc+0x78>)
 80063c6:	4818      	ldr	r0, [pc, #96]	@ (8006428 <_Balloc+0x7c>)
 80063c8:	f7ff f882 	bl	80054d0 <__assert_func>
 80063cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d0:	6006      	str	r6, [r0, #0]
 80063d2:	60c6      	str	r6, [r0, #12]
 80063d4:	69e6      	ldr	r6, [r4, #28]
 80063d6:	68f3      	ldr	r3, [r6, #12]
 80063d8:	b183      	cbz	r3, 80063fc <_Balloc+0x50>
 80063da:	69e3      	ldr	r3, [r4, #28]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063e2:	b9b8      	cbnz	r0, 8006414 <_Balloc+0x68>
 80063e4:	2101      	movs	r1, #1
 80063e6:	fa01 f605 	lsl.w	r6, r1, r5
 80063ea:	1d72      	adds	r2, r6, #5
 80063ec:	4620      	mov	r0, r4
 80063ee:	0092      	lsls	r2, r2, #2
 80063f0:	f001 fcdf 	bl	8007db2 <_calloc_r>
 80063f4:	b160      	cbz	r0, 8006410 <_Balloc+0x64>
 80063f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063fa:	e00e      	b.n	800641a <_Balloc+0x6e>
 80063fc:	2221      	movs	r2, #33	@ 0x21
 80063fe:	2104      	movs	r1, #4
 8006400:	4620      	mov	r0, r4
 8006402:	f001 fcd6 	bl	8007db2 <_calloc_r>
 8006406:	69e3      	ldr	r3, [r4, #28]
 8006408:	60f0      	str	r0, [r6, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e4      	bne.n	80063da <_Balloc+0x2e>
 8006410:	2000      	movs	r0, #0
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	6802      	ldr	r2, [r0, #0]
 8006416:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800641a:	2300      	movs	r3, #0
 800641c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006420:	e7f7      	b.n	8006412 <_Balloc+0x66>
 8006422:	bf00      	nop
 8006424:	0800b7f5 	.word	0x0800b7f5
 8006428:	0800b875 	.word	0x0800b875

0800642c <_Bfree>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	69c6      	ldr	r6, [r0, #28]
 8006430:	4605      	mov	r5, r0
 8006432:	460c      	mov	r4, r1
 8006434:	b976      	cbnz	r6, 8006454 <_Bfree+0x28>
 8006436:	2010      	movs	r0, #16
 8006438:	f7ff ff02 	bl	8006240 <malloc>
 800643c:	4602      	mov	r2, r0
 800643e:	61e8      	str	r0, [r5, #28]
 8006440:	b920      	cbnz	r0, 800644c <_Bfree+0x20>
 8006442:	218f      	movs	r1, #143	@ 0x8f
 8006444:	4b08      	ldr	r3, [pc, #32]	@ (8006468 <_Bfree+0x3c>)
 8006446:	4809      	ldr	r0, [pc, #36]	@ (800646c <_Bfree+0x40>)
 8006448:	f7ff f842 	bl	80054d0 <__assert_func>
 800644c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006450:	6006      	str	r6, [r0, #0]
 8006452:	60c6      	str	r6, [r0, #12]
 8006454:	b13c      	cbz	r4, 8006466 <_Bfree+0x3a>
 8006456:	69eb      	ldr	r3, [r5, #28]
 8006458:	6862      	ldr	r2, [r4, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006460:	6021      	str	r1, [r4, #0]
 8006462:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	0800b7f5 	.word	0x0800b7f5
 800646c:	0800b875 	.word	0x0800b875

08006470 <__multadd>:
 8006470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006474:	4607      	mov	r7, r0
 8006476:	460c      	mov	r4, r1
 8006478:	461e      	mov	r6, r3
 800647a:	2000      	movs	r0, #0
 800647c:	690d      	ldr	r5, [r1, #16]
 800647e:	f101 0c14 	add.w	ip, r1, #20
 8006482:	f8dc 3000 	ldr.w	r3, [ip]
 8006486:	3001      	adds	r0, #1
 8006488:	b299      	uxth	r1, r3
 800648a:	fb02 6101 	mla	r1, r2, r1, r6
 800648e:	0c1e      	lsrs	r6, r3, #16
 8006490:	0c0b      	lsrs	r3, r1, #16
 8006492:	fb02 3306 	mla	r3, r2, r6, r3
 8006496:	b289      	uxth	r1, r1
 8006498:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800649c:	4285      	cmp	r5, r0
 800649e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064a2:	f84c 1b04 	str.w	r1, [ip], #4
 80064a6:	dcec      	bgt.n	8006482 <__multadd+0x12>
 80064a8:	b30e      	cbz	r6, 80064ee <__multadd+0x7e>
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	42ab      	cmp	r3, r5
 80064ae:	dc19      	bgt.n	80064e4 <__multadd+0x74>
 80064b0:	6861      	ldr	r1, [r4, #4]
 80064b2:	4638      	mov	r0, r7
 80064b4:	3101      	adds	r1, #1
 80064b6:	f7ff ff79 	bl	80063ac <_Balloc>
 80064ba:	4680      	mov	r8, r0
 80064bc:	b928      	cbnz	r0, 80064ca <__multadd+0x5a>
 80064be:	4602      	mov	r2, r0
 80064c0:	21ba      	movs	r1, #186	@ 0xba
 80064c2:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <__multadd+0x84>)
 80064c4:	480c      	ldr	r0, [pc, #48]	@ (80064f8 <__multadd+0x88>)
 80064c6:	f7ff f803 	bl	80054d0 <__assert_func>
 80064ca:	6922      	ldr	r2, [r4, #16]
 80064cc:	f104 010c 	add.w	r1, r4, #12
 80064d0:	3202      	adds	r2, #2
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	300c      	adds	r0, #12
 80064d6:	f7fe ffe8 	bl	80054aa <memcpy>
 80064da:	4621      	mov	r1, r4
 80064dc:	4638      	mov	r0, r7
 80064de:	f7ff ffa5 	bl	800642c <_Bfree>
 80064e2:	4644      	mov	r4, r8
 80064e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064e8:	3501      	adds	r5, #1
 80064ea:	615e      	str	r6, [r3, #20]
 80064ec:	6125      	str	r5, [r4, #16]
 80064ee:	4620      	mov	r0, r4
 80064f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f4:	0800b864 	.word	0x0800b864
 80064f8:	0800b875 	.word	0x0800b875

080064fc <__s2b>:
 80064fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006500:	4615      	mov	r5, r2
 8006502:	2209      	movs	r2, #9
 8006504:	461f      	mov	r7, r3
 8006506:	3308      	adds	r3, #8
 8006508:	460c      	mov	r4, r1
 800650a:	fb93 f3f2 	sdiv	r3, r3, r2
 800650e:	4606      	mov	r6, r0
 8006510:	2201      	movs	r2, #1
 8006512:	2100      	movs	r1, #0
 8006514:	429a      	cmp	r2, r3
 8006516:	db09      	blt.n	800652c <__s2b+0x30>
 8006518:	4630      	mov	r0, r6
 800651a:	f7ff ff47 	bl	80063ac <_Balloc>
 800651e:	b940      	cbnz	r0, 8006532 <__s2b+0x36>
 8006520:	4602      	mov	r2, r0
 8006522:	21d3      	movs	r1, #211	@ 0xd3
 8006524:	4b18      	ldr	r3, [pc, #96]	@ (8006588 <__s2b+0x8c>)
 8006526:	4819      	ldr	r0, [pc, #100]	@ (800658c <__s2b+0x90>)
 8006528:	f7fe ffd2 	bl	80054d0 <__assert_func>
 800652c:	0052      	lsls	r2, r2, #1
 800652e:	3101      	adds	r1, #1
 8006530:	e7f0      	b.n	8006514 <__s2b+0x18>
 8006532:	9b08      	ldr	r3, [sp, #32]
 8006534:	2d09      	cmp	r5, #9
 8006536:	6143      	str	r3, [r0, #20]
 8006538:	f04f 0301 	mov.w	r3, #1
 800653c:	6103      	str	r3, [r0, #16]
 800653e:	dd16      	ble.n	800656e <__s2b+0x72>
 8006540:	f104 0909 	add.w	r9, r4, #9
 8006544:	46c8      	mov	r8, r9
 8006546:	442c      	add	r4, r5
 8006548:	f818 3b01 	ldrb.w	r3, [r8], #1
 800654c:	4601      	mov	r1, r0
 800654e:	220a      	movs	r2, #10
 8006550:	4630      	mov	r0, r6
 8006552:	3b30      	subs	r3, #48	@ 0x30
 8006554:	f7ff ff8c 	bl	8006470 <__multadd>
 8006558:	45a0      	cmp	r8, r4
 800655a:	d1f5      	bne.n	8006548 <__s2b+0x4c>
 800655c:	f1a5 0408 	sub.w	r4, r5, #8
 8006560:	444c      	add	r4, r9
 8006562:	1b2d      	subs	r5, r5, r4
 8006564:	1963      	adds	r3, r4, r5
 8006566:	42bb      	cmp	r3, r7
 8006568:	db04      	blt.n	8006574 <__s2b+0x78>
 800656a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656e:	2509      	movs	r5, #9
 8006570:	340a      	adds	r4, #10
 8006572:	e7f6      	b.n	8006562 <__s2b+0x66>
 8006574:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006578:	4601      	mov	r1, r0
 800657a:	220a      	movs	r2, #10
 800657c:	4630      	mov	r0, r6
 800657e:	3b30      	subs	r3, #48	@ 0x30
 8006580:	f7ff ff76 	bl	8006470 <__multadd>
 8006584:	e7ee      	b.n	8006564 <__s2b+0x68>
 8006586:	bf00      	nop
 8006588:	0800b864 	.word	0x0800b864
 800658c:	0800b875 	.word	0x0800b875

08006590 <__hi0bits>:
 8006590:	4603      	mov	r3, r0
 8006592:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006596:	bf3a      	itte	cc
 8006598:	0403      	lslcc	r3, r0, #16
 800659a:	2010      	movcc	r0, #16
 800659c:	2000      	movcs	r0, #0
 800659e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065a2:	bf3c      	itt	cc
 80065a4:	021b      	lslcc	r3, r3, #8
 80065a6:	3008      	addcc	r0, #8
 80065a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065ac:	bf3c      	itt	cc
 80065ae:	011b      	lslcc	r3, r3, #4
 80065b0:	3004      	addcc	r0, #4
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b6:	bf3c      	itt	cc
 80065b8:	009b      	lslcc	r3, r3, #2
 80065ba:	3002      	addcc	r0, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	db05      	blt.n	80065cc <__hi0bits+0x3c>
 80065c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065c4:	f100 0001 	add.w	r0, r0, #1
 80065c8:	bf08      	it	eq
 80065ca:	2020      	moveq	r0, #32
 80065cc:	4770      	bx	lr

080065ce <__lo0bits>:
 80065ce:	6803      	ldr	r3, [r0, #0]
 80065d0:	4602      	mov	r2, r0
 80065d2:	f013 0007 	ands.w	r0, r3, #7
 80065d6:	d00b      	beq.n	80065f0 <__lo0bits+0x22>
 80065d8:	07d9      	lsls	r1, r3, #31
 80065da:	d421      	bmi.n	8006620 <__lo0bits+0x52>
 80065dc:	0798      	lsls	r0, r3, #30
 80065de:	bf49      	itett	mi
 80065e0:	085b      	lsrmi	r3, r3, #1
 80065e2:	089b      	lsrpl	r3, r3, #2
 80065e4:	2001      	movmi	r0, #1
 80065e6:	6013      	strmi	r3, [r2, #0]
 80065e8:	bf5c      	itt	pl
 80065ea:	2002      	movpl	r0, #2
 80065ec:	6013      	strpl	r3, [r2, #0]
 80065ee:	4770      	bx	lr
 80065f0:	b299      	uxth	r1, r3
 80065f2:	b909      	cbnz	r1, 80065f8 <__lo0bits+0x2a>
 80065f4:	2010      	movs	r0, #16
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	b2d9      	uxtb	r1, r3
 80065fa:	b909      	cbnz	r1, 8006600 <__lo0bits+0x32>
 80065fc:	3008      	adds	r0, #8
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	0719      	lsls	r1, r3, #28
 8006602:	bf04      	itt	eq
 8006604:	091b      	lsreq	r3, r3, #4
 8006606:	3004      	addeq	r0, #4
 8006608:	0799      	lsls	r1, r3, #30
 800660a:	bf04      	itt	eq
 800660c:	089b      	lsreq	r3, r3, #2
 800660e:	3002      	addeq	r0, #2
 8006610:	07d9      	lsls	r1, r3, #31
 8006612:	d403      	bmi.n	800661c <__lo0bits+0x4e>
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	f100 0001 	add.w	r0, r0, #1
 800661a:	d003      	beq.n	8006624 <__lo0bits+0x56>
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	4770      	bx	lr
 8006620:	2000      	movs	r0, #0
 8006622:	4770      	bx	lr
 8006624:	2020      	movs	r0, #32
 8006626:	4770      	bx	lr

08006628 <__i2b>:
 8006628:	b510      	push	{r4, lr}
 800662a:	460c      	mov	r4, r1
 800662c:	2101      	movs	r1, #1
 800662e:	f7ff febd 	bl	80063ac <_Balloc>
 8006632:	4602      	mov	r2, r0
 8006634:	b928      	cbnz	r0, 8006642 <__i2b+0x1a>
 8006636:	f240 1145 	movw	r1, #325	@ 0x145
 800663a:	4b04      	ldr	r3, [pc, #16]	@ (800664c <__i2b+0x24>)
 800663c:	4804      	ldr	r0, [pc, #16]	@ (8006650 <__i2b+0x28>)
 800663e:	f7fe ff47 	bl	80054d0 <__assert_func>
 8006642:	2301      	movs	r3, #1
 8006644:	6144      	str	r4, [r0, #20]
 8006646:	6103      	str	r3, [r0, #16]
 8006648:	bd10      	pop	{r4, pc}
 800664a:	bf00      	nop
 800664c:	0800b864 	.word	0x0800b864
 8006650:	0800b875 	.word	0x0800b875

08006654 <__multiply>:
 8006654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	4614      	mov	r4, r2
 800665a:	690a      	ldr	r2, [r1, #16]
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	460f      	mov	r7, r1
 8006660:	429a      	cmp	r2, r3
 8006662:	bfa2      	ittt	ge
 8006664:	4623      	movge	r3, r4
 8006666:	460c      	movge	r4, r1
 8006668:	461f      	movge	r7, r3
 800666a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800666e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006672:	68a3      	ldr	r3, [r4, #8]
 8006674:	6861      	ldr	r1, [r4, #4]
 8006676:	eb0a 0609 	add.w	r6, sl, r9
 800667a:	42b3      	cmp	r3, r6
 800667c:	b085      	sub	sp, #20
 800667e:	bfb8      	it	lt
 8006680:	3101      	addlt	r1, #1
 8006682:	f7ff fe93 	bl	80063ac <_Balloc>
 8006686:	b930      	cbnz	r0, 8006696 <__multiply+0x42>
 8006688:	4602      	mov	r2, r0
 800668a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800668e:	4b43      	ldr	r3, [pc, #268]	@ (800679c <__multiply+0x148>)
 8006690:	4843      	ldr	r0, [pc, #268]	@ (80067a0 <__multiply+0x14c>)
 8006692:	f7fe ff1d 	bl	80054d0 <__assert_func>
 8006696:	f100 0514 	add.w	r5, r0, #20
 800669a:	462b      	mov	r3, r5
 800669c:	2200      	movs	r2, #0
 800669e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066a2:	4543      	cmp	r3, r8
 80066a4:	d321      	bcc.n	80066ea <__multiply+0x96>
 80066a6:	f107 0114 	add.w	r1, r7, #20
 80066aa:	f104 0214 	add.w	r2, r4, #20
 80066ae:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80066b2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80066b6:	9302      	str	r3, [sp, #8]
 80066b8:	1b13      	subs	r3, r2, r4
 80066ba:	3b15      	subs	r3, #21
 80066bc:	f023 0303 	bic.w	r3, r3, #3
 80066c0:	3304      	adds	r3, #4
 80066c2:	f104 0715 	add.w	r7, r4, #21
 80066c6:	42ba      	cmp	r2, r7
 80066c8:	bf38      	it	cc
 80066ca:	2304      	movcc	r3, #4
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	9b02      	ldr	r3, [sp, #8]
 80066d0:	9103      	str	r1, [sp, #12]
 80066d2:	428b      	cmp	r3, r1
 80066d4:	d80c      	bhi.n	80066f0 <__multiply+0x9c>
 80066d6:	2e00      	cmp	r6, #0
 80066d8:	dd03      	ble.n	80066e2 <__multiply+0x8e>
 80066da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d05a      	beq.n	8006798 <__multiply+0x144>
 80066e2:	6106      	str	r6, [r0, #16]
 80066e4:	b005      	add	sp, #20
 80066e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ea:	f843 2b04 	str.w	r2, [r3], #4
 80066ee:	e7d8      	b.n	80066a2 <__multiply+0x4e>
 80066f0:	f8b1 a000 	ldrh.w	sl, [r1]
 80066f4:	f1ba 0f00 	cmp.w	sl, #0
 80066f8:	d023      	beq.n	8006742 <__multiply+0xee>
 80066fa:	46a9      	mov	r9, r5
 80066fc:	f04f 0c00 	mov.w	ip, #0
 8006700:	f104 0e14 	add.w	lr, r4, #20
 8006704:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006708:	f8d9 3000 	ldr.w	r3, [r9]
 800670c:	fa1f fb87 	uxth.w	fp, r7
 8006710:	b29b      	uxth	r3, r3
 8006712:	fb0a 330b 	mla	r3, sl, fp, r3
 8006716:	4463      	add	r3, ip
 8006718:	f8d9 c000 	ldr.w	ip, [r9]
 800671c:	0c3f      	lsrs	r7, r7, #16
 800671e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006722:	fb0a c707 	mla	r7, sl, r7, ip
 8006726:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800672a:	b29b      	uxth	r3, r3
 800672c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006730:	4572      	cmp	r2, lr
 8006732:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006736:	f849 3b04 	str.w	r3, [r9], #4
 800673a:	d8e3      	bhi.n	8006704 <__multiply+0xb0>
 800673c:	9b01      	ldr	r3, [sp, #4]
 800673e:	f845 c003 	str.w	ip, [r5, r3]
 8006742:	9b03      	ldr	r3, [sp, #12]
 8006744:	3104      	adds	r1, #4
 8006746:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800674a:	f1b9 0f00 	cmp.w	r9, #0
 800674e:	d021      	beq.n	8006794 <__multiply+0x140>
 8006750:	46ae      	mov	lr, r5
 8006752:	f04f 0a00 	mov.w	sl, #0
 8006756:	682b      	ldr	r3, [r5, #0]
 8006758:	f104 0c14 	add.w	ip, r4, #20
 800675c:	f8bc b000 	ldrh.w	fp, [ip]
 8006760:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006764:	b29b      	uxth	r3, r3
 8006766:	fb09 770b 	mla	r7, r9, fp, r7
 800676a:	4457      	add	r7, sl
 800676c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006770:	f84e 3b04 	str.w	r3, [lr], #4
 8006774:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006778:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800677c:	f8be 3000 	ldrh.w	r3, [lr]
 8006780:	4562      	cmp	r2, ip
 8006782:	fb09 330a 	mla	r3, r9, sl, r3
 8006786:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800678a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800678e:	d8e5      	bhi.n	800675c <__multiply+0x108>
 8006790:	9f01      	ldr	r7, [sp, #4]
 8006792:	51eb      	str	r3, [r5, r7]
 8006794:	3504      	adds	r5, #4
 8006796:	e79a      	b.n	80066ce <__multiply+0x7a>
 8006798:	3e01      	subs	r6, #1
 800679a:	e79c      	b.n	80066d6 <__multiply+0x82>
 800679c:	0800b864 	.word	0x0800b864
 80067a0:	0800b875 	.word	0x0800b875

080067a4 <__pow5mult>:
 80067a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a8:	4615      	mov	r5, r2
 80067aa:	f012 0203 	ands.w	r2, r2, #3
 80067ae:	4607      	mov	r7, r0
 80067b0:	460e      	mov	r6, r1
 80067b2:	d007      	beq.n	80067c4 <__pow5mult+0x20>
 80067b4:	4c25      	ldr	r4, [pc, #148]	@ (800684c <__pow5mult+0xa8>)
 80067b6:	3a01      	subs	r2, #1
 80067b8:	2300      	movs	r3, #0
 80067ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067be:	f7ff fe57 	bl	8006470 <__multadd>
 80067c2:	4606      	mov	r6, r0
 80067c4:	10ad      	asrs	r5, r5, #2
 80067c6:	d03d      	beq.n	8006844 <__pow5mult+0xa0>
 80067c8:	69fc      	ldr	r4, [r7, #28]
 80067ca:	b97c      	cbnz	r4, 80067ec <__pow5mult+0x48>
 80067cc:	2010      	movs	r0, #16
 80067ce:	f7ff fd37 	bl	8006240 <malloc>
 80067d2:	4602      	mov	r2, r0
 80067d4:	61f8      	str	r0, [r7, #28]
 80067d6:	b928      	cbnz	r0, 80067e4 <__pow5mult+0x40>
 80067d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006850 <__pow5mult+0xac>)
 80067de:	481d      	ldr	r0, [pc, #116]	@ (8006854 <__pow5mult+0xb0>)
 80067e0:	f7fe fe76 	bl	80054d0 <__assert_func>
 80067e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067e8:	6004      	str	r4, [r0, #0]
 80067ea:	60c4      	str	r4, [r0, #12]
 80067ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067f4:	b94c      	cbnz	r4, 800680a <__pow5mult+0x66>
 80067f6:	f240 2171 	movw	r1, #625	@ 0x271
 80067fa:	4638      	mov	r0, r7
 80067fc:	f7ff ff14 	bl	8006628 <__i2b>
 8006800:	2300      	movs	r3, #0
 8006802:	4604      	mov	r4, r0
 8006804:	f8c8 0008 	str.w	r0, [r8, #8]
 8006808:	6003      	str	r3, [r0, #0]
 800680a:	f04f 0900 	mov.w	r9, #0
 800680e:	07eb      	lsls	r3, r5, #31
 8006810:	d50a      	bpl.n	8006828 <__pow5mult+0x84>
 8006812:	4631      	mov	r1, r6
 8006814:	4622      	mov	r2, r4
 8006816:	4638      	mov	r0, r7
 8006818:	f7ff ff1c 	bl	8006654 <__multiply>
 800681c:	4680      	mov	r8, r0
 800681e:	4631      	mov	r1, r6
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff fe03 	bl	800642c <_Bfree>
 8006826:	4646      	mov	r6, r8
 8006828:	106d      	asrs	r5, r5, #1
 800682a:	d00b      	beq.n	8006844 <__pow5mult+0xa0>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	b938      	cbnz	r0, 8006840 <__pow5mult+0x9c>
 8006830:	4622      	mov	r2, r4
 8006832:	4621      	mov	r1, r4
 8006834:	4638      	mov	r0, r7
 8006836:	f7ff ff0d 	bl	8006654 <__multiply>
 800683a:	6020      	str	r0, [r4, #0]
 800683c:	f8c0 9000 	str.w	r9, [r0]
 8006840:	4604      	mov	r4, r0
 8006842:	e7e4      	b.n	800680e <__pow5mult+0x6a>
 8006844:	4630      	mov	r0, r6
 8006846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800684a:	bf00      	nop
 800684c:	0800b8d0 	.word	0x0800b8d0
 8006850:	0800b7f5 	.word	0x0800b7f5
 8006854:	0800b875 	.word	0x0800b875

08006858 <__lshift>:
 8006858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	460c      	mov	r4, r1
 800685e:	4607      	mov	r7, r0
 8006860:	4691      	mov	r9, r2
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	6849      	ldr	r1, [r1, #4]
 8006866:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800686a:	68a3      	ldr	r3, [r4, #8]
 800686c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006870:	f108 0601 	add.w	r6, r8, #1
 8006874:	42b3      	cmp	r3, r6
 8006876:	db0b      	blt.n	8006890 <__lshift+0x38>
 8006878:	4638      	mov	r0, r7
 800687a:	f7ff fd97 	bl	80063ac <_Balloc>
 800687e:	4605      	mov	r5, r0
 8006880:	b948      	cbnz	r0, 8006896 <__lshift+0x3e>
 8006882:	4602      	mov	r2, r0
 8006884:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006888:	4b27      	ldr	r3, [pc, #156]	@ (8006928 <__lshift+0xd0>)
 800688a:	4828      	ldr	r0, [pc, #160]	@ (800692c <__lshift+0xd4>)
 800688c:	f7fe fe20 	bl	80054d0 <__assert_func>
 8006890:	3101      	adds	r1, #1
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	e7ee      	b.n	8006874 <__lshift+0x1c>
 8006896:	2300      	movs	r3, #0
 8006898:	f100 0114 	add.w	r1, r0, #20
 800689c:	f100 0210 	add.w	r2, r0, #16
 80068a0:	4618      	mov	r0, r3
 80068a2:	4553      	cmp	r3, sl
 80068a4:	db33      	blt.n	800690e <__lshift+0xb6>
 80068a6:	6920      	ldr	r0, [r4, #16]
 80068a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068ac:	f104 0314 	add.w	r3, r4, #20
 80068b0:	f019 091f 	ands.w	r9, r9, #31
 80068b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068bc:	d02b      	beq.n	8006916 <__lshift+0xbe>
 80068be:	468a      	mov	sl, r1
 80068c0:	2200      	movs	r2, #0
 80068c2:	f1c9 0e20 	rsb	lr, r9, #32
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	fa00 f009 	lsl.w	r0, r0, r9
 80068cc:	4310      	orrs	r0, r2
 80068ce:	f84a 0b04 	str.w	r0, [sl], #4
 80068d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d6:	459c      	cmp	ip, r3
 80068d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80068dc:	d8f3      	bhi.n	80068c6 <__lshift+0x6e>
 80068de:	ebac 0304 	sub.w	r3, ip, r4
 80068e2:	3b15      	subs	r3, #21
 80068e4:	f023 0303 	bic.w	r3, r3, #3
 80068e8:	3304      	adds	r3, #4
 80068ea:	f104 0015 	add.w	r0, r4, #21
 80068ee:	4584      	cmp	ip, r0
 80068f0:	bf38      	it	cc
 80068f2:	2304      	movcc	r3, #4
 80068f4:	50ca      	str	r2, [r1, r3]
 80068f6:	b10a      	cbz	r2, 80068fc <__lshift+0xa4>
 80068f8:	f108 0602 	add.w	r6, r8, #2
 80068fc:	3e01      	subs	r6, #1
 80068fe:	4638      	mov	r0, r7
 8006900:	4621      	mov	r1, r4
 8006902:	612e      	str	r6, [r5, #16]
 8006904:	f7ff fd92 	bl	800642c <_Bfree>
 8006908:	4628      	mov	r0, r5
 800690a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006912:	3301      	adds	r3, #1
 8006914:	e7c5      	b.n	80068a2 <__lshift+0x4a>
 8006916:	3904      	subs	r1, #4
 8006918:	f853 2b04 	ldr.w	r2, [r3], #4
 800691c:	459c      	cmp	ip, r3
 800691e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006922:	d8f9      	bhi.n	8006918 <__lshift+0xc0>
 8006924:	e7ea      	b.n	80068fc <__lshift+0xa4>
 8006926:	bf00      	nop
 8006928:	0800b864 	.word	0x0800b864
 800692c:	0800b875 	.word	0x0800b875

08006930 <__mcmp>:
 8006930:	4603      	mov	r3, r0
 8006932:	690a      	ldr	r2, [r1, #16]
 8006934:	6900      	ldr	r0, [r0, #16]
 8006936:	b530      	push	{r4, r5, lr}
 8006938:	1a80      	subs	r0, r0, r2
 800693a:	d10e      	bne.n	800695a <__mcmp+0x2a>
 800693c:	3314      	adds	r3, #20
 800693e:	3114      	adds	r1, #20
 8006940:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006944:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006948:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800694c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006950:	4295      	cmp	r5, r2
 8006952:	d003      	beq.n	800695c <__mcmp+0x2c>
 8006954:	d205      	bcs.n	8006962 <__mcmp+0x32>
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	bd30      	pop	{r4, r5, pc}
 800695c:	42a3      	cmp	r3, r4
 800695e:	d3f3      	bcc.n	8006948 <__mcmp+0x18>
 8006960:	e7fb      	b.n	800695a <__mcmp+0x2a>
 8006962:	2001      	movs	r0, #1
 8006964:	e7f9      	b.n	800695a <__mcmp+0x2a>
	...

08006968 <__mdiff>:
 8006968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	4689      	mov	r9, r1
 800696e:	4606      	mov	r6, r0
 8006970:	4611      	mov	r1, r2
 8006972:	4648      	mov	r0, r9
 8006974:	4614      	mov	r4, r2
 8006976:	f7ff ffdb 	bl	8006930 <__mcmp>
 800697a:	1e05      	subs	r5, r0, #0
 800697c:	d112      	bne.n	80069a4 <__mdiff+0x3c>
 800697e:	4629      	mov	r1, r5
 8006980:	4630      	mov	r0, r6
 8006982:	f7ff fd13 	bl	80063ac <_Balloc>
 8006986:	4602      	mov	r2, r0
 8006988:	b928      	cbnz	r0, 8006996 <__mdiff+0x2e>
 800698a:	f240 2137 	movw	r1, #567	@ 0x237
 800698e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a88 <__mdiff+0x120>)
 8006990:	483e      	ldr	r0, [pc, #248]	@ (8006a8c <__mdiff+0x124>)
 8006992:	f7fe fd9d 	bl	80054d0 <__assert_func>
 8006996:	2301      	movs	r3, #1
 8006998:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800699c:	4610      	mov	r0, r2
 800699e:	b003      	add	sp, #12
 80069a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a4:	bfbc      	itt	lt
 80069a6:	464b      	movlt	r3, r9
 80069a8:	46a1      	movlt	r9, r4
 80069aa:	4630      	mov	r0, r6
 80069ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069b0:	bfba      	itte	lt
 80069b2:	461c      	movlt	r4, r3
 80069b4:	2501      	movlt	r5, #1
 80069b6:	2500      	movge	r5, #0
 80069b8:	f7ff fcf8 	bl	80063ac <_Balloc>
 80069bc:	4602      	mov	r2, r0
 80069be:	b918      	cbnz	r0, 80069c8 <__mdiff+0x60>
 80069c0:	f240 2145 	movw	r1, #581	@ 0x245
 80069c4:	4b30      	ldr	r3, [pc, #192]	@ (8006a88 <__mdiff+0x120>)
 80069c6:	e7e3      	b.n	8006990 <__mdiff+0x28>
 80069c8:	f100 0b14 	add.w	fp, r0, #20
 80069cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069d0:	f109 0310 	add.w	r3, r9, #16
 80069d4:	60c5      	str	r5, [r0, #12]
 80069d6:	f04f 0c00 	mov.w	ip, #0
 80069da:	f109 0514 	add.w	r5, r9, #20
 80069de:	46d9      	mov	r9, fp
 80069e0:	6926      	ldr	r6, [r4, #16]
 80069e2:	f104 0e14 	add.w	lr, r4, #20
 80069e6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069ea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069fa:	b281      	uxth	r1, r0
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	fa1f f38a 	uxth.w	r3, sl
 8006a02:	1a5b      	subs	r3, r3, r1
 8006a04:	0c00      	lsrs	r0, r0, #16
 8006a06:	4463      	add	r3, ip
 8006a08:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a0c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a16:	4576      	cmp	r6, lr
 8006a18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a1c:	f849 3b04 	str.w	r3, [r9], #4
 8006a20:	d8e6      	bhi.n	80069f0 <__mdiff+0x88>
 8006a22:	1b33      	subs	r3, r6, r4
 8006a24:	3b15      	subs	r3, #21
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	3415      	adds	r4, #21
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	42a6      	cmp	r6, r4
 8006a30:	bf38      	it	cc
 8006a32:	2304      	movcc	r3, #4
 8006a34:	441d      	add	r5, r3
 8006a36:	445b      	add	r3, fp
 8006a38:	461e      	mov	r6, r3
 8006a3a:	462c      	mov	r4, r5
 8006a3c:	4544      	cmp	r4, r8
 8006a3e:	d30e      	bcc.n	8006a5e <__mdiff+0xf6>
 8006a40:	f108 0103 	add.w	r1, r8, #3
 8006a44:	1b49      	subs	r1, r1, r5
 8006a46:	f021 0103 	bic.w	r1, r1, #3
 8006a4a:	3d03      	subs	r5, #3
 8006a4c:	45a8      	cmp	r8, r5
 8006a4e:	bf38      	it	cc
 8006a50:	2100      	movcc	r1, #0
 8006a52:	440b      	add	r3, r1
 8006a54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a58:	b199      	cbz	r1, 8006a82 <__mdiff+0x11a>
 8006a5a:	6117      	str	r7, [r2, #16]
 8006a5c:	e79e      	b.n	800699c <__mdiff+0x34>
 8006a5e:	46e6      	mov	lr, ip
 8006a60:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a64:	fa1f fc81 	uxth.w	ip, r1
 8006a68:	44f4      	add	ip, lr
 8006a6a:	0c08      	lsrs	r0, r1, #16
 8006a6c:	4471      	add	r1, lr
 8006a6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a72:	b289      	uxth	r1, r1
 8006a74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a7c:	f846 1b04 	str.w	r1, [r6], #4
 8006a80:	e7dc      	b.n	8006a3c <__mdiff+0xd4>
 8006a82:	3f01      	subs	r7, #1
 8006a84:	e7e6      	b.n	8006a54 <__mdiff+0xec>
 8006a86:	bf00      	nop
 8006a88:	0800b864 	.word	0x0800b864
 8006a8c:	0800b875 	.word	0x0800b875

08006a90 <__ulp>:
 8006a90:	4b0e      	ldr	r3, [pc, #56]	@ (8006acc <__ulp+0x3c>)
 8006a92:	400b      	ands	r3, r1
 8006a94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dc08      	bgt.n	8006aae <__ulp+0x1e>
 8006a9c:	425b      	negs	r3, r3
 8006a9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006aa2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006aa6:	da04      	bge.n	8006ab2 <__ulp+0x22>
 8006aa8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006aac:	4113      	asrs	r3, r2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	e008      	b.n	8006ac4 <__ulp+0x34>
 8006ab2:	f1a2 0314 	sub.w	r3, r2, #20
 8006ab6:	2b1e      	cmp	r3, #30
 8006ab8:	bfd6      	itet	le
 8006aba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006abe:	2201      	movgt	r2, #1
 8006ac0:	40da      	lsrle	r2, r3
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	7ff00000 	.word	0x7ff00000

08006ad0 <__b2d>:
 8006ad0:	6902      	ldr	r2, [r0, #16]
 8006ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad4:	f100 0614 	add.w	r6, r0, #20
 8006ad8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006adc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006ae0:	4f1e      	ldr	r7, [pc, #120]	@ (8006b5c <__b2d+0x8c>)
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f7ff fd54 	bl	8006590 <__hi0bits>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f1c0 0020 	rsb	r0, r0, #32
 8006aee:	2b0a      	cmp	r3, #10
 8006af0:	f1a2 0504 	sub.w	r5, r2, #4
 8006af4:	6008      	str	r0, [r1, #0]
 8006af6:	dc12      	bgt.n	8006b1e <__b2d+0x4e>
 8006af8:	42ae      	cmp	r6, r5
 8006afa:	bf2c      	ite	cs
 8006afc:	2200      	movcs	r2, #0
 8006afe:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006b02:	f1c3 0c0b 	rsb	ip, r3, #11
 8006b06:	3315      	adds	r3, #21
 8006b08:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006b0c:	fa04 f303 	lsl.w	r3, r4, r3
 8006b10:	fa22 f20c 	lsr.w	r2, r2, ip
 8006b14:	ea4e 0107 	orr.w	r1, lr, r7
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b1e:	42ae      	cmp	r6, r5
 8006b20:	bf36      	itet	cc
 8006b22:	f1a2 0508 	subcc.w	r5, r2, #8
 8006b26:	2200      	movcs	r2, #0
 8006b28:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006b2c:	3b0b      	subs	r3, #11
 8006b2e:	d012      	beq.n	8006b56 <__b2d+0x86>
 8006b30:	f1c3 0720 	rsb	r7, r3, #32
 8006b34:	fa22 f107 	lsr.w	r1, r2, r7
 8006b38:	409c      	lsls	r4, r3
 8006b3a:	430c      	orrs	r4, r1
 8006b3c:	42b5      	cmp	r5, r6
 8006b3e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006b42:	bf94      	ite	ls
 8006b44:	2400      	movls	r4, #0
 8006b46:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006b4a:	409a      	lsls	r2, r3
 8006b4c:	40fc      	lsrs	r4, r7
 8006b4e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006b52:	4322      	orrs	r2, r4
 8006b54:	e7e1      	b.n	8006b1a <__b2d+0x4a>
 8006b56:	ea44 0107 	orr.w	r1, r4, r7
 8006b5a:	e7de      	b.n	8006b1a <__b2d+0x4a>
 8006b5c:	3ff00000 	.word	0x3ff00000

08006b60 <__d2b>:
 8006b60:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006b64:	2101      	movs	r1, #1
 8006b66:	4690      	mov	r8, r2
 8006b68:	4699      	mov	r9, r3
 8006b6a:	9e08      	ldr	r6, [sp, #32]
 8006b6c:	f7ff fc1e 	bl	80063ac <_Balloc>
 8006b70:	4604      	mov	r4, r0
 8006b72:	b930      	cbnz	r0, 8006b82 <__d2b+0x22>
 8006b74:	4602      	mov	r2, r0
 8006b76:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b7a:	4b23      	ldr	r3, [pc, #140]	@ (8006c08 <__d2b+0xa8>)
 8006b7c:	4823      	ldr	r0, [pc, #140]	@ (8006c0c <__d2b+0xac>)
 8006b7e:	f7fe fca7 	bl	80054d0 <__assert_func>
 8006b82:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b8a:	b10d      	cbz	r5, 8006b90 <__d2b+0x30>
 8006b8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	f1b8 0300 	subs.w	r3, r8, #0
 8006b96:	d024      	beq.n	8006be2 <__d2b+0x82>
 8006b98:	4668      	mov	r0, sp
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	f7ff fd17 	bl	80065ce <__lo0bits>
 8006ba0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ba4:	b1d8      	cbz	r0, 8006bde <__d2b+0x7e>
 8006ba6:	f1c0 0320 	rsb	r3, r0, #32
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	40c2      	lsrs	r2, r0
 8006bb2:	6163      	str	r3, [r4, #20]
 8006bb4:	9201      	str	r2, [sp, #4]
 8006bb6:	9b01      	ldr	r3, [sp, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bf0c      	ite	eq
 8006bbc:	2201      	moveq	r2, #1
 8006bbe:	2202      	movne	r2, #2
 8006bc0:	61a3      	str	r3, [r4, #24]
 8006bc2:	6122      	str	r2, [r4, #16]
 8006bc4:	b1ad      	cbz	r5, 8006bf2 <__d2b+0x92>
 8006bc6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006bca:	4405      	add	r5, r0
 8006bcc:	6035      	str	r5, [r6, #0]
 8006bce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd4:	6018      	str	r0, [r3, #0]
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	b002      	add	sp, #8
 8006bda:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006bde:	6161      	str	r1, [r4, #20]
 8006be0:	e7e9      	b.n	8006bb6 <__d2b+0x56>
 8006be2:	a801      	add	r0, sp, #4
 8006be4:	f7ff fcf3 	bl	80065ce <__lo0bits>
 8006be8:	9b01      	ldr	r3, [sp, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	6163      	str	r3, [r4, #20]
 8006bee:	3020      	adds	r0, #32
 8006bf0:	e7e7      	b.n	8006bc2 <__d2b+0x62>
 8006bf2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006bf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bfa:	6030      	str	r0, [r6, #0]
 8006bfc:	6918      	ldr	r0, [r3, #16]
 8006bfe:	f7ff fcc7 	bl	8006590 <__hi0bits>
 8006c02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c06:	e7e4      	b.n	8006bd2 <__d2b+0x72>
 8006c08:	0800b864 	.word	0x0800b864
 8006c0c:	0800b875 	.word	0x0800b875

08006c10 <__ratio>:
 8006c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	b085      	sub	sp, #20
 8006c16:	e9cd 1000 	strd	r1, r0, [sp]
 8006c1a:	a902      	add	r1, sp, #8
 8006c1c:	f7ff ff58 	bl	8006ad0 <__b2d>
 8006c20:	468b      	mov	fp, r1
 8006c22:	4606      	mov	r6, r0
 8006c24:	460f      	mov	r7, r1
 8006c26:	9800      	ldr	r0, [sp, #0]
 8006c28:	a903      	add	r1, sp, #12
 8006c2a:	f7ff ff51 	bl	8006ad0 <__b2d>
 8006c2e:	460d      	mov	r5, r1
 8006c30:	9b01      	ldr	r3, [sp, #4]
 8006c32:	4689      	mov	r9, r1
 8006c34:	6919      	ldr	r1, [r3, #16]
 8006c36:	9b00      	ldr	r3, [sp, #0]
 8006c38:	4604      	mov	r4, r0
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	1ac9      	subs	r1, r1, r3
 8006c40:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	bfcd      	iteet	gt
 8006c4e:	463a      	movgt	r2, r7
 8006c50:	462a      	movle	r2, r5
 8006c52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c56:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006c5a:	bfd8      	it	le
 8006c5c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006c60:	464b      	mov	r3, r9
 8006c62:	4622      	mov	r2, r4
 8006c64:	4659      	mov	r1, fp
 8006c66:	f7f9 fe15 	bl	8000894 <__aeabi_ddiv>
 8006c6a:	b005      	add	sp, #20
 8006c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c70 <__copybits>:
 8006c70:	3901      	subs	r1, #1
 8006c72:	b570      	push	{r4, r5, r6, lr}
 8006c74:	1149      	asrs	r1, r1, #5
 8006c76:	6914      	ldr	r4, [r2, #16]
 8006c78:	3101      	adds	r1, #1
 8006c7a:	f102 0314 	add.w	r3, r2, #20
 8006c7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c86:	1f05      	subs	r5, r0, #4
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	d30c      	bcc.n	8006ca6 <__copybits+0x36>
 8006c8c:	1aa3      	subs	r3, r4, r2
 8006c8e:	3b11      	subs	r3, #17
 8006c90:	f023 0303 	bic.w	r3, r3, #3
 8006c94:	3211      	adds	r2, #17
 8006c96:	42a2      	cmp	r2, r4
 8006c98:	bf88      	it	hi
 8006c9a:	2300      	movhi	r3, #0
 8006c9c:	4418      	add	r0, r3
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	4288      	cmp	r0, r1
 8006ca2:	d305      	bcc.n	8006cb0 <__copybits+0x40>
 8006ca4:	bd70      	pop	{r4, r5, r6, pc}
 8006ca6:	f853 6b04 	ldr.w	r6, [r3], #4
 8006caa:	f845 6f04 	str.w	r6, [r5, #4]!
 8006cae:	e7eb      	b.n	8006c88 <__copybits+0x18>
 8006cb0:	f840 3b04 	str.w	r3, [r0], #4
 8006cb4:	e7f4      	b.n	8006ca0 <__copybits+0x30>

08006cb6 <__any_on>:
 8006cb6:	f100 0214 	add.w	r2, r0, #20
 8006cba:	6900      	ldr	r0, [r0, #16]
 8006cbc:	114b      	asrs	r3, r1, #5
 8006cbe:	4298      	cmp	r0, r3
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	db11      	blt.n	8006ce8 <__any_on+0x32>
 8006cc4:	dd0a      	ble.n	8006cdc <__any_on+0x26>
 8006cc6:	f011 011f 	ands.w	r1, r1, #31
 8006cca:	d007      	beq.n	8006cdc <__any_on+0x26>
 8006ccc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006cd0:	fa24 f001 	lsr.w	r0, r4, r1
 8006cd4:	fa00 f101 	lsl.w	r1, r0, r1
 8006cd8:	428c      	cmp	r4, r1
 8006cda:	d10b      	bne.n	8006cf4 <__any_on+0x3e>
 8006cdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d803      	bhi.n	8006cec <__any_on+0x36>
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	bd10      	pop	{r4, pc}
 8006ce8:	4603      	mov	r3, r0
 8006cea:	e7f7      	b.n	8006cdc <__any_on+0x26>
 8006cec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006cf0:	2900      	cmp	r1, #0
 8006cf2:	d0f5      	beq.n	8006ce0 <__any_on+0x2a>
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	e7f6      	b.n	8006ce6 <__any_on+0x30>

08006cf8 <sulp>:
 8006cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfc:	460f      	mov	r7, r1
 8006cfe:	4690      	mov	r8, r2
 8006d00:	f7ff fec6 	bl	8006a90 <__ulp>
 8006d04:	4604      	mov	r4, r0
 8006d06:	460d      	mov	r5, r1
 8006d08:	f1b8 0f00 	cmp.w	r8, #0
 8006d0c:	d011      	beq.n	8006d32 <sulp+0x3a>
 8006d0e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006d12:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	dd0b      	ble.n	8006d32 <sulp+0x3a>
 8006d1a:	2400      	movs	r4, #0
 8006d1c:	051b      	lsls	r3, r3, #20
 8006d1e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006d22:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006d26:	4622      	mov	r2, r4
 8006d28:	462b      	mov	r3, r5
 8006d2a:	f7f9 fc89 	bl	8000640 <__aeabi_dmul>
 8006d2e:	4604      	mov	r4, r0
 8006d30:	460d      	mov	r5, r1
 8006d32:	4620      	mov	r0, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d3a:	0000      	movs	r0, r0
 8006d3c:	0000      	movs	r0, r0
	...

08006d40 <_strtod_l>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	b09f      	sub	sp, #124	@ 0x7c
 8006d46:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006d48:	2200      	movs	r2, #0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006d4e:	f04f 0a00 	mov.w	sl, #0
 8006d52:	f04f 0b00 	mov.w	fp, #0
 8006d56:	460a      	mov	r2, r1
 8006d58:	9005      	str	r0, [sp, #20]
 8006d5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d5c:	7811      	ldrb	r1, [r2, #0]
 8006d5e:	292b      	cmp	r1, #43	@ 0x2b
 8006d60:	d048      	beq.n	8006df4 <_strtod_l+0xb4>
 8006d62:	d836      	bhi.n	8006dd2 <_strtod_l+0x92>
 8006d64:	290d      	cmp	r1, #13
 8006d66:	d830      	bhi.n	8006dca <_strtod_l+0x8a>
 8006d68:	2908      	cmp	r1, #8
 8006d6a:	d830      	bhi.n	8006dce <_strtod_l+0x8e>
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	d039      	beq.n	8006de4 <_strtod_l+0xa4>
 8006d70:	2200      	movs	r2, #0
 8006d72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006d74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d76:	782a      	ldrb	r2, [r5, #0]
 8006d78:	2a30      	cmp	r2, #48	@ 0x30
 8006d7a:	f040 80b1 	bne.w	8006ee0 <_strtod_l+0x1a0>
 8006d7e:	786a      	ldrb	r2, [r5, #1]
 8006d80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d84:	2a58      	cmp	r2, #88	@ 0x58
 8006d86:	d16c      	bne.n	8006e62 <_strtod_l+0x122>
 8006d88:	9302      	str	r3, [sp, #8]
 8006d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d8c:	4a8e      	ldr	r2, [pc, #568]	@ (8006fc8 <_strtod_l+0x288>)
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	9805      	ldr	r0, [sp, #20]
 8006d96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d98:	a919      	add	r1, sp, #100	@ 0x64
 8006d9a:	f001 f887 	bl	8007eac <__gethex>
 8006d9e:	f010 060f 	ands.w	r6, r0, #15
 8006da2:	4604      	mov	r4, r0
 8006da4:	d005      	beq.n	8006db2 <_strtod_l+0x72>
 8006da6:	2e06      	cmp	r6, #6
 8006da8:	d126      	bne.n	8006df8 <_strtod_l+0xb8>
 8006daa:	2300      	movs	r3, #0
 8006dac:	3501      	adds	r5, #1
 8006dae:	9519      	str	r5, [sp, #100]	@ 0x64
 8006db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006db2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f040 8584 	bne.w	80078c2 <_strtod_l+0xb82>
 8006dba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dbc:	b1bb      	cbz	r3, 8006dee <_strtod_l+0xae>
 8006dbe:	4650      	mov	r0, sl
 8006dc0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006dc4:	b01f      	add	sp, #124	@ 0x7c
 8006dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dca:	2920      	cmp	r1, #32
 8006dcc:	d1d0      	bne.n	8006d70 <_strtod_l+0x30>
 8006dce:	3201      	adds	r2, #1
 8006dd0:	e7c3      	b.n	8006d5a <_strtod_l+0x1a>
 8006dd2:	292d      	cmp	r1, #45	@ 0x2d
 8006dd4:	d1cc      	bne.n	8006d70 <_strtod_l+0x30>
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006dda:	1c51      	adds	r1, r2, #1
 8006ddc:	9119      	str	r1, [sp, #100]	@ 0x64
 8006dde:	7852      	ldrb	r2, [r2, #1]
 8006de0:	2a00      	cmp	r2, #0
 8006de2:	d1c7      	bne.n	8006d74 <_strtod_l+0x34>
 8006de4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006de6:	9419      	str	r4, [sp, #100]	@ 0x64
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f040 8568 	bne.w	80078be <_strtod_l+0xb7e>
 8006dee:	4650      	mov	r0, sl
 8006df0:	4659      	mov	r1, fp
 8006df2:	e7e7      	b.n	8006dc4 <_strtod_l+0x84>
 8006df4:	2100      	movs	r1, #0
 8006df6:	e7ef      	b.n	8006dd8 <_strtod_l+0x98>
 8006df8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dfa:	b13a      	cbz	r2, 8006e0c <_strtod_l+0xcc>
 8006dfc:	2135      	movs	r1, #53	@ 0x35
 8006dfe:	a81c      	add	r0, sp, #112	@ 0x70
 8006e00:	f7ff ff36 	bl	8006c70 <__copybits>
 8006e04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e06:	9805      	ldr	r0, [sp, #20]
 8006e08:	f7ff fb10 	bl	800642c <_Bfree>
 8006e0c:	3e01      	subs	r6, #1
 8006e0e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006e10:	2e04      	cmp	r6, #4
 8006e12:	d806      	bhi.n	8006e22 <_strtod_l+0xe2>
 8006e14:	e8df f006 	tbb	[pc, r6]
 8006e18:	201d0314 	.word	0x201d0314
 8006e1c:	14          	.byte	0x14
 8006e1d:	00          	.byte	0x00
 8006e1e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006e22:	05e1      	lsls	r1, r4, #23
 8006e24:	bf48      	it	mi
 8006e26:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006e2a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e2e:	0d1b      	lsrs	r3, r3, #20
 8006e30:	051b      	lsls	r3, r3, #20
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1bd      	bne.n	8006db2 <_strtod_l+0x72>
 8006e36:	f7fe faf5 	bl	8005424 <__errno>
 8006e3a:	2322      	movs	r3, #34	@ 0x22
 8006e3c:	6003      	str	r3, [r0, #0]
 8006e3e:	e7b8      	b.n	8006db2 <_strtod_l+0x72>
 8006e40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006e44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006e48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e4c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e50:	e7e7      	b.n	8006e22 <_strtod_l+0xe2>
 8006e52:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006fcc <_strtod_l+0x28c>
 8006e56:	e7e4      	b.n	8006e22 <_strtod_l+0xe2>
 8006e58:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006e5c:	f04f 3aff 	mov.w	sl, #4294967295
 8006e60:	e7df      	b.n	8006e22 <_strtod_l+0xe2>
 8006e62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	2b30      	cmp	r3, #48	@ 0x30
 8006e6c:	d0f9      	beq.n	8006e62 <_strtod_l+0x122>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d09f      	beq.n	8006db2 <_strtod_l+0x72>
 8006e72:	2301      	movs	r3, #1
 8006e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e78:	220a      	movs	r2, #10
 8006e7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	461f      	mov	r7, r3
 8006e80:	9308      	str	r3, [sp, #32]
 8006e82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e84:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e86:	7805      	ldrb	r5, [r0, #0]
 8006e88:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e8c:	b2d9      	uxtb	r1, r3
 8006e8e:	2909      	cmp	r1, #9
 8006e90:	d928      	bls.n	8006ee4 <_strtod_l+0x1a4>
 8006e92:	2201      	movs	r2, #1
 8006e94:	494e      	ldr	r1, [pc, #312]	@ (8006fd0 <_strtod_l+0x290>)
 8006e96:	f000 ff5d 	bl	8007d54 <strncmp>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d032      	beq.n	8006f04 <_strtod_l+0x1c4>
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	462a      	mov	r2, r5
 8006ea2:	4681      	mov	r9, r0
 8006ea4:	463d      	mov	r5, r7
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2a65      	cmp	r2, #101	@ 0x65
 8006eaa:	d001      	beq.n	8006eb0 <_strtod_l+0x170>
 8006eac:	2a45      	cmp	r2, #69	@ 0x45
 8006eae:	d114      	bne.n	8006eda <_strtod_l+0x19a>
 8006eb0:	b91d      	cbnz	r5, 8006eba <_strtod_l+0x17a>
 8006eb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eb4:	4302      	orrs	r2, r0
 8006eb6:	d095      	beq.n	8006de4 <_strtod_l+0xa4>
 8006eb8:	2500      	movs	r5, #0
 8006eba:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006ebc:	1c62      	adds	r2, r4, #1
 8006ebe:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ec0:	7862      	ldrb	r2, [r4, #1]
 8006ec2:	2a2b      	cmp	r2, #43	@ 0x2b
 8006ec4:	d077      	beq.n	8006fb6 <_strtod_l+0x276>
 8006ec6:	2a2d      	cmp	r2, #45	@ 0x2d
 8006ec8:	d07b      	beq.n	8006fc2 <_strtod_l+0x282>
 8006eca:	f04f 0c00 	mov.w	ip, #0
 8006ece:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006ed2:	2909      	cmp	r1, #9
 8006ed4:	f240 8082 	bls.w	8006fdc <_strtod_l+0x29c>
 8006ed8:	9419      	str	r4, [sp, #100]	@ 0x64
 8006eda:	f04f 0800 	mov.w	r8, #0
 8006ede:	e0a2      	b.n	8007026 <_strtod_l+0x2e6>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	e7c7      	b.n	8006e74 <_strtod_l+0x134>
 8006ee4:	2f08      	cmp	r7, #8
 8006ee6:	bfd5      	itete	le
 8006ee8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006eea:	9908      	ldrgt	r1, [sp, #32]
 8006eec:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ef0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006ef4:	f100 0001 	add.w	r0, r0, #1
 8006ef8:	bfd4      	ite	le
 8006efa:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006efc:	9308      	strgt	r3, [sp, #32]
 8006efe:	3701      	adds	r7, #1
 8006f00:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f02:	e7bf      	b.n	8006e84 <_strtod_l+0x144>
 8006f04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f0a:	785a      	ldrb	r2, [r3, #1]
 8006f0c:	b37f      	cbz	r7, 8006f6e <_strtod_l+0x22e>
 8006f0e:	4681      	mov	r9, r0
 8006f10:	463d      	mov	r5, r7
 8006f12:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006f16:	2b09      	cmp	r3, #9
 8006f18:	d912      	bls.n	8006f40 <_strtod_l+0x200>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e7c4      	b.n	8006ea8 <_strtod_l+0x168>
 8006f1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f20:	3001      	adds	r0, #1
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f26:	785a      	ldrb	r2, [r3, #1]
 8006f28:	2a30      	cmp	r2, #48	@ 0x30
 8006f2a:	d0f8      	beq.n	8006f1e <_strtod_l+0x1de>
 8006f2c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	f200 84cb 	bhi.w	80078cc <_strtod_l+0xb8c>
 8006f36:	4681      	mov	r9, r0
 8006f38:	2000      	movs	r0, #0
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f40:	3a30      	subs	r2, #48	@ 0x30
 8006f42:	f100 0301 	add.w	r3, r0, #1
 8006f46:	d02a      	beq.n	8006f9e <_strtod_l+0x25e>
 8006f48:	4499      	add	r9, r3
 8006f4a:	210a      	movs	r1, #10
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	eb00 0c05 	add.w	ip, r0, r5
 8006f52:	4563      	cmp	r3, ip
 8006f54:	d10d      	bne.n	8006f72 <_strtod_l+0x232>
 8006f56:	1c69      	adds	r1, r5, #1
 8006f58:	4401      	add	r1, r0
 8006f5a:	4428      	add	r0, r5
 8006f5c:	2808      	cmp	r0, #8
 8006f5e:	dc16      	bgt.n	8006f8e <_strtod_l+0x24e>
 8006f60:	230a      	movs	r3, #10
 8006f62:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f64:	fb03 2300 	mla	r3, r3, r0, r2
 8006f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e018      	b.n	8006fa0 <_strtod_l+0x260>
 8006f6e:	4638      	mov	r0, r7
 8006f70:	e7da      	b.n	8006f28 <_strtod_l+0x1e8>
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	f103 0301 	add.w	r3, r3, #1
 8006f78:	dc03      	bgt.n	8006f82 <_strtod_l+0x242>
 8006f7a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006f7c:	434e      	muls	r6, r1
 8006f7e:	960a      	str	r6, [sp, #40]	@ 0x28
 8006f80:	e7e7      	b.n	8006f52 <_strtod_l+0x212>
 8006f82:	2b10      	cmp	r3, #16
 8006f84:	bfde      	ittt	le
 8006f86:	9e08      	ldrle	r6, [sp, #32]
 8006f88:	434e      	mulle	r6, r1
 8006f8a:	9608      	strle	r6, [sp, #32]
 8006f8c:	e7e1      	b.n	8006f52 <_strtod_l+0x212>
 8006f8e:	280f      	cmp	r0, #15
 8006f90:	dceb      	bgt.n	8006f6a <_strtod_l+0x22a>
 8006f92:	230a      	movs	r3, #10
 8006f94:	9808      	ldr	r0, [sp, #32]
 8006f96:	fb03 2300 	mla	r3, r3, r0, r2
 8006f9a:	9308      	str	r3, [sp, #32]
 8006f9c:	e7e5      	b.n	8006f6a <_strtod_l+0x22a>
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	1c50      	adds	r0, r2, #1
 8006fa6:	9019      	str	r0, [sp, #100]	@ 0x64
 8006fa8:	7852      	ldrb	r2, [r2, #1]
 8006faa:	4618      	mov	r0, r3
 8006fac:	e7b1      	b.n	8006f12 <_strtod_l+0x1d2>
 8006fae:	f04f 0900 	mov.w	r9, #0
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e77d      	b.n	8006eb2 <_strtod_l+0x172>
 8006fb6:	f04f 0c00 	mov.w	ip, #0
 8006fba:	1ca2      	adds	r2, r4, #2
 8006fbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fbe:	78a2      	ldrb	r2, [r4, #2]
 8006fc0:	e785      	b.n	8006ece <_strtod_l+0x18e>
 8006fc2:	f04f 0c01 	mov.w	ip, #1
 8006fc6:	e7f8      	b.n	8006fba <_strtod_l+0x27a>
 8006fc8:	0800b9e4 	.word	0x0800b9e4
 8006fcc:	7ff00000 	.word	0x7ff00000
 8006fd0:	08009b34 	.word	0x08009b34
 8006fd4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fd6:	1c51      	adds	r1, r2, #1
 8006fd8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006fda:	7852      	ldrb	r2, [r2, #1]
 8006fdc:	2a30      	cmp	r2, #48	@ 0x30
 8006fde:	d0f9      	beq.n	8006fd4 <_strtod_l+0x294>
 8006fe0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006fe4:	2908      	cmp	r1, #8
 8006fe6:	f63f af78 	bhi.w	8006eda <_strtod_l+0x19a>
 8006fea:	f04f 080a 	mov.w	r8, #10
 8006fee:	3a30      	subs	r2, #48	@ 0x30
 8006ff0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ff2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ff4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006ff6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ff8:	1c56      	adds	r6, r2, #1
 8006ffa:	9619      	str	r6, [sp, #100]	@ 0x64
 8006ffc:	7852      	ldrb	r2, [r2, #1]
 8006ffe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007002:	f1be 0f09 	cmp.w	lr, #9
 8007006:	d939      	bls.n	800707c <_strtod_l+0x33c>
 8007008:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800700a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800700e:	1a76      	subs	r6, r6, r1
 8007010:	2e08      	cmp	r6, #8
 8007012:	dc03      	bgt.n	800701c <_strtod_l+0x2dc>
 8007014:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007016:	4588      	cmp	r8, r1
 8007018:	bfa8      	it	ge
 800701a:	4688      	movge	r8, r1
 800701c:	f1bc 0f00 	cmp.w	ip, #0
 8007020:	d001      	beq.n	8007026 <_strtod_l+0x2e6>
 8007022:	f1c8 0800 	rsb	r8, r8, #0
 8007026:	2d00      	cmp	r5, #0
 8007028:	d14e      	bne.n	80070c8 <_strtod_l+0x388>
 800702a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800702c:	4308      	orrs	r0, r1
 800702e:	f47f aec0 	bne.w	8006db2 <_strtod_l+0x72>
 8007032:	2b00      	cmp	r3, #0
 8007034:	f47f aed6 	bne.w	8006de4 <_strtod_l+0xa4>
 8007038:	2a69      	cmp	r2, #105	@ 0x69
 800703a:	d028      	beq.n	800708e <_strtod_l+0x34e>
 800703c:	dc25      	bgt.n	800708a <_strtod_l+0x34a>
 800703e:	2a49      	cmp	r2, #73	@ 0x49
 8007040:	d025      	beq.n	800708e <_strtod_l+0x34e>
 8007042:	2a4e      	cmp	r2, #78	@ 0x4e
 8007044:	f47f aece 	bne.w	8006de4 <_strtod_l+0xa4>
 8007048:	499a      	ldr	r1, [pc, #616]	@ (80072b4 <_strtod_l+0x574>)
 800704a:	a819      	add	r0, sp, #100	@ 0x64
 800704c:	f001 f950 	bl	80082f0 <__match>
 8007050:	2800      	cmp	r0, #0
 8007052:	f43f aec7 	beq.w	8006de4 <_strtod_l+0xa4>
 8007056:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b28      	cmp	r3, #40	@ 0x28
 800705c:	d12e      	bne.n	80070bc <_strtod_l+0x37c>
 800705e:	4996      	ldr	r1, [pc, #600]	@ (80072b8 <_strtod_l+0x578>)
 8007060:	aa1c      	add	r2, sp, #112	@ 0x70
 8007062:	a819      	add	r0, sp, #100	@ 0x64
 8007064:	f001 f958 	bl	8008318 <__hexnan>
 8007068:	2805      	cmp	r0, #5
 800706a:	d127      	bne.n	80070bc <_strtod_l+0x37c>
 800706c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800706e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007072:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007076:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800707a:	e69a      	b.n	8006db2 <_strtod_l+0x72>
 800707c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800707e:	fb08 2101 	mla	r1, r8, r1, r2
 8007082:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007086:	920e      	str	r2, [sp, #56]	@ 0x38
 8007088:	e7b5      	b.n	8006ff6 <_strtod_l+0x2b6>
 800708a:	2a6e      	cmp	r2, #110	@ 0x6e
 800708c:	e7da      	b.n	8007044 <_strtod_l+0x304>
 800708e:	498b      	ldr	r1, [pc, #556]	@ (80072bc <_strtod_l+0x57c>)
 8007090:	a819      	add	r0, sp, #100	@ 0x64
 8007092:	f001 f92d 	bl	80082f0 <__match>
 8007096:	2800      	cmp	r0, #0
 8007098:	f43f aea4 	beq.w	8006de4 <_strtod_l+0xa4>
 800709c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800709e:	4988      	ldr	r1, [pc, #544]	@ (80072c0 <_strtod_l+0x580>)
 80070a0:	3b01      	subs	r3, #1
 80070a2:	a819      	add	r0, sp, #100	@ 0x64
 80070a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80070a6:	f001 f923 	bl	80082f0 <__match>
 80070aa:	b910      	cbnz	r0, 80070b2 <_strtod_l+0x372>
 80070ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070ae:	3301      	adds	r3, #1
 80070b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80070b2:	f04f 0a00 	mov.w	sl, #0
 80070b6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80072c4 <_strtod_l+0x584>
 80070ba:	e67a      	b.n	8006db2 <_strtod_l+0x72>
 80070bc:	4882      	ldr	r0, [pc, #520]	@ (80072c8 <_strtod_l+0x588>)
 80070be:	f000 fe6b 	bl	8007d98 <nan>
 80070c2:	4682      	mov	sl, r0
 80070c4:	468b      	mov	fp, r1
 80070c6:	e674      	b.n	8006db2 <_strtod_l+0x72>
 80070c8:	eba8 0309 	sub.w	r3, r8, r9
 80070cc:	2f00      	cmp	r7, #0
 80070ce:	bf08      	it	eq
 80070d0:	462f      	moveq	r7, r5
 80070d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070d4:	2d10      	cmp	r5, #16
 80070d6:	462c      	mov	r4, r5
 80070d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80070da:	bfa8      	it	ge
 80070dc:	2410      	movge	r4, #16
 80070de:	f7f9 fa35 	bl	800054c <__aeabi_ui2d>
 80070e2:	2d09      	cmp	r5, #9
 80070e4:	4682      	mov	sl, r0
 80070e6:	468b      	mov	fp, r1
 80070e8:	dc11      	bgt.n	800710e <_strtod_l+0x3ce>
 80070ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f43f ae60 	beq.w	8006db2 <_strtod_l+0x72>
 80070f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f4:	dd76      	ble.n	80071e4 <_strtod_l+0x4a4>
 80070f6:	2b16      	cmp	r3, #22
 80070f8:	dc5d      	bgt.n	80071b6 <_strtod_l+0x476>
 80070fa:	4974      	ldr	r1, [pc, #464]	@ (80072cc <_strtod_l+0x58c>)
 80070fc:	4652      	mov	r2, sl
 80070fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007102:	465b      	mov	r3, fp
 8007104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007108:	f7f9 fa9a 	bl	8000640 <__aeabi_dmul>
 800710c:	e7d9      	b.n	80070c2 <_strtod_l+0x382>
 800710e:	4b6f      	ldr	r3, [pc, #444]	@ (80072cc <_strtod_l+0x58c>)
 8007110:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007114:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007118:	f7f9 fa92 	bl	8000640 <__aeabi_dmul>
 800711c:	4682      	mov	sl, r0
 800711e:	9808      	ldr	r0, [sp, #32]
 8007120:	468b      	mov	fp, r1
 8007122:	f7f9 fa13 	bl	800054c <__aeabi_ui2d>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4650      	mov	r0, sl
 800712c:	4659      	mov	r1, fp
 800712e:	f7f9 f8d1 	bl	80002d4 <__adddf3>
 8007132:	2d0f      	cmp	r5, #15
 8007134:	4682      	mov	sl, r0
 8007136:	468b      	mov	fp, r1
 8007138:	ddd7      	ble.n	80070ea <_strtod_l+0x3aa>
 800713a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800713c:	1b2c      	subs	r4, r5, r4
 800713e:	441c      	add	r4, r3
 8007140:	2c00      	cmp	r4, #0
 8007142:	f340 8096 	ble.w	8007272 <_strtod_l+0x532>
 8007146:	f014 030f 	ands.w	r3, r4, #15
 800714a:	d00a      	beq.n	8007162 <_strtod_l+0x422>
 800714c:	495f      	ldr	r1, [pc, #380]	@ (80072cc <_strtod_l+0x58c>)
 800714e:	4652      	mov	r2, sl
 8007150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007158:	465b      	mov	r3, fp
 800715a:	f7f9 fa71 	bl	8000640 <__aeabi_dmul>
 800715e:	4682      	mov	sl, r0
 8007160:	468b      	mov	fp, r1
 8007162:	f034 040f 	bics.w	r4, r4, #15
 8007166:	d073      	beq.n	8007250 <_strtod_l+0x510>
 8007168:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800716c:	dd48      	ble.n	8007200 <_strtod_l+0x4c0>
 800716e:	2400      	movs	r4, #0
 8007170:	46a0      	mov	r8, r4
 8007172:	46a1      	mov	r9, r4
 8007174:	940a      	str	r4, [sp, #40]	@ 0x28
 8007176:	2322      	movs	r3, #34	@ 0x22
 8007178:	f04f 0a00 	mov.w	sl, #0
 800717c:	9a05      	ldr	r2, [sp, #20]
 800717e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80072c4 <_strtod_l+0x584>
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007186:	2b00      	cmp	r3, #0
 8007188:	f43f ae13 	beq.w	8006db2 <_strtod_l+0x72>
 800718c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800718e:	9805      	ldr	r0, [sp, #20]
 8007190:	f7ff f94c 	bl	800642c <_Bfree>
 8007194:	4649      	mov	r1, r9
 8007196:	9805      	ldr	r0, [sp, #20]
 8007198:	f7ff f948 	bl	800642c <_Bfree>
 800719c:	4641      	mov	r1, r8
 800719e:	9805      	ldr	r0, [sp, #20]
 80071a0:	f7ff f944 	bl	800642c <_Bfree>
 80071a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071a6:	9805      	ldr	r0, [sp, #20]
 80071a8:	f7ff f940 	bl	800642c <_Bfree>
 80071ac:	4621      	mov	r1, r4
 80071ae:	9805      	ldr	r0, [sp, #20]
 80071b0:	f7ff f93c 	bl	800642c <_Bfree>
 80071b4:	e5fd      	b.n	8006db2 <_strtod_l+0x72>
 80071b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80071bc:	4293      	cmp	r3, r2
 80071be:	dbbc      	blt.n	800713a <_strtod_l+0x3fa>
 80071c0:	4c42      	ldr	r4, [pc, #264]	@ (80072cc <_strtod_l+0x58c>)
 80071c2:	f1c5 050f 	rsb	r5, r5, #15
 80071c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80071ca:	4652      	mov	r2, sl
 80071cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071d0:	465b      	mov	r3, fp
 80071d2:	f7f9 fa35 	bl	8000640 <__aeabi_dmul>
 80071d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d8:	1b5d      	subs	r5, r3, r5
 80071da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80071de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071e2:	e791      	b.n	8007108 <_strtod_l+0x3c8>
 80071e4:	3316      	adds	r3, #22
 80071e6:	dba8      	blt.n	800713a <_strtod_l+0x3fa>
 80071e8:	4b38      	ldr	r3, [pc, #224]	@ (80072cc <_strtod_l+0x58c>)
 80071ea:	eba9 0808 	sub.w	r8, r9, r8
 80071ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80071f2:	4650      	mov	r0, sl
 80071f4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80071f8:	4659      	mov	r1, fp
 80071fa:	f7f9 fb4b 	bl	8000894 <__aeabi_ddiv>
 80071fe:	e760      	b.n	80070c2 <_strtod_l+0x382>
 8007200:	4b33      	ldr	r3, [pc, #204]	@ (80072d0 <_strtod_l+0x590>)
 8007202:	4650      	mov	r0, sl
 8007204:	9308      	str	r3, [sp, #32]
 8007206:	2300      	movs	r3, #0
 8007208:	4659      	mov	r1, fp
 800720a:	461e      	mov	r6, r3
 800720c:	1124      	asrs	r4, r4, #4
 800720e:	2c01      	cmp	r4, #1
 8007210:	dc21      	bgt.n	8007256 <_strtod_l+0x516>
 8007212:	b10b      	cbz	r3, 8007218 <_strtod_l+0x4d8>
 8007214:	4682      	mov	sl, r0
 8007216:	468b      	mov	fp, r1
 8007218:	492d      	ldr	r1, [pc, #180]	@ (80072d0 <_strtod_l+0x590>)
 800721a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800721e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007222:	4652      	mov	r2, sl
 8007224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007228:	465b      	mov	r3, fp
 800722a:	f7f9 fa09 	bl	8000640 <__aeabi_dmul>
 800722e:	4b25      	ldr	r3, [pc, #148]	@ (80072c4 <_strtod_l+0x584>)
 8007230:	460a      	mov	r2, r1
 8007232:	400b      	ands	r3, r1
 8007234:	4927      	ldr	r1, [pc, #156]	@ (80072d4 <_strtod_l+0x594>)
 8007236:	4682      	mov	sl, r0
 8007238:	428b      	cmp	r3, r1
 800723a:	d898      	bhi.n	800716e <_strtod_l+0x42e>
 800723c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007240:	428b      	cmp	r3, r1
 8007242:	bf86      	itte	hi
 8007244:	f04f 3aff 	movhi.w	sl, #4294967295
 8007248:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80072d8 <_strtod_l+0x598>
 800724c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007250:	2300      	movs	r3, #0
 8007252:	9308      	str	r3, [sp, #32]
 8007254:	e07a      	b.n	800734c <_strtod_l+0x60c>
 8007256:	07e2      	lsls	r2, r4, #31
 8007258:	d505      	bpl.n	8007266 <_strtod_l+0x526>
 800725a:	9b08      	ldr	r3, [sp, #32]
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f7f9 f9ee 	bl	8000640 <__aeabi_dmul>
 8007264:	2301      	movs	r3, #1
 8007266:	9a08      	ldr	r2, [sp, #32]
 8007268:	3601      	adds	r6, #1
 800726a:	3208      	adds	r2, #8
 800726c:	1064      	asrs	r4, r4, #1
 800726e:	9208      	str	r2, [sp, #32]
 8007270:	e7cd      	b.n	800720e <_strtod_l+0x4ce>
 8007272:	d0ed      	beq.n	8007250 <_strtod_l+0x510>
 8007274:	4264      	negs	r4, r4
 8007276:	f014 020f 	ands.w	r2, r4, #15
 800727a:	d00a      	beq.n	8007292 <_strtod_l+0x552>
 800727c:	4b13      	ldr	r3, [pc, #76]	@ (80072cc <_strtod_l+0x58c>)
 800727e:	4650      	mov	r0, sl
 8007280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007284:	4659      	mov	r1, fp
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f9 fb03 	bl	8000894 <__aeabi_ddiv>
 800728e:	4682      	mov	sl, r0
 8007290:	468b      	mov	fp, r1
 8007292:	1124      	asrs	r4, r4, #4
 8007294:	d0dc      	beq.n	8007250 <_strtod_l+0x510>
 8007296:	2c1f      	cmp	r4, #31
 8007298:	dd20      	ble.n	80072dc <_strtod_l+0x59c>
 800729a:	2400      	movs	r4, #0
 800729c:	46a0      	mov	r8, r4
 800729e:	46a1      	mov	r9, r4
 80072a0:	940a      	str	r4, [sp, #40]	@ 0x28
 80072a2:	2322      	movs	r3, #34	@ 0x22
 80072a4:	9a05      	ldr	r2, [sp, #20]
 80072a6:	f04f 0a00 	mov.w	sl, #0
 80072aa:	f04f 0b00 	mov.w	fp, #0
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	e768      	b.n	8007184 <_strtod_l+0x444>
 80072b2:	bf00      	nop
 80072b4:	0800b780 	.word	0x0800b780
 80072b8:	0800b9d0 	.word	0x0800b9d0
 80072bc:	0800b778 	.word	0x0800b778
 80072c0:	0800b7eb 	.word	0x0800b7eb
 80072c4:	7ff00000 	.word	0x7ff00000
 80072c8:	08009b7a 	.word	0x08009b7a
 80072cc:	0800b908 	.word	0x0800b908
 80072d0:	0800b8e0 	.word	0x0800b8e0
 80072d4:	7ca00000 	.word	0x7ca00000
 80072d8:	7fefffff 	.word	0x7fefffff
 80072dc:	f014 0310 	ands.w	r3, r4, #16
 80072e0:	bf18      	it	ne
 80072e2:	236a      	movne	r3, #106	@ 0x6a
 80072e4:	4650      	mov	r0, sl
 80072e6:	9308      	str	r3, [sp, #32]
 80072e8:	4659      	mov	r1, fp
 80072ea:	2300      	movs	r3, #0
 80072ec:	4ea9      	ldr	r6, [pc, #676]	@ (8007594 <_strtod_l+0x854>)
 80072ee:	07e2      	lsls	r2, r4, #31
 80072f0:	d504      	bpl.n	80072fc <_strtod_l+0x5bc>
 80072f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072f6:	f7f9 f9a3 	bl	8000640 <__aeabi_dmul>
 80072fa:	2301      	movs	r3, #1
 80072fc:	1064      	asrs	r4, r4, #1
 80072fe:	f106 0608 	add.w	r6, r6, #8
 8007302:	d1f4      	bne.n	80072ee <_strtod_l+0x5ae>
 8007304:	b10b      	cbz	r3, 800730a <_strtod_l+0x5ca>
 8007306:	4682      	mov	sl, r0
 8007308:	468b      	mov	fp, r1
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	b1b3      	cbz	r3, 800733c <_strtod_l+0x5fc>
 800730e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007312:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007316:	2b00      	cmp	r3, #0
 8007318:	4659      	mov	r1, fp
 800731a:	dd0f      	ble.n	800733c <_strtod_l+0x5fc>
 800731c:	2b1f      	cmp	r3, #31
 800731e:	dd57      	ble.n	80073d0 <_strtod_l+0x690>
 8007320:	2b34      	cmp	r3, #52	@ 0x34
 8007322:	bfd8      	it	le
 8007324:	f04f 33ff 	movle.w	r3, #4294967295
 8007328:	f04f 0a00 	mov.w	sl, #0
 800732c:	bfcf      	iteee	gt
 800732e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007332:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007336:	4093      	lslle	r3, r2
 8007338:	ea03 0b01 	andle.w	fp, r3, r1
 800733c:	2200      	movs	r2, #0
 800733e:	2300      	movs	r3, #0
 8007340:	4650      	mov	r0, sl
 8007342:	4659      	mov	r1, fp
 8007344:	f7f9 fbe4 	bl	8000b10 <__aeabi_dcmpeq>
 8007348:	2800      	cmp	r0, #0
 800734a:	d1a6      	bne.n	800729a <_strtod_l+0x55a>
 800734c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800734e:	463a      	mov	r2, r7
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007354:	462b      	mov	r3, r5
 8007356:	9805      	ldr	r0, [sp, #20]
 8007358:	f7ff f8d0 	bl	80064fc <__s2b>
 800735c:	900a      	str	r0, [sp, #40]	@ 0x28
 800735e:	2800      	cmp	r0, #0
 8007360:	f43f af05 	beq.w	800716e <_strtod_l+0x42e>
 8007364:	2400      	movs	r4, #0
 8007366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007368:	eba9 0308 	sub.w	r3, r9, r8
 800736c:	2a00      	cmp	r2, #0
 800736e:	bfa8      	it	ge
 8007370:	2300      	movge	r3, #0
 8007372:	46a0      	mov	r8, r4
 8007374:	9312      	str	r3, [sp, #72]	@ 0x48
 8007376:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800737a:	9316      	str	r3, [sp, #88]	@ 0x58
 800737c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800737e:	9805      	ldr	r0, [sp, #20]
 8007380:	6859      	ldr	r1, [r3, #4]
 8007382:	f7ff f813 	bl	80063ac <_Balloc>
 8007386:	4681      	mov	r9, r0
 8007388:	2800      	cmp	r0, #0
 800738a:	f43f aef4 	beq.w	8007176 <_strtod_l+0x436>
 800738e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007390:	300c      	adds	r0, #12
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	f103 010c 	add.w	r1, r3, #12
 8007398:	3202      	adds	r2, #2
 800739a:	0092      	lsls	r2, r2, #2
 800739c:	f7fe f885 	bl	80054aa <memcpy>
 80073a0:	ab1c      	add	r3, sp, #112	@ 0x70
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	4652      	mov	r2, sl
 80073aa:	465b      	mov	r3, fp
 80073ac:	9805      	ldr	r0, [sp, #20]
 80073ae:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80073b2:	f7ff fbd5 	bl	8006b60 <__d2b>
 80073b6:	901a      	str	r0, [sp, #104]	@ 0x68
 80073b8:	2800      	cmp	r0, #0
 80073ba:	f43f aedc 	beq.w	8007176 <_strtod_l+0x436>
 80073be:	2101      	movs	r1, #1
 80073c0:	9805      	ldr	r0, [sp, #20]
 80073c2:	f7ff f931 	bl	8006628 <__i2b>
 80073c6:	4680      	mov	r8, r0
 80073c8:	b948      	cbnz	r0, 80073de <_strtod_l+0x69e>
 80073ca:	f04f 0800 	mov.w	r8, #0
 80073ce:	e6d2      	b.n	8007176 <_strtod_l+0x436>
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295
 80073d4:	fa02 f303 	lsl.w	r3, r2, r3
 80073d8:	ea03 0a0a 	and.w	sl, r3, sl
 80073dc:	e7ae      	b.n	800733c <_strtod_l+0x5fc>
 80073de:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80073e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80073e2:	2d00      	cmp	r5, #0
 80073e4:	bfab      	itete	ge
 80073e6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80073e8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80073ea:	18ef      	addge	r7, r5, r3
 80073ec:	1b5e      	sublt	r6, r3, r5
 80073ee:	9b08      	ldr	r3, [sp, #32]
 80073f0:	bfa8      	it	ge
 80073f2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80073f4:	eba5 0503 	sub.w	r5, r5, r3
 80073f8:	4415      	add	r5, r2
 80073fa:	4b67      	ldr	r3, [pc, #412]	@ (8007598 <_strtod_l+0x858>)
 80073fc:	f105 35ff 	add.w	r5, r5, #4294967295
 8007400:	bfb8      	it	lt
 8007402:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007404:	429d      	cmp	r5, r3
 8007406:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800740a:	da50      	bge.n	80074ae <_strtod_l+0x76e>
 800740c:	1b5b      	subs	r3, r3, r5
 800740e:	2b1f      	cmp	r3, #31
 8007410:	f04f 0101 	mov.w	r1, #1
 8007414:	eba2 0203 	sub.w	r2, r2, r3
 8007418:	dc3d      	bgt.n	8007496 <_strtod_l+0x756>
 800741a:	fa01 f303 	lsl.w	r3, r1, r3
 800741e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007420:	2300      	movs	r3, #0
 8007422:	9310      	str	r3, [sp, #64]	@ 0x40
 8007424:	18bd      	adds	r5, r7, r2
 8007426:	9b08      	ldr	r3, [sp, #32]
 8007428:	42af      	cmp	r7, r5
 800742a:	4416      	add	r6, r2
 800742c:	441e      	add	r6, r3
 800742e:	463b      	mov	r3, r7
 8007430:	bfa8      	it	ge
 8007432:	462b      	movge	r3, r5
 8007434:	42b3      	cmp	r3, r6
 8007436:	bfa8      	it	ge
 8007438:	4633      	movge	r3, r6
 800743a:	2b00      	cmp	r3, #0
 800743c:	bfc2      	ittt	gt
 800743e:	1aed      	subgt	r5, r5, r3
 8007440:	1af6      	subgt	r6, r6, r3
 8007442:	1aff      	subgt	r7, r7, r3
 8007444:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007446:	2b00      	cmp	r3, #0
 8007448:	dd16      	ble.n	8007478 <_strtod_l+0x738>
 800744a:	4641      	mov	r1, r8
 800744c:	461a      	mov	r2, r3
 800744e:	9805      	ldr	r0, [sp, #20]
 8007450:	f7ff f9a8 	bl	80067a4 <__pow5mult>
 8007454:	4680      	mov	r8, r0
 8007456:	2800      	cmp	r0, #0
 8007458:	d0b7      	beq.n	80073ca <_strtod_l+0x68a>
 800745a:	4601      	mov	r1, r0
 800745c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800745e:	9805      	ldr	r0, [sp, #20]
 8007460:	f7ff f8f8 	bl	8006654 <__multiply>
 8007464:	900e      	str	r0, [sp, #56]	@ 0x38
 8007466:	2800      	cmp	r0, #0
 8007468:	f43f ae85 	beq.w	8007176 <_strtod_l+0x436>
 800746c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800746e:	9805      	ldr	r0, [sp, #20]
 8007470:	f7fe ffdc 	bl	800642c <_Bfree>
 8007474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007476:	931a      	str	r3, [sp, #104]	@ 0x68
 8007478:	2d00      	cmp	r5, #0
 800747a:	dc1d      	bgt.n	80074b8 <_strtod_l+0x778>
 800747c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	dd23      	ble.n	80074ca <_strtod_l+0x78a>
 8007482:	4649      	mov	r1, r9
 8007484:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007486:	9805      	ldr	r0, [sp, #20]
 8007488:	f7ff f98c 	bl	80067a4 <__pow5mult>
 800748c:	4681      	mov	r9, r0
 800748e:	b9e0      	cbnz	r0, 80074ca <_strtod_l+0x78a>
 8007490:	f04f 0900 	mov.w	r9, #0
 8007494:	e66f      	b.n	8007176 <_strtod_l+0x436>
 8007496:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800749a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800749e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80074a2:	35e2      	adds	r5, #226	@ 0xe2
 80074a4:	fa01 f305 	lsl.w	r3, r1, r5
 80074a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80074aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80074ac:	e7ba      	b.n	8007424 <_strtod_l+0x6e4>
 80074ae:	2300      	movs	r3, #0
 80074b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80074b2:	2301      	movs	r3, #1
 80074b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074b6:	e7b5      	b.n	8007424 <_strtod_l+0x6e4>
 80074b8:	462a      	mov	r2, r5
 80074ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074bc:	9805      	ldr	r0, [sp, #20]
 80074be:	f7ff f9cb 	bl	8006858 <__lshift>
 80074c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d1d9      	bne.n	800747c <_strtod_l+0x73c>
 80074c8:	e655      	b.n	8007176 <_strtod_l+0x436>
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	dd07      	ble.n	80074de <_strtod_l+0x79e>
 80074ce:	4649      	mov	r1, r9
 80074d0:	4632      	mov	r2, r6
 80074d2:	9805      	ldr	r0, [sp, #20]
 80074d4:	f7ff f9c0 	bl	8006858 <__lshift>
 80074d8:	4681      	mov	r9, r0
 80074da:	2800      	cmp	r0, #0
 80074dc:	d0d8      	beq.n	8007490 <_strtod_l+0x750>
 80074de:	2f00      	cmp	r7, #0
 80074e0:	dd08      	ble.n	80074f4 <_strtod_l+0x7b4>
 80074e2:	4641      	mov	r1, r8
 80074e4:	463a      	mov	r2, r7
 80074e6:	9805      	ldr	r0, [sp, #20]
 80074e8:	f7ff f9b6 	bl	8006858 <__lshift>
 80074ec:	4680      	mov	r8, r0
 80074ee:	2800      	cmp	r0, #0
 80074f0:	f43f ae41 	beq.w	8007176 <_strtod_l+0x436>
 80074f4:	464a      	mov	r2, r9
 80074f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074f8:	9805      	ldr	r0, [sp, #20]
 80074fa:	f7ff fa35 	bl	8006968 <__mdiff>
 80074fe:	4604      	mov	r4, r0
 8007500:	2800      	cmp	r0, #0
 8007502:	f43f ae38 	beq.w	8007176 <_strtod_l+0x436>
 8007506:	68c3      	ldr	r3, [r0, #12]
 8007508:	4641      	mov	r1, r8
 800750a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800750c:	2300      	movs	r3, #0
 800750e:	60c3      	str	r3, [r0, #12]
 8007510:	f7ff fa0e 	bl	8006930 <__mcmp>
 8007514:	2800      	cmp	r0, #0
 8007516:	da45      	bge.n	80075a4 <_strtod_l+0x864>
 8007518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800751a:	ea53 030a 	orrs.w	r3, r3, sl
 800751e:	d16b      	bne.n	80075f8 <_strtod_l+0x8b8>
 8007520:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007524:	2b00      	cmp	r3, #0
 8007526:	d167      	bne.n	80075f8 <_strtod_l+0x8b8>
 8007528:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800752c:	0d1b      	lsrs	r3, r3, #20
 800752e:	051b      	lsls	r3, r3, #20
 8007530:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007534:	d960      	bls.n	80075f8 <_strtod_l+0x8b8>
 8007536:	6963      	ldr	r3, [r4, #20]
 8007538:	b913      	cbnz	r3, 8007540 <_strtod_l+0x800>
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	2b01      	cmp	r3, #1
 800753e:	dd5b      	ble.n	80075f8 <_strtod_l+0x8b8>
 8007540:	4621      	mov	r1, r4
 8007542:	2201      	movs	r2, #1
 8007544:	9805      	ldr	r0, [sp, #20]
 8007546:	f7ff f987 	bl	8006858 <__lshift>
 800754a:	4641      	mov	r1, r8
 800754c:	4604      	mov	r4, r0
 800754e:	f7ff f9ef 	bl	8006930 <__mcmp>
 8007552:	2800      	cmp	r0, #0
 8007554:	dd50      	ble.n	80075f8 <_strtod_l+0x8b8>
 8007556:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800755a:	9a08      	ldr	r2, [sp, #32]
 800755c:	0d1b      	lsrs	r3, r3, #20
 800755e:	051b      	lsls	r3, r3, #20
 8007560:	2a00      	cmp	r2, #0
 8007562:	d06a      	beq.n	800763a <_strtod_l+0x8fa>
 8007564:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007568:	d867      	bhi.n	800763a <_strtod_l+0x8fa>
 800756a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800756e:	f67f ae98 	bls.w	80072a2 <_strtod_l+0x562>
 8007572:	4650      	mov	r0, sl
 8007574:	4659      	mov	r1, fp
 8007576:	4b09      	ldr	r3, [pc, #36]	@ (800759c <_strtod_l+0x85c>)
 8007578:	2200      	movs	r2, #0
 800757a:	f7f9 f861 	bl	8000640 <__aeabi_dmul>
 800757e:	4b08      	ldr	r3, [pc, #32]	@ (80075a0 <_strtod_l+0x860>)
 8007580:	4682      	mov	sl, r0
 8007582:	400b      	ands	r3, r1
 8007584:	468b      	mov	fp, r1
 8007586:	2b00      	cmp	r3, #0
 8007588:	f47f ae00 	bne.w	800718c <_strtod_l+0x44c>
 800758c:	2322      	movs	r3, #34	@ 0x22
 800758e:	9a05      	ldr	r2, [sp, #20]
 8007590:	6013      	str	r3, [r2, #0]
 8007592:	e5fb      	b.n	800718c <_strtod_l+0x44c>
 8007594:	0800b9f8 	.word	0x0800b9f8
 8007598:	fffffc02 	.word	0xfffffc02
 800759c:	39500000 	.word	0x39500000
 80075a0:	7ff00000 	.word	0x7ff00000
 80075a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80075a8:	d165      	bne.n	8007676 <_strtod_l+0x936>
 80075aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80075ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075b0:	b35a      	cbz	r2, 800760a <_strtod_l+0x8ca>
 80075b2:	4a99      	ldr	r2, [pc, #612]	@ (8007818 <_strtod_l+0xad8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d12b      	bne.n	8007610 <_strtod_l+0x8d0>
 80075b8:	9b08      	ldr	r3, [sp, #32]
 80075ba:	4651      	mov	r1, sl
 80075bc:	b303      	cbz	r3, 8007600 <_strtod_l+0x8c0>
 80075be:	465a      	mov	r2, fp
 80075c0:	4b96      	ldr	r3, [pc, #600]	@ (800781c <_strtod_l+0xadc>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80075c8:	f04f 32ff 	mov.w	r2, #4294967295
 80075cc:	d81b      	bhi.n	8007606 <_strtod_l+0x8c6>
 80075ce:	0d1b      	lsrs	r3, r3, #20
 80075d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80075d4:	fa02 f303 	lsl.w	r3, r2, r3
 80075d8:	4299      	cmp	r1, r3
 80075da:	d119      	bne.n	8007610 <_strtod_l+0x8d0>
 80075dc:	4b90      	ldr	r3, [pc, #576]	@ (8007820 <_strtod_l+0xae0>)
 80075de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d102      	bne.n	80075ea <_strtod_l+0x8aa>
 80075e4:	3101      	adds	r1, #1
 80075e6:	f43f adc6 	beq.w	8007176 <_strtod_l+0x436>
 80075ea:	f04f 0a00 	mov.w	sl, #0
 80075ee:	4b8b      	ldr	r3, [pc, #556]	@ (800781c <_strtod_l+0xadc>)
 80075f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075f2:	401a      	ands	r2, r3
 80075f4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80075f8:	9b08      	ldr	r3, [sp, #32]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1b9      	bne.n	8007572 <_strtod_l+0x832>
 80075fe:	e5c5      	b.n	800718c <_strtod_l+0x44c>
 8007600:	f04f 33ff 	mov.w	r3, #4294967295
 8007604:	e7e8      	b.n	80075d8 <_strtod_l+0x898>
 8007606:	4613      	mov	r3, r2
 8007608:	e7e6      	b.n	80075d8 <_strtod_l+0x898>
 800760a:	ea53 030a 	orrs.w	r3, r3, sl
 800760e:	d0a2      	beq.n	8007556 <_strtod_l+0x816>
 8007610:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007612:	b1db      	cbz	r3, 800764c <_strtod_l+0x90c>
 8007614:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007616:	4213      	tst	r3, r2
 8007618:	d0ee      	beq.n	80075f8 <_strtod_l+0x8b8>
 800761a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800761c:	4650      	mov	r0, sl
 800761e:	4659      	mov	r1, fp
 8007620:	9a08      	ldr	r2, [sp, #32]
 8007622:	b1bb      	cbz	r3, 8007654 <_strtod_l+0x914>
 8007624:	f7ff fb68 	bl	8006cf8 <sulp>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007630:	f7f8 fe50 	bl	80002d4 <__adddf3>
 8007634:	4682      	mov	sl, r0
 8007636:	468b      	mov	fp, r1
 8007638:	e7de      	b.n	80075f8 <_strtod_l+0x8b8>
 800763a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800763e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007642:	f04f 3aff 	mov.w	sl, #4294967295
 8007646:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800764a:	e7d5      	b.n	80075f8 <_strtod_l+0x8b8>
 800764c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800764e:	ea13 0f0a 	tst.w	r3, sl
 8007652:	e7e1      	b.n	8007618 <_strtod_l+0x8d8>
 8007654:	f7ff fb50 	bl	8006cf8 <sulp>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007660:	f7f8 fe36 	bl	80002d0 <__aeabi_dsub>
 8007664:	2200      	movs	r2, #0
 8007666:	2300      	movs	r3, #0
 8007668:	4682      	mov	sl, r0
 800766a:	468b      	mov	fp, r1
 800766c:	f7f9 fa50 	bl	8000b10 <__aeabi_dcmpeq>
 8007670:	2800      	cmp	r0, #0
 8007672:	d0c1      	beq.n	80075f8 <_strtod_l+0x8b8>
 8007674:	e615      	b.n	80072a2 <_strtod_l+0x562>
 8007676:	4641      	mov	r1, r8
 8007678:	4620      	mov	r0, r4
 800767a:	f7ff fac9 	bl	8006c10 <__ratio>
 800767e:	2200      	movs	r2, #0
 8007680:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007684:	4606      	mov	r6, r0
 8007686:	460f      	mov	r7, r1
 8007688:	f7f9 fa56 	bl	8000b38 <__aeabi_dcmple>
 800768c:	2800      	cmp	r0, #0
 800768e:	d06d      	beq.n	800776c <_strtod_l+0xa2c>
 8007690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d178      	bne.n	8007788 <_strtod_l+0xa48>
 8007696:	f1ba 0f00 	cmp.w	sl, #0
 800769a:	d156      	bne.n	800774a <_strtod_l+0xa0a>
 800769c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800769e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d158      	bne.n	8007758 <_strtod_l+0xa18>
 80076a6:	2200      	movs	r2, #0
 80076a8:	4630      	mov	r0, r6
 80076aa:	4639      	mov	r1, r7
 80076ac:	4b5d      	ldr	r3, [pc, #372]	@ (8007824 <_strtod_l+0xae4>)
 80076ae:	f7f9 fa39 	bl	8000b24 <__aeabi_dcmplt>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d157      	bne.n	8007766 <_strtod_l+0xa26>
 80076b6:	4630      	mov	r0, r6
 80076b8:	4639      	mov	r1, r7
 80076ba:	2200      	movs	r2, #0
 80076bc:	4b5a      	ldr	r3, [pc, #360]	@ (8007828 <_strtod_l+0xae8>)
 80076be:	f7f8 ffbf 	bl	8000640 <__aeabi_dmul>
 80076c2:	4606      	mov	r6, r0
 80076c4:	460f      	mov	r7, r1
 80076c6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80076ca:	9606      	str	r6, [sp, #24]
 80076cc:	9307      	str	r3, [sp, #28]
 80076ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076d2:	4d52      	ldr	r5, [pc, #328]	@ (800781c <_strtod_l+0xadc>)
 80076d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80076d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076da:	401d      	ands	r5, r3
 80076dc:	4b53      	ldr	r3, [pc, #332]	@ (800782c <_strtod_l+0xaec>)
 80076de:	429d      	cmp	r5, r3
 80076e0:	f040 80aa 	bne.w	8007838 <_strtod_l+0xaf8>
 80076e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076e6:	4650      	mov	r0, sl
 80076e8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80076ec:	4659      	mov	r1, fp
 80076ee:	f7ff f9cf 	bl	8006a90 <__ulp>
 80076f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076f6:	f7f8 ffa3 	bl	8000640 <__aeabi_dmul>
 80076fa:	4652      	mov	r2, sl
 80076fc:	465b      	mov	r3, fp
 80076fe:	f7f8 fde9 	bl	80002d4 <__adddf3>
 8007702:	460b      	mov	r3, r1
 8007704:	4945      	ldr	r1, [pc, #276]	@ (800781c <_strtod_l+0xadc>)
 8007706:	4a4a      	ldr	r2, [pc, #296]	@ (8007830 <_strtod_l+0xaf0>)
 8007708:	4019      	ands	r1, r3
 800770a:	4291      	cmp	r1, r2
 800770c:	4682      	mov	sl, r0
 800770e:	d942      	bls.n	8007796 <_strtod_l+0xa56>
 8007710:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007712:	4b43      	ldr	r3, [pc, #268]	@ (8007820 <_strtod_l+0xae0>)
 8007714:	429a      	cmp	r2, r3
 8007716:	d103      	bne.n	8007720 <_strtod_l+0x9e0>
 8007718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800771a:	3301      	adds	r3, #1
 800771c:	f43f ad2b 	beq.w	8007176 <_strtod_l+0x436>
 8007720:	f04f 3aff 	mov.w	sl, #4294967295
 8007724:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007820 <_strtod_l+0xae0>
 8007728:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800772a:	9805      	ldr	r0, [sp, #20]
 800772c:	f7fe fe7e 	bl	800642c <_Bfree>
 8007730:	4649      	mov	r1, r9
 8007732:	9805      	ldr	r0, [sp, #20]
 8007734:	f7fe fe7a 	bl	800642c <_Bfree>
 8007738:	4641      	mov	r1, r8
 800773a:	9805      	ldr	r0, [sp, #20]
 800773c:	f7fe fe76 	bl	800642c <_Bfree>
 8007740:	4621      	mov	r1, r4
 8007742:	9805      	ldr	r0, [sp, #20]
 8007744:	f7fe fe72 	bl	800642c <_Bfree>
 8007748:	e618      	b.n	800737c <_strtod_l+0x63c>
 800774a:	f1ba 0f01 	cmp.w	sl, #1
 800774e:	d103      	bne.n	8007758 <_strtod_l+0xa18>
 8007750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007752:	2b00      	cmp	r3, #0
 8007754:	f43f ada5 	beq.w	80072a2 <_strtod_l+0x562>
 8007758:	2200      	movs	r2, #0
 800775a:	4b36      	ldr	r3, [pc, #216]	@ (8007834 <_strtod_l+0xaf4>)
 800775c:	2600      	movs	r6, #0
 800775e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007762:	4f30      	ldr	r7, [pc, #192]	@ (8007824 <_strtod_l+0xae4>)
 8007764:	e7b3      	b.n	80076ce <_strtod_l+0x98e>
 8007766:	2600      	movs	r6, #0
 8007768:	4f2f      	ldr	r7, [pc, #188]	@ (8007828 <_strtod_l+0xae8>)
 800776a:	e7ac      	b.n	80076c6 <_strtod_l+0x986>
 800776c:	4630      	mov	r0, r6
 800776e:	4639      	mov	r1, r7
 8007770:	4b2d      	ldr	r3, [pc, #180]	@ (8007828 <_strtod_l+0xae8>)
 8007772:	2200      	movs	r2, #0
 8007774:	f7f8 ff64 	bl	8000640 <__aeabi_dmul>
 8007778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0a1      	beq.n	80076c6 <_strtod_l+0x986>
 8007782:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007786:	e7a2      	b.n	80076ce <_strtod_l+0x98e>
 8007788:	2200      	movs	r2, #0
 800778a:	4b26      	ldr	r3, [pc, #152]	@ (8007824 <_strtod_l+0xae4>)
 800778c:	4616      	mov	r6, r2
 800778e:	461f      	mov	r7, r3
 8007790:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007794:	e79b      	b.n	80076ce <_strtod_l+0x98e>
 8007796:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800779a:	9b08      	ldr	r3, [sp, #32]
 800779c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1c1      	bne.n	8007728 <_strtod_l+0x9e8>
 80077a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077a8:	0d1b      	lsrs	r3, r3, #20
 80077aa:	051b      	lsls	r3, r3, #20
 80077ac:	429d      	cmp	r5, r3
 80077ae:	d1bb      	bne.n	8007728 <_strtod_l+0x9e8>
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7f9 fb9a 	bl	8000eec <__aeabi_d2lz>
 80077b8:	f7f8 ff14 	bl	80005e4 <__aeabi_l2d>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4630      	mov	r0, r6
 80077c2:	4639      	mov	r1, r7
 80077c4:	f7f8 fd84 	bl	80002d0 <__aeabi_dsub>
 80077c8:	460b      	mov	r3, r1
 80077ca:	4602      	mov	r2, r0
 80077cc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80077d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80077d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077d6:	ea46 060a 	orr.w	r6, r6, sl
 80077da:	431e      	orrs	r6, r3
 80077dc:	d069      	beq.n	80078b2 <_strtod_l+0xb72>
 80077de:	a30a      	add	r3, pc, #40	@ (adr r3, 8007808 <_strtod_l+0xac8>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f9 f99e 	bl	8000b24 <__aeabi_dcmplt>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f47f accf 	bne.w	800718c <_strtod_l+0x44c>
 80077ee:	a308      	add	r3, pc, #32	@ (adr r3, 8007810 <_strtod_l+0xad0>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077f8:	f7f9 f9b2 	bl	8000b60 <__aeabi_dcmpgt>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d093      	beq.n	8007728 <_strtod_l+0x9e8>
 8007800:	e4c4      	b.n	800718c <_strtod_l+0x44c>
 8007802:	bf00      	nop
 8007804:	f3af 8000 	nop.w
 8007808:	94a03595 	.word	0x94a03595
 800780c:	3fdfffff 	.word	0x3fdfffff
 8007810:	35afe535 	.word	0x35afe535
 8007814:	3fe00000 	.word	0x3fe00000
 8007818:	000fffff 	.word	0x000fffff
 800781c:	7ff00000 	.word	0x7ff00000
 8007820:	7fefffff 	.word	0x7fefffff
 8007824:	3ff00000 	.word	0x3ff00000
 8007828:	3fe00000 	.word	0x3fe00000
 800782c:	7fe00000 	.word	0x7fe00000
 8007830:	7c9fffff 	.word	0x7c9fffff
 8007834:	bff00000 	.word	0xbff00000
 8007838:	9b08      	ldr	r3, [sp, #32]
 800783a:	b323      	cbz	r3, 8007886 <_strtod_l+0xb46>
 800783c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007840:	d821      	bhi.n	8007886 <_strtod_l+0xb46>
 8007842:	a327      	add	r3, pc, #156	@ (adr r3, 80078e0 <_strtod_l+0xba0>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	4630      	mov	r0, r6
 800784a:	4639      	mov	r1, r7
 800784c:	f7f9 f974 	bl	8000b38 <__aeabi_dcmple>
 8007850:	b1a0      	cbz	r0, 800787c <_strtod_l+0xb3c>
 8007852:	4639      	mov	r1, r7
 8007854:	4630      	mov	r0, r6
 8007856:	f7f9 f9cb 	bl	8000bf0 <__aeabi_d2uiz>
 800785a:	2801      	cmp	r0, #1
 800785c:	bf38      	it	cc
 800785e:	2001      	movcc	r0, #1
 8007860:	f7f8 fe74 	bl	800054c <__aeabi_ui2d>
 8007864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007866:	4606      	mov	r6, r0
 8007868:	460f      	mov	r7, r1
 800786a:	b9fb      	cbnz	r3, 80078ac <_strtod_l+0xb6c>
 800786c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007870:	9014      	str	r0, [sp, #80]	@ 0x50
 8007872:	9315      	str	r3, [sp, #84]	@ 0x54
 8007874:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007878:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800787c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800787e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007882:	1b5b      	subs	r3, r3, r5
 8007884:	9311      	str	r3, [sp, #68]	@ 0x44
 8007886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800788a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800788e:	f7ff f8ff 	bl	8006a90 <__ulp>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4650      	mov	r0, sl
 8007898:	4659      	mov	r1, fp
 800789a:	f7f8 fed1 	bl	8000640 <__aeabi_dmul>
 800789e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80078a2:	f7f8 fd17 	bl	80002d4 <__adddf3>
 80078a6:	4682      	mov	sl, r0
 80078a8:	468b      	mov	fp, r1
 80078aa:	e776      	b.n	800779a <_strtod_l+0xa5a>
 80078ac:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80078b0:	e7e0      	b.n	8007874 <_strtod_l+0xb34>
 80078b2:	a30d      	add	r3, pc, #52	@ (adr r3, 80078e8 <_strtod_l+0xba8>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f7f9 f934 	bl	8000b24 <__aeabi_dcmplt>
 80078bc:	e79e      	b.n	80077fc <_strtod_l+0xabc>
 80078be:	2300      	movs	r3, #0
 80078c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078c4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	f7ff ba77 	b.w	8006dba <_strtod_l+0x7a>
 80078cc:	2a65      	cmp	r2, #101	@ 0x65
 80078ce:	f43f ab6e 	beq.w	8006fae <_strtod_l+0x26e>
 80078d2:	2a45      	cmp	r2, #69	@ 0x45
 80078d4:	f43f ab6b 	beq.w	8006fae <_strtod_l+0x26e>
 80078d8:	2301      	movs	r3, #1
 80078da:	f7ff bba6 	b.w	800702a <_strtod_l+0x2ea>
 80078de:	bf00      	nop
 80078e0:	ffc00000 	.word	0xffc00000
 80078e4:	41dfffff 	.word	0x41dfffff
 80078e8:	94a03595 	.word	0x94a03595
 80078ec:	3fcfffff 	.word	0x3fcfffff

080078f0 <_strtod_r>:
 80078f0:	4b01      	ldr	r3, [pc, #4]	@ (80078f8 <_strtod_r+0x8>)
 80078f2:	f7ff ba25 	b.w	8006d40 <_strtod_l>
 80078f6:	bf00      	nop
 80078f8:	20000084 	.word	0x20000084

080078fc <__ssputs_r>:
 80078fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	461f      	mov	r7, r3
 8007902:	688e      	ldr	r6, [r1, #8]
 8007904:	4682      	mov	sl, r0
 8007906:	42be      	cmp	r6, r7
 8007908:	460c      	mov	r4, r1
 800790a:	4690      	mov	r8, r2
 800790c:	680b      	ldr	r3, [r1, #0]
 800790e:	d82d      	bhi.n	800796c <__ssputs_r+0x70>
 8007910:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007914:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007918:	d026      	beq.n	8007968 <__ssputs_r+0x6c>
 800791a:	6965      	ldr	r5, [r4, #20]
 800791c:	6909      	ldr	r1, [r1, #16]
 800791e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007922:	eba3 0901 	sub.w	r9, r3, r1
 8007926:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800792a:	1c7b      	adds	r3, r7, #1
 800792c:	444b      	add	r3, r9
 800792e:	106d      	asrs	r5, r5, #1
 8007930:	429d      	cmp	r5, r3
 8007932:	bf38      	it	cc
 8007934:	461d      	movcc	r5, r3
 8007936:	0553      	lsls	r3, r2, #21
 8007938:	d527      	bpl.n	800798a <__ssputs_r+0x8e>
 800793a:	4629      	mov	r1, r5
 800793c:	f7fe fcaa 	bl	8006294 <_malloc_r>
 8007940:	4606      	mov	r6, r0
 8007942:	b360      	cbz	r0, 800799e <__ssputs_r+0xa2>
 8007944:	464a      	mov	r2, r9
 8007946:	6921      	ldr	r1, [r4, #16]
 8007948:	f7fd fdaf 	bl	80054aa <memcpy>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	6126      	str	r6, [r4, #16]
 800795a:	444e      	add	r6, r9
 800795c:	6026      	str	r6, [r4, #0]
 800795e:	463e      	mov	r6, r7
 8007960:	6165      	str	r5, [r4, #20]
 8007962:	eba5 0509 	sub.w	r5, r5, r9
 8007966:	60a5      	str	r5, [r4, #8]
 8007968:	42be      	cmp	r6, r7
 800796a:	d900      	bls.n	800796e <__ssputs_r+0x72>
 800796c:	463e      	mov	r6, r7
 800796e:	4632      	mov	r2, r6
 8007970:	4641      	mov	r1, r8
 8007972:	6820      	ldr	r0, [r4, #0]
 8007974:	f000 f9d4 	bl	8007d20 <memmove>
 8007978:	2000      	movs	r0, #0
 800797a:	68a3      	ldr	r3, [r4, #8]
 800797c:	1b9b      	subs	r3, r3, r6
 800797e:	60a3      	str	r3, [r4, #8]
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	4433      	add	r3, r6
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	462a      	mov	r2, r5
 800798c:	f000 fd71 	bl	8008472 <_realloc_r>
 8007990:	4606      	mov	r6, r0
 8007992:	2800      	cmp	r0, #0
 8007994:	d1e0      	bne.n	8007958 <__ssputs_r+0x5c>
 8007996:	4650      	mov	r0, sl
 8007998:	6921      	ldr	r1, [r4, #16]
 800799a:	f7fe fc09 	bl	80061b0 <_free_r>
 800799e:	230c      	movs	r3, #12
 80079a0:	f8ca 3000 	str.w	r3, [sl]
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295
 80079aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	e7e9      	b.n	8007986 <__ssputs_r+0x8a>
	...

080079b4 <_svfiprintf_r>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	4698      	mov	r8, r3
 80079ba:	898b      	ldrh	r3, [r1, #12]
 80079bc:	4607      	mov	r7, r0
 80079be:	061b      	lsls	r3, r3, #24
 80079c0:	460d      	mov	r5, r1
 80079c2:	4614      	mov	r4, r2
 80079c4:	b09d      	sub	sp, #116	@ 0x74
 80079c6:	d510      	bpl.n	80079ea <_svfiprintf_r+0x36>
 80079c8:	690b      	ldr	r3, [r1, #16]
 80079ca:	b973      	cbnz	r3, 80079ea <_svfiprintf_r+0x36>
 80079cc:	2140      	movs	r1, #64	@ 0x40
 80079ce:	f7fe fc61 	bl	8006294 <_malloc_r>
 80079d2:	6028      	str	r0, [r5, #0]
 80079d4:	6128      	str	r0, [r5, #16]
 80079d6:	b930      	cbnz	r0, 80079e6 <_svfiprintf_r+0x32>
 80079d8:	230c      	movs	r3, #12
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	b01d      	add	sp, #116	@ 0x74
 80079e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e6:	2340      	movs	r3, #64	@ 0x40
 80079e8:	616b      	str	r3, [r5, #20]
 80079ea:	2300      	movs	r3, #0
 80079ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ee:	2320      	movs	r3, #32
 80079f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079f4:	2330      	movs	r3, #48	@ 0x30
 80079f6:	f04f 0901 	mov.w	r9, #1
 80079fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80079fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007b98 <_svfiprintf_r+0x1e4>
 8007a02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a06:	4623      	mov	r3, r4
 8007a08:	469a      	mov	sl, r3
 8007a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a0e:	b10a      	cbz	r2, 8007a14 <_svfiprintf_r+0x60>
 8007a10:	2a25      	cmp	r2, #37	@ 0x25
 8007a12:	d1f9      	bne.n	8007a08 <_svfiprintf_r+0x54>
 8007a14:	ebba 0b04 	subs.w	fp, sl, r4
 8007a18:	d00b      	beq.n	8007a32 <_svfiprintf_r+0x7e>
 8007a1a:	465b      	mov	r3, fp
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	4629      	mov	r1, r5
 8007a20:	4638      	mov	r0, r7
 8007a22:	f7ff ff6b 	bl	80078fc <__ssputs_r>
 8007a26:	3001      	adds	r0, #1
 8007a28:	f000 80a7 	beq.w	8007b7a <_svfiprintf_r+0x1c6>
 8007a2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a2e:	445a      	add	r2, fp
 8007a30:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a32:	f89a 3000 	ldrb.w	r3, [sl]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 809f 	beq.w	8007b7a <_svfiprintf_r+0x1c6>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a46:	f10a 0a01 	add.w	sl, sl, #1
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	9307      	str	r3, [sp, #28]
 8007a4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a52:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a54:	4654      	mov	r4, sl
 8007a56:	2205      	movs	r2, #5
 8007a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5c:	484e      	ldr	r0, [pc, #312]	@ (8007b98 <_svfiprintf_r+0x1e4>)
 8007a5e:	f7fd fd16 	bl	800548e <memchr>
 8007a62:	9a04      	ldr	r2, [sp, #16]
 8007a64:	b9d8      	cbnz	r0, 8007a9e <_svfiprintf_r+0xea>
 8007a66:	06d0      	lsls	r0, r2, #27
 8007a68:	bf44      	itt	mi
 8007a6a:	2320      	movmi	r3, #32
 8007a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a70:	0711      	lsls	r1, r2, #28
 8007a72:	bf44      	itt	mi
 8007a74:	232b      	movmi	r3, #43	@ 0x2b
 8007a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a80:	d015      	beq.n	8007aae <_svfiprintf_r+0xfa>
 8007a82:	4654      	mov	r4, sl
 8007a84:	2000      	movs	r0, #0
 8007a86:	f04f 0c0a 	mov.w	ip, #10
 8007a8a:	9a07      	ldr	r2, [sp, #28]
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a92:	3b30      	subs	r3, #48	@ 0x30
 8007a94:	2b09      	cmp	r3, #9
 8007a96:	d94b      	bls.n	8007b30 <_svfiprintf_r+0x17c>
 8007a98:	b1b0      	cbz	r0, 8007ac8 <_svfiprintf_r+0x114>
 8007a9a:	9207      	str	r2, [sp, #28]
 8007a9c:	e014      	b.n	8007ac8 <_svfiprintf_r+0x114>
 8007a9e:	eba0 0308 	sub.w	r3, r0, r8
 8007aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	46a2      	mov	sl, r4
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	e7d2      	b.n	8007a54 <_svfiprintf_r+0xa0>
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	1d19      	adds	r1, r3, #4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	9103      	str	r1, [sp, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	bfbb      	ittet	lt
 8007aba:	425b      	neglt	r3, r3
 8007abc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac0:	9307      	strge	r3, [sp, #28]
 8007ac2:	9307      	strlt	r3, [sp, #28]
 8007ac4:	bfb8      	it	lt
 8007ac6:	9204      	strlt	r2, [sp, #16]
 8007ac8:	7823      	ldrb	r3, [r4, #0]
 8007aca:	2b2e      	cmp	r3, #46	@ 0x2e
 8007acc:	d10a      	bne.n	8007ae4 <_svfiprintf_r+0x130>
 8007ace:	7863      	ldrb	r3, [r4, #1]
 8007ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ad2:	d132      	bne.n	8007b3a <_svfiprintf_r+0x186>
 8007ad4:	9b03      	ldr	r3, [sp, #12]
 8007ad6:	3402      	adds	r4, #2
 8007ad8:	1d1a      	adds	r2, r3, #4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	9203      	str	r2, [sp, #12]
 8007ade:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ae2:	9305      	str	r3, [sp, #20]
 8007ae4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007b9c <_svfiprintf_r+0x1e8>
 8007ae8:	2203      	movs	r2, #3
 8007aea:	4650      	mov	r0, sl
 8007aec:	7821      	ldrb	r1, [r4, #0]
 8007aee:	f7fd fcce 	bl	800548e <memchr>
 8007af2:	b138      	cbz	r0, 8007b04 <_svfiprintf_r+0x150>
 8007af4:	2240      	movs	r2, #64	@ 0x40
 8007af6:	9b04      	ldr	r3, [sp, #16]
 8007af8:	eba0 000a 	sub.w	r0, r0, sl
 8007afc:	4082      	lsls	r2, r0
 8007afe:	4313      	orrs	r3, r2
 8007b00:	3401      	adds	r4, #1
 8007b02:	9304      	str	r3, [sp, #16]
 8007b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b08:	2206      	movs	r2, #6
 8007b0a:	4825      	ldr	r0, [pc, #148]	@ (8007ba0 <_svfiprintf_r+0x1ec>)
 8007b0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b10:	f7fd fcbd 	bl	800548e <memchr>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d036      	beq.n	8007b86 <_svfiprintf_r+0x1d2>
 8007b18:	4b22      	ldr	r3, [pc, #136]	@ (8007ba4 <_svfiprintf_r+0x1f0>)
 8007b1a:	bb1b      	cbnz	r3, 8007b64 <_svfiprintf_r+0x1b0>
 8007b1c:	9b03      	ldr	r3, [sp, #12]
 8007b1e:	3307      	adds	r3, #7
 8007b20:	f023 0307 	bic.w	r3, r3, #7
 8007b24:	3308      	adds	r3, #8
 8007b26:	9303      	str	r3, [sp, #12]
 8007b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b2a:	4433      	add	r3, r6
 8007b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b2e:	e76a      	b.n	8007a06 <_svfiprintf_r+0x52>
 8007b30:	460c      	mov	r4, r1
 8007b32:	2001      	movs	r0, #1
 8007b34:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b38:	e7a8      	b.n	8007a8c <_svfiprintf_r+0xd8>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f04f 0c0a 	mov.w	ip, #10
 8007b40:	4619      	mov	r1, r3
 8007b42:	3401      	adds	r4, #1
 8007b44:	9305      	str	r3, [sp, #20]
 8007b46:	4620      	mov	r0, r4
 8007b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b4c:	3a30      	subs	r2, #48	@ 0x30
 8007b4e:	2a09      	cmp	r2, #9
 8007b50:	d903      	bls.n	8007b5a <_svfiprintf_r+0x1a6>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0c6      	beq.n	8007ae4 <_svfiprintf_r+0x130>
 8007b56:	9105      	str	r1, [sp, #20]
 8007b58:	e7c4      	b.n	8007ae4 <_svfiprintf_r+0x130>
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b62:	e7f0      	b.n	8007b46 <_svfiprintf_r+0x192>
 8007b64:	ab03      	add	r3, sp, #12
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	462a      	mov	r2, r5
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba8 <_svfiprintf_r+0x1f4>)
 8007b6e:	a904      	add	r1, sp, #16
 8007b70:	f7fc fd12 	bl	8004598 <_printf_float>
 8007b74:	1c42      	adds	r2, r0, #1
 8007b76:	4606      	mov	r6, r0
 8007b78:	d1d6      	bne.n	8007b28 <_svfiprintf_r+0x174>
 8007b7a:	89ab      	ldrh	r3, [r5, #12]
 8007b7c:	065b      	lsls	r3, r3, #25
 8007b7e:	f53f af2d 	bmi.w	80079dc <_svfiprintf_r+0x28>
 8007b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b84:	e72c      	b.n	80079e0 <_svfiprintf_r+0x2c>
 8007b86:	ab03      	add	r3, sp, #12
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ba8 <_svfiprintf_r+0x1f4>)
 8007b90:	a904      	add	r1, sp, #16
 8007b92:	f7fc ff9f 	bl	8004ad4 <_printf_i>
 8007b96:	e7ed      	b.n	8007b74 <_svfiprintf_r+0x1c0>
 8007b98:	0800ba20 	.word	0x0800ba20
 8007b9c:	0800ba26 	.word	0x0800ba26
 8007ba0:	0800ba2a 	.word	0x0800ba2a
 8007ba4:	08004599 	.word	0x08004599
 8007ba8:	080078fd 	.word	0x080078fd

08007bac <__sflush_r>:
 8007bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	0716      	lsls	r6, r2, #28
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	d454      	bmi.n	8007c64 <__sflush_r+0xb8>
 8007bba:	684b      	ldr	r3, [r1, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dc02      	bgt.n	8007bc6 <__sflush_r+0x1a>
 8007bc0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dd48      	ble.n	8007c58 <__sflush_r+0xac>
 8007bc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bc8:	2e00      	cmp	r6, #0
 8007bca:	d045      	beq.n	8007c58 <__sflush_r+0xac>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bd2:	682f      	ldr	r7, [r5, #0]
 8007bd4:	6a21      	ldr	r1, [r4, #32]
 8007bd6:	602b      	str	r3, [r5, #0]
 8007bd8:	d030      	beq.n	8007c3c <__sflush_r+0x90>
 8007bda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	0759      	lsls	r1, r3, #29
 8007be0:	d505      	bpl.n	8007bee <__sflush_r+0x42>
 8007be2:	6863      	ldr	r3, [r4, #4]
 8007be4:	1ad2      	subs	r2, r2, r3
 8007be6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007be8:	b10b      	cbz	r3, 8007bee <__sflush_r+0x42>
 8007bea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bec:	1ad2      	subs	r2, r2, r3
 8007bee:	2300      	movs	r3, #0
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bf4:	6a21      	ldr	r1, [r4, #32]
 8007bf6:	47b0      	blx	r6
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	d106      	bne.n	8007c0c <__sflush_r+0x60>
 8007bfe:	6829      	ldr	r1, [r5, #0]
 8007c00:	291d      	cmp	r1, #29
 8007c02:	d82b      	bhi.n	8007c5c <__sflush_r+0xb0>
 8007c04:	4a28      	ldr	r2, [pc, #160]	@ (8007ca8 <__sflush_r+0xfc>)
 8007c06:	410a      	asrs	r2, r1
 8007c08:	07d6      	lsls	r6, r2, #31
 8007c0a:	d427      	bmi.n	8007c5c <__sflush_r+0xb0>
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	6062      	str	r2, [r4, #4]
 8007c10:	6922      	ldr	r2, [r4, #16]
 8007c12:	04d9      	lsls	r1, r3, #19
 8007c14:	6022      	str	r2, [r4, #0]
 8007c16:	d504      	bpl.n	8007c22 <__sflush_r+0x76>
 8007c18:	1c42      	adds	r2, r0, #1
 8007c1a:	d101      	bne.n	8007c20 <__sflush_r+0x74>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	b903      	cbnz	r3, 8007c22 <__sflush_r+0x76>
 8007c20:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c24:	602f      	str	r7, [r5, #0]
 8007c26:	b1b9      	cbz	r1, 8007c58 <__sflush_r+0xac>
 8007c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c2c:	4299      	cmp	r1, r3
 8007c2e:	d002      	beq.n	8007c36 <__sflush_r+0x8a>
 8007c30:	4628      	mov	r0, r5
 8007c32:	f7fe fabd 	bl	80061b0 <_free_r>
 8007c36:	2300      	movs	r3, #0
 8007c38:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c3a:	e00d      	b.n	8007c58 <__sflush_r+0xac>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	4628      	mov	r0, r5
 8007c40:	47b0      	blx	r6
 8007c42:	4602      	mov	r2, r0
 8007c44:	1c50      	adds	r0, r2, #1
 8007c46:	d1c9      	bne.n	8007bdc <__sflush_r+0x30>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0c6      	beq.n	8007bdc <__sflush_r+0x30>
 8007c4e:	2b1d      	cmp	r3, #29
 8007c50:	d001      	beq.n	8007c56 <__sflush_r+0xaa>
 8007c52:	2b16      	cmp	r3, #22
 8007c54:	d11d      	bne.n	8007c92 <__sflush_r+0xe6>
 8007c56:	602f      	str	r7, [r5, #0]
 8007c58:	2000      	movs	r0, #0
 8007c5a:	e021      	b.n	8007ca0 <__sflush_r+0xf4>
 8007c5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c60:	b21b      	sxth	r3, r3
 8007c62:	e01a      	b.n	8007c9a <__sflush_r+0xee>
 8007c64:	690f      	ldr	r7, [r1, #16]
 8007c66:	2f00      	cmp	r7, #0
 8007c68:	d0f6      	beq.n	8007c58 <__sflush_r+0xac>
 8007c6a:	0793      	lsls	r3, r2, #30
 8007c6c:	bf18      	it	ne
 8007c6e:	2300      	movne	r3, #0
 8007c70:	680e      	ldr	r6, [r1, #0]
 8007c72:	bf08      	it	eq
 8007c74:	694b      	ldreq	r3, [r1, #20]
 8007c76:	1bf6      	subs	r6, r6, r7
 8007c78:	600f      	str	r7, [r1, #0]
 8007c7a:	608b      	str	r3, [r1, #8]
 8007c7c:	2e00      	cmp	r6, #0
 8007c7e:	ddeb      	ble.n	8007c58 <__sflush_r+0xac>
 8007c80:	4633      	mov	r3, r6
 8007c82:	463a      	mov	r2, r7
 8007c84:	4628      	mov	r0, r5
 8007c86:	6a21      	ldr	r1, [r4, #32]
 8007c88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c8c:	47e0      	blx	ip
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	dc07      	bgt.n	8007ca2 <__sflush_r+0xf6>
 8007c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ca2:	4407      	add	r7, r0
 8007ca4:	1a36      	subs	r6, r6, r0
 8007ca6:	e7e9      	b.n	8007c7c <__sflush_r+0xd0>
 8007ca8:	dfbffffe 	.word	0xdfbffffe

08007cac <_fflush_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	690b      	ldr	r3, [r1, #16]
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	b913      	cbnz	r3, 8007cbc <_fflush_r+0x10>
 8007cb6:	2500      	movs	r5, #0
 8007cb8:	4628      	mov	r0, r5
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	b118      	cbz	r0, 8007cc6 <_fflush_r+0x1a>
 8007cbe:	6a03      	ldr	r3, [r0, #32]
 8007cc0:	b90b      	cbnz	r3, 8007cc6 <_fflush_r+0x1a>
 8007cc2:	f7fd fac3 	bl	800524c <__sinit>
 8007cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0f3      	beq.n	8007cb6 <_fflush_r+0xa>
 8007cce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cd0:	07d0      	lsls	r0, r2, #31
 8007cd2:	d404      	bmi.n	8007cde <_fflush_r+0x32>
 8007cd4:	0599      	lsls	r1, r3, #22
 8007cd6:	d402      	bmi.n	8007cde <_fflush_r+0x32>
 8007cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cda:	f7fd fbce 	bl	800547a <__retarget_lock_acquire_recursive>
 8007cde:	4628      	mov	r0, r5
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	f7ff ff63 	bl	8007bac <__sflush_r>
 8007ce6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ce8:	4605      	mov	r5, r0
 8007cea:	07da      	lsls	r2, r3, #31
 8007cec:	d4e4      	bmi.n	8007cb8 <_fflush_r+0xc>
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	059b      	lsls	r3, r3, #22
 8007cf2:	d4e1      	bmi.n	8007cb8 <_fflush_r+0xc>
 8007cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cf6:	f7fd fbc1 	bl	800547c <__retarget_lock_release_recursive>
 8007cfa:	e7dd      	b.n	8007cb8 <_fflush_r+0xc>

08007cfc <fiprintf>:
 8007cfc:	b40e      	push	{r1, r2, r3}
 8007cfe:	b503      	push	{r0, r1, lr}
 8007d00:	4601      	mov	r1, r0
 8007d02:	ab03      	add	r3, sp, #12
 8007d04:	4805      	ldr	r0, [pc, #20]	@ (8007d1c <fiprintf+0x20>)
 8007d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d0a:	6800      	ldr	r0, [r0, #0]
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	f000 fc13 	bl	8008538 <_vfiprintf_r>
 8007d12:	b002      	add	sp, #8
 8007d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d18:	b003      	add	sp, #12
 8007d1a:	4770      	bx	lr
 8007d1c:	20000034 	.word	0x20000034

08007d20 <memmove>:
 8007d20:	4288      	cmp	r0, r1
 8007d22:	b510      	push	{r4, lr}
 8007d24:	eb01 0402 	add.w	r4, r1, r2
 8007d28:	d902      	bls.n	8007d30 <memmove+0x10>
 8007d2a:	4284      	cmp	r4, r0
 8007d2c:	4623      	mov	r3, r4
 8007d2e:	d807      	bhi.n	8007d40 <memmove+0x20>
 8007d30:	1e43      	subs	r3, r0, #1
 8007d32:	42a1      	cmp	r1, r4
 8007d34:	d008      	beq.n	8007d48 <memmove+0x28>
 8007d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d3e:	e7f8      	b.n	8007d32 <memmove+0x12>
 8007d40:	4601      	mov	r1, r0
 8007d42:	4402      	add	r2, r0
 8007d44:	428a      	cmp	r2, r1
 8007d46:	d100      	bne.n	8007d4a <memmove+0x2a>
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d52:	e7f7      	b.n	8007d44 <memmove+0x24>

08007d54 <strncmp>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	b16a      	cbz	r2, 8007d74 <strncmp+0x20>
 8007d58:	3901      	subs	r1, #1
 8007d5a:	1884      	adds	r4, r0, r2
 8007d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d103      	bne.n	8007d70 <strncmp+0x1c>
 8007d68:	42a0      	cmp	r0, r4
 8007d6a:	d001      	beq.n	8007d70 <strncmp+0x1c>
 8007d6c:	2a00      	cmp	r2, #0
 8007d6e:	d1f5      	bne.n	8007d5c <strncmp+0x8>
 8007d70:	1ad0      	subs	r0, r2, r3
 8007d72:	bd10      	pop	{r4, pc}
 8007d74:	4610      	mov	r0, r2
 8007d76:	e7fc      	b.n	8007d72 <strncmp+0x1e>

08007d78 <_sbrk_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4d05      	ldr	r5, [pc, #20]	@ (8007d94 <_sbrk_r+0x1c>)
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	602b      	str	r3, [r5, #0]
 8007d84:	f7fa f9d4 	bl	8002130 <_sbrk>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_sbrk_r+0x1a>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_sbrk_r+0x1a>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	20000a0c 	.word	0x20000a0c

08007d98 <nan>:
 8007d98:	2000      	movs	r0, #0
 8007d9a:	4901      	ldr	r1, [pc, #4]	@ (8007da0 <nan+0x8>)
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	7ff80000 	.word	0x7ff80000

08007da4 <abort>:
 8007da4:	2006      	movs	r0, #6
 8007da6:	b508      	push	{r3, lr}
 8007da8:	f000 fd9a 	bl	80088e0 <raise>
 8007dac:	2001      	movs	r0, #1
 8007dae:	f7fa f991 	bl	80020d4 <_exit>

08007db2 <_calloc_r>:
 8007db2:	b570      	push	{r4, r5, r6, lr}
 8007db4:	fba1 5402 	umull	r5, r4, r1, r2
 8007db8:	b93c      	cbnz	r4, 8007dca <_calloc_r+0x18>
 8007dba:	4629      	mov	r1, r5
 8007dbc:	f7fe fa6a 	bl	8006294 <_malloc_r>
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	b928      	cbnz	r0, 8007dd0 <_calloc_r+0x1e>
 8007dc4:	2600      	movs	r6, #0
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	bd70      	pop	{r4, r5, r6, pc}
 8007dca:	220c      	movs	r2, #12
 8007dcc:	6002      	str	r2, [r0, #0]
 8007dce:	e7f9      	b.n	8007dc4 <_calloc_r+0x12>
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	f7fd fad3 	bl	800537e <memset>
 8007dd8:	e7f5      	b.n	8007dc6 <_calloc_r+0x14>

08007dda <rshift>:
 8007dda:	6903      	ldr	r3, [r0, #16]
 8007ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007de0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007de4:	f100 0414 	add.w	r4, r0, #20
 8007de8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007dec:	dd46      	ble.n	8007e7c <rshift+0xa2>
 8007dee:	f011 011f 	ands.w	r1, r1, #31
 8007df2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007df6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007dfa:	d10c      	bne.n	8007e16 <rshift+0x3c>
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	f100 0710 	add.w	r7, r0, #16
 8007e02:	42b1      	cmp	r1, r6
 8007e04:	d335      	bcc.n	8007e72 <rshift+0x98>
 8007e06:	1a9b      	subs	r3, r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	1eea      	subs	r2, r5, #3
 8007e0c:	4296      	cmp	r6, r2
 8007e0e:	bf38      	it	cc
 8007e10:	2300      	movcc	r3, #0
 8007e12:	4423      	add	r3, r4
 8007e14:	e015      	b.n	8007e42 <rshift+0x68>
 8007e16:	46a1      	mov	r9, r4
 8007e18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e1c:	f1c1 0820 	rsb	r8, r1, #32
 8007e20:	40cf      	lsrs	r7, r1
 8007e22:	f105 0e04 	add.w	lr, r5, #4
 8007e26:	4576      	cmp	r6, lr
 8007e28:	46f4      	mov	ip, lr
 8007e2a:	d816      	bhi.n	8007e5a <rshift+0x80>
 8007e2c:	1a9a      	subs	r2, r3, r2
 8007e2e:	0092      	lsls	r2, r2, #2
 8007e30:	3a04      	subs	r2, #4
 8007e32:	3501      	adds	r5, #1
 8007e34:	42ae      	cmp	r6, r5
 8007e36:	bf38      	it	cc
 8007e38:	2200      	movcc	r2, #0
 8007e3a:	18a3      	adds	r3, r4, r2
 8007e3c:	50a7      	str	r7, [r4, r2]
 8007e3e:	b107      	cbz	r7, 8007e42 <rshift+0x68>
 8007e40:	3304      	adds	r3, #4
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	eba3 0204 	sub.w	r2, r3, r4
 8007e48:	bf08      	it	eq
 8007e4a:	2300      	moveq	r3, #0
 8007e4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e50:	6102      	str	r2, [r0, #16]
 8007e52:	bf08      	it	eq
 8007e54:	6143      	streq	r3, [r0, #20]
 8007e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e5a:	f8dc c000 	ldr.w	ip, [ip]
 8007e5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e62:	ea4c 0707 	orr.w	r7, ip, r7
 8007e66:	f849 7b04 	str.w	r7, [r9], #4
 8007e6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e6e:	40cf      	lsrs	r7, r1
 8007e70:	e7d9      	b.n	8007e26 <rshift+0x4c>
 8007e72:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e76:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e7a:	e7c2      	b.n	8007e02 <rshift+0x28>
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	e7e0      	b.n	8007e42 <rshift+0x68>

08007e80 <__hexdig_fun>:
 8007e80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d802      	bhi.n	8007e8e <__hexdig_fun+0xe>
 8007e88:	3820      	subs	r0, #32
 8007e8a:	b2c0      	uxtb	r0, r0
 8007e8c:	4770      	bx	lr
 8007e8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d801      	bhi.n	8007e9a <__hexdig_fun+0x1a>
 8007e96:	3847      	subs	r0, #71	@ 0x47
 8007e98:	e7f7      	b.n	8007e8a <__hexdig_fun+0xa>
 8007e9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007e9e:	2b05      	cmp	r3, #5
 8007ea0:	d801      	bhi.n	8007ea6 <__hexdig_fun+0x26>
 8007ea2:	3827      	subs	r0, #39	@ 0x27
 8007ea4:	e7f1      	b.n	8007e8a <__hexdig_fun+0xa>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	4770      	bx	lr
	...

08007eac <__gethex>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	468a      	mov	sl, r1
 8007eb2:	4690      	mov	r8, r2
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	9302      	str	r3, [sp, #8]
 8007eb8:	680b      	ldr	r3, [r1, #0]
 8007eba:	9001      	str	r0, [sp, #4]
 8007ebc:	1c9c      	adds	r4, r3, #2
 8007ebe:	46a1      	mov	r9, r4
 8007ec0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007ec4:	2830      	cmp	r0, #48	@ 0x30
 8007ec6:	d0fa      	beq.n	8007ebe <__gethex+0x12>
 8007ec8:	eba9 0303 	sub.w	r3, r9, r3
 8007ecc:	f1a3 0b02 	sub.w	fp, r3, #2
 8007ed0:	f7ff ffd6 	bl	8007e80 <__hexdig_fun>
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d168      	bne.n	8007fac <__gethex+0x100>
 8007eda:	2201      	movs	r2, #1
 8007edc:	4648      	mov	r0, r9
 8007ede:	499f      	ldr	r1, [pc, #636]	@ (800815c <__gethex+0x2b0>)
 8007ee0:	f7ff ff38 	bl	8007d54 <strncmp>
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d167      	bne.n	8007fba <__gethex+0x10e>
 8007eea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007eee:	4626      	mov	r6, r4
 8007ef0:	f7ff ffc6 	bl	8007e80 <__hexdig_fun>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d062      	beq.n	8007fbe <__gethex+0x112>
 8007ef8:	4623      	mov	r3, r4
 8007efa:	7818      	ldrb	r0, [r3, #0]
 8007efc:	4699      	mov	r9, r3
 8007efe:	2830      	cmp	r0, #48	@ 0x30
 8007f00:	f103 0301 	add.w	r3, r3, #1
 8007f04:	d0f9      	beq.n	8007efa <__gethex+0x4e>
 8007f06:	f7ff ffbb 	bl	8007e80 <__hexdig_fun>
 8007f0a:	fab0 f580 	clz	r5, r0
 8007f0e:	f04f 0b01 	mov.w	fp, #1
 8007f12:	096d      	lsrs	r5, r5, #5
 8007f14:	464a      	mov	r2, r9
 8007f16:	4616      	mov	r6, r2
 8007f18:	7830      	ldrb	r0, [r6, #0]
 8007f1a:	3201      	adds	r2, #1
 8007f1c:	f7ff ffb0 	bl	8007e80 <__hexdig_fun>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d1f8      	bne.n	8007f16 <__gethex+0x6a>
 8007f24:	2201      	movs	r2, #1
 8007f26:	4630      	mov	r0, r6
 8007f28:	498c      	ldr	r1, [pc, #560]	@ (800815c <__gethex+0x2b0>)
 8007f2a:	f7ff ff13 	bl	8007d54 <strncmp>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d13f      	bne.n	8007fb2 <__gethex+0x106>
 8007f32:	b944      	cbnz	r4, 8007f46 <__gethex+0x9a>
 8007f34:	1c74      	adds	r4, r6, #1
 8007f36:	4622      	mov	r2, r4
 8007f38:	4616      	mov	r6, r2
 8007f3a:	7830      	ldrb	r0, [r6, #0]
 8007f3c:	3201      	adds	r2, #1
 8007f3e:	f7ff ff9f 	bl	8007e80 <__hexdig_fun>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d1f8      	bne.n	8007f38 <__gethex+0x8c>
 8007f46:	1ba4      	subs	r4, r4, r6
 8007f48:	00a7      	lsls	r7, r4, #2
 8007f4a:	7833      	ldrb	r3, [r6, #0]
 8007f4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007f50:	2b50      	cmp	r3, #80	@ 0x50
 8007f52:	d13e      	bne.n	8007fd2 <__gethex+0x126>
 8007f54:	7873      	ldrb	r3, [r6, #1]
 8007f56:	2b2b      	cmp	r3, #43	@ 0x2b
 8007f58:	d033      	beq.n	8007fc2 <__gethex+0x116>
 8007f5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8007f5c:	d034      	beq.n	8007fc8 <__gethex+0x11c>
 8007f5e:	2400      	movs	r4, #0
 8007f60:	1c71      	adds	r1, r6, #1
 8007f62:	7808      	ldrb	r0, [r1, #0]
 8007f64:	f7ff ff8c 	bl	8007e80 <__hexdig_fun>
 8007f68:	1e43      	subs	r3, r0, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b18      	cmp	r3, #24
 8007f6e:	d830      	bhi.n	8007fd2 <__gethex+0x126>
 8007f70:	f1a0 0210 	sub.w	r2, r0, #16
 8007f74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f78:	f7ff ff82 	bl	8007e80 <__hexdig_fun>
 8007f7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007f80:	fa5f fc8c 	uxtb.w	ip, ip
 8007f84:	f1bc 0f18 	cmp.w	ip, #24
 8007f88:	f04f 030a 	mov.w	r3, #10
 8007f8c:	d91e      	bls.n	8007fcc <__gethex+0x120>
 8007f8e:	b104      	cbz	r4, 8007f92 <__gethex+0xe6>
 8007f90:	4252      	negs	r2, r2
 8007f92:	4417      	add	r7, r2
 8007f94:	f8ca 1000 	str.w	r1, [sl]
 8007f98:	b1ed      	cbz	r5, 8007fd6 <__gethex+0x12a>
 8007f9a:	f1bb 0f00 	cmp.w	fp, #0
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2506      	moveq	r5, #6
 8007fa2:	2500      	movne	r5, #0
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	b005      	add	sp, #20
 8007fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fac:	2500      	movs	r5, #0
 8007fae:	462c      	mov	r4, r5
 8007fb0:	e7b0      	b.n	8007f14 <__gethex+0x68>
 8007fb2:	2c00      	cmp	r4, #0
 8007fb4:	d1c7      	bne.n	8007f46 <__gethex+0x9a>
 8007fb6:	4627      	mov	r7, r4
 8007fb8:	e7c7      	b.n	8007f4a <__gethex+0x9e>
 8007fba:	464e      	mov	r6, r9
 8007fbc:	462f      	mov	r7, r5
 8007fbe:	2501      	movs	r5, #1
 8007fc0:	e7c3      	b.n	8007f4a <__gethex+0x9e>
 8007fc2:	2400      	movs	r4, #0
 8007fc4:	1cb1      	adds	r1, r6, #2
 8007fc6:	e7cc      	b.n	8007f62 <__gethex+0xb6>
 8007fc8:	2401      	movs	r4, #1
 8007fca:	e7fb      	b.n	8007fc4 <__gethex+0x118>
 8007fcc:	fb03 0002 	mla	r0, r3, r2, r0
 8007fd0:	e7ce      	b.n	8007f70 <__gethex+0xc4>
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	e7de      	b.n	8007f94 <__gethex+0xe8>
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	eba6 0309 	sub.w	r3, r6, r9
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	2b07      	cmp	r3, #7
 8007fe0:	dc0a      	bgt.n	8007ff8 <__gethex+0x14c>
 8007fe2:	9801      	ldr	r0, [sp, #4]
 8007fe4:	f7fe f9e2 	bl	80063ac <_Balloc>
 8007fe8:	4604      	mov	r4, r0
 8007fea:	b940      	cbnz	r0, 8007ffe <__gethex+0x152>
 8007fec:	4602      	mov	r2, r0
 8007fee:	21e4      	movs	r1, #228	@ 0xe4
 8007ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8008160 <__gethex+0x2b4>)
 8007ff2:	485c      	ldr	r0, [pc, #368]	@ (8008164 <__gethex+0x2b8>)
 8007ff4:	f7fd fa6c 	bl	80054d0 <__assert_func>
 8007ff8:	3101      	adds	r1, #1
 8007ffa:	105b      	asrs	r3, r3, #1
 8007ffc:	e7ef      	b.n	8007fde <__gethex+0x132>
 8007ffe:	2300      	movs	r3, #0
 8008000:	f100 0a14 	add.w	sl, r0, #20
 8008004:	4655      	mov	r5, sl
 8008006:	469b      	mov	fp, r3
 8008008:	45b1      	cmp	r9, r6
 800800a:	d337      	bcc.n	800807c <__gethex+0x1d0>
 800800c:	f845 bb04 	str.w	fp, [r5], #4
 8008010:	eba5 050a 	sub.w	r5, r5, sl
 8008014:	10ad      	asrs	r5, r5, #2
 8008016:	6125      	str	r5, [r4, #16]
 8008018:	4658      	mov	r0, fp
 800801a:	f7fe fab9 	bl	8006590 <__hi0bits>
 800801e:	016d      	lsls	r5, r5, #5
 8008020:	f8d8 6000 	ldr.w	r6, [r8]
 8008024:	1a2d      	subs	r5, r5, r0
 8008026:	42b5      	cmp	r5, r6
 8008028:	dd54      	ble.n	80080d4 <__gethex+0x228>
 800802a:	1bad      	subs	r5, r5, r6
 800802c:	4629      	mov	r1, r5
 800802e:	4620      	mov	r0, r4
 8008030:	f7fe fe41 	bl	8006cb6 <__any_on>
 8008034:	4681      	mov	r9, r0
 8008036:	b178      	cbz	r0, 8008058 <__gethex+0x1ac>
 8008038:	f04f 0901 	mov.w	r9, #1
 800803c:	1e6b      	subs	r3, r5, #1
 800803e:	1159      	asrs	r1, r3, #5
 8008040:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008044:	f003 021f 	and.w	r2, r3, #31
 8008048:	fa09 f202 	lsl.w	r2, r9, r2
 800804c:	420a      	tst	r2, r1
 800804e:	d003      	beq.n	8008058 <__gethex+0x1ac>
 8008050:	454b      	cmp	r3, r9
 8008052:	dc36      	bgt.n	80080c2 <__gethex+0x216>
 8008054:	f04f 0902 	mov.w	r9, #2
 8008058:	4629      	mov	r1, r5
 800805a:	4620      	mov	r0, r4
 800805c:	f7ff febd 	bl	8007dda <rshift>
 8008060:	442f      	add	r7, r5
 8008062:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008066:	42bb      	cmp	r3, r7
 8008068:	da42      	bge.n	80080f0 <__gethex+0x244>
 800806a:	4621      	mov	r1, r4
 800806c:	9801      	ldr	r0, [sp, #4]
 800806e:	f7fe f9dd 	bl	800642c <_Bfree>
 8008072:	2300      	movs	r3, #0
 8008074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008076:	25a3      	movs	r5, #163	@ 0xa3
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	e793      	b.n	8007fa4 <__gethex+0xf8>
 800807c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008080:	2a2e      	cmp	r2, #46	@ 0x2e
 8008082:	d012      	beq.n	80080aa <__gethex+0x1fe>
 8008084:	2b20      	cmp	r3, #32
 8008086:	d104      	bne.n	8008092 <__gethex+0x1e6>
 8008088:	f845 bb04 	str.w	fp, [r5], #4
 800808c:	f04f 0b00 	mov.w	fp, #0
 8008090:	465b      	mov	r3, fp
 8008092:	7830      	ldrb	r0, [r6, #0]
 8008094:	9303      	str	r3, [sp, #12]
 8008096:	f7ff fef3 	bl	8007e80 <__hexdig_fun>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	f000 000f 	and.w	r0, r0, #15
 80080a0:	4098      	lsls	r0, r3
 80080a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80080a6:	3304      	adds	r3, #4
 80080a8:	e7ae      	b.n	8008008 <__gethex+0x15c>
 80080aa:	45b1      	cmp	r9, r6
 80080ac:	d8ea      	bhi.n	8008084 <__gethex+0x1d8>
 80080ae:	2201      	movs	r2, #1
 80080b0:	4630      	mov	r0, r6
 80080b2:	492a      	ldr	r1, [pc, #168]	@ (800815c <__gethex+0x2b0>)
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	f7ff fe4d 	bl	8007d54 <strncmp>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1e1      	bne.n	8008084 <__gethex+0x1d8>
 80080c0:	e7a2      	b.n	8008008 <__gethex+0x15c>
 80080c2:	4620      	mov	r0, r4
 80080c4:	1ea9      	subs	r1, r5, #2
 80080c6:	f7fe fdf6 	bl	8006cb6 <__any_on>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d0c2      	beq.n	8008054 <__gethex+0x1a8>
 80080ce:	f04f 0903 	mov.w	r9, #3
 80080d2:	e7c1      	b.n	8008058 <__gethex+0x1ac>
 80080d4:	da09      	bge.n	80080ea <__gethex+0x23e>
 80080d6:	1b75      	subs	r5, r6, r5
 80080d8:	4621      	mov	r1, r4
 80080da:	462a      	mov	r2, r5
 80080dc:	9801      	ldr	r0, [sp, #4]
 80080de:	f7fe fbbb 	bl	8006858 <__lshift>
 80080e2:	4604      	mov	r4, r0
 80080e4:	1b7f      	subs	r7, r7, r5
 80080e6:	f100 0a14 	add.w	sl, r0, #20
 80080ea:	f04f 0900 	mov.w	r9, #0
 80080ee:	e7b8      	b.n	8008062 <__gethex+0x1b6>
 80080f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80080f4:	42bd      	cmp	r5, r7
 80080f6:	dd6f      	ble.n	80081d8 <__gethex+0x32c>
 80080f8:	1bed      	subs	r5, r5, r7
 80080fa:	42ae      	cmp	r6, r5
 80080fc:	dc34      	bgt.n	8008168 <__gethex+0x2bc>
 80080fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d022      	beq.n	800814c <__gethex+0x2a0>
 8008106:	2b03      	cmp	r3, #3
 8008108:	d024      	beq.n	8008154 <__gethex+0x2a8>
 800810a:	2b01      	cmp	r3, #1
 800810c:	d115      	bne.n	800813a <__gethex+0x28e>
 800810e:	42ae      	cmp	r6, r5
 8008110:	d113      	bne.n	800813a <__gethex+0x28e>
 8008112:	2e01      	cmp	r6, #1
 8008114:	d10b      	bne.n	800812e <__gethex+0x282>
 8008116:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800811a:	9a02      	ldr	r2, [sp, #8]
 800811c:	2562      	movs	r5, #98	@ 0x62
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	2301      	movs	r3, #1
 8008122:	6123      	str	r3, [r4, #16]
 8008124:	f8ca 3000 	str.w	r3, [sl]
 8008128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800812a:	601c      	str	r4, [r3, #0]
 800812c:	e73a      	b.n	8007fa4 <__gethex+0xf8>
 800812e:	4620      	mov	r0, r4
 8008130:	1e71      	subs	r1, r6, #1
 8008132:	f7fe fdc0 	bl	8006cb6 <__any_on>
 8008136:	2800      	cmp	r0, #0
 8008138:	d1ed      	bne.n	8008116 <__gethex+0x26a>
 800813a:	4621      	mov	r1, r4
 800813c:	9801      	ldr	r0, [sp, #4]
 800813e:	f7fe f975 	bl	800642c <_Bfree>
 8008142:	2300      	movs	r3, #0
 8008144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008146:	2550      	movs	r5, #80	@ 0x50
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	e72b      	b.n	8007fa4 <__gethex+0xf8>
 800814c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f3      	bne.n	800813a <__gethex+0x28e>
 8008152:	e7e0      	b.n	8008116 <__gethex+0x26a>
 8008154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1dd      	bne.n	8008116 <__gethex+0x26a>
 800815a:	e7ee      	b.n	800813a <__gethex+0x28e>
 800815c:	08009b34 	.word	0x08009b34
 8008160:	0800b864 	.word	0x0800b864
 8008164:	0800ba37 	.word	0x0800ba37
 8008168:	1e6f      	subs	r7, r5, #1
 800816a:	f1b9 0f00 	cmp.w	r9, #0
 800816e:	d130      	bne.n	80081d2 <__gethex+0x326>
 8008170:	b127      	cbz	r7, 800817c <__gethex+0x2d0>
 8008172:	4639      	mov	r1, r7
 8008174:	4620      	mov	r0, r4
 8008176:	f7fe fd9e 	bl	8006cb6 <__any_on>
 800817a:	4681      	mov	r9, r0
 800817c:	2301      	movs	r3, #1
 800817e:	4629      	mov	r1, r5
 8008180:	1b76      	subs	r6, r6, r5
 8008182:	2502      	movs	r5, #2
 8008184:	117a      	asrs	r2, r7, #5
 8008186:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800818a:	f007 071f 	and.w	r7, r7, #31
 800818e:	40bb      	lsls	r3, r7
 8008190:	4213      	tst	r3, r2
 8008192:	4620      	mov	r0, r4
 8008194:	bf18      	it	ne
 8008196:	f049 0902 	orrne.w	r9, r9, #2
 800819a:	f7ff fe1e 	bl	8007dda <rshift>
 800819e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80081a2:	f1b9 0f00 	cmp.w	r9, #0
 80081a6:	d047      	beq.n	8008238 <__gethex+0x38c>
 80081a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d015      	beq.n	80081dc <__gethex+0x330>
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d017      	beq.n	80081e4 <__gethex+0x338>
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d109      	bne.n	80081cc <__gethex+0x320>
 80081b8:	f019 0f02 	tst.w	r9, #2
 80081bc:	d006      	beq.n	80081cc <__gethex+0x320>
 80081be:	f8da 3000 	ldr.w	r3, [sl]
 80081c2:	ea49 0903 	orr.w	r9, r9, r3
 80081c6:	f019 0f01 	tst.w	r9, #1
 80081ca:	d10e      	bne.n	80081ea <__gethex+0x33e>
 80081cc:	f045 0510 	orr.w	r5, r5, #16
 80081d0:	e032      	b.n	8008238 <__gethex+0x38c>
 80081d2:	f04f 0901 	mov.w	r9, #1
 80081d6:	e7d1      	b.n	800817c <__gethex+0x2d0>
 80081d8:	2501      	movs	r5, #1
 80081da:	e7e2      	b.n	80081a2 <__gethex+0x2f6>
 80081dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081de:	f1c3 0301 	rsb	r3, r3, #1
 80081e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <__gethex+0x320>
 80081ea:	f04f 0c00 	mov.w	ip, #0
 80081ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80081f2:	f104 0314 	add.w	r3, r4, #20
 80081f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80081fa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80081fe:	4618      	mov	r0, r3
 8008200:	f853 2b04 	ldr.w	r2, [r3], #4
 8008204:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008208:	d01b      	beq.n	8008242 <__gethex+0x396>
 800820a:	3201      	adds	r2, #1
 800820c:	6002      	str	r2, [r0, #0]
 800820e:	2d02      	cmp	r5, #2
 8008210:	f104 0314 	add.w	r3, r4, #20
 8008214:	d13c      	bne.n	8008290 <__gethex+0x3e4>
 8008216:	f8d8 2000 	ldr.w	r2, [r8]
 800821a:	3a01      	subs	r2, #1
 800821c:	42b2      	cmp	r2, r6
 800821e:	d109      	bne.n	8008234 <__gethex+0x388>
 8008220:	2201      	movs	r2, #1
 8008222:	1171      	asrs	r1, r6, #5
 8008224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008228:	f006 061f 	and.w	r6, r6, #31
 800822c:	fa02 f606 	lsl.w	r6, r2, r6
 8008230:	421e      	tst	r6, r3
 8008232:	d13a      	bne.n	80082aa <__gethex+0x3fe>
 8008234:	f045 0520 	orr.w	r5, r5, #32
 8008238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823a:	601c      	str	r4, [r3, #0]
 800823c:	9b02      	ldr	r3, [sp, #8]
 800823e:	601f      	str	r7, [r3, #0]
 8008240:	e6b0      	b.n	8007fa4 <__gethex+0xf8>
 8008242:	4299      	cmp	r1, r3
 8008244:	f843 cc04 	str.w	ip, [r3, #-4]
 8008248:	d8d9      	bhi.n	80081fe <__gethex+0x352>
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	459b      	cmp	fp, r3
 800824e:	db17      	blt.n	8008280 <__gethex+0x3d4>
 8008250:	6861      	ldr	r1, [r4, #4]
 8008252:	9801      	ldr	r0, [sp, #4]
 8008254:	3101      	adds	r1, #1
 8008256:	f7fe f8a9 	bl	80063ac <_Balloc>
 800825a:	4681      	mov	r9, r0
 800825c:	b918      	cbnz	r0, 8008266 <__gethex+0x3ba>
 800825e:	4602      	mov	r2, r0
 8008260:	2184      	movs	r1, #132	@ 0x84
 8008262:	4b19      	ldr	r3, [pc, #100]	@ (80082c8 <__gethex+0x41c>)
 8008264:	e6c5      	b.n	8007ff2 <__gethex+0x146>
 8008266:	6922      	ldr	r2, [r4, #16]
 8008268:	f104 010c 	add.w	r1, r4, #12
 800826c:	3202      	adds	r2, #2
 800826e:	0092      	lsls	r2, r2, #2
 8008270:	300c      	adds	r0, #12
 8008272:	f7fd f91a 	bl	80054aa <memcpy>
 8008276:	4621      	mov	r1, r4
 8008278:	9801      	ldr	r0, [sp, #4]
 800827a:	f7fe f8d7 	bl	800642c <_Bfree>
 800827e:	464c      	mov	r4, r9
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	6122      	str	r2, [r4, #16]
 8008286:	2201      	movs	r2, #1
 8008288:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800828c:	615a      	str	r2, [r3, #20]
 800828e:	e7be      	b.n	800820e <__gethex+0x362>
 8008290:	6922      	ldr	r2, [r4, #16]
 8008292:	455a      	cmp	r2, fp
 8008294:	dd0b      	ble.n	80082ae <__gethex+0x402>
 8008296:	2101      	movs	r1, #1
 8008298:	4620      	mov	r0, r4
 800829a:	f7ff fd9e 	bl	8007dda <rshift>
 800829e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082a2:	3701      	adds	r7, #1
 80082a4:	42bb      	cmp	r3, r7
 80082a6:	f6ff aee0 	blt.w	800806a <__gethex+0x1be>
 80082aa:	2501      	movs	r5, #1
 80082ac:	e7c2      	b.n	8008234 <__gethex+0x388>
 80082ae:	f016 061f 	ands.w	r6, r6, #31
 80082b2:	d0fa      	beq.n	80082aa <__gethex+0x3fe>
 80082b4:	4453      	add	r3, sl
 80082b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80082ba:	f7fe f969 	bl	8006590 <__hi0bits>
 80082be:	f1c6 0620 	rsb	r6, r6, #32
 80082c2:	42b0      	cmp	r0, r6
 80082c4:	dbe7      	blt.n	8008296 <__gethex+0x3ea>
 80082c6:	e7f0      	b.n	80082aa <__gethex+0x3fe>
 80082c8:	0800b864 	.word	0x0800b864

080082cc <L_shift>:
 80082cc:	f1c2 0208 	rsb	r2, r2, #8
 80082d0:	0092      	lsls	r2, r2, #2
 80082d2:	b570      	push	{r4, r5, r6, lr}
 80082d4:	f1c2 0620 	rsb	r6, r2, #32
 80082d8:	6843      	ldr	r3, [r0, #4]
 80082da:	6804      	ldr	r4, [r0, #0]
 80082dc:	fa03 f506 	lsl.w	r5, r3, r6
 80082e0:	432c      	orrs	r4, r5
 80082e2:	40d3      	lsrs	r3, r2
 80082e4:	6004      	str	r4, [r0, #0]
 80082e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80082ea:	4288      	cmp	r0, r1
 80082ec:	d3f4      	bcc.n	80082d8 <L_shift+0xc>
 80082ee:	bd70      	pop	{r4, r5, r6, pc}

080082f0 <__match>:
 80082f0:	b530      	push	{r4, r5, lr}
 80082f2:	6803      	ldr	r3, [r0, #0]
 80082f4:	3301      	adds	r3, #1
 80082f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082fa:	b914      	cbnz	r4, 8008302 <__match+0x12>
 80082fc:	6003      	str	r3, [r0, #0]
 80082fe:	2001      	movs	r0, #1
 8008300:	bd30      	pop	{r4, r5, pc}
 8008302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008306:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800830a:	2d19      	cmp	r5, #25
 800830c:	bf98      	it	ls
 800830e:	3220      	addls	r2, #32
 8008310:	42a2      	cmp	r2, r4
 8008312:	d0f0      	beq.n	80082f6 <__match+0x6>
 8008314:	2000      	movs	r0, #0
 8008316:	e7f3      	b.n	8008300 <__match+0x10>

08008318 <__hexnan>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	2500      	movs	r5, #0
 800831e:	680b      	ldr	r3, [r1, #0]
 8008320:	4682      	mov	sl, r0
 8008322:	115e      	asrs	r6, r3, #5
 8008324:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008328:	f013 031f 	ands.w	r3, r3, #31
 800832c:	bf18      	it	ne
 800832e:	3604      	addne	r6, #4
 8008330:	1f37      	subs	r7, r6, #4
 8008332:	4690      	mov	r8, r2
 8008334:	46b9      	mov	r9, r7
 8008336:	463c      	mov	r4, r7
 8008338:	46ab      	mov	fp, r5
 800833a:	b087      	sub	sp, #28
 800833c:	6801      	ldr	r1, [r0, #0]
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	f846 5c04 	str.w	r5, [r6, #-4]
 8008344:	9502      	str	r5, [sp, #8]
 8008346:	784a      	ldrb	r2, [r1, #1]
 8008348:	1c4b      	adds	r3, r1, #1
 800834a:	9303      	str	r3, [sp, #12]
 800834c:	b342      	cbz	r2, 80083a0 <__hexnan+0x88>
 800834e:	4610      	mov	r0, r2
 8008350:	9105      	str	r1, [sp, #20]
 8008352:	9204      	str	r2, [sp, #16]
 8008354:	f7ff fd94 	bl	8007e80 <__hexdig_fun>
 8008358:	2800      	cmp	r0, #0
 800835a:	d151      	bne.n	8008400 <__hexnan+0xe8>
 800835c:	9a04      	ldr	r2, [sp, #16]
 800835e:	9905      	ldr	r1, [sp, #20]
 8008360:	2a20      	cmp	r2, #32
 8008362:	d818      	bhi.n	8008396 <__hexnan+0x7e>
 8008364:	9b02      	ldr	r3, [sp, #8]
 8008366:	459b      	cmp	fp, r3
 8008368:	dd13      	ble.n	8008392 <__hexnan+0x7a>
 800836a:	454c      	cmp	r4, r9
 800836c:	d206      	bcs.n	800837c <__hexnan+0x64>
 800836e:	2d07      	cmp	r5, #7
 8008370:	dc04      	bgt.n	800837c <__hexnan+0x64>
 8008372:	462a      	mov	r2, r5
 8008374:	4649      	mov	r1, r9
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff ffa8 	bl	80082cc <L_shift>
 800837c:	4544      	cmp	r4, r8
 800837e:	d952      	bls.n	8008426 <__hexnan+0x10e>
 8008380:	2300      	movs	r3, #0
 8008382:	f1a4 0904 	sub.w	r9, r4, #4
 8008386:	f844 3c04 	str.w	r3, [r4, #-4]
 800838a:	461d      	mov	r5, r3
 800838c:	464c      	mov	r4, r9
 800838e:	f8cd b008 	str.w	fp, [sp, #8]
 8008392:	9903      	ldr	r1, [sp, #12]
 8008394:	e7d7      	b.n	8008346 <__hexnan+0x2e>
 8008396:	2a29      	cmp	r2, #41	@ 0x29
 8008398:	d157      	bne.n	800844a <__hexnan+0x132>
 800839a:	3102      	adds	r1, #2
 800839c:	f8ca 1000 	str.w	r1, [sl]
 80083a0:	f1bb 0f00 	cmp.w	fp, #0
 80083a4:	d051      	beq.n	800844a <__hexnan+0x132>
 80083a6:	454c      	cmp	r4, r9
 80083a8:	d206      	bcs.n	80083b8 <__hexnan+0xa0>
 80083aa:	2d07      	cmp	r5, #7
 80083ac:	dc04      	bgt.n	80083b8 <__hexnan+0xa0>
 80083ae:	462a      	mov	r2, r5
 80083b0:	4649      	mov	r1, r9
 80083b2:	4620      	mov	r0, r4
 80083b4:	f7ff ff8a 	bl	80082cc <L_shift>
 80083b8:	4544      	cmp	r4, r8
 80083ba:	d936      	bls.n	800842a <__hexnan+0x112>
 80083bc:	4623      	mov	r3, r4
 80083be:	f1a8 0204 	sub.w	r2, r8, #4
 80083c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80083c6:	429f      	cmp	r7, r3
 80083c8:	f842 1f04 	str.w	r1, [r2, #4]!
 80083cc:	d2f9      	bcs.n	80083c2 <__hexnan+0xaa>
 80083ce:	1b3b      	subs	r3, r7, r4
 80083d0:	f023 0303 	bic.w	r3, r3, #3
 80083d4:	3304      	adds	r3, #4
 80083d6:	3401      	adds	r4, #1
 80083d8:	3e03      	subs	r6, #3
 80083da:	42b4      	cmp	r4, r6
 80083dc:	bf88      	it	hi
 80083de:	2304      	movhi	r3, #4
 80083e0:	2200      	movs	r2, #0
 80083e2:	4443      	add	r3, r8
 80083e4:	f843 2b04 	str.w	r2, [r3], #4
 80083e8:	429f      	cmp	r7, r3
 80083ea:	d2fb      	bcs.n	80083e4 <__hexnan+0xcc>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	b91b      	cbnz	r3, 80083f8 <__hexnan+0xe0>
 80083f0:	4547      	cmp	r7, r8
 80083f2:	d128      	bne.n	8008446 <__hexnan+0x12e>
 80083f4:	2301      	movs	r3, #1
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	2005      	movs	r0, #5
 80083fa:	b007      	add	sp, #28
 80083fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008400:	3501      	adds	r5, #1
 8008402:	2d08      	cmp	r5, #8
 8008404:	f10b 0b01 	add.w	fp, fp, #1
 8008408:	dd06      	ble.n	8008418 <__hexnan+0x100>
 800840a:	4544      	cmp	r4, r8
 800840c:	d9c1      	bls.n	8008392 <__hexnan+0x7a>
 800840e:	2300      	movs	r3, #0
 8008410:	2501      	movs	r5, #1
 8008412:	f844 3c04 	str.w	r3, [r4, #-4]
 8008416:	3c04      	subs	r4, #4
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	f000 000f 	and.w	r0, r0, #15
 800841e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008422:	6020      	str	r0, [r4, #0]
 8008424:	e7b5      	b.n	8008392 <__hexnan+0x7a>
 8008426:	2508      	movs	r5, #8
 8008428:	e7b3      	b.n	8008392 <__hexnan+0x7a>
 800842a:	9b01      	ldr	r3, [sp, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0dd      	beq.n	80083ec <__hexnan+0xd4>
 8008430:	f04f 32ff 	mov.w	r2, #4294967295
 8008434:	f1c3 0320 	rsb	r3, r3, #32
 8008438:	40da      	lsrs	r2, r3
 800843a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800843e:	4013      	ands	r3, r2
 8008440:	f846 3c04 	str.w	r3, [r6, #-4]
 8008444:	e7d2      	b.n	80083ec <__hexnan+0xd4>
 8008446:	3f04      	subs	r7, #4
 8008448:	e7d0      	b.n	80083ec <__hexnan+0xd4>
 800844a:	2004      	movs	r0, #4
 800844c:	e7d5      	b.n	80083fa <__hexnan+0xe2>

0800844e <__ascii_mbtowc>:
 800844e:	b082      	sub	sp, #8
 8008450:	b901      	cbnz	r1, 8008454 <__ascii_mbtowc+0x6>
 8008452:	a901      	add	r1, sp, #4
 8008454:	b142      	cbz	r2, 8008468 <__ascii_mbtowc+0x1a>
 8008456:	b14b      	cbz	r3, 800846c <__ascii_mbtowc+0x1e>
 8008458:	7813      	ldrb	r3, [r2, #0]
 800845a:	600b      	str	r3, [r1, #0]
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	1e10      	subs	r0, r2, #0
 8008460:	bf18      	it	ne
 8008462:	2001      	movne	r0, #1
 8008464:	b002      	add	sp, #8
 8008466:	4770      	bx	lr
 8008468:	4610      	mov	r0, r2
 800846a:	e7fb      	b.n	8008464 <__ascii_mbtowc+0x16>
 800846c:	f06f 0001 	mvn.w	r0, #1
 8008470:	e7f8      	b.n	8008464 <__ascii_mbtowc+0x16>

08008472 <_realloc_r>:
 8008472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008476:	4680      	mov	r8, r0
 8008478:	4615      	mov	r5, r2
 800847a:	460c      	mov	r4, r1
 800847c:	b921      	cbnz	r1, 8008488 <_realloc_r+0x16>
 800847e:	4611      	mov	r1, r2
 8008480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008484:	f7fd bf06 	b.w	8006294 <_malloc_r>
 8008488:	b92a      	cbnz	r2, 8008496 <_realloc_r+0x24>
 800848a:	f7fd fe91 	bl	80061b0 <_free_r>
 800848e:	2400      	movs	r4, #0
 8008490:	4620      	mov	r0, r4
 8008492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008496:	f000 fa3f 	bl	8008918 <_malloc_usable_size_r>
 800849a:	4285      	cmp	r5, r0
 800849c:	4606      	mov	r6, r0
 800849e:	d802      	bhi.n	80084a6 <_realloc_r+0x34>
 80084a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084a4:	d8f4      	bhi.n	8008490 <_realloc_r+0x1e>
 80084a6:	4629      	mov	r1, r5
 80084a8:	4640      	mov	r0, r8
 80084aa:	f7fd fef3 	bl	8006294 <_malloc_r>
 80084ae:	4607      	mov	r7, r0
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d0ec      	beq.n	800848e <_realloc_r+0x1c>
 80084b4:	42b5      	cmp	r5, r6
 80084b6:	462a      	mov	r2, r5
 80084b8:	4621      	mov	r1, r4
 80084ba:	bf28      	it	cs
 80084bc:	4632      	movcs	r2, r6
 80084be:	f7fc fff4 	bl	80054aa <memcpy>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4640      	mov	r0, r8
 80084c6:	f7fd fe73 	bl	80061b0 <_free_r>
 80084ca:	463c      	mov	r4, r7
 80084cc:	e7e0      	b.n	8008490 <_realloc_r+0x1e>

080084ce <__ascii_wctomb>:
 80084ce:	4603      	mov	r3, r0
 80084d0:	4608      	mov	r0, r1
 80084d2:	b141      	cbz	r1, 80084e6 <__ascii_wctomb+0x18>
 80084d4:	2aff      	cmp	r2, #255	@ 0xff
 80084d6:	d904      	bls.n	80084e2 <__ascii_wctomb+0x14>
 80084d8:	228a      	movs	r2, #138	@ 0x8a
 80084da:	f04f 30ff 	mov.w	r0, #4294967295
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	4770      	bx	lr
 80084e2:	2001      	movs	r0, #1
 80084e4:	700a      	strb	r2, [r1, #0]
 80084e6:	4770      	bx	lr

080084e8 <__sfputc_r>:
 80084e8:	6893      	ldr	r3, [r2, #8]
 80084ea:	b410      	push	{r4}
 80084ec:	3b01      	subs	r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	6093      	str	r3, [r2, #8]
 80084f2:	da07      	bge.n	8008504 <__sfputc_r+0x1c>
 80084f4:	6994      	ldr	r4, [r2, #24]
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	db01      	blt.n	80084fe <__sfputc_r+0x16>
 80084fa:	290a      	cmp	r1, #10
 80084fc:	d102      	bne.n	8008504 <__sfputc_r+0x1c>
 80084fe:	bc10      	pop	{r4}
 8008500:	f000 b932 	b.w	8008768 <__swbuf_r>
 8008504:	6813      	ldr	r3, [r2, #0]
 8008506:	1c58      	adds	r0, r3, #1
 8008508:	6010      	str	r0, [r2, #0]
 800850a:	7019      	strb	r1, [r3, #0]
 800850c:	4608      	mov	r0, r1
 800850e:	bc10      	pop	{r4}
 8008510:	4770      	bx	lr

08008512 <__sfputs_r>:
 8008512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008514:	4606      	mov	r6, r0
 8008516:	460f      	mov	r7, r1
 8008518:	4614      	mov	r4, r2
 800851a:	18d5      	adds	r5, r2, r3
 800851c:	42ac      	cmp	r4, r5
 800851e:	d101      	bne.n	8008524 <__sfputs_r+0x12>
 8008520:	2000      	movs	r0, #0
 8008522:	e007      	b.n	8008534 <__sfputs_r+0x22>
 8008524:	463a      	mov	r2, r7
 8008526:	4630      	mov	r0, r6
 8008528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852c:	f7ff ffdc 	bl	80084e8 <__sfputc_r>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d1f3      	bne.n	800851c <__sfputs_r+0xa>
 8008534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008538 <_vfiprintf_r>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	460d      	mov	r5, r1
 800853e:	4614      	mov	r4, r2
 8008540:	4698      	mov	r8, r3
 8008542:	4606      	mov	r6, r0
 8008544:	b09d      	sub	sp, #116	@ 0x74
 8008546:	b118      	cbz	r0, 8008550 <_vfiprintf_r+0x18>
 8008548:	6a03      	ldr	r3, [r0, #32]
 800854a:	b90b      	cbnz	r3, 8008550 <_vfiprintf_r+0x18>
 800854c:	f7fc fe7e 	bl	800524c <__sinit>
 8008550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008552:	07d9      	lsls	r1, r3, #31
 8008554:	d405      	bmi.n	8008562 <_vfiprintf_r+0x2a>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	059a      	lsls	r2, r3, #22
 800855a:	d402      	bmi.n	8008562 <_vfiprintf_r+0x2a>
 800855c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800855e:	f7fc ff8c 	bl	800547a <__retarget_lock_acquire_recursive>
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	071b      	lsls	r3, r3, #28
 8008566:	d501      	bpl.n	800856c <_vfiprintf_r+0x34>
 8008568:	692b      	ldr	r3, [r5, #16]
 800856a:	b99b      	cbnz	r3, 8008594 <_vfiprintf_r+0x5c>
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f000 f938 	bl	80087e4 <__swsetup_r>
 8008574:	b170      	cbz	r0, 8008594 <_vfiprintf_r+0x5c>
 8008576:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008578:	07dc      	lsls	r4, r3, #31
 800857a:	d504      	bpl.n	8008586 <_vfiprintf_r+0x4e>
 800857c:	f04f 30ff 	mov.w	r0, #4294967295
 8008580:	b01d      	add	sp, #116	@ 0x74
 8008582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	0598      	lsls	r0, r3, #22
 800858a:	d4f7      	bmi.n	800857c <_vfiprintf_r+0x44>
 800858c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800858e:	f7fc ff75 	bl	800547c <__retarget_lock_release_recursive>
 8008592:	e7f3      	b.n	800857c <_vfiprintf_r+0x44>
 8008594:	2300      	movs	r3, #0
 8008596:	9309      	str	r3, [sp, #36]	@ 0x24
 8008598:	2320      	movs	r3, #32
 800859a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800859e:	2330      	movs	r3, #48	@ 0x30
 80085a0:	f04f 0901 	mov.w	r9, #1
 80085a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085a8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008754 <_vfiprintf_r+0x21c>
 80085ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085b0:	4623      	mov	r3, r4
 80085b2:	469a      	mov	sl, r3
 80085b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085b8:	b10a      	cbz	r2, 80085be <_vfiprintf_r+0x86>
 80085ba:	2a25      	cmp	r2, #37	@ 0x25
 80085bc:	d1f9      	bne.n	80085b2 <_vfiprintf_r+0x7a>
 80085be:	ebba 0b04 	subs.w	fp, sl, r4
 80085c2:	d00b      	beq.n	80085dc <_vfiprintf_r+0xa4>
 80085c4:	465b      	mov	r3, fp
 80085c6:	4622      	mov	r2, r4
 80085c8:	4629      	mov	r1, r5
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7ff ffa1 	bl	8008512 <__sfputs_r>
 80085d0:	3001      	adds	r0, #1
 80085d2:	f000 80a7 	beq.w	8008724 <_vfiprintf_r+0x1ec>
 80085d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085d8:	445a      	add	r2, fp
 80085da:	9209      	str	r2, [sp, #36]	@ 0x24
 80085dc:	f89a 3000 	ldrb.w	r3, [sl]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 809f 	beq.w	8008724 <_vfiprintf_r+0x1ec>
 80085e6:	2300      	movs	r3, #0
 80085e8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085f0:	f10a 0a01 	add.w	sl, sl, #1
 80085f4:	9304      	str	r3, [sp, #16]
 80085f6:	9307      	str	r3, [sp, #28]
 80085f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80085fe:	4654      	mov	r4, sl
 8008600:	2205      	movs	r2, #5
 8008602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008606:	4853      	ldr	r0, [pc, #332]	@ (8008754 <_vfiprintf_r+0x21c>)
 8008608:	f7fc ff41 	bl	800548e <memchr>
 800860c:	9a04      	ldr	r2, [sp, #16]
 800860e:	b9d8      	cbnz	r0, 8008648 <_vfiprintf_r+0x110>
 8008610:	06d1      	lsls	r1, r2, #27
 8008612:	bf44      	itt	mi
 8008614:	2320      	movmi	r3, #32
 8008616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800861a:	0713      	lsls	r3, r2, #28
 800861c:	bf44      	itt	mi
 800861e:	232b      	movmi	r3, #43	@ 0x2b
 8008620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008624:	f89a 3000 	ldrb.w	r3, [sl]
 8008628:	2b2a      	cmp	r3, #42	@ 0x2a
 800862a:	d015      	beq.n	8008658 <_vfiprintf_r+0x120>
 800862c:	4654      	mov	r4, sl
 800862e:	2000      	movs	r0, #0
 8008630:	f04f 0c0a 	mov.w	ip, #10
 8008634:	9a07      	ldr	r2, [sp, #28]
 8008636:	4621      	mov	r1, r4
 8008638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800863c:	3b30      	subs	r3, #48	@ 0x30
 800863e:	2b09      	cmp	r3, #9
 8008640:	d94b      	bls.n	80086da <_vfiprintf_r+0x1a2>
 8008642:	b1b0      	cbz	r0, 8008672 <_vfiprintf_r+0x13a>
 8008644:	9207      	str	r2, [sp, #28]
 8008646:	e014      	b.n	8008672 <_vfiprintf_r+0x13a>
 8008648:	eba0 0308 	sub.w	r3, r0, r8
 800864c:	fa09 f303 	lsl.w	r3, r9, r3
 8008650:	4313      	orrs	r3, r2
 8008652:	46a2      	mov	sl, r4
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	e7d2      	b.n	80085fe <_vfiprintf_r+0xc6>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	1d19      	adds	r1, r3, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	9103      	str	r1, [sp, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	bfbb      	ittet	lt
 8008664:	425b      	neglt	r3, r3
 8008666:	f042 0202 	orrlt.w	r2, r2, #2
 800866a:	9307      	strge	r3, [sp, #28]
 800866c:	9307      	strlt	r3, [sp, #28]
 800866e:	bfb8      	it	lt
 8008670:	9204      	strlt	r2, [sp, #16]
 8008672:	7823      	ldrb	r3, [r4, #0]
 8008674:	2b2e      	cmp	r3, #46	@ 0x2e
 8008676:	d10a      	bne.n	800868e <_vfiprintf_r+0x156>
 8008678:	7863      	ldrb	r3, [r4, #1]
 800867a:	2b2a      	cmp	r3, #42	@ 0x2a
 800867c:	d132      	bne.n	80086e4 <_vfiprintf_r+0x1ac>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	3402      	adds	r4, #2
 8008682:	1d1a      	adds	r2, r3, #4
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	9203      	str	r2, [sp, #12]
 8008688:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008758 <_vfiprintf_r+0x220>
 8008692:	2203      	movs	r2, #3
 8008694:	4650      	mov	r0, sl
 8008696:	7821      	ldrb	r1, [r4, #0]
 8008698:	f7fc fef9 	bl	800548e <memchr>
 800869c:	b138      	cbz	r0, 80086ae <_vfiprintf_r+0x176>
 800869e:	2240      	movs	r2, #64	@ 0x40
 80086a0:	9b04      	ldr	r3, [sp, #16]
 80086a2:	eba0 000a 	sub.w	r0, r0, sl
 80086a6:	4082      	lsls	r2, r0
 80086a8:	4313      	orrs	r3, r2
 80086aa:	3401      	adds	r4, #1
 80086ac:	9304      	str	r3, [sp, #16]
 80086ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b2:	2206      	movs	r2, #6
 80086b4:	4829      	ldr	r0, [pc, #164]	@ (800875c <_vfiprintf_r+0x224>)
 80086b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086ba:	f7fc fee8 	bl	800548e <memchr>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d03f      	beq.n	8008742 <_vfiprintf_r+0x20a>
 80086c2:	4b27      	ldr	r3, [pc, #156]	@ (8008760 <_vfiprintf_r+0x228>)
 80086c4:	bb1b      	cbnz	r3, 800870e <_vfiprintf_r+0x1d6>
 80086c6:	9b03      	ldr	r3, [sp, #12]
 80086c8:	3307      	adds	r3, #7
 80086ca:	f023 0307 	bic.w	r3, r3, #7
 80086ce:	3308      	adds	r3, #8
 80086d0:	9303      	str	r3, [sp, #12]
 80086d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d4:	443b      	add	r3, r7
 80086d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086d8:	e76a      	b.n	80085b0 <_vfiprintf_r+0x78>
 80086da:	460c      	mov	r4, r1
 80086dc:	2001      	movs	r0, #1
 80086de:	fb0c 3202 	mla	r2, ip, r2, r3
 80086e2:	e7a8      	b.n	8008636 <_vfiprintf_r+0xfe>
 80086e4:	2300      	movs	r3, #0
 80086e6:	f04f 0c0a 	mov.w	ip, #10
 80086ea:	4619      	mov	r1, r3
 80086ec:	3401      	adds	r4, #1
 80086ee:	9305      	str	r3, [sp, #20]
 80086f0:	4620      	mov	r0, r4
 80086f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086f6:	3a30      	subs	r2, #48	@ 0x30
 80086f8:	2a09      	cmp	r2, #9
 80086fa:	d903      	bls.n	8008704 <_vfiprintf_r+0x1cc>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0c6      	beq.n	800868e <_vfiprintf_r+0x156>
 8008700:	9105      	str	r1, [sp, #20]
 8008702:	e7c4      	b.n	800868e <_vfiprintf_r+0x156>
 8008704:	4604      	mov	r4, r0
 8008706:	2301      	movs	r3, #1
 8008708:	fb0c 2101 	mla	r1, ip, r1, r2
 800870c:	e7f0      	b.n	80086f0 <_vfiprintf_r+0x1b8>
 800870e:	ab03      	add	r3, sp, #12
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	462a      	mov	r2, r5
 8008714:	4630      	mov	r0, r6
 8008716:	4b13      	ldr	r3, [pc, #76]	@ (8008764 <_vfiprintf_r+0x22c>)
 8008718:	a904      	add	r1, sp, #16
 800871a:	f7fb ff3d 	bl	8004598 <_printf_float>
 800871e:	4607      	mov	r7, r0
 8008720:	1c78      	adds	r0, r7, #1
 8008722:	d1d6      	bne.n	80086d2 <_vfiprintf_r+0x19a>
 8008724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008726:	07d9      	lsls	r1, r3, #31
 8008728:	d405      	bmi.n	8008736 <_vfiprintf_r+0x1fe>
 800872a:	89ab      	ldrh	r3, [r5, #12]
 800872c:	059a      	lsls	r2, r3, #22
 800872e:	d402      	bmi.n	8008736 <_vfiprintf_r+0x1fe>
 8008730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008732:	f7fc fea3 	bl	800547c <__retarget_lock_release_recursive>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	065b      	lsls	r3, r3, #25
 800873a:	f53f af1f 	bmi.w	800857c <_vfiprintf_r+0x44>
 800873e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008740:	e71e      	b.n	8008580 <_vfiprintf_r+0x48>
 8008742:	ab03      	add	r3, sp, #12
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	462a      	mov	r2, r5
 8008748:	4630      	mov	r0, r6
 800874a:	4b06      	ldr	r3, [pc, #24]	@ (8008764 <_vfiprintf_r+0x22c>)
 800874c:	a904      	add	r1, sp, #16
 800874e:	f7fc f9c1 	bl	8004ad4 <_printf_i>
 8008752:	e7e4      	b.n	800871e <_vfiprintf_r+0x1e6>
 8008754:	0800ba20 	.word	0x0800ba20
 8008758:	0800ba26 	.word	0x0800ba26
 800875c:	0800ba2a 	.word	0x0800ba2a
 8008760:	08004599 	.word	0x08004599
 8008764:	08008513 	.word	0x08008513

08008768 <__swbuf_r>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	460e      	mov	r6, r1
 800876c:	4614      	mov	r4, r2
 800876e:	4605      	mov	r5, r0
 8008770:	b118      	cbz	r0, 800877a <__swbuf_r+0x12>
 8008772:	6a03      	ldr	r3, [r0, #32]
 8008774:	b90b      	cbnz	r3, 800877a <__swbuf_r+0x12>
 8008776:	f7fc fd69 	bl	800524c <__sinit>
 800877a:	69a3      	ldr	r3, [r4, #24]
 800877c:	60a3      	str	r3, [r4, #8]
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	071a      	lsls	r2, r3, #28
 8008782:	d501      	bpl.n	8008788 <__swbuf_r+0x20>
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	b943      	cbnz	r3, 800879a <__swbuf_r+0x32>
 8008788:	4621      	mov	r1, r4
 800878a:	4628      	mov	r0, r5
 800878c:	f000 f82a 	bl	80087e4 <__swsetup_r>
 8008790:	b118      	cbz	r0, 800879a <__swbuf_r+0x32>
 8008792:	f04f 37ff 	mov.w	r7, #4294967295
 8008796:	4638      	mov	r0, r7
 8008798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	6922      	ldr	r2, [r4, #16]
 800879e:	b2f6      	uxtb	r6, r6
 80087a0:	1a98      	subs	r0, r3, r2
 80087a2:	6963      	ldr	r3, [r4, #20]
 80087a4:	4637      	mov	r7, r6
 80087a6:	4283      	cmp	r3, r0
 80087a8:	dc05      	bgt.n	80087b6 <__swbuf_r+0x4e>
 80087aa:	4621      	mov	r1, r4
 80087ac:	4628      	mov	r0, r5
 80087ae:	f7ff fa7d 	bl	8007cac <_fflush_r>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d1ed      	bne.n	8008792 <__swbuf_r+0x2a>
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	60a3      	str	r3, [r4, #8]
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	6022      	str	r2, [r4, #0]
 80087c2:	701e      	strb	r6, [r3, #0]
 80087c4:	6962      	ldr	r2, [r4, #20]
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d004      	beq.n	80087d6 <__swbuf_r+0x6e>
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	07db      	lsls	r3, r3, #31
 80087d0:	d5e1      	bpl.n	8008796 <__swbuf_r+0x2e>
 80087d2:	2e0a      	cmp	r6, #10
 80087d4:	d1df      	bne.n	8008796 <__swbuf_r+0x2e>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f7ff fa67 	bl	8007cac <_fflush_r>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d0d9      	beq.n	8008796 <__swbuf_r+0x2e>
 80087e2:	e7d6      	b.n	8008792 <__swbuf_r+0x2a>

080087e4 <__swsetup_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4b29      	ldr	r3, [pc, #164]	@ (800888c <__swsetup_r+0xa8>)
 80087e8:	4605      	mov	r5, r0
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	460c      	mov	r4, r1
 80087ee:	b118      	cbz	r0, 80087f8 <__swsetup_r+0x14>
 80087f0:	6a03      	ldr	r3, [r0, #32]
 80087f2:	b90b      	cbnz	r3, 80087f8 <__swsetup_r+0x14>
 80087f4:	f7fc fd2a 	bl	800524c <__sinit>
 80087f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fc:	0719      	lsls	r1, r3, #28
 80087fe:	d422      	bmi.n	8008846 <__swsetup_r+0x62>
 8008800:	06da      	lsls	r2, r3, #27
 8008802:	d407      	bmi.n	8008814 <__swsetup_r+0x30>
 8008804:	2209      	movs	r2, #9
 8008806:	602a      	str	r2, [r5, #0]
 8008808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	81a3      	strh	r3, [r4, #12]
 8008812:	e033      	b.n	800887c <__swsetup_r+0x98>
 8008814:	0758      	lsls	r0, r3, #29
 8008816:	d512      	bpl.n	800883e <__swsetup_r+0x5a>
 8008818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800881a:	b141      	cbz	r1, 800882e <__swsetup_r+0x4a>
 800881c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008820:	4299      	cmp	r1, r3
 8008822:	d002      	beq.n	800882a <__swsetup_r+0x46>
 8008824:	4628      	mov	r0, r5
 8008826:	f7fd fcc3 	bl	80061b0 <_free_r>
 800882a:	2300      	movs	r3, #0
 800882c:	6363      	str	r3, [r4, #52]	@ 0x34
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	2300      	movs	r3, #0
 8008838:	6063      	str	r3, [r4, #4]
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	f043 0308 	orr.w	r3, r3, #8
 8008844:	81a3      	strh	r3, [r4, #12]
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	b94b      	cbnz	r3, 800885e <__swsetup_r+0x7a>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008854:	d003      	beq.n	800885e <__swsetup_r+0x7a>
 8008856:	4621      	mov	r1, r4
 8008858:	4628      	mov	r0, r5
 800885a:	f000 f88a 	bl	8008972 <__smakebuf_r>
 800885e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008862:	f013 0201 	ands.w	r2, r3, #1
 8008866:	d00a      	beq.n	800887e <__swsetup_r+0x9a>
 8008868:	2200      	movs	r2, #0
 800886a:	60a2      	str	r2, [r4, #8]
 800886c:	6962      	ldr	r2, [r4, #20]
 800886e:	4252      	negs	r2, r2
 8008870:	61a2      	str	r2, [r4, #24]
 8008872:	6922      	ldr	r2, [r4, #16]
 8008874:	b942      	cbnz	r2, 8008888 <__swsetup_r+0xa4>
 8008876:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800887a:	d1c5      	bne.n	8008808 <__swsetup_r+0x24>
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	0799      	lsls	r1, r3, #30
 8008880:	bf58      	it	pl
 8008882:	6962      	ldrpl	r2, [r4, #20]
 8008884:	60a2      	str	r2, [r4, #8]
 8008886:	e7f4      	b.n	8008872 <__swsetup_r+0x8e>
 8008888:	2000      	movs	r0, #0
 800888a:	e7f7      	b.n	800887c <__swsetup_r+0x98>
 800888c:	20000034 	.word	0x20000034

08008890 <_raise_r>:
 8008890:	291f      	cmp	r1, #31
 8008892:	b538      	push	{r3, r4, r5, lr}
 8008894:	4605      	mov	r5, r0
 8008896:	460c      	mov	r4, r1
 8008898:	d904      	bls.n	80088a4 <_raise_r+0x14>
 800889a:	2316      	movs	r3, #22
 800889c:	6003      	str	r3, [r0, #0]
 800889e:	f04f 30ff 	mov.w	r0, #4294967295
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088a6:	b112      	cbz	r2, 80088ae <_raise_r+0x1e>
 80088a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088ac:	b94b      	cbnz	r3, 80088c2 <_raise_r+0x32>
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 f830 	bl	8008914 <_getpid_r>
 80088b4:	4622      	mov	r2, r4
 80088b6:	4601      	mov	r1, r0
 80088b8:	4628      	mov	r0, r5
 80088ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088be:	f000 b817 	b.w	80088f0 <_kill_r>
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d00a      	beq.n	80088dc <_raise_r+0x4c>
 80088c6:	1c59      	adds	r1, r3, #1
 80088c8:	d103      	bne.n	80088d2 <_raise_r+0x42>
 80088ca:	2316      	movs	r3, #22
 80088cc:	6003      	str	r3, [r0, #0]
 80088ce:	2001      	movs	r0, #1
 80088d0:	e7e7      	b.n	80088a2 <_raise_r+0x12>
 80088d2:	2100      	movs	r1, #0
 80088d4:	4620      	mov	r0, r4
 80088d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088da:	4798      	blx	r3
 80088dc:	2000      	movs	r0, #0
 80088de:	e7e0      	b.n	80088a2 <_raise_r+0x12>

080088e0 <raise>:
 80088e0:	4b02      	ldr	r3, [pc, #8]	@ (80088ec <raise+0xc>)
 80088e2:	4601      	mov	r1, r0
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	f7ff bfd3 	b.w	8008890 <_raise_r>
 80088ea:	bf00      	nop
 80088ec:	20000034 	.word	0x20000034

080088f0 <_kill_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	2300      	movs	r3, #0
 80088f4:	4d06      	ldr	r5, [pc, #24]	@ (8008910 <_kill_r+0x20>)
 80088f6:	4604      	mov	r4, r0
 80088f8:	4608      	mov	r0, r1
 80088fa:	4611      	mov	r1, r2
 80088fc:	602b      	str	r3, [r5, #0]
 80088fe:	f7f9 fbe1 	bl	80020c4 <_kill>
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	d102      	bne.n	800890c <_kill_r+0x1c>
 8008906:	682b      	ldr	r3, [r5, #0]
 8008908:	b103      	cbz	r3, 800890c <_kill_r+0x1c>
 800890a:	6023      	str	r3, [r4, #0]
 800890c:	bd38      	pop	{r3, r4, r5, pc}
 800890e:	bf00      	nop
 8008910:	20000a0c 	.word	0x20000a0c

08008914 <_getpid_r>:
 8008914:	f7f9 bbd4 	b.w	80020c0 <_getpid>

08008918 <_malloc_usable_size_r>:
 8008918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800891c:	1f18      	subs	r0, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	bfbc      	itt	lt
 8008922:	580b      	ldrlt	r3, [r1, r0]
 8008924:	18c0      	addlt	r0, r0, r3
 8008926:	4770      	bx	lr

08008928 <__swhatbuf_r>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	460c      	mov	r4, r1
 800892c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008930:	4615      	mov	r5, r2
 8008932:	2900      	cmp	r1, #0
 8008934:	461e      	mov	r6, r3
 8008936:	b096      	sub	sp, #88	@ 0x58
 8008938:	da0c      	bge.n	8008954 <__swhatbuf_r+0x2c>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	2100      	movs	r1, #0
 800893e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008942:	bf14      	ite	ne
 8008944:	2340      	movne	r3, #64	@ 0x40
 8008946:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800894a:	2000      	movs	r0, #0
 800894c:	6031      	str	r1, [r6, #0]
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	b016      	add	sp, #88	@ 0x58
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	466a      	mov	r2, sp
 8008956:	f000 f849 	bl	80089ec <_fstat_r>
 800895a:	2800      	cmp	r0, #0
 800895c:	dbed      	blt.n	800893a <__swhatbuf_r+0x12>
 800895e:	9901      	ldr	r1, [sp, #4]
 8008960:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008964:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008968:	4259      	negs	r1, r3
 800896a:	4159      	adcs	r1, r3
 800896c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008970:	e7eb      	b.n	800894a <__swhatbuf_r+0x22>

08008972 <__smakebuf_r>:
 8008972:	898b      	ldrh	r3, [r1, #12]
 8008974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008976:	079d      	lsls	r5, r3, #30
 8008978:	4606      	mov	r6, r0
 800897a:	460c      	mov	r4, r1
 800897c:	d507      	bpl.n	800898e <__smakebuf_r+0x1c>
 800897e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008982:	6023      	str	r3, [r4, #0]
 8008984:	6123      	str	r3, [r4, #16]
 8008986:	2301      	movs	r3, #1
 8008988:	6163      	str	r3, [r4, #20]
 800898a:	b003      	add	sp, #12
 800898c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800898e:	466a      	mov	r2, sp
 8008990:	ab01      	add	r3, sp, #4
 8008992:	f7ff ffc9 	bl	8008928 <__swhatbuf_r>
 8008996:	9f00      	ldr	r7, [sp, #0]
 8008998:	4605      	mov	r5, r0
 800899a:	4639      	mov	r1, r7
 800899c:	4630      	mov	r0, r6
 800899e:	f7fd fc79 	bl	8006294 <_malloc_r>
 80089a2:	b948      	cbnz	r0, 80089b8 <__smakebuf_r+0x46>
 80089a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a8:	059a      	lsls	r2, r3, #22
 80089aa:	d4ee      	bmi.n	800898a <__smakebuf_r+0x18>
 80089ac:	f023 0303 	bic.w	r3, r3, #3
 80089b0:	f043 0302 	orr.w	r3, r3, #2
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	e7e2      	b.n	800897e <__smakebuf_r+0xc>
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c2:	81a3      	strh	r3, [r4, #12]
 80089c4:	9b01      	ldr	r3, [sp, #4]
 80089c6:	6020      	str	r0, [r4, #0]
 80089c8:	b15b      	cbz	r3, 80089e2 <__smakebuf_r+0x70>
 80089ca:	4630      	mov	r0, r6
 80089cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089d0:	f000 f81e 	bl	8008a10 <_isatty_r>
 80089d4:	b128      	cbz	r0, 80089e2 <__smakebuf_r+0x70>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f023 0303 	bic.w	r3, r3, #3
 80089dc:	f043 0301 	orr.w	r3, r3, #1
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	431d      	orrs	r5, r3
 80089e6:	81a5      	strh	r5, [r4, #12]
 80089e8:	e7cf      	b.n	800898a <__smakebuf_r+0x18>
	...

080089ec <_fstat_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	2300      	movs	r3, #0
 80089f0:	4d06      	ldr	r5, [pc, #24]	@ (8008a0c <_fstat_r+0x20>)
 80089f2:	4604      	mov	r4, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	4611      	mov	r1, r2
 80089f8:	602b      	str	r3, [r5, #0]
 80089fa:	f7f9 fb90 	bl	800211e <_fstat>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	d102      	bne.n	8008a08 <_fstat_r+0x1c>
 8008a02:	682b      	ldr	r3, [r5, #0]
 8008a04:	b103      	cbz	r3, 8008a08 <_fstat_r+0x1c>
 8008a06:	6023      	str	r3, [r4, #0]
 8008a08:	bd38      	pop	{r3, r4, r5, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000a0c 	.word	0x20000a0c

08008a10 <_isatty_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	2300      	movs	r3, #0
 8008a14:	4d05      	ldr	r5, [pc, #20]	@ (8008a2c <_isatty_r+0x1c>)
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	f7f9 fb84 	bl	8002128 <_isatty>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_isatty_r+0x1a>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_isatty_r+0x1a>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	20000a0c 	.word	0x20000a0c

08008a30 <_init>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr

08008a3c <_fini>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr
