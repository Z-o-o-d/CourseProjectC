
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f24  08006bdc  08006bdc  00007bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b00  08009b00  0000b0c4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b00  08009b00  0000ab00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b08  08009b08  0000b0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b08  08009b08  0000ab08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b0c  08009b0c  0000ab0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08009b10  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e8  200000c4  08009bd4  0000b0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ac  08009bd4  0000b9ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d2e  00000000  00000000  0000b0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f41  00000000  00000000  0001ee1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00021d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e10  00000000  00000000  00022ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3fb  00000000  00000000  00023ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177c1  00000000  00000000  0003e0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092885  00000000  00000000  000558a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef0  00000000  00000000  000e816c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ed05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	08006bc4 	.word	0x08006bc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	08006bc4 	.word	0x08006bc4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2uiz>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	d20e      	bcs.n	8000502 <__aeabi_f2uiz+0x22>
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004e8:	d30b      	bcc.n	8000502 <__aeabi_f2uiz+0x22>
 80004ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d409      	bmi.n	8000508 <__aeabi_f2uiz+0x28>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000500:	4770      	bx	lr
 8000502:	f04f 0000 	mov.w	r0, #0
 8000506:	4770      	bx	lr
 8000508:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800050c:	d101      	bne.n	8000512 <__aeabi_f2uiz+0x32>
 800050e:	0242      	lsls	r2, r0, #9
 8000510:	d102      	bne.n	8000518 <__aeabi_f2uiz+0x38>
 8000512:	f04f 30ff 	mov.w	r0, #4294967295
 8000516:	4770      	bx	lr
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <ESP_SendCommand>:
#include "AT_WIFI.h"

extern UART_HandleTypeDef huart1;


UART_Response ESP_SendCommand(UART_HandleTypeDef *huart, uint8_t *command, uint32_t timeout, uint8_t max_retries) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b0be      	sub	sp, #248	@ 0xf8
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
 800052c:	603b      	str	r3, [r7, #0]
    UART_Response result;
    memset(result.raw_data, 0, sizeof(result.raw_data));
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	22c8      	movs	r2, #200	@ 0xc8
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f005 fe96 	bl	8006268 <memset>
    result.is_ok = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 30e8 	strb.w	r3, [r7, #232]	@ 0xe8
    result.retries = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
    result.length = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea

    for (result.retries = 0; result.retries < max_retries; ++result.retries) {
 800054e:	2300      	movs	r3, #0
 8000550:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
 8000554:	e058      	b.n	8000608 <ESP_SendCommand+0xe8>
        // Transmit the command
        HAL_UART_Transmit(huart, command, strlen((char*)command), 100);
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f7ff fdf8 	bl	800014c <strlen>
 800055c:	4603      	mov	r3, r0
 800055e:	b29a      	uxth	r2, r3
 8000560:	2364      	movs	r3, #100	@ 0x64
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	68b8      	ldr	r0, [r7, #8]
 8000566:	f004 ffe0 	bl	800552a <HAL_UART_Transmit>

        // Start time for timeout
        uint32_t start_time = HAL_GetTick();
 800056a:	f001 fcc3 	bl	8001ef4 <HAL_GetTick>
 800056e:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0

        // Receive the response
        uint8_t temp[11]; // Buffer to hold temporary data
        uint16_t index = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
//        HAL_Delay(1);
        while ((HAL_GetTick() - start_time) < timeout) {
 8000578:	e037      	b.n	80005ea <ESP_SendCommand+0xca>
            HAL_StatusTypeDef status = HAL_UART_Receive(huart, temp, 10, 10);
 800057a:	f107 0114 	add.w	r1, r7, #20
 800057e:	230a      	movs	r3, #10
 8000580:	220a      	movs	r2, #10
 8000582:	68b8      	ldr	r0, [r7, #8]
 8000584:	f005 f854 	bl	8005630 <HAL_UART_Receive>
 8000588:	4603      	mov	r3, r0
 800058a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
			strncat((char*)result.raw_data, (char*)temp, 10);
 800058e:	f107 0114 	add.w	r1, r7, #20
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	220a      	movs	r2, #10
 8000598:	4618      	mov	r0, r3
 800059a:	f005 fe7c 	bl	8006296 <strncat>
			index += 10;
 800059e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 80005a2:	330a      	adds	r3, #10
 80005a4:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
			result.length = index;
 80005a8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 80005ac:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea

			// Check if "\r\nOK\r\n" is in the received data
			if (strstr((char*)result.raw_data, "\r\nOK\r\n") != NULL) {
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	491d      	ldr	r1, [pc, #116]	@ (800062c <ESP_SendCommand+0x10c>)
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 fe80 	bl	80062bc <strstr>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d013      	beq.n	80005ea <ESP_SendCommand+0xca>
				result.is_ok = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	f887 30e8 	strb.w	r3, [r7, #232]	@ 0xe8

				  HAL_UART_Transmit(&huart1,(uint8_t*)result.raw_data, 500,100);
 80005c8:	f107 0120 	add.w	r1, r7, #32
 80005cc:	2364      	movs	r3, #100	@ 0x64
 80005ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005d2:	4817      	ldr	r0, [pc, #92]	@ (8000630 <ESP_SendCommand+0x110>)
 80005d4:	f004 ffa9 	bl	800552a <HAL_UART_Transmit>

				return result;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4618      	mov	r0, r3
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	22cc      	movs	r2, #204	@ 0xcc
 80005e2:	4619      	mov	r1, r3
 80005e4:	f005 feac 	bl	8006340 <memcpy>
//
//    // Clear the RX buffer
//    clearRxBuffer(&result);

    return result;
}
 80005e8:	e01c      	b.n	8000624 <ESP_SendCommand+0x104>
        while ((HAL_GetTick() - start_time) < timeout) {
 80005ea:	f001 fc83 	bl	8001ef4 <HAL_GetTick>
 80005ee:	4602      	mov	r2, r0
 80005f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8be      	bhi.n	800057a <ESP_SendCommand+0x5a>
    for (result.retries = 0; result.retries < max_retries; ++result.retries) {
 80005fc:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 8000600:	3301      	adds	r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
 8000608:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 800060c:	f897 2100 	ldrb.w	r2, [r7, #256]	@ 0x100
 8000610:	429a      	cmp	r2, r3
 8000612:	d8a0      	bhi.n	8000556 <ESP_SendCommand+0x36>
    return result;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4618      	mov	r0, r3
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	22cc      	movs	r2, #204	@ 0xcc
 800061e:	4619      	mov	r1, r3
 8000620:	f005 fe8e 	bl	8006340 <memcpy>
}
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	37f8      	adds	r7, #248	@ 0xf8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	08006bdc 	.word	0x08006bdc
 8000630:	20000284 	.word	0x20000284

08000634 <ESP_SendData>:
    memset(response->raw_data, 0, sizeof(response->raw_data));
    response->is_ok = 0;
    response->retries = 0;
    response->length = 0;
}
UART_Response ESP_SendData(UART_HandleTypeDef *huart, int num, ...) {
 8000634:	b40c      	push	{r2, r3}
 8000636:	b580      	push	{r7, lr}
 8000638:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800063c:	af00      	add	r7, sp, #0
 800063e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000642:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000646:	6018      	str	r0, [r3, #0]
 8000648:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800064c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8000650:	6019      	str	r1, [r3, #0]
    UART_Response result;
    memset(result.raw_data, 0, sizeof(result.raw_data));
 8000652:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000656:	22c8      	movs	r2, #200	@ 0xc8
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fe04 	bl	8006268 <memset>
    result.is_ok = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	f887 3208 	strb.w	r3, [r7, #520]	@ 0x208
    result.retries = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	f887 3209 	strb.w	r3, [r7, #521]	@ 0x209
    result.length = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a

    uint8_t data[256] = "DATA:";
 8000672:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000676:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800067a:	4951      	ldr	r1, [pc, #324]	@ (80007c0 <ESP_SendData+0x18c>)
 800067c:	461a      	mov	r2, r3
 800067e:	6808      	ldr	r0, [r1, #0]
 8000680:	6010      	str	r0, [r2, #0]
 8000682:	8889      	ldrh	r1, [r1, #4]
 8000684:	8091      	strh	r1, [r2, #4]
 8000686:	3306      	adds	r3, #6
 8000688:	22fa      	movs	r2, #250	@ 0xfa
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f005 fdeb 	bl	8006268 <memset>
    uint16_t total_length = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
    va_list args;
    va_start(args, num);
 8000698:	f507 7209 	add.w	r2, r7, #548	@ 0x224
 800069c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80006a0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80006a4:	601a      	str	r2, [r3, #0]

    // Construct the DATA string
    for (int i = 0; i < num; ++i) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80006ac:	e02f      	b.n	800070e <ESP_SendData+0xda>
        uint8_t *var = va_arg(args, uint8_t *);
 80006ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80006b2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1d19      	adds	r1, r3, #4
 80006ba:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80006be:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 80006c2:	6011      	str	r1, [r2, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
        strcat((char*)data, var);
 80006ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006ce:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fdd0 	bl	8006278 <strcat>
        if (i < num - 1) {
 80006d8:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80006dc:	3b01      	subs	r3, #1
 80006de:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80006e2:	429a      	cmp	r2, r3
 80006e4:	da0e      	bge.n	8000704 <ESP_SendData+0xd0>
            strcat((char*)data, ",");
 80006e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd2e 	bl	800014c <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006f8:	4413      	add	r3, r2
 80006fa:	4932      	ldr	r1, [pc, #200]	@ (80007c4 <ESP_SendData+0x190>)
 80006fc:	461a      	mov	r2, r3
 80006fe:	460b      	mov	r3, r1
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	8013      	strh	r3, [r2, #0]
    for (int i = 0; i < num; ++i) {
 8000704:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000708:	3301      	adds	r3, #1
 800070a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800070e:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8000712:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8000716:	429a      	cmp	r2, r3
 8000718:	dbc9      	blt.n	80006ae <ESP_SendData+0x7a>
        }
    }
    va_end(args);
    strcat((char*)data, "\r\n");
 800071a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd14 	bl	800014c <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800072c:	4413      	add	r3, r2
 800072e:	4a26      	ldr	r2, [pc, #152]	@ (80007c8 <ESP_SendData+0x194>)
 8000730:	8811      	ldrh	r1, [r2, #0]
 8000732:	7892      	ldrb	r2, [r2, #2]
 8000734:	8019      	strh	r1, [r3, #0]
 8000736:	709a      	strb	r2, [r3, #2]

    // Calculate the total length
    total_length = strlen((char*)data);
 8000738:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fd05 	bl	800014c <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
    uint8_t cmd[50];
    sprintf((uint8_t*)cmd, "AT+CIPSEND=0,%d\r\n", total_length);
 8000748:	f8b7 2212 	ldrh.w	r2, [r7, #530]	@ 0x212
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	491e      	ldr	r1, [pc, #120]	@ (80007cc <ESP_SendData+0x198>)
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fd4e 	bl	80061f4 <siprintf>
//    result = ESP_SendCommand(huart, cmd, 1000, 1);

    // Check if the initial command was successful
//    if (result.is_ok) {
        // Send the actual data
        HAL_UART_Transmit(huart, cmd, total_length, 100);
 8000758:	f8b7 2212 	ldrh.w	r2, [r7, #530]	@ 0x212
 800075c:	f107 0108 	add.w	r1, r7, #8
 8000760:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000764:	f5a3 7006 	sub.w	r0, r3, #536	@ 0x218
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	6800      	ldr	r0, [r0, #0]
 800076c:	f004 fedd 	bl	800552a <HAL_UART_Transmit>
        HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f001 fbc9 	bl	8001f08 <HAL_Delay>
        HAL_UART_Transmit(huart, data, total_length, 100);
 8000776:	f8b7 2212 	ldrh.w	r2, [r7, #530]	@ 0x212
 800077a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800077e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000782:	f5a3 7006 	sub.w	r0, r3, #536	@ 0x218
 8000786:	2364      	movs	r3, #100	@ 0x64
 8000788:	6800      	ldr	r0, [r0, #0]
 800078a:	f004 fece 	bl	800552a <HAL_UART_Transmit>

//    }

    return result;
 800078e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000792:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800079e:	22cc      	movs	r2, #204	@ 0xcc
 80007a0:	4619      	mov	r1, r3
 80007a2:	f005 fdcd 	bl	8006340 <memcpy>
}
 80007a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80007aa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80007b4:	46bd      	mov	sp, r7
 80007b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ba:	b002      	add	sp, #8
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	08006c00 	.word	0x08006c00
 80007c4:	08006be4 	.word	0x08006be4
 80007c8:	08006be8 	.word	0x08006be8
 80007cc:	08006bec 	.word	0x08006bec

080007d0 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	889b      	ldrh	r3, [r3, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	f002 fe4e 	bl	8003492 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	889b      	ldrh	r3, [r3, #4]
 80007fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80007fc:	2311      	movs	r3, #17
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	79db      	ldrb	r3, [r3, #7]
 8000804:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000806:	2303      	movs	r3, #3
 8000808:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f107 0208 	add.w	r2, r7, #8
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f002 fca1 	bl	800315c <HAL_GPIO_Init>
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	889b      	ldrh	r3, [r3, #4]
 800083c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	79db      	ldrb	r3, [r3, #7]
 8000846:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f107 0208 	add.w	r2, r7, #8
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fc82 	bl	800315c <HAL_GPIO_Init>
}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 800086a:	4a76      	ldr	r2, [pc, #472]	@ (8000a44 <DHT_getData+0x1e4>)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000874:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	799b      	ldrb	r3, [r3, #6]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d103      	bne.n	8000888 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000880:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000884:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000886:	e002      	b.n	800088e <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8000888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 800088e:	f001 fb31 	bl	8001ef4 <HAL_GetTick>
 8000892:	4602      	mov	r2, r0
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	1ad2      	subs	r2, r2, r3
 800089a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800089c:	429a      	cmp	r2, r3
 800089e:	d212      	bcs.n	80008c6 <DHT_getData+0x66>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00e      	beq.n	80008c6 <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	61bb      	str	r3, [r7, #24]
		return data;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	461a      	mov	r2, r3
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80008c4:	e166      	b.n	8000b94 <DHT_getData+0x334>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 80008c6:	f001 fb15 	bl	8001ef4 <HAL_GetTick>
 80008ca:	4603      	mov	r3, r0
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff ff7c 	bl	80007d0 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	f002 fdd5 	bl	8003492 <HAL_GPIO_WritePin>
	Delay(18);
 80008e8:	2012      	movs	r0, #18
 80008ea:	f001 fb0d 	bl	8001f08 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	f002 fdca 	bl	8003492 <HAL_GPIO_WritePin>
	goToInput(sensor);
 80008fe:	6838      	ldr	r0, [r7, #0]
 8000900:	f7ff ff8f 	bl	8000822 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 800090c:	e01a      	b.n	8000944 <DHT_getData+0xe4>
		timeout++;
 800090e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000910:	3301      	adds	r3, #1
 8000912:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8000914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000916:	f242 7210 	movw	r2, #10000	@ 0x2710
 800091a:	4293      	cmp	r3, r2
 800091c:	d912      	bls.n	8000944 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 800091e:	b662      	cpsie	i
}
 8000920:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000928:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000930:	60da      	str	r2, [r3, #12]

			return data;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	461a      	mov	r2, r3
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800093e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000942:	e127      	b.n	8000b94 <DHT_getData+0x334>
	while(getLine()) {
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	889b      	ldrh	r3, [r3, #4]
 800094c:	4619      	mov	r1, r3
 800094e:	4610      	mov	r0, r2
 8000950:	f002 fd88 	bl	8003464 <HAL_GPIO_ReadPin>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d0d9      	beq.n	800090e <DHT_getData+0xae>
		}
	}
	timeout = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание подъёма
	while(!getLine()) {
 800095e:	e01a      	b.n	8000996 <DHT_getData+0x136>
		timeout++;
 8000960:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000962:	3301      	adds	r3, #1
 8000964:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8000966:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000968:	f242 7210 	movw	r2, #10000	@ 0x2710
 800096c:	4293      	cmp	r3, r2
 800096e:	d912      	bls.n	8000996 <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 8000970:	b662      	cpsie	i
}
 8000972:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 800097a:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000982:	60da      	str	r2, [r3, #12]

			return data;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	461a      	mov	r2, r3
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000990:	e882 0003 	stmia.w	r2, {r0, r1}
 8000994:	e0fe      	b.n	8000b94 <DHT_getData+0x334>
	while(!getLine()) {
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	889b      	ldrh	r3, [r3, #4]
 800099e:	4619      	mov	r1, r3
 80009a0:	4610      	mov	r0, r2
 80009a2:	f002 fd5f 	bl	8003464 <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d1d9      	bne.n	8000960 <DHT_getData+0x100>
		}
	}
	timeout = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 80009b0:	e012      	b.n	80009d8 <DHT_getData+0x178>
		timeout++;
 80009b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009b4:	3301      	adds	r3, #1
 80009b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 80009b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80009be:	4293      	cmp	r3, r2
 80009c0:	d90a      	bls.n	80009d8 <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 80009c2:	b662      	cpsie	i
}
 80009c4:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	461a      	mov	r2, r3
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80009d6:	e0dd      	b.n	8000b94 <DHT_getData+0x334>
	while(getLine()) {
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	889b      	ldrh	r3, [r3, #4]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4610      	mov	r0, r2
 80009e4:	f002 fd3e 	bl	8003464 <HAL_GPIO_ReadPin>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d0e1      	beq.n	80009b2 <DHT_getData+0x152>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 80009ee:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <DHT_getData+0x1e8>)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f8:	6018      	str	r0, [r3, #0]
 80009fa:	3304      	adds	r3, #4
 80009fc:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000a04:	e05d      	b.n	8000ac2 <DHT_getData+0x262>
		for(uint8_t b = 7; b != 255; b--) {
 8000a06:	2307      	movs	r3, #7
 8000a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000a0c:	e050      	b.n	8000ab0 <DHT_getData+0x250>
			uint16_t hT = 0, lT = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	843b      	strh	r3, [r7, #32]
 8000a12:	2300      	movs	r3, #0
 8000a14:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8000a16:	e002      	b.n	8000a1e <DHT_getData+0x1be>
 8000a18:	8bfb      	ldrh	r3, [r7, #30]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	83fb      	strh	r3, [r7, #30]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	889b      	ldrh	r3, [r3, #4]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4610      	mov	r0, r2
 8000a2a:	f002 fd1b 	bl	8003464 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d004      	beq.n	8000a3e <DHT_getData+0x1de>
 8000a34:	8bfb      	ldrh	r3, [r7, #30]
 8000a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d1ec      	bne.n	8000a18 <DHT_getData+0x1b8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	84bb      	strh	r3, [r7, #36]	@ 0x24
			while(getLine()&& hT != 65535) hT++;
 8000a42:	e006      	b.n	8000a52 <DHT_getData+0x1f2>
 8000a44:	08006c08 	.word	0x08006c08
 8000a48:	08006c10 	.word	0x08006c10
 8000a4c:	8c3b      	ldrh	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	843b      	strh	r3, [r7, #32]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	889b      	ldrh	r3, [r3, #4]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	f002 fd01 	bl	8003464 <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d104      	bne.n	8000a72 <DHT_getData+0x212>
 8000a68:	8c3b      	ldrh	r3, [r7, #32]
 8000a6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d1ec      	bne.n	8000a4c <DHT_getData+0x1ec>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 8000a72:	8c3a      	ldrh	r2, [r7, #32]
 8000a74:	8bfb      	ldrh	r3, [r7, #30]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d915      	bls.n	8000aa6 <DHT_getData+0x246>
 8000a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000a7e:	3328      	adds	r3, #40	@ 0x28
 8000a80:	443b      	add	r3, r7
 8000a82:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000a86:	b25a      	sxtb	r2, r3
 8000a88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b25a      	sxtb	r2, r3
 8000a98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	3328      	adds	r3, #40	@ 0x28
 8000aa0:	443b      	add	r3, r7
 8000aa2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 8000aa6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000ab0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000ab4:	2bff      	cmp	r3, #255	@ 0xff
 8000ab6:	d1aa      	bne.n	8000a0e <DHT_getData+0x1ae>
	for(uint8_t a = 0; a < 5; a++) {
 8000ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000abc:	3301      	adds	r3, #1
 8000abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000ac2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d99d      	bls.n	8000a06 <DHT_getData+0x1a6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000aca:	b662      	cpsie	i
}
 8000acc:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8000ace:	7b3a      	ldrb	r2, [r7, #12]
 8000ad0:	7b7b      	ldrb	r3, [r7, #13]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	7bbb      	ldrb	r3, [r7, #14]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4413      	add	r3, r2
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	7c3b      	ldrb	r3, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d147      	bne.n	8000b78 <DHT_getData+0x318>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	799b      	ldrb	r3, [r3, #6]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d133      	bne.n	8000b58 <DHT_getData+0x2f8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8000af0:	7b3b      	ldrb	r3, [r7, #12]
 8000af2:	021b      	lsls	r3, r3, #8
 8000af4:	7b7a      	ldrb	r2, [r7, #13]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fc9d 	bl	8000438 <__aeabi_i2f>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4926      	ldr	r1, [pc, #152]	@ (8000b9c <DHT_getData+0x33c>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fb2a 	bl	800015c <__aeabi_fmul>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0e      	blt.n	8000b32 <DHT_getData+0x2d2>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	7bfa      	ldrb	r2, [r7, #15]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fc8b 	bl	8000438 <__aeabi_i2f>
 8000b22:	4603      	mov	r3, r0
 8000b24:	491d      	ldr	r1, [pc, #116]	@ (8000b9c <DHT_getData+0x33c>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fb18 	bl	800015c <__aeabi_fmul>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	e012      	b.n	8000b58 <DHT_getData+0x2f8>
			}	else {
				rawData[2] &= ~(1<<7);
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8000b3c:	7bbb      	ldrb	r3, [r7, #14]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	7bfa      	ldrb	r2, [r7, #15]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fc77 	bl	8000438 <__aeabi_i2f>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4914      	ldr	r1, [pc, #80]	@ (8000ba0 <DHT_getData+0x340>)
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fb04 	bl	800015c <__aeabi_fmul>
 8000b54:	4603      	mov	r3, r0
 8000b56:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	799b      	ldrb	r3, [r3, #6]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10b      	bne.n	8000b78 <DHT_getData+0x318>
			data.hum = (float)rawData[0];
 8000b60:	7b3b      	ldrb	r3, [r7, #12]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fc64 	bl	8000430 <__aeabi_ui2f>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 8000b6c:	7bbb      	ldrb	r3, [r7, #14]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fc5e 	bl	8000430 <__aeabi_ui2f>
 8000b74:	4603      	mov	r3, r0
 8000b76:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	461a      	mov	r2, r3
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b90:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	3dcccccd 	.word	0x3dcccccd
 8000ba0:	bdcccccd 	.word	0xbdcccccd

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b510      	push	{r4, lr}
 8000ba6:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba8:	2214      	movs	r2, #20
 8000baa:	2100      	movs	r1, #0
 8000bac:	a80c      	add	r0, sp, #48	@ 0x30
 8000bae:	f005 fb5b 	bl	8006268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb2:	2214      	movs	r2, #20
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	eb0d 0002 	add.w	r0, sp, r2
 8000bba:	f005 fb55 	bl	8006268 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	a801      	add	r0, sp, #4
 8000bc4:	f005 fb50 	bl	8006268 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bce:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd0:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bdc:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bde:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be0:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f003 f91b 	bl	8003e1c <HAL_RCC_OscConfig>
 8000be6:	b108      	cbz	r0, 8000bec <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bea:	e7fe      	b.n	8000bea <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bee:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf8:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	a805      	add	r0, sp, #20
 8000c00:	f003 fb8e 	bl	8004320 <HAL_RCC_ClockConfig>
 8000c04:	b108      	cbz	r0, 8000c0a <SystemClock_Config+0x66>
 8000c06:	b672      	cpsid	i
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c10:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c12:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c14:	f003 fd12 	bl	800463c <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	b108      	cbz	r0, 8000c1e <SystemClock_Config+0x7a>
 8000c1a:	b672      	cpsid	i
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <SystemClock_Config+0x78>
}
 8000c1e:	b014      	add	sp, #80	@ 0x50
 8000c20:	bd10      	pop	{r4, pc}
	...

08000c24 <main>:
{
 8000c24:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4ca2      	ldr	r4, [pc, #648]	@ (8000eb0 <main+0x28c>)
{
 8000c28:	b0e2      	sub	sp, #392	@ 0x188
  HAL_Init();
 8000c2a:	f001 f90b 	bl	8001e44 <HAL_Init>
  SystemClock_Config();
 8000c2e:	f7ff ffb9 	bl	8000ba4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	2210      	movs	r2, #16
 8000c34:	2100      	movs	r1, #0
 8000c36:	a849      	add	r0, sp, #292	@ 0x124
 8000c38:	f005 fb16 	bl	8006268 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3c:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3e:	2500      	movs	r5, #0
 8000c40:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c44:	f043 0310 	orr.w	r3, r3, #16
  GPIO_InitStruct.Pin = RST_8266_Pin;
 8000c48:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4c:	61a3      	str	r3, [r4, #24]
 8000c4e:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	9338      	str	r3, [sp, #224]	@ 0xe0
 8000c58:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5a:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_RESET);
 8000c5c:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	f043 0320 	orr.w	r3, r3, #32
 8000c62:	61a3      	str	r3, [r4, #24]
 8000c64:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_RESET);
 8000c66:	4893      	ldr	r0, [pc, #588]	@ (8000eb4 <main+0x290>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	9339      	str	r3, [sp, #228]	@ 0xe4
 8000c6e:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	69a3      	ldr	r3, [r4, #24]
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	61a3      	str	r3, [r4, #24]
 8000c78:	69a3      	ldr	r3, [r4, #24]
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	933a      	str	r3, [sp, #232]	@ 0xe8
 8000c80:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	69a3      	ldr	r3, [r4, #24]
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	61a3      	str	r3, [r4, #24]
 8000c8a:	69a3      	ldr	r3, [r4, #24]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	933b      	str	r3, [sp, #236]	@ 0xec
 8000c92:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_RESET);
 8000c94:	f002 fbfd 	bl	8003492 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000c98:	4886      	ldr	r0, [pc, #536]	@ (8000eb4 <main+0x290>)
 8000c9a:	a949      	add	r1, sp, #292	@ 0x124
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	e9cd 6549 	strd	r6, r5, [sp, #292]	@ 0x124
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca0:	964b      	str	r6, [sp, #300]	@ 0x12c
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f002 fa5b 	bl	800315c <HAL_GPIO_Init>
  HAL_GPIO_Init(RST_8266_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	4883      	ldr	r0, [pc, #524]	@ (8000eb4 <main+0x290>)
 8000ca8:	a949      	add	r1, sp, #292	@ 0x124
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	e9cd 8649 	strd	r8, r6, [sp, #292]	@ 0x124
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	954b      	str	r5, [sp, #300]	@ 0x12c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	974c      	str	r7, [sp, #304]	@ 0x130
  HAL_GPIO_Init(RST_8266_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f002 fa53 	bl	800315c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin|KEY_2_Pin|KEY_3_Pin;
 8000cb6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	487e      	ldr	r0, [pc, #504]	@ (8000eb4 <main+0x290>)
 8000cbc:	a949      	add	r1, sp, #292	@ 0x124
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	e9cd 3549 	strd	r3, r5, [sp, #292]	@ 0x124
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc2:	974b      	str	r7, [sp, #300]	@ 0x12c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f002 fa4a 	bl	800315c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc8:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cca:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ccc:	4333      	orrs	r3, r6
 8000cce:	6163      	str	r3, [r4, #20]
 8000cd0:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cd2:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd4:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cd6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd8:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000cda:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cdc:	f001 ff65 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ce0:	200b      	movs	r0, #11
 8000ce2:	f001 ff7e 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ce6:	462a      	mov	r2, r5
 8000ce8:	4629      	mov	r1, r5
 8000cea:	200c      	movs	r0, #12
 8000cec:	f001 ff5d 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000cf0:	200c      	movs	r0, #12
 8000cf2:	f001 ff76 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000cf6:	462a      	mov	r2, r5
 8000cf8:	4629      	mov	r1, r5
 8000cfa:	200d      	movs	r0, #13
 8000cfc:	f001 ff55 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d00:	200d      	movs	r0, #13
 8000d02:	f001 ff6e 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8000d06:	4c6c      	ldr	r4, [pc, #432]	@ (8000eb8 <main+0x294>)
 8000d08:	4b6c      	ldr	r3, [pc, #432]	@ (8000ebc <main+0x298>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d0a:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8000d0c:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d12:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d14:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d18:	e9cd 5549 	strd	r5, r5, [sp, #292]	@ 0x124
 8000d1c:	954b      	str	r5, [sp, #300]	@ 0x12c
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d1e:	7326      	strb	r6, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d20:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d22:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d24:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000d26:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d28:	f001 f912 	bl	8001f50 <HAL_ADC_Init>
 8000d2c:	b108      	cbz	r0, 8000d32 <main+0x10e>
 8000d2e:	b672      	cpsid	i
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <main+0x10c>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d32:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d34:	4620      	mov	r0, r4
 8000d36:	a949      	add	r1, sp, #292	@ 0x124
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d38:	e9cd 8649 	strd	r8, r6, [sp, #292]	@ 0x124
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d3c:	934b      	str	r3, [sp, #300]	@ 0x12c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3e:	f001 fc5b 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8000d42:	b108      	cbz	r0, 8000d48 <main+0x124>
 8000d44:	b672      	cpsid	i
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <main+0x122>
  sConfig.Channel = ADC_CHANNEL_5;
 8000d48:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	a949      	add	r1, sp, #292	@ 0x124
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d4e:	e9cd 3749 	strd	r3, r7, [sp, #292]	@ 0x124
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d52:	f001 fc51 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b108      	cbz	r0, 8000d5e <main+0x13a>
 8000d5a:	b672      	cpsid	i
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <main+0x138>
  hi2c1.Instance = I2C1;
 8000d5e:	4858      	ldr	r0, [pc, #352]	@ (8000ec0 <main+0x29c>)
  hi2c1.Init.ClockSpeed = 100000;
 8000d60:	4a58      	ldr	r2, [pc, #352]	@ (8000ec4 <main+0x2a0>)
 8000d62:	4c59      	ldr	r4, [pc, #356]	@ (8000ec8 <main+0x2a4>)
  hi2c1.Init.OwnAddress1 = 0;
 8000d64:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000d68:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d70:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d74:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d78:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d7a:	f002 fba3 	bl	80034c4 <HAL_I2C_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b108      	cbz	r0, 8000d86 <main+0x162>
 8000d82:	b672      	cpsid	i
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <main+0x160>
  huart1.Init.BaudRate = 115200;
 8000d86:	f44f 35e1 	mov.w	r5, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d8a:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 8000d8c:	484f      	ldr	r0, [pc, #316]	@ (8000ecc <main+0x2a8>)
  huart1.Init.BaudRate = 115200;
 8000d8e:	4a50      	ldr	r2, [pc, #320]	@ (8000ed0 <main+0x2ac>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d90:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d94:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d98:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9a:	61c3      	str	r3, [r0, #28]
  huart1.Init.BaudRate = 115200;
 8000d9c:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da0:	f004 fb73 	bl	800548a <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b108      	cbz	r0, 8000dac <main+0x188>
 8000da8:	b672      	cpsid	i
  while (1)
 8000daa:	e7fe      	b.n	8000daa <main+0x186>
  huart3.Instance = USART3;
 8000dac:	4849      	ldr	r0, [pc, #292]	@ (8000ed4 <main+0x2b0>)
 8000dae:	4a4a      	ldr	r2, [pc, #296]	@ (8000ed8 <main+0x2b4>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8000db4:	e9c0 2500 	strd	r2, r5, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db8:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dc0:	f004 fb63 	bl	800548a <HAL_UART_Init>
 8000dc4:	4605      	mov	r5, r0
 8000dc6:	b108      	cbz	r0, 8000dcc <main+0x1a8>
 8000dc8:	b672      	cpsid	i
  while (1)
 8000dca:	e7fe      	b.n	8000dca <main+0x1a6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dcc:	4601      	mov	r1, r0
 8000dce:	2210      	movs	r2, #16
 8000dd0:	a83e      	add	r0, sp, #248	@ 0xf8
 8000dd2:	f005 fa49 	bl	8006268 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd6:	221c      	movs	r2, #28
 8000dd8:	4629      	mov	r1, r5
 8000dda:	a842      	add	r0, sp, #264	@ 0x108
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	e9cd 553c 	strd	r5, r5, [sp, #240]	@ 0xf0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de0:	f005 fa42 	bl	8006268 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de4:	4629      	mov	r1, r5
 8000de6:	2220      	movs	r2, #32
 8000de8:	a849      	add	r0, sp, #292	@ 0x124
 8000dea:	f005 fa3d 	bl	8006268 <memset>
  htim1.Init.Prescaler = 72;
 8000dee:	2348      	movs	r3, #72	@ 0x48
  htim1.Instance = TIM1;
 8000df0:	4c3a      	ldr	r4, [pc, #232]	@ (8000edc <main+0x2b8>)
  htim1.Init.Prescaler = 72;
 8000df2:	493b      	ldr	r1, [pc, #236]	@ (8000ee0 <main+0x2bc>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df4:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 72;
 8000df6:	e9c4 1300 	strd	r1, r3, [r4]
  htim1.Init.Period = 100-1;
 8000dfa:	2363      	movs	r3, #99	@ 0x63
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	e9c4 5505 	strd	r5, r5, [r4, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e00:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e06:	f003 fccf 	bl	80047a8 <HAL_TIM_Base_Init>
 8000e0a:	b108      	cbz	r0, 8000e10 <main+0x1ec>
 8000e0c:	b672      	cpsid	i
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <main+0x1ea>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e14:	4620      	mov	r0, r4
 8000e16:	a93e      	add	r1, sp, #248	@ 0xf8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e18:	933e      	str	r3, [sp, #248]	@ 0xf8
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f003 ff1b 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 8000e1e:	b108      	cbz	r0, 8000e24 <main+0x200>
 8000e20:	b672      	cpsid	i
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <main+0x1fe>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e24:	4620      	mov	r0, r4
 8000e26:	f003 fd59 	bl	80048dc <HAL_TIM_PWM_Init>
 8000e2a:	b108      	cbz	r0, 8000e30 <main+0x20c>
 8000e2c:	b672      	cpsid	i
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <main+0x20a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e30:	e9cd 003c 	strd	r0, r0, [sp, #240]	@ 0xf0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e34:	a93c      	add	r1, sp, #240	@ 0xf0
 8000e36:	4620      	mov	r0, r4
 8000e38:	f004 fa78 	bl	800532c <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	b108      	cbz	r0, 8000e42 <main+0x21e>
 8000e3e:	b672      	cpsid	i
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <main+0x21c>
  sConfigOC.Pulse = 36;
 8000e42:	2260      	movs	r2, #96	@ 0x60
 8000e44:	2324      	movs	r3, #36	@ 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000e46:	f44f 7780 	mov.w	r7, #256	@ 0x100
  sConfigOC.Pulse = 36;
 8000e4a:	e9cd 2342 	strd	r2, r3, [sp, #264]	@ 0x108
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4e:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e50:	4822      	ldr	r0, [pc, #136]	@ (8000edc <main+0x2b8>)
 8000e52:	a942      	add	r1, sp, #264	@ 0x108
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e54:	e9cd 2244 	strd	r2, r2, [sp, #272]	@ 0x110
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e58:	e9cd 7247 	strd	r7, r2, [sp, #284]	@ 0x11c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5c:	9246      	str	r2, [sp, #280]	@ 0x118
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5e:	f003 fe37 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8000e62:	b108      	cbz	r0, 8000e68 <main+0x244>
 8000e64:	b672      	cpsid	i
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <main+0x242>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e68:	2204      	movs	r2, #4
 8000e6a:	481c      	ldr	r0, [pc, #112]	@ (8000edc <main+0x2b8>)
 8000e6c:	a942      	add	r1, sp, #264	@ 0x108
 8000e6e:	f003 fe2f 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8000e72:	b108      	cbz	r0, 8000e78 <main+0x254>
 8000e74:	b672      	cpsid	i
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <main+0x252>
  sConfigOC.Pulse = 0;
 8000e78:	9043      	str	r0, [sp, #268]	@ 0x10c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e7a:	9047      	str	r0, [sp, #284]	@ 0x11c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	4817      	ldr	r0, [pc, #92]	@ (8000edc <main+0x2b8>)
 8000e80:	a942      	add	r1, sp, #264	@ 0x108
 8000e82:	f003 fe25 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8000e86:	b108      	cbz	r0, 8000e8c <main+0x268>
 8000e88:	b672      	cpsid	i
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <main+0x266>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e90:	e9cd 0049 	strd	r0, r0, [sp, #292]	@ 0x124
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e94:	e9cd 004b 	strd	r0, r0, [sp, #300]	@ 0x12c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e98:	904d      	str	r0, [sp, #308]	@ 0x134
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e9a:	9050      	str	r0, [sp, #320]	@ 0x140
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e9c:	a949      	add	r1, sp, #292	@ 0x124
 8000e9e:	480f      	ldr	r0, [pc, #60]	@ (8000edc <main+0x2b8>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea0:	934e      	str	r3, [sp, #312]	@ 0x138
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea2:	f004 faa1 	bl	80053e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ea6:	4606      	mov	r6, r0
 8000ea8:	b1e0      	cbz	r0, 8000ee4 <main+0x2c0>
 8000eaa:	b672      	cpsid	i
  while (1)
 8000eac:	e7fe      	b.n	8000eac <main+0x288>
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	20000424 	.word	0x20000424
 8000ebc:	40012400 	.word	0x40012400
 8000ec0:	2000035c 	.word	0x2000035c
 8000ec4:	000186a0 	.word	0x000186a0
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	20000284 	.word	0x20000284
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	2000023c 	.word	0x2000023c
 8000ed8:	40004800 	.word	0x40004800
 8000edc:	20000314 	.word	0x20000314
 8000ee0:	40012c00 	.word	0x40012c00
  HAL_TIM_MspPostInit(&htim1);
 8000ee4:	483e      	ldr	r0, [pc, #248]	@ (8000fe0 <main+0x3bc>)
 8000ee6:	f000 fda3 	bl	8001a30 <HAL_TIM_MspPostInit>
  hadc2.Instance = ADC2;
 8000eea:	4d3e      	ldr	r5, [pc, #248]	@ (8000fe4 <main+0x3c0>)
 8000eec:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe8 <main+0x3c4>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	e9cd 6649 	strd	r6, r6, [sp, #292]	@ 0x124
 8000ef2:	964b      	str	r6, [sp, #300]	@ 0x12c
  hadc2.Instance = ADC2;
 8000ef4:	602b      	str	r3, [r5, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ef6:	60af      	str	r7, [r5, #8]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000efc:	2701      	movs	r7, #1
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000efe:	752e      	strb	r6, [r5, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f00:	606e      	str	r6, [r5, #4]
  hadc2.Init.NbrOfConversion = 3;
 8000f02:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f04:	4628      	mov	r0, r5
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f06:	732f      	strb	r7, [r5, #12]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f08:	61eb      	str	r3, [r5, #28]
  hadc2.Init.NbrOfConversion = 3;
 8000f0a:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f0c:	f001 f820 	bl	8001f50 <HAL_ADC_Init>
 8000f10:	b108      	cbz	r0, 8000f16 <main+0x2f2>
 8000f12:	b672      	cpsid	i
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <main+0x2f0>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f16:	904b      	str	r0, [sp, #300]	@ 0x12c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f18:	a949      	add	r1, sp, #292	@ 0x124
 8000f1a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1c:	e9cd 7749 	strd	r7, r7, [sp, #292]	@ 0x124
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f20:	f001 fb6a 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8000f24:	b108      	cbz	r0, 8000f2a <main+0x306>
 8000f26:	b672      	cpsid	i
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <main+0x304>
  sConfig.Channel = ADC_CHANNEL_2;
 8000f2a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	a949      	add	r1, sp, #292	@ 0x124
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f30:	e9cd 3349 	strd	r3, r3, [sp, #292]	@ 0x124
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f34:	f001 fb60 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8000f38:	b108      	cbz	r0, 8000f3e <main+0x31a>
 8000f3a:	b672      	cpsid	i
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <main+0x318>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f3e:	4628      	mov	r0, r5
 8000f40:	a949      	add	r1, sp, #292	@ 0x124
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f42:	e9cd 6649 	strd	r6, r6, [sp, #292]	@ 0x124
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f46:	f001 fb57 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8000f4a:	4605      	mov	r5, r0
 8000f4c:	b108      	cbz	r0, 8000f52 <main+0x32e>
 8000f4e:	b672      	cpsid	i
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <main+0x32c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	4601      	mov	r1, r0
 8000f54:	2210      	movs	r2, #16
 8000f56:	a842      	add	r0, sp, #264	@ 0x108
 8000f58:	f005 f986 	bl	8006268 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5c:	221c      	movs	r2, #28
 8000f5e:	4629      	mov	r1, r5
 8000f60:	a849      	add	r0, sp, #292	@ 0x124
  htim3.Instance = TIM3;
 8000f62:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8000fec <main+0x3c8>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f66:	e9cd 553e 	strd	r5, r5, [sp, #248]	@ 0xf8
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	f005 f97d 	bl	8006268 <memset>
  htim3.Instance = TIM3;
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <main+0x3cc>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f70:	4640      	mov	r0, r8
  htim3.Init.Prescaler = 0;
 8000f72:	e9c8 3500 	strd	r3, r5, [r8]
  htim3.Init.Period = 720;
 8000f76:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	f8c8 5008 	str.w	r5, [r8, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	e9c8 3503 	strd	r3, r5, [r8, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	f8c8 5018 	str.w	r5, [r8, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f86:	f003 fc0f 	bl	80047a8 <HAL_TIM_Base_Init>
 8000f8a:	b108      	cbz	r0, 8000f90 <main+0x36c>
 8000f8c:	b672      	cpsid	i
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <main+0x36a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f94:	4640      	mov	r0, r8
 8000f96:	a942      	add	r1, sp, #264	@ 0x108
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	9342      	str	r3, [sp, #264]	@ 0x108
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f9a:	f003 fe5b 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 8000f9e:	b108      	cbz	r0, 8000fa4 <main+0x380>
 8000fa0:	b672      	cpsid	i
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <main+0x37e>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fa4:	4811      	ldr	r0, [pc, #68]	@ (8000fec <main+0x3c8>)
 8000fa6:	f003 fc99 	bl	80048dc <HAL_TIM_PWM_Init>
 8000faa:	b108      	cbz	r0, 8000fb0 <main+0x38c>
 8000fac:	b672      	cpsid	i
  while (1)
 8000fae:	e7fe      	b.n	8000fae <main+0x38a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	e9cd 003e 	strd	r0, r0, [sp, #248]	@ 0xf8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb4:	a93e      	add	r1, sp, #248	@ 0xf8
 8000fb6:	480d      	ldr	r0, [pc, #52]	@ (8000fec <main+0x3c8>)
 8000fb8:	f004 f9b8 	bl	800532c <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	b108      	cbz	r0, 8000fc4 <main+0x3a0>
 8000fc0:	b672      	cpsid	i
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <main+0x39e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc4:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc6:	904b      	str	r0, [sp, #300]	@ 0x12c
  sConfigOC.Pulse = 0;
 8000fc8:	e9cd 3049 	strd	r3, r0, [sp, #292]	@ 0x124
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	904d      	str	r0, [sp, #308]	@ 0x134
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fce:	a949      	add	r1, sp, #292	@ 0x124
 8000fd0:	4806      	ldr	r0, [pc, #24]	@ (8000fec <main+0x3c8>)
 8000fd2:	f003 fd7d 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8000fd6:	4681      	mov	r9, r0
 8000fd8:	b160      	cbz	r0, 8000ff4 <main+0x3d0>
 8000fda:	b672      	cpsid	i
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x3b8>
 8000fde:	bf00      	nop
 8000fe0:	20000314 	.word	0x20000314
 8000fe4:	200003f4 	.word	0x200003f4
 8000fe8:	40012800 	.word	0x40012800
 8000fec:	200002cc 	.word	0x200002cc
 8000ff0:	40000400 	.word	0x40000400
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_SET);
 8000ff4:	4f9f      	ldr	r7, [pc, #636]	@ (8001274 <main+0x650>)
  HAL_TIM_MspPostInit(&htim3);
 8000ff6:	48a0      	ldr	r0, [pc, #640]	@ (8001278 <main+0x654>)
 8000ff8:	f000 fd1a 	bl	8001a30 <HAL_TIM_MspPostInit>
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2104      	movs	r1, #4
 8001000:	4638      	mov	r0, r7
 8001002:	f002 fa46 	bl	8003492 <HAL_GPIO_WritePin>
  HAL_ADC_Start(&hadc1);
 8001006:	489d      	ldr	r0, [pc, #628]	@ (800127c <main+0x658>)
 8001008:	f001 f87a 	bl	8002100 <HAL_ADC_Start>
  ssd1306_Init();
 800100c:	f000 f99a 	bl	8001344 <ssd1306_Init>
  ssd1306_TestFonts();
 8001010:	f000 fb76 	bl	8001700 <ssd1306_TestFonts>
  HAL_TIM_Base_Start(&htim1);
 8001014:	489a      	ldr	r0, [pc, #616]	@ (8001280 <main+0x65c>)
 8001016:	f003 fc17 	bl	8004848 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800101a:	4649      	mov	r1, r9
 800101c:	4898      	ldr	r0, [pc, #608]	@ (8001280 <main+0x65c>)
 800101e:	f003 fcb5 	bl	800498c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001022:	2104      	movs	r1, #4
 8001024:	4896      	ldr	r0, [pc, #600]	@ (8001280 <main+0x65c>)
 8001026:	f003 fcb1 	bl	800498c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800102a:	2108      	movs	r1, #8
 800102c:	4894      	ldr	r0, [pc, #592]	@ (8001280 <main+0x65c>)
 800102e:	f003 fcad 	bl	800498c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8001032:	4891      	ldr	r0, [pc, #580]	@ (8001278 <main+0x654>)
 8001034:	f003 fc08 	bl	8004848 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001038:	4649      	mov	r1, r9
 800103a:	488f      	ldr	r0, [pc, #572]	@ (8001278 <main+0x654>)
 800103c:	f003 fca6 	bl	800498c <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)PUMP, 2);
 8001040:	2202      	movs	r2, #2
 8001042:	4990      	ldr	r1, [pc, #576]	@ (8001284 <main+0x660>)
 8001044:	488d      	ldr	r0, [pc, #564]	@ (800127c <main+0x658>)
 8001046:	f001 f909 	bl	800225c <HAL_ADC_Start_DMA>
  DHT_sensor livingRoom = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 800104a:	220e      	movs	r2, #14
 800104c:	4649      	mov	r1, r9
 800104e:	f50d 7087 	add.w	r0, sp, #270	@ 0x10e
 8001052:	f005 f909 	bl	8006268 <memset>
  UART_Respon=ESP_SendCommand(&huart3, ESP_CMD0,5000,3);
 8001056:	2503      	movs	r5, #3
  DHT_sensor livingRoom = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8001058:	2301      	movs	r3, #1
  UART_Respon=ESP_SendCommand(&huart3, ESP_CMD0,5000,3);
 800105a:	4a8b      	ldr	r2, [pc, #556]	@ (8001288 <main+0x664>)
 800105c:	498b      	ldr	r1, [pc, #556]	@ (800128c <main+0x668>)
  DHT_sensor livingRoom = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 800105e:	f8ad 310c 	strh.w	r3, [sp, #268]	@ 0x10c
  UART_Respon=ESP_SendCommand(&huart3, ESP_CMD0,5000,3);
 8001062:	a802      	add	r0, sp, #8
 8001064:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001068:	9500      	str	r5, [sp, #0]
  DHT_sensor livingRoom = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 800106a:	9742      	str	r7, [sp, #264]	@ 0x108
  UART_Respon=ESP_SendCommand(&huart3, ESP_CMD0,5000,3);
 800106c:	f7ff fa58 	bl	8000520 <ESP_SendCommand>
 8001070:	22cc      	movs	r2, #204	@ 0xcc
 8001072:	a902      	add	r1, sp, #8
 8001074:	4886      	ldr	r0, [pc, #536]	@ (8001290 <main+0x66c>)
 8001076:	f005 f963 	bl	8006340 <memcpy>
  HAL_Delay(20000);
 800107a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800107e:	f000 ff43 	bl	8001f08 <HAL_Delay>
  UART_Respon=ESP_SendCommand(&huart3, ESP_CMD6,5000,3);HAL_Delay(100);
 8001082:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001086:	4a83      	ldr	r2, [pc, #524]	@ (8001294 <main+0x670>)
 8001088:	4980      	ldr	r1, [pc, #512]	@ (800128c <main+0x668>)
 800108a:	a802      	add	r0, sp, #8
 800108c:	9500      	str	r5, [sp, #0]
 800108e:	f7ff fa47 	bl	8000520 <ESP_SendCommand>
 8001092:	22cc      	movs	r2, #204	@ 0xcc
 8001094:	a902      	add	r1, sp, #8
 8001096:	487e      	ldr	r0, [pc, #504]	@ (8001290 <main+0x66c>)
 8001098:	f005 f952 	bl	8006340 <memcpy>
 800109c:	2064      	movs	r0, #100	@ 0x64
 800109e:	f000 ff33 	bl	8001f08 <HAL_Delay>
  UART_Respon=ESP_SendCommand(&huart3, ESP_CMD7,5000,3);HAL_Delay(100);
 80010a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001298 <main+0x674>)
 80010a8:	4978      	ldr	r1, [pc, #480]	@ (800128c <main+0x668>)
 80010aa:	a802      	add	r0, sp, #8
 80010ac:	9500      	str	r5, [sp, #0]
 80010ae:	f7ff fa37 	bl	8000520 <ESP_SendCommand>
 80010b2:	22cc      	movs	r2, #204	@ 0xcc
 80010b4:	a902      	add	r1, sp, #8
 80010b6:	4876      	ldr	r0, [pc, #472]	@ (8001290 <main+0x66c>)
 80010b8:	f005 f942 	bl	8006340 <memcpy>
 80010bc:	2064      	movs	r0, #100	@ 0x64
 80010be:	f000 ff23 	bl	8001f08 <HAL_Delay>
  UART_Respon=ESP_SendCommand(&huart3, ESP_CMD8,5000,3);HAL_Delay(100);
 80010c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010c6:	4a75      	ldr	r2, [pc, #468]	@ (800129c <main+0x678>)
 80010c8:	4970      	ldr	r1, [pc, #448]	@ (800128c <main+0x668>)
 80010ca:	a802      	add	r0, sp, #8
 80010cc:	9500      	str	r5, [sp, #0]
 80010ce:	f7ff fa27 	bl	8000520 <ESP_SendCommand>
 80010d2:	22cc      	movs	r2, #204	@ 0xcc
 80010d4:	a902      	add	r1, sp, #8
 80010d6:	486e      	ldr	r0, [pc, #440]	@ (8001290 <main+0x66c>)
 80010d8:	f005 f932 	bl	8006340 <memcpy>
 80010dc:	2064      	movs	r0, #100	@ 0x64
 80010de:	f000 ff13 	bl	8001f08 <HAL_Delay>
  UART_Respon=ESP_SendCommand(&huart3, ESP_CMD9,5000,3);HAL_Delay(100);
 80010e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010e6:	4a6e      	ldr	r2, [pc, #440]	@ (80012a0 <main+0x67c>)
 80010e8:	4968      	ldr	r1, [pc, #416]	@ (800128c <main+0x668>)
 80010ea:	a802      	add	r0, sp, #8
 80010ec:	9500      	str	r5, [sp, #0]
 80010ee:	f7ff fa17 	bl	8000520 <ESP_SendCommand>
 80010f2:	22cc      	movs	r2, #204	@ 0xcc
 80010f4:	4866      	ldr	r0, [pc, #408]	@ (8001290 <main+0x66c>)
 80010f6:	a902      	add	r1, sp, #8
 80010f8:	f005 f922 	bl	8006340 <memcpy>
 80010fc:	2064      	movs	r0, #100	@ 0x64
 80010fe:	f000 ff03 	bl	8001f08 <HAL_Delay>
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001102:	485e      	ldr	r0, [pc, #376]	@ (800127c <main+0x658>)
 8001104:	f001 f988 	bl	8002418 <HAL_ADC_GetValue>
 8001108:	4b66      	ldr	r3, [pc, #408]	@ (80012a4 <main+0x680>)
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 800110a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 800110e:	8018      	strh	r0, [r3, #0]
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001110:	4638      	mov	r0, r7
 8001112:	f002 f9a7 	bl	8003464 <HAL_GPIO_ReadPin>
 8001116:	4e64      	ldr	r6, [pc, #400]	@ (80012a8 <main+0x684>)
 8001118:	b140      	cbz	r0, 800112c <main+0x508>
	    	if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 800111a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800111e:	4638      	mov	r0, r7
 8001120:	f002 f9a0 	bl	8003464 <HAL_GPIO_ReadPin>
 8001124:	b110      	cbz	r0, 800112c <main+0x508>
	    	Period_-=10;
 8001126:	8833      	ldrh	r3, [r6, #0]
 8001128:	3b0a      	subs	r3, #10
 800112a:	8033      	strh	r3, [r6, #0]
	    if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 800112c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001130:	4638      	mov	r0, r7
 8001132:	f002 f997 	bl	8003464 <HAL_GPIO_ReadPin>
 8001136:	b158      	cbz	r0, 8001150 <main+0x52c>
	        if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001138:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800113c:	4638      	mov	r0, r7
 800113e:	f002 f991 	bl	8003464 <HAL_GPIO_ReadPin>
 8001142:	b128      	cbz	r0, 8001150 <main+0x52c>
	    	    	Period_--;
 8001144:	8833      	ldrh	r3, [r6, #0]
 8001146:	3b01      	subs	r3, #1
 8001148:	8033      	strh	r3, [r6, #0]
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	f8c3 903c 	str.w	r9, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001150:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001154:	4638      	mov	r0, r7
 8001156:	f002 f985 	bl	8003464 <HAL_GPIO_ReadPin>
 800115a:	b158      	cbz	r0, 8001174 <main+0x550>
	    	 if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 800115c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001160:	4638      	mov	r0, r7
 8001162:	f002 f97f 	bl	8003464 <HAL_GPIO_ReadPin>
 8001166:	b128      	cbz	r0, 8001174 <main+0x550>
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001168:	220a      	movs	r2, #10
	    		    	Period_++;
 800116a:	8833      	ldrh	r3, [r6, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	8033      	strh	r3, [r6, #0]
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	63da      	str	r2, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001174:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001178:	4638      	mov	r0, r7
 800117a:	f002 f973 	bl	8003464 <HAL_GPIO_ReadPin>
 800117e:	b140      	cbz	r0, 8001192 <main+0x56e>
		    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001180:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001184:	4638      	mov	r0, r7
 8001186:	f002 f96d 	bl	8003464 <HAL_GPIO_ReadPin>
 800118a:	b110      	cbz	r0, 8001192 <main+0x56e>
		    	Period_+=10;
 800118c:	8833      	ldrh	r3, [r6, #0]
 800118e:	330a      	adds	r3, #10
 8001190:	8033      	strh	r3, [r6, #0]
	    DHT_data d = DHT_getData(&livingRoom);
 8001192:	a942      	add	r1, sp, #264	@ 0x108
 8001194:	a83e      	add	r0, sp, #248	@ 0xf8
 8001196:	f7ff fb63 	bl	8000860 <DHT_getData>
		    __HAL_TIM_SET_PRESCALER(&htim1, Period_);
 800119a:	8833      	ldrh	r3, [r6, #0]
 800119c:	6822      	ldr	r2, [r4, #0]
	    ssd1306_Fill(Black);
 800119e:	2000      	movs	r0, #0
		    __HAL_TIM_SET_PRESCALER(&htim1, Period_);
 80011a0:	6293      	str	r3, [r2, #40]	@ 0x28
		  __HAL_TIM_SET_COMPARE(&htim3, 1, Period_);
 80011a2:	f8d8 2000 	ldr.w	r2, [r8]
	    ssd1306_WriteString(msg, Font_11x18, White);
 80011a6:	4d41      	ldr	r5, [pc, #260]	@ (80012ac <main+0x688>)
		  __HAL_TIM_SET_COMPARE(&htim3, 1, Period_);
 80011a8:	6413      	str	r3, [r2, #64]	@ 0x40
	    ssd1306_Fill(Black);
 80011aa:	f000 f939 	bl	8001420 <ssd1306_Fill>
	    ssd1306_SetCursor(0, 0);
 80011ae:	2100      	movs	r1, #0
 80011b0:	4608      	mov	r0, r1
 80011b2:	f000 fa8d 	bl	80016d0 <ssd1306_SetCursor>
	    sprintf(msg, "T:%dC",(uint8_t)d.temp);
 80011b6:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 80011b8:	f7ff f992 	bl	80004e0 <__aeabi_f2uiz>
 80011bc:	493c      	ldr	r1, [pc, #240]	@ (80012b0 <main+0x68c>)
 80011be:	b2c2      	uxtb	r2, r0
 80011c0:	a849      	add	r0, sp, #292	@ 0x124
 80011c2:	f005 f817 	bl	80061f4 <siprintf>
	    ssd1306_WriteString(msg, Font_11x18, White);
 80011c6:	e895 0006 	ldmia.w	r5, {r1, r2}
 80011ca:	2301      	movs	r3, #1
 80011cc:	a849      	add	r0, sp, #292	@ 0x124
 80011ce:	f000 fa59 	bl	8001684 <ssd1306_WriteString>
	    ssd1306_SetCursor(64, 0);
 80011d2:	2100      	movs	r1, #0
 80011d4:	2040      	movs	r0, #64	@ 0x40
 80011d6:	f000 fa7b 	bl	80016d0 <ssd1306_SetCursor>
	    sprintf(msg, "H:%d%%",(uint8_t)d.hum);
 80011da:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 80011dc:	f7ff f980 	bl	80004e0 <__aeabi_f2uiz>
 80011e0:	4934      	ldr	r1, [pc, #208]	@ (80012b4 <main+0x690>)
 80011e2:	b2c2      	uxtb	r2, r0
 80011e4:	a849      	add	r0, sp, #292	@ 0x124
 80011e6:	f005 f805 	bl	80061f4 <siprintf>
	    ssd1306_WriteString(msg, Font_11x18, White);
 80011ea:	e895 0006 	ldmia.w	r5, {r1, r2}
 80011ee:	2301      	movs	r3, #1
 80011f0:	a849      	add	r0, sp, #292	@ 0x124
 80011f2:	f000 fa47 	bl	8001684 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 18);
 80011f6:	2112      	movs	r1, #18
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 fa69 	bl	80016d0 <ssd1306_SetCursor>
	    sprintf(msg, "Duty:%d\r\n", Period_);
 80011fe:	8832      	ldrh	r2, [r6, #0]
 8001200:	492d      	ldr	r1, [pc, #180]	@ (80012b8 <main+0x694>)
 8001202:	a849      	add	r0, sp, #292	@ 0x124
 8001204:	f004 fff6 	bl	80061f4 <siprintf>
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001208:	e895 0006 	ldmia.w	r5, {r1, r2}
 800120c:	2301      	movs	r3, #1
	    sprintf(msg, "U:%d\r\n", PUMP[0]);
 800120e:	4e1d      	ldr	r6, [pc, #116]	@ (8001284 <main+0x660>)
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001210:	a849      	add	r0, sp, #292	@ 0x124
 8001212:	f000 fa37 	bl	8001684 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 36);
 8001216:	2124      	movs	r1, #36	@ 0x24
 8001218:	2000      	movs	r0, #0
 800121a:	f000 fa59 	bl	80016d0 <ssd1306_SetCursor>
	    sprintf(msg, "U:%d\r\n", PUMP[0]);
 800121e:	8832      	ldrh	r2, [r6, #0]
 8001220:	4926      	ldr	r1, [pc, #152]	@ (80012bc <main+0x698>)
 8001222:	a849      	add	r0, sp, #292	@ 0x124
 8001224:	f004 ffe6 	bl	80061f4 <siprintf>
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001228:	e895 0006 	ldmia.w	r5, {r1, r2}
 800122c:	2301      	movs	r3, #1
 800122e:	a849      	add	r0, sp, #292	@ 0x124
 8001230:	f000 fa28 	bl	8001684 <ssd1306_WriteString>
	    ssd1306_SetCursor(64, 36);
 8001234:	2124      	movs	r1, #36	@ 0x24
 8001236:	2040      	movs	r0, #64	@ 0x40
 8001238:	f000 fa4a 	bl	80016d0 <ssd1306_SetCursor>
	    sprintf(msg, "I:%d\r\n", PUMP[1]);
 800123c:	8872      	ldrh	r2, [r6, #2]
 800123e:	4920      	ldr	r1, [pc, #128]	@ (80012c0 <main+0x69c>)
 8001240:	a849      	add	r0, sp, #292	@ 0x124
 8001242:	f004 ffd7 	bl	80061f4 <siprintf>
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001246:	e895 0006 	ldmia.w	r5, {r1, r2}
 800124a:	2301      	movs	r3, #1
 800124c:	a849      	add	r0, sp, #292	@ 0x124
 800124e:	f000 fa19 	bl	8001684 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8001252:	f000 f907 	bl	8001464 <ssd1306_UpdateScreen>
	    HAL_Delay(1000);
 8001256:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800125a:	f000 fe55 	bl	8001f08 <HAL_Delay>
	    ESP_SendData(&huart3, 3, "var1", "var2", "var3");
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <main+0x6a0>)
 8001260:	2203      	movs	r2, #3
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <main+0x6a4>)
 8001266:	4909      	ldr	r1, [pc, #36]	@ (800128c <main+0x668>)
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	a802      	add	r0, sp, #8
 800126c:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <main+0x6a8>)
 800126e:	f7ff f9e1 	bl	8000634 <ESP_SendData>
  {
 8001272:	e746      	b.n	8001102 <main+0x4de>
 8001274:	40010c00 	.word	0x40010c00
 8001278:	200002cc 	.word	0x200002cc
 800127c:	20000424 	.word	0x20000424
 8001280:	20000314 	.word	0x20000314
 8001284:	200000e0 	.word	0x200000e0
 8001288:	2000003d 	.word	0x2000003d
 800128c:	2000023c 	.word	0x2000023c
 8001290:	200000e6 	.word	0x200000e6
 8001294:	20000031 	.word	0x20000031
 8001298:	20000026 	.word	0x20000026
 800129c:	20000018 	.word	0x20000018
 80012a0:	20000002 	.word	0x20000002
 80012a4:	200000e4 	.word	0x200000e4
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000058 	.word	0x20000058
 80012b0:	08006c68 	.word	0x08006c68
 80012b4:	08006c6e 	.word	0x08006c6e
 80012b8:	08006c75 	.word	0x08006c75
 80012bc:	08006c7f 	.word	0x08006c7f
 80012c0:	08006c86 	.word	0x08006c86
 80012c4:	08006c92 	.word	0x08006c92
 80012c8:	08006c97 	.word	0x08006c97
 80012cc:	08006c8d 	.word	0x08006c8d

080012d0 <Error_Handler>:
 80012d0:	b672      	cpsid	i
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <Error_Handler+0x2>

080012d4 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af04      	add	r7, sp, #16
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2200      	movs	r2, #0
 80012fc:	2178      	movs	r1, #120	@ 0x78
 80012fe:	4803      	ldr	r0, [pc, #12]	@ (800130c <ssd1306_WriteCommand+0x2c>)
 8001300:	f002 fa24 	bl	800374c <HAL_I2C_Mem_Write>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000035c 	.word	0x2000035c

08001310 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af04      	add	r7, sp, #16
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	f04f 32ff 	mov.w	r2, #4294967295
 8001322:	9202      	str	r2, [sp, #8]
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	2240      	movs	r2, #64	@ 0x40
 800132e:	2178      	movs	r1, #120	@ 0x78
 8001330:	4803      	ldr	r0, [pc, #12]	@ (8001340 <ssd1306_WriteData+0x30>)
 8001332:	f002 fa0b 	bl	800374c <HAL_I2C_Mem_Write>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000035c 	.word	0x2000035c

08001344 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001348:	f7ff ffc4 	bl	80012d4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800134c:	2064      	movs	r0, #100	@ 0x64
 800134e:	f000 fddb 	bl	8001f08 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001352:	20ae      	movs	r0, #174	@ 0xae
 8001354:	f7ff ffc4 	bl	80012e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001358:	2020      	movs	r0, #32
 800135a:	f7ff ffc1 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff ffbe 	bl	80012e0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001364:	20b0      	movs	r0, #176	@ 0xb0
 8001366:	f7ff ffbb 	bl	80012e0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800136a:	20c8      	movs	r0, #200	@ 0xc8
 800136c:	f7ff ffb8 	bl	80012e0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ffb5 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001376:	2010      	movs	r0, #16
 8001378:	f7ff ffb2 	bl	80012e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800137c:	2040      	movs	r0, #64	@ 0x40
 800137e:	f7ff ffaf 	bl	80012e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001382:	2081      	movs	r0, #129	@ 0x81
 8001384:	f7ff ffac 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001388:	20ff      	movs	r0, #255	@ 0xff
 800138a:	f7ff ffa9 	bl	80012e0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800138e:	20a1      	movs	r0, #161	@ 0xa1
 8001390:	f7ff ffa6 	bl	80012e0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001394:	20a6      	movs	r0, #166	@ 0xa6
 8001396:	f7ff ffa3 	bl	80012e0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800139a:	20a8      	movs	r0, #168	@ 0xa8
 800139c:	f7ff ffa0 	bl	80012e0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80013a0:	203f      	movs	r0, #63	@ 0x3f
 80013a2:	f7ff ff9d 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013a6:	20a4      	movs	r0, #164	@ 0xa4
 80013a8:	f7ff ff9a 	bl	80012e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80013ac:	20d3      	movs	r0, #211	@ 0xd3
 80013ae:	f7ff ff97 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ff94 	bl	80012e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80013b8:	20d5      	movs	r0, #213	@ 0xd5
 80013ba:	f7ff ff91 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80013be:	20f0      	movs	r0, #240	@ 0xf0
 80013c0:	f7ff ff8e 	bl	80012e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80013c4:	20d9      	movs	r0, #217	@ 0xd9
 80013c6:	f7ff ff8b 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80013ca:	2022      	movs	r0, #34	@ 0x22
 80013cc:	f7ff ff88 	bl	80012e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80013d0:	20da      	movs	r0, #218	@ 0xda
 80013d2:	f7ff ff85 	bl	80012e0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80013d6:	2012      	movs	r0, #18
 80013d8:	f7ff ff82 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80013dc:	20db      	movs	r0, #219	@ 0xdb
 80013de:	f7ff ff7f 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80013e2:	2020      	movs	r0, #32
 80013e4:	f7ff ff7c 	bl	80012e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80013e8:	208d      	movs	r0, #141	@ 0x8d
 80013ea:	f7ff ff79 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80013ee:	2014      	movs	r0, #20
 80013f0:	f7ff ff76 	bl	80012e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80013f4:	20af      	movs	r0, #175	@ 0xaf
 80013f6:	f7ff ff73 	bl	80012e0 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f810 	bl	8001420 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001400:	f000 f830 	bl	8001464 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <ssd1306_Init+0xd8>)
 8001406:	2200      	movs	r2, #0
 8001408:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800140a:	4b04      	ldr	r3, [pc, #16]	@ (800141c <ssd1306_Init+0xd8>)
 800140c:	2200      	movs	r2, #0
 800140e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001410:	4b02      	ldr	r3, [pc, #8]	@ (800141c <ssd1306_Init+0xd8>)
 8001412:	2201      	movs	r2, #1
 8001414:	715a      	strb	r2, [r3, #5]
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000854 	.word	0x20000854

08001420 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e00d      	b.n	800144c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <ssd1306_Fill+0x1a>
 8001436:	2100      	movs	r1, #0
 8001438:	e000      	b.n	800143c <ssd1306_Fill+0x1c>
 800143a:	21ff      	movs	r1, #255	@ 0xff
 800143c:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <ssd1306_Fill+0x40>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	460a      	mov	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3301      	adds	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001452:	d3ed      	bcc.n	8001430 <ssd1306_Fill+0x10>
    }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000454 	.word	0x20000454

08001464 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	e016      	b.n	800149e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	3b50      	subs	r3, #80	@ 0x50
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff32 	bl	80012e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ff2f 	bl	80012e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001482:	2010      	movs	r0, #16
 8001484:	f7ff ff2c 	bl	80012e0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	01db      	lsls	r3, r3, #7
 800148c:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <ssd1306_UpdateScreen+0x4c>)
 800148e:	4413      	add	r3, r2
 8001490:	2180      	movs	r1, #128	@ 0x80
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff3c 	bl	8001310 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	3301      	adds	r3, #1
 800149c:	71fb      	strb	r3, [r7, #7]
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b07      	cmp	r3, #7
 80014a2:	d9e5      	bls.n	8001470 <ssd1306_UpdateScreen+0xc>
    }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000454 	.word	0x20000454

080014b4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
 80014be:	460b      	mov	r3, r1
 80014c0:	71bb      	strb	r3, [r7, #6]
 80014c2:	4613      	mov	r3, r2
 80014c4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db48      	blt.n	8001560 <ssd1306_DrawPixel+0xac>
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80014d2:	d845      	bhi.n	8001560 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80014d4:	4b25      	ldr	r3, [pc, #148]	@ (800156c <ssd1306_DrawPixel+0xb8>)
 80014d6:	791b      	ldrb	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d006      	beq.n	80014ea <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80014dc:	797b      	ldrb	r3, [r7, #5]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80014ea:	797b      	ldrb	r3, [r7, #5]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d11a      	bne.n	8001526 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	79bb      	ldrb	r3, [r7, #6]
 80014f4:	08db      	lsrs	r3, r3, #3
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	01db      	lsls	r3, r3, #7
 80014fc:	4413      	add	r3, r2
 80014fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001570 <ssd1306_DrawPixel+0xbc>)
 8001500:	5cd3      	ldrb	r3, [r2, r3]
 8001502:	b25a      	sxtb	r2, r3
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	b25b      	sxtb	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b259      	sxtb	r1, r3
 8001516:	79fa      	ldrb	r2, [r7, #7]
 8001518:	4603      	mov	r3, r0
 800151a:	01db      	lsls	r3, r3, #7
 800151c:	4413      	add	r3, r2
 800151e:	b2c9      	uxtb	r1, r1
 8001520:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <ssd1306_DrawPixel+0xbc>)
 8001522:	54d1      	strb	r1, [r2, r3]
 8001524:	e01d      	b.n	8001562 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	4603      	mov	r3, r0
 8001530:	01db      	lsls	r3, r3, #7
 8001532:	4413      	add	r3, r2
 8001534:	4a0e      	ldr	r2, [pc, #56]	@ (8001570 <ssd1306_DrawPixel+0xbc>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	b25a      	sxtb	r2, r3
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	b25b      	sxtb	r3, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	b25b      	sxtb	r3, r3
 800154c:	4013      	ands	r3, r2
 800154e:	b259      	sxtb	r1, r3
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	4603      	mov	r3, r0
 8001554:	01db      	lsls	r3, r3, #7
 8001556:	4413      	add	r3, r2
 8001558:	b2c9      	uxtb	r1, r1
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <ssd1306_DrawPixel+0xbc>)
 800155c:	54d1      	strb	r1, [r2, r3]
 800155e:	e000      	b.n	8001562 <ssd1306_DrawPixel+0xae>
        return;
 8001560:	bf00      	nop
    }
}
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000854 	.word	0x20000854
 8001570:	20000454 	.word	0x20000454

08001574 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b089      	sub	sp, #36	@ 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	4604      	mov	r4, r0
 800157c:	1d38      	adds	r0, r7, #4
 800157e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001582:	461a      	mov	r2, r3
 8001584:	4623      	mov	r3, r4
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	4613      	mov	r3, r2
 800158a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b1f      	cmp	r3, #31
 8001590:	d902      	bls.n	8001598 <ssd1306_WriteChar+0x24>
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	2b7e      	cmp	r3, #126	@ 0x7e
 8001596:	d901      	bls.n	800159c <ssd1306_WriteChar+0x28>
        return 0;
 8001598:	2300      	movs	r3, #0
 800159a:	e06c      	b.n	8001676 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800159c:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <ssd1306_WriteChar+0x10c>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	793b      	ldrb	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	2b80      	cmp	r3, #128	@ 0x80
 80015a8:	dc06      	bgt.n	80015b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80015aa:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <ssd1306_WriteChar+0x10c>)
 80015ac:	885b      	ldrh	r3, [r3, #2]
 80015ae:	461a      	mov	r2, r3
 80015b0:	797b      	ldrb	r3, [r7, #5]
 80015b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80015b4:	2b40      	cmp	r3, #64	@ 0x40
 80015b6:	dd01      	ble.n	80015bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e05c      	b.n	8001676 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	e04c      	b.n	800165c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	3b20      	subs	r3, #32
 80015c8:	7979      	ldrb	r1, [r7, #5]
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4619      	mov	r1, r3
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	440b      	add	r3, r1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	e034      	b.n	800164c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d012      	beq.n	8001618 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80015f2:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <ssd1306_WriteChar+0x10c>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	b2d8      	uxtb	r0, r3
 8001600:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <ssd1306_WriteChar+0x10c>)
 8001602:	885b      	ldrh	r3, [r3, #2]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	7bba      	ldrb	r2, [r7, #14]
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff ff4f 	bl	80014b4 <ssd1306_DrawPixel>
 8001616:	e016      	b.n	8001646 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <ssd1306_WriteChar+0x10c>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b2d8      	uxtb	r0, r3
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <ssd1306_WriteChar+0x10c>)
 8001628:	885b      	ldrh	r3, [r3, #2]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4413      	add	r3, r2
 8001632:	b2d9      	uxtb	r1, r3
 8001634:	7bbb      	ldrb	r3, [r7, #14]
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf0c      	ite	eq
 800163a:	2301      	moveq	r3, #1
 800163c:	2300      	movne	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	f7ff ff37 	bl	80014b4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3301      	adds	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	793b      	ldrb	r3, [r7, #4]
 800164e:	461a      	mov	r2, r3
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	4293      	cmp	r3, r2
 8001654:	d3c5      	bcc.n	80015e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	797b      	ldrb	r3, [r7, #5]
 800165e:	461a      	mov	r2, r3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4293      	cmp	r3, r2
 8001664:	d3ad      	bcc.n	80015c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <ssd1306_WriteChar+0x10c>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	793a      	ldrb	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <ssd1306_WriteChar+0x10c>)
 8001672:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd90      	pop	{r4, r7, pc}
 800167e:	bf00      	nop
 8001680:	20000854 	.word	0x20000854

08001684 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	1d38      	adds	r0, r7, #4
 800168e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001692:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001694:	e012      	b.n	80016bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	7818      	ldrb	r0, [r3, #0]
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	1d3a      	adds	r2, r7, #4
 800169e:	ca06      	ldmia	r2, {r1, r2}
 80016a0:	f7ff ff68 	bl	8001574 <ssd1306_WriteChar>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d002      	beq.n	80016b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	e008      	b.n	80016c8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1e8      	bne.n	8001696 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	781b      	ldrb	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <ssd1306_SetCursor+0x2c>)
 80016e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <ssd1306_SetCursor+0x2c>)
 80016ee:	805a      	strh	r2, [r3, #2]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000854 	.word	0x20000854

08001700 <ssd1306_TestFonts>:
    } while((end - start) < 8000);
   
    HAL_Delay(1000);
}

void ssd1306_TestFonts() {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fe8b 	bl	8001420 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 800170a:	2100      	movs	r1, #0
 800170c:	2002      	movs	r0, #2
 800170e:	f7ff ffdf 	bl	80016d0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8001712:	4a14      	ldr	r2, [pc, #80]	@ (8001764 <ssd1306_TestFonts+0x64>)
 8001714:	2301      	movs	r3, #1
 8001716:	ca06      	ldmia	r2, {r1, r2}
 8001718:	4813      	ldr	r0, [pc, #76]	@ (8001768 <ssd1306_TestFonts+0x68>)
 800171a:	f7ff ffb3 	bl	8001684 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 800171e:	211a      	movs	r1, #26
 8001720:	2002      	movs	r0, #2
 8001722:	f7ff ffd5 	bl	80016d0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8001726:	4a11      	ldr	r2, [pc, #68]	@ (800176c <ssd1306_TestFonts+0x6c>)
 8001728:	2301      	movs	r3, #1
 800172a:	ca06      	ldmia	r2, {r1, r2}
 800172c:	4810      	ldr	r0, [pc, #64]	@ (8001770 <ssd1306_TestFonts+0x70>)
 800172e:	f7ff ffa9 	bl	8001684 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 8001732:	212c      	movs	r1, #44	@ 0x2c
 8001734:	2002      	movs	r0, #2
 8001736:	f7ff ffcb 	bl	80016d0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 800173a:	4a0e      	ldr	r2, [pc, #56]	@ (8001774 <ssd1306_TestFonts+0x74>)
 800173c:	2301      	movs	r3, #1
 800173e:	ca06      	ldmia	r2, {r1, r2}
 8001740:	480d      	ldr	r0, [pc, #52]	@ (8001778 <ssd1306_TestFonts+0x78>)
 8001742:	f7ff ff9f 	bl	8001684 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 8001746:	2136      	movs	r1, #54	@ 0x36
 8001748:	2002      	movs	r0, #2
 800174a:	f7ff ffc1 	bl	80016d0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 800174e:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <ssd1306_TestFonts+0x7c>)
 8001750:	2301      	movs	r3, #1
 8001752:	ca06      	ldmia	r2, {r1, r2}
 8001754:	480a      	ldr	r0, [pc, #40]	@ (8001780 <ssd1306_TestFonts+0x80>)
 8001756:	f7ff ff95 	bl	8001684 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800175a:	f7ff fe83 	bl	8001464 <ssd1306_UpdateScreen>
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000060 	.word	0x20000060
 8001768:	08006c18 	.word	0x08006c18
 800176c:	20000058 	.word	0x20000058
 8001770:	08006c24 	.word	0x08006c24
 8001774:	20000050 	.word	0x20000050
 8001778:	08006c30 	.word	0x08006c30
 800177c:	20000048 	.word	0x20000048
 8001780:	08006c3c 	.word	0x08006c3c

08001784 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_MspInit+0x5c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <HAL_MspInit+0x5c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_MspInit+0x5c>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_MspInit+0x5c>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a0e      	ldr	r2, [pc, #56]	@ (80017e0 <HAL_MspInit+0x5c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <HAL_MspInit+0x5c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_MspInit+0x60>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_MspInit+0x60>)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000

080017e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0318 	add.w	r3, r7, #24
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a44      	ldr	r2, [pc, #272]	@ (8001914 <HAL_ADC_MspInit+0x12c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d152      	bne.n	80018ae <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001808:	4b43      	ldr	r3, [pc, #268]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a42      	ldr	r2, [pc, #264]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 800180e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b40      	ldr	r3, [pc, #256]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a3c      	ldr	r2, [pc, #240]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b3a      	ldr	r3, [pc, #232]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001838:	2330      	movs	r3, #48	@ 0x30
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183c:	2303      	movs	r3, #3
 800183e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0318 	add.w	r3, r7, #24
 8001844:	4619      	mov	r1, r3
 8001846:	4835      	ldr	r0, [pc, #212]	@ (800191c <HAL_ADC_MspInit+0x134>)
 8001848:	f001 fc88 	bl	800315c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800184c:	4b34      	ldr	r3, [pc, #208]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 800184e:	4a35      	ldr	r2, [pc, #212]	@ (8001924 <HAL_ADC_MspInit+0x13c>)
 8001850:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001852:	4b33      	ldr	r3, [pc, #204]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 8001854:	2200      	movs	r2, #0
 8001856:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001858:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800185e:	4b30      	ldr	r3, [pc, #192]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001864:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 8001866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800186a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800186c:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 800186e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001872:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001874:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 8001876:	2220      	movs	r2, #32
 8001878:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800187a:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001880:	4827      	ldr	r0, [pc, #156]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 8001882:	f001 f9c9 	bl	8002c18 <HAL_DMA_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800188c:	f7ff fd20 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a23      	ldr	r2, [pc, #140]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 8001894:	621a      	str	r2, [r3, #32]
 8001896:	4a22      	ldr	r2, [pc, #136]	@ (8001920 <HAL_ADC_MspInit+0x138>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2012      	movs	r0, #18
 80018a2:	f001 f982 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80018a6:	2012      	movs	r0, #18
 80018a8:	f001 f99b 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018ac:	e02e      	b.n	800190c <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001928 <HAL_ADC_MspInit+0x140>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d129      	bne.n	800190c <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80018b8:	4b17      	ldr	r3, [pc, #92]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a16      	ldr	r2, [pc, #88]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 80018be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <HAL_ADC_MspInit+0x130>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80018e8:	230e      	movs	r3, #14
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ec:	2303      	movs	r3, #3
 80018ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	4619      	mov	r1, r3
 80018f6:	4809      	ldr	r0, [pc, #36]	@ (800191c <HAL_ADC_MspInit+0x134>)
 80018f8:	f001 fc30 	bl	800315c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	2012      	movs	r0, #18
 8001902:	f001 f952 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001906:	2012      	movs	r0, #18
 8001908:	f001 f96b 	bl	8002be2 <HAL_NVIC_EnableIRQ>
}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	@ 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40012400 	.word	0x40012400
 8001918:	40021000 	.word	0x40021000
 800191c:	40010800 	.word	0x40010800
 8001920:	200003b0 	.word	0x200003b0
 8001924:	40020008 	.word	0x40020008
 8001928:	40012800 	.word	0x40012800

0800192c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1d      	ldr	r2, [pc, #116]	@ (80019bc <HAL_I2C_MspInit+0x90>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d132      	bne.n	80019b2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <HAL_I2C_MspInit+0x94>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <HAL_I2C_MspInit+0x94>)
 8001952:	f043 0308 	orr.w	r3, r3, #8
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <HAL_I2C_MspInit+0x94>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001964:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196a:	2312      	movs	r3, #18
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4812      	ldr	r0, [pc, #72]	@ (80019c4 <HAL_I2C_MspInit+0x98>)
 800197a:	f001 fbef 	bl	800315c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_I2C_MspInit+0x9c>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	f043 0302 	orr.w	r3, r3, #2
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
 8001994:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <HAL_I2C_MspInit+0x9c>)
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_I2C_MspInit+0x94>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <HAL_I2C_MspInit+0x94>)
 80019a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_I2C_MspInit+0x94>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	@ 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40005400 	.word	0x40005400
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010c00 	.word	0x40010c00
 80019c8:	40010000 	.word	0x40010000

080019cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <HAL_TIM_Base_MspInit+0x58>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10c      	bne.n	80019f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_TIM_Base_MspInit+0x5c>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a11      	ldr	r2, [pc, #68]	@ (8001a28 <HAL_TIM_Base_MspInit+0x5c>)
 80019e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_TIM_Base_MspInit+0x5c>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019f6:	e010      	b.n	8001a1a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <HAL_TIM_Base_MspInit+0x60>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10b      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_TIM_Base_MspInit+0x5c>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a08      	ldr	r2, [pc, #32]	@ (8001a28 <HAL_TIM_Base_MspInit+0x5c>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_TIM_Base_MspInit+0x5c>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40012c00 	.word	0x40012c00
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40000400 	.word	0x40000400

08001a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac8 <HAL_TIM_MspPostInit+0x98>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d119      	bne.n	8001a84 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <HAL_TIM_MspPostInit+0x9c>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	@ (8001acc <HAL_TIM_MspPostInit+0x9c>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <HAL_TIM_MspPostInit+0x9c>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|BEEP_Pin;
 8001a68:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001a6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4814      	ldr	r0, [pc, #80]	@ (8001ad0 <HAL_TIM_MspPostInit+0xa0>)
 8001a7e:	f001 fb6d 	bl	800315c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a82:	e01c      	b.n	8001abe <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <HAL_TIM_MspPostInit+0xa4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d117      	bne.n	8001abe <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <HAL_TIM_MspPostInit+0x9c>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	4a0e      	ldr	r2, [pc, #56]	@ (8001acc <HAL_TIM_MspPostInit+0x9c>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6193      	str	r3, [r2, #24]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <HAL_TIM_MspPostInit+0x9c>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 8001aa6:	2340      	movs	r3, #64	@ 0x40
 8001aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <HAL_TIM_MspPostInit+0xa0>)
 8001aba:	f001 fb4f 	bl	800315c <HAL_GPIO_Init>
}
 8001abe:	bf00      	nop
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010800 	.word	0x40010800
 8001ad4:	40000400 	.word	0x40000400

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	@ 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a69      	ldr	r2, [pc, #420]	@ (8001c98 <HAL_UART_MspInit+0x1c0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d13e      	bne.n	8001b76 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af8:	4b68      	ldr	r3, [pc, #416]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a67      	ldr	r2, [pc, #412]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001afe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b65      	ldr	r3, [pc, #404]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	4b62      	ldr	r3, [pc, #392]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a61      	ldr	r2, [pc, #388]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b5f      	ldr	r3, [pc, #380]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b28:	2340      	movs	r3, #64	@ 0x40
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4859      	ldr	r0, [pc, #356]	@ (8001ca0 <HAL_UART_MspInit+0x1c8>)
 8001b3c:	f001 fb0e 	bl	800315c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	4853      	ldr	r0, [pc, #332]	@ (8001ca0 <HAL_UART_MspInit+0x1c8>)
 8001b54:	f001 fb02 	bl	800315c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001b58:	4b52      	ldr	r3, [pc, #328]	@ (8001ca4 <HAL_UART_MspInit+0x1cc>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b60:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b6e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca4 <HAL_UART_MspInit+0x1cc>)
 8001b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b72:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b74:	e08b      	b.n	8001c8e <HAL_UART_MspInit+0x1b6>
  else if(huart->Instance==USART3)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a4b      	ldr	r2, [pc, #300]	@ (8001ca8 <HAL_UART_MspInit+0x1d0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	f040 8086 	bne.w	8001c8e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b82:	4b46      	ldr	r3, [pc, #280]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a45      	ldr	r2, [pc, #276]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b43      	ldr	r3, [pc, #268]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	4b40      	ldr	r3, [pc, #256]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	6193      	str	r3, [r2, #24]
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8001c9c <HAL_UART_MspInit+0x1c4>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4836      	ldr	r0, [pc, #216]	@ (8001ca0 <HAL_UART_MspInit+0x1c8>)
 8001bc8:	f001 fac8 	bl	800315c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	482f      	ldr	r0, [pc, #188]	@ (8001ca0 <HAL_UART_MspInit+0x1c8>)
 8001be2:	f001 fabb 	bl	800315c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001be6:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001be8:	4a31      	ldr	r2, [pc, #196]	@ (8001cb0 <HAL_UART_MspInit+0x1d8>)
 8001bea:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bec:	4b2f      	ldr	r3, [pc, #188]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001bee:	2210      	movs	r2, #16
 8001bf0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001bfa:	2280      	movs	r2, #128	@ 0x80
 8001bfc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c04:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001c0a:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c10:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001c16:	4825      	ldr	r0, [pc, #148]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001c18:	f000 fffe 	bl	8002c18 <HAL_DMA_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8001c22:	f7ff fb55 	bl	80012d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a20      	ldr	r2, [pc, #128]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001c2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cac <HAL_UART_MspInit+0x1d4>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001c32:	4b20      	ldr	r3, [pc, #128]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c34:	4a20      	ldr	r2, [pc, #128]	@ (8001cb8 <HAL_UART_MspInit+0x1e0>)
 8001c36:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001c56:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c58:	2220      	movs	r2, #32
 8001c5a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c62:	4814      	ldr	r0, [pc, #80]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c64:	f000 ffd8 	bl	8002c18 <HAL_DMA_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001c6e:	f7ff fb2f 	bl	80012d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c78:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb4 <HAL_UART_MspInit+0x1dc>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2027      	movs	r0, #39	@ 0x27
 8001c84:	f000 ff91 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c88:	2027      	movs	r0, #39	@ 0x27
 8001c8a:	f000 ffaa 	bl	8002be2 <HAL_NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3730      	adds	r7, #48	@ 0x30
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40004800 	.word	0x40004800
 8001cac:	200001f8 	.word	0x200001f8
 8001cb0:	4002001c 	.word	0x4002001c
 8001cb4:	200001b4 	.word	0x200001b4
 8001cb8:	40020030 	.word	0x40020030

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <BusFault_Handler+0x4>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <UsageFault_Handler+0x4>

08001ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0c:	f000 f8e0 	bl	8001ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <DMA1_Channel1_IRQHandler+0x10>)
 8001d1a:	f001 f8eb 	bl	8002ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200003b0 	.word	0x200003b0

08001d28 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <DMA1_Channel2_IRQHandler+0x10>)
 8001d2e:	f001 f8e1 	bl	8002ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200001f8 	.word	0x200001f8

08001d3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <DMA1_Channel3_IRQHandler+0x10>)
 8001d42:	f001 f8d7 	bl	8002ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200001b4 	.word	0x200001b4

08001d50 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d54:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <ADC1_2_IRQHandler+0x14>)
 8001d56:	f000 fb6b 	bl	8002430 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001d5a:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <ADC1_2_IRQHandler+0x18>)
 8001d5c:	f000 fb68 	bl	8002430 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000424 	.word	0x20000424
 8001d68:	200003f4 	.word	0x200003f4

08001d6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d70:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <USART3_IRQHandler+0x10>)
 8001d72:	f003 fcef 	bl	8005754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000023c 	.word	0x2000023c

08001d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d88:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <_sbrk+0x5c>)
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <_sbrk+0x60>)
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d94:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <_sbrk+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <_sbrk+0x64>)
 8001d9e:	4a12      	ldr	r2, [pc, #72]	@ (8001de8 <_sbrk+0x68>)
 8001da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d207      	bcs.n	8001dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db0:	f004 fa9a 	bl	80062e8 <__errno>
 8001db4:	4603      	mov	r3, r0
 8001db6:	220c      	movs	r2, #12
 8001db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	e009      	b.n	8001dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	4a05      	ldr	r2, [pc, #20]	@ (8001de4 <_sbrk+0x64>)
 8001dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20005000 	.word	0x20005000
 8001de0:	00000400 	.word	0x00000400
 8001de4:	2000085c 	.word	0x2000085c
 8001de8:	200009b0 	.word	0x200009b0

08001dec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df8:	f7ff fff8 	bl	8001dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	480b      	ldr	r0, [pc, #44]	@ (8001e2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dfe:	490c      	ldr	r1, [pc, #48]	@ (8001e30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e00:	4a0c      	ldr	r2, [pc, #48]	@ (8001e34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a09      	ldr	r2, [pc, #36]	@ (8001e38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e14:	4c09      	ldr	r4, [pc, #36]	@ (8001e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e22:	f004 fa67 	bl	80062f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e26:	f7fe fefd 	bl	8000c24 <main>
  bx lr
 8001e2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e30:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001e34:	08009b10 	.word	0x08009b10
  ldr r2, =_sbss
 8001e38:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001e3c:	200009ac 	.word	0x200009ac

08001e40 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e40:	e7fe      	b.n	8001e40 <CAN1_RX1_IRQHandler>
	...

08001e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <HAL_Init+0x28>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a07      	ldr	r2, [pc, #28]	@ (8001e6c <HAL_Init+0x28>)
 8001e4e:	f043 0310 	orr.w	r3, r3, #16
 8001e52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e54:	2003      	movs	r0, #3
 8001e56:	f000 fe9d 	bl	8002b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5a:	200f      	movs	r0, #15
 8001e5c:	f000 f808 	bl	8001e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e60:	f7ff fc90 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40022000 	.word	0x40022000

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_InitTick+0x54>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_InitTick+0x58>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 feb5 	bl	8002bfe <HAL_SYSTICK_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00e      	b.n	8001ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	d80a      	bhi.n	8001eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f000 fe7d 	bl	8002baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb0:	4a06      	ldr	r2, [pc, #24]	@ (8001ecc <HAL_InitTick+0x5c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000068 	.word	0x20000068
 8001ec8:	20000070 	.word	0x20000070
 8001ecc:	2000006c 	.word	0x2000006c

08001ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <HAL_IncTick+0x1c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_IncTick+0x20>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a03      	ldr	r2, [pc, #12]	@ (8001ef0 <HAL_IncTick+0x20>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	20000070 	.word	0x20000070
 8001ef0:	20000860 	.word	0x20000860

08001ef4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b02      	ldr	r3, [pc, #8]	@ (8001f04 <HAL_GetTick+0x10>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	20000860 	.word	0x20000860

08001f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff fff0 	bl	8001ef4 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d005      	beq.n	8001f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_Delay+0x44>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f2e:	bf00      	nop
 8001f30:	f7ff ffe0 	bl	8001ef4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d8f7      	bhi.n	8001f30 <HAL_Delay+0x28>
  {
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000070 	.word	0x20000070

08001f50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0be      	b.n	80020f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fc2a 	bl	80017e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fc81 	bl	800289c <ADC_ConversionStop_Disable>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 8099 	bne.w	80020de <HAL_ADC_Init+0x18e>
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 8095 	bne.w	80020de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fbc:	f023 0302 	bic.w	r3, r3, #2
 8001fc0:	f043 0202 	orr.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7b1b      	ldrb	r3, [r3, #12]
 8001fd6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fd8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fe8:	d003      	beq.n	8001ff2 <HAL_ADC_Init+0xa2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_ADC_Init+0xa8>
 8001ff2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ff6:	e000      	b.n	8001ffa <HAL_ADC_Init+0xaa>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7d1b      	ldrb	r3, [r3, #20]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d119      	bne.n	800203c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7b1b      	ldrb	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	3b01      	subs	r3, #1
 8002016:	035a      	lsls	r2, r3, #13
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e00b      	b.n	800203c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <HAL_ADC_Init+0x1a8>)
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	430b      	orrs	r3, r1
 8002062:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800206c:	d003      	beq.n	8002076 <HAL_ADC_Init+0x126>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d104      	bne.n	8002080 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	3b01      	subs	r3, #1
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002086:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	430a      	orrs	r2, r1
 8002092:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <HAL_ADC_Init+0x1ac>)
 800209c:	4013      	ands	r3, r2
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d10b      	bne.n	80020bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ba:	e018      	b.n	80020ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	f023 0312 	bic.w	r3, r3, #18
 80020c4:	f043 0210 	orr.w	r2, r3, #16
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020dc:	e007      	b.n	80020ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	ffe1f7fd 	.word	0xffe1f7fd
 80020fc:	ff1f0efe 	.word	0xff1f0efe

08002100 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_ADC_Start+0x1a>
 8002116:	2302      	movs	r3, #2
 8002118:	e098      	b.n	800224c <HAL_ADC_Start+0x14c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fb60 	bl	80027e8 <ADC_Enable>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 8087 	bne.w	8002242 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a41      	ldr	r2, [pc, #260]	@ (8002254 <HAL_ADC_Start+0x154>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d105      	bne.n	800215e <HAL_ADC_Start+0x5e>
 8002152:	4b41      	ldr	r3, [pc, #260]	@ (8002258 <HAL_ADC_Start+0x158>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d115      	bne.n	800218a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d026      	beq.n	80021c6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002180:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002188:	e01d      	b.n	80021c6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2f      	ldr	r2, [pc, #188]	@ (8002258 <HAL_ADC_Start+0x158>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_ADC_Start+0xaa>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002254 <HAL_ADC_Start+0x154>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10d      	bne.n	80021c6 <HAL_ADC_Start+0xc6>
 80021aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <HAL_ADC_Start+0x158>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	f023 0206 	bic.w	r2, r3, #6
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021de:	e002      	b.n	80021e6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f06f 0202 	mvn.w	r2, #2
 80021f6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002202:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002206:	d113      	bne.n	8002230 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800220c:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <HAL_ADC_Start+0x154>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d105      	bne.n	800221e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_ADC_Start+0x158>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800221a:	2b00      	cmp	r3, #0
 800221c:	d108      	bne.n	8002230 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	e00c      	b.n	800224a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	e003      	b.n	800224a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40012800 	.word	0x40012800
 8002258:	40012400 	.word	0x40012400

0800225c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a64      	ldr	r2, [pc, #400]	@ (8002404 <HAL_ADC_Start_DMA+0x1a8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_ADC_Start_DMA+0x24>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a63      	ldr	r2, [pc, #396]	@ (8002408 <HAL_ADC_Start_DMA+0x1ac>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d106      	bne.n	800228e <HAL_ADC_Start_DMA+0x32>
 8002280:	4b60      	ldr	r3, [pc, #384]	@ (8002404 <HAL_ADC_Start_DMA+0x1a8>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 80b3 	bne.w	80023f4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_ADC_Start_DMA+0x40>
 8002298:	2302      	movs	r3, #2
 800229a:	e0ae      	b.n	80023fa <HAL_ADC_Start_DMA+0x19e>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fa9f 	bl	80027e8 <ADC_Enable>
 80022aa:	4603      	mov	r3, r0
 80022ac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 809a 	bne.w	80023ea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002408 <HAL_ADC_Start_DMA+0x1ac>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d105      	bne.n	80022e0 <HAL_ADC_Start_DMA+0x84>
 80022d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002404 <HAL_ADC_Start_DMA+0x1a8>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d115      	bne.n	800230c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d026      	beq.n	8002348 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002302:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800230a:	e01d      	b.n	8002348 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a39      	ldr	r2, [pc, #228]	@ (8002404 <HAL_ADC_Start_DMA+0x1a8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d004      	beq.n	800232c <HAL_ADC_Start_DMA+0xd0>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a38      	ldr	r2, [pc, #224]	@ (8002408 <HAL_ADC_Start_DMA+0x1ac>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d10d      	bne.n	8002348 <HAL_ADC_Start_DMA+0xec>
 800232c:	4b35      	ldr	r3, [pc, #212]	@ (8002404 <HAL_ADC_Start_DMA+0x1a8>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002340:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	f023 0206 	bic.w	r2, r3, #6
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002360:	e002      	b.n	8002368 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a25      	ldr	r2, [pc, #148]	@ (800240c <HAL_ADC_Start_DMA+0x1b0>)
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4a24      	ldr	r2, [pc, #144]	@ (8002410 <HAL_ADC_Start_DMA+0x1b4>)
 800237e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a23      	ldr	r2, [pc, #140]	@ (8002414 <HAL_ADC_Start_DMA+0x1b8>)
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0202 	mvn.w	r2, #2
 8002390:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023a0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a18      	ldr	r0, [r3, #32]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	334c      	adds	r3, #76	@ 0x4c
 80023ac:	4619      	mov	r1, r3
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f000 fc8b 	bl	8002ccc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80023c0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023c4:	d108      	bne.n	80023d8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80023d4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023d6:	e00f      	b.n	80023f8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80023e6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023e8:	e006      	b.n	80023f8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80023f2:	e001      	b.n	80023f8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40012400 	.word	0x40012400
 8002408:	40012800 	.word	0x40012800
 800240c:	0800291f 	.word	0x0800291f
 8002410:	0800299b 	.word	0x0800299b
 8002414:	080029b7 	.word	0x080029b7

08002418 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d03e      	beq.n	80024d0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d039      	beq.n	80024d0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800247e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002482:	d11d      	bne.n	80024c0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002488:	2b00      	cmp	r3, #0
 800248a:	d119      	bne.n	80024c0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0220 	bic.w	r2, r2, #32
 800249a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f874 	bl	80025ae <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f06f 0212 	mvn.w	r2, #18
 80024ce:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d04d      	beq.n	8002576 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d048      	beq.n	8002576 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002506:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800250a:	d012      	beq.n	8002532 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002516:	2b00      	cmp	r3, #0
 8002518:	d125      	bne.n	8002566 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002524:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002528:	d11d      	bne.n	8002566 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	d119      	bne.n	8002566 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002540:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002546:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa3f 	bl	80029ea <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 020c 	mvn.w	r2, #12
 8002574:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d012      	beq.n	80025a6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f81b 	bl	80025d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0201 	mvn.w	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x20>
 8002614:	2302      	movs	r3, #2
 8002616:	e0dc      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x1da>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d81c      	bhi.n	8002662 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b05      	subs	r3, #5
 800263a:	221f      	movs	r2, #31
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	4019      	ands	r1, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3b05      	subs	r3, #5
 8002654:	fa00 f203 	lsl.w	r2, r0, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002660:	e03c      	b.n	80026dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d81c      	bhi.n	80026a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	3b23      	subs	r3, #35	@ 0x23
 800267c:	221f      	movs	r2, #31
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	4019      	ands	r1, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b23      	subs	r3, #35	@ 0x23
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80026a2:	e01b      	b.n	80026dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b41      	subs	r3, #65	@ 0x41
 80026b6:	221f      	movs	r2, #31
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	4019      	ands	r1, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	3b41      	subs	r3, #65	@ 0x41
 80026d0:	fa00 f203 	lsl.w	r2, r0, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b09      	cmp	r3, #9
 80026e2:	d91c      	bls.n	800271e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68d9      	ldr	r1, [r3, #12]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	3b1e      	subs	r3, #30
 80026f6:	2207      	movs	r2, #7
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4019      	ands	r1, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6898      	ldr	r0, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	3b1e      	subs	r3, #30
 8002710:	fa00 f203 	lsl.w	r2, r0, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	e019      	b.n	8002752 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6919      	ldr	r1, [r3, #16]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	2207      	movs	r2, #7
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	4019      	ands	r1, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6898      	ldr	r0, [r3, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	fa00 f203 	lsl.w	r2, r0, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d003      	beq.n	8002762 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800275e:	2b11      	cmp	r3, #17
 8002760:	d132      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1d      	ldr	r2, [pc, #116]	@ (80027dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d125      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d126      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002788:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b10      	cmp	r3, #16
 8002790:	d11a      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002792:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a13      	ldr	r2, [pc, #76]	@ (80027e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	0c9a      	lsrs	r2, r3, #18
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027a8:	e002      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f9      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x1b2>
 80027b6:	e007      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40012400 	.word	0x40012400
 80027e0:	20000068 	.word	0x20000068
 80027e4:	431bde83 	.word	0x431bde83

080027e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d040      	beq.n	8002888 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002816:	4b1f      	ldr	r3, [pc, #124]	@ (8002894 <ADC_Enable+0xac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1f      	ldr	r2, [pc, #124]	@ (8002898 <ADC_Enable+0xb0>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002824:	e002      	b.n	800282c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3b01      	subs	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002832:	f7ff fb5f 	bl	8001ef4 <HAL_GetTick>
 8002836:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002838:	e01f      	b.n	800287a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800283a:	f7ff fb5b 	bl	8001ef4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d918      	bls.n	800287a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d011      	beq.n	800287a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e007      	b.n	800288a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d1d8      	bne.n	800283a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000068 	.word	0x20000068
 8002898:	431bde83 	.word	0x431bde83

0800289c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d12e      	bne.n	8002914 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028c6:	f7ff fb15 	bl	8001ef4 <HAL_GetTick>
 80028ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028cc:	e01b      	b.n	8002906 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028ce:	f7ff fb11 	bl	8001ef4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d914      	bls.n	8002906 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10d      	bne.n	8002906 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ee:	f043 0210 	orr.w	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e007      	b.n	8002916 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d0dc      	beq.n	80028ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002934:	2b00      	cmp	r3, #0
 8002936:	d127      	bne.n	8002988 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800294e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002952:	d115      	bne.n	8002980 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002958:	2b00      	cmp	r3, #0
 800295a:	d111      	bne.n	8002980 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	f043 0201 	orr.w	r2, r3, #1
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff fe14 	bl	80025ae <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002986:	e004      	b.n	8002992 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff fe09 	bl	80025c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	f043 0204 	orr.w	r2, r3, #4
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff fe01 	bl	80025e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	@ (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	60d3      	str	r3, [r2, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a48:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <__NVIC_GetPriorityGrouping+0x18>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 0307 	and.w	r3, r3, #7
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	db0b      	blt.n	8002a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	4906      	ldr	r1, [pc, #24]	@ (8002a94 <__NVIC_EnableIRQ+0x34>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	2001      	movs	r0, #1
 8002a82:	fa00 f202 	lsl.w	r2, r0, r2
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	e000e100 	.word	0xe000e100

08002a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	@ (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	@ (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	@ 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	bf28      	it	cs
 8002b0a:	2304      	movcs	r3, #4
 8002b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d902      	bls.n	8002b1c <NVIC_EncodePriority+0x30>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <NVIC_EncodePriority+0x32>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	4313      	orrs	r3, r2
         );
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	@ 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b60:	d301      	bcc.n	8002b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00f      	b.n	8002b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b66:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <SysTick_Config+0x40>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6e:	210f      	movs	r1, #15
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f7ff ff90 	bl	8002a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <SysTick_Config+0x40>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7e:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <SysTick_Config+0x40>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000e010 	.word	0xe000e010

08002b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff2d 	bl	80029fc <__NVIC_SetPriorityGrouping>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff ff42 	bl	8002a44 <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff90 	bl	8002aec <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5f 	bl	8002a98 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff35 	bl	8002a60 <__NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffa2 	bl	8002b50 <SysTick_Config>
 8002c0c:	4603      	mov	r3, r0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e043      	b.n	8002cb6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <HAL_DMA_Init+0xa8>)
 8002c36:	4413      	add	r3, r2
 8002c38:	4a22      	ldr	r2, [pc, #136]	@ (8002cc4 <HAL_DMA_Init+0xac>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	009a      	lsls	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc8 <HAL_DMA_Init+0xb0>)
 8002c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c62:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002c66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	bffdfff8 	.word	0xbffdfff8
 8002cc4:	cccccccd 	.word	0xcccccccd
 8002cc8:	40020000 	.word	0x40020000

08002ccc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_DMA_Start_IT+0x20>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e04b      	b.n	8002d84 <HAL_DMA_Start_IT+0xb8>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d13a      	bne.n	8002d76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f9eb 	bl	8003100 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 020e 	orr.w	r2, r2, #14
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e00f      	b.n	8002d64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0204 	bic.w	r2, r2, #4
 8002d52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 020a 	orr.w	r2, r2, #10
 8002d62:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e005      	b.n	8002d82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d008      	beq.n	8002db6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2204      	movs	r2, #4
 8002da8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e020      	b.n	8002df8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 020e 	bic.w	r2, r2, #14
 8002dc4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d005      	beq.n	8002e28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
 8002e26:	e051      	b.n	8002ecc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 020e 	bic.w	r2, r2, #14
 8002e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a22      	ldr	r2, [pc, #136]	@ (8002ed8 <HAL_DMA_Abort_IT+0xd4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d029      	beq.n	8002ea6 <HAL_DMA_Abort_IT+0xa2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a21      	ldr	r2, [pc, #132]	@ (8002edc <HAL_DMA_Abort_IT+0xd8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_Abort_IT+0x9e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee0 <HAL_DMA_Abort_IT+0xdc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01a      	beq.n	8002e9c <HAL_DMA_Abort_IT+0x98>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee4 <HAL_DMA_Abort_IT+0xe0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d012      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x92>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee8 <HAL_DMA_Abort_IT+0xe4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00a      	beq.n	8002e90 <HAL_DMA_Abort_IT+0x8c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002eec <HAL_DMA_Abort_IT+0xe8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d102      	bne.n	8002e8a <HAL_DMA_Abort_IT+0x86>
 8002e84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e88:	e00e      	b.n	8002ea8 <HAL_DMA_Abort_IT+0xa4>
 8002e8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e8e:	e00b      	b.n	8002ea8 <HAL_DMA_Abort_IT+0xa4>
 8002e90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e94:	e008      	b.n	8002ea8 <HAL_DMA_Abort_IT+0xa4>
 8002e96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e9a:	e005      	b.n	8002ea8 <HAL_DMA_Abort_IT+0xa4>
 8002e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ea0:	e002      	b.n	8002ea8 <HAL_DMA_Abort_IT+0xa4>
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	e000      	b.n	8002ea8 <HAL_DMA_Abort_IT+0xa4>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	4a11      	ldr	r2, [pc, #68]	@ (8002ef0 <HAL_DMA_Abort_IT+0xec>)
 8002eaa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
    } 
  }
  return status;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40020008 	.word	0x40020008
 8002edc:	4002001c 	.word	0x4002001c
 8002ee0:	40020030 	.word	0x40020030
 8002ee4:	40020044 	.word	0x40020044
 8002ee8:	40020058 	.word	0x40020058
 8002eec:	4002006c 	.word	0x4002006c
 8002ef0:	40020000 	.word	0x40020000

08002ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f10:	2204      	movs	r2, #4
 8002f12:	409a      	lsls	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d04f      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xc8>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d04a      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d107      	bne.n	8002f44 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0204 	bic.w	r2, r2, #4
 8002f42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a66      	ldr	r2, [pc, #408]	@ (80030e4 <HAL_DMA_IRQHandler+0x1f0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d029      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0xae>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a65      	ldr	r2, [pc, #404]	@ (80030e8 <HAL_DMA_IRQHandler+0x1f4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d022      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xaa>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a63      	ldr	r2, [pc, #396]	@ (80030ec <HAL_DMA_IRQHandler+0x1f8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01a      	beq.n	8002f98 <HAL_DMA_IRQHandler+0xa4>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a62      	ldr	r2, [pc, #392]	@ (80030f0 <HAL_DMA_IRQHandler+0x1fc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d012      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x9e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a60      	ldr	r2, [pc, #384]	@ (80030f4 <HAL_DMA_IRQHandler+0x200>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00a      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x98>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5f      	ldr	r2, [pc, #380]	@ (80030f8 <HAL_DMA_IRQHandler+0x204>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d102      	bne.n	8002f86 <HAL_DMA_IRQHandler+0x92>
 8002f80:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f84:	e00e      	b.n	8002fa4 <HAL_DMA_IRQHandler+0xb0>
 8002f86:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002f8a:	e00b      	b.n	8002fa4 <HAL_DMA_IRQHandler+0xb0>
 8002f8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002f90:	e008      	b.n	8002fa4 <HAL_DMA_IRQHandler+0xb0>
 8002f92:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f96:	e005      	b.n	8002fa4 <HAL_DMA_IRQHandler+0xb0>
 8002f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f9c:	e002      	b.n	8002fa4 <HAL_DMA_IRQHandler+0xb0>
 8002f9e:	2340      	movs	r3, #64	@ 0x40
 8002fa0:	e000      	b.n	8002fa4 <HAL_DMA_IRQHandler+0xb0>
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	4a55      	ldr	r2, [pc, #340]	@ (80030fc <HAL_DMA_IRQHandler+0x208>)
 8002fa6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8094 	beq.w	80030da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002fba:	e08e      	b.n	80030da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d056      	beq.n	800307a <HAL_DMA_IRQHandler+0x186>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d051      	beq.n	800307a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 020a 	bic.w	r2, r2, #10
 8002ff2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a38      	ldr	r2, [pc, #224]	@ (80030e4 <HAL_DMA_IRQHandler+0x1f0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d029      	beq.n	800305a <HAL_DMA_IRQHandler+0x166>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a37      	ldr	r2, [pc, #220]	@ (80030e8 <HAL_DMA_IRQHandler+0x1f4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d022      	beq.n	8003056 <HAL_DMA_IRQHandler+0x162>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a35      	ldr	r2, [pc, #212]	@ (80030ec <HAL_DMA_IRQHandler+0x1f8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01a      	beq.n	8003050 <HAL_DMA_IRQHandler+0x15c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a34      	ldr	r2, [pc, #208]	@ (80030f0 <HAL_DMA_IRQHandler+0x1fc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d012      	beq.n	800304a <HAL_DMA_IRQHandler+0x156>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a32      	ldr	r2, [pc, #200]	@ (80030f4 <HAL_DMA_IRQHandler+0x200>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00a      	beq.n	8003044 <HAL_DMA_IRQHandler+0x150>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a31      	ldr	r2, [pc, #196]	@ (80030f8 <HAL_DMA_IRQHandler+0x204>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d102      	bne.n	800303e <HAL_DMA_IRQHandler+0x14a>
 8003038:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800303c:	e00e      	b.n	800305c <HAL_DMA_IRQHandler+0x168>
 800303e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003042:	e00b      	b.n	800305c <HAL_DMA_IRQHandler+0x168>
 8003044:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003048:	e008      	b.n	800305c <HAL_DMA_IRQHandler+0x168>
 800304a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800304e:	e005      	b.n	800305c <HAL_DMA_IRQHandler+0x168>
 8003050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003054:	e002      	b.n	800305c <HAL_DMA_IRQHandler+0x168>
 8003056:	2320      	movs	r3, #32
 8003058:	e000      	b.n	800305c <HAL_DMA_IRQHandler+0x168>
 800305a:	2302      	movs	r3, #2
 800305c:	4a27      	ldr	r2, [pc, #156]	@ (80030fc <HAL_DMA_IRQHandler+0x208>)
 800305e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306c:	2b00      	cmp	r3, #0
 800306e:	d034      	beq.n	80030da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003078:	e02f      	b.n	80030da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	2208      	movs	r2, #8
 8003080:	409a      	lsls	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d028      	beq.n	80030dc <HAL_DMA_IRQHandler+0x1e8>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d023      	beq.n	80030dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 020e 	bic.w	r2, r2, #14
 80030a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f202 	lsl.w	r2, r1, r2
 80030b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
    }
  }
  return;
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
}
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40020008 	.word	0x40020008
 80030e8:	4002001c 	.word	0x4002001c
 80030ec:	40020030 	.word	0x40020030
 80030f0:	40020044 	.word	0x40020044
 80030f4:	40020058 	.word	0x40020058
 80030f8:	4002006c 	.word	0x4002006c
 80030fc:	40020000 	.word	0x40020000

08003100 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f202 	lsl.w	r2, r1, r2
 800311c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b10      	cmp	r3, #16
 800312c:	d108      	bne.n	8003140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800313e:	e007      	b.n	8003150 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
	...

0800315c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800315c:	b480      	push	{r7}
 800315e:	b08b      	sub	sp, #44	@ 0x2c
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316e:	e169      	b.n	8003444 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003170:	2201      	movs	r2, #1
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	429a      	cmp	r2, r3
 800318a:	f040 8158 	bne.w	800343e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4a9a      	ldr	r2, [pc, #616]	@ (80033fc <HAL_GPIO_Init+0x2a0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d05e      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
 8003198:	4a98      	ldr	r2, [pc, #608]	@ (80033fc <HAL_GPIO_Init+0x2a0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d875      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 800319e:	4a98      	ldr	r2, [pc, #608]	@ (8003400 <HAL_GPIO_Init+0x2a4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d058      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
 80031a4:	4a96      	ldr	r2, [pc, #600]	@ (8003400 <HAL_GPIO_Init+0x2a4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d86f      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 80031aa:	4a96      	ldr	r2, [pc, #600]	@ (8003404 <HAL_GPIO_Init+0x2a8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d052      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
 80031b0:	4a94      	ldr	r2, [pc, #592]	@ (8003404 <HAL_GPIO_Init+0x2a8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d869      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 80031b6:	4a94      	ldr	r2, [pc, #592]	@ (8003408 <HAL_GPIO_Init+0x2ac>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d04c      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
 80031bc:	4a92      	ldr	r2, [pc, #584]	@ (8003408 <HAL_GPIO_Init+0x2ac>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d863      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 80031c2:	4a92      	ldr	r2, [pc, #584]	@ (800340c <HAL_GPIO_Init+0x2b0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d046      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
 80031c8:	4a90      	ldr	r2, [pc, #576]	@ (800340c <HAL_GPIO_Init+0x2b0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d85d      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 80031ce:	2b12      	cmp	r3, #18
 80031d0:	d82a      	bhi.n	8003228 <HAL_GPIO_Init+0xcc>
 80031d2:	2b12      	cmp	r3, #18
 80031d4:	d859      	bhi.n	800328a <HAL_GPIO_Init+0x12e>
 80031d6:	a201      	add	r2, pc, #4	@ (adr r2, 80031dc <HAL_GPIO_Init+0x80>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	08003257 	.word	0x08003257
 80031e0:	08003231 	.word	0x08003231
 80031e4:	08003243 	.word	0x08003243
 80031e8:	08003285 	.word	0x08003285
 80031ec:	0800328b 	.word	0x0800328b
 80031f0:	0800328b 	.word	0x0800328b
 80031f4:	0800328b 	.word	0x0800328b
 80031f8:	0800328b 	.word	0x0800328b
 80031fc:	0800328b 	.word	0x0800328b
 8003200:	0800328b 	.word	0x0800328b
 8003204:	0800328b 	.word	0x0800328b
 8003208:	0800328b 	.word	0x0800328b
 800320c:	0800328b 	.word	0x0800328b
 8003210:	0800328b 	.word	0x0800328b
 8003214:	0800328b 	.word	0x0800328b
 8003218:	0800328b 	.word	0x0800328b
 800321c:	0800328b 	.word	0x0800328b
 8003220:	08003239 	.word	0x08003239
 8003224:	0800324d 	.word	0x0800324d
 8003228:	4a79      	ldr	r2, [pc, #484]	@ (8003410 <HAL_GPIO_Init+0x2b4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800322e:	e02c      	b.n	800328a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	623b      	str	r3, [r7, #32]
          break;
 8003236:	e029      	b.n	800328c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	3304      	adds	r3, #4
 800323e:	623b      	str	r3, [r7, #32]
          break;
 8003240:	e024      	b.n	800328c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	3308      	adds	r3, #8
 8003248:	623b      	str	r3, [r7, #32]
          break;
 800324a:	e01f      	b.n	800328c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	330c      	adds	r3, #12
 8003252:	623b      	str	r3, [r7, #32]
          break;
 8003254:	e01a      	b.n	800328c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800325e:	2304      	movs	r3, #4
 8003260:	623b      	str	r3, [r7, #32]
          break;
 8003262:	e013      	b.n	800328c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800326c:	2308      	movs	r3, #8
 800326e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	611a      	str	r2, [r3, #16]
          break;
 8003276:	e009      	b.n	800328c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003278:	2308      	movs	r3, #8
 800327a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	615a      	str	r2, [r3, #20]
          break;
 8003282:	e003      	b.n	800328c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
          break;
 8003288:	e000      	b.n	800328c <HAL_GPIO_Init+0x130>
          break;
 800328a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2bff      	cmp	r3, #255	@ 0xff
 8003290:	d801      	bhi.n	8003296 <HAL_GPIO_Init+0x13a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	e001      	b.n	800329a <HAL_GPIO_Init+0x13e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2bff      	cmp	r3, #255	@ 0xff
 80032a0:	d802      	bhi.n	80032a8 <HAL_GPIO_Init+0x14c>
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	e002      	b.n	80032ae <HAL_GPIO_Init+0x152>
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	3b08      	subs	r3, #8
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	210f      	movs	r1, #15
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	6a39      	ldr	r1, [r7, #32]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	431a      	orrs	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80b1 	beq.w	800343e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003414 <HAL_GPIO_Init+0x2b8>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003414 <HAL_GPIO_Init+0x2b8>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6193      	str	r3, [r2, #24]
 80032e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003414 <HAL_GPIO_Init+0x2b8>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032f4:	4a48      	ldr	r2, [pc, #288]	@ (8003418 <HAL_GPIO_Init+0x2bc>)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	3302      	adds	r3, #2
 80032fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003300:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a40      	ldr	r2, [pc, #256]	@ (800341c <HAL_GPIO_Init+0x2c0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_GPIO_Init+0x1ec>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a3f      	ldr	r2, [pc, #252]	@ (8003420 <HAL_GPIO_Init+0x2c4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00d      	beq.n	8003344 <HAL_GPIO_Init+0x1e8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3e      	ldr	r2, [pc, #248]	@ (8003424 <HAL_GPIO_Init+0x2c8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <HAL_GPIO_Init+0x1e4>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a3d      	ldr	r2, [pc, #244]	@ (8003428 <HAL_GPIO_Init+0x2cc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_GPIO_Init+0x1e0>
 8003338:	2303      	movs	r3, #3
 800333a:	e006      	b.n	800334a <HAL_GPIO_Init+0x1ee>
 800333c:	2304      	movs	r3, #4
 800333e:	e004      	b.n	800334a <HAL_GPIO_Init+0x1ee>
 8003340:	2302      	movs	r3, #2
 8003342:	e002      	b.n	800334a <HAL_GPIO_Init+0x1ee>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_GPIO_Init+0x1ee>
 8003348:	2300      	movs	r3, #0
 800334a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334c:	f002 0203 	and.w	r2, r2, #3
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	4093      	lsls	r3, r2
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800335a:	492f      	ldr	r1, [pc, #188]	@ (8003418 <HAL_GPIO_Init+0x2bc>)
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	3302      	adds	r3, #2
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d006      	beq.n	8003382 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003374:	4b2d      	ldr	r3, [pc, #180]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	492c      	ldr	r1, [pc, #176]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]
 8003380:	e006      	b.n	8003390 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003382:	4b2a      	ldr	r3, [pc, #168]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	43db      	mvns	r3, r3
 800338a:	4928      	ldr	r1, [pc, #160]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 800338c:	4013      	ands	r3, r2
 800338e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d006      	beq.n	80033aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800339c:	4b23      	ldr	r3, [pc, #140]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	4922      	ldr	r1, [pc, #136]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60cb      	str	r3, [r1, #12]
 80033a8:	e006      	b.n	80033b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033aa:	4b20      	ldr	r3, [pc, #128]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	491e      	ldr	r1, [pc, #120]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d006      	beq.n	80033d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033c4:	4b19      	ldr	r3, [pc, #100]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	4918      	ldr	r1, [pc, #96]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
 80033d0:	e006      	b.n	80033e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033d2:	4b16      	ldr	r3, [pc, #88]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	43db      	mvns	r3, r3
 80033da:	4914      	ldr	r1, [pc, #80]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033dc:	4013      	ands	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d021      	beq.n	8003430 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033ec:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	490e      	ldr	r1, [pc, #56]	@ (800342c <HAL_GPIO_Init+0x2d0>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
 80033f8:	e021      	b.n	800343e <HAL_GPIO_Init+0x2e2>
 80033fa:	bf00      	nop
 80033fc:	10320000 	.word	0x10320000
 8003400:	10310000 	.word	0x10310000
 8003404:	10220000 	.word	0x10220000
 8003408:	10210000 	.word	0x10210000
 800340c:	10120000 	.word	0x10120000
 8003410:	10110000 	.word	0x10110000
 8003414:	40021000 	.word	0x40021000
 8003418:	40010000 	.word	0x40010000
 800341c:	40010800 	.word	0x40010800
 8003420:	40010c00 	.word	0x40010c00
 8003424:	40011000 	.word	0x40011000
 8003428:	40011400 	.word	0x40011400
 800342c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <HAL_GPIO_Init+0x304>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	43db      	mvns	r3, r3
 8003438:	4909      	ldr	r1, [pc, #36]	@ (8003460 <HAL_GPIO_Init+0x304>)
 800343a:	4013      	ands	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	3301      	adds	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	f47f ae8e 	bne.w	8003170 <HAL_GPIO_Init+0x14>
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	372c      	adds	r7, #44	@ 0x2c
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	40010400 	.word	0x40010400

08003464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
 8003480:	e001      	b.n	8003486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	807b      	strh	r3, [r7, #2]
 800349e:	4613      	mov	r3, r2
 80034a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034a2:	787b      	ldrb	r3, [r7, #1]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034a8:	887a      	ldrh	r2, [r7, #2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034ae:	e003      	b.n	80034b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	041a      	lsls	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	611a      	str	r2, [r3, #16]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e12b      	b.n	800372e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe fa1e 	bl	800192c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	@ 0x24
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003516:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003528:	f001 f842 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 800352c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4a81      	ldr	r2, [pc, #516]	@ (8003738 <HAL_I2C_Init+0x274>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d807      	bhi.n	8003548 <HAL_I2C_Init+0x84>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a80      	ldr	r2, [pc, #512]	@ (800373c <HAL_I2C_Init+0x278>)
 800353c:	4293      	cmp	r3, r2
 800353e:	bf94      	ite	ls
 8003540:	2301      	movls	r3, #1
 8003542:	2300      	movhi	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e006      	b.n	8003556 <HAL_I2C_Init+0x92>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a7d      	ldr	r2, [pc, #500]	@ (8003740 <HAL_I2C_Init+0x27c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	bf94      	ite	ls
 8003550:	2301      	movls	r3, #1
 8003552:	2300      	movhi	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0e7      	b.n	800372e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4a78      	ldr	r2, [pc, #480]	@ (8003744 <HAL_I2C_Init+0x280>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0c9b      	lsrs	r3, r3, #18
 8003568:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a6a      	ldr	r2, [pc, #424]	@ (8003738 <HAL_I2C_Init+0x274>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d802      	bhi.n	8003598 <HAL_I2C_Init+0xd4>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3301      	adds	r3, #1
 8003596:	e009      	b.n	80035ac <HAL_I2C_Init+0xe8>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	4a69      	ldr	r2, [pc, #420]	@ (8003748 <HAL_I2C_Init+0x284>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	099b      	lsrs	r3, r3, #6
 80035aa:	3301      	adds	r3, #1
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	495c      	ldr	r1, [pc, #368]	@ (8003738 <HAL_I2C_Init+0x274>)
 80035c8:	428b      	cmp	r3, r1
 80035ca:	d819      	bhi.n	8003600 <HAL_I2C_Init+0x13c>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e59      	subs	r1, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035da:	1c59      	adds	r1, r3, #1
 80035dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035e0:	400b      	ands	r3, r1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_I2C_Init+0x138>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1e59      	subs	r1, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f4:	3301      	adds	r3, #1
 80035f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fa:	e051      	b.n	80036a0 <HAL_I2C_Init+0x1dc>
 80035fc:	2304      	movs	r3, #4
 80035fe:	e04f      	b.n	80036a0 <HAL_I2C_Init+0x1dc>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d111      	bne.n	800362c <HAL_I2C_Init+0x168>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1e58      	subs	r0, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	440b      	add	r3, r1
 8003616:	fbb0 f3f3 	udiv	r3, r0, r3
 800361a:	3301      	adds	r3, #1
 800361c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e012      	b.n	8003652 <HAL_I2C_Init+0x18e>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1e58      	subs	r0, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	0099      	lsls	r1, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003642:	3301      	adds	r3, #1
 8003644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Init+0x196>
 8003656:	2301      	movs	r3, #1
 8003658:	e022      	b.n	80036a0 <HAL_I2C_Init+0x1dc>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10e      	bne.n	8003680 <HAL_I2C_Init+0x1bc>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1e58      	subs	r0, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6859      	ldr	r1, [r3, #4]
 800366a:	460b      	mov	r3, r1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	440b      	add	r3, r1
 8003670:	fbb0 f3f3 	udiv	r3, r0, r3
 8003674:	3301      	adds	r3, #1
 8003676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800367e:	e00f      	b.n	80036a0 <HAL_I2C_Init+0x1dc>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	0099      	lsls	r1, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	6809      	ldr	r1, [r1, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6911      	ldr	r1, [r2, #16]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68d2      	ldr	r2, [r2, #12]
 80036da:	4311      	orrs	r1, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	430b      	orrs	r3, r1
 80036e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	000186a0 	.word	0x000186a0
 800373c:	001e847f 	.word	0x001e847f
 8003740:	003d08ff 	.word	0x003d08ff
 8003744:	431bde83 	.word	0x431bde83
 8003748:	10624dd3 	.word	0x10624dd3

0800374c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	461a      	mov	r2, r3
 800375a:	4603      	mov	r3, r0
 800375c:	817b      	strh	r3, [r7, #10]
 800375e:	460b      	mov	r3, r1
 8003760:	813b      	strh	r3, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003766:	f7fe fbc5 	bl	8001ef4 <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b20      	cmp	r3, #32
 8003776:	f040 80d9 	bne.w	800392c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2319      	movs	r3, #25
 8003780:	2201      	movs	r2, #1
 8003782:	496d      	ldr	r1, [pc, #436]	@ (8003938 <HAL_I2C_Mem_Write+0x1ec>)
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f971 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
 8003792:	e0cc      	b.n	800392e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_I2C_Mem_Write+0x56>
 800379e:	2302      	movs	r3, #2
 80037a0:	e0c5      	b.n	800392e <HAL_I2C_Mem_Write+0x1e2>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d007      	beq.n	80037c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2221      	movs	r2, #33	@ 0x21
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2240      	movs	r2, #64	@ 0x40
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a4d      	ldr	r2, [pc, #308]	@ (800393c <HAL_I2C_Mem_Write+0x1f0>)
 8003808:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800380a:	88f8      	ldrh	r0, [r7, #6]
 800380c:	893a      	ldrh	r2, [r7, #8]
 800380e:	8979      	ldrh	r1, [r7, #10]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	4603      	mov	r3, r0
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f890 	bl	8003940 <I2C_RequestMemoryWrite>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d052      	beq.n	80038cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e081      	b.n	800392e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fa36 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	2b04      	cmp	r3, #4
 8003840:	d107      	bne.n	8003852 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003850:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e06b      	b.n	800392e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	781a      	ldrb	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d11b      	bne.n	80038cc <HAL_I2C_Mem_Write+0x180>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1aa      	bne.n	800382a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fa29 	bl	8003d30 <I2C_WaitOnBTFFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00d      	beq.n	8003900 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d107      	bne.n	80038fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e016      	b.n	800392e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	00100002 	.word	0x00100002
 800393c:	ffff0000 	.word	0xffff0000

08003940 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4603      	mov	r3, r0
 8003950:	817b      	strh	r3, [r7, #10]
 8003952:	460b      	mov	r3, r1
 8003954:	813b      	strh	r3, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	2200      	movs	r2, #0
 8003972:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f878 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003990:	d103      	bne.n	800399a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003998:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e05f      	b.n	8003a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	492d      	ldr	r1, [pc, #180]	@ (8003a68 <I2C_RequestMemoryWrite+0x128>)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f8d3 	bl	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e04c      	b.n	8003a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039dc:	6a39      	ldr	r1, [r7, #32]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f95e 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d107      	bne.n	8003a02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e02b      	b.n	8003a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	611a      	str	r2, [r3, #16]
 8003a16:	e021      	b.n	8003a5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a18:	893b      	ldrh	r3, [r7, #8]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a28:	6a39      	ldr	r1, [r7, #32]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f938 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d107      	bne.n	8003a4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e005      	b.n	8003a5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a52:	893b      	ldrh	r3, [r7, #8]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	00010002 	.word	0x00010002

08003a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a7c:	e048      	b.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d044      	beq.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fe fa35 	bl	8001ef4 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d139      	bne.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10d      	bne.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	43da      	mvns	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	e00c      	b.n	8003adc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d116      	bne.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e023      	b.n	8003b58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10d      	bne.n	8003b36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	43da      	mvns	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	e00c      	b.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d093      	beq.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b6e:	e071      	b.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7e:	d123      	bne.n	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e067      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d041      	beq.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd0:	f7fe f990 	bl	8001ef4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d302      	bcc.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d136      	bne.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10c      	bne.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e00b      	b.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	f043 0220 	orr.w	r2, r3, #32
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e021      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	0c1b      	lsrs	r3, r3, #16
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d10c      	bne.n	8003c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	43da      	mvns	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf14      	ite	ne
 8003c70:	2301      	movne	r3, #1
 8003c72:	2300      	moveq	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e00b      	b.n	8003c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	2300      	moveq	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f af6d 	bne.w	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cac:	e034      	b.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f886 	bl	8003dc0 <I2C_IsAcknowledgeFailed>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e034      	b.n	8003d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d028      	beq.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fe f915 	bl	8001ef4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d11d      	bne.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce6:	2b80      	cmp	r3, #128	@ 0x80
 8003ce8:	d016      	beq.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e007      	b.n	8003d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d22:	2b80      	cmp	r3, #128	@ 0x80
 8003d24:	d1c3      	bne.n	8003cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d3c:	e034      	b.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f83e 	bl	8003dc0 <I2C_IsAcknowledgeFailed>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e034      	b.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d028      	beq.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d56:	f7fe f8cd 	bl	8001ef4 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d11d      	bne.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d016      	beq.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e007      	b.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d1c3      	bne.n	8003d3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd6:	d11b      	bne.n	8003e10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003de0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f043 0204 	orr.w	r2, r3, #4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e272      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8087 	beq.w	8003f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e3c:	4b92      	ldr	r3, [pc, #584]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d00c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e48:	4b8f      	ldr	r3, [pc, #572]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d112      	bne.n	8003e7a <HAL_RCC_OscConfig+0x5e>
 8003e54:	4b8c      	ldr	r3, [pc, #560]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e60:	d10b      	bne.n	8003e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e62:	4b89      	ldr	r3, [pc, #548]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d06c      	beq.n	8003f48 <HAL_RCC_OscConfig+0x12c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d168      	bne.n	8003f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e24c      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_OscConfig+0x76>
 8003e84:	4b80      	ldr	r3, [pc, #512]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a7f      	ldr	r2, [pc, #508]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e02e      	b.n	8003ef0 <HAL_RCC_OscConfig+0xd4>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x98>
 8003e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a7a      	ldr	r2, [pc, #488]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b78      	ldr	r3, [pc, #480]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a77      	ldr	r2, [pc, #476]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e01d      	b.n	8003ef0 <HAL_RCC_OscConfig+0xd4>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0xbc>
 8003ebe:	4b72      	ldr	r3, [pc, #456]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a71      	ldr	r2, [pc, #452]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b6f      	ldr	r3, [pc, #444]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6e      	ldr	r2, [pc, #440]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_OscConfig+0xd4>
 8003ed8:	4b6b      	ldr	r3, [pc, #428]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6a      	ldr	r2, [pc, #424]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b68      	ldr	r3, [pc, #416]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a67      	ldr	r2, [pc, #412]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d013      	beq.n	8003f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fffc 	bl	8001ef4 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fd fff8 	bl	8001ef4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	@ 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e200      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	4b5d      	ldr	r3, [pc, #372]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0xe4>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fd ffe8 	bl	8001ef4 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fd ffe4 	bl	8001ef4 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	@ 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e1ec      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3a:	4b53      	ldr	r3, [pc, #332]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x10c>
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d063      	beq.n	800401e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f56:	4b4c      	ldr	r3, [pc, #304]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f62:	4b49      	ldr	r3, [pc, #292]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d11c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x18c>
 8003f6e:	4b46      	ldr	r3, [pc, #280]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d116      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7a:	4b43      	ldr	r3, [pc, #268]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_RCC_OscConfig+0x176>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e1c0      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f92:	4b3d      	ldr	r3, [pc, #244]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4939      	ldr	r1, [pc, #228]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa6:	e03a      	b.n	800401e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d020      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb0:	4b36      	ldr	r3, [pc, #216]	@ (800408c <HAL_RCC_OscConfig+0x270>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7fd ff9d 	bl	8001ef4 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fbe:	f7fd ff99 	bl	8001ef4 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e1a1      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4927      	ldr	r1, [pc, #156]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]
 8003ff0:	e015      	b.n	800401e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff2:	4b26      	ldr	r3, [pc, #152]	@ (800408c <HAL_RCC_OscConfig+0x270>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fd ff7c 	bl	8001ef4 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004000:	f7fd ff78 	bl	8001ef4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e180      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004012:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d03a      	beq.n	80040a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d019      	beq.n	8004066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004032:	4b17      	ldr	r3, [pc, #92]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004038:	f7fd ff5c 	bl	8001ef4 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004040:	f7fd ff58 	bl	8001ef4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e160      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <HAL_RCC_OscConfig+0x26c>)
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800405e:	2001      	movs	r0, #1
 8004060:	f000 face 	bl	8004600 <RCC_Delay>
 8004064:	e01c      	b.n	80040a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004066:	4b0a      	ldr	r3, [pc, #40]	@ (8004090 <HAL_RCC_OscConfig+0x274>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406c:	f7fd ff42 	bl	8001ef4 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004072:	e00f      	b.n	8004094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004074:	f7fd ff3e 	bl	8001ef4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d908      	bls.n	8004094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e146      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	42420000 	.word	0x42420000
 8004090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004094:	4b92      	ldr	r3, [pc, #584]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e9      	bne.n	8004074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80a6 	beq.w	80041fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ae:	2300      	movs	r3, #0
 80040b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b2:	4b8b      	ldr	r3, [pc, #556]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10d      	bne.n	80040da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040be:	4b88      	ldr	r3, [pc, #544]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	4a87      	ldr	r2, [pc, #540]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 80040c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c8:	61d3      	str	r3, [r2, #28]
 80040ca:	4b85      	ldr	r3, [pc, #532]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040da:	4b82      	ldr	r3, [pc, #520]	@ (80042e4 <HAL_RCC_OscConfig+0x4c8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d118      	bne.n	8004118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e6:	4b7f      	ldr	r3, [pc, #508]	@ (80042e4 <HAL_RCC_OscConfig+0x4c8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7e      	ldr	r2, [pc, #504]	@ (80042e4 <HAL_RCC_OscConfig+0x4c8>)
 80040ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f2:	f7fd feff 	bl	8001ef4 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fa:	f7fd fefb 	bl	8001ef4 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b64      	cmp	r3, #100	@ 0x64
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e103      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	4b75      	ldr	r3, [pc, #468]	@ (80042e4 <HAL_RCC_OscConfig+0x4c8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d106      	bne.n	800412e <HAL_RCC_OscConfig+0x312>
 8004120:	4b6f      	ldr	r3, [pc, #444]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	4a6e      	ldr	r2, [pc, #440]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6213      	str	r3, [r2, #32]
 800412c:	e02d      	b.n	800418a <HAL_RCC_OscConfig+0x36e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10c      	bne.n	8004150 <HAL_RCC_OscConfig+0x334>
 8004136:	4b6a      	ldr	r3, [pc, #424]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	4a69      	ldr	r2, [pc, #420]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	6213      	str	r3, [r2, #32]
 8004142:	4b67      	ldr	r3, [pc, #412]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	4a66      	ldr	r2, [pc, #408]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	6213      	str	r3, [r2, #32]
 800414e:	e01c      	b.n	800418a <HAL_RCC_OscConfig+0x36e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b05      	cmp	r3, #5
 8004156:	d10c      	bne.n	8004172 <HAL_RCC_OscConfig+0x356>
 8004158:	4b61      	ldr	r3, [pc, #388]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	4a60      	ldr	r2, [pc, #384]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 800415e:	f043 0304 	orr.w	r3, r3, #4
 8004162:	6213      	str	r3, [r2, #32]
 8004164:	4b5e      	ldr	r3, [pc, #376]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4a5d      	ldr	r2, [pc, #372]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6213      	str	r3, [r2, #32]
 8004170:	e00b      	b.n	800418a <HAL_RCC_OscConfig+0x36e>
 8004172:	4b5b      	ldr	r3, [pc, #364]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	4a5a      	ldr	r2, [pc, #360]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	6213      	str	r3, [r2, #32]
 800417e:	4b58      	ldr	r3, [pc, #352]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	4a57      	ldr	r2, [pc, #348]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d015      	beq.n	80041be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004192:	f7fd feaf 	bl	8001ef4 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004198:	e00a      	b.n	80041b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419a:	f7fd feab 	bl	8001ef4 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e0b1      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b0:	4b4b      	ldr	r3, [pc, #300]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0ee      	beq.n	800419a <HAL_RCC_OscConfig+0x37e>
 80041bc:	e014      	b.n	80041e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041be:	f7fd fe99 	bl	8001ef4 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c6:	f7fd fe95 	bl	8001ef4 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e09b      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041dc:	4b40      	ldr	r3, [pc, #256]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1ee      	bne.n	80041c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d105      	bne.n	80041fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ee:	4b3c      	ldr	r3, [pc, #240]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4a3b      	ldr	r2, [pc, #236]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 80041f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8087 	beq.w	8004312 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004204:	4b36      	ldr	r3, [pc, #216]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b08      	cmp	r3, #8
 800420e:	d061      	beq.n	80042d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d146      	bne.n	80042a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004218:	4b33      	ldr	r3, [pc, #204]	@ (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421e:	f7fd fe69 	bl	8001ef4 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004226:	f7fd fe65 	bl	8001ef4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e06d      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004238:	4b29      	ldr	r3, [pc, #164]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f0      	bne.n	8004226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424c:	d108      	bne.n	8004260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800424e:	4b24      	ldr	r3, [pc, #144]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	4921      	ldr	r1, [pc, #132]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004260:	4b1f      	ldr	r3, [pc, #124]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a19      	ldr	r1, [r3, #32]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	430b      	orrs	r3, r1
 8004272:	491b      	ldr	r1, [pc, #108]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004278:	4b1b      	ldr	r3, [pc, #108]	@ (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fd fe39 	bl	8001ef4 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004286:	f7fd fe35 	bl	8001ef4 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e03d      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004298:	4b11      	ldr	r3, [pc, #68]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x46a>
 80042a4:	e035      	b.n	8004312 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fd fe22 	bl	8001ef4 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fd fe1e 	bl	8001ef4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e026      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c6:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <HAL_RCC_OscConfig+0x4c4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x498>
 80042d2:	e01e      	b.n	8004312 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d107      	bne.n	80042ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e019      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40007000 	.word	0x40007000
 80042e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_RCC_OscConfig+0x500>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d106      	bne.n	800430e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430a:	429a      	cmp	r2, r3
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000

08004320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0d0      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b6a      	ldr	r3, [pc, #424]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d910      	bls.n	8004364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b67      	ldr	r3, [pc, #412]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 0207 	bic.w	r2, r3, #7
 800434a:	4965      	ldr	r1, [pc, #404]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b63      	ldr	r3, [pc, #396]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0b8      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800437c:	4b59      	ldr	r3, [pc, #356]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a58      	ldr	r2, [pc, #352]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004394:	4b53      	ldr	r3, [pc, #332]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a52      	ldr	r2, [pc, #328]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800439e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a0:	4b50      	ldr	r3, [pc, #320]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	494d      	ldr	r1, [pc, #308]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d040      	beq.n	8004440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4b47      	ldr	r3, [pc, #284]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d115      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e07f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	4b41      	ldr	r3, [pc, #260]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e073      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ee:	4b3d      	ldr	r3, [pc, #244]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e06b      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fe:	4b39      	ldr	r3, [pc, #228]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4936      	ldr	r1, [pc, #216]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	4313      	orrs	r3, r2
 800440e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004410:	f7fd fd70 	bl	8001ef4 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	e00a      	b.n	800442e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004418:	f7fd fd6c 	bl	8001ef4 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e053      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	4b2d      	ldr	r3, [pc, #180]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 020c 	and.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	429a      	cmp	r2, r3
 800443e:	d1eb      	bne.n	8004418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004440:	4b27      	ldr	r3, [pc, #156]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d210      	bcs.n	8004470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b24      	ldr	r3, [pc, #144]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 0207 	bic.w	r2, r3, #7
 8004456:	4922      	ldr	r1, [pc, #136]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b20      	ldr	r3, [pc, #128]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e032      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800447c:	4b19      	ldr	r3, [pc, #100]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4916      	ldr	r1, [pc, #88]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800449a:	4b12      	ldr	r3, [pc, #72]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	490e      	ldr	r1, [pc, #56]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ae:	f000 f821 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80044b2:	4602      	mov	r2, r0
 80044b4:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	490a      	ldr	r1, [pc, #40]	@ (80044e8 <HAL_RCC_ClockConfig+0x1c8>)
 80044c0:	5ccb      	ldrb	r3, [r1, r3]
 80044c2:	fa22 f303 	lsr.w	r3, r2, r3
 80044c6:	4a09      	ldr	r2, [pc, #36]	@ (80044ec <HAL_RCC_ClockConfig+0x1cc>)
 80044c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044ca:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <HAL_RCC_ClockConfig+0x1d0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd fcce 	bl	8001e70 <HAL_InitTick>

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40022000 	.word	0x40022000
 80044e4:	40021000 	.word	0x40021000
 80044e8:	08009aa0 	.word	0x08009aa0
 80044ec:	20000068 	.word	0x20000068
 80044f0:	2000006c 	.word	0x2000006c

080044f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	2300      	movs	r3, #0
 8004508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800450e:	4b1e      	ldr	r3, [pc, #120]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x94>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b04      	cmp	r3, #4
 800451c:	d002      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0x30>
 800451e:	2b08      	cmp	r3, #8
 8004520:	d003      	beq.n	800452a <HAL_RCC_GetSysClockFreq+0x36>
 8004522:	e027      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004524:	4b19      	ldr	r3, [pc, #100]	@ (800458c <HAL_RCC_GetSysClockFreq+0x98>)
 8004526:	613b      	str	r3, [r7, #16]
      break;
 8004528:	e027      	b.n	800457a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	0c9b      	lsrs	r3, r3, #18
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	4a17      	ldr	r2, [pc, #92]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004534:	5cd3      	ldrb	r3, [r2, r3]
 8004536:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d010      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004542:	4b11      	ldr	r3, [pc, #68]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x94>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	0c5b      	lsrs	r3, r3, #17
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	4a11      	ldr	r2, [pc, #68]	@ (8004594 <HAL_RCC_GetSysClockFreq+0xa0>)
 800454e:	5cd3      	ldrb	r3, [r2, r3]
 8004550:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a0d      	ldr	r2, [pc, #52]	@ (800458c <HAL_RCC_GetSysClockFreq+0x98>)
 8004556:	fb03 f202 	mul.w	r2, r3, r2
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	e004      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a0c      	ldr	r2, [pc, #48]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004568:	fb02 f303 	mul.w	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	613b      	str	r3, [r7, #16]
      break;
 8004572:	e002      	b.n	800457a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004574:	4b05      	ldr	r3, [pc, #20]	@ (800458c <HAL_RCC_GetSysClockFreq+0x98>)
 8004576:	613b      	str	r3, [r7, #16]
      break;
 8004578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800457a:	693b      	ldr	r3, [r7, #16]
}
 800457c:	4618      	mov	r0, r3
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000
 800458c:	007a1200 	.word	0x007a1200
 8004590:	08009ab8 	.word	0x08009ab8
 8004594:	08009ac8 	.word	0x08009ac8
 8004598:	003d0900 	.word	0x003d0900

0800459c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a0:	4b02      	ldr	r3, [pc, #8]	@ (80045ac <HAL_RCC_GetHCLKFreq+0x10>)
 80045a2:	681b      	ldr	r3, [r3, #0]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	20000068 	.word	0x20000068

080045b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045b4:	f7ff fff2 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	0a1b      	lsrs	r3, r3, #8
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4903      	ldr	r1, [pc, #12]	@ (80045d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	08009ab0 	.word	0x08009ab0

080045d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045dc:	f7ff ffde 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b05      	ldr	r3, [pc, #20]	@ (80045f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	0adb      	lsrs	r3, r3, #11
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4903      	ldr	r1, [pc, #12]	@ (80045fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000
 80045fc:	08009ab0 	.word	0x08009ab0

08004600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004608:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <RCC_Delay+0x34>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a0a      	ldr	r2, [pc, #40]	@ (8004638 <RCC_Delay+0x38>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	0a5b      	lsrs	r3, r3, #9
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800461c:	bf00      	nop
  }
  while (Delay --);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1e5a      	subs	r2, r3, #1
 8004622:	60fa      	str	r2, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f9      	bne.n	800461c <RCC_Delay+0x1c>
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	20000068 	.word	0x20000068
 8004638:	10624dd3 	.word	0x10624dd3

0800463c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d07d      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004658:	2300      	movs	r3, #0
 800465a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465c:	4b4f      	ldr	r3, [pc, #316]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10d      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004668:	4b4c      	ldr	r3, [pc, #304]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	4a4b      	ldr	r2, [pc, #300]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004672:	61d3      	str	r3, [r2, #28]
 8004674:	4b49      	ldr	r3, [pc, #292]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004680:	2301      	movs	r3, #1
 8004682:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004684:	4b46      	ldr	r3, [pc, #280]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d118      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004690:	4b43      	ldr	r3, [pc, #268]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a42      	ldr	r2, [pc, #264]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800469a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469c:	f7fd fc2a 	bl	8001ef4 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a2:	e008      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a4:	f7fd fc26 	bl	8001ef4 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b64      	cmp	r3, #100	@ 0x64
 80046b0:	d901      	bls.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e06d      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b6:	4b3a      	ldr	r3, [pc, #232]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046c2:	4b36      	ldr	r3, [pc, #216]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d02e      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d027      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046e0:	4b2e      	ldr	r3, [pc, #184]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ea:	4b2e      	ldr	r3, [pc, #184]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f0:	4b2c      	ldr	r3, [pc, #176]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046f6:	4a29      	ldr	r2, [pc, #164]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d014      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fd fbf5 	bl	8001ef4 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fd fbf1 	bl	8001ef4 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e036      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004724:	4b1d      	ldr	r3, [pc, #116]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ee      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004730:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4917      	ldr	r1, [pc, #92]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473e:	4313      	orrs	r3, r2
 8004740:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004748:	4b14      	ldr	r3, [pc, #80]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	4a13      	ldr	r2, [pc, #76]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004760:	4b0e      	ldr	r3, [pc, #56]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	490b      	ldr	r1, [pc, #44]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	4904      	ldr	r1, [pc, #16]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	40007000 	.word	0x40007000
 80047a4:	42420440 	.word	0x42420440

080047a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e041      	b.n	800483e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fd f8fc 	bl	80019cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 fafc 	bl	8004de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	d001      	beq.n	8004860 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e032      	b.n	80048c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a18      	ldr	r2, [pc, #96]	@ (80048d0 <HAL_TIM_Base_Start+0x88>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00e      	beq.n	8004890 <HAL_TIM_Base_Start+0x48>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487a:	d009      	beq.n	8004890 <HAL_TIM_Base_Start+0x48>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a14      	ldr	r2, [pc, #80]	@ (80048d4 <HAL_TIM_Base_Start+0x8c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_TIM_Base_Start+0x48>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a13      	ldr	r2, [pc, #76]	@ (80048d8 <HAL_TIM_Base_Start+0x90>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d111      	bne.n	80048b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b06      	cmp	r3, #6
 80048a0:	d010      	beq.n	80048c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0201 	orr.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b2:	e007      	b.n	80048c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr
 80048d0:	40012c00 	.word	0x40012c00
 80048d4:	40000400 	.word	0x40000400
 80048d8:	40000800 	.word	0x40000800

080048dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e041      	b.n	8004972 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f839 	bl	800497a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fa62 	bl	8004de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <HAL_TIM_PWM_Start+0x24>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e022      	b.n	80049f6 <HAL_TIM_PWM_Start+0x6a>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d109      	bne.n	80049ca <HAL_TIM_PWM_Start+0x3e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	bf14      	ite	ne
 80049c2:	2301      	movne	r3, #1
 80049c4:	2300      	moveq	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e015      	b.n	80049f6 <HAL_TIM_PWM_Start+0x6a>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d109      	bne.n	80049e4 <HAL_TIM_PWM_Start+0x58>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e008      	b.n	80049f6 <HAL_TIM_PWM_Start+0x6a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e05e      	b.n	8004abc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start+0x82>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a0c:	e013      	b.n	8004a36 <HAL_TIM_PWM_Start+0xaa>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Start+0x92>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a1c:	e00b      	b.n	8004a36 <HAL_TIM_PWM_Start+0xaa>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d104      	bne.n	8004a2e <HAL_TIM_PWM_Start+0xa2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a2c:	e003      	b.n	8004a36 <HAL_TIM_PWM_Start+0xaa>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2202      	movs	r2, #2
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fc50 	bl	80052e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac4 <HAL_TIM_PWM_Start+0x138>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d107      	bne.n	8004a5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a18      	ldr	r2, [pc, #96]	@ (8004ac4 <HAL_TIM_PWM_Start+0x138>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_TIM_PWM_Start+0xfa>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a70:	d009      	beq.n	8004a86 <HAL_TIM_PWM_Start+0xfa>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a14      	ldr	r2, [pc, #80]	@ (8004ac8 <HAL_TIM_PWM_Start+0x13c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_TIM_PWM_Start+0xfa>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a12      	ldr	r2, [pc, #72]	@ (8004acc <HAL_TIM_PWM_Start+0x140>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d111      	bne.n	8004aaa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b06      	cmp	r3, #6
 8004a96:	d010      	beq.n	8004aba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa8:	e007      	b.n	8004aba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800

08004ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0ae      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	f200 809f 	bhi.w	8004c3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004afe:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004c3d 	.word	0x08004c3d
 8004b0c:	08004c3d 	.word	0x08004c3d
 8004b10:	08004c3d 	.word	0x08004c3d
 8004b14:	08004b79 	.word	0x08004b79
 8004b18:	08004c3d 	.word	0x08004c3d
 8004b1c:	08004c3d 	.word	0x08004c3d
 8004b20:	08004c3d 	.word	0x08004c3d
 8004b24:	08004bbb 	.word	0x08004bbb
 8004b28:	08004c3d 	.word	0x08004c3d
 8004b2c:	08004c3d 	.word	0x08004c3d
 8004b30:	08004c3d 	.word	0x08004c3d
 8004b34:	08004bfb 	.word	0x08004bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f9b2 	bl	8004ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0208 	orr.w	r2, r2, #8
 8004b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0204 	bic.w	r2, r2, #4
 8004b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6999      	ldr	r1, [r3, #24]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	619a      	str	r2, [r3, #24]
      break;
 8004b76:	e064      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f9f8 	bl	8004f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6999      	ldr	r1, [r3, #24]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	619a      	str	r2, [r3, #24]
      break;
 8004bb8:	e043      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fa41 	bl	8005048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0208 	orr.w	r2, r2, #8
 8004bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0204 	bic.w	r2, r2, #4
 8004be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69d9      	ldr	r1, [r3, #28]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	61da      	str	r2, [r3, #28]
      break;
 8004bf8:	e023      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fa8b 	bl	800511c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69d9      	ldr	r1, [r3, #28]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	021a      	lsls	r2, r3, #8
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	61da      	str	r2, [r3, #28]
      break;
 8004c3a:	e002      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_ConfigClockSource+0x1c>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e0b4      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x186>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca8:	d03e      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0xd4>
 8004caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cae:	f200 8087 	bhi.w	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb6:	f000 8086 	beq.w	8004dc6 <HAL_TIM_ConfigClockSource+0x172>
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbe:	d87f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b70      	cmp	r3, #112	@ 0x70
 8004cc2:	d01a      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0xa6>
 8004cc4:	2b70      	cmp	r3, #112	@ 0x70
 8004cc6:	d87b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b60      	cmp	r3, #96	@ 0x60
 8004cca:	d050      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x11a>
 8004ccc:	2b60      	cmp	r3, #96	@ 0x60
 8004cce:	d877      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b50      	cmp	r3, #80	@ 0x50
 8004cd2:	d03c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xfa>
 8004cd4:	2b50      	cmp	r3, #80	@ 0x50
 8004cd6:	d873      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b40      	cmp	r3, #64	@ 0x40
 8004cda:	d058      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x13a>
 8004cdc:	2b40      	cmp	r3, #64	@ 0x40
 8004cde:	d86f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b30      	cmp	r3, #48	@ 0x30
 8004ce2:	d064      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004ce4:	2b30      	cmp	r3, #48	@ 0x30
 8004ce6:	d86b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d060      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d867      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05c      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d05a      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf8:	e062      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d0a:	f000 facc 	bl	80052a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	609a      	str	r2, [r3, #8]
      break;
 8004d26:	e04f      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d38:	f000 fab5 	bl	80052a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d4a:	609a      	str	r2, [r3, #8]
      break;
 8004d4c:	e03c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 fa2c 	bl	80051b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2150      	movs	r1, #80	@ 0x50
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fa83 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e02c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f000 fa4a 	bl	8005214 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2160      	movs	r1, #96	@ 0x60
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fa73 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e01c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f000 fa0c 	bl	80051b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2140      	movs	r1, #64	@ 0x40
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa63 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004dac:	e00c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 fa5a 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004dbe:	e003      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	e000      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a29      	ldr	r2, [pc, #164]	@ (8004e9c <TIM_Base_SetConfig+0xb8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <TIM_Base_SetConfig+0x30>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e02:	d007      	beq.n	8004e14 <TIM_Base_SetConfig+0x30>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a26      	ldr	r2, [pc, #152]	@ (8004ea0 <TIM_Base_SetConfig+0xbc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_Base_SetConfig+0x30>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a25      	ldr	r2, [pc, #148]	@ (8004ea4 <TIM_Base_SetConfig+0xc0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d108      	bne.n	8004e26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1c      	ldr	r2, [pc, #112]	@ (8004e9c <TIM_Base_SetConfig+0xb8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <TIM_Base_SetConfig+0x62>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e34:	d007      	beq.n	8004e46 <TIM_Base_SetConfig+0x62>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a19      	ldr	r2, [pc, #100]	@ (8004ea0 <TIM_Base_SetConfig+0xbc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_Base_SetConfig+0x62>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a18      	ldr	r2, [pc, #96]	@ (8004ea4 <TIM_Base_SetConfig+0xc0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d108      	bne.n	8004e58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a07      	ldr	r2, [pc, #28]	@ (8004e9c <TIM_Base_SetConfig+0xb8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d103      	bne.n	8004e8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	615a      	str	r2, [r3, #20]
}
 8004e92:	bf00      	nop
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800

08004ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f023 0201 	bic.w	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f023 0302 	bic.w	r3, r3, #2
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <TIM_OC1_SetConfig+0xc8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10c      	bne.n	8004f1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0308 	bic.w	r3, r3, #8
 8004f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0304 	bic.w	r3, r3, #4
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a13      	ldr	r2, [pc, #76]	@ (8004f70 <TIM_OC1_SetConfig+0xc8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d111      	bne.n	8004f4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	621a      	str	r2, [r3, #32]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40012c00 	.word	0x40012c00

08004f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f023 0210 	bic.w	r2, r3, #16
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0320 	bic.w	r3, r3, #32
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a1d      	ldr	r2, [pc, #116]	@ (8005044 <TIM_OC2_SetConfig+0xd0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d10d      	bne.n	8004ff0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a14      	ldr	r2, [pc, #80]	@ (8005044 <TIM_OC2_SetConfig+0xd0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d113      	bne.n	8005020 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr
 8005044:	40012c00 	.word	0x40012c00

08005048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0303 	bic.w	r3, r3, #3
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005118 <TIM_OC3_SetConfig+0xd0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d10d      	bne.n	80050c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a14      	ldr	r2, [pc, #80]	@ (8005118 <TIM_OC3_SetConfig+0xd0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d113      	bne.n	80050f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	621a      	str	r2, [r3, #32]
}
 800510c:	bf00      	nop
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40012c00 	.word	0x40012c00

0800511c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	031b      	lsls	r3, r3, #12
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a0f      	ldr	r2, [pc, #60]	@ (80051b4 <TIM_OC4_SetConfig+0x98>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d109      	bne.n	8005190 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	019b      	lsls	r3, r3, #6
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	621a      	str	r2, [r3, #32]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr
 80051b4:	40012c00 	.word	0x40012c00

080051b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0201 	bic.w	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f023 030a 	bic.w	r3, r3, #10
 80051f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f023 0210 	bic.w	r2, r3, #16
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800523e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	031b      	lsls	r3, r3, #12
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005250:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	621a      	str	r2, [r3, #32]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	f043 0307 	orr.w	r3, r3, #7
 8005294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	609a      	str	r2, [r3, #8]
}
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b087      	sub	sp, #28
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	021a      	lsls	r2, r3, #8
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	609a      	str	r2, [r3, #8]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	2201      	movs	r2, #1
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a1a      	ldr	r2, [r3, #32]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	43db      	mvns	r3, r3
 8005306:	401a      	ands	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	fa01 f303 	lsl.w	r3, r1, r3
 800531c:	431a      	orrs	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr

0800532c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005340:	2302      	movs	r3, #2
 8005342:	e046      	b.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a16      	ldr	r2, [pc, #88]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00e      	beq.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005390:	d009      	beq.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a12      	ldr	r2, [pc, #72]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d004      	beq.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a10      	ldr	r2, [pc, #64]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d10c      	bne.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800

080053e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005400:	2302      	movs	r3, #2
 8005402:	e03d      	b.n	8005480 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e042      	b.n	8005522 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d106      	bne.n	80054b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7fc fb11 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2224      	movs	r2, #36	@ 0x24
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fe02 	bl	80060d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005502:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b08a      	sub	sp, #40	@ 0x28
 800552e:	af02      	add	r7, sp, #8
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b20      	cmp	r3, #32
 8005548:	d16d      	bne.n	8005626 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_UART_Transmit+0x2c>
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e066      	b.n	8005628 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2221      	movs	r2, #33	@ 0x21
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005568:	f7fc fcc4 	bl	8001ef4 <HAL_GetTick>
 800556c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	88fa      	ldrh	r2, [r7, #6]
 8005578:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005582:	d108      	bne.n	8005596 <HAL_UART_Transmit+0x6c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	e003      	b.n	800559e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800559e:	e02a      	b.n	80055f6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2200      	movs	r2, #0
 80055a8:	2180      	movs	r1, #128	@ 0x80
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fb8a 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e036      	b.n	8005628 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	3302      	adds	r3, #2
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	e007      	b.n	80055e8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	781a      	ldrb	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3301      	adds	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1cf      	bne.n	80055a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2200      	movs	r2, #0
 8005608:	2140      	movs	r1, #64	@ 0x40
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fb5a 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e006      	b.n	8005628 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	e000      	b.n	8005628 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005626:	2302      	movs	r3, #2
  }
}
 8005628:	4618      	mov	r0, r3
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	@ 0x28
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b20      	cmp	r3, #32
 800564e:	d17c      	bne.n	800574a <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Receive+0x2c>
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e075      	b.n	800574c <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2222      	movs	r2, #34	@ 0x22
 800566a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005674:	f7fc fc3e 	bl	8001ef4 <HAL_GetTick>
 8005678:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800568e:	d108      	bne.n	80056a2 <HAL_UART_Receive+0x72>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d104      	bne.n	80056a2 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e003      	b.n	80056aa <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80056aa:	e043      	b.n	8005734 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2200      	movs	r2, #0
 80056b4:	2120      	movs	r1, #32
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fb04 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e042      	b.n	800574c <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10c      	bne.n	80056e6 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d8:	b29a      	uxth	r2, r3
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	3302      	adds	r3, #2
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e01f      	b.n	8005726 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ee:	d007      	beq.n	8005700 <HAL_UART_Receive+0xd0>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <HAL_UART_Receive+0xde>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	b2da      	uxtb	r2, r3
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	e008      	b.n	8005720 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800571a:	b2da      	uxtb	r2, r3
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	3301      	adds	r3, #1
 8005724:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1b6      	bne.n	80056ac <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b0ba      	sub	sp, #232	@ 0xe8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800577a:	2300      	movs	r3, #0
 800577c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005780:	2300      	movs	r3, #0
 8005782:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10f      	bne.n	80057ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d009      	beq.n	80057ba <HAL_UART_IRQHandler+0x66>
 80057a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fbd1 	bl	8005f5a <UART_Receive_IT>
      return;
 80057b8:	e25b      	b.n	8005c72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80de 	beq.w	8005980 <HAL_UART_IRQHandler+0x22c>
 80057c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 80d1 	beq.w	8005980 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00b      	beq.n	8005802 <HAL_UART_IRQHandler+0xae>
 80057ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	f043 0201 	orr.w	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_UART_IRQHandler+0xd2>
 800580e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581e:	f043 0202 	orr.w	r2, r3, #2
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <HAL_UART_IRQHandler+0xf6>
 8005832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005842:	f043 0204 	orr.w	r2, r3, #4
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800584a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d011      	beq.n	800587a <HAL_UART_IRQHandler+0x126>
 8005856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d105      	bne.n	800586e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	f043 0208 	orr.w	r2, r3, #8
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 81f2 	beq.w	8005c68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_UART_IRQHandler+0x14e>
 8005890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb5c 	bl	8005f5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bf14      	ite	ne
 80058b0:	2301      	movne	r3, #1
 80058b2:	2300      	moveq	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d103      	bne.n	80058ce <HAL_UART_IRQHandler+0x17a>
 80058c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d04f      	beq.n	800596e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fa66 	bl	8005da0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d041      	beq.n	8005966 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3314      	adds	r3, #20
 80058e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3314      	adds	r3, #20
 800590a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800590e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800591a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1d9      	bne.n	80058e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d013      	beq.n	800595e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b34 <HAL_UART_IRQHandler+0x3e0>)
 800593c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005942:	4618      	mov	r0, r3
 8005944:	f7fd fa5e 	bl	8002e04 <HAL_DMA_Abort_IT>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d016      	beq.n	800597c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005958:	4610      	mov	r0, r2
 800595a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595c:	e00e      	b.n	800597c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f99c 	bl	8005c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	e00a      	b.n	800597c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f998 	bl	8005c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596c:	e006      	b.n	800597c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f994 	bl	8005c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800597a:	e175      	b.n	8005c68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	bf00      	nop
    return;
 800597e:	e173      	b.n	8005c68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	2b01      	cmp	r3, #1
 8005986:	f040 814f 	bne.w	8005c28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 8148 	beq.w	8005c28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8141 	beq.w	8005c28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059a6:	2300      	movs	r3, #0
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 80b6 	beq.w	8005b38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8145 	beq.w	8005c6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059ea:	429a      	cmp	r2, r3
 80059ec:	f080 813e 	bcs.w	8005c6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	f000 8088 	beq.w	8005b14 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a30:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1d9      	bne.n	8005a04 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a62:	f023 0301 	bic.w	r3, r3, #1
 8005a66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a74:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a78:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e1      	bne.n	8005a50 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3314      	adds	r3, #20
 8005a92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ab0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ab2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ab6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005abe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e3      	bne.n	8005a8c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae4:	f023 0310 	bic.w	r3, r3, #16
 8005ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005af6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005af8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005afc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e3      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fd f93c 	bl	8002d8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f8bf 	bl	8005cae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b30:	e09c      	b.n	8005c6c <HAL_UART_IRQHandler+0x518>
 8005b32:	bf00      	nop
 8005b34:	08005e65 	.word	0x08005e65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 808e 	beq.w	8005c70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8089 	beq.w	8005c70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	330c      	adds	r3, #12
 8005b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b82:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e3      	bne.n	8005b5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3314      	adds	r3, #20
 8005bb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bba:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e3      	bne.n	8005b96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0310 	bic.w	r3, r3, #16
 8005bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c00:	61fa      	str	r2, [r7, #28]
 8005c02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	69b9      	ldr	r1, [r7, #24]
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e3      	bne.n	8005bdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f844 	bl	8005cae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c26:	e023      	b.n	8005c70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d009      	beq.n	8005c48 <HAL_UART_IRQHandler+0x4f4>
 8005c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f923 	bl	8005e8c <UART_Transmit_IT>
    return;
 8005c46:	e014      	b.n	8005c72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00e      	beq.n	8005c72 <HAL_UART_IRQHandler+0x51e>
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f962 	bl	8005f2a <UART_EndTransmit_IT>
    return;
 8005c66:	e004      	b.n	8005c72 <HAL_UART_IRQHandler+0x51e>
    return;
 8005c68:	bf00      	nop
 8005c6a:	e002      	b.n	8005c72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c6c:	bf00      	nop
 8005c6e:	e000      	b.n	8005c72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c70:	bf00      	nop
  }
}
 8005c72:	37e8      	adds	r7, #232	@ 0xe8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr

08005c8a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr

08005cae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b090      	sub	sp, #64	@ 0x40
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd4:	e050      	b.n	8005d78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d04c      	beq.n	8005d78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ce4:	f7fc f906 	bl	8001ef4 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d241      	bcs.n	8005d78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	330c      	adds	r3, #12
 8005d12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d14:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d16:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e5      	bne.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3314      	adds	r3, #20
 8005d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	613b      	str	r3, [r7, #16]
   return(result);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f023 0301 	bic.w	r3, r3, #1
 8005d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3314      	adds	r3, #20
 8005d46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d48:	623a      	str	r2, [r7, #32]
 8005d4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	69f9      	ldr	r1, [r7, #28]
 8005d4e:	6a3a      	ldr	r2, [r7, #32]
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e5      	bne.n	8005d28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e00f      	b.n	8005d98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4013      	ands	r3, r2
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d09f      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3740      	adds	r7, #64	@ 0x40
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b095      	sub	sp, #84	@ 0x54
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e5      	bne.n	8005da8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f023 0301 	bic.w	r3, r3, #1
 8005df2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3314      	adds	r3, #20
 8005dfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e5      	bne.n	8005ddc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d119      	bne.n	8005e4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f023 0310 	bic.w	r3, r3, #16
 8005e2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	330c      	adds	r3, #12
 8005e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e38:	61ba      	str	r2, [r7, #24]
 8005e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6979      	ldr	r1, [r7, #20]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	613b      	str	r3, [r7, #16]
   return(result);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e5      	bne.n	8005e18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e5a:	bf00      	nop
 8005e5c:	3754      	adds	r7, #84	@ 0x54
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr

08005e64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7ff ff0c 	bl	8005c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b21      	cmp	r3, #33	@ 0x21
 8005e9e:	d13e      	bne.n	8005f1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea8:	d114      	bne.n	8005ed4 <UART_Transmit_IT+0x48>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d110      	bne.n	8005ed4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ec6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	1c9a      	adds	r2, r3, #2
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	621a      	str	r2, [r3, #32]
 8005ed2:	e008      	b.n	8005ee6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	1c59      	adds	r1, r3, #1
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6211      	str	r1, [r2, #32]
 8005ede:	781a      	ldrb	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10f      	bne.n	8005f1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e000      	b.n	8005f20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f1e:	2302      	movs	r3, #2
  }
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr

08005f2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff fe94 	bl	8005c78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b08c      	sub	sp, #48	@ 0x30
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b22      	cmp	r3, #34	@ 0x22
 8005f6c:	f040 80ae 	bne.w	80060cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f78:	d117      	bne.n	8005faa <UART_Receive_IT+0x50>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d113      	bne.n	8005faa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa2:	1c9a      	adds	r2, r3, #2
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fa8:	e026      	b.n	8005ff8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fbc:	d007      	beq.n	8005fce <UART_Receive_IT+0x74>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <UART_Receive_IT+0x82>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	e008      	b.n	8005fee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29b      	uxth	r3, r3
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	4619      	mov	r1, r3
 8006006:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006008:	2b00      	cmp	r3, #0
 800600a:	d15d      	bne.n	80060c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0220 	bic.w	r2, r2, #32
 800601a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800602a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	2b01      	cmp	r3, #1
 8006050:	d135      	bne.n	80060be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	330c      	adds	r3, #12
 800605e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	613b      	str	r3, [r7, #16]
   return(result);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 0310 	bic.w	r3, r3, #16
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006078:	623a      	str	r2, [r7, #32]
 800607a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	69f9      	ldr	r1, [r7, #28]
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	61bb      	str	r3, [r7, #24]
   return(result);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e5      	bne.n	8006058 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b10      	cmp	r3, #16
 8006098:	d10a      	bne.n	80060b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fdf9 	bl	8005cae <HAL_UARTEx_RxEventCallback>
 80060bc:	e002      	b.n	80060c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fde3 	bl	8005c8a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e002      	b.n	80060ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e000      	b.n	80060ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060cc:	2302      	movs	r3, #2
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3730      	adds	r7, #48	@ 0x30
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006112:	f023 030c 	bic.w	r3, r3, #12
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	430b      	orrs	r3, r1
 800611e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a2c      	ldr	r2, [pc, #176]	@ (80061ec <UART_SetConfig+0x114>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d103      	bne.n	8006148 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006140:	f7fe fa4a 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	e002      	b.n	800614e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006148:	f7fe fa32 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 800614c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009a      	lsls	r2, r3, #2
 8006158:	441a      	add	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	4a22      	ldr	r2, [pc, #136]	@ (80061f0 <UART_SetConfig+0x118>)
 8006166:	fba2 2303 	umull	r2, r3, r2, r3
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	0119      	lsls	r1, r3, #4
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009a      	lsls	r2, r3, #2
 8006178:	441a      	add	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	fbb2 f2f3 	udiv	r2, r2, r3
 8006184:	4b1a      	ldr	r3, [pc, #104]	@ (80061f0 <UART_SetConfig+0x118>)
 8006186:	fba3 0302 	umull	r0, r3, r3, r2
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	2064      	movs	r0, #100	@ 0x64
 800618e:	fb00 f303 	mul.w	r3, r0, r3
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	3332      	adds	r3, #50	@ 0x32
 8006198:	4a15      	ldr	r2, [pc, #84]	@ (80061f0 <UART_SetConfig+0x118>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061a4:	4419      	add	r1, r3
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009a      	lsls	r2, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80061bc:	4b0c      	ldr	r3, [pc, #48]	@ (80061f0 <UART_SetConfig+0x118>)
 80061be:	fba3 0302 	umull	r0, r3, r3, r2
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	2064      	movs	r0, #100	@ 0x64
 80061c6:	fb00 f303 	mul.w	r3, r0, r3
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	3332      	adds	r3, #50	@ 0x32
 80061d0:	4a07      	ldr	r2, [pc, #28]	@ (80061f0 <UART_SetConfig+0x118>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	440a      	add	r2, r1
 80061e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40013800 	.word	0x40013800
 80061f0:	51eb851f 	.word	0x51eb851f

080061f4 <siprintf>:
 80061f4:	b40e      	push	{r1, r2, r3}
 80061f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061fa:	b500      	push	{lr}
 80061fc:	b09c      	sub	sp, #112	@ 0x70
 80061fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8006200:	9002      	str	r0, [sp, #8]
 8006202:	9006      	str	r0, [sp, #24]
 8006204:	9107      	str	r1, [sp, #28]
 8006206:	9104      	str	r1, [sp, #16]
 8006208:	4808      	ldr	r0, [pc, #32]	@ (800622c <siprintf+0x38>)
 800620a:	4909      	ldr	r1, [pc, #36]	@ (8006230 <siprintf+0x3c>)
 800620c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006210:	9105      	str	r1, [sp, #20]
 8006212:	6800      	ldr	r0, [r0, #0]
 8006214:	a902      	add	r1, sp, #8
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	f000 f9f2 	bl	8006600 <_svfiprintf_r>
 800621c:	2200      	movs	r2, #0
 800621e:	9b02      	ldr	r3, [sp, #8]
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	b01c      	add	sp, #112	@ 0x70
 8006224:	f85d eb04 	ldr.w	lr, [sp], #4
 8006228:	b003      	add	sp, #12
 800622a:	4770      	bx	lr
 800622c:	20000074 	.word	0x20000074
 8006230:	ffff0208 	.word	0xffff0208

08006234 <memmove>:
 8006234:	4288      	cmp	r0, r1
 8006236:	b510      	push	{r4, lr}
 8006238:	eb01 0402 	add.w	r4, r1, r2
 800623c:	d902      	bls.n	8006244 <memmove+0x10>
 800623e:	4284      	cmp	r4, r0
 8006240:	4623      	mov	r3, r4
 8006242:	d807      	bhi.n	8006254 <memmove+0x20>
 8006244:	1e43      	subs	r3, r0, #1
 8006246:	42a1      	cmp	r1, r4
 8006248:	d008      	beq.n	800625c <memmove+0x28>
 800624a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800624e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006252:	e7f8      	b.n	8006246 <memmove+0x12>
 8006254:	4601      	mov	r1, r0
 8006256:	4402      	add	r2, r0
 8006258:	428a      	cmp	r2, r1
 800625a:	d100      	bne.n	800625e <memmove+0x2a>
 800625c:	bd10      	pop	{r4, pc}
 800625e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006266:	e7f7      	b.n	8006258 <memmove+0x24>

08006268 <memset>:
 8006268:	4603      	mov	r3, r0
 800626a:	4402      	add	r2, r0
 800626c:	4293      	cmp	r3, r2
 800626e:	d100      	bne.n	8006272 <memset+0xa>
 8006270:	4770      	bx	lr
 8006272:	f803 1b01 	strb.w	r1, [r3], #1
 8006276:	e7f9      	b.n	800626c <memset+0x4>

08006278 <strcat>:
 8006278:	4602      	mov	r2, r0
 800627a:	b510      	push	{r4, lr}
 800627c:	7814      	ldrb	r4, [r2, #0]
 800627e:	4613      	mov	r3, r2
 8006280:	3201      	adds	r2, #1
 8006282:	2c00      	cmp	r4, #0
 8006284:	d1fa      	bne.n	800627c <strcat+0x4>
 8006286:	3b01      	subs	r3, #1
 8006288:	f811 2b01 	ldrb.w	r2, [r1], #1
 800628c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006290:	2a00      	cmp	r2, #0
 8006292:	d1f9      	bne.n	8006288 <strcat+0x10>
 8006294:	bd10      	pop	{r4, pc}

08006296 <strncat>:
 8006296:	b530      	push	{r4, r5, lr}
 8006298:	4604      	mov	r4, r0
 800629a:	7825      	ldrb	r5, [r4, #0]
 800629c:	4623      	mov	r3, r4
 800629e:	3401      	adds	r4, #1
 80062a0:	2d00      	cmp	r5, #0
 80062a2:	d1fa      	bne.n	800629a <strncat+0x4>
 80062a4:	3a01      	subs	r2, #1
 80062a6:	d304      	bcc.n	80062b2 <strncat+0x1c>
 80062a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ac:	f803 4b01 	strb.w	r4, [r3], #1
 80062b0:	b904      	cbnz	r4, 80062b4 <strncat+0x1e>
 80062b2:	bd30      	pop	{r4, r5, pc}
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	d1f5      	bne.n	80062a4 <strncat+0xe>
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	e7f3      	b.n	80062a4 <strncat+0xe>

080062bc <strstr>:
 80062bc:	780a      	ldrb	r2, [r1, #0]
 80062be:	b570      	push	{r4, r5, r6, lr}
 80062c0:	b96a      	cbnz	r2, 80062de <strstr+0x22>
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d109      	bne.n	80062dc <strstr+0x20>
 80062c8:	460c      	mov	r4, r1
 80062ca:	4605      	mov	r5, r0
 80062cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0f6      	beq.n	80062c2 <strstr+0x6>
 80062d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80062d8:	429e      	cmp	r6, r3
 80062da:	d0f7      	beq.n	80062cc <strstr+0x10>
 80062dc:	3001      	adds	r0, #1
 80062de:	7803      	ldrb	r3, [r0, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1ef      	bne.n	80062c4 <strstr+0x8>
 80062e4:	4618      	mov	r0, r3
 80062e6:	e7ec      	b.n	80062c2 <strstr+0x6>

080062e8 <__errno>:
 80062e8:	4b01      	ldr	r3, [pc, #4]	@ (80062f0 <__errno+0x8>)
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20000074 	.word	0x20000074

080062f4 <__libc_init_array>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	2600      	movs	r6, #0
 80062f8:	4d0c      	ldr	r5, [pc, #48]	@ (800632c <__libc_init_array+0x38>)
 80062fa:	4c0d      	ldr	r4, [pc, #52]	@ (8006330 <__libc_init_array+0x3c>)
 80062fc:	1b64      	subs	r4, r4, r5
 80062fe:	10a4      	asrs	r4, r4, #2
 8006300:	42a6      	cmp	r6, r4
 8006302:	d109      	bne.n	8006318 <__libc_init_array+0x24>
 8006304:	f000 fc5e 	bl	8006bc4 <_init>
 8006308:	2600      	movs	r6, #0
 800630a:	4d0a      	ldr	r5, [pc, #40]	@ (8006334 <__libc_init_array+0x40>)
 800630c:	4c0a      	ldr	r4, [pc, #40]	@ (8006338 <__libc_init_array+0x44>)
 800630e:	1b64      	subs	r4, r4, r5
 8006310:	10a4      	asrs	r4, r4, #2
 8006312:	42a6      	cmp	r6, r4
 8006314:	d105      	bne.n	8006322 <__libc_init_array+0x2e>
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	f855 3b04 	ldr.w	r3, [r5], #4
 800631c:	4798      	blx	r3
 800631e:	3601      	adds	r6, #1
 8006320:	e7ee      	b.n	8006300 <__libc_init_array+0xc>
 8006322:	f855 3b04 	ldr.w	r3, [r5], #4
 8006326:	4798      	blx	r3
 8006328:	3601      	adds	r6, #1
 800632a:	e7f2      	b.n	8006312 <__libc_init_array+0x1e>
 800632c:	08009b08 	.word	0x08009b08
 8006330:	08009b08 	.word	0x08009b08
 8006334:	08009b08 	.word	0x08009b08
 8006338:	08009b0c 	.word	0x08009b0c

0800633c <__retarget_lock_acquire_recursive>:
 800633c:	4770      	bx	lr

0800633e <__retarget_lock_release_recursive>:
 800633e:	4770      	bx	lr

08006340 <memcpy>:
 8006340:	440a      	add	r2, r1
 8006342:	4291      	cmp	r1, r2
 8006344:	f100 33ff 	add.w	r3, r0, #4294967295
 8006348:	d100      	bne.n	800634c <memcpy+0xc>
 800634a:	4770      	bx	lr
 800634c:	b510      	push	{r4, lr}
 800634e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006352:	4291      	cmp	r1, r2
 8006354:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006358:	d1f9      	bne.n	800634e <memcpy+0xe>
 800635a:	bd10      	pop	{r4, pc}

0800635c <_free_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4605      	mov	r5, r0
 8006360:	2900      	cmp	r1, #0
 8006362:	d040      	beq.n	80063e6 <_free_r+0x8a>
 8006364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006368:	1f0c      	subs	r4, r1, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfb8      	it	lt
 800636e:	18e4      	addlt	r4, r4, r3
 8006370:	f000 f8de 	bl	8006530 <__malloc_lock>
 8006374:	4a1c      	ldr	r2, [pc, #112]	@ (80063e8 <_free_r+0x8c>)
 8006376:	6813      	ldr	r3, [r2, #0]
 8006378:	b933      	cbnz	r3, 8006388 <_free_r+0x2c>
 800637a:	6063      	str	r3, [r4, #4]
 800637c:	6014      	str	r4, [r2, #0]
 800637e:	4628      	mov	r0, r5
 8006380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006384:	f000 b8da 	b.w	800653c <__malloc_unlock>
 8006388:	42a3      	cmp	r3, r4
 800638a:	d908      	bls.n	800639e <_free_r+0x42>
 800638c:	6820      	ldr	r0, [r4, #0]
 800638e:	1821      	adds	r1, r4, r0
 8006390:	428b      	cmp	r3, r1
 8006392:	bf01      	itttt	eq
 8006394:	6819      	ldreq	r1, [r3, #0]
 8006396:	685b      	ldreq	r3, [r3, #4]
 8006398:	1809      	addeq	r1, r1, r0
 800639a:	6021      	streq	r1, [r4, #0]
 800639c:	e7ed      	b.n	800637a <_free_r+0x1e>
 800639e:	461a      	mov	r2, r3
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	b10b      	cbz	r3, 80063a8 <_free_r+0x4c>
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	d9fa      	bls.n	800639e <_free_r+0x42>
 80063a8:	6811      	ldr	r1, [r2, #0]
 80063aa:	1850      	adds	r0, r2, r1
 80063ac:	42a0      	cmp	r0, r4
 80063ae:	d10b      	bne.n	80063c8 <_free_r+0x6c>
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	4401      	add	r1, r0
 80063b4:	1850      	adds	r0, r2, r1
 80063b6:	4283      	cmp	r3, r0
 80063b8:	6011      	str	r1, [r2, #0]
 80063ba:	d1e0      	bne.n	800637e <_free_r+0x22>
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4408      	add	r0, r1
 80063c2:	6010      	str	r0, [r2, #0]
 80063c4:	6053      	str	r3, [r2, #4]
 80063c6:	e7da      	b.n	800637e <_free_r+0x22>
 80063c8:	d902      	bls.n	80063d0 <_free_r+0x74>
 80063ca:	230c      	movs	r3, #12
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	e7d6      	b.n	800637e <_free_r+0x22>
 80063d0:	6820      	ldr	r0, [r4, #0]
 80063d2:	1821      	adds	r1, r4, r0
 80063d4:	428b      	cmp	r3, r1
 80063d6:	bf01      	itttt	eq
 80063d8:	6819      	ldreq	r1, [r3, #0]
 80063da:	685b      	ldreq	r3, [r3, #4]
 80063dc:	1809      	addeq	r1, r1, r0
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	6063      	str	r3, [r4, #4]
 80063e2:	6054      	str	r4, [r2, #4]
 80063e4:	e7cb      	b.n	800637e <_free_r+0x22>
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	200009a8 	.word	0x200009a8

080063ec <sbrk_aligned>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	4e0f      	ldr	r6, [pc, #60]	@ (800642c <sbrk_aligned+0x40>)
 80063f0:	460c      	mov	r4, r1
 80063f2:	6831      	ldr	r1, [r6, #0]
 80063f4:	4605      	mov	r5, r0
 80063f6:	b911      	cbnz	r1, 80063fe <sbrk_aligned+0x12>
 80063f8:	f000 fb90 	bl	8006b1c <_sbrk_r>
 80063fc:	6030      	str	r0, [r6, #0]
 80063fe:	4621      	mov	r1, r4
 8006400:	4628      	mov	r0, r5
 8006402:	f000 fb8b 	bl	8006b1c <_sbrk_r>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d103      	bne.n	8006412 <sbrk_aligned+0x26>
 800640a:	f04f 34ff 	mov.w	r4, #4294967295
 800640e:	4620      	mov	r0, r4
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	1cc4      	adds	r4, r0, #3
 8006414:	f024 0403 	bic.w	r4, r4, #3
 8006418:	42a0      	cmp	r0, r4
 800641a:	d0f8      	beq.n	800640e <sbrk_aligned+0x22>
 800641c:	1a21      	subs	r1, r4, r0
 800641e:	4628      	mov	r0, r5
 8006420:	f000 fb7c 	bl	8006b1c <_sbrk_r>
 8006424:	3001      	adds	r0, #1
 8006426:	d1f2      	bne.n	800640e <sbrk_aligned+0x22>
 8006428:	e7ef      	b.n	800640a <sbrk_aligned+0x1e>
 800642a:	bf00      	nop
 800642c:	200009a4 	.word	0x200009a4

08006430 <_malloc_r>:
 8006430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006434:	1ccd      	adds	r5, r1, #3
 8006436:	f025 0503 	bic.w	r5, r5, #3
 800643a:	3508      	adds	r5, #8
 800643c:	2d0c      	cmp	r5, #12
 800643e:	bf38      	it	cc
 8006440:	250c      	movcc	r5, #12
 8006442:	2d00      	cmp	r5, #0
 8006444:	4606      	mov	r6, r0
 8006446:	db01      	blt.n	800644c <_malloc_r+0x1c>
 8006448:	42a9      	cmp	r1, r5
 800644a:	d904      	bls.n	8006456 <_malloc_r+0x26>
 800644c:	230c      	movs	r3, #12
 800644e:	6033      	str	r3, [r6, #0]
 8006450:	2000      	movs	r0, #0
 8006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800652c <_malloc_r+0xfc>
 800645a:	f000 f869 	bl	8006530 <__malloc_lock>
 800645e:	f8d8 3000 	ldr.w	r3, [r8]
 8006462:	461c      	mov	r4, r3
 8006464:	bb44      	cbnz	r4, 80064b8 <_malloc_r+0x88>
 8006466:	4629      	mov	r1, r5
 8006468:	4630      	mov	r0, r6
 800646a:	f7ff ffbf 	bl	80063ec <sbrk_aligned>
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	4604      	mov	r4, r0
 8006472:	d158      	bne.n	8006526 <_malloc_r+0xf6>
 8006474:	f8d8 4000 	ldr.w	r4, [r8]
 8006478:	4627      	mov	r7, r4
 800647a:	2f00      	cmp	r7, #0
 800647c:	d143      	bne.n	8006506 <_malloc_r+0xd6>
 800647e:	2c00      	cmp	r4, #0
 8006480:	d04b      	beq.n	800651a <_malloc_r+0xea>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	4639      	mov	r1, r7
 8006486:	4630      	mov	r0, r6
 8006488:	eb04 0903 	add.w	r9, r4, r3
 800648c:	f000 fb46 	bl	8006b1c <_sbrk_r>
 8006490:	4581      	cmp	r9, r0
 8006492:	d142      	bne.n	800651a <_malloc_r+0xea>
 8006494:	6821      	ldr	r1, [r4, #0]
 8006496:	4630      	mov	r0, r6
 8006498:	1a6d      	subs	r5, r5, r1
 800649a:	4629      	mov	r1, r5
 800649c:	f7ff ffa6 	bl	80063ec <sbrk_aligned>
 80064a0:	3001      	adds	r0, #1
 80064a2:	d03a      	beq.n	800651a <_malloc_r+0xea>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	442b      	add	r3, r5
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	f8d8 3000 	ldr.w	r3, [r8]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	bb62      	cbnz	r2, 800650c <_malloc_r+0xdc>
 80064b2:	f8c8 7000 	str.w	r7, [r8]
 80064b6:	e00f      	b.n	80064d8 <_malloc_r+0xa8>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	1b52      	subs	r2, r2, r5
 80064bc:	d420      	bmi.n	8006500 <_malloc_r+0xd0>
 80064be:	2a0b      	cmp	r2, #11
 80064c0:	d917      	bls.n	80064f2 <_malloc_r+0xc2>
 80064c2:	1961      	adds	r1, r4, r5
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	6025      	str	r5, [r4, #0]
 80064c8:	bf18      	it	ne
 80064ca:	6059      	strne	r1, [r3, #4]
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	bf08      	it	eq
 80064d0:	f8c8 1000 	streq.w	r1, [r8]
 80064d4:	5162      	str	r2, [r4, r5]
 80064d6:	604b      	str	r3, [r1, #4]
 80064d8:	4630      	mov	r0, r6
 80064da:	f000 f82f 	bl	800653c <__malloc_unlock>
 80064de:	f104 000b 	add.w	r0, r4, #11
 80064e2:	1d23      	adds	r3, r4, #4
 80064e4:	f020 0007 	bic.w	r0, r0, #7
 80064e8:	1ac2      	subs	r2, r0, r3
 80064ea:	bf1c      	itt	ne
 80064ec:	1a1b      	subne	r3, r3, r0
 80064ee:	50a3      	strne	r3, [r4, r2]
 80064f0:	e7af      	b.n	8006452 <_malloc_r+0x22>
 80064f2:	6862      	ldr	r2, [r4, #4]
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	bf0c      	ite	eq
 80064f8:	f8c8 2000 	streq.w	r2, [r8]
 80064fc:	605a      	strne	r2, [r3, #4]
 80064fe:	e7eb      	b.n	80064d8 <_malloc_r+0xa8>
 8006500:	4623      	mov	r3, r4
 8006502:	6864      	ldr	r4, [r4, #4]
 8006504:	e7ae      	b.n	8006464 <_malloc_r+0x34>
 8006506:	463c      	mov	r4, r7
 8006508:	687f      	ldr	r7, [r7, #4]
 800650a:	e7b6      	b.n	800647a <_malloc_r+0x4a>
 800650c:	461a      	mov	r2, r3
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	42a3      	cmp	r3, r4
 8006512:	d1fb      	bne.n	800650c <_malloc_r+0xdc>
 8006514:	2300      	movs	r3, #0
 8006516:	6053      	str	r3, [r2, #4]
 8006518:	e7de      	b.n	80064d8 <_malloc_r+0xa8>
 800651a:	230c      	movs	r3, #12
 800651c:	4630      	mov	r0, r6
 800651e:	6033      	str	r3, [r6, #0]
 8006520:	f000 f80c 	bl	800653c <__malloc_unlock>
 8006524:	e794      	b.n	8006450 <_malloc_r+0x20>
 8006526:	6005      	str	r5, [r0, #0]
 8006528:	e7d6      	b.n	80064d8 <_malloc_r+0xa8>
 800652a:	bf00      	nop
 800652c:	200009a8 	.word	0x200009a8

08006530 <__malloc_lock>:
 8006530:	4801      	ldr	r0, [pc, #4]	@ (8006538 <__malloc_lock+0x8>)
 8006532:	f7ff bf03 	b.w	800633c <__retarget_lock_acquire_recursive>
 8006536:	bf00      	nop
 8006538:	200009a0 	.word	0x200009a0

0800653c <__malloc_unlock>:
 800653c:	4801      	ldr	r0, [pc, #4]	@ (8006544 <__malloc_unlock+0x8>)
 800653e:	f7ff befe 	b.w	800633e <__retarget_lock_release_recursive>
 8006542:	bf00      	nop
 8006544:	200009a0 	.word	0x200009a0

08006548 <__ssputs_r>:
 8006548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	461f      	mov	r7, r3
 800654e:	688e      	ldr	r6, [r1, #8]
 8006550:	4682      	mov	sl, r0
 8006552:	42be      	cmp	r6, r7
 8006554:	460c      	mov	r4, r1
 8006556:	4690      	mov	r8, r2
 8006558:	680b      	ldr	r3, [r1, #0]
 800655a:	d82d      	bhi.n	80065b8 <__ssputs_r+0x70>
 800655c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006560:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006564:	d026      	beq.n	80065b4 <__ssputs_r+0x6c>
 8006566:	6965      	ldr	r5, [r4, #20]
 8006568:	6909      	ldr	r1, [r1, #16]
 800656a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800656e:	eba3 0901 	sub.w	r9, r3, r1
 8006572:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006576:	1c7b      	adds	r3, r7, #1
 8006578:	444b      	add	r3, r9
 800657a:	106d      	asrs	r5, r5, #1
 800657c:	429d      	cmp	r5, r3
 800657e:	bf38      	it	cc
 8006580:	461d      	movcc	r5, r3
 8006582:	0553      	lsls	r3, r2, #21
 8006584:	d527      	bpl.n	80065d6 <__ssputs_r+0x8e>
 8006586:	4629      	mov	r1, r5
 8006588:	f7ff ff52 	bl	8006430 <_malloc_r>
 800658c:	4606      	mov	r6, r0
 800658e:	b360      	cbz	r0, 80065ea <__ssputs_r+0xa2>
 8006590:	464a      	mov	r2, r9
 8006592:	6921      	ldr	r1, [r4, #16]
 8006594:	f7ff fed4 	bl	8006340 <memcpy>
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800659e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a2:	81a3      	strh	r3, [r4, #12]
 80065a4:	6126      	str	r6, [r4, #16]
 80065a6:	444e      	add	r6, r9
 80065a8:	6026      	str	r6, [r4, #0]
 80065aa:	463e      	mov	r6, r7
 80065ac:	6165      	str	r5, [r4, #20]
 80065ae:	eba5 0509 	sub.w	r5, r5, r9
 80065b2:	60a5      	str	r5, [r4, #8]
 80065b4:	42be      	cmp	r6, r7
 80065b6:	d900      	bls.n	80065ba <__ssputs_r+0x72>
 80065b8:	463e      	mov	r6, r7
 80065ba:	4632      	mov	r2, r6
 80065bc:	4641      	mov	r1, r8
 80065be:	6820      	ldr	r0, [r4, #0]
 80065c0:	f7ff fe38 	bl	8006234 <memmove>
 80065c4:	2000      	movs	r0, #0
 80065c6:	68a3      	ldr	r3, [r4, #8]
 80065c8:	1b9b      	subs	r3, r3, r6
 80065ca:	60a3      	str	r3, [r4, #8]
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	4433      	add	r3, r6
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d6:	462a      	mov	r2, r5
 80065d8:	f000 fabe 	bl	8006b58 <_realloc_r>
 80065dc:	4606      	mov	r6, r0
 80065de:	2800      	cmp	r0, #0
 80065e0:	d1e0      	bne.n	80065a4 <__ssputs_r+0x5c>
 80065e2:	4650      	mov	r0, sl
 80065e4:	6921      	ldr	r1, [r4, #16]
 80065e6:	f7ff feb9 	bl	800635c <_free_r>
 80065ea:	230c      	movs	r3, #12
 80065ec:	f8ca 3000 	str.w	r3, [sl]
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	f04f 30ff 	mov.w	r0, #4294967295
 80065f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	e7e9      	b.n	80065d2 <__ssputs_r+0x8a>
	...

08006600 <_svfiprintf_r>:
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	4698      	mov	r8, r3
 8006606:	898b      	ldrh	r3, [r1, #12]
 8006608:	4607      	mov	r7, r0
 800660a:	061b      	lsls	r3, r3, #24
 800660c:	460d      	mov	r5, r1
 800660e:	4614      	mov	r4, r2
 8006610:	b09d      	sub	sp, #116	@ 0x74
 8006612:	d510      	bpl.n	8006636 <_svfiprintf_r+0x36>
 8006614:	690b      	ldr	r3, [r1, #16]
 8006616:	b973      	cbnz	r3, 8006636 <_svfiprintf_r+0x36>
 8006618:	2140      	movs	r1, #64	@ 0x40
 800661a:	f7ff ff09 	bl	8006430 <_malloc_r>
 800661e:	6028      	str	r0, [r5, #0]
 8006620:	6128      	str	r0, [r5, #16]
 8006622:	b930      	cbnz	r0, 8006632 <_svfiprintf_r+0x32>
 8006624:	230c      	movs	r3, #12
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	b01d      	add	sp, #116	@ 0x74
 800662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006632:	2340      	movs	r3, #64	@ 0x40
 8006634:	616b      	str	r3, [r5, #20]
 8006636:	2300      	movs	r3, #0
 8006638:	9309      	str	r3, [sp, #36]	@ 0x24
 800663a:	2320      	movs	r3, #32
 800663c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006640:	2330      	movs	r3, #48	@ 0x30
 8006642:	f04f 0901 	mov.w	r9, #1
 8006646:	f8cd 800c 	str.w	r8, [sp, #12]
 800664a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80067e4 <_svfiprintf_r+0x1e4>
 800664e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006652:	4623      	mov	r3, r4
 8006654:	469a      	mov	sl, r3
 8006656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800665a:	b10a      	cbz	r2, 8006660 <_svfiprintf_r+0x60>
 800665c:	2a25      	cmp	r2, #37	@ 0x25
 800665e:	d1f9      	bne.n	8006654 <_svfiprintf_r+0x54>
 8006660:	ebba 0b04 	subs.w	fp, sl, r4
 8006664:	d00b      	beq.n	800667e <_svfiprintf_r+0x7e>
 8006666:	465b      	mov	r3, fp
 8006668:	4622      	mov	r2, r4
 800666a:	4629      	mov	r1, r5
 800666c:	4638      	mov	r0, r7
 800666e:	f7ff ff6b 	bl	8006548 <__ssputs_r>
 8006672:	3001      	adds	r0, #1
 8006674:	f000 80a7 	beq.w	80067c6 <_svfiprintf_r+0x1c6>
 8006678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800667a:	445a      	add	r2, fp
 800667c:	9209      	str	r2, [sp, #36]	@ 0x24
 800667e:	f89a 3000 	ldrb.w	r3, [sl]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 809f 	beq.w	80067c6 <_svfiprintf_r+0x1c6>
 8006688:	2300      	movs	r3, #0
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006692:	f10a 0a01 	add.w	sl, sl, #1
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	9307      	str	r3, [sp, #28]
 800669a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800669e:	931a      	str	r3, [sp, #104]	@ 0x68
 80066a0:	4654      	mov	r4, sl
 80066a2:	2205      	movs	r2, #5
 80066a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a8:	484e      	ldr	r0, [pc, #312]	@ (80067e4 <_svfiprintf_r+0x1e4>)
 80066aa:	f000 fa47 	bl	8006b3c <memchr>
 80066ae:	9a04      	ldr	r2, [sp, #16]
 80066b0:	b9d8      	cbnz	r0, 80066ea <_svfiprintf_r+0xea>
 80066b2:	06d0      	lsls	r0, r2, #27
 80066b4:	bf44      	itt	mi
 80066b6:	2320      	movmi	r3, #32
 80066b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066bc:	0711      	lsls	r1, r2, #28
 80066be:	bf44      	itt	mi
 80066c0:	232b      	movmi	r3, #43	@ 0x2b
 80066c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066c6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80066cc:	d015      	beq.n	80066fa <_svfiprintf_r+0xfa>
 80066ce:	4654      	mov	r4, sl
 80066d0:	2000      	movs	r0, #0
 80066d2:	f04f 0c0a 	mov.w	ip, #10
 80066d6:	9a07      	ldr	r2, [sp, #28]
 80066d8:	4621      	mov	r1, r4
 80066da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066de:	3b30      	subs	r3, #48	@ 0x30
 80066e0:	2b09      	cmp	r3, #9
 80066e2:	d94b      	bls.n	800677c <_svfiprintf_r+0x17c>
 80066e4:	b1b0      	cbz	r0, 8006714 <_svfiprintf_r+0x114>
 80066e6:	9207      	str	r2, [sp, #28]
 80066e8:	e014      	b.n	8006714 <_svfiprintf_r+0x114>
 80066ea:	eba0 0308 	sub.w	r3, r0, r8
 80066ee:	fa09 f303 	lsl.w	r3, r9, r3
 80066f2:	4313      	orrs	r3, r2
 80066f4:	46a2      	mov	sl, r4
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	e7d2      	b.n	80066a0 <_svfiprintf_r+0xa0>
 80066fa:	9b03      	ldr	r3, [sp, #12]
 80066fc:	1d19      	adds	r1, r3, #4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	9103      	str	r1, [sp, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	bfbb      	ittet	lt
 8006706:	425b      	neglt	r3, r3
 8006708:	f042 0202 	orrlt.w	r2, r2, #2
 800670c:	9307      	strge	r3, [sp, #28]
 800670e:	9307      	strlt	r3, [sp, #28]
 8006710:	bfb8      	it	lt
 8006712:	9204      	strlt	r2, [sp, #16]
 8006714:	7823      	ldrb	r3, [r4, #0]
 8006716:	2b2e      	cmp	r3, #46	@ 0x2e
 8006718:	d10a      	bne.n	8006730 <_svfiprintf_r+0x130>
 800671a:	7863      	ldrb	r3, [r4, #1]
 800671c:	2b2a      	cmp	r3, #42	@ 0x2a
 800671e:	d132      	bne.n	8006786 <_svfiprintf_r+0x186>
 8006720:	9b03      	ldr	r3, [sp, #12]
 8006722:	3402      	adds	r4, #2
 8006724:	1d1a      	adds	r2, r3, #4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	9203      	str	r2, [sp, #12]
 800672a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800672e:	9305      	str	r3, [sp, #20]
 8006730:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80067e8 <_svfiprintf_r+0x1e8>
 8006734:	2203      	movs	r2, #3
 8006736:	4650      	mov	r0, sl
 8006738:	7821      	ldrb	r1, [r4, #0]
 800673a:	f000 f9ff 	bl	8006b3c <memchr>
 800673e:	b138      	cbz	r0, 8006750 <_svfiprintf_r+0x150>
 8006740:	2240      	movs	r2, #64	@ 0x40
 8006742:	9b04      	ldr	r3, [sp, #16]
 8006744:	eba0 000a 	sub.w	r0, r0, sl
 8006748:	4082      	lsls	r2, r0
 800674a:	4313      	orrs	r3, r2
 800674c:	3401      	adds	r4, #1
 800674e:	9304      	str	r3, [sp, #16]
 8006750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006754:	2206      	movs	r2, #6
 8006756:	4825      	ldr	r0, [pc, #148]	@ (80067ec <_svfiprintf_r+0x1ec>)
 8006758:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800675c:	f000 f9ee 	bl	8006b3c <memchr>
 8006760:	2800      	cmp	r0, #0
 8006762:	d036      	beq.n	80067d2 <_svfiprintf_r+0x1d2>
 8006764:	4b22      	ldr	r3, [pc, #136]	@ (80067f0 <_svfiprintf_r+0x1f0>)
 8006766:	bb1b      	cbnz	r3, 80067b0 <_svfiprintf_r+0x1b0>
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	3307      	adds	r3, #7
 800676c:	f023 0307 	bic.w	r3, r3, #7
 8006770:	3308      	adds	r3, #8
 8006772:	9303      	str	r3, [sp, #12]
 8006774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006776:	4433      	add	r3, r6
 8006778:	9309      	str	r3, [sp, #36]	@ 0x24
 800677a:	e76a      	b.n	8006652 <_svfiprintf_r+0x52>
 800677c:	460c      	mov	r4, r1
 800677e:	2001      	movs	r0, #1
 8006780:	fb0c 3202 	mla	r2, ip, r2, r3
 8006784:	e7a8      	b.n	80066d8 <_svfiprintf_r+0xd8>
 8006786:	2300      	movs	r3, #0
 8006788:	f04f 0c0a 	mov.w	ip, #10
 800678c:	4619      	mov	r1, r3
 800678e:	3401      	adds	r4, #1
 8006790:	9305      	str	r3, [sp, #20]
 8006792:	4620      	mov	r0, r4
 8006794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006798:	3a30      	subs	r2, #48	@ 0x30
 800679a:	2a09      	cmp	r2, #9
 800679c:	d903      	bls.n	80067a6 <_svfiprintf_r+0x1a6>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0c6      	beq.n	8006730 <_svfiprintf_r+0x130>
 80067a2:	9105      	str	r1, [sp, #20]
 80067a4:	e7c4      	b.n	8006730 <_svfiprintf_r+0x130>
 80067a6:	4604      	mov	r4, r0
 80067a8:	2301      	movs	r3, #1
 80067aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80067ae:	e7f0      	b.n	8006792 <_svfiprintf_r+0x192>
 80067b0:	ab03      	add	r3, sp, #12
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	462a      	mov	r2, r5
 80067b6:	4638      	mov	r0, r7
 80067b8:	4b0e      	ldr	r3, [pc, #56]	@ (80067f4 <_svfiprintf_r+0x1f4>)
 80067ba:	a904      	add	r1, sp, #16
 80067bc:	f3af 8000 	nop.w
 80067c0:	1c42      	adds	r2, r0, #1
 80067c2:	4606      	mov	r6, r0
 80067c4:	d1d6      	bne.n	8006774 <_svfiprintf_r+0x174>
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	065b      	lsls	r3, r3, #25
 80067ca:	f53f af2d 	bmi.w	8006628 <_svfiprintf_r+0x28>
 80067ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067d0:	e72c      	b.n	800662c <_svfiprintf_r+0x2c>
 80067d2:	ab03      	add	r3, sp, #12
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	462a      	mov	r2, r5
 80067d8:	4638      	mov	r0, r7
 80067da:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <_svfiprintf_r+0x1f4>)
 80067dc:	a904      	add	r1, sp, #16
 80067de:	f000 f87d 	bl	80068dc <_printf_i>
 80067e2:	e7ed      	b.n	80067c0 <_svfiprintf_r+0x1c0>
 80067e4:	08009aca 	.word	0x08009aca
 80067e8:	08009ad0 	.word	0x08009ad0
 80067ec:	08009ad4 	.word	0x08009ad4
 80067f0:	00000000 	.word	0x00000000
 80067f4:	08006549 	.word	0x08006549

080067f8 <_printf_common>:
 80067f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	4616      	mov	r6, r2
 80067fe:	4698      	mov	r8, r3
 8006800:	688a      	ldr	r2, [r1, #8]
 8006802:	690b      	ldr	r3, [r1, #16]
 8006804:	4607      	mov	r7, r0
 8006806:	4293      	cmp	r3, r2
 8006808:	bfb8      	it	lt
 800680a:	4613      	movlt	r3, r2
 800680c:	6033      	str	r3, [r6, #0]
 800680e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006812:	460c      	mov	r4, r1
 8006814:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006818:	b10a      	cbz	r2, 800681e <_printf_common+0x26>
 800681a:	3301      	adds	r3, #1
 800681c:	6033      	str	r3, [r6, #0]
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	0699      	lsls	r1, r3, #26
 8006822:	bf42      	ittt	mi
 8006824:	6833      	ldrmi	r3, [r6, #0]
 8006826:	3302      	addmi	r3, #2
 8006828:	6033      	strmi	r3, [r6, #0]
 800682a:	6825      	ldr	r5, [r4, #0]
 800682c:	f015 0506 	ands.w	r5, r5, #6
 8006830:	d106      	bne.n	8006840 <_printf_common+0x48>
 8006832:	f104 0a19 	add.w	sl, r4, #25
 8006836:	68e3      	ldr	r3, [r4, #12]
 8006838:	6832      	ldr	r2, [r6, #0]
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	42ab      	cmp	r3, r5
 800683e:	dc2b      	bgt.n	8006898 <_printf_common+0xa0>
 8006840:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006844:	6822      	ldr	r2, [r4, #0]
 8006846:	3b00      	subs	r3, #0
 8006848:	bf18      	it	ne
 800684a:	2301      	movne	r3, #1
 800684c:	0692      	lsls	r2, r2, #26
 800684e:	d430      	bmi.n	80068b2 <_printf_common+0xba>
 8006850:	4641      	mov	r1, r8
 8006852:	4638      	mov	r0, r7
 8006854:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006858:	47c8      	blx	r9
 800685a:	3001      	adds	r0, #1
 800685c:	d023      	beq.n	80068a6 <_printf_common+0xae>
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	6922      	ldr	r2, [r4, #16]
 8006862:	f003 0306 	and.w	r3, r3, #6
 8006866:	2b04      	cmp	r3, #4
 8006868:	bf14      	ite	ne
 800686a:	2500      	movne	r5, #0
 800686c:	6833      	ldreq	r3, [r6, #0]
 800686e:	f04f 0600 	mov.w	r6, #0
 8006872:	bf08      	it	eq
 8006874:	68e5      	ldreq	r5, [r4, #12]
 8006876:	f104 041a 	add.w	r4, r4, #26
 800687a:	bf08      	it	eq
 800687c:	1aed      	subeq	r5, r5, r3
 800687e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006882:	bf08      	it	eq
 8006884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006888:	4293      	cmp	r3, r2
 800688a:	bfc4      	itt	gt
 800688c:	1a9b      	subgt	r3, r3, r2
 800688e:	18ed      	addgt	r5, r5, r3
 8006890:	42b5      	cmp	r5, r6
 8006892:	d11a      	bne.n	80068ca <_printf_common+0xd2>
 8006894:	2000      	movs	r0, #0
 8006896:	e008      	b.n	80068aa <_printf_common+0xb2>
 8006898:	2301      	movs	r3, #1
 800689a:	4652      	mov	r2, sl
 800689c:	4641      	mov	r1, r8
 800689e:	4638      	mov	r0, r7
 80068a0:	47c8      	blx	r9
 80068a2:	3001      	adds	r0, #1
 80068a4:	d103      	bne.n	80068ae <_printf_common+0xb6>
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295
 80068aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ae:	3501      	adds	r5, #1
 80068b0:	e7c1      	b.n	8006836 <_printf_common+0x3e>
 80068b2:	2030      	movs	r0, #48	@ 0x30
 80068b4:	18e1      	adds	r1, r4, r3
 80068b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068c0:	4422      	add	r2, r4
 80068c2:	3302      	adds	r3, #2
 80068c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068c8:	e7c2      	b.n	8006850 <_printf_common+0x58>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4622      	mov	r2, r4
 80068ce:	4641      	mov	r1, r8
 80068d0:	4638      	mov	r0, r7
 80068d2:	47c8      	blx	r9
 80068d4:	3001      	adds	r0, #1
 80068d6:	d0e6      	beq.n	80068a6 <_printf_common+0xae>
 80068d8:	3601      	adds	r6, #1
 80068da:	e7d9      	b.n	8006890 <_printf_common+0x98>

080068dc <_printf_i>:
 80068dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	7e0f      	ldrb	r7, [r1, #24]
 80068e2:	4691      	mov	r9, r2
 80068e4:	2f78      	cmp	r7, #120	@ 0x78
 80068e6:	4680      	mov	r8, r0
 80068e8:	460c      	mov	r4, r1
 80068ea:	469a      	mov	sl, r3
 80068ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068f2:	d807      	bhi.n	8006904 <_printf_i+0x28>
 80068f4:	2f62      	cmp	r7, #98	@ 0x62
 80068f6:	d80a      	bhi.n	800690e <_printf_i+0x32>
 80068f8:	2f00      	cmp	r7, #0
 80068fa:	f000 80d3 	beq.w	8006aa4 <_printf_i+0x1c8>
 80068fe:	2f58      	cmp	r7, #88	@ 0x58
 8006900:	f000 80ba 	beq.w	8006a78 <_printf_i+0x19c>
 8006904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800690c:	e03a      	b.n	8006984 <_printf_i+0xa8>
 800690e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006912:	2b15      	cmp	r3, #21
 8006914:	d8f6      	bhi.n	8006904 <_printf_i+0x28>
 8006916:	a101      	add	r1, pc, #4	@ (adr r1, 800691c <_printf_i+0x40>)
 8006918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800691c:	08006975 	.word	0x08006975
 8006920:	08006989 	.word	0x08006989
 8006924:	08006905 	.word	0x08006905
 8006928:	08006905 	.word	0x08006905
 800692c:	08006905 	.word	0x08006905
 8006930:	08006905 	.word	0x08006905
 8006934:	08006989 	.word	0x08006989
 8006938:	08006905 	.word	0x08006905
 800693c:	08006905 	.word	0x08006905
 8006940:	08006905 	.word	0x08006905
 8006944:	08006905 	.word	0x08006905
 8006948:	08006a8b 	.word	0x08006a8b
 800694c:	080069b3 	.word	0x080069b3
 8006950:	08006a45 	.word	0x08006a45
 8006954:	08006905 	.word	0x08006905
 8006958:	08006905 	.word	0x08006905
 800695c:	08006aad 	.word	0x08006aad
 8006960:	08006905 	.word	0x08006905
 8006964:	080069b3 	.word	0x080069b3
 8006968:	08006905 	.word	0x08006905
 800696c:	08006905 	.word	0x08006905
 8006970:	08006a4d 	.word	0x08006a4d
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6032      	str	r2, [r6, #0]
 800697c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006984:	2301      	movs	r3, #1
 8006986:	e09e      	b.n	8006ac6 <_printf_i+0x1ea>
 8006988:	6833      	ldr	r3, [r6, #0]
 800698a:	6820      	ldr	r0, [r4, #0]
 800698c:	1d19      	adds	r1, r3, #4
 800698e:	6031      	str	r1, [r6, #0]
 8006990:	0606      	lsls	r6, r0, #24
 8006992:	d501      	bpl.n	8006998 <_printf_i+0xbc>
 8006994:	681d      	ldr	r5, [r3, #0]
 8006996:	e003      	b.n	80069a0 <_printf_i+0xc4>
 8006998:	0645      	lsls	r5, r0, #25
 800699a:	d5fb      	bpl.n	8006994 <_printf_i+0xb8>
 800699c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	da03      	bge.n	80069ac <_printf_i+0xd0>
 80069a4:	232d      	movs	r3, #45	@ 0x2d
 80069a6:	426d      	negs	r5, r5
 80069a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ac:	230a      	movs	r3, #10
 80069ae:	4859      	ldr	r0, [pc, #356]	@ (8006b14 <_printf_i+0x238>)
 80069b0:	e011      	b.n	80069d6 <_printf_i+0xfa>
 80069b2:	6821      	ldr	r1, [r4, #0]
 80069b4:	6833      	ldr	r3, [r6, #0]
 80069b6:	0608      	lsls	r0, r1, #24
 80069b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80069bc:	d402      	bmi.n	80069c4 <_printf_i+0xe8>
 80069be:	0649      	lsls	r1, r1, #25
 80069c0:	bf48      	it	mi
 80069c2:	b2ad      	uxthmi	r5, r5
 80069c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80069c6:	6033      	str	r3, [r6, #0]
 80069c8:	bf14      	ite	ne
 80069ca:	230a      	movne	r3, #10
 80069cc:	2308      	moveq	r3, #8
 80069ce:	4851      	ldr	r0, [pc, #324]	@ (8006b14 <_printf_i+0x238>)
 80069d0:	2100      	movs	r1, #0
 80069d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069d6:	6866      	ldr	r6, [r4, #4]
 80069d8:	2e00      	cmp	r6, #0
 80069da:	bfa8      	it	ge
 80069dc:	6821      	ldrge	r1, [r4, #0]
 80069de:	60a6      	str	r6, [r4, #8]
 80069e0:	bfa4      	itt	ge
 80069e2:	f021 0104 	bicge.w	r1, r1, #4
 80069e6:	6021      	strge	r1, [r4, #0]
 80069e8:	b90d      	cbnz	r5, 80069ee <_printf_i+0x112>
 80069ea:	2e00      	cmp	r6, #0
 80069ec:	d04b      	beq.n	8006a86 <_printf_i+0x1aa>
 80069ee:	4616      	mov	r6, r2
 80069f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80069f4:	fb03 5711 	mls	r7, r3, r1, r5
 80069f8:	5dc7      	ldrb	r7, [r0, r7]
 80069fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069fe:	462f      	mov	r7, r5
 8006a00:	42bb      	cmp	r3, r7
 8006a02:	460d      	mov	r5, r1
 8006a04:	d9f4      	bls.n	80069f0 <_printf_i+0x114>
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d10b      	bne.n	8006a22 <_printf_i+0x146>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	07df      	lsls	r7, r3, #31
 8006a0e:	d508      	bpl.n	8006a22 <_printf_i+0x146>
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	6861      	ldr	r1, [r4, #4]
 8006a14:	4299      	cmp	r1, r3
 8006a16:	bfde      	ittt	le
 8006a18:	2330      	movle	r3, #48	@ 0x30
 8006a1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a22:	1b92      	subs	r2, r2, r6
 8006a24:	6122      	str	r2, [r4, #16]
 8006a26:	464b      	mov	r3, r9
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	f8cd a000 	str.w	sl, [sp]
 8006a30:	aa03      	add	r2, sp, #12
 8006a32:	f7ff fee1 	bl	80067f8 <_printf_common>
 8006a36:	3001      	adds	r0, #1
 8006a38:	d14a      	bne.n	8006ad0 <_printf_i+0x1f4>
 8006a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3e:	b004      	add	sp, #16
 8006a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	f043 0320 	orr.w	r3, r3, #32
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	2778      	movs	r7, #120	@ 0x78
 8006a4e:	4832      	ldr	r0, [pc, #200]	@ (8006b18 <_printf_i+0x23c>)
 8006a50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	6831      	ldr	r1, [r6, #0]
 8006a58:	061f      	lsls	r7, r3, #24
 8006a5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a5e:	d402      	bmi.n	8006a66 <_printf_i+0x18a>
 8006a60:	065f      	lsls	r7, r3, #25
 8006a62:	bf48      	it	mi
 8006a64:	b2ad      	uxthmi	r5, r5
 8006a66:	6031      	str	r1, [r6, #0]
 8006a68:	07d9      	lsls	r1, r3, #31
 8006a6a:	bf44      	itt	mi
 8006a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006a70:	6023      	strmi	r3, [r4, #0]
 8006a72:	b11d      	cbz	r5, 8006a7c <_printf_i+0x1a0>
 8006a74:	2310      	movs	r3, #16
 8006a76:	e7ab      	b.n	80069d0 <_printf_i+0xf4>
 8006a78:	4826      	ldr	r0, [pc, #152]	@ (8006b14 <_printf_i+0x238>)
 8006a7a:	e7e9      	b.n	8006a50 <_printf_i+0x174>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	f023 0320 	bic.w	r3, r3, #32
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	e7f6      	b.n	8006a74 <_printf_i+0x198>
 8006a86:	4616      	mov	r6, r2
 8006a88:	e7bd      	b.n	8006a06 <_printf_i+0x12a>
 8006a8a:	6833      	ldr	r3, [r6, #0]
 8006a8c:	6825      	ldr	r5, [r4, #0]
 8006a8e:	1d18      	adds	r0, r3, #4
 8006a90:	6961      	ldr	r1, [r4, #20]
 8006a92:	6030      	str	r0, [r6, #0]
 8006a94:	062e      	lsls	r6, r5, #24
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	d501      	bpl.n	8006a9e <_printf_i+0x1c2>
 8006a9a:	6019      	str	r1, [r3, #0]
 8006a9c:	e002      	b.n	8006aa4 <_printf_i+0x1c8>
 8006a9e:	0668      	lsls	r0, r5, #25
 8006aa0:	d5fb      	bpl.n	8006a9a <_printf_i+0x1be>
 8006aa2:	8019      	strh	r1, [r3, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4616      	mov	r6, r2
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	e7bc      	b.n	8006a26 <_printf_i+0x14a>
 8006aac:	6833      	ldr	r3, [r6, #0]
 8006aae:	2100      	movs	r1, #0
 8006ab0:	1d1a      	adds	r2, r3, #4
 8006ab2:	6032      	str	r2, [r6, #0]
 8006ab4:	681e      	ldr	r6, [r3, #0]
 8006ab6:	6862      	ldr	r2, [r4, #4]
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f000 f83f 	bl	8006b3c <memchr>
 8006abe:	b108      	cbz	r0, 8006ac4 <_printf_i+0x1e8>
 8006ac0:	1b80      	subs	r0, r0, r6
 8006ac2:	6060      	str	r0, [r4, #4]
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	6123      	str	r3, [r4, #16]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ace:	e7aa      	b.n	8006a26 <_printf_i+0x14a>
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	47d0      	blx	sl
 8006ada:	3001      	adds	r0, #1
 8006adc:	d0ad      	beq.n	8006a3a <_printf_i+0x15e>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	079b      	lsls	r3, r3, #30
 8006ae2:	d413      	bmi.n	8006b0c <_printf_i+0x230>
 8006ae4:	68e0      	ldr	r0, [r4, #12]
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	4298      	cmp	r0, r3
 8006aea:	bfb8      	it	lt
 8006aec:	4618      	movlt	r0, r3
 8006aee:	e7a6      	b.n	8006a3e <_printf_i+0x162>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4632      	mov	r2, r6
 8006af4:	4649      	mov	r1, r9
 8006af6:	4640      	mov	r0, r8
 8006af8:	47d0      	blx	sl
 8006afa:	3001      	adds	r0, #1
 8006afc:	d09d      	beq.n	8006a3a <_printf_i+0x15e>
 8006afe:	3501      	adds	r5, #1
 8006b00:	68e3      	ldr	r3, [r4, #12]
 8006b02:	9903      	ldr	r1, [sp, #12]
 8006b04:	1a5b      	subs	r3, r3, r1
 8006b06:	42ab      	cmp	r3, r5
 8006b08:	dcf2      	bgt.n	8006af0 <_printf_i+0x214>
 8006b0a:	e7eb      	b.n	8006ae4 <_printf_i+0x208>
 8006b0c:	2500      	movs	r5, #0
 8006b0e:	f104 0619 	add.w	r6, r4, #25
 8006b12:	e7f5      	b.n	8006b00 <_printf_i+0x224>
 8006b14:	08009adb 	.word	0x08009adb
 8006b18:	08009aec 	.word	0x08009aec

08006b1c <_sbrk_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	2300      	movs	r3, #0
 8006b20:	4d05      	ldr	r5, [pc, #20]	@ (8006b38 <_sbrk_r+0x1c>)
 8006b22:	4604      	mov	r4, r0
 8006b24:	4608      	mov	r0, r1
 8006b26:	602b      	str	r3, [r5, #0]
 8006b28:	f7fb f92a 	bl	8001d80 <_sbrk>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d102      	bne.n	8006b36 <_sbrk_r+0x1a>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	b103      	cbz	r3, 8006b36 <_sbrk_r+0x1a>
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	2000099c 	.word	0x2000099c

08006b3c <memchr>:
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	b510      	push	{r4, lr}
 8006b40:	b2c9      	uxtb	r1, r1
 8006b42:	4402      	add	r2, r0
 8006b44:	4293      	cmp	r3, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	d101      	bne.n	8006b4e <memchr+0x12>
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	e003      	b.n	8006b56 <memchr+0x1a>
 8006b4e:	7804      	ldrb	r4, [r0, #0]
 8006b50:	3301      	adds	r3, #1
 8006b52:	428c      	cmp	r4, r1
 8006b54:	d1f6      	bne.n	8006b44 <memchr+0x8>
 8006b56:	bd10      	pop	{r4, pc}

08006b58 <_realloc_r>:
 8006b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	4615      	mov	r5, r2
 8006b60:	460c      	mov	r4, r1
 8006b62:	b921      	cbnz	r1, 8006b6e <_realloc_r+0x16>
 8006b64:	4611      	mov	r1, r2
 8006b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6a:	f7ff bc61 	b.w	8006430 <_malloc_r>
 8006b6e:	b92a      	cbnz	r2, 8006b7c <_realloc_r+0x24>
 8006b70:	f7ff fbf4 	bl	800635c <_free_r>
 8006b74:	2400      	movs	r4, #0
 8006b76:	4620      	mov	r0, r4
 8006b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b7c:	f000 f81a 	bl	8006bb4 <_malloc_usable_size_r>
 8006b80:	4285      	cmp	r5, r0
 8006b82:	4606      	mov	r6, r0
 8006b84:	d802      	bhi.n	8006b8c <_realloc_r+0x34>
 8006b86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b8a:	d8f4      	bhi.n	8006b76 <_realloc_r+0x1e>
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4640      	mov	r0, r8
 8006b90:	f7ff fc4e 	bl	8006430 <_malloc_r>
 8006b94:	4607      	mov	r7, r0
 8006b96:	2800      	cmp	r0, #0
 8006b98:	d0ec      	beq.n	8006b74 <_realloc_r+0x1c>
 8006b9a:	42b5      	cmp	r5, r6
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	bf28      	it	cs
 8006ba2:	4632      	movcs	r2, r6
 8006ba4:	f7ff fbcc 	bl	8006340 <memcpy>
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4640      	mov	r0, r8
 8006bac:	f7ff fbd6 	bl	800635c <_free_r>
 8006bb0:	463c      	mov	r4, r7
 8006bb2:	e7e0      	b.n	8006b76 <_realloc_r+0x1e>

08006bb4 <_malloc_usable_size_r>:
 8006bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb8:	1f18      	subs	r0, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bfbc      	itt	lt
 8006bbe:	580b      	ldrlt	r3, [r1, r0]
 8006bc0:	18c0      	addlt	r0, r0, r3
 8006bc2:	4770      	bx	lr

08006bc4 <_init>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	bf00      	nop
 8006bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bca:	bc08      	pop	{r3}
 8006bcc:	469e      	mov	lr, r3
 8006bce:	4770      	bx	lr

08006bd0 <_fini>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr
