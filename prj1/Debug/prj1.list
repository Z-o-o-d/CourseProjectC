
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b634  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000348c  0800b748  0800b748  0000c748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebd4  0800ebd4  000101fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebd4  0800ebd4  0000fbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebdc  0800ebdc  000101fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebdc  0800ebdc  0000fbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ebe0  0800ebe0  0000fbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800ebe4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  200001fc  0800ede0  000101fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa0  0800ede0  00010aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f7a  00000000  00000000  00010225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003375  00000000  00000000  0002519f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00028518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f16  00000000  00000000  00029800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b165  00000000  00000000  0002a716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a7e  00000000  00000000  0004587b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094611  00000000  00000000  0005e2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f290a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e8  00000000  00000000  000f2950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000031  00000000  00000000  000f8e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000f8e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b72c 	.word	0x0800b72c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800b72c 	.word	0x0800b72c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_d2lz>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	460d      	mov	r5, r1
 8000ef6:	f7ff fe15 	bl	8000b24 <__aeabi_dcmplt>
 8000efa:	b928      	cbnz	r0, 8000f08 <__aeabi_d2lz+0x1c>
 8000efc:	4620      	mov	r0, r4
 8000efe:	4629      	mov	r1, r5
 8000f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f04:	f000 b80a 	b.w	8000f1c <__aeabi_d2ulz>
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f0e:	f000 f805 	bl	8000f1c <__aeabi_d2ulz>
 8000f12:	4240      	negs	r0, r0
 8000f14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
 8000f1a:	bf00      	nop

08000f1c <__aeabi_d2ulz>:
 8000f1c:	b5d0      	push	{r4, r6, r7, lr}
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <__aeabi_d2ulz+0x34>)
 8000f22:	4606      	mov	r6, r0
 8000f24:	460f      	mov	r7, r1
 8000f26:	f7ff fb8b 	bl	8000640 <__aeabi_dmul>
 8000f2a:	f7ff fe61 	bl	8000bf0 <__aeabi_d2uiz>
 8000f2e:	4604      	mov	r4, r0
 8000f30:	f7ff fb0c 	bl	800054c <__aeabi_ui2d>
 8000f34:	2200      	movs	r2, #0
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <__aeabi_d2ulz+0x38>)
 8000f38:	f7ff fb82 	bl	8000640 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4630      	mov	r0, r6
 8000f42:	4639      	mov	r1, r7
 8000f44:	f7ff f9c4 	bl	80002d0 <__aeabi_dsub>
 8000f48:	f7ff fe52 	bl	8000bf0 <__aeabi_d2uiz>
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000f50:	3df00000 	.word	0x3df00000
 8000f54:	41f00000 	.word	0x41f00000

08000f58 <ESP_SendCommand>:
    strncpy(esp_config.ap_ssid, ap_ssid, sizeof(esp_config.ap_ssid));
    strncpy(esp_config.ap_pswd, ap_pswd, sizeof(esp_config.ap_pswd));
    strncpy(esp_config.ap_ip, ap_ip, sizeof(esp_config.ap_ip));
}

void ESP_SendCommand(const char *command) {
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    // Transmit the command using the default UART
    HAL_UART_Transmit(AT_huart, (uint8_t*)command, strlen(command), 1000);
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <ESP_SendCommand+0x2c>)
 8000f62:	681c      	ldr	r4, [r3, #0]
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff f8f3 	bl	8000150 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4620      	mov	r0, r4
 8000f76:	f005 f96c 	bl	8006252 <HAL_UART_Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000218 	.word	0x20000218

08000f88 <ESP_UART_Init>:
    HAL_UART_Transmit(AT_huart, cmd, strlen((char*)cmd), 100);
    HAL_Delay(1); // Adjust this delay as needed
    HAL_UART_Transmit(AT_huart, (uint8_t *)data, strlen(data), 1000);
}

void ESP_UART_Init(UART_HandleTypeDef *huart){
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    AT_huart = huart;
 8000f90:	4a03      	ldr	r2, [pc, #12]	@ (8000fa0 <ESP_UART_Init+0x18>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000218 	.word	0x20000218

08000fa4 <ESP_Reset>:

// Function definitions for AT commands with modifiable parameters

void ESP_Reset() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
#ifdef ENABLE_GPIO_RESET_CONTROL
	ESP_Reset_GPIO();
 8000fa8:	f000 f99c 	bl	80012e4 <ESP_Reset_GPIO>
#else
    ESP_SendCommand("AT+RST\r\n");
#endif
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <ESP_CheckWiFi>:
    char cmd[100];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
    ESP_SendCommand(cmd);
}

WiFiInfoTypeDef ESP_CheckWiFi(void) {
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb2:	b0ab      	sub	sp, #172	@ 0xac
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    WiFiInfoTypeDef info = {0};
 8000fb8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fbc:	2235      	movs	r2, #53	@ 0x35
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 ffe0 	bl	8007f86 <memset>
    char response[100] = {0};
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2260      	movs	r2, #96	@ 0x60
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 ffd7 	bl	8007f86 <memset>
    char *token;
    huart3.RxXferCount = 0;
 8000fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <ESP_CheckWiFi+0x118>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    ESP_SendCommand("AT+CWJAP?\r\n");
 8000fde:	483b      	ldr	r0, [pc, #236]	@ (80010cc <ESP_CheckWiFi+0x11c>)
 8000fe0:	f7ff ffba 	bl	8000f58 <ESP_SendCommand>
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);
 8000fe4:	4b3a      	ldr	r3, [pc, #232]	@ (80010d0 <ESP_CheckWiFi+0x120>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	f107 0108 	add.w	r1, r7, #8
 8000fec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff0:	2264      	movs	r2, #100	@ 0x64
 8000ff2:	f005 f9b1 	bl	8006358 <HAL_UART_Receive>
    // Parse the response and populate the WiFiInfo struct

    // I don know why it can't be     token = strtok(response, "+CWJAP:,\"");
    // sscanf scanf ALSO can't used  so strange

    token = strtok(response, ":,\"");
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	4936      	ldr	r1, [pc, #216]	@ (80010d4 <ESP_CheckWiFi+0x124>)
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f006 ffef 	bl	8007fe0 <strtok>
 8001002:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

    token = strtok(NULL, "\",\""); // Get SSID
 8001006:	4934      	ldr	r1, [pc, #208]	@ (80010d8 <ESP_CheckWiFi+0x128>)
 8001008:	2000      	movs	r0, #0
 800100a:	f006 ffe9 	bl	8007fe0 <strtok>
 800100e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    strcpy(info.ssid, token);
 8001012:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800101a:	4618      	mov	r0, r3
 800101c:	f007 f8c9 	bl	80081b2 <strcpy>

    token = strtok(NULL, "\","); // Get MAC address
 8001020:	492e      	ldr	r1, [pc, #184]	@ (80010dc <ESP_CheckWiFi+0x12c>)
 8001022:	2000      	movs	r0, #0
 8001024:	f006 ffdc 	bl	8007fe0 <strtok>
 8001028:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    strcpy(info.bssid, token);
 800102c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001030:	3320      	adds	r3, #32
 8001032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001036:	4618      	mov	r0, r3
 8001038:	f007 f8bb 	bl	80081b2 <strcpy>

    token = strtok(NULL, ","); // Get security mode
 800103c:	4928      	ldr	r1, [pc, #160]	@ (80010e0 <ESP_CheckWiFi+0x130>)
 800103e:	2000      	movs	r0, #0
 8001040:	f006 ffce 	bl	8007fe0 <strtok>
 8001044:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    info.channel = atoi(token);
 8001048:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800104c:	f005 ff66 	bl	8006f1c <atoi>
 8001050:	4603      	mov	r3, r0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

    token = strtok(NULL, ","); // Get RSSI
 8001058:	4921      	ldr	r1, [pc, #132]	@ (80010e0 <ESP_CheckWiFi+0x130>)
 800105a:	2000      	movs	r0, #0
 800105c:	f006 ffc0 	bl	8007fe0 <strtok>
 8001060:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    info.rssi = atoi(token);
 8001064:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001068:	f005 ff58 	bl	8006f1c <atoi>
 800106c:	4603      	mov	r3, r0
 800106e:	b25b      	sxtb	r3, r3
 8001070:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    token = strtok(NULL, "\r\n"); // Get connected status
 8001074:	491b      	ldr	r1, [pc, #108]	@ (80010e4 <ESP_CheckWiFi+0x134>)
 8001076:	2000      	movs	r0, #0
 8001078:	f006 ffb2 	bl	8007fe0 <strtok>
 800107c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    info.encryption = atoi(token);
 8001080:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001084:	f005 ff4a 	bl	8006f1c <atoi>
 8001088:	4603      	mov	r3, r0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0

    return info;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8001096:	469c      	mov	ip, r3
 8001098:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800109c:	4665      	mov	r5, ip
 800109e:	4626      	mov	r6, r4
 80010a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010a2:	6028      	str	r0, [r5, #0]
 80010a4:	6069      	str	r1, [r5, #4]
 80010a6:	60aa      	str	r2, [r5, #8]
 80010a8:	60eb      	str	r3, [r5, #12]
 80010aa:	3410      	adds	r4, #16
 80010ac:	f10c 0c10 	add.w	ip, ip, #16
 80010b0:	4574      	cmp	r4, lr
 80010b2:	d1f3      	bne.n	800109c <ESP_CheckWiFi+0xec>
 80010b4:	4663      	mov	r3, ip
 80010b6:	4622      	mov	r2, r4
 80010b8:	6810      	ldr	r0, [r2, #0]
 80010ba:	6018      	str	r0, [r3, #0]
 80010bc:	7912      	ldrb	r2, [r2, #4]
 80010be:	711a      	strb	r2, [r3, #4]
}
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	37ac      	adds	r7, #172	@ 0xac
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c8:	2000032c 	.word	0x2000032c
 80010cc:	0800b7c0 	.word	0x0800b7c0
 80010d0:	20000218 	.word	0x20000218
 80010d4:	0800b7cc 	.word	0x0800b7cc
 80010d8:	0800b7d0 	.word	0x0800b7d0
 80010dc:	0800b7d4 	.word	0x0800b7d4
 80010e0:	0800b7d8 	.word	0x0800b7d8
 80010e4:	0800b7dc 	.word	0x0800b7dc

080010e8 <ESP_GetIPInfo>:

IPInfoTypeDef ESP_GetIPInfo(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0c6      	sub	sp, #280	@ 0x118
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010f6:	6018      	str	r0, [r3, #0]
    IPInfoTypeDef ipInfo = {0};
 80010f8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80010fc:	2244      	movs	r2, #68	@ 0x44
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f006 ff40 	bl	8007f86 <memset>
    char response[200] = {0};
 8001106:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800110a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	3304      	adds	r3, #4
 8001114:	22c4      	movs	r2, #196	@ 0xc4
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f006 ff34 	bl	8007f86 <memset>
    char *token;

    ESP_SendCommand("AT+CIFSR\r\n");
 800111e:	484e      	ldr	r0, [pc, #312]	@ (8001258 <ESP_GetIPInfo+0x170>)
 8001120:	f7ff ff1a 	bl	8000f58 <ESP_SendCommand>
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);
 8001124:	4b4d      	ldr	r3, [pc, #308]	@ (800125c <ESP_GetIPInfo+0x174>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f107 0108 	add.w	r1, r7, #8
 800112c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001130:	22c8      	movs	r2, #200	@ 0xc8
 8001132:	f005 f911 	bl	8006358 <HAL_UART_Receive>

    // Parse AP IP
    token = strstr(response, "+CIFSR:APIP,\"");
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4949      	ldr	r1, [pc, #292]	@ (8001260 <ESP_GetIPInfo+0x178>)
 800113c:	4618      	mov	r0, r3
 800113e:	f006 ffab 	bl	8008098 <strstr>
 8001142:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (token) {
 8001146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800114a:	2b00      	cmp	r3, #0
 800114c:	d011      	beq.n	8001172 <ESP_GetIPInfo+0x8a>
        token += strlen("+CIFSR:APIP,\"");
 800114e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001152:	330d      	adds	r3, #13
 8001154:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        strncpy(ipInfo.AP_IP, token, strcspn(token, "\""));
 8001158:	4942      	ldr	r1, [pc, #264]	@ (8001264 <ESP_GetIPInfo+0x17c>)
 800115a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800115e:	f006 ff1a 	bl	8007f96 <strcspn>
 8001162:	4602      	mov	r2, r0
 8001164:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001168:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800116c:	4618      	mov	r0, r3
 800116e:	f006 ff23 	bl	8007fb8 <strncpy>
    }

    // Parse AP MAC
    token = strstr(response, "+CIFSR:APMAC,\"");
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	493c      	ldr	r1, [pc, #240]	@ (8001268 <ESP_GetIPInfo+0x180>)
 8001178:	4618      	mov	r0, r3
 800117a:	f006 ff8d 	bl	8008098 <strstr>
 800117e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (token) {
 8001182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001186:	2b00      	cmp	r3, #0
 8001188:	d012      	beq.n	80011b0 <ESP_GetIPInfo+0xc8>
        token += strlen("+CIFSR:APMAC,\"");
 800118a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800118e:	330e      	adds	r3, #14
 8001190:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        strncpy(ipInfo.AP_MAC, token, strcspn(token, "\""));
 8001194:	4933      	ldr	r1, [pc, #204]	@ (8001264 <ESP_GetIPInfo+0x17c>)
 8001196:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800119a:	f006 fefc 	bl	8007f96 <strcspn>
 800119e:	4602      	mov	r2, r0
 80011a0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80011a4:	3310      	adds	r3, #16
 80011a6:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80011aa:	4618      	mov	r0, r3
 80011ac:	f006 ff04 	bl	8007fb8 <strncpy>
    }

    // Parse STA IP
    token = strstr(response, "+CIFSR:STAIP,\"");
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	492d      	ldr	r1, [pc, #180]	@ (800126c <ESP_GetIPInfo+0x184>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f006 ff6e 	bl	8008098 <strstr>
 80011bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (token) {
 80011c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d012      	beq.n	80011ee <ESP_GetIPInfo+0x106>
        token += strlen("+CIFSR:STAIP,\"");
 80011c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011cc:	330e      	adds	r3, #14
 80011ce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        strncpy(ipInfo.STA_IP, token, strcspn(token, "\""));
 80011d2:	4924      	ldr	r1, [pc, #144]	@ (8001264 <ESP_GetIPInfo+0x17c>)
 80011d4:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80011d8:	f006 fedd 	bl	8007f96 <strcspn>
 80011dc:	4602      	mov	r2, r0
 80011de:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80011e2:	3322      	adds	r3, #34	@ 0x22
 80011e4:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 fee5 	bl	8007fb8 <strncpy>
    }

    // Parse STA MAC
    token = strstr(response, "+CIFSR:STAMAC,\"");
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	491f      	ldr	r1, [pc, #124]	@ (8001270 <ESP_GetIPInfo+0x188>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f006 ff4f 	bl	8008098 <strstr>
 80011fa:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (token) {
 80011fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001202:	2b00      	cmp	r3, #0
 8001204:	d012      	beq.n	800122c <ESP_GetIPInfo+0x144>
        token += strlen("+CIFSR:STAMAC,\"");
 8001206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800120a:	330f      	adds	r3, #15
 800120c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        strncpy(ipInfo.STA_MAC, token, strcspn(token, "\""));
 8001210:	4914      	ldr	r1, [pc, #80]	@ (8001264 <ESP_GetIPInfo+0x17c>)
 8001212:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001216:	f006 febe 	bl	8007f96 <strcspn>
 800121a:	4602      	mov	r2, r0
 800121c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001220:	3332      	adds	r3, #50	@ 0x32
 8001222:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8001226:	4618      	mov	r0, r3
 8001228:	f006 fec6 	bl	8007fb8 <strncpy>
    }
    return ipInfo;
 800122c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001230:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800123c:	2244      	movs	r2, #68	@ 0x44
 800123e:	4619      	mov	r1, r3
 8001240:	f006 ffcd 	bl	80081de <memcpy>
}
 8001244:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001248:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	0800b7e0 	.word	0x0800b7e0
 800125c:	20000218 	.word	0x20000218
 8001260:	0800b7ec 	.word	0x0800b7ec
 8001264:	0800b7fc 	.word	0x0800b7fc
 8001268:	0800b800 	.word	0x0800b800
 800126c:	0800b810 	.word	0x0800b810
 8001270:	0800b820 	.word	0x0800b820

08001274 <ESP_EnableMUX>:

void ESP_EnableMUX() {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    ESP_SendCommand("AT+CIPMUX=1\r\n");
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <ESP_EnableMUX+0x10>)
 800127a:	f7ff fe6d 	bl	8000f58 <ESP_SendCommand>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	0800b830 	.word	0x0800b830

08001288 <ESP_StartServer>:

void ESP_StartServer(uint16_t port) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b090      	sub	sp, #64	@ 0x40
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
    char cmd[50];
    sprintf(cmd, "AT+CIPSERVER=1,%d\r\n", port);
 8001292:	88fa      	ldrh	r2, [r7, #6]
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4906      	ldr	r1, [pc, #24]	@ (80012b4 <ESP_StartServer+0x2c>)
 800129a:	4618      	mov	r0, r3
 800129c:	f006 fdf6 	bl	8007e8c <siprintf>
    ESP_SendCommand(cmd);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe57 	bl	8000f58 <ESP_SendCommand>
}
 80012aa:	bf00      	nop
 80012ac:	3740      	adds	r7, #64	@ 0x40
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	0800b840 	.word	0x0800b840

080012b8 <ESP_INIT_BASE>:

void ESP_RestoreDefaults() {
    ESP_SendCommand("AT+RESTORE\r\n");
}

void ESP_INIT_BASE() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    ESP_Reset();
 80012bc:	f7ff fe72 	bl	8000fa4 <ESP_Reset>
    HAL_Delay(1000);
 80012c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012c4:	f001 fcb4 	bl	8002c30 <HAL_Delay>
    ESP_EnableMUX();
 80012c8:	f7ff ffd4 	bl	8001274 <ESP_EnableMUX>
    HAL_Delay(100);
 80012cc:	2064      	movs	r0, #100	@ 0x64
 80012ce:	f001 fcaf 	bl	8002c30 <HAL_Delay>
    ESP_StartServer(9999);
 80012d2:	f242 700f 	movw	r0, #9999	@ 0x270f
 80012d6:	f7ff ffd7 	bl	8001288 <ESP_StartServer>
    HAL_Delay(100);
 80012da:	2064      	movs	r0, #100	@ 0x64
 80012dc:	f001 fca8 	bl	8002c30 <HAL_Delay>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <ESP_Reset_GPIO>:

#ifdef ENABLE_GPIO_RESET_CONTROL
static GPIO_TypeDef *ESP_Reset_GPIO_Port = ESP_RESET_GPIO_Port;
static uint16_t ESP_Reset_Pin = ESP_RESET_Pin;

void ESP_Reset_GPIO() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
    // Set the reset pin low to reset the ESP module
    HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_RESET);
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <ESP_Reset_GPIO+0x38>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001320 <ESP_Reset_GPIO+0x3c>)
 80012ee:	8811      	ldrh	r1, [r2, #0]
 80012f0:	2200      	movs	r2, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 ff61 	bl	80041ba <HAL_GPIO_WritePin>
    HAL_Delay(100); // Hold low for 1000 ms
 80012f8:	2064      	movs	r0, #100	@ 0x64
 80012fa:	f001 fc99 	bl	8002c30 <HAL_Delay>
    // Set the reset pin high to bring the ESP module out of reset
    HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <ESP_Reset_GPIO+0x38>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <ESP_Reset_GPIO+0x3c>)
 8001304:	8811      	ldrh	r1, [r2, #0]
 8001306:	2201      	movs	r2, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f002 ff56 	bl	80041ba <HAL_GPIO_WritePin>
    HAL_Delay(1000); // Wait for the ESP module to initialize
 800130e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001312:	f001 fc8d 	bl	8002c30 <HAL_Delay>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004

08001324 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	889b      	ldrh	r3, [r3, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	4619      	mov	r1, r3
 8001346:	f002 ff38 	bl	80041ba <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	889b      	ldrh	r3, [r3, #4]
 800134e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8001350:	2311      	movs	r3, #17
 8001352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	79db      	ldrb	r3, [r3, #7]
 8001358:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 800135a:	2303      	movs	r3, #3
 800135c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fd8b 	bl	8003e84 <HAL_GPIO_Init>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	79db      	ldrb	r3, [r3, #7]
 800139a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f107 0208 	add.w	r2, r7, #8
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fd6c 	bl	8003e84 <HAL_GPIO_Init>
}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80013be:	4a76      	ldr	r2, [pc, #472]	@ (8001598 <DHT_getData+0x1e4>)
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c8:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	799b      	ldrb	r3, [r3, #6]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d103      	bne.n	80013dc <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 80013d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80013da:	e002      	b.n	80013e2 <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 80013dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 80013e2:	f001 fc1b 	bl	8002c1c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	1ad2      	subs	r2, r2, r3
 80013ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d212      	bcs.n	800141a <DHT_getData+0x66>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00e      	beq.n	800141a <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	61bb      	str	r3, [r7, #24]
		return data;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	461a      	mov	r2, r3
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001414:	e882 0003 	stmia.w	r2, {r0, r1}
 8001418:	e166      	b.n	80016e8 <DHT_getData+0x334>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 800141a:	f001 fbff 	bl	8002c1c <HAL_GetTick>
 800141e:	4603      	mov	r3, r0
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8001426:	6838      	ldr	r0, [r7, #0]
 8001428:	f7ff ff7c 	bl	8001324 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	889b      	ldrh	r3, [r3, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	f002 febf 	bl	80041ba <HAL_GPIO_WritePin>
	Delay(18);
 800143c:	2012      	movs	r0, #18
 800143e:	f001 fbf7 	bl	8002c30 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	889b      	ldrh	r3, [r3, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	4619      	mov	r1, r3
 800144e:	f002 feb4 	bl	80041ba <HAL_GPIO_WritePin>
	goToInput(sensor);
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f7ff ff8f 	bl	8001376 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 8001460:	e01a      	b.n	8001498 <DHT_getData+0xe4>
		timeout++;
 8001462:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001464:	3301      	adds	r3, #1
 8001466:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8001468:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800146a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800146e:	4293      	cmp	r3, r2
 8001470:	d912      	bls.n	8001498 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8001472:	b662      	cpsie	i
}
 8001474:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 800147c:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001484:	60da      	str	r2, [r3, #12]

			return data;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	461a      	mov	r2, r3
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001492:	e882 0003 	stmia.w	r2, {r0, r1}
 8001496:	e127      	b.n	80016e8 <DHT_getData+0x334>
	while(getLine()) {
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	889b      	ldrh	r3, [r3, #4]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4610      	mov	r0, r2
 80014a4:	f002 fe72 	bl	800418c <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d0d9      	beq.n	8001462 <DHT_getData+0xae>
		}
	}
	timeout = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание подъёма
	while(!getLine()) {
 80014b2:	e01a      	b.n	80014ea <DHT_getData+0x136>
		timeout++;
 80014b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014b6:	3301      	adds	r3, #1
 80014b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 80014ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d912      	bls.n	80014ea <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 80014c4:	b662      	cpsie	i
}
 80014c6:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80014ce:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80014d6:	60da      	str	r2, [r3, #12]

			return data;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	461a      	mov	r2, r3
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80014e8:	e0fe      	b.n	80016e8 <DHT_getData+0x334>
	while(!getLine()) {
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	889b      	ldrh	r3, [r3, #4]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4610      	mov	r0, r2
 80014f6:	f002 fe49 	bl	800418c <HAL_GPIO_ReadPin>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d1d9      	bne.n	80014b4 <DHT_getData+0x100>
		}
	}
	timeout = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 8001504:	e012      	b.n	800152c <DHT_getData+0x178>
		timeout++;
 8001506:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001508:	3301      	adds	r3, #1
 800150a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 800150c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800150e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001512:	4293      	cmp	r3, r2
 8001514:	d90a      	bls.n	800152c <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 8001516:	b662      	cpsie	i
}
 8001518:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001526:	e882 0003 	stmia.w	r2, {r0, r1}
 800152a:	e0dd      	b.n	80016e8 <DHT_getData+0x334>
	while(getLine()) {
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	889b      	ldrh	r3, [r3, #4]
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f002 fe28 	bl	800418c <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d0e1      	beq.n	8001506 <DHT_getData+0x152>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001542:	4a16      	ldr	r2, [pc, #88]	@ (800159c <DHT_getData+0x1e8>)
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800154c:	6018      	str	r0, [r3, #0]
 800154e:	3304      	adds	r3, #4
 8001550:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001558:	e05d      	b.n	8001616 <DHT_getData+0x262>
		for(uint8_t b = 7; b != 255; b--) {
 800155a:	2307      	movs	r3, #7
 800155c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001560:	e050      	b.n	8001604 <DHT_getData+0x250>
			uint16_t hT = 0, lT = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	843b      	strh	r3, [r7, #32]
 8001566:	2300      	movs	r3, #0
 8001568:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 800156a:	e002      	b.n	8001572 <DHT_getData+0x1be>
 800156c:	8bfb      	ldrh	r3, [r7, #30]
 800156e:	3301      	adds	r3, #1
 8001570:	83fb      	strh	r3, [r7, #30]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	889b      	ldrh	r3, [r3, #4]
 800157a:	4619      	mov	r1, r3
 800157c:	4610      	mov	r0, r2
 800157e:	f002 fe05 	bl	800418c <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	2b01      	cmp	r3, #1
 8001586:	d004      	beq.n	8001592 <DHT_getData+0x1de>
 8001588:	8bfb      	ldrh	r3, [r7, #30]
 800158a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800158e:	4293      	cmp	r3, r2
 8001590:	d1ec      	bne.n	800156c <DHT_getData+0x1b8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	84bb      	strh	r3, [r7, #36]	@ 0x24
			while(getLine()&& hT != 65535) hT++;
 8001596:	e006      	b.n	80015a6 <DHT_getData+0x1f2>
 8001598:	0800b884 	.word	0x0800b884
 800159c:	0800b88c 	.word	0x0800b88c
 80015a0:	8c3b      	ldrh	r3, [r7, #32]
 80015a2:	3301      	adds	r3, #1
 80015a4:	843b      	strh	r3, [r7, #32]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	889b      	ldrh	r3, [r3, #4]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4610      	mov	r0, r2
 80015b2:	f002 fdeb 	bl	800418c <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d104      	bne.n	80015c6 <DHT_getData+0x212>
 80015bc:	8c3b      	ldrh	r3, [r7, #32]
 80015be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d1ec      	bne.n	80015a0 <DHT_getData+0x1ec>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80015c6:	8c3a      	ldrh	r2, [r7, #32]
 80015c8:	8bfb      	ldrh	r3, [r7, #30]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d915      	bls.n	80015fa <DHT_getData+0x246>
 80015ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015d2:	3328      	adds	r3, #40	@ 0x28
 80015d4:	443b      	add	r3, r7
 80015d6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	3328      	adds	r3, #40	@ 0x28
 80015f4:	443b      	add	r3, r7
 80015f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 80015fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015fe:	3b01      	subs	r3, #1
 8001600:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001604:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001608:	2bff      	cmp	r3, #255	@ 0xff
 800160a:	d1aa      	bne.n	8001562 <DHT_getData+0x1ae>
	for(uint8_t a = 0; a < 5; a++) {
 800160c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001610:	3301      	adds	r3, #1
 8001612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800161a:	2b04      	cmp	r3, #4
 800161c:	d99d      	bls.n	800155a <DHT_getData+0x1a6>
  __ASM volatile ("cpsie i" : : : "memory");
 800161e:	b662      	cpsie	i
}
 8001620:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8001622:	7b3a      	ldrb	r2, [r7, #12]
 8001624:	7b7b      	ldrb	r3, [r7, #13]
 8001626:	4413      	add	r3, r2
 8001628:	b2da      	uxtb	r2, r3
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	4413      	add	r3, r2
 800162e:	b2da      	uxtb	r2, r3
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	4413      	add	r3, r2
 8001634:	b2da      	uxtb	r2, r3
 8001636:	7c3b      	ldrb	r3, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d147      	bne.n	80016cc <DHT_getData+0x318>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	799b      	ldrb	r3, [r3, #6]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d133      	bne.n	80016ac <DHT_getData+0x2f8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001644:	7b3b      	ldrb	r3, [r7, #12]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	7b7a      	ldrb	r2, [r7, #13]
 800164a:	4313      	orrs	r3, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fbf9 	bl	8000e44 <__aeabi_i2f>
 8001652:	4603      	mov	r3, r0
 8001654:	4926      	ldr	r1, [pc, #152]	@ (80016f0 <DHT_getData+0x33c>)
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fd82 	bl	8000160 <__aeabi_fmul>
 800165c:	4603      	mov	r3, r0
 800165e:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	b25b      	sxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0e      	blt.n	8001686 <DHT_getData+0x2d2>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001668:	7bbb      	ldrb	r3, [r7, #14]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	4313      	orrs	r3, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fbe7 	bl	8000e44 <__aeabi_i2f>
 8001676:	4603      	mov	r3, r0
 8001678:	491d      	ldr	r1, [pc, #116]	@ (80016f0 <DHT_getData+0x33c>)
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fd70 	bl	8000160 <__aeabi_fmul>
 8001680:	4603      	mov	r3, r0
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	e012      	b.n	80016ac <DHT_getData+0x2f8>
			}	else {
				rawData[2] &= ~(1<<7);
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800168c:	b2db      	uxtb	r3, r3
 800168e:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8001690:	7bbb      	ldrb	r3, [r7, #14]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	4313      	orrs	r3, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fbd3 	bl	8000e44 <__aeabi_i2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	4914      	ldr	r1, [pc, #80]	@ (80016f4 <DHT_getData+0x340>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fd5c 	bl	8000160 <__aeabi_fmul>
 80016a8:	4603      	mov	r3, r0
 80016aa:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	799b      	ldrb	r3, [r3, #6]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10b      	bne.n	80016cc <DHT_getData+0x318>
			data.hum = (float)rawData[0];
 80016b4:	7b3b      	ldrb	r3, [r7, #12]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fbc0 	bl	8000e3c <__aeabi_ui2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80016c0:	7bbb      	ldrb	r3, [r7, #14]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fbba 	bl	8000e3c <__aeabi_ui2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	461a      	mov	r2, r3
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016e4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	3728      	adds	r7, #40	@ 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	3dcccccd 	.word	0x3dcccccd
 80016f4:	bdcccccd 	.word	0xbdcccccd

080016f8 <Buzzer_Init>:
#include "buzzer.h"

void Buzzer_Init(BuzzerTypeDef *buzzer) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    Buzzer_SetFrequency(buzzer, buzzer->frequency);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4619      	mov	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f83a 	bl	8001780 <Buzzer_SetFrequency>
    Buzzer_SetVolume(buzzer, buzzer->volume);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7b1b      	ldrb	r3, [r3, #12]
 8001710:	4619      	mov	r1, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f84e 	bl	80017b4 <Buzzer_SetVolume>

    uint32_t period=0;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
    if (buzzer->htim->Instance == TIM1 ) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a15      	ldr	r2, [pc, #84]	@ (8001778 <Buzzer_Init+0x80>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d109      	bne.n	800173c <Buzzer_Init+0x44>
//    if (buzzer->htim->Instance == TIM1 || buzzer->htim->Instance == TIM8) {
    	 period = HAL_RCC_GetPCLK2Freq()/1000000-1;
 8001728:	f003 fdea 	bl	8005300 <HAL_RCC_GetPCLK2Freq>
 800172c:	4603      	mov	r3, r0
 800172e:	4a13      	ldr	r2, [pc, #76]	@ (800177c <Buzzer_Init+0x84>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	0c9b      	lsrs	r3, r3, #18
 8001736:	3b01      	subs	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e008      	b.n	800174e <Buzzer_Init+0x56>
    } else {
    	 period = HAL_RCC_GetPCLK1Freq()/1000000-1;
 800173c:	f003 fdcc 	bl	80052d8 <HAL_RCC_GetPCLK1Freq>
 8001740:	4603      	mov	r3, r0
 8001742:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <Buzzer_Init+0x84>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	0c9b      	lsrs	r3, r3, #18
 800174a:	3b01      	subs	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
    }
    __HAL_TIM_SET_AUTORELOAD(buzzer->htim, period);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	60da      	str	r2, [r3, #12]

    HAL_TIM_PWM_Start(buzzer->htim, buzzer->channel);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f003 ffa2 	bl	80056b4 <HAL_TIM_PWM_Start>
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40012c00 	.word	0x40012c00
 800177c:	431bde83 	.word	0x431bde83

08001780 <Buzzer_SetFrequency>:

void Buzzer_SetFrequency(BuzzerTypeDef *buzzer, uint32_t frequency) {
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
    buzzer->frequency = frequency;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	609a      	str	r2, [r3, #8]

    uint32_t prescaler = 1000000/frequency  - 1;
 8001790:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <Buzzer_SetFrequency+0x30>)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	fbb2 f3f3 	udiv	r3, r2, r3
 8001798:	3b01      	subs	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_PRESCALER(buzzer->htim, prescaler);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	000f4240 	.word	0x000f4240

080017b4 <Buzzer_SetVolume>:

void Buzzer_SetVolume(BuzzerTypeDef *buzzer, uint8_t volume) {
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]
    buzzer->volume = volume;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	731a      	strb	r2, [r3, #12]
    uint32_t compare_value = volume;
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(buzzer->htim, buzzer->channel, compare_value);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <Buzzer_SetVolume+0x2a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80017dc:	e018      	b.n	8001810 <Buzzer_SetVolume+0x5c>
    __HAL_TIM_SET_COMPARE(buzzer->htim, buzzer->channel, compare_value);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d105      	bne.n	80017f2 <Buzzer_SetVolume+0x3e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80017f0:	e00e      	b.n	8001810 <Buzzer_SetVolume+0x5c>
    __HAL_TIM_SET_COMPARE(buzzer->htim, buzzer->channel, compare_value);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d105      	bne.n	8001806 <Buzzer_SetVolume+0x52>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001804:	e004      	b.n	8001810 <Buzzer_SetVolume+0x5c>
    __HAL_TIM_SET_COMPARE(buzzer->htim, buzzer->channel, compare_value);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
	...

0800181c <ssd1306_NetWorkView>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ssd1306_NetWorkView(){
 800181c:	b510      	push	{r4, lr}
 800181e:	b0ba      	sub	sp, #232	@ 0xe8
	uint8_t msg[100];
	WiFiInfo=ESP_CheckWiFi();
 8001820:	a812      	add	r0, sp, #72	@ 0x48
 8001822:	f7ff fbc5 	bl	8000fb0 <ESP_CheckWiFi>
 8001826:	4a33      	ldr	r2, [pc, #204]	@ (80018f4 <ssd1306_NetWorkView+0xd8>)
 8001828:	ab12      	add	r3, sp, #72	@ 0x48
 800182a:	4614      	mov	r4, r2
 800182c:	a91f      	add	r1, sp, #124	@ 0x7c
 800182e:	f853 0b04 	ldr.w	r0, [r3], #4
 8001832:	428b      	cmp	r3, r1
 8001834:	f842 0b04 	str.w	r0, [r2], #4
 8001838:	d1f9      	bne.n	800182e <ssd1306_NetWorkView+0x12>
 800183a:	781b      	ldrb	r3, [r3, #0]
	IPInfo=ESP_GetIPInfo();
 800183c:	4668      	mov	r0, sp
	WiFiInfo=ESP_CheckWiFi();
 800183e:	7013      	strb	r3, [r2, #0]
	IPInfo=ESP_GetIPInfo();
 8001840:	f7ff fc52 	bl	80010e8 <ESP_GetIPInfo>
 8001844:	2244      	movs	r2, #68	@ 0x44
 8001846:	4669      	mov	r1, sp
 8001848:	482b      	ldr	r0, [pc, #172]	@ (80018f8 <ssd1306_NetWorkView+0xdc>)
 800184a:	f006 fcc8 	bl	80081de <memcpy>
	ssd1306_Fill(Black);
 800184e:	2000      	movs	r0, #0
 8001850:	f000 fbee 	bl	8002030 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001854:	2100      	movs	r1, #0
 8001856:	4608      	mov	r0, r1
 8001858:	f000 fd42 	bl	80022e0 <ssd1306_SetCursor>
	sprintf(msg, "NetWork %d",WiFiInfo.rssi);
 800185c:	f994 2033 	ldrsb.w	r2, [r4, #51]	@ 0x33
 8001860:	4926      	ldr	r1, [pc, #152]	@ (80018fc <ssd1306_NetWorkView+0xe0>)
 8001862:	a821      	add	r0, sp, #132	@ 0x84
 8001864:	f006 fb12 	bl	8007e8c <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001868:	4a25      	ldr	r2, [pc, #148]	@ (8001900 <ssd1306_NetWorkView+0xe4>)
 800186a:	2301      	movs	r3, #1
 800186c:	ca06      	ldmia	r2, {r1, r2}
 800186e:	a821      	add	r0, sp, #132	@ 0x84
 8001870:	f000 fd10 	bl	8002294 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
	sprintf(msg, "HarmonyNextIOT");
	ssd1306_WriteString(msg, Font_7x10, White);
 8001874:	4c23      	ldr	r4, [pc, #140]	@ (8001904 <ssd1306_NetWorkView+0xe8>)
	ssd1306_SetCursor(0, 18);
 8001876:	2112      	movs	r1, #18
 8001878:	2000      	movs	r0, #0
 800187a:	f000 fd31 	bl	80022e0 <ssd1306_SetCursor>
	sprintf(msg, "HarmonyNextIOT");
 800187e:	4922      	ldr	r1, [pc, #136]	@ (8001908 <ssd1306_NetWorkView+0xec>)
 8001880:	a821      	add	r0, sp, #132	@ 0x84
 8001882:	f006 fc96 	bl	80081b2 <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001886:	e894 0006 	ldmia.w	r4, {r1, r2}
 800188a:	2301      	movs	r3, #1
 800188c:	a821      	add	r0, sp, #132	@ 0x84
 800188e:	f000 fd01 	bl	8002294 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 31);
 8001892:	211f      	movs	r1, #31
 8001894:	2000      	movs	r0, #0
 8001896:	f000 fd23 	bl	80022e0 <ssd1306_SetCursor>
	sprintf(msg, "AP :%s",IPInfo.AP_IP);
 800189a:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <ssd1306_NetWorkView+0xdc>)
 800189c:	491b      	ldr	r1, [pc, #108]	@ (800190c <ssd1306_NetWorkView+0xf0>)
 800189e:	a821      	add	r0, sp, #132	@ 0x84
 80018a0:	f006 faf4 	bl	8007e8c <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 80018a4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80018a8:	2301      	movs	r3, #1
 80018aa:	a821      	add	r0, sp, #132	@ 0x84
 80018ac:	f000 fcf2 	bl	8002294 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 43);
 80018b0:	212b      	movs	r1, #43	@ 0x2b
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 fd14 	bl	80022e0 <ssd1306_SetCursor>
	sprintf(msg, "%s",WiFiInfo.ssid);
 80018b8:	490e      	ldr	r1, [pc, #56]	@ (80018f4 <ssd1306_NetWorkView+0xd8>)
 80018ba:	a821      	add	r0, sp, #132	@ 0x84
 80018bc:	f006 fc79 	bl	80081b2 <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 80018c0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80018c4:	2301      	movs	r3, #1
 80018c6:	a821      	add	r0, sp, #132	@ 0x84
 80018c8:	f000 fce4 	bl	8002294 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 54);
 80018cc:	2136      	movs	r1, #54	@ 0x36
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 fd06 	bl	80022e0 <ssd1306_SetCursor>
	sprintf(msg, "STA:%s",IPInfo.STA_IP);
 80018d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001910 <ssd1306_NetWorkView+0xf4>)
 80018d6:	490f      	ldr	r1, [pc, #60]	@ (8001914 <ssd1306_NetWorkView+0xf8>)
 80018d8:	a821      	add	r0, sp, #132	@ 0x84
 80018da:	f006 fad7 	bl	8007e8c <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 80018de:	e894 0006 	ldmia.w	r4, {r1, r2}
 80018e2:	2301      	movs	r3, #1
 80018e4:	a821      	add	r0, sp, #132	@ 0x84
 80018e6:	f000 fcd5 	bl	8002294 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80018ea:	f000 fbc3 	bl	8002074 <ssd1306_UpdateScreen>
}
 80018ee:	b03a      	add	sp, #232	@ 0xe8
 80018f0:	bd10      	pop	{r4, pc}
 80018f2:	bf00      	nop
 80018f4:	20000268 	.word	0x20000268
 80018f8:	20000224 	.word	0x20000224
 80018fc:	0800b8f4 	.word	0x0800b8f4
 8001900:	20000018 	.word	0x20000018
 8001904:	20000010 	.word	0x20000010
 8001908:	0800b8ff 	.word	0x0800b8ff
 800190c:	0800b90e 	.word	0x0800b90e
 8001910:	20000246 	.word	0x20000246
 8001914:	0800b915 	.word	0x0800b915

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b510      	push	{r4, lr}
 800191a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191c:	2214      	movs	r2, #20
 800191e:	2100      	movs	r1, #0
 8001920:	a80c      	add	r0, sp, #48	@ 0x30
 8001922:	f006 fb30 	bl	8007f86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001926:	2214      	movs	r2, #20
 8001928:	2100      	movs	r1, #0
 800192a:	eb0d 0002 	add.w	r0, sp, r2
 800192e:	f006 fb2a 	bl	8007f86 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001932:	2210      	movs	r2, #16
 8001934:	2100      	movs	r1, #0
 8001936:	a801      	add	r0, sp, #4
 8001938:	f006 fb25 	bl	8007f86 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800193e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001942:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001944:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001948:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800194c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001952:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001954:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001956:	f003 f8f5 	bl	8004b44 <HAL_RCC_OscConfig>
 800195a:	b108      	cbz	r0, 8001960 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195e:	e7fe      	b.n	800195e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001960:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001962:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001970:	4621      	mov	r1, r4
 8001972:	a805      	add	r0, sp, #20
 8001974:	f003 fb68 	bl	8005048 <HAL_RCC_ClockConfig>
 8001978:	b108      	cbz	r0, 800197e <SystemClock_Config+0x66>
 800197a:	b672      	cpsid	i
  while (1)
 800197c:	e7fe      	b.n	800197c <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800197e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001982:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001984:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001986:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001988:	f003 fcec 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 800198c:	b108      	cbz	r0, 8001992 <SystemClock_Config+0x7a>
 800198e:	b672      	cpsid	i
  while (1)
 8001990:	e7fe      	b.n	8001990 <SystemClock_Config+0x78>
}
 8001992:	b014      	add	sp, #80	@ 0x50
 8001994:	bd10      	pop	{r4, pc}
	...

08001998 <main>:
{
 8001998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199c:	4ca4      	ldr	r4, [pc, #656]	@ (8001c30 <main+0x298>)
{
 800199e:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 80019a0:	f001 f8e4 	bl	8002b6c <HAL_Init>
  SystemClock_Config();
 80019a4:	f7ff ffb8 	bl	8001918 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	2210      	movs	r2, #16
 80019aa:	2100      	movs	r1, #0
 80019ac:	a814      	add	r0, sp, #80	@ 0x50
 80019ae:	f006 faea 	bl	8007f86 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2500      	movs	r5, #0
 80019b6:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019b8:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ba:	f043 0310 	orr.w	r3, r3, #16
 80019be:	61a3      	str	r3, [r4, #24]
 80019c0:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	9303      	str	r3, [sp, #12]
 80019ca:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019cc:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80019ce:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d0:	f043 0320 	orr.w	r3, r3, #32
 80019d4:	61a3      	str	r3, [r4, #24]
 80019d6:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80019d8:	4896      	ldr	r0, [pc, #600]	@ (8001c34 <main+0x29c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	9304      	str	r3, [sp, #16]
 80019e0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	69a3      	ldr	r3, [r4, #24]
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	61a3      	str	r3, [r4, #24]
 80019ea:	69a3      	ldr	r3, [r4, #24]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	9305      	str	r3, [sp, #20]
 80019f2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f4:	69a3      	ldr	r3, [r4, #24]
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	61a3      	str	r3, [r4, #24]
 80019fc:	69a3      	ldr	r3, [r4, #24]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	9306      	str	r3, [sp, #24]
 8001a04:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a06:	f002 fbd8 	bl	80041ba <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	488a      	ldr	r0, [pc, #552]	@ (8001c34 <main+0x29c>)
 8001a0c:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	e9cd 7514 	strd	r7, r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a12:	9716      	str	r7, [sp, #88]	@ 0x58
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f002 fa36 	bl	8003e84 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	4886      	ldr	r0, [pc, #536]	@ (8001c34 <main+0x29c>)
 8001a1a:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	e9cd 5616 	strd	r5, r6, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f002 fa2e 	bl	8003e84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin|KEY_2_Pin|KEY_3_Pin;
 8001a28:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2c:	4881      	ldr	r0, [pc, #516]	@ (8001c34 <main+0x29c>)
 8001a2e:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	e9cd 3514 	strd	r3, r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a34:	9616      	str	r6, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f002 fa25 	bl	8003e84 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a3a:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a3c:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a3e:	433b      	orrs	r3, r7
 8001a40:	6163      	str	r3, [r4, #20]
 8001a42:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a44:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a46:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a48:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a4e:	f001 ff40 	bl	80038d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a52:	200b      	movs	r0, #11
 8001a54:	f001 ff59 	bl	800390a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a58:	462a      	mov	r2, r5
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	200c      	movs	r0, #12
 8001a5e:	f001 ff38 	bl	80038d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a62:	200c      	movs	r0, #12
 8001a64:	f001 ff51 	bl	800390a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a68:	462a      	mov	r2, r5
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	200d      	movs	r0, #13
 8001a6e:	f001 ff30 	bl	80038d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a72:	200d      	movs	r0, #13
 8001a74:	f001 ff49 	bl	800390a <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8001a78:	4c6f      	ldr	r4, [pc, #444]	@ (8001c38 <main+0x2a0>)
 8001a7a:	4b70      	ldr	r3, [pc, #448]	@ (8001c3c <main+0x2a4>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a7c:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8001a7e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a84:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a86:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a8a:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
 8001a8e:	9516      	str	r5, [sp, #88]	@ 0x58
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a90:	7327      	strb	r7, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a92:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a94:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a96:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001a98:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a9a:	f001 f8ed 	bl	8002c78 <HAL_ADC_Init>
 8001a9e:	b108      	cbz	r0, 8001aa4 <main+0x10c>
 8001aa0:	b672      	cpsid	i
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <main+0x10a>
  sConfig.Channel = ADC_CHANNEL_4;
 8001aa4:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aa6:	e9cd 3714 	strd	r3, r7, [sp, #80]	@ 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001aaa:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aac:	4620      	mov	r0, r4
 8001aae:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001ab0:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	f001 fc35 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001ab6:	b108      	cbz	r0, 8001abc <main+0x124>
 8001ab8:	b672      	cpsid	i
  while (1)
 8001aba:	e7fe      	b.n	8001aba <main+0x122>
  sConfig.Channel = ADC_CHANNEL_5;
 8001abc:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abe:	4620      	mov	r0, r4
 8001ac0:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ac2:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac6:	f001 fc2b 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b108      	cbz	r0, 8001ad2 <main+0x13a>
 8001ace:	b672      	cpsid	i
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <main+0x138>
  hi2c1.Instance = I2C1;
 8001ad2:	485b      	ldr	r0, [pc, #364]	@ (8001c40 <main+0x2a8>)
  hi2c1.Init.ClockSpeed = 100000;
 8001ad4:	495b      	ldr	r1, [pc, #364]	@ (8001c44 <main+0x2ac>)
 8001ad6:	4a5c      	ldr	r2, [pc, #368]	@ (8001c48 <main+0x2b0>)
  hi2c1.Init.OwnAddress1 = 0;
 8001ad8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001adc:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aec:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aee:	f002 fb7d 	bl	80041ec <HAL_I2C_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	b108      	cbz	r0, 8001afa <main+0x162>
 8001af6:	b672      	cpsid	i
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <main+0x160>
  huart1.Init.BaudRate = 115200;
 8001afa:	f44f 35e1 	mov.w	r5, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001afe:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 8001b00:	4852      	ldr	r0, [pc, #328]	@ (8001c4c <main+0x2b4>)
  huart1.Init.BaudRate = 115200;
 8001b02:	4a53      	ldr	r2, [pc, #332]	@ (8001c50 <main+0x2b8>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b04:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b08:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b0c:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0e:	61c3      	str	r3, [r0, #28]
  huart1.Init.BaudRate = 115200;
 8001b10:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b14:	f004 fb4d 	bl	80061b2 <HAL_UART_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b108      	cbz	r0, 8001b20 <main+0x188>
 8001b1c:	b672      	cpsid	i
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <main+0x186>
  huart3.Instance = USART3;
 8001b20:	484c      	ldr	r0, [pc, #304]	@ (8001c54 <main+0x2bc>)
 8001b22:	4a4d      	ldr	r2, [pc, #308]	@ (8001c58 <main+0x2c0>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b24:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001b28:	e9c0 2500 	strd	r2, r5, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b34:	f004 fb3d 	bl	80061b2 <HAL_UART_Init>
 8001b38:	4606      	mov	r6, r0
 8001b3a:	b108      	cbz	r0, 8001b40 <main+0x1a8>
 8001b3c:	b672      	cpsid	i
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <main+0x1a6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b40:	4601      	mov	r1, r0
 8001b42:	2210      	movs	r2, #16
 8001b44:	a809      	add	r0, sp, #36	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b46:	ad0d      	add	r5, sp, #52	@ 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b48:	f006 fa1d 	bl	8007f86 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4c:	221c      	movs	r2, #28
 8001b4e:	4631      	mov	r1, r6
 8001b50:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b52:	e9cd 6607 	strd	r6, r6, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b56:	f006 fa16 	bl	8007f86 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	4631      	mov	r1, r6
 8001b5e:	a814      	add	r0, sp, #80	@ 0x50
 8001b60:	f006 fa11 	bl	8007f86 <memset>
  htim1.Init.Prescaler = 72;
 8001b64:	2348      	movs	r3, #72	@ 0x48
  htim1.Instance = TIM1;
 8001b66:	4c3d      	ldr	r4, [pc, #244]	@ (8001c5c <main+0x2c4>)
  htim1.Init.Prescaler = 72;
 8001b68:	4a3d      	ldr	r2, [pc, #244]	@ (8001c60 <main+0x2c8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b6a:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 72;
 8001b6c:	e9c4 2300 	strd	r2, r3, [r4]
  htim1.Init.Period = 72-1;
 8001b70:	2347      	movs	r3, #71	@ 0x47
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b72:	e9c4 6605 	strd	r6, r6, [r4, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	e9c4 3603 	strd	r3, r6, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7a:	60a6      	str	r6, [r4, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b7c:	f003 fca8 	bl	80054d0 <HAL_TIM_Base_Init>
 8001b80:	b108      	cbz	r0, 8001b86 <main+0x1ee>
 8001b82:	b672      	cpsid	i
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <main+0x1ec>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	a909      	add	r1, sp, #36	@ 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b90:	f003 fef4 	bl	800597c <HAL_TIM_ConfigClockSource>
 8001b94:	b108      	cbz	r0, 8001b9a <main+0x202>
 8001b96:	b672      	cpsid	i
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <main+0x200>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f003 fd32 	bl	8005604 <HAL_TIM_PWM_Init>
 8001ba0:	b108      	cbz	r0, 8001ba6 <main+0x20e>
 8001ba2:	b672      	cpsid	i
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <main+0x20c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001baa:	a907      	add	r1, sp, #28
 8001bac:	4620      	mov	r0, r4
 8001bae:	f004 fa51 	bl	8006054 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	b108      	cbz	r0, 8001bb8 <main+0x220>
 8001bb4:	b672      	cpsid	i
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <main+0x21e>
  sConfigOC.Pulse = 0;
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	4827      	ldr	r0, [pc, #156]	@ (8001c5c <main+0x2c4>)
  sConfigOC.Pulse = 0;
 8001bc0:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bc4:	e9cd 220f 	strd	r2, r2, [sp, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc8:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bcc:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bce:	f003 fe13 	bl	80057f8 <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	b108      	cbz	r0, 8001bd8 <main+0x240>
 8001bd4:	b672      	cpsid	i
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <main+0x23e>
  sConfigOC.Pulse = 36;
 8001bd8:	2324      	movs	r3, #36	@ 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001bda:	f44f 7980 	mov.w	r9, #256	@ 0x100
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bde:	2204      	movs	r2, #4
 8001be0:	4629      	mov	r1, r5
 8001be2:	481e      	ldr	r0, [pc, #120]	@ (8001c5c <main+0x2c4>)
  sConfigOC.Pulse = 36;
 8001be4:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001be6:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bea:	f003 fe05 	bl	80057f8 <HAL_TIM_PWM_ConfigChannel>
 8001bee:	b108      	cbz	r0, 8001bf4 <main+0x25c>
 8001bf0:	b672      	cpsid	i
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <main+0x25a>
  sConfigOC.Pulse = 1;
 8001bf4:	f04f 0801 	mov.w	r8, #1
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf8:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	4817      	ldr	r0, [pc, #92]	@ (8001c5c <main+0x2c4>)
  sConfigOC.Pulse = 1;
 8001c00:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c04:	f003 fdf8 	bl	80057f8 <HAL_TIM_PWM_ConfigChannel>
 8001c08:	b108      	cbz	r0, 8001c0e <main+0x276>
 8001c0a:	b672      	cpsid	i
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <main+0x274>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c12:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c16:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c1a:	9018      	str	r0, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c1c:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c1e:	a914      	add	r1, sp, #80	@ 0x50
 8001c20:	480e      	ldr	r0, [pc, #56]	@ (8001c5c <main+0x2c4>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c22:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c24:	f004 fa74 	bl	8006110 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c28:	4607      	mov	r7, r0
 8001c2a:	b1d8      	cbz	r0, 8001c64 <main+0x2cc>
 8001c2c:	b672      	cpsid	i
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <main+0x296>
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	20000514 	.word	0x20000514
 8001c3c:	40012400 	.word	0x40012400
 8001c40:	2000044c 	.word	0x2000044c
 8001c44:	40005400 	.word	0x40005400
 8001c48:	000186a0 	.word	0x000186a0
 8001c4c:	20000374 	.word	0x20000374
 8001c50:	40013800 	.word	0x40013800
 8001c54:	2000032c 	.word	0x2000032c
 8001c58:	40004800 	.word	0x40004800
 8001c5c:	20000404 	.word	0x20000404
 8001c60:	40012c00 	.word	0x40012c00
  HAL_TIM_MspPostInit(&htim1);
 8001c64:	4891      	ldr	r0, [pc, #580]	@ (8001eac <main+0x514>)
 8001c66:	f000 fceb 	bl	8002640 <HAL_TIM_MspPostInit>
  hadc2.Instance = ADC2;
 8001c6a:	4e91      	ldr	r6, [pc, #580]	@ (8001eb0 <main+0x518>)
 8001c6c:	4b91      	ldr	r3, [pc, #580]	@ (8001eb4 <main+0x51c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c6e:	e9cd 7714 	strd	r7, r7, [sp, #80]	@ 0x50
 8001c72:	9716      	str	r7, [sp, #88]	@ 0x58
  hadc2.Instance = ADC2;
 8001c74:	6033      	str	r3, [r6, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c76:	7537      	strb	r7, [r6, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c78:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c7c:	6077      	str	r7, [r6, #4]
  hadc2.Init.NbrOfConversion = 3;
 8001c7e:	2703      	movs	r7, #3
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c80:	4630      	mov	r0, r6
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c82:	f8c6 9008 	str.w	r9, [r6, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001c86:	f886 800c 	strb.w	r8, [r6, #12]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c8a:	61f3      	str	r3, [r6, #28]
  hadc2.Init.NbrOfConversion = 3;
 8001c8c:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c8e:	f000 fff3 	bl	8002c78 <HAL_ADC_Init>
 8001c92:	b108      	cbz	r0, 8001c98 <main+0x300>
 8001c94:	b672      	cpsid	i
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <main+0x2fe>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c98:	9016      	str	r0, [sp, #88]	@ 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c9a:	a914      	add	r1, sp, #80	@ 0x50
 8001c9c:	4630      	mov	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c9e:	e9cd 8814 	strd	r8, r8, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ca2:	f001 fb3d 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001ca6:	b108      	cbz	r0, 8001cac <main+0x314>
 8001ca8:	b672      	cpsid	i
  while (1)
 8001caa:	e7fe      	b.n	8001caa <main+0x312>
  sConfig.Channel = ADC_CHANNEL_2;
 8001cac:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cae:	4630      	mov	r0, r6
 8001cb0:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cb2:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cb6:	f001 fb33 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001cba:	b108      	cbz	r0, 8001cc0 <main+0x328>
 8001cbc:	b672      	cpsid	i
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <main+0x326>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cc0:	4630      	mov	r0, r6
 8001cc2:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cc4:	e9cd 7714 	strd	r7, r7, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cc8:	f001 fb2a 	bl	8003320 <HAL_ADC_ConfigChannel>
 8001ccc:	4606      	mov	r6, r0
 8001cce:	b108      	cbz	r0, 8001cd4 <main+0x33c>
 8001cd0:	b672      	cpsid	i
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <main+0x33a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd4:	4601      	mov	r1, r0
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f006 f954 	bl	8007f86 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cde:	221c      	movs	r2, #28
 8001ce0:	4631      	mov	r1, r6
 8001ce2:	a814      	add	r0, sp, #80	@ 0x50
  htim3.Instance = TIM3;
 8001ce4:	4f74      	ldr	r7, [pc, #464]	@ (8001eb8 <main+0x520>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce6:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cea:	f006 f94c 	bl	8007f86 <memset>
  htim3.Instance = TIM3;
 8001cee:	4b73      	ldr	r3, [pc, #460]	@ (8001ebc <main+0x524>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cf0:	4638      	mov	r0, r7
  htim3.Init.Prescaler = 0;
 8001cf2:	e9c7 3600 	strd	r3, r6, [r7]
  htim3.Init.Period = 720;
 8001cf6:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	60be      	str	r6, [r7, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfc:	e9c7 3603 	strd	r3, r6, [r7, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d00:	61be      	str	r6, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d02:	f003 fbe5 	bl	80054d0 <HAL_TIM_Base_Init>
 8001d06:	b108      	cbz	r0, 8001d0c <main+0x374>
 8001d08:	b672      	cpsid	i
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <main+0x372>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d10:	4629      	mov	r1, r5
 8001d12:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d14:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d16:	f003 fe31 	bl	800597c <HAL_TIM_ConfigClockSource>
 8001d1a:	b108      	cbz	r0, 8001d20 <main+0x388>
 8001d1c:	b672      	cpsid	i
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <main+0x386>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d20:	4865      	ldr	r0, [pc, #404]	@ (8001eb8 <main+0x520>)
 8001d22:	f003 fc6f 	bl	8005604 <HAL_TIM_PWM_Init>
 8001d26:	b108      	cbz	r0, 8001d2c <main+0x394>
 8001d28:	b672      	cpsid	i
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <main+0x392>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d30:	a909      	add	r1, sp, #36	@ 0x24
 8001d32:	4861      	ldr	r0, [pc, #388]	@ (8001eb8 <main+0x520>)
 8001d34:	f004 f98e 	bl	8006054 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	b108      	cbz	r0, 8001d40 <main+0x3a8>
 8001d3c:	b672      	cpsid	i
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <main+0x3a6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d40:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d42:	9016      	str	r0, [sp, #88]	@ 0x58
  sConfigOC.Pulse = 0;
 8001d44:	e9cd 3014 	strd	r3, r0, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d48:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4a:	a914      	add	r1, sp, #80	@ 0x50
 8001d4c:	485a      	ldr	r0, [pc, #360]	@ (8001eb8 <main+0x520>)
 8001d4e:	f003 fd53 	bl	80057f8 <HAL_TIM_PWM_ConfigChannel>
 8001d52:	4606      	mov	r6, r0
 8001d54:	b108      	cbz	r0, 8001d5a <main+0x3c2>
 8001d56:	b672      	cpsid	i
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <main+0x3c0>
  HAL_TIM_MspPostInit(&htim3);
 8001d5a:	4857      	ldr	r0, [pc, #348]	@ (8001eb8 <main+0x520>)
 8001d5c:	f000 fc70 	bl	8002640 <HAL_TIM_MspPostInit>
  HAL_ADC_Start(&hadc1);
 8001d60:	4857      	ldr	r0, [pc, #348]	@ (8001ec0 <main+0x528>)
 8001d62:	f001 f861 	bl	8002e28 <HAL_ADC_Start>
  ssd1306_Init();
 8001d66:	f000 f8f5 	bl	8001f54 <ssd1306_Init>
  ssd1306_TestFonts();
 8001d6a:	f000 fad1 	bl	8002310 <ssd1306_TestFonts>
  HAL_TIM_Base_Start(&htim1);
 8001d6e:	484f      	ldr	r0, [pc, #316]	@ (8001eac <main+0x514>)
 8001d70:	f003 fbfe 	bl	8005570 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d74:	4631      	mov	r1, r6
 8001d76:	484d      	ldr	r0, [pc, #308]	@ (8001eac <main+0x514>)
 8001d78:	f003 fc9c 	bl	80056b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	484b      	ldr	r0, [pc, #300]	@ (8001eac <main+0x514>)
 8001d80:	f003 fc98 	bl	80056b4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8001d84:	484c      	ldr	r0, [pc, #304]	@ (8001eb8 <main+0x520>)
 8001d86:	f003 fbf3 	bl	8005570 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d8a:	4631      	mov	r1, r6
 8001d8c:	484a      	ldr	r0, [pc, #296]	@ (8001eb8 <main+0x520>)
 8001d8e:	f003 fc91 	bl	80056b4 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)PUMP, 2);
 8001d92:	2202      	movs	r2, #2
 8001d94:	494b      	ldr	r1, [pc, #300]	@ (8001ec4 <main+0x52c>)
 8001d96:	484a      	ldr	r0, [pc, #296]	@ (8001ec0 <main+0x528>)
 8001d98:	f001 f8f4 	bl	8002f84 <HAL_ADC_Start_DMA>
  DHT_sensor DHT11_Sensor = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8001d9c:	220e      	movs	r2, #14
 8001d9e:	4631      	mov	r1, r6
 8001da0:	f10d 0056 	add.w	r0, sp, #86	@ 0x56
 8001da4:	f006 f8ef 	bl	8007f86 <memset>
 8001da8:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <main+0x530>)
  for (size_t var = 0; var < 20000; ++var) {
 8001daa:	f644 6820 	movw	r8, #20000	@ 0x4e20
  DHT_sensor DHT11_Sensor = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8001dae:	9314      	str	r3, [sp, #80]	@ 0x50
 8001db0:	2301      	movs	r3, #1
 8001db2:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
  BuzzerTypeDef buzzer = {&htim1, TIM_CHANNEL_3, 100, 10};
 8001db6:	4b45      	ldr	r3, [pc, #276]	@ (8001ecc <main+0x534>)
 8001db8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  Buzzer_Init(&buzzer);
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	f7ff fc9a 	bl	80016f8 <Buzzer_Init>
	  Buzzer_SetFrequency(&buzzer, var);
 8001dc4:	4631      	mov	r1, r6
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	f7ff fcda 	bl	8001780 <Buzzer_SetFrequency>
  for (size_t var = 0; var < 20000; ++var) {
 8001dcc:	3601      	adds	r6, #1
	HAL_Delay(1);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f000 ff2e 	bl	8002c30 <HAL_Delay>
  for (size_t var = 0; var < 20000; ++var) {
 8001dd4:	4546      	cmp	r6, r8
 8001dd6:	d1f5      	bne.n	8001dc4 <main+0x42c>
  Buzzer_SetVolume(&buzzer, 0);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4628      	mov	r0, r5
 8001ddc:	f7ff fcea 	bl	80017b4 <Buzzer_SetVolume>
  ESP_UART_Init(&huart3);
 8001de0:	483b      	ldr	r0, [pc, #236]	@ (8001ed0 <main+0x538>)
 8001de2:	f7ff f8d1 	bl	8000f88 <ESP_UART_Init>
  ESP_INIT_BASE();
 8001de6:	f7ff fa67 	bl	80012b8 <ESP_INIT_BASE>
  ssd1306_NetWorkView();
 8001dea:	f7ff fd17 	bl	800181c <ssd1306_NetWorkView>
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001dee:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 8001ec0 <main+0x528>
 8001df2:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8001ed4 <main+0x53c>
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001df6:	4e34      	ldr	r6, [pc, #208]	@ (8001ec8 <main+0x530>)
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001df8:	4650      	mov	r0, sl
 8001dfa:	f001 f9a1 	bl	8003140 <HAL_ADC_GetValue>
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001dfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001e02:	f8a9 0000 	strh.w	r0, [r9]
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001e06:	4630      	mov	r0, r6
 8001e08:	f002 f9c0 	bl	800418c <HAL_GPIO_ReadPin>
 8001e0c:	4d32      	ldr	r5, [pc, #200]	@ (8001ed8 <main+0x540>)
 8001e0e:	b140      	cbz	r0, 8001e22 <main+0x48a>
	    	if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001e10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e14:	4630      	mov	r0, r6
 8001e16:	f002 f9b9 	bl	800418c <HAL_GPIO_ReadPin>
 8001e1a:	b110      	cbz	r0, 8001e22 <main+0x48a>
	    	Period_-=10;
 8001e1c:	882b      	ldrh	r3, [r5, #0]
 8001e1e:	3b0a      	subs	r3, #10
 8001e20:	802b      	strh	r3, [r5, #0]
	    if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001e22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e26:	4630      	mov	r0, r6
 8001e28:	f002 f9b0 	bl	800418c <HAL_GPIO_ReadPin>
 8001e2c:	b158      	cbz	r0, 8001e46 <main+0x4ae>
	        if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001e2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e32:	4630      	mov	r0, r6
 8001e34:	f002 f9aa 	bl	800418c <HAL_GPIO_ReadPin>
 8001e38:	b128      	cbz	r0, 8001e46 <main+0x4ae>
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001e3a:	2200      	movs	r2, #0
	    	    	Period_--;
 8001e3c:	882b      	ldrh	r3, [r5, #0]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	802b      	strh	r3, [r5, #0]
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	63da      	str	r2, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001e46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	f002 f99e 	bl	800418c <HAL_GPIO_ReadPin>
 8001e50:	b158      	cbz	r0, 8001e6a <main+0x4d2>
	    	 if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001e52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e56:	4630      	mov	r0, r6
 8001e58:	f002 f998 	bl	800418c <HAL_GPIO_ReadPin>
 8001e5c:	b128      	cbz	r0, 8001e6a <main+0x4d2>
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001e5e:	220a      	movs	r2, #10
	    		    	Period_++;
 8001e60:	882b      	ldrh	r3, [r5, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	802b      	strh	r3, [r5, #0]
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	63da      	str	r2, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001e6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e6e:	4630      	mov	r0, r6
 8001e70:	f002 f98c 	bl	800418c <HAL_GPIO_ReadPin>
 8001e74:	b140      	cbz	r0, 8001e88 <main+0x4f0>
		    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001e76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e7a:	4630      	mov	r0, r6
 8001e7c:	f002 f986 	bl	800418c <HAL_GPIO_ReadPin>
 8001e80:	b110      	cbz	r0, 8001e88 <main+0x4f0>
		    	Period_+=10;
 8001e82:	882b      	ldrh	r3, [r5, #0]
 8001e84:	330a      	adds	r3, #10
 8001e86:	802b      	strh	r3, [r5, #0]
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 8001e88:	46e8      	mov	r8, sp
 8001e8a:	a914      	add	r1, sp, #80	@ 0x50
 8001e8c:	4640      	mov	r0, r8
 8001e8e:	f7ff fa91 	bl	80013b4 <DHT_getData>
 8001e92:	e898 0003 	ldmia.w	r8, {r0, r1}
		    __HAL_TIM_SET_PRESCALER(&htim1, Period_);
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	882b      	ldrh	r3, [r5, #0]
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 8001e9a:	f8df b040 	ldr.w	fp, [pc, #64]	@ 8001edc <main+0x544>
		    __HAL_TIM_SET_PRESCALER(&htim1, Period_);
 8001e9e:	6293      	str	r3, [r2, #40]	@ 0x28
		  __HAL_TIM_SET_COMPARE(&htim3, 1, Period_);
 8001ea0:	683a      	ldr	r2, [r7, #0]
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 8001ea2:	e88b 0003 	stmia.w	fp, {r0, r1}
		  __HAL_TIM_SET_COMPARE(&htim3, 1, Period_);
 8001ea6:	6413      	str	r3, [r2, #64]	@ 0x40
  {
 8001ea8:	e7a6      	b.n	8001df8 <main+0x460>
 8001eaa:	bf00      	nop
 8001eac:	20000404 	.word	0x20000404
 8001eb0:	200004e4 	.word	0x200004e4
 8001eb4:	40012800 	.word	0x40012800
 8001eb8:	200003bc 	.word	0x200003bc
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	20000514 	.word	0x20000514
 8001ec4:	2000029e 	.word	0x2000029e
 8001ec8:	40010c00 	.word	0x40010c00
 8001ecc:	0800b894 	.word	0x0800b894
 8001ed0:	2000032c 	.word	0x2000032c
 8001ed4:	200002a2 	.word	0x200002a2
 8001ed8:	20000006 	.word	0x20000006
 8001edc:	2000021c 	.word	0x2000021c

08001ee0 <Error_Handler>:
 8001ee0:	b672      	cpsid	i
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <Error_Handler+0x2>

08001ee4 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af04      	add	r7, sp, #16
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	9302      	str	r3, [sp, #8]
 8001f00:	2301      	movs	r3, #1
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2178      	movs	r1, #120	@ 0x78
 8001f0e:	4803      	ldr	r0, [pc, #12]	@ (8001f1c <ssd1306_WriteCommand+0x2c>)
 8001f10:	f002 fab0 	bl	8004474 <HAL_I2C_Mem_Write>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	2000044c 	.word	0x2000044c

08001f20 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af04      	add	r7, sp, #16
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f32:	9202      	str	r2, [sp, #8]
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	2240      	movs	r2, #64	@ 0x40
 8001f3e:	2178      	movs	r1, #120	@ 0x78
 8001f40:	4803      	ldr	r0, [pc, #12]	@ (8001f50 <ssd1306_WriteData+0x30>)
 8001f42:	f002 fa97 	bl	8004474 <HAL_I2C_Mem_Write>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000044c 	.word	0x2000044c

08001f54 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001f58:	f7ff ffc4 	bl	8001ee4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001f5c:	2064      	movs	r0, #100	@ 0x64
 8001f5e:	f000 fe67 	bl	8002c30 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001f62:	20ae      	movs	r0, #174	@ 0xae
 8001f64:	f7ff ffc4 	bl	8001ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001f68:	2020      	movs	r0, #32
 8001f6a:	f7ff ffc1 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff ffbe 	bl	8001ef0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f74:	20b0      	movs	r0, #176	@ 0xb0
 8001f76:	f7ff ffbb 	bl	8001ef0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001f7a:	20c8      	movs	r0, #200	@ 0xc8
 8001f7c:	f7ff ffb8 	bl	8001ef0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff ffb5 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001f86:	2010      	movs	r0, #16
 8001f88:	f7ff ffb2 	bl	8001ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001f8c:	2040      	movs	r0, #64	@ 0x40
 8001f8e:	f7ff ffaf 	bl	8001ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001f92:	2081      	movs	r0, #129	@ 0x81
 8001f94:	f7ff ffac 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001f98:	20ff      	movs	r0, #255	@ 0xff
 8001f9a:	f7ff ffa9 	bl	8001ef0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001f9e:	20a1      	movs	r0, #161	@ 0xa1
 8001fa0:	f7ff ffa6 	bl	8001ef0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001fa4:	20a6      	movs	r0, #166	@ 0xa6
 8001fa6:	f7ff ffa3 	bl	8001ef0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001faa:	20a8      	movs	r0, #168	@ 0xa8
 8001fac:	f7ff ffa0 	bl	8001ef0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001fb0:	203f      	movs	r0, #63	@ 0x3f
 8001fb2:	f7ff ff9d 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fb6:	20a4      	movs	r0, #164	@ 0xa4
 8001fb8:	f7ff ff9a 	bl	8001ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001fbc:	20d3      	movs	r0, #211	@ 0xd3
 8001fbe:	f7ff ff97 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff94 	bl	8001ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fc8:	20d5      	movs	r0, #213	@ 0xd5
 8001fca:	f7ff ff91 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001fce:	20f0      	movs	r0, #240	@ 0xf0
 8001fd0:	f7ff ff8e 	bl	8001ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001fd4:	20d9      	movs	r0, #217	@ 0xd9
 8001fd6:	f7ff ff8b 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001fda:	2022      	movs	r0, #34	@ 0x22
 8001fdc:	f7ff ff88 	bl	8001ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001fe0:	20da      	movs	r0, #218	@ 0xda
 8001fe2:	f7ff ff85 	bl	8001ef0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001fe6:	2012      	movs	r0, #18
 8001fe8:	f7ff ff82 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001fec:	20db      	movs	r0, #219	@ 0xdb
 8001fee:	f7ff ff7f 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ff2:	2020      	movs	r0, #32
 8001ff4:	f7ff ff7c 	bl	8001ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001ff8:	208d      	movs	r0, #141	@ 0x8d
 8001ffa:	f7ff ff79 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ffe:	2014      	movs	r0, #20
 8002000:	f7ff ff76 	bl	8001ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002004:	20af      	movs	r0, #175	@ 0xaf
 8002006:	f7ff ff73 	bl	8001ef0 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 800200a:	2000      	movs	r0, #0
 800200c:	f000 f810 	bl	8002030 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002010:	f000 f830 	bl	8002074 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <ssd1306_Init+0xd8>)
 8002016:	2200      	movs	r2, #0
 8002018:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800201a:	4b04      	ldr	r3, [pc, #16]	@ (800202c <ssd1306_Init+0xd8>)
 800201c:	2200      	movs	r2, #0
 800201e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002020:	4b02      	ldr	r3, [pc, #8]	@ (800202c <ssd1306_Init+0xd8>)
 8002022:	2201      	movs	r2, #1
 8002024:	715a      	strb	r2, [r3, #5]
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000944 	.word	0x20000944

08002030 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e00d      	b.n	800205c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <ssd1306_Fill+0x1a>
 8002046:	2100      	movs	r1, #0
 8002048:	e000      	b.n	800204c <ssd1306_Fill+0x1c>
 800204a:	21ff      	movs	r1, #255	@ 0xff
 800204c:	4a08      	ldr	r2, [pc, #32]	@ (8002070 <ssd1306_Fill+0x40>)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4413      	add	r3, r2
 8002052:	460a      	mov	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3301      	adds	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002062:	d3ed      	bcc.n	8002040 <ssd1306_Fill+0x10>
    }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	20000544 	.word	0x20000544

08002074 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800207a:	2300      	movs	r3, #0
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	e016      	b.n	80020ae <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	3b50      	subs	r3, #80	@ 0x50
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff32 	bl	8001ef0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff ff2f 	bl	8001ef0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002092:	2010      	movs	r0, #16
 8002094:	f7ff ff2c 	bl	8001ef0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	01db      	lsls	r3, r3, #7
 800209c:	4a08      	ldr	r2, [pc, #32]	@ (80020c0 <ssd1306_UpdateScreen+0x4c>)
 800209e:	4413      	add	r3, r2
 80020a0:	2180      	movs	r1, #128	@ 0x80
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff3c 	bl	8001f20 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	3301      	adds	r3, #1
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b07      	cmp	r3, #7
 80020b2:	d9e5      	bls.n	8002080 <ssd1306_UpdateScreen+0xc>
    }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000544 	.word	0x20000544

080020c4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
 80020ce:	460b      	mov	r3, r1
 80020d0:	71bb      	strb	r3, [r7, #6]
 80020d2:	4613      	mov	r3, r2
 80020d4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db48      	blt.n	8002170 <ssd1306_DrawPixel+0xac>
 80020de:	79bb      	ldrb	r3, [r7, #6]
 80020e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80020e2:	d845      	bhi.n	8002170 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80020e4:	4b25      	ldr	r3, [pc, #148]	@ (800217c <ssd1306_DrawPixel+0xb8>)
 80020e6:	791b      	ldrb	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80020ec:	797b      	ldrb	r3, [r7, #5]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf0c      	ite	eq
 80020f2:	2301      	moveq	r3, #1
 80020f4:	2300      	movne	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80020fa:	797b      	ldrb	r3, [r7, #5]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d11a      	bne.n	8002136 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002100:	79fa      	ldrb	r2, [r7, #7]
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	b2d8      	uxtb	r0, r3
 8002108:	4603      	mov	r3, r0
 800210a:	01db      	lsls	r3, r3, #7
 800210c:	4413      	add	r3, r2
 800210e:	4a1c      	ldr	r2, [pc, #112]	@ (8002180 <ssd1306_DrawPixel+0xbc>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	b25a      	sxtb	r2, r3
 8002114:	79bb      	ldrb	r3, [r7, #6]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	2101      	movs	r1, #1
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	b25b      	sxtb	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b259      	sxtb	r1, r3
 8002126:	79fa      	ldrb	r2, [r7, #7]
 8002128:	4603      	mov	r3, r0
 800212a:	01db      	lsls	r3, r3, #7
 800212c:	4413      	add	r3, r2
 800212e:	b2c9      	uxtb	r1, r1
 8002130:	4a13      	ldr	r2, [pc, #76]	@ (8002180 <ssd1306_DrawPixel+0xbc>)
 8002132:	54d1      	strb	r1, [r2, r3]
 8002134:	e01d      	b.n	8002172 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002136:	79fa      	ldrb	r2, [r7, #7]
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	08db      	lsrs	r3, r3, #3
 800213c:	b2d8      	uxtb	r0, r3
 800213e:	4603      	mov	r3, r0
 8002140:	01db      	lsls	r3, r3, #7
 8002142:	4413      	add	r3, r2
 8002144:	4a0e      	ldr	r2, [pc, #56]	@ (8002180 <ssd1306_DrawPixel+0xbc>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	b25a      	sxtb	r2, r3
 800214a:	79bb      	ldrb	r3, [r7, #6]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	2101      	movs	r1, #1
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	b25b      	sxtb	r3, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	b25b      	sxtb	r3, r3
 800215c:	4013      	ands	r3, r2
 800215e:	b259      	sxtb	r1, r3
 8002160:	79fa      	ldrb	r2, [r7, #7]
 8002162:	4603      	mov	r3, r0
 8002164:	01db      	lsls	r3, r3, #7
 8002166:	4413      	add	r3, r2
 8002168:	b2c9      	uxtb	r1, r1
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <ssd1306_DrawPixel+0xbc>)
 800216c:	54d1      	strb	r1, [r2, r3]
 800216e:	e000      	b.n	8002172 <ssd1306_DrawPixel+0xae>
        return;
 8002170:	bf00      	nop
    }
}
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000944 	.word	0x20000944
 8002180:	20000544 	.word	0x20000544

08002184 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	4604      	mov	r4, r0
 800218c:	1d38      	adds	r0, r7, #4
 800218e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002192:	461a      	mov	r2, r3
 8002194:	4623      	mov	r3, r4
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	4613      	mov	r3, r2
 800219a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b1f      	cmp	r3, #31
 80021a0:	d902      	bls.n	80021a8 <ssd1306_WriteChar+0x24>
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80021a6:	d901      	bls.n	80021ac <ssd1306_WriteChar+0x28>
        return 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e06c      	b.n	8002286 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021ac:	4b38      	ldr	r3, [pc, #224]	@ (8002290 <ssd1306_WriteChar+0x10c>)
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	793b      	ldrb	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	2b80      	cmp	r3, #128	@ 0x80
 80021b8:	dc06      	bgt.n	80021c8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80021ba:	4b35      	ldr	r3, [pc, #212]	@ (8002290 <ssd1306_WriteChar+0x10c>)
 80021bc:	885b      	ldrh	r3, [r3, #2]
 80021be:	461a      	mov	r2, r3
 80021c0:	797b      	ldrb	r3, [r7, #5]
 80021c2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021c4:	2b40      	cmp	r3, #64	@ 0x40
 80021c6:	dd01      	ble.n	80021cc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e05c      	b.n	8002286 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	e04c      	b.n	800226c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3b20      	subs	r3, #32
 80021d8:	7979      	ldrb	r1, [r7, #5]
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4619      	mov	r1, r3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	440b      	add	r3, r1
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4413      	add	r3, r2
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	e034      	b.n	800225c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d012      	beq.n	8002228 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002202:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <ssd1306_WriteChar+0x10c>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4413      	add	r3, r2
 800220e:	b2d8      	uxtb	r0, r3
 8002210:	4b1f      	ldr	r3, [pc, #124]	@ (8002290 <ssd1306_WriteChar+0x10c>)
 8002212:	885b      	ldrh	r3, [r3, #2]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	4413      	add	r3, r2
 800221c:	b2db      	uxtb	r3, r3
 800221e:	7bba      	ldrb	r2, [r7, #14]
 8002220:	4619      	mov	r1, r3
 8002222:	f7ff ff4f 	bl	80020c4 <ssd1306_DrawPixel>
 8002226:	e016      	b.n	8002256 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002228:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <ssd1306_WriteChar+0x10c>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4413      	add	r3, r2
 8002234:	b2d8      	uxtb	r0, r3
 8002236:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <ssd1306_WriteChar+0x10c>)
 8002238:	885b      	ldrh	r3, [r3, #2]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4413      	add	r3, r2
 8002242:	b2d9      	uxtb	r1, r3
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	f7ff ff37 	bl	80020c4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	3301      	adds	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	793b      	ldrb	r3, [r7, #4]
 800225e:	461a      	mov	r2, r3
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	4293      	cmp	r3, r2
 8002264:	d3c5      	bcc.n	80021f2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3301      	adds	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	797b      	ldrb	r3, [r7, #5]
 800226e:	461a      	mov	r2, r3
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	4293      	cmp	r3, r2
 8002274:	d3ad      	bcc.n	80021d2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <ssd1306_WriteChar+0x10c>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	793a      	ldrb	r2, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <ssd1306_WriteChar+0x10c>)
 8002282:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3724      	adds	r7, #36	@ 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd90      	pop	{r4, r7, pc}
 800228e:	bf00      	nop
 8002290:	20000944 	.word	0x20000944

08002294 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	1d38      	adds	r0, r7, #4
 800229e:	e880 0006 	stmia.w	r0, {r1, r2}
 80022a2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80022a4:	e012      	b.n	80022cc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	7818      	ldrb	r0, [r3, #0]
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	1d3a      	adds	r2, r7, #4
 80022ae:	ca06      	ldmia	r2, {r1, r2}
 80022b0:	f7ff ff68 	bl	8002184 <ssd1306_WriteChar>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d002      	beq.n	80022c6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	e008      	b.n	80022d8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e8      	bne.n	80022a6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	781b      	ldrb	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	460a      	mov	r2, r1
 80022ea:	71fb      	strb	r3, [r7, #7]
 80022ec:	4613      	mov	r3, r2
 80022ee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <ssd1306_SetCursor+0x2c>)
 80022f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80022f8:	79bb      	ldrb	r3, [r7, #6]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	4b03      	ldr	r3, [pc, #12]	@ (800230c <ssd1306_SetCursor+0x2c>)
 80022fe:	805a      	strh	r2, [r3, #2]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000944 	.word	0x20000944

08002310 <ssd1306_TestFonts>:
    } while((end - start) < 8000);
   
    HAL_Delay(1000);
}

void ssd1306_TestFonts() {
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff fe8b 	bl	8002030 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 800231a:	2100      	movs	r1, #0
 800231c:	2002      	movs	r0, #2
 800231e:	f7ff ffdf 	bl	80022e0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8002322:	4a14      	ldr	r2, [pc, #80]	@ (8002374 <ssd1306_TestFonts+0x64>)
 8002324:	2301      	movs	r3, #1
 8002326:	ca06      	ldmia	r2, {r1, r2}
 8002328:	4813      	ldr	r0, [pc, #76]	@ (8002378 <ssd1306_TestFonts+0x68>)
 800232a:	f7ff ffb3 	bl	8002294 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 800232e:	211a      	movs	r1, #26
 8002330:	2002      	movs	r0, #2
 8002332:	f7ff ffd5 	bl	80022e0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8002336:	4a11      	ldr	r2, [pc, #68]	@ (800237c <ssd1306_TestFonts+0x6c>)
 8002338:	2301      	movs	r3, #1
 800233a:	ca06      	ldmia	r2, {r1, r2}
 800233c:	4810      	ldr	r0, [pc, #64]	@ (8002380 <ssd1306_TestFonts+0x70>)
 800233e:	f7ff ffa9 	bl	8002294 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 8002342:	212c      	movs	r1, #44	@ 0x2c
 8002344:	2002      	movs	r0, #2
 8002346:	f7ff ffcb 	bl	80022e0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 800234a:	4a0e      	ldr	r2, [pc, #56]	@ (8002384 <ssd1306_TestFonts+0x74>)
 800234c:	2301      	movs	r3, #1
 800234e:	ca06      	ldmia	r2, {r1, r2}
 8002350:	480d      	ldr	r0, [pc, #52]	@ (8002388 <ssd1306_TestFonts+0x78>)
 8002352:	f7ff ff9f 	bl	8002294 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 8002356:	2136      	movs	r1, #54	@ 0x36
 8002358:	2002      	movs	r0, #2
 800235a:	f7ff ffc1 	bl	80022e0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 800235e:	4a0b      	ldr	r2, [pc, #44]	@ (800238c <ssd1306_TestFonts+0x7c>)
 8002360:	2301      	movs	r3, #1
 8002362:	ca06      	ldmia	r2, {r1, r2}
 8002364:	480a      	ldr	r0, [pc, #40]	@ (8002390 <ssd1306_TestFonts+0x80>)
 8002366:	f7ff ff95 	bl	8002294 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800236a:	f7ff fe83 	bl	8002074 <ssd1306_UpdateScreen>
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000020 	.word	0x20000020
 8002378:	0800b8a4 	.word	0x0800b8a4
 800237c:	20000018 	.word	0x20000018
 8002380:	0800b8b0 	.word	0x0800b8b0
 8002384:	20000010 	.word	0x20000010
 8002388:	0800b8bc 	.word	0x0800b8bc
 800238c:	20000008 	.word	0x20000008
 8002390:	0800b8c8 	.word	0x0800b8c8

08002394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800239a:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <HAL_MspInit+0x5c>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	4a14      	ldr	r2, [pc, #80]	@ (80023f0 <HAL_MspInit+0x5c>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6193      	str	r3, [r2, #24]
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <HAL_MspInit+0x5c>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_MspInit+0x5c>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4a0e      	ldr	r2, [pc, #56]	@ (80023f0 <HAL_MspInit+0x5c>)
 80023b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023bc:	61d3      	str	r3, [r2, #28]
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_MspInit+0x5c>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023ca:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_MspInit+0x60>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	4a04      	ldr	r2, [pc, #16]	@ (80023f4 <HAL_MspInit+0x60>)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40010000 	.word	0x40010000

080023f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	@ 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0318 	add.w	r3, r7, #24
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a44      	ldr	r2, [pc, #272]	@ (8002524 <HAL_ADC_MspInit+0x12c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d152      	bne.n	80024be <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002418:	4b43      	ldr	r3, [pc, #268]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4a42      	ldr	r2, [pc, #264]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 800241e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002422:	6193      	str	r3, [r2, #24]
 8002424:	4b40      	ldr	r3, [pc, #256]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002430:	4b3d      	ldr	r3, [pc, #244]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4a3c      	ldr	r2, [pc, #240]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	6193      	str	r3, [r2, #24]
 800243c:	4b3a      	ldr	r3, [pc, #232]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002448:	2330      	movs	r3, #48	@ 0x30
 800244a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244c:	2303      	movs	r3, #3
 800244e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 0318 	add.w	r3, r7, #24
 8002454:	4619      	mov	r1, r3
 8002456:	4835      	ldr	r0, [pc, #212]	@ (800252c <HAL_ADC_MspInit+0x134>)
 8002458:	f001 fd14 	bl	8003e84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800245c:	4b34      	ldr	r3, [pc, #208]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 800245e:	4a35      	ldr	r2, [pc, #212]	@ (8002534 <HAL_ADC_MspInit+0x13c>)
 8002460:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002462:	4b33      	ldr	r3, [pc, #204]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 8002464:	2200      	movs	r2, #0
 8002466:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002468:	4b31      	ldr	r3, [pc, #196]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800246e:	4b30      	ldr	r3, [pc, #192]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 8002470:	2280      	movs	r2, #128	@ 0x80
 8002472:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002474:	4b2e      	ldr	r3, [pc, #184]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 8002476:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800247a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800247c:	4b2c      	ldr	r3, [pc, #176]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 800247e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002482:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002484:	4b2a      	ldr	r3, [pc, #168]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 8002486:	2220      	movs	r2, #32
 8002488:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800248a:	4b29      	ldr	r3, [pc, #164]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 800248c:	2200      	movs	r2, #0
 800248e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002490:	4827      	ldr	r0, [pc, #156]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 8002492:	f001 fa55 	bl	8003940 <HAL_DMA_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800249c:	f7ff fd20 	bl	8001ee0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a23      	ldr	r2, [pc, #140]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 80024a4:	621a      	str	r2, [r3, #32]
 80024a6:	4a22      	ldr	r2, [pc, #136]	@ (8002530 <HAL_ADC_MspInit+0x138>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	2012      	movs	r0, #18
 80024b2:	f001 fa0e 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80024b6:	2012      	movs	r0, #18
 80024b8:	f001 fa27 	bl	800390a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80024bc:	e02e      	b.n	800251c <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002538 <HAL_ADC_MspInit+0x140>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d129      	bne.n	800251c <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80024c8:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4a16      	ldr	r2, [pc, #88]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 80024ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024d2:	6193      	str	r3, [r2, #24]
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6193      	str	r3, [r2, #24]
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_ADC_MspInit+0x130>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024f8:	230e      	movs	r3, #14
 80024fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fc:	2303      	movs	r3, #3
 80024fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 0318 	add.w	r3, r7, #24
 8002504:	4619      	mov	r1, r3
 8002506:	4809      	ldr	r0, [pc, #36]	@ (800252c <HAL_ADC_MspInit+0x134>)
 8002508:	f001 fcbc 	bl	8003e84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	2012      	movs	r0, #18
 8002512:	f001 f9de 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002516:	2012      	movs	r0, #18
 8002518:	f001 f9f7 	bl	800390a <HAL_NVIC_EnableIRQ>
}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	@ 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40012400 	.word	0x40012400
 8002528:	40021000 	.word	0x40021000
 800252c:	40010800 	.word	0x40010800
 8002530:	200004a0 	.word	0x200004a0
 8002534:	40020008 	.word	0x40020008
 8002538:	40012800 	.word	0x40012800

0800253c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	@ 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <HAL_I2C_MspInit+0x90>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d132      	bne.n	80025c2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255c:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <HAL_I2C_MspInit+0x94>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4a1b      	ldr	r2, [pc, #108]	@ (80025d0 <HAL_I2C_MspInit+0x94>)
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	6193      	str	r3, [r2, #24]
 8002568:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_I2C_MspInit+0x94>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002574:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257a:	2312      	movs	r3, #18
 800257c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4812      	ldr	r0, [pc, #72]	@ (80025d4 <HAL_I2C_MspInit+0x98>)
 800258a:	f001 fc7b 	bl	8003e84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800258e:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_I2C_MspInit+0x9c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a4:	4a0c      	ldr	r2, [pc, #48]	@ (80025d8 <HAL_I2C_MspInit+0x9c>)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_I2C_MspInit+0x94>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a08      	ldr	r2, [pc, #32]	@ (80025d0 <HAL_I2C_MspInit+0x94>)
 80025b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025b4:	61d3      	str	r3, [r2, #28]
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_I2C_MspInit+0x94>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025c2:	bf00      	nop
 80025c4:	3728      	adds	r7, #40	@ 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40005400 	.word	0x40005400
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010c00 	.word	0x40010c00
 80025d8:	40010000 	.word	0x40010000

080025dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a12      	ldr	r2, [pc, #72]	@ (8002634 <HAL_TIM_Base_MspInit+0x58>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10c      	bne.n	8002608 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_TIM_Base_MspInit+0x5c>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	4a11      	ldr	r2, [pc, #68]	@ (8002638 <HAL_TIM_Base_MspInit+0x5c>)
 80025f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025f8:	6193      	str	r3, [r2, #24]
 80025fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <HAL_TIM_Base_MspInit+0x5c>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002606:	e010      	b.n	800262a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0b      	ldr	r2, [pc, #44]	@ (800263c <HAL_TIM_Base_MspInit+0x60>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10b      	bne.n	800262a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_TIM_Base_MspInit+0x5c>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <HAL_TIM_Base_MspInit+0x5c>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	61d3      	str	r3, [r2, #28]
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_TIM_Base_MspInit+0x5c>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	40012c00 	.word	0x40012c00
 8002638:	40021000 	.word	0x40021000
 800263c:	40000400 	.word	0x40000400

08002640 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1f      	ldr	r2, [pc, #124]	@ (80026d8 <HAL_TIM_MspPostInit+0x98>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d119      	bne.n	8002694 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002660:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <HAL_TIM_MspPostInit+0x9c>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <HAL_TIM_MspPostInit+0x9c>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_TIM_MspPostInit+0x9c>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|BEEP_Pin;
 8002678:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800267c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2302      	movs	r3, #2
 8002684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	f107 0310 	add.w	r3, r7, #16
 800268a:	4619      	mov	r1, r3
 800268c:	4814      	ldr	r0, [pc, #80]	@ (80026e0 <HAL_TIM_MspPostInit+0xa0>)
 800268e:	f001 fbf9 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002692:	e01c      	b.n	80026ce <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <HAL_TIM_MspPostInit+0xa4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d117      	bne.n	80026ce <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <HAL_TIM_MspPostInit+0x9c>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	4a0e      	ldr	r2, [pc, #56]	@ (80026dc <HAL_TIM_MspPostInit+0x9c>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	6193      	str	r3, [r2, #24]
 80026aa:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <HAL_TIM_MspPostInit+0x9c>)
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 80026b6:	2340      	movs	r3, #64	@ 0x40
 80026b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2302      	movs	r3, #2
 80026c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 80026c2:	f107 0310 	add.w	r3, r7, #16
 80026c6:	4619      	mov	r1, r3
 80026c8:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <HAL_TIM_MspPostInit+0xa0>)
 80026ca:	f001 fbdb 	bl	8003e84 <HAL_GPIO_Init>
}
 80026ce:	bf00      	nop
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40010800 	.word	0x40010800
 80026e4:	40000400 	.word	0x40000400

080026e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	@ 0x30
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 031c 	add.w	r3, r7, #28
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a69      	ldr	r2, [pc, #420]	@ (80028a8 <HAL_UART_MspInit+0x1c0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d13e      	bne.n	8002786 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002708:	4b68      	ldr	r3, [pc, #416]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4a67      	ldr	r2, [pc, #412]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 800270e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002712:	6193      	str	r3, [r2, #24]
 8002714:	4b65      	ldr	r3, [pc, #404]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002720:	4b62      	ldr	r3, [pc, #392]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a61      	ldr	r2, [pc, #388]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 8002726:	f043 0308 	orr.w	r3, r3, #8
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b5f      	ldr	r3, [pc, #380]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002738:	2340      	movs	r3, #64	@ 0x40
 800273a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	4619      	mov	r1, r3
 800274a:	4859      	ldr	r0, [pc, #356]	@ (80028b0 <HAL_UART_MspInit+0x1c8>)
 800274c:	f001 fb9a 	bl	8003e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002754:	2300      	movs	r3, #0
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	4619      	mov	r1, r3
 8002762:	4853      	ldr	r0, [pc, #332]	@ (80028b0 <HAL_UART_MspInit+0x1c8>)
 8002764:	f001 fb8e 	bl	8003e84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002768:	4b52      	ldr	r3, [pc, #328]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800276e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002770:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800277e:	4a4d      	ldr	r2, [pc, #308]	@ (80028b4 <HAL_UART_MspInit+0x1cc>)
 8002780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002782:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002784:	e08b      	b.n	800289e <HAL_UART_MspInit+0x1b6>
  else if(huart->Instance==USART3)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a4b      	ldr	r2, [pc, #300]	@ (80028b8 <HAL_UART_MspInit+0x1d0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	f040 8086 	bne.w	800289e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002792:	4b46      	ldr	r3, [pc, #280]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a45      	ldr	r2, [pc, #276]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b43      	ldr	r3, [pc, #268]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027aa:	4b40      	ldr	r3, [pc, #256]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	4a3f      	ldr	r2, [pc, #252]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 80027b0:	f043 0308 	orr.w	r3, r3, #8
 80027b4:	6193      	str	r3, [r2, #24]
 80027b6:	4b3d      	ldr	r3, [pc, #244]	@ (80028ac <HAL_UART_MspInit+0x1c4>)
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4619      	mov	r1, r3
 80027d6:	4836      	ldr	r0, [pc, #216]	@ (80028b0 <HAL_UART_MspInit+0x1c8>)
 80027d8:	f001 fb54 	bl	8003e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	482f      	ldr	r0, [pc, #188]	@ (80028b0 <HAL_UART_MspInit+0x1c8>)
 80027f2:	f001 fb47 	bl	8003e84 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80027f6:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 80027f8:	4a31      	ldr	r2, [pc, #196]	@ (80028c0 <HAL_UART_MspInit+0x1d8>)
 80027fa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027fc:	4b2f      	ldr	r3, [pc, #188]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 80027fe:	2210      	movs	r2, #16
 8002800:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002802:	4b2e      	ldr	r3, [pc, #184]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002808:	4b2c      	ldr	r3, [pc, #176]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 800280a:	2280      	movs	r2, #128	@ 0x80
 800280c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280e:	4b2b      	ldr	r3, [pc, #172]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002814:	4b29      	ldr	r3, [pc, #164]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 8002816:	2200      	movs	r2, #0
 8002818:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800281a:	4b28      	ldr	r3, [pc, #160]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002820:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002826:	4825      	ldr	r0, [pc, #148]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 8002828:	f001 f88a 	bl	8003940 <HAL_DMA_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8002832:	f7ff fb55 	bl	8001ee0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a20      	ldr	r2, [pc, #128]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 800283a:	639a      	str	r2, [r3, #56]	@ 0x38
 800283c:	4a1f      	ldr	r2, [pc, #124]	@ (80028bc <HAL_UART_MspInit+0x1d4>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002842:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 8002844:	4a20      	ldr	r2, [pc, #128]	@ (80028c8 <HAL_UART_MspInit+0x1e0>)
 8002846:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002848:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 800284a:	2200      	movs	r2, #0
 800284c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284e:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002854:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 8002856:	2280      	movs	r2, #128	@ 0x80
 8002858:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800285a:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002860:	4b18      	ldr	r3, [pc, #96]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002866:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 8002868:	2220      	movs	r2, #32
 800286a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800286c:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002872:	4814      	ldr	r0, [pc, #80]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 8002874:	f001 f864 	bl	8003940 <HAL_DMA_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 800287e:	f7ff fb2f 	bl	8001ee0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a0f      	ldr	r2, [pc, #60]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 8002886:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002888:	4a0e      	ldr	r2, [pc, #56]	@ (80028c4 <HAL_UART_MspInit+0x1dc>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	2027      	movs	r0, #39	@ 0x27
 8002894:	f001 f81d 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002898:	2027      	movs	r0, #39	@ 0x27
 800289a:	f001 f836 	bl	800390a <HAL_NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3730      	adds	r7, #48	@ 0x30
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40013800 	.word	0x40013800
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40010c00 	.word	0x40010c00
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40004800 	.word	0x40004800
 80028bc:	200002e8 	.word	0x200002e8
 80028c0:	4002001c 	.word	0x4002001c
 80028c4:	200002a4 	.word	0x200002a4
 80028c8:	40020030 	.word	0x40020030

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <NMI_Handler+0x4>

080028d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <HardFault_Handler+0x4>

080028dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <MemManage_Handler+0x4>

080028e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <BusFault_Handler+0x4>

080028ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <UsageFault_Handler+0x4>

080028f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800291c:	f000 f96c 	bl	8002bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <DMA1_Channel1_IRQHandler+0x10>)
 800292a:	f001 f977 	bl	8003c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200004a0 	.word	0x200004a0

08002938 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <DMA1_Channel2_IRQHandler+0x10>)
 800293e:	f001 f96d 	bl	8003c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200002e8 	.word	0x200002e8

0800294c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <DMA1_Channel3_IRQHandler+0x10>)
 8002952:	f001 f963 	bl	8003c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200002a4 	.word	0x200002a4

08002960 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002964:	4803      	ldr	r0, [pc, #12]	@ (8002974 <ADC1_2_IRQHandler+0x14>)
 8002966:	f000 fbf7 	bl	8003158 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800296a:	4803      	ldr	r0, [pc, #12]	@ (8002978 <ADC1_2_IRQHandler+0x18>)
 800296c:	f000 fbf4 	bl	8003158 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000514 	.word	0x20000514
 8002978:	200004e4 	.word	0x200004e4

0800297c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <USART3_IRQHandler+0x10>)
 8002982:	f003 fd7b 	bl	800647c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000032c 	.word	0x2000032c

08002990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return 1;
 8002994:	2301      	movs	r3, #1
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <_kill>:

int _kill(int pid, int sig)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029a8:	f005 fbd6 	bl	8008158 <__errno>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2216      	movs	r2, #22
 80029b0:	601a      	str	r2, [r3, #0]
  return -1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <_exit>:

void _exit (int status)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029c6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff ffe7 	bl	800299e <_kill>
  while (1) {}    /* Make sure we hang here */
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <_exit+0x12>

080029d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e00a      	b.n	80029fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029e6:	f3af 8000 	nop.w
 80029ea:	4601      	mov	r1, r0
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	60ba      	str	r2, [r7, #8]
 80029f2:	b2ca      	uxtb	r2, r1
 80029f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	dbf0      	blt.n	80029e6 <_read+0x12>
  }

  return len;
 8002a04:	687b      	ldr	r3, [r7, #4]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e009      	b.n	8002a34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	60ba      	str	r2, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	dbf1      	blt.n	8002a20 <_write+0x12>
  }
  return len;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_close>:

int _close(int file)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <_isatty>:

int _isatty(int file)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a82:	2301      	movs	r3, #1
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
	...

08002aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab0:	4a14      	ldr	r2, [pc, #80]	@ (8002b04 <_sbrk+0x5c>)
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <_sbrk+0x60>)
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002abc:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <_sbrk+0x64>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <_sbrk+0x64>)
 8002ac6:	4a12      	ldr	r2, [pc, #72]	@ (8002b10 <_sbrk+0x68>)
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d207      	bcs.n	8002ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad8:	f005 fb3e 	bl	8008158 <__errno>
 8002adc:	4603      	mov	r3, r0
 8002ade:	220c      	movs	r2, #12
 8002ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae6:	e009      	b.n	8002afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae8:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <_sbrk+0x64>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	4a05      	ldr	r2, [pc, #20]	@ (8002b0c <_sbrk+0x64>)
 8002af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20005000 	.word	0x20005000
 8002b08:	00000400 	.word	0x00000400
 8002b0c:	2000094c 	.word	0x2000094c
 8002b10:	20000aa0 	.word	0x20000aa0

08002b14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b20:	f7ff fff8 	bl	8002b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002b24:	480b      	ldr	r0, [pc, #44]	@ (8002b54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b26:	490c      	ldr	r1, [pc, #48]	@ (8002b58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b28:	4a0c      	ldr	r2, [pc, #48]	@ (8002b5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b2c:	e002      	b.n	8002b34 <LoopCopyDataInit>

08002b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b32:	3304      	adds	r3, #4

08002b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b38:	d3f9      	bcc.n	8002b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b3a:	4a09      	ldr	r2, [pc, #36]	@ (8002b60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b3c:	4c09      	ldr	r4, [pc, #36]	@ (8002b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b40:	e001      	b.n	8002b46 <LoopFillZerobss>

08002b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b44:	3204      	adds	r2, #4

08002b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b48:	d3fb      	bcc.n	8002b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b4a:	f005 fb0b 	bl	8008164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b4e:	f7fe ff23 	bl	8001998 <main>
  bx lr
 8002b52:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b58:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002b5c:	0800ebe4 	.word	0x0800ebe4
  ldr r2, =_sbss
 8002b60:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002b64:	20000aa0 	.word	0x20000aa0

08002b68 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b68:	e7fe      	b.n	8002b68 <CAN1_RX1_IRQHandler>
	...

08002b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b70:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <HAL_Init+0x28>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a07      	ldr	r2, [pc, #28]	@ (8002b94 <HAL_Init+0x28>)
 8002b76:	f043 0310 	orr.w	r3, r3, #16
 8002b7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	f000 fe9d 	bl	80038bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b82:	200f      	movs	r0, #15
 8002b84:	f000 f808 	bl	8002b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b88:	f7ff fc04 	bl	8002394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40022000 	.word	0x40022000

08002b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba0:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <HAL_InitTick+0x54>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <HAL_InitTick+0x58>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 feb5 	bl	8003926 <HAL_SYSTICK_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00e      	b.n	8002be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d80a      	bhi.n	8002be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f000 fe7d 	bl	80038d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd8:	4a06      	ldr	r2, [pc, #24]	@ (8002bf4 <HAL_InitTick+0x5c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000028 	.word	0x20000028
 8002bf0:	20000030 	.word	0x20000030
 8002bf4:	2000002c 	.word	0x2000002c

08002bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_IncTick+0x1c>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_IncTick+0x20>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a03      	ldr	r2, [pc, #12]	@ (8002c18 <HAL_IncTick+0x20>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000030 	.word	0x20000030
 8002c18:	20000950 	.word	0x20000950

08002c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c20:	4b02      	ldr	r3, [pc, #8]	@ (8002c2c <HAL_GetTick+0x10>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	20000950 	.word	0x20000950

08002c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f7ff fff0 	bl	8002c1c <HAL_GetTick>
 8002c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d005      	beq.n	8002c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_Delay+0x44>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4413      	add	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c56:	bf00      	nop
 8002c58:	f7ff ffe0 	bl	8002c1c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d8f7      	bhi.n	8002c58 <HAL_Delay+0x28>
  {
  }
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000030 	.word	0x20000030

08002c78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0be      	b.n	8002e18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff fb9e 	bl	80023f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fc81 	bl	80035c4 <ADC_ConversionStop_Disable>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 8099 	bne.w	8002e06 <HAL_ADC_Init+0x18e>
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 8095 	bne.w	8002e06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ce4:	f023 0302 	bic.w	r3, r3, #2
 8002ce8:	f043 0202 	orr.w	r2, r3, #2
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cf8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7b1b      	ldrb	r3, [r3, #12]
 8002cfe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d10:	d003      	beq.n	8002d1a <HAL_ADC_Init+0xa2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d102      	bne.n	8002d20 <HAL_ADC_Init+0xa8>
 8002d1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d1e:	e000      	b.n	8002d22 <HAL_ADC_Init+0xaa>
 8002d20:	2300      	movs	r3, #0
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7d1b      	ldrb	r3, [r3, #20]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d119      	bne.n	8002d64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7b1b      	ldrb	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	035a      	lsls	r2, r3, #13
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	e00b      	b.n	8002d64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	4b28      	ldr	r3, [pc, #160]	@ (8002e20 <HAL_ADC_Init+0x1a8>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d94:	d003      	beq.n	8002d9e <HAL_ADC_Init+0x126>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d104      	bne.n	8002da8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	051b      	lsls	r3, r3, #20
 8002da6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	4b18      	ldr	r3, [pc, #96]	@ (8002e24 <HAL_ADC_Init+0x1ac>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d10b      	bne.n	8002de4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002de2:	e018      	b.n	8002e16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	f023 0312 	bic.w	r3, r3, #18
 8002dec:	f043 0210 	orr.w	r2, r3, #16
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e04:	e007      	b.n	8002e16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	ffe1f7fd 	.word	0xffe1f7fd
 8002e24:	ff1f0efe 	.word	0xff1f0efe

08002e28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Start+0x1a>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e098      	b.n	8002f74 <HAL_ADC_Start+0x14c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fb60 	bl	8003510 <ADC_Enable>
 8002e50:	4603      	mov	r3, r0
 8002e52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f040 8087 	bne.w	8002f6a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a41      	ldr	r2, [pc, #260]	@ (8002f7c <HAL_ADC_Start+0x154>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d105      	bne.n	8002e86 <HAL_ADC_Start+0x5e>
 8002e7a:	4b41      	ldr	r3, [pc, #260]	@ (8002f80 <HAL_ADC_Start+0x158>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d115      	bne.n	8002eb2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d026      	beq.n	8002eee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ea8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eb0:	e01d      	b.n	8002eee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8002f80 <HAL_ADC_Start+0x158>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_ADC_Start+0xaa>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8002f7c <HAL_ADC_Start+0x154>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10d      	bne.n	8002eee <HAL_ADC_Start+0xc6>
 8002ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f80 <HAL_ADC_Start+0x158>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ee6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	f023 0206 	bic.w	r2, r3, #6
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f06:	e002      	b.n	8002f0e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f06f 0202 	mvn.w	r2, #2
 8002f1e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f2a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002f2e:	d113      	bne.n	8002f58 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f34:	4a11      	ldr	r2, [pc, #68]	@ (8002f7c <HAL_ADC_Start+0x154>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d105      	bne.n	8002f46 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f3a:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <HAL_ADC_Start+0x158>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d108      	bne.n	8002f58 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	e00c      	b.n	8002f72 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	e003      	b.n	8002f72 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40012800 	.word	0x40012800
 8002f80:	40012400 	.word	0x40012400

08002f84 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a64      	ldr	r2, [pc, #400]	@ (800312c <HAL_ADC_Start_DMA+0x1a8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_ADC_Start_DMA+0x24>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a63      	ldr	r2, [pc, #396]	@ (8003130 <HAL_ADC_Start_DMA+0x1ac>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d106      	bne.n	8002fb6 <HAL_ADC_Start_DMA+0x32>
 8002fa8:	4b60      	ldr	r3, [pc, #384]	@ (800312c <HAL_ADC_Start_DMA+0x1a8>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 80b3 	bne.w	800311c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ADC_Start_DMA+0x40>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0ae      	b.n	8003122 <HAL_ADC_Start_DMA+0x19e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fa9f 	bl	8003510 <ADC_Enable>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 809a 	bne.w	8003112 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a4e      	ldr	r2, [pc, #312]	@ (8003130 <HAL_ADC_Start_DMA+0x1ac>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d105      	bne.n	8003008 <HAL_ADC_Start_DMA+0x84>
 8002ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800312c <HAL_ADC_Start_DMA+0x1a8>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d115      	bne.n	8003034 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301e:	2b00      	cmp	r3, #0
 8003020:	d026      	beq.n	8003070 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800302a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003032:	e01d      	b.n	8003070 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a39      	ldr	r2, [pc, #228]	@ (800312c <HAL_ADC_Start_DMA+0x1a8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_ADC_Start_DMA+0xd0>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a38      	ldr	r2, [pc, #224]	@ (8003130 <HAL_ADC_Start_DMA+0x1ac>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10d      	bne.n	8003070 <HAL_ADC_Start_DMA+0xec>
 8003054:	4b35      	ldr	r3, [pc, #212]	@ (800312c <HAL_ADC_Start_DMA+0x1a8>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003068:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d006      	beq.n	800308a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	f023 0206 	bic.w	r2, r3, #6
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003088:	e002      	b.n	8003090 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4a25      	ldr	r2, [pc, #148]	@ (8003134 <HAL_ADC_Start_DMA+0x1b0>)
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4a24      	ldr	r2, [pc, #144]	@ (8003138 <HAL_ADC_Start_DMA+0x1b4>)
 80030a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4a23      	ldr	r2, [pc, #140]	@ (800313c <HAL_ADC_Start_DMA+0x1b8>)
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0202 	mvn.w	r2, #2
 80030b8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a18      	ldr	r0, [r3, #32]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	334c      	adds	r3, #76	@ 0x4c
 80030d4:	4619      	mov	r1, r3
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f000 fc8b 	bl	80039f4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80030e8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80030ec:	d108      	bne.n	8003100 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80030fc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80030fe:	e00f      	b.n	8003120 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800310e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003110:	e006      	b.n	8003120 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800311a:	e001      	b.n	8003120 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003120:	7dfb      	ldrb	r3, [r7, #23]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40012400 	.word	0x40012400
 8003130:	40012800 	.word	0x40012800
 8003134:	08003647 	.word	0x08003647
 8003138:	080036c3 	.word	0x080036c3
 800313c:	080036df 	.word	0x080036df

08003140 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d03e      	beq.n	80031f8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d039      	beq.n	80031f8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80031a6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80031aa:	d11d      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d119      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0220 	bic.w	r2, r2, #32
 80031c2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e0:	f043 0201 	orr.w	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f874 	bl	80032d6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 0212 	mvn.w	r2, #18
 80031f6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d04d      	beq.n	800329e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d048      	beq.n	800329e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800322e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003232:	d012      	beq.n	800325a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800323e:	2b00      	cmp	r3, #0
 8003240:	d125      	bne.n	800328e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800324c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003250:	d11d      	bne.n	800328e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d119      	bne.n	800328e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003268:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa3f 	bl	8003712 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 020c 	mvn.w	r2, #12
 800329c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d012      	beq.n	80032ce <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f81b 	bl	80032fa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0201 	mvn.w	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
	...

08003320 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x20>
 800333c:	2302      	movs	r3, #2
 800333e:	e0dc      	b.n	80034fa <HAL_ADC_ConfigChannel+0x1da>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d81c      	bhi.n	800338a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	3b05      	subs	r3, #5
 8003362:	221f      	movs	r2, #31
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	4019      	ands	r1, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	3b05      	subs	r3, #5
 800337c:	fa00 f203 	lsl.w	r2, r0, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	635a      	str	r2, [r3, #52]	@ 0x34
 8003388:	e03c      	b.n	8003404 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d81c      	bhi.n	80033cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	3b23      	subs	r3, #35	@ 0x23
 80033a4:	221f      	movs	r2, #31
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	4019      	ands	r1, r3
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	3b23      	subs	r3, #35	@ 0x23
 80033be:	fa00 f203 	lsl.w	r2, r0, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80033ca:	e01b      	b.n	8003404 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	3b41      	subs	r3, #65	@ 0x41
 80033de:	221f      	movs	r2, #31
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	4019      	ands	r1, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	3b41      	subs	r3, #65	@ 0x41
 80033f8:	fa00 f203 	lsl.w	r2, r0, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b09      	cmp	r3, #9
 800340a:	d91c      	bls.n	8003446 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68d9      	ldr	r1, [r3, #12]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	3b1e      	subs	r3, #30
 800341e:	2207      	movs	r2, #7
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	4019      	ands	r1, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6898      	ldr	r0, [r3, #8]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	3b1e      	subs	r3, #30
 8003438:	fa00 f203 	lsl.w	r2, r0, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	60da      	str	r2, [r3, #12]
 8003444:	e019      	b.n	800347a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6919      	ldr	r1, [r3, #16]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	2207      	movs	r2, #7
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	4019      	ands	r1, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6898      	ldr	r0, [r3, #8]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	fa00 f203 	lsl.w	r2, r0, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b10      	cmp	r3, #16
 8003480:	d003      	beq.n	800348a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003486:	2b11      	cmp	r3, #17
 8003488:	d132      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1d      	ldr	r2, [pc, #116]	@ (8003504 <HAL_ADC_ConfigChannel+0x1e4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d125      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d126      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80034b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d11a      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034ba:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <HAL_ADC_ConfigChannel+0x1e8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a13      	ldr	r2, [pc, #76]	@ (800350c <HAL_ADC_ConfigChannel+0x1ec>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	0c9a      	lsrs	r2, r3, #18
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034d0:	e002      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f9      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x1b2>
 80034de:	e007      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	40012400 	.word	0x40012400
 8003508:	20000028 	.word	0x20000028
 800350c:	431bde83 	.word	0x431bde83

08003510 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d040      	beq.n	80035b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800353e:	4b1f      	ldr	r3, [pc, #124]	@ (80035bc <ADC_Enable+0xac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1f      	ldr	r2, [pc, #124]	@ (80035c0 <ADC_Enable+0xb0>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	0c9b      	lsrs	r3, r3, #18
 800354a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800354c:	e002      	b.n	8003554 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3b01      	subs	r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f9      	bne.n	800354e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800355a:	f7ff fb5f 	bl	8002c1c <HAL_GetTick>
 800355e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003560:	e01f      	b.n	80035a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003562:	f7ff fb5b 	bl	8002c1c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d918      	bls.n	80035a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d011      	beq.n	80035a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	f043 0210 	orr.w	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	f043 0201 	orr.w	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e007      	b.n	80035b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d1d8      	bne.n	8003562 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000028 	.word	0x20000028
 80035c0:	431bde83 	.word	0x431bde83

080035c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d12e      	bne.n	800363c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035ee:	f7ff fb15 	bl	8002c1c <HAL_GetTick>
 80035f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035f4:	e01b      	b.n	800362e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035f6:	f7ff fb11 	bl	8002c1c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d914      	bls.n	800362e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10d      	bne.n	800362e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	f043 0210 	orr.w	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	f043 0201 	orr.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e007      	b.n	800363e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d0dc      	beq.n	80035f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800365c:	2b00      	cmp	r3, #0
 800365e:	d127      	bne.n	80036b0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003676:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800367a:	d115      	bne.n	80036a8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff fe14 	bl	80032d6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80036ae:	e004      	b.n	80036ba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fe09 	bl	80032e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	f043 0204 	orr.w	r2, r3, #4
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff fe01 	bl	800330c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003734:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003740:	4013      	ands	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800374c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003756:	4a04      	ldr	r2, [pc, #16]	@ (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	60d3      	str	r3, [r2, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003770:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <__NVIC_GetPriorityGrouping+0x18>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	f003 0307 	and.w	r3, r3, #7
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	2b00      	cmp	r3, #0
 8003798:	db0b      	blt.n	80037b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	f003 021f 	and.w	r2, r3, #31
 80037a0:	4906      	ldr	r1, [pc, #24]	@ (80037bc <__NVIC_EnableIRQ+0x34>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2001      	movs	r0, #1
 80037aa:	fa00 f202 	lsl.w	r2, r0, r2
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	e000e100 	.word	0xe000e100

080037c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	db0a      	blt.n	80037ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	490c      	ldr	r1, [pc, #48]	@ (800380c <__NVIC_SetPriority+0x4c>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	440b      	add	r3, r1
 80037e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e8:	e00a      	b.n	8003800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4908      	ldr	r1, [pc, #32]	@ (8003810 <__NVIC_SetPriority+0x50>)
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3b04      	subs	r3, #4
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	440b      	add	r3, r1
 80037fe:	761a      	strb	r2, [r3, #24]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000e100 	.word	0xe000e100
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	@ 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f1c3 0307 	rsb	r3, r3, #7
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf28      	it	cs
 8003832:	2304      	movcs	r3, #4
 8003834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3304      	adds	r3, #4
 800383a:	2b06      	cmp	r3, #6
 800383c:	d902      	bls.n	8003844 <NVIC_EncodePriority+0x30>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3b03      	subs	r3, #3
 8003842:	e000      	b.n	8003846 <NVIC_EncodePriority+0x32>
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	401a      	ands	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800385c:	f04f 31ff 	mov.w	r1, #4294967295
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43d9      	mvns	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	4313      	orrs	r3, r2
         );
}
 800386e:	4618      	mov	r0, r3
 8003870:	3724      	adds	r7, #36	@ 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003888:	d301      	bcc.n	800388e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388a:	2301      	movs	r3, #1
 800388c:	e00f      	b.n	80038ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388e:	4a0a      	ldr	r2, [pc, #40]	@ (80038b8 <SysTick_Config+0x40>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003896:	210f      	movs	r1, #15
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	f7ff ff90 	bl	80037c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a0:	4b05      	ldr	r3, [pc, #20]	@ (80038b8 <SysTick_Config+0x40>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a6:	4b04      	ldr	r3, [pc, #16]	@ (80038b8 <SysTick_Config+0x40>)
 80038a8:	2207      	movs	r2, #7
 80038aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	e000e010 	.word	0xe000e010

080038bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff2d 	bl	8003724 <__NVIC_SetPriorityGrouping>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e4:	f7ff ff42 	bl	800376c <__NVIC_GetPriorityGrouping>
 80038e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff ff90 	bl	8003814 <NVIC_EncodePriority>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff5f 	bl	80037c0 <__NVIC_SetPriority>
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff35 	bl	8003788 <__NVIC_EnableIRQ>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ffa2 	bl	8003878 <SysTick_Config>
 8003934:	4603      	mov	r3, r0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e043      	b.n	80039de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <HAL_DMA_Init+0xa8>)
 800395e:	4413      	add	r3, r2
 8003960:	4a22      	ldr	r2, [pc, #136]	@ (80039ec <HAL_DMA_Init+0xac>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	009a      	lsls	r2, r3, #2
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1f      	ldr	r2, [pc, #124]	@ (80039f0 <HAL_DMA_Init+0xb0>)
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800398a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800398e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	bffdfff8 	.word	0xbffdfff8
 80039ec:	cccccccd 	.word	0xcccccccd
 80039f0:	40020000 	.word	0x40020000

080039f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_DMA_Start_IT+0x20>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e04b      	b.n	8003aac <HAL_DMA_Start_IT+0xb8>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d13a      	bne.n	8003a9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f9eb 	bl	8003e28 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 020e 	orr.w	r2, r2, #14
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e00f      	b.n	8003a8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0204 	bic.w	r2, r2, #4
 8003a7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 020a 	orr.w	r2, r2, #10
 8003a8a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e005      	b.n	8003aaa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d008      	beq.n	8003ade <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e020      	b.n	8003b20 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 020e 	bic.w	r2, r2, #14
 8003aec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b06:	2101      	movs	r1, #1
 8003b08:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d005      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2204      	movs	r2, #4
 8003b48:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	e051      	b.n	8003bf4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 020e 	bic.w	r2, r2, #14
 8003b5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <HAL_DMA_Abort_IT+0xd4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d029      	beq.n	8003bce <HAL_DMA_Abort_IT+0xa2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a21      	ldr	r2, [pc, #132]	@ (8003c04 <HAL_DMA_Abort_IT+0xd8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_Abort_IT+0x9e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <HAL_DMA_Abort_IT+0xdc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01a      	beq.n	8003bc4 <HAL_DMA_Abort_IT+0x98>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1e      	ldr	r2, [pc, #120]	@ (8003c0c <HAL_DMA_Abort_IT+0xe0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d012      	beq.n	8003bbe <HAL_DMA_Abort_IT+0x92>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c10 <HAL_DMA_Abort_IT+0xe4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x8c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c14 <HAL_DMA_Abort_IT+0xe8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d102      	bne.n	8003bb2 <HAL_DMA_Abort_IT+0x86>
 8003bac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003bb0:	e00e      	b.n	8003bd0 <HAL_DMA_Abort_IT+0xa4>
 8003bb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bb6:	e00b      	b.n	8003bd0 <HAL_DMA_Abort_IT+0xa4>
 8003bb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bbc:	e008      	b.n	8003bd0 <HAL_DMA_Abort_IT+0xa4>
 8003bbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bc2:	e005      	b.n	8003bd0 <HAL_DMA_Abort_IT+0xa4>
 8003bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bc8:	e002      	b.n	8003bd0 <HAL_DMA_Abort_IT+0xa4>
 8003bca:	2310      	movs	r3, #16
 8003bcc:	e000      	b.n	8003bd0 <HAL_DMA_Abort_IT+0xa4>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	4a11      	ldr	r2, [pc, #68]	@ (8003c18 <HAL_DMA_Abort_IT+0xec>)
 8003bd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
    } 
  }
  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40020008 	.word	0x40020008
 8003c04:	4002001c 	.word	0x4002001c
 8003c08:	40020030 	.word	0x40020030
 8003c0c:	40020044 	.word	0x40020044
 8003c10:	40020058 	.word	0x40020058
 8003c14:	4002006c 	.word	0x4002006c
 8003c18:	40020000 	.word	0x40020000

08003c1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	2204      	movs	r2, #4
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d04f      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xc8>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d04a      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0204 	bic.w	r2, r2, #4
 8003c6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a66      	ldr	r2, [pc, #408]	@ (8003e0c <HAL_DMA_IRQHandler+0x1f0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d029      	beq.n	8003cca <HAL_DMA_IRQHandler+0xae>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a65      	ldr	r2, [pc, #404]	@ (8003e10 <HAL_DMA_IRQHandler+0x1f4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d022      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xaa>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a63      	ldr	r2, [pc, #396]	@ (8003e14 <HAL_DMA_IRQHandler+0x1f8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01a      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0xa4>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a62      	ldr	r2, [pc, #392]	@ (8003e18 <HAL_DMA_IRQHandler+0x1fc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d012      	beq.n	8003cba <HAL_DMA_IRQHandler+0x9e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a60      	ldr	r2, [pc, #384]	@ (8003e1c <HAL_DMA_IRQHandler+0x200>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x98>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a5f      	ldr	r2, [pc, #380]	@ (8003e20 <HAL_DMA_IRQHandler+0x204>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d102      	bne.n	8003cae <HAL_DMA_IRQHandler+0x92>
 8003ca8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003cac:	e00e      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003cb2:	e00b      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cb4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003cb8:	e008      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003cbe:	e005      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cc4:	e002      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cc6:	2340      	movs	r3, #64	@ 0x40
 8003cc8:	e000      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	4a55      	ldr	r2, [pc, #340]	@ (8003e24 <HAL_DMA_IRQHandler+0x208>)
 8003cce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8094 	beq.w	8003e02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003ce2:	e08e      	b.n	8003e02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	2202      	movs	r2, #2
 8003cea:	409a      	lsls	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d056      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x186>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d051      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 020a 	bic.w	r2, r2, #10
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a38      	ldr	r2, [pc, #224]	@ (8003e0c <HAL_DMA_IRQHandler+0x1f0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d029      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x166>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a37      	ldr	r2, [pc, #220]	@ (8003e10 <HAL_DMA_IRQHandler+0x1f4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x162>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a35      	ldr	r2, [pc, #212]	@ (8003e14 <HAL_DMA_IRQHandler+0x1f8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01a      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x15c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a34      	ldr	r2, [pc, #208]	@ (8003e18 <HAL_DMA_IRQHandler+0x1fc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d012      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x156>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a32      	ldr	r2, [pc, #200]	@ (8003e1c <HAL_DMA_IRQHandler+0x200>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00a      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x150>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a31      	ldr	r2, [pc, #196]	@ (8003e20 <HAL_DMA_IRQHandler+0x204>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d102      	bne.n	8003d66 <HAL_DMA_IRQHandler+0x14a>
 8003d60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003d64:	e00e      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d6a:	e00b      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d70:	e008      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d76:	e005      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d7c:	e002      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d7e:	2320      	movs	r3, #32
 8003d80:	e000      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d82:	2302      	movs	r3, #2
 8003d84:	4a27      	ldr	r2, [pc, #156]	@ (8003e24 <HAL_DMA_IRQHandler+0x208>)
 8003d86:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d034      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003da0:	e02f      	b.n	8003e02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2208      	movs	r2, #8
 8003da8:	409a      	lsls	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d028      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x1e8>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d023      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 020e 	bic.w	r2, r2, #14
 8003dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
    }
  }
  return;
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
}
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40020008 	.word	0x40020008
 8003e10:	4002001c 	.word	0x4002001c
 8003e14:	40020030 	.word	0x40020030
 8003e18:	40020044 	.word	0x40020044
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	4002006c 	.word	0x4002006c
 8003e24:	40020000 	.word	0x40020000

08003e28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	2101      	movs	r1, #1
 8003e40:	fa01 f202 	lsl.w	r2, r1, r2
 8003e44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d108      	bne.n	8003e68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e66:	e007      	b.n	8003e78 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b08b      	sub	sp, #44	@ 0x2c
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e92:	2300      	movs	r3, #0
 8003e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e96:	e169      	b.n	800416c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e98:	2201      	movs	r2, #1
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	f040 8158 	bne.w	8004166 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4a9a      	ldr	r2, [pc, #616]	@ (8004124 <HAL_GPIO_Init+0x2a0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d05e      	beq.n	8003f7e <HAL_GPIO_Init+0xfa>
 8003ec0:	4a98      	ldr	r2, [pc, #608]	@ (8004124 <HAL_GPIO_Init+0x2a0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d875      	bhi.n	8003fb2 <HAL_GPIO_Init+0x12e>
 8003ec6:	4a98      	ldr	r2, [pc, #608]	@ (8004128 <HAL_GPIO_Init+0x2a4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d058      	beq.n	8003f7e <HAL_GPIO_Init+0xfa>
 8003ecc:	4a96      	ldr	r2, [pc, #600]	@ (8004128 <HAL_GPIO_Init+0x2a4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d86f      	bhi.n	8003fb2 <HAL_GPIO_Init+0x12e>
 8003ed2:	4a96      	ldr	r2, [pc, #600]	@ (800412c <HAL_GPIO_Init+0x2a8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d052      	beq.n	8003f7e <HAL_GPIO_Init+0xfa>
 8003ed8:	4a94      	ldr	r2, [pc, #592]	@ (800412c <HAL_GPIO_Init+0x2a8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d869      	bhi.n	8003fb2 <HAL_GPIO_Init+0x12e>
 8003ede:	4a94      	ldr	r2, [pc, #592]	@ (8004130 <HAL_GPIO_Init+0x2ac>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d04c      	beq.n	8003f7e <HAL_GPIO_Init+0xfa>
 8003ee4:	4a92      	ldr	r2, [pc, #584]	@ (8004130 <HAL_GPIO_Init+0x2ac>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d863      	bhi.n	8003fb2 <HAL_GPIO_Init+0x12e>
 8003eea:	4a92      	ldr	r2, [pc, #584]	@ (8004134 <HAL_GPIO_Init+0x2b0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d046      	beq.n	8003f7e <HAL_GPIO_Init+0xfa>
 8003ef0:	4a90      	ldr	r2, [pc, #576]	@ (8004134 <HAL_GPIO_Init+0x2b0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d85d      	bhi.n	8003fb2 <HAL_GPIO_Init+0x12e>
 8003ef6:	2b12      	cmp	r3, #18
 8003ef8:	d82a      	bhi.n	8003f50 <HAL_GPIO_Init+0xcc>
 8003efa:	2b12      	cmp	r3, #18
 8003efc:	d859      	bhi.n	8003fb2 <HAL_GPIO_Init+0x12e>
 8003efe:	a201      	add	r2, pc, #4	@ (adr r2, 8003f04 <HAL_GPIO_Init+0x80>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f7f 	.word	0x08003f7f
 8003f08:	08003f59 	.word	0x08003f59
 8003f0c:	08003f6b 	.word	0x08003f6b
 8003f10:	08003fad 	.word	0x08003fad
 8003f14:	08003fb3 	.word	0x08003fb3
 8003f18:	08003fb3 	.word	0x08003fb3
 8003f1c:	08003fb3 	.word	0x08003fb3
 8003f20:	08003fb3 	.word	0x08003fb3
 8003f24:	08003fb3 	.word	0x08003fb3
 8003f28:	08003fb3 	.word	0x08003fb3
 8003f2c:	08003fb3 	.word	0x08003fb3
 8003f30:	08003fb3 	.word	0x08003fb3
 8003f34:	08003fb3 	.word	0x08003fb3
 8003f38:	08003fb3 	.word	0x08003fb3
 8003f3c:	08003fb3 	.word	0x08003fb3
 8003f40:	08003fb3 	.word	0x08003fb3
 8003f44:	08003fb3 	.word	0x08003fb3
 8003f48:	08003f61 	.word	0x08003f61
 8003f4c:	08003f75 	.word	0x08003f75
 8003f50:	4a79      	ldr	r2, [pc, #484]	@ (8004138 <HAL_GPIO_Init+0x2b4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f56:	e02c      	b.n	8003fb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	623b      	str	r3, [r7, #32]
          break;
 8003f5e:	e029      	b.n	8003fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	3304      	adds	r3, #4
 8003f66:	623b      	str	r3, [r7, #32]
          break;
 8003f68:	e024      	b.n	8003fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	623b      	str	r3, [r7, #32]
          break;
 8003f72:	e01f      	b.n	8003fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	623b      	str	r3, [r7, #32]
          break;
 8003f7c:	e01a      	b.n	8003fb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f86:	2304      	movs	r3, #4
 8003f88:	623b      	str	r3, [r7, #32]
          break;
 8003f8a:	e013      	b.n	8003fb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d105      	bne.n	8003fa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f94:	2308      	movs	r3, #8
 8003f96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	611a      	str	r2, [r3, #16]
          break;
 8003f9e:	e009      	b.n	8003fb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	615a      	str	r2, [r3, #20]
          break;
 8003faa:	e003      	b.n	8003fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fac:	2300      	movs	r3, #0
 8003fae:	623b      	str	r3, [r7, #32]
          break;
 8003fb0:	e000      	b.n	8003fb4 <HAL_GPIO_Init+0x130>
          break;
 8003fb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2bff      	cmp	r3, #255	@ 0xff
 8003fb8:	d801      	bhi.n	8003fbe <HAL_GPIO_Init+0x13a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	e001      	b.n	8003fc2 <HAL_GPIO_Init+0x13e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2bff      	cmp	r3, #255	@ 0xff
 8003fc8:	d802      	bhi.n	8003fd0 <HAL_GPIO_Init+0x14c>
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	e002      	b.n	8003fd6 <HAL_GPIO_Init+0x152>
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	3b08      	subs	r3, #8
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	210f      	movs	r1, #15
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	6a39      	ldr	r1, [r7, #32]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80b1 	beq.w	8004166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004004:	4b4d      	ldr	r3, [pc, #308]	@ (800413c <HAL_GPIO_Init+0x2b8>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	4a4c      	ldr	r2, [pc, #304]	@ (800413c <HAL_GPIO_Init+0x2b8>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6193      	str	r3, [r2, #24]
 8004010:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <HAL_GPIO_Init+0x2b8>)
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800401c:	4a48      	ldr	r2, [pc, #288]	@ (8004140 <HAL_GPIO_Init+0x2bc>)
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	3302      	adds	r3, #2
 8004024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004028:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	220f      	movs	r2, #15
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4013      	ands	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a40      	ldr	r2, [pc, #256]	@ (8004144 <HAL_GPIO_Init+0x2c0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d013      	beq.n	8004070 <HAL_GPIO_Init+0x1ec>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3f      	ldr	r2, [pc, #252]	@ (8004148 <HAL_GPIO_Init+0x2c4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00d      	beq.n	800406c <HAL_GPIO_Init+0x1e8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3e      	ldr	r2, [pc, #248]	@ (800414c <HAL_GPIO_Init+0x2c8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d007      	beq.n	8004068 <HAL_GPIO_Init+0x1e4>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3d      	ldr	r2, [pc, #244]	@ (8004150 <HAL_GPIO_Init+0x2cc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_GPIO_Init+0x1e0>
 8004060:	2303      	movs	r3, #3
 8004062:	e006      	b.n	8004072 <HAL_GPIO_Init+0x1ee>
 8004064:	2304      	movs	r3, #4
 8004066:	e004      	b.n	8004072 <HAL_GPIO_Init+0x1ee>
 8004068:	2302      	movs	r3, #2
 800406a:	e002      	b.n	8004072 <HAL_GPIO_Init+0x1ee>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_GPIO_Init+0x1ee>
 8004070:	2300      	movs	r3, #0
 8004072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004074:	f002 0203 	and.w	r2, r2, #3
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	4093      	lsls	r3, r2
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004082:	492f      	ldr	r1, [pc, #188]	@ (8004140 <HAL_GPIO_Init+0x2bc>)
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	3302      	adds	r3, #2
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d006      	beq.n	80040aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800409c:	4b2d      	ldr	r3, [pc, #180]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	492c      	ldr	r1, [pc, #176]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]
 80040a8:	e006      	b.n	80040b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	4928      	ldr	r1, [pc, #160]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d006      	beq.n	80040d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040c4:	4b23      	ldr	r3, [pc, #140]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	4922      	ldr	r1, [pc, #136]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
 80040d0:	e006      	b.n	80040e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040d2:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	43db      	mvns	r3, r3
 80040da:	491e      	ldr	r1, [pc, #120]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 80040dc:	4013      	ands	r3, r2
 80040de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d006      	beq.n	80040fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040ec:	4b19      	ldr	r3, [pc, #100]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	4918      	ldr	r1, [pc, #96]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
 80040f8:	e006      	b.n	8004108 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040fa:	4b16      	ldr	r3, [pc, #88]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	43db      	mvns	r3, r3
 8004102:	4914      	ldr	r1, [pc, #80]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 8004104:	4013      	ands	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d021      	beq.n	8004158 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004114:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	490e      	ldr	r1, [pc, #56]	@ (8004154 <HAL_GPIO_Init+0x2d0>)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4313      	orrs	r3, r2
 800411e:	600b      	str	r3, [r1, #0]
 8004120:	e021      	b.n	8004166 <HAL_GPIO_Init+0x2e2>
 8004122:	bf00      	nop
 8004124:	10320000 	.word	0x10320000
 8004128:	10310000 	.word	0x10310000
 800412c:	10220000 	.word	0x10220000
 8004130:	10210000 	.word	0x10210000
 8004134:	10120000 	.word	0x10120000
 8004138:	10110000 	.word	0x10110000
 800413c:	40021000 	.word	0x40021000
 8004140:	40010000 	.word	0x40010000
 8004144:	40010800 	.word	0x40010800
 8004148:	40010c00 	.word	0x40010c00
 800414c:	40011000 	.word	0x40011000
 8004150:	40011400 	.word	0x40011400
 8004154:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004158:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_GPIO_Init+0x304>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	43db      	mvns	r3, r3
 8004160:	4909      	ldr	r1, [pc, #36]	@ (8004188 <HAL_GPIO_Init+0x304>)
 8004162:	4013      	ands	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	3301      	adds	r3, #1
 800416a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	fa22 f303 	lsr.w	r3, r2, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	f47f ae8e 	bne.w	8003e98 <HAL_GPIO_Init+0x14>
  }
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	372c      	adds	r7, #44	@ 0x2c
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	40010400 	.word	0x40010400

0800418c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	887b      	ldrh	r3, [r7, #2]
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
 80041a8:	e001      	b.n	80041ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	807b      	strh	r3, [r7, #2]
 80041c6:	4613      	mov	r3, r2
 80041c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041ca:	787b      	ldrb	r3, [r7, #1]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041d0:	887a      	ldrh	r2, [r7, #2]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041d6:	e003      	b.n	80041e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041d8:	887b      	ldrh	r3, [r7, #2]
 80041da:	041a      	lsls	r2, r3, #16
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	611a      	str	r2, [r3, #16]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e12b      	b.n	8004456 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fe f992 	bl	800253c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2224      	movs	r2, #36	@ 0x24
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800423e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800424e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004250:	f001 f842 	bl	80052d8 <HAL_RCC_GetPCLK1Freq>
 8004254:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4a81      	ldr	r2, [pc, #516]	@ (8004460 <HAL_I2C_Init+0x274>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d807      	bhi.n	8004270 <HAL_I2C_Init+0x84>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a80      	ldr	r2, [pc, #512]	@ (8004464 <HAL_I2C_Init+0x278>)
 8004264:	4293      	cmp	r3, r2
 8004266:	bf94      	ite	ls
 8004268:	2301      	movls	r3, #1
 800426a:	2300      	movhi	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e006      	b.n	800427e <HAL_I2C_Init+0x92>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a7d      	ldr	r2, [pc, #500]	@ (8004468 <HAL_I2C_Init+0x27c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	bf94      	ite	ls
 8004278:	2301      	movls	r3, #1
 800427a:	2300      	movhi	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0e7      	b.n	8004456 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4a78      	ldr	r2, [pc, #480]	@ (800446c <HAL_I2C_Init+0x280>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	0c9b      	lsrs	r3, r3, #18
 8004290:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a6a      	ldr	r2, [pc, #424]	@ (8004460 <HAL_I2C_Init+0x274>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d802      	bhi.n	80042c0 <HAL_I2C_Init+0xd4>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3301      	adds	r3, #1
 80042be:	e009      	b.n	80042d4 <HAL_I2C_Init+0xe8>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	4a69      	ldr	r2, [pc, #420]	@ (8004470 <HAL_I2C_Init+0x284>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	3301      	adds	r3, #1
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	430b      	orrs	r3, r1
 80042da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	495c      	ldr	r1, [pc, #368]	@ (8004460 <HAL_I2C_Init+0x274>)
 80042f0:	428b      	cmp	r3, r1
 80042f2:	d819      	bhi.n	8004328 <HAL_I2C_Init+0x13c>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e59      	subs	r1, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004302:	1c59      	adds	r1, r3, #1
 8004304:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004308:	400b      	ands	r3, r1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_I2C_Init+0x138>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1e59      	subs	r1, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	fbb1 f3f3 	udiv	r3, r1, r3
 800431c:	3301      	adds	r3, #1
 800431e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004322:	e051      	b.n	80043c8 <HAL_I2C_Init+0x1dc>
 8004324:	2304      	movs	r3, #4
 8004326:	e04f      	b.n	80043c8 <HAL_I2C_Init+0x1dc>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d111      	bne.n	8004354 <HAL_I2C_Init+0x168>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1e58      	subs	r0, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6859      	ldr	r1, [r3, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	440b      	add	r3, r1
 800433e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004342:	3301      	adds	r3, #1
 8004344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e012      	b.n	800437a <HAL_I2C_Init+0x18e>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1e58      	subs	r0, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	0099      	lsls	r1, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	fbb0 f3f3 	udiv	r3, r0, r3
 800436a:	3301      	adds	r3, #1
 800436c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Init+0x196>
 800437e:	2301      	movs	r3, #1
 8004380:	e022      	b.n	80043c8 <HAL_I2C_Init+0x1dc>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10e      	bne.n	80043a8 <HAL_I2C_Init+0x1bc>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1e58      	subs	r0, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6859      	ldr	r1, [r3, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	440b      	add	r3, r1
 8004398:	fbb0 f3f3 	udiv	r3, r0, r3
 800439c:	3301      	adds	r3, #1
 800439e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043a6:	e00f      	b.n	80043c8 <HAL_I2C_Init+0x1dc>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1e58      	subs	r0, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	0099      	lsls	r1, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	6809      	ldr	r1, [r1, #0]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6911      	ldr	r1, [r2, #16]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68d2      	ldr	r2, [r2, #12]
 8004402:	4311      	orrs	r1, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	430b      	orrs	r3, r1
 800440a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	000186a0 	.word	0x000186a0
 8004464:	001e847f 	.word	0x001e847f
 8004468:	003d08ff 	.word	0x003d08ff
 800446c:	431bde83 	.word	0x431bde83
 8004470:	10624dd3 	.word	0x10624dd3

08004474 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	4608      	mov	r0, r1
 800447e:	4611      	mov	r1, r2
 8004480:	461a      	mov	r2, r3
 8004482:	4603      	mov	r3, r0
 8004484:	817b      	strh	r3, [r7, #10]
 8004486:	460b      	mov	r3, r1
 8004488:	813b      	strh	r3, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800448e:	f7fe fbc5 	bl	8002c1c <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b20      	cmp	r3, #32
 800449e:	f040 80d9 	bne.w	8004654 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	2319      	movs	r3, #25
 80044a8:	2201      	movs	r2, #1
 80044aa:	496d      	ldr	r1, [pc, #436]	@ (8004660 <HAL_I2C_Mem_Write+0x1ec>)
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f971 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
 80044ba:	e0cc      	b.n	8004656 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_I2C_Mem_Write+0x56>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e0c5      	b.n	8004656 <HAL_I2C_Mem_Write+0x1e2>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d007      	beq.n	80044f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2221      	movs	r2, #33	@ 0x21
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2240      	movs	r2, #64	@ 0x40
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a3a      	ldr	r2, [r7, #32]
 800451a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004520:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a4d      	ldr	r2, [pc, #308]	@ (8004664 <HAL_I2C_Mem_Write+0x1f0>)
 8004530:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004532:	88f8      	ldrh	r0, [r7, #6]
 8004534:	893a      	ldrh	r2, [r7, #8]
 8004536:	8979      	ldrh	r1, [r7, #10]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	9301      	str	r3, [sp, #4]
 800453c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	4603      	mov	r3, r0
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f890 	bl	8004668 <I2C_RequestMemoryWrite>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d052      	beq.n	80045f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e081      	b.n	8004656 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fa36 	bl	80049c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	2b04      	cmp	r3, #4
 8004568:	d107      	bne.n	800457a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004578:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e06b      	b.n	8004656 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	781a      	ldrb	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d11b      	bne.n	80045f4 <HAL_I2C_Mem_Write+0x180>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d017      	beq.n	80045f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1aa      	bne.n	8004552 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fa29 	bl	8004a58 <I2C_WaitOnBTFFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	2b04      	cmp	r3, #4
 8004612:	d107      	bne.n	8004624 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004622:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e016      	b.n	8004656 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	00100002 	.word	0x00100002
 8004664:	ffff0000 	.word	0xffff0000

08004668 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4603      	mov	r3, r0
 8004678:	817b      	strh	r3, [r7, #10]
 800467a:	460b      	mov	r3, r1
 800467c:	813b      	strh	r3, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	2200      	movs	r2, #0
 800469a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f878 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b8:	d103      	bne.n	80046c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e05f      	b.n	8004786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	492d      	ldr	r1, [pc, #180]	@ (8004790 <I2C_RequestMemoryWrite+0x128>)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f8d3 	bl	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e04c      	b.n	8004786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004704:	6a39      	ldr	r1, [r7, #32]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f95e 	bl	80049c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	2b04      	cmp	r3, #4
 8004718:	d107      	bne.n	800472a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e02b      	b.n	8004786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d105      	bne.n	8004740 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004734:	893b      	ldrh	r3, [r7, #8]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	611a      	str	r2, [r3, #16]
 800473e:	e021      	b.n	8004784 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004740:	893b      	ldrh	r3, [r7, #8]
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	b29b      	uxth	r3, r3
 8004746:	b2da      	uxtb	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800474e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004750:	6a39      	ldr	r1, [r7, #32]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f938 	bl	80049c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00d      	beq.n	800477a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	2b04      	cmp	r3, #4
 8004764:	d107      	bne.n	8004776 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e005      	b.n	8004786 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800477a:	893b      	ldrh	r3, [r7, #8]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	00010002 	.word	0x00010002

08004794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047a4:	e048      	b.n	8004838 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d044      	beq.n	8004838 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fe fa35 	bl	8002c1c <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d139      	bne.n	8004838 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	0c1b      	lsrs	r3, r3, #16
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d10d      	bne.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	43da      	mvns	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	e00c      	b.n	8004804 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	43da      	mvns	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	429a      	cmp	r2, r3
 8004808:	d116      	bne.n	8004838 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004824:	f043 0220 	orr.w	r2, r3, #32
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e023      	b.n	8004880 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d10d      	bne.n	800485e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	43da      	mvns	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4013      	ands	r3, r2
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	e00c      	b.n	8004878 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	43da      	mvns	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4013      	ands	r3, r2
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	bf0c      	ite	eq
 8004870:	2301      	moveq	r3, #1
 8004872:	2300      	movne	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	429a      	cmp	r2, r3
 800487c:	d093      	beq.n	80047a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004896:	e071      	b.n	800497c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a6:	d123      	bne.n	80048f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	f043 0204 	orr.w	r2, r3, #4
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e067      	b.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d041      	beq.n	800497c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f8:	f7fe f990 	bl	8002c1c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d302      	bcc.n	800490e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d136      	bne.n	800497c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d10c      	bne.n	8004932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	43da      	mvns	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4013      	ands	r3, r2
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf14      	ite	ne
 800492a:	2301      	movne	r3, #1
 800492c:	2300      	moveq	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	e00b      	b.n	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	43da      	mvns	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4013      	ands	r3, r2
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf14      	ite	ne
 8004944:	2301      	movne	r3, #1
 8004946:	2300      	moveq	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e021      	b.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d10c      	bne.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	43da      	mvns	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4013      	ands	r3, r2
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e00b      	b.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	43da      	mvns	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4013      	ands	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f47f af6d 	bne.w	8004898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d4:	e034      	b.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f886 	bl	8004ae8 <I2C_IsAcknowledgeFailed>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e034      	b.n	8004a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d028      	beq.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ee:	f7fe f915 	bl	8002c1c <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d11d      	bne.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0e:	2b80      	cmp	r3, #128	@ 0x80
 8004a10:	d016      	beq.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e007      	b.n	8004a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4a:	2b80      	cmp	r3, #128	@ 0x80
 8004a4c:	d1c3      	bne.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a64:	e034      	b.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f83e 	bl	8004ae8 <I2C_IsAcknowledgeFailed>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e034      	b.n	8004ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7c:	d028      	beq.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7e:	f7fe f8cd 	bl	8002c1c <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d302      	bcc.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d11d      	bne.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d016      	beq.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e007      	b.n	8004ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d1c3      	bne.n	8004a66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afe:	d11b      	bne.n	8004b38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b24:	f043 0204 	orr.w	r2, r3, #4
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e272      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8087 	beq.w	8004c72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b64:	4b92      	ldr	r3, [pc, #584]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 030c 	and.w	r3, r3, #12
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d00c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b70:	4b8f      	ldr	r3, [pc, #572]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d112      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5e>
 8004b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b88:	d10b      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8a:	4b89      	ldr	r3, [pc, #548]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d06c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x12c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d168      	bne.n	8004c70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e24c      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x76>
 8004bac:	4b80      	ldr	r3, [pc, #512]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a7f      	ldr	r2, [pc, #508]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e02e      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x98>
 8004bc2:	4b7b      	ldr	r3, [pc, #492]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a7a      	ldr	r2, [pc, #488]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	4b78      	ldr	r3, [pc, #480]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a77      	ldr	r2, [pc, #476]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e01d      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCC_OscConfig+0xbc>
 8004be6:	4b72      	ldr	r3, [pc, #456]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a71      	ldr	r2, [pc, #452]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4b6f      	ldr	r3, [pc, #444]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6e      	ldr	r2, [pc, #440]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e00b      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004c00:	4b6b      	ldr	r3, [pc, #428]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6a      	ldr	r2, [pc, #424]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b68      	ldr	r3, [pc, #416]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a67      	ldr	r2, [pc, #412]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fd fffc 	bl	8002c1c <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c28:	f7fd fff8 	bl	8002c1c <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	@ 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e200      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0xe4>
 8004c46:	e014      	b.n	8004c72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fd ffe8 	bl	8002c1c <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c50:	f7fd ffe4 	bl	8002c1c <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	@ 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e1ec      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c62:	4b53      	ldr	r3, [pc, #332]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x10c>
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d063      	beq.n	8004d46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c7e:	4b4c      	ldr	r3, [pc, #304]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c8a:	4b49      	ldr	r3, [pc, #292]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d11c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x18c>
 8004c96:	4b46      	ldr	r3, [pc, #280]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d116      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca2:	4b43      	ldr	r3, [pc, #268]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <HAL_RCC_OscConfig+0x176>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d001      	beq.n	8004cba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e1c0      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	4b3d      	ldr	r3, [pc, #244]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4939      	ldr	r1, [pc, #228]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cce:	e03a      	b.n	8004d46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d020      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd8:	4b36      	ldr	r3, [pc, #216]	@ (8004db4 <HAL_RCC_OscConfig+0x270>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fd ff9d 	bl	8002c1c <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce6:	f7fd ff99 	bl	8002c1c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e1a1      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d04:	4b2a      	ldr	r3, [pc, #168]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4927      	ldr	r1, [pc, #156]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]
 8004d18:	e015      	b.n	8004d46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d1a:	4b26      	ldr	r3, [pc, #152]	@ (8004db4 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7fd ff7c 	bl	8002c1c <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d28:	f7fd ff78 	bl	8002c1c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e180      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d03a      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d019      	beq.n	8004d8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5a:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d60:	f7fd ff5c 	bl	8002c1c <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d68:	f7fd ff58 	bl	8002c1c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e160      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d86:	2001      	movs	r0, #1
 8004d88:	f000 face 	bl	8005328 <RCC_Delay>
 8004d8c:	e01c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004db8 <HAL_RCC_OscConfig+0x274>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d94:	f7fd ff42 	bl	8002c1c <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9a:	e00f      	b.n	8004dbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9c:	f7fd ff3e 	bl	8002c1c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d908      	bls.n	8004dbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e146      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000
 8004db4:	42420000 	.word	0x42420000
 8004db8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbc:	4b92      	ldr	r3, [pc, #584]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e9      	bne.n	8004d9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80a6 	beq.w	8004f22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dda:	4b8b      	ldr	r3, [pc, #556]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	4b88      	ldr	r3, [pc, #544]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4a87      	ldr	r2, [pc, #540]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	61d3      	str	r3, [r2, #28]
 8004df2:	4b85      	ldr	r3, [pc, #532]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e02:	4b82      	ldr	r3, [pc, #520]	@ (800500c <HAL_RCC_OscConfig+0x4c8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d118      	bne.n	8004e40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800500c <HAL_RCC_OscConfig+0x4c8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a7e      	ldr	r2, [pc, #504]	@ (800500c <HAL_RCC_OscConfig+0x4c8>)
 8004e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1a:	f7fd feff 	bl	8002c1c <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e22:	f7fd fefb 	bl	8002c1c <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b64      	cmp	r3, #100	@ 0x64
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e103      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e34:	4b75      	ldr	r3, [pc, #468]	@ (800500c <HAL_RCC_OscConfig+0x4c8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d106      	bne.n	8004e56 <HAL_RCC_OscConfig+0x312>
 8004e48:	4b6f      	ldr	r3, [pc, #444]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6213      	str	r3, [r2, #32]
 8004e54:	e02d      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x334>
 8004e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	4a69      	ldr	r2, [pc, #420]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	6213      	str	r3, [r2, #32]
 8004e6a:	4b67      	ldr	r3, [pc, #412]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	4a66      	ldr	r2, [pc, #408]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	6213      	str	r3, [r2, #32]
 8004e76:	e01c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCC_OscConfig+0x356>
 8004e80:	4b61      	ldr	r3, [pc, #388]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	4a60      	ldr	r2, [pc, #384]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	6213      	str	r3, [r2, #32]
 8004e8c:	4b5e      	ldr	r3, [pc, #376]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4a5d      	ldr	r2, [pc, #372]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6213      	str	r3, [r2, #32]
 8004e98:	e00b      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	4a5a      	ldr	r2, [pc, #360]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6213      	str	r3, [r2, #32]
 8004ea6:	4b58      	ldr	r3, [pc, #352]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	4a57      	ldr	r2, [pc, #348]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d015      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eba:	f7fd feaf 	bl	8002c1c <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec2:	f7fd feab 	bl	8002c1c <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0b1      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0ee      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x37e>
 8004ee4:	e014      	b.n	8004f10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee6:	f7fd fe99 	bl	8002c1c <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eee:	f7fd fe95 	bl	8002c1c <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e09b      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f04:	4b40      	ldr	r3, [pc, #256]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ee      	bne.n	8004eee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f16:	4b3c      	ldr	r3, [pc, #240]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4a3b      	ldr	r2, [pc, #236]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 8087 	beq.w	800503a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f2c:	4b36      	ldr	r3, [pc, #216]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d061      	beq.n	8004ffc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d146      	bne.n	8004fce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f40:	4b33      	ldr	r3, [pc, #204]	@ (8005010 <HAL_RCC_OscConfig+0x4cc>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f46:	f7fd fe69 	bl	8002c1c <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fd fe65 	bl	8002c1c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e06d      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f60:	4b29      	ldr	r3, [pc, #164]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f74:	d108      	bne.n	8004f88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f76:	4b24      	ldr	r3, [pc, #144]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	4921      	ldr	r1, [pc, #132]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f88:	4b1f      	ldr	r3, [pc, #124]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a19      	ldr	r1, [r3, #32]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	491b      	ldr	r1, [pc, #108]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8005010 <HAL_RCC_OscConfig+0x4cc>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa6:	f7fd fe39 	bl	8002c1c <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fae:	f7fd fe35 	bl	8002c1c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e03d      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fc0:	4b11      	ldr	r3, [pc, #68]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x46a>
 8004fcc:	e035      	b.n	800503a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fce:	4b10      	ldr	r3, [pc, #64]	@ (8005010 <HAL_RCC_OscConfig+0x4cc>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fd fe22 	bl	8002c1c <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fd fe1e 	bl	8002c1c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e026      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fee:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <HAL_RCC_OscConfig+0x4c4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x498>
 8004ffa:	e01e      	b.n	800503a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d107      	bne.n	8005014 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e019      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
 8005008:	40021000 	.word	0x40021000
 800500c:	40007000 	.word	0x40007000
 8005010:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005014:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <HAL_RCC_OscConfig+0x500>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	429a      	cmp	r2, r3
 8005026:	d106      	bne.n	8005036 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d001      	beq.n	800503a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000

08005048 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0d0      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800505c:	4b6a      	ldr	r3, [pc, #424]	@ (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d910      	bls.n	800508c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b67      	ldr	r3, [pc, #412]	@ (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 0207 	bic.w	r2, r3, #7
 8005072:	4965      	ldr	r1, [pc, #404]	@ (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800507a:	4b63      	ldr	r3, [pc, #396]	@ (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0b8      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d020      	beq.n	80050da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a4:	4b59      	ldr	r3, [pc, #356]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4a58      	ldr	r2, [pc, #352]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050bc:	4b53      	ldr	r3, [pc, #332]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a52      	ldr	r2, [pc, #328]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80050c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c8:	4b50      	ldr	r3, [pc, #320]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	494d      	ldr	r1, [pc, #308]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d040      	beq.n	8005168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d107      	bne.n	80050fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ee:	4b47      	ldr	r3, [pc, #284]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d115      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d107      	bne.n	8005116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005106:	4b41      	ldr	r3, [pc, #260]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e073      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005116:	4b3d      	ldr	r3, [pc, #244]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e06b      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005126:	4b39      	ldr	r3, [pc, #228]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f023 0203 	bic.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4936      	ldr	r1, [pc, #216]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	4313      	orrs	r3, r2
 8005136:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005138:	f7fd fd70 	bl	8002c1c <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513e:	e00a      	b.n	8005156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005140:	f7fd fd6c 	bl	8002c1c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e053      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005156:	4b2d      	ldr	r3, [pc, #180]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f003 020c 	and.w	r2, r3, #12
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	429a      	cmp	r2, r3
 8005166:	d1eb      	bne.n	8005140 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005168:	4b27      	ldr	r3, [pc, #156]	@ (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d210      	bcs.n	8005198 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 0207 	bic.w	r2, r3, #7
 800517e:	4922      	ldr	r1, [pc, #136]	@ (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b20      	ldr	r3, [pc, #128]	@ (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e032      	b.n	80051fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a4:	4b19      	ldr	r3, [pc, #100]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4916      	ldr	r1, [pc, #88]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051c2:	4b12      	ldr	r3, [pc, #72]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	490e      	ldr	r1, [pc, #56]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051d6:	f000 f821 	bl	800521c <HAL_RCC_GetSysClockFreq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	490a      	ldr	r1, [pc, #40]	@ (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80051e8:	5ccb      	ldrb	r3, [r1, r3]
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	4a09      	ldr	r2, [pc, #36]	@ (8005214 <HAL_RCC_ClockConfig+0x1cc>)
 80051f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051f2:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <HAL_RCC_ClockConfig+0x1d0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fd fcce 	bl	8002b98 <HAL_InitTick>

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40022000 	.word	0x40022000
 800520c:	40021000 	.word	0x40021000
 8005210:	0800e720 	.word	0x0800e720
 8005214:	20000028 	.word	0x20000028
 8005218:	2000002c 	.word	0x2000002c

0800521c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	2300      	movs	r3, #0
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	2300      	movs	r3, #0
 8005230:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005236:	4b1e      	ldr	r3, [pc, #120]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b04      	cmp	r3, #4
 8005244:	d002      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x30>
 8005246:	2b08      	cmp	r3, #8
 8005248:	d003      	beq.n	8005252 <HAL_RCC_GetSysClockFreq+0x36>
 800524a:	e027      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800524c:	4b19      	ldr	r3, [pc, #100]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800524e:	613b      	str	r3, [r7, #16]
      break;
 8005250:	e027      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	0c9b      	lsrs	r3, r3, #18
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	4a17      	ldr	r2, [pc, #92]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800525c:	5cd3      	ldrb	r3, [r2, r3]
 800525e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d010      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800526a:	4b11      	ldr	r3, [pc, #68]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	0c5b      	lsrs	r3, r3, #17
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	4a11      	ldr	r2, [pc, #68]	@ (80052bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005276:	5cd3      	ldrb	r3, [r2, r3]
 8005278:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a0d      	ldr	r2, [pc, #52]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800527e:	fb03 f202 	mul.w	r2, r3, r2
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e004      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a0c      	ldr	r2, [pc, #48]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005290:	fb02 f303 	mul.w	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	613b      	str	r3, [r7, #16]
      break;
 800529a:	e002      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800529c:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800529e:	613b      	str	r3, [r7, #16]
      break;
 80052a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a2:	693b      	ldr	r3, [r7, #16]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000
 80052b4:	007a1200 	.word	0x007a1200
 80052b8:	0800e738 	.word	0x0800e738
 80052bc:	0800e748 	.word	0x0800e748
 80052c0:	003d0900 	.word	0x003d0900

080052c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c8:	4b02      	ldr	r3, [pc, #8]	@ (80052d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80052ca:	681b      	ldr	r3, [r3, #0]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	20000028 	.word	0x20000028

080052d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052dc:	f7ff fff2 	bl	80052c4 <HAL_RCC_GetHCLKFreq>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4b05      	ldr	r3, [pc, #20]	@ (80052f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	0a1b      	lsrs	r3, r3, #8
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	4903      	ldr	r1, [pc, #12]	@ (80052fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ee:	5ccb      	ldrb	r3, [r1, r3]
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000
 80052fc:	0800e730 	.word	0x0800e730

08005300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005304:	f7ff ffde 	bl	80052c4 <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b05      	ldr	r3, [pc, #20]	@ (8005320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	0adb      	lsrs	r3, r3, #11
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	4903      	ldr	r1, [pc, #12]	@ (8005324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800531c:	4618      	mov	r0, r3
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40021000 	.word	0x40021000
 8005324:	0800e730 	.word	0x0800e730

08005328 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005330:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <RCC_Delay+0x34>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0a      	ldr	r2, [pc, #40]	@ (8005360 <RCC_Delay+0x38>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	0a5b      	lsrs	r3, r3, #9
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005344:	bf00      	nop
  }
  while (Delay --);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1e5a      	subs	r2, r3, #1
 800534a:	60fa      	str	r2, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f9      	bne.n	8005344 <RCC_Delay+0x1c>
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr
 800535c:	20000028 	.word	0x20000028
 8005360:	10624dd3 	.word	0x10624dd3

08005364 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d07d      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005380:	2300      	movs	r3, #0
 8005382:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005384:	4b4f      	ldr	r3, [pc, #316]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10d      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005390:	4b4c      	ldr	r3, [pc, #304]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	4a4b      	ldr	r2, [pc, #300]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800539a:	61d3      	str	r3, [r2, #28]
 800539c:	4b49      	ldr	r3, [pc, #292]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a8:	2301      	movs	r3, #1
 80053aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ac:	4b46      	ldr	r3, [pc, #280]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d118      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053b8:	4b43      	ldr	r3, [pc, #268]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a42      	ldr	r2, [pc, #264]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053c4:	f7fd fc2a 	bl	8002c1c <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ca:	e008      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053cc:	f7fd fc26 	bl	8002c1c <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b64      	cmp	r3, #100	@ 0x64
 80053d8:	d901      	bls.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e06d      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053de:	4b3a      	ldr	r3, [pc, #232]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f0      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053ea:	4b36      	ldr	r3, [pc, #216]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d02e      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	429a      	cmp	r2, r3
 8005406:	d027      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005408:	4b2e      	ldr	r3, [pc, #184]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005410:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005412:	4b2e      	ldr	r3, [pc, #184]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005414:	2201      	movs	r2, #1
 8005416:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005418:	4b2c      	ldr	r3, [pc, #176]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800541e:	4a29      	ldr	r2, [pc, #164]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d014      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542e:	f7fd fbf5 	bl	8002c1c <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005434:	e00a      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005436:	f7fd fbf1 	bl	8002c1c <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e036      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544c:	4b1d      	ldr	r3, [pc, #116]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ee      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005458:	4b1a      	ldr	r3, [pc, #104]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4917      	ldr	r1, [pc, #92]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005466:	4313      	orrs	r3, r2
 8005468:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800546a:	7dfb      	ldrb	r3, [r7, #23]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d105      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005470:	4b14      	ldr	r3, [pc, #80]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	4a13      	ldr	r2, [pc, #76]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800547a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005488:	4b0e      	ldr	r3, [pc, #56]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	490b      	ldr	r1, [pc, #44]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d008      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054a6:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	4904      	ldr	r1, [pc, #16]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000
 80054c8:	40007000 	.word	0x40007000
 80054cc:	42420440 	.word	0x42420440

080054d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e041      	b.n	8005566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fd f870 	bl	80025dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f000 fafc 	bl	8005b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	d001      	beq.n	8005588 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e032      	b.n	80055ee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a18      	ldr	r2, [pc, #96]	@ (80055f8 <HAL_TIM_Base_Start+0x88>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00e      	beq.n	80055b8 <HAL_TIM_Base_Start+0x48>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a2:	d009      	beq.n	80055b8 <HAL_TIM_Base_Start+0x48>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a14      	ldr	r2, [pc, #80]	@ (80055fc <HAL_TIM_Base_Start+0x8c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_TIM_Base_Start+0x48>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a13      	ldr	r2, [pc, #76]	@ (8005600 <HAL_TIM_Base_Start+0x90>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d111      	bne.n	80055dc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d010      	beq.n	80055ec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055da:	e007      	b.n	80055ec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	40012c00 	.word	0x40012c00
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800

08005604 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e041      	b.n	800569a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f839 	bl	80056a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3304      	adds	r3, #4
 8005640:	4619      	mov	r1, r3
 8005642:	4610      	mov	r0, r2
 8005644:	f000 fa62 	bl	8005b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d109      	bne.n	80056d8 <HAL_TIM_PWM_Start+0x24>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	e022      	b.n	800571e <HAL_TIM_PWM_Start+0x6a>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d109      	bne.n	80056f2 <HAL_TIM_PWM_Start+0x3e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	bf14      	ite	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	2300      	moveq	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	e015      	b.n	800571e <HAL_TIM_PWM_Start+0x6a>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d109      	bne.n	800570c <HAL_TIM_PWM_Start+0x58>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	e008      	b.n	800571e <HAL_TIM_PWM_Start+0x6a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e05e      	b.n	80057e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d104      	bne.n	8005736 <HAL_TIM_PWM_Start+0x82>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005734:	e013      	b.n	800575e <HAL_TIM_PWM_Start+0xaa>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b04      	cmp	r3, #4
 800573a:	d104      	bne.n	8005746 <HAL_TIM_PWM_Start+0x92>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005744:	e00b      	b.n	800575e <HAL_TIM_PWM_Start+0xaa>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b08      	cmp	r3, #8
 800574a:	d104      	bne.n	8005756 <HAL_TIM_PWM_Start+0xa2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005754:	e003      	b.n	800575e <HAL_TIM_PWM_Start+0xaa>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2201      	movs	r2, #1
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fc50 	bl	800600c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1e      	ldr	r2, [pc, #120]	@ (80057ec <HAL_TIM_PWM_Start+0x138>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d107      	bne.n	8005786 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a18      	ldr	r2, [pc, #96]	@ (80057ec <HAL_TIM_PWM_Start+0x138>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00e      	beq.n	80057ae <HAL_TIM_PWM_Start+0xfa>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005798:	d009      	beq.n	80057ae <HAL_TIM_PWM_Start+0xfa>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a14      	ldr	r2, [pc, #80]	@ (80057f0 <HAL_TIM_PWM_Start+0x13c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <HAL_TIM_PWM_Start+0xfa>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a12      	ldr	r2, [pc, #72]	@ (80057f4 <HAL_TIM_PWM_Start+0x140>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d111      	bne.n	80057d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b06      	cmp	r3, #6
 80057be:	d010      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d0:	e007      	b.n	80057e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800

080057f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005812:	2302      	movs	r3, #2
 8005814:	e0ae      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b0c      	cmp	r3, #12
 8005822:	f200 809f 	bhi.w	8005964 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005826:	a201      	add	r2, pc, #4	@ (adr r2, 800582c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	08005861 	.word	0x08005861
 8005830:	08005965 	.word	0x08005965
 8005834:	08005965 	.word	0x08005965
 8005838:	08005965 	.word	0x08005965
 800583c:	080058a1 	.word	0x080058a1
 8005840:	08005965 	.word	0x08005965
 8005844:	08005965 	.word	0x08005965
 8005848:	08005965 	.word	0x08005965
 800584c:	080058e3 	.word	0x080058e3
 8005850:	08005965 	.word	0x08005965
 8005854:	08005965 	.word	0x08005965
 8005858:	08005965 	.word	0x08005965
 800585c:	08005923 	.word	0x08005923
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 f9b2 	bl	8005bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0208 	orr.w	r2, r2, #8
 800587a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0204 	bic.w	r2, r2, #4
 800588a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6999      	ldr	r1, [r3, #24]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	619a      	str	r2, [r3, #24]
      break;
 800589e:	e064      	b.n	800596a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f9f8 	bl	8005c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6999      	ldr	r1, [r3, #24]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	021a      	lsls	r2, r3, #8
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	619a      	str	r2, [r3, #24]
      break;
 80058e0:	e043      	b.n	800596a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fa41 	bl	8005d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0208 	orr.w	r2, r2, #8
 80058fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0204 	bic.w	r2, r2, #4
 800590c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69d9      	ldr	r1, [r3, #28]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	61da      	str	r2, [r3, #28]
      break;
 8005920:	e023      	b.n	800596a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fa8b 	bl	8005e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800593c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800594c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69d9      	ldr	r1, [r3, #28]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	021a      	lsls	r2, r3, #8
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	61da      	str	r2, [r3, #28]
      break;
 8005962:	e002      	b.n	800596a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	75fb      	strb	r3, [r7, #23]
      break;
 8005968:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005972:	7dfb      	ldrb	r3, [r7, #23]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_TIM_ConfigClockSource+0x1c>
 8005994:	2302      	movs	r3, #2
 8005996:	e0b4      	b.n	8005b02 <HAL_TIM_ConfigClockSource+0x186>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059d0:	d03e      	beq.n	8005a50 <HAL_TIM_ConfigClockSource+0xd4>
 80059d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059d6:	f200 8087 	bhi.w	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80059da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059de:	f000 8086 	beq.w	8005aee <HAL_TIM_ConfigClockSource+0x172>
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e6:	d87f      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80059e8:	2b70      	cmp	r3, #112	@ 0x70
 80059ea:	d01a      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0xa6>
 80059ec:	2b70      	cmp	r3, #112	@ 0x70
 80059ee:	d87b      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80059f0:	2b60      	cmp	r3, #96	@ 0x60
 80059f2:	d050      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x11a>
 80059f4:	2b60      	cmp	r3, #96	@ 0x60
 80059f6:	d877      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80059f8:	2b50      	cmp	r3, #80	@ 0x50
 80059fa:	d03c      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0xfa>
 80059fc:	2b50      	cmp	r3, #80	@ 0x50
 80059fe:	d873      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a00:	2b40      	cmp	r3, #64	@ 0x40
 8005a02:	d058      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0x13a>
 8005a04:	2b40      	cmp	r3, #64	@ 0x40
 8005a06:	d86f      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a08:	2b30      	cmp	r3, #48	@ 0x30
 8005a0a:	d064      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a0c:	2b30      	cmp	r3, #48	@ 0x30
 8005a0e:	d86b      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d060      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d867      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d05c      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d05a      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a20:	e062      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a32:	f000 facc 	bl	8005fce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	609a      	str	r2, [r3, #8]
      break;
 8005a4e:	e04f      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a60:	f000 fab5 	bl	8005fce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a72:	609a      	str	r2, [r3, #8]
      break;
 8005a74:	e03c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a82:	461a      	mov	r2, r3
 8005a84:	f000 fa2c 	bl	8005ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2150      	movs	r1, #80	@ 0x50
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fa83 	bl	8005f9a <TIM_ITRx_SetConfig>
      break;
 8005a94:	e02c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f000 fa4a 	bl	8005f3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2160      	movs	r1, #96	@ 0x60
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fa73 	bl	8005f9a <TIM_ITRx_SetConfig>
      break;
 8005ab4:	e01c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f000 fa0c 	bl	8005ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2140      	movs	r1, #64	@ 0x40
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fa63 	bl	8005f9a <TIM_ITRx_SetConfig>
      break;
 8005ad4:	e00c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f000 fa5a 	bl	8005f9a <TIM_ITRx_SetConfig>
      break;
 8005ae6:	e003      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      break;
 8005aec:	e000      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a29      	ldr	r2, [pc, #164]	@ (8005bc4 <TIM_Base_SetConfig+0xb8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_Base_SetConfig+0x30>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2a:	d007      	beq.n	8005b3c <TIM_Base_SetConfig+0x30>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a26      	ldr	r2, [pc, #152]	@ (8005bc8 <TIM_Base_SetConfig+0xbc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0x30>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a25      	ldr	r2, [pc, #148]	@ (8005bcc <TIM_Base_SetConfig+0xc0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d108      	bne.n	8005b4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc4 <TIM_Base_SetConfig+0xb8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <TIM_Base_SetConfig+0x62>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b5c:	d007      	beq.n	8005b6e <TIM_Base_SetConfig+0x62>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a19      	ldr	r2, [pc, #100]	@ (8005bc8 <TIM_Base_SetConfig+0xbc>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_Base_SetConfig+0x62>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a18      	ldr	r2, [pc, #96]	@ (8005bcc <TIM_Base_SetConfig+0xc0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d108      	bne.n	8005b80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a07      	ldr	r2, [pc, #28]	@ (8005bc4 <TIM_Base_SetConfig+0xb8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d103      	bne.n	8005bb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	615a      	str	r2, [r3, #20]
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800

08005bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 0201 	bic.w	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f023 0302 	bic.w	r3, r3, #2
 8005c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a1c      	ldr	r2, [pc, #112]	@ (8005c98 <TIM_OC1_SetConfig+0xc8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d10c      	bne.n	8005c46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0308 	bic.w	r3, r3, #8
 8005c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f023 0304 	bic.w	r3, r3, #4
 8005c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a13      	ldr	r2, [pc, #76]	@ (8005c98 <TIM_OC1_SetConfig+0xc8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d111      	bne.n	8005c72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40012c00 	.word	0x40012c00

08005c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f023 0210 	bic.w	r2, r3, #16
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f023 0320 	bic.w	r3, r3, #32
 8005ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d6c <TIM_OC2_SetConfig+0xd0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d10d      	bne.n	8005d18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a14      	ldr	r2, [pc, #80]	@ (8005d6c <TIM_OC2_SetConfig+0xd0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d113      	bne.n	8005d48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr
 8005d6c:	40012c00 	.word	0x40012c00

08005d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e40 <TIM_OC3_SetConfig+0xd0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d10d      	bne.n	8005dea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a14      	ldr	r2, [pc, #80]	@ (8005e40 <TIM_OC3_SetConfig+0xd0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d113      	bne.n	8005e1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	621a      	str	r2, [r3, #32]
}
 8005e34:	bf00      	nop
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40012c00 	.word	0x40012c00

08005e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	031b      	lsls	r3, r3, #12
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8005edc <TIM_OC4_SetConfig+0x98>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d109      	bne.n	8005eb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	019b      	lsls	r3, r3, #6
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	40012c00 	.word	0x40012c00

08005ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f023 0201 	bic.w	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f023 030a 	bic.w	r3, r3, #10
 8005f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr

08005f3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f023 0210 	bic.w	r2, r3, #16
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	031b      	lsls	r3, r3, #12
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	621a      	str	r2, [r3, #32]
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc80      	pop	{r7}
 8005f98:	4770      	bx	lr

08005f9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f043 0307 	orr.w	r3, r3, #7
 8005fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	609a      	str	r2, [r3, #8]
}
 8005fc4:	bf00      	nop
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bc80      	pop	{r7}
 8005fcc:	4770      	bx	lr

08005fce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b087      	sub	sp, #28
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
 8005fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	021a      	lsls	r2, r3, #8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	609a      	str	r2, [r3, #8]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr

0800600c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	2201      	movs	r2, #1
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1a      	ldr	r2, [r3, #32]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	43db      	mvns	r3, r3
 800602e:	401a      	ands	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a1a      	ldr	r2, [r3, #32]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	fa01 f303 	lsl.w	r3, r1, r3
 8006044:	431a      	orrs	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	621a      	str	r2, [r3, #32]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006068:	2302      	movs	r3, #2
 800606a:	e046      	b.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a16      	ldr	r2, [pc, #88]	@ (8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00e      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b8:	d009      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a12      	ldr	r2, [pc, #72]	@ (8006108 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d004      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a10      	ldr	r2, [pc, #64]	@ (800610c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d10c      	bne.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr
 8006104:	40012c00 	.word	0x40012c00
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800

08006110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006128:	2302      	movs	r3, #2
 800612a:	e03d      	b.n	80061a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr

080061b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e042      	b.n	800624a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d106      	bne.n	80061de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fc fa85 	bl	80026e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2224      	movs	r2, #36	@ 0x24
 80061e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fe02 	bl	8006e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800620a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695a      	ldr	r2, [r3, #20]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800621a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800622a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b08a      	sub	sp, #40	@ 0x28
 8006256:	af02      	add	r7, sp, #8
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	603b      	str	r3, [r7, #0]
 800625e:	4613      	mov	r3, r2
 8006260:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b20      	cmp	r3, #32
 8006270:	d16d      	bne.n	800634e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_UART_Transmit+0x2c>
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e066      	b.n	8006350 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2221      	movs	r2, #33	@ 0x21
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006290:	f7fc fcc4 	bl	8002c1c <HAL_GetTick>
 8006294:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	88fa      	ldrh	r2, [r7, #6]
 800629a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	88fa      	ldrh	r2, [r7, #6]
 80062a0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062aa:	d108      	bne.n	80062be <HAL_UART_Transmit+0x6c>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d104      	bne.n	80062be <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e003      	b.n	80062c6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062c6:	e02a      	b.n	800631e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2200      	movs	r2, #0
 80062d0:	2180      	movs	r1, #128	@ 0x80
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fb8a 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e036      	b.n	8006350 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10b      	bne.n	8006300 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	3302      	adds	r3, #2
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	e007      	b.n	8006310 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	3301      	adds	r3, #1
 800630e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1cf      	bne.n	80062c8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2200      	movs	r2, #0
 8006330:	2140      	movs	r1, #64	@ 0x40
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fb5a 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e006      	b.n	8006350 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e000      	b.n	8006350 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800634e:	2302      	movs	r3, #2
  }
}
 8006350:	4618      	mov	r0, r3
 8006352:	3720      	adds	r7, #32
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	@ 0x28
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4613      	mov	r3, r2
 8006366:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b20      	cmp	r3, #32
 8006376:	d17c      	bne.n	8006472 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_UART_Receive+0x2c>
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e075      	b.n	8006474 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2222      	movs	r2, #34	@ 0x22
 8006392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800639c:	f7fc fc3e 	bl	8002c1c <HAL_GetTick>
 80063a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	88fa      	ldrh	r2, [r7, #6]
 80063a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	88fa      	ldrh	r2, [r7, #6]
 80063ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063b6:	d108      	bne.n	80063ca <HAL_UART_Receive+0x72>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	e003      	b.n	80063d2 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80063d2:	e043      	b.n	800645c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2200      	movs	r2, #0
 80063dc:	2120      	movs	r1, #32
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fb04 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e042      	b.n	8006474 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10c      	bne.n	800640e <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006400:	b29a      	uxth	r2, r3
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	3302      	adds	r3, #2
 800640a:	61bb      	str	r3, [r7, #24]
 800640c:	e01f      	b.n	800644e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006416:	d007      	beq.n	8006428 <HAL_UART_Receive+0xd0>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <HAL_UART_Receive+0xde>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	b2da      	uxtb	r2, r3
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	e008      	b.n	8006448 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006442:	b2da      	uxtb	r2, r3
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	3301      	adds	r3, #1
 800644c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1b6      	bne.n	80063d4 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e000      	b.n	8006474 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006472:	2302      	movs	r3, #2
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	3720      	adds	r7, #32
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b0ba      	sub	sp, #232	@ 0xe8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80064ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10f      	bne.n	80064e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d009      	beq.n	80064e2 <HAL_UART_IRQHandler+0x66>
 80064ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fbd1 	bl	8006c82 <UART_Receive_IT>
      return;
 80064e0:	e25b      	b.n	800699a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 80de 	beq.w	80066a8 <HAL_UART_IRQHandler+0x22c>
 80064ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d106      	bne.n	8006506 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 80d1 	beq.w	80066a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00b      	beq.n	800652a <HAL_UART_IRQHandler+0xae>
 8006512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006522:	f043 0201 	orr.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800652a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <HAL_UART_IRQHandler+0xd2>
 8006536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d005      	beq.n	800654e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006546:	f043 0202 	orr.w	r2, r3, #2
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800654e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <HAL_UART_IRQHandler+0xf6>
 800655a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656a:	f043 0204 	orr.w	r2, r3, #4
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d011      	beq.n	80065a2 <HAL_UART_IRQHandler+0x126>
 800657e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b00      	cmp	r3, #0
 8006588:	d105      	bne.n	8006596 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800658a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659a:	f043 0208 	orr.w	r2, r3, #8
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 81f2 	beq.w	8006990 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_UART_IRQHandler+0x14e>
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fb5c 	bl	8006c82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf14      	ite	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	2300      	moveq	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d103      	bne.n	80065f6 <HAL_UART_IRQHandler+0x17a>
 80065ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d04f      	beq.n	8006696 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa66 	bl	8006ac8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d041      	beq.n	800668e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3314      	adds	r3, #20
 8006610:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006620:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3314      	adds	r3, #20
 8006632:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006636:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800663a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006642:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800664e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1d9      	bne.n	800660a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d013      	beq.n	8006686 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006662:	4a7e      	ldr	r2, [pc, #504]	@ (800685c <HAL_UART_IRQHandler+0x3e0>)
 8006664:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666a:	4618      	mov	r0, r3
 800666c:	f7fd fa5e 	bl	8003b2c <HAL_DMA_Abort_IT>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d016      	beq.n	80066a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	e00e      	b.n	80066a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f99c 	bl	80069c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	e00a      	b.n	80066a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f998 	bl	80069c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006694:	e006      	b.n	80066a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f994 	bl	80069c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80066a2:	e175      	b.n	8006990 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	bf00      	nop
    return;
 80066a6:	e173      	b.n	8006990 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	f040 814f 	bne.w	8006950 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b6:	f003 0310 	and.w	r3, r3, #16
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 8148 	beq.w	8006950 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8141 	beq.w	8006950 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066ce:	2300      	movs	r3, #0
 80066d0:	60bb      	str	r3, [r7, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	60bb      	str	r3, [r7, #8]
 80066e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 80b6 	beq.w	8006860 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8145 	beq.w	8006994 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800670e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006712:	429a      	cmp	r2, r3
 8006714:	f080 813e 	bcs.w	8006994 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800671e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b20      	cmp	r3, #32
 8006728:	f000 8088 	beq.w	800683c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006742:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006746:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800674a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	330c      	adds	r3, #12
 8006754:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006758:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800675c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006764:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1d9      	bne.n	800672c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006788:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800678a:	f023 0301 	bic.w	r3, r3, #1
 800678e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3314      	adds	r3, #20
 8006798:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800679c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80067ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e1      	bne.n	8006778 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3314      	adds	r3, #20
 80067ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3314      	adds	r3, #20
 80067d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e3      	bne.n	80067b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	330c      	adds	r3, #12
 8006800:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800680a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800680c:	f023 0310 	bic.w	r3, r3, #16
 8006810:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800681e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006820:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006824:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800682c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e3      	bne.n	80067fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006836:	4618      	mov	r0, r3
 8006838:	f7fd f93c 	bl	8003ab4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800684a:	b29b      	uxth	r3, r3
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	b29b      	uxth	r3, r3
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f8bf 	bl	80069d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006858:	e09c      	b.n	8006994 <HAL_UART_IRQHandler+0x518>
 800685a:	bf00      	nop
 800685c:	08006b8d 	.word	0x08006b8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006868:	b29b      	uxth	r3, r3
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 808e 	beq.w	8006998 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800687c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 8089 	beq.w	8006998 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	330c      	adds	r3, #12
 800688c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800689c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	330c      	adds	r3, #12
 80068a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80068aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80068ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e3      	bne.n	8006886 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3314      	adds	r3, #20
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	623b      	str	r3, [r7, #32]
   return(result);
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3314      	adds	r3, #20
 80068de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80068e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e3      	bne.n	80068be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	60fb      	str	r3, [r7, #12]
   return(result);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0310 	bic.w	r3, r3, #16
 800691a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006928:	61fa      	str	r2, [r7, #28]
 800692a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	69b9      	ldr	r1, [r7, #24]
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	617b      	str	r3, [r7, #20]
   return(result);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e3      	bne.n	8006904 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006942:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f844 	bl	80069d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800694e:	e023      	b.n	8006998 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006958:	2b00      	cmp	r3, #0
 800695a:	d009      	beq.n	8006970 <HAL_UART_IRQHandler+0x4f4>
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f923 	bl	8006bb4 <UART_Transmit_IT>
    return;
 800696e:	e014      	b.n	800699a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00e      	beq.n	800699a <HAL_UART_IRQHandler+0x51e>
 800697c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f962 	bl	8006c52 <UART_EndTransmit_IT>
    return;
 800698e:	e004      	b.n	800699a <HAL_UART_IRQHandler+0x51e>
    return;
 8006990:	bf00      	nop
 8006992:	e002      	b.n	800699a <HAL_UART_IRQHandler+0x51e>
      return;
 8006994:	bf00      	nop
 8006996:	e000      	b.n	800699a <HAL_UART_IRQHandler+0x51e>
      return;
 8006998:	bf00      	nop
  }
}
 800699a:	37e8      	adds	r7, #232	@ 0xe8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr

080069b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr

080069d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b090      	sub	sp, #64	@ 0x40
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fc:	e050      	b.n	8006aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d04c      	beq.n	8006aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d007      	beq.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a0c:	f7fc f906 	bl	8002c1c <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d241      	bcs.n	8006aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	330c      	adds	r3, #12
 8006a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a3c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a70:	623a      	str	r2, [r7, #32]
 8006a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	6a3a      	ldr	r2, [r7, #32]
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e5      	bne.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e00f      	b.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	bf0c      	ite	eq
 8006ab0:	2301      	moveq	r3, #1
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d09f      	beq.n	80069fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3740      	adds	r7, #64	@ 0x40
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b095      	sub	sp, #84	@ 0x54
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	330c      	adds	r3, #12
 8006aee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006af0:	643a      	str	r2, [r7, #64]	@ 0x40
 8006af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006af6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e5      	bne.n	8006ad0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3314      	adds	r3, #20
 8006b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f023 0301 	bic.w	r3, r3, #1
 8006b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3314      	adds	r3, #20
 8006b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e5      	bne.n	8006b04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d119      	bne.n	8006b74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	330c      	adds	r3, #12
 8006b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f023 0310 	bic.w	r3, r3, #16
 8006b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b60:	61ba      	str	r2, [r7, #24]
 8006b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6979      	ldr	r1, [r7, #20]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e5      	bne.n	8006b40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b82:	bf00      	nop
 8006b84:	3754      	adds	r7, #84	@ 0x54
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr

08006b8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff ff0c 	bl	80069c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b21      	cmp	r3, #33	@ 0x21
 8006bc6:	d13e      	bne.n	8006c46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bd0:	d114      	bne.n	8006bfc <UART_Transmit_IT+0x48>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d110      	bne.n	8006bfc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	461a      	mov	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	1c9a      	adds	r2, r3, #2
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	621a      	str	r2, [r3, #32]
 8006bfa:	e008      	b.n	8006c0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	1c59      	adds	r1, r3, #1
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6211      	str	r1, [r2, #32]
 8006c06:	781a      	ldrb	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10f      	bne.n	8006c42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e000      	b.n	8006c48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c46:	2302      	movs	r3, #2
  }
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr

08006c52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff fe94 	bl	80069a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b08c      	sub	sp, #48	@ 0x30
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b22      	cmp	r3, #34	@ 0x22
 8006c94:	f040 80ae 	bne.w	8006df4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca0:	d117      	bne.n	8006cd2 <UART_Receive_IT+0x50>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d113      	bne.n	8006cd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cca:	1c9a      	adds	r2, r3, #2
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cd0:	e026      	b.n	8006d20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce4:	d007      	beq.n	8006cf6 <UART_Receive_IT+0x74>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <UART_Receive_IT+0x82>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	e008      	b.n	8006d16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d15d      	bne.n	8006df0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0220 	bic.w	r2, r2, #32
 8006d42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695a      	ldr	r2, [r3, #20]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0201 	bic.w	r2, r2, #1
 8006d62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d135      	bne.n	8006de6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	330c      	adds	r3, #12
 8006d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f023 0310 	bic.w	r3, r3, #16
 8006d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006da0:	623a      	str	r2, [r7, #32]
 8006da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	69f9      	ldr	r1, [r7, #28]
 8006da6:	6a3a      	ldr	r2, [r7, #32]
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e5      	bne.n	8006d80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	2b10      	cmp	r3, #16
 8006dc0:	d10a      	bne.n	8006dd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff fdf9 	bl	80069d6 <HAL_UARTEx_RxEventCallback>
 8006de4:	e002      	b.n	8006dec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff fde3 	bl	80069b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e002      	b.n	8006df6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	e000      	b.n	8006df6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006df4:	2302      	movs	r3, #2
  }
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3730      	adds	r7, #48	@ 0x30
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006e3a:	f023 030c 	bic.w	r3, r3, #12
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6812      	ldr	r2, [r2, #0]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	430b      	orrs	r3, r1
 8006e46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a2c      	ldr	r2, [pc, #176]	@ (8006f14 <UART_SetConfig+0x114>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d103      	bne.n	8006e70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006e68:	f7fe fa4a 	bl	8005300 <HAL_RCC_GetPCLK2Freq>
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	e002      	b.n	8006e76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e70:	f7fe fa32 	bl	80052d8 <HAL_RCC_GetPCLK1Freq>
 8006e74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009a      	lsls	r2, r3, #2
 8006e80:	441a      	add	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	4a22      	ldr	r2, [pc, #136]	@ (8006f18 <UART_SetConfig+0x118>)
 8006e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	0119      	lsls	r1, r3, #4
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009a      	lsls	r2, r3, #2
 8006ea0:	441a      	add	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006eac:	4b1a      	ldr	r3, [pc, #104]	@ (8006f18 <UART_SetConfig+0x118>)
 8006eae:	fba3 0302 	umull	r0, r3, r3, r2
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	2064      	movs	r0, #100	@ 0x64
 8006eb6:	fb00 f303 	mul.w	r3, r0, r3
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	3332      	adds	r3, #50	@ 0x32
 8006ec0:	4a15      	ldr	r2, [pc, #84]	@ (8006f18 <UART_SetConfig+0x118>)
 8006ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ecc:	4419      	add	r1, r3
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009a      	lsls	r2, r3, #2
 8006ed8:	441a      	add	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f18 <UART_SetConfig+0x118>)
 8006ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	2064      	movs	r0, #100	@ 0x64
 8006eee:	fb00 f303 	mul.w	r3, r0, r3
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	011b      	lsls	r3, r3, #4
 8006ef6:	3332      	adds	r3, #50	@ 0x32
 8006ef8:	4a07      	ldr	r2, [pc, #28]	@ (8006f18 <UART_SetConfig+0x118>)
 8006efa:	fba2 2303 	umull	r2, r3, r2, r3
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	f003 020f 	and.w	r2, r3, #15
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	440a      	add	r2, r1
 8006f0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006f0c:	bf00      	nop
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40013800 	.word	0x40013800
 8006f18:	51eb851f 	.word	0x51eb851f

08006f1c <atoi>:
 8006f1c:	220a      	movs	r2, #10
 8006f1e:	2100      	movs	r1, #0
 8006f20:	f000 b87c 	b.w	800701c <strtol>

08006f24 <_strtol_l.constprop.0>:
 8006f24:	2b24      	cmp	r3, #36	@ 0x24
 8006f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f2a:	4686      	mov	lr, r0
 8006f2c:	4690      	mov	r8, r2
 8006f2e:	d801      	bhi.n	8006f34 <_strtol_l.constprop.0+0x10>
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d106      	bne.n	8006f42 <_strtol_l.constprop.0+0x1e>
 8006f34:	f001 f910 	bl	8008158 <__errno>
 8006f38:	2316      	movs	r3, #22
 8006f3a:	6003      	str	r3, [r0, #0]
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f42:	460d      	mov	r5, r1
 8006f44:	4833      	ldr	r0, [pc, #204]	@ (8007014 <_strtol_l.constprop.0+0xf0>)
 8006f46:	462a      	mov	r2, r5
 8006f48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f4c:	5d06      	ldrb	r6, [r0, r4]
 8006f4e:	f016 0608 	ands.w	r6, r6, #8
 8006f52:	d1f8      	bne.n	8006f46 <_strtol_l.constprop.0+0x22>
 8006f54:	2c2d      	cmp	r4, #45	@ 0x2d
 8006f56:	d12d      	bne.n	8006fb4 <_strtol_l.constprop.0+0x90>
 8006f58:	2601      	movs	r6, #1
 8006f5a:	782c      	ldrb	r4, [r5, #0]
 8006f5c:	1c95      	adds	r5, r2, #2
 8006f5e:	f033 0210 	bics.w	r2, r3, #16
 8006f62:	d109      	bne.n	8006f78 <_strtol_l.constprop.0+0x54>
 8006f64:	2c30      	cmp	r4, #48	@ 0x30
 8006f66:	d12a      	bne.n	8006fbe <_strtol_l.constprop.0+0x9a>
 8006f68:	782a      	ldrb	r2, [r5, #0]
 8006f6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006f6e:	2a58      	cmp	r2, #88	@ 0x58
 8006f70:	d125      	bne.n	8006fbe <_strtol_l.constprop.0+0x9a>
 8006f72:	2310      	movs	r3, #16
 8006f74:	786c      	ldrb	r4, [r5, #1]
 8006f76:	3502      	adds	r5, #2
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006f7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006f82:	fbbc f9f3 	udiv	r9, ip, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006f90:	2f09      	cmp	r7, #9
 8006f92:	d81b      	bhi.n	8006fcc <_strtol_l.constprop.0+0xa8>
 8006f94:	463c      	mov	r4, r7
 8006f96:	42a3      	cmp	r3, r4
 8006f98:	dd27      	ble.n	8006fea <_strtol_l.constprop.0+0xc6>
 8006f9a:	1c57      	adds	r7, r2, #1
 8006f9c:	d007      	beq.n	8006fae <_strtol_l.constprop.0+0x8a>
 8006f9e:	4581      	cmp	r9, r0
 8006fa0:	d320      	bcc.n	8006fe4 <_strtol_l.constprop.0+0xc0>
 8006fa2:	d101      	bne.n	8006fa8 <_strtol_l.constprop.0+0x84>
 8006fa4:	45a2      	cmp	sl, r4
 8006fa6:	db1d      	blt.n	8006fe4 <_strtol_l.constprop.0+0xc0>
 8006fa8:	2201      	movs	r2, #1
 8006faa:	fb00 4003 	mla	r0, r0, r3, r4
 8006fae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fb2:	e7eb      	b.n	8006f8c <_strtol_l.constprop.0+0x68>
 8006fb4:	2c2b      	cmp	r4, #43	@ 0x2b
 8006fb6:	bf04      	itt	eq
 8006fb8:	782c      	ldrbeq	r4, [r5, #0]
 8006fba:	1c95      	addeq	r5, r2, #2
 8006fbc:	e7cf      	b.n	8006f5e <_strtol_l.constprop.0+0x3a>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1da      	bne.n	8006f78 <_strtol_l.constprop.0+0x54>
 8006fc2:	2c30      	cmp	r4, #48	@ 0x30
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2308      	moveq	r3, #8
 8006fc8:	230a      	movne	r3, #10
 8006fca:	e7d5      	b.n	8006f78 <_strtol_l.constprop.0+0x54>
 8006fcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006fd0:	2f19      	cmp	r7, #25
 8006fd2:	d801      	bhi.n	8006fd8 <_strtol_l.constprop.0+0xb4>
 8006fd4:	3c37      	subs	r4, #55	@ 0x37
 8006fd6:	e7de      	b.n	8006f96 <_strtol_l.constprop.0+0x72>
 8006fd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006fdc:	2f19      	cmp	r7, #25
 8006fde:	d804      	bhi.n	8006fea <_strtol_l.constprop.0+0xc6>
 8006fe0:	3c57      	subs	r4, #87	@ 0x57
 8006fe2:	e7d8      	b.n	8006f96 <_strtol_l.constprop.0+0x72>
 8006fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe8:	e7e1      	b.n	8006fae <_strtol_l.constprop.0+0x8a>
 8006fea:	1c53      	adds	r3, r2, #1
 8006fec:	d108      	bne.n	8007000 <_strtol_l.constprop.0+0xdc>
 8006fee:	2322      	movs	r3, #34	@ 0x22
 8006ff0:	4660      	mov	r0, ip
 8006ff2:	f8ce 3000 	str.w	r3, [lr]
 8006ff6:	f1b8 0f00 	cmp.w	r8, #0
 8006ffa:	d0a0      	beq.n	8006f3e <_strtol_l.constprop.0+0x1a>
 8006ffc:	1e69      	subs	r1, r5, #1
 8006ffe:	e006      	b.n	800700e <_strtol_l.constprop.0+0xea>
 8007000:	b106      	cbz	r6, 8007004 <_strtol_l.constprop.0+0xe0>
 8007002:	4240      	negs	r0, r0
 8007004:	f1b8 0f00 	cmp.w	r8, #0
 8007008:	d099      	beq.n	8006f3e <_strtol_l.constprop.0+0x1a>
 800700a:	2a00      	cmp	r2, #0
 800700c:	d1f6      	bne.n	8006ffc <_strtol_l.constprop.0+0xd8>
 800700e:	f8c8 1000 	str.w	r1, [r8]
 8007012:	e794      	b.n	8006f3e <_strtol_l.constprop.0+0x1a>
 8007014:	0800e74b 	.word	0x0800e74b

08007018 <_strtol_r>:
 8007018:	f7ff bf84 	b.w	8006f24 <_strtol_l.constprop.0>

0800701c <strtol>:
 800701c:	4613      	mov	r3, r2
 800701e:	460a      	mov	r2, r1
 8007020:	4601      	mov	r1, r0
 8007022:	4802      	ldr	r0, [pc, #8]	@ (800702c <strtol+0x10>)
 8007024:	6800      	ldr	r0, [r0, #0]
 8007026:	f7ff bf7d 	b.w	8006f24 <_strtol_l.constprop.0>
 800702a:	bf00      	nop
 800702c:	20000040 	.word	0x20000040

08007030 <__cvt>:
 8007030:	2b00      	cmp	r3, #0
 8007032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007036:	461d      	mov	r5, r3
 8007038:	bfbb      	ittet	lt
 800703a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800703e:	461d      	movlt	r5, r3
 8007040:	2300      	movge	r3, #0
 8007042:	232d      	movlt	r3, #45	@ 0x2d
 8007044:	b088      	sub	sp, #32
 8007046:	4614      	mov	r4, r2
 8007048:	bfb8      	it	lt
 800704a:	4614      	movlt	r4, r2
 800704c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800704e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007050:	7013      	strb	r3, [r2, #0]
 8007052:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007054:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007058:	f023 0820 	bic.w	r8, r3, #32
 800705c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007060:	d005      	beq.n	800706e <__cvt+0x3e>
 8007062:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007066:	d100      	bne.n	800706a <__cvt+0x3a>
 8007068:	3601      	adds	r6, #1
 800706a:	2302      	movs	r3, #2
 800706c:	e000      	b.n	8007070 <__cvt+0x40>
 800706e:	2303      	movs	r3, #3
 8007070:	aa07      	add	r2, sp, #28
 8007072:	9204      	str	r2, [sp, #16]
 8007074:	aa06      	add	r2, sp, #24
 8007076:	e9cd a202 	strd	sl, r2, [sp, #8]
 800707a:	e9cd 3600 	strd	r3, r6, [sp]
 800707e:	4622      	mov	r2, r4
 8007080:	462b      	mov	r3, r5
 8007082:	f001 f965 	bl	8008350 <_dtoa_r>
 8007086:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800708a:	4607      	mov	r7, r0
 800708c:	d119      	bne.n	80070c2 <__cvt+0x92>
 800708e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007090:	07db      	lsls	r3, r3, #31
 8007092:	d50e      	bpl.n	80070b2 <__cvt+0x82>
 8007094:	eb00 0906 	add.w	r9, r0, r6
 8007098:	2200      	movs	r2, #0
 800709a:	2300      	movs	r3, #0
 800709c:	4620      	mov	r0, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	f7f9 fd36 	bl	8000b10 <__aeabi_dcmpeq>
 80070a4:	b108      	cbz	r0, 80070aa <__cvt+0x7a>
 80070a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80070aa:	2230      	movs	r2, #48	@ 0x30
 80070ac:	9b07      	ldr	r3, [sp, #28]
 80070ae:	454b      	cmp	r3, r9
 80070b0:	d31e      	bcc.n	80070f0 <__cvt+0xc0>
 80070b2:	4638      	mov	r0, r7
 80070b4:	9b07      	ldr	r3, [sp, #28]
 80070b6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80070b8:	1bdb      	subs	r3, r3, r7
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	b008      	add	sp, #32
 80070be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070c6:	eb00 0906 	add.w	r9, r0, r6
 80070ca:	d1e5      	bne.n	8007098 <__cvt+0x68>
 80070cc:	7803      	ldrb	r3, [r0, #0]
 80070ce:	2b30      	cmp	r3, #48	@ 0x30
 80070d0:	d10a      	bne.n	80070e8 <__cvt+0xb8>
 80070d2:	2200      	movs	r2, #0
 80070d4:	2300      	movs	r3, #0
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 fd19 	bl	8000b10 <__aeabi_dcmpeq>
 80070de:	b918      	cbnz	r0, 80070e8 <__cvt+0xb8>
 80070e0:	f1c6 0601 	rsb	r6, r6, #1
 80070e4:	f8ca 6000 	str.w	r6, [sl]
 80070e8:	f8da 3000 	ldr.w	r3, [sl]
 80070ec:	4499      	add	r9, r3
 80070ee:	e7d3      	b.n	8007098 <__cvt+0x68>
 80070f0:	1c59      	adds	r1, r3, #1
 80070f2:	9107      	str	r1, [sp, #28]
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	e7d9      	b.n	80070ac <__cvt+0x7c>

080070f8 <__exponent>:
 80070f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070fa:	2900      	cmp	r1, #0
 80070fc:	bfb6      	itet	lt
 80070fe:	232d      	movlt	r3, #45	@ 0x2d
 8007100:	232b      	movge	r3, #43	@ 0x2b
 8007102:	4249      	neglt	r1, r1
 8007104:	2909      	cmp	r1, #9
 8007106:	7002      	strb	r2, [r0, #0]
 8007108:	7043      	strb	r3, [r0, #1]
 800710a:	dd29      	ble.n	8007160 <__exponent+0x68>
 800710c:	f10d 0307 	add.w	r3, sp, #7
 8007110:	461d      	mov	r5, r3
 8007112:	270a      	movs	r7, #10
 8007114:	fbb1 f6f7 	udiv	r6, r1, r7
 8007118:	461a      	mov	r2, r3
 800711a:	fb07 1416 	mls	r4, r7, r6, r1
 800711e:	3430      	adds	r4, #48	@ 0x30
 8007120:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007124:	460c      	mov	r4, r1
 8007126:	2c63      	cmp	r4, #99	@ 0x63
 8007128:	4631      	mov	r1, r6
 800712a:	f103 33ff 	add.w	r3, r3, #4294967295
 800712e:	dcf1      	bgt.n	8007114 <__exponent+0x1c>
 8007130:	3130      	adds	r1, #48	@ 0x30
 8007132:	1e94      	subs	r4, r2, #2
 8007134:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007138:	4623      	mov	r3, r4
 800713a:	1c41      	adds	r1, r0, #1
 800713c:	42ab      	cmp	r3, r5
 800713e:	d30a      	bcc.n	8007156 <__exponent+0x5e>
 8007140:	f10d 0309 	add.w	r3, sp, #9
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	42ac      	cmp	r4, r5
 8007148:	bf88      	it	hi
 800714a:	2300      	movhi	r3, #0
 800714c:	3302      	adds	r3, #2
 800714e:	4403      	add	r3, r0
 8007150:	1a18      	subs	r0, r3, r0
 8007152:	b003      	add	sp, #12
 8007154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007156:	f813 6b01 	ldrb.w	r6, [r3], #1
 800715a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800715e:	e7ed      	b.n	800713c <__exponent+0x44>
 8007160:	2330      	movs	r3, #48	@ 0x30
 8007162:	3130      	adds	r1, #48	@ 0x30
 8007164:	7083      	strb	r3, [r0, #2]
 8007166:	70c1      	strb	r1, [r0, #3]
 8007168:	1d03      	adds	r3, r0, #4
 800716a:	e7f1      	b.n	8007150 <__exponent+0x58>

0800716c <_printf_float>:
 800716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	b091      	sub	sp, #68	@ 0x44
 8007172:	460c      	mov	r4, r1
 8007174:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007178:	4616      	mov	r6, r2
 800717a:	461f      	mov	r7, r3
 800717c:	4605      	mov	r5, r0
 800717e:	f000 ffa1 	bl	80080c4 <_localeconv_r>
 8007182:	6803      	ldr	r3, [r0, #0]
 8007184:	4618      	mov	r0, r3
 8007186:	9308      	str	r3, [sp, #32]
 8007188:	f7f8 ffe2 	bl	8000150 <strlen>
 800718c:	2300      	movs	r3, #0
 800718e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007190:	f8d8 3000 	ldr.w	r3, [r8]
 8007194:	9009      	str	r0, [sp, #36]	@ 0x24
 8007196:	3307      	adds	r3, #7
 8007198:	f023 0307 	bic.w	r3, r3, #7
 800719c:	f103 0208 	add.w	r2, r3, #8
 80071a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071a4:	f8d4 b000 	ldr.w	fp, [r4]
 80071a8:	f8c8 2000 	str.w	r2, [r8]
 80071ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80071b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071b6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80071ba:	f04f 32ff 	mov.w	r2, #4294967295
 80071be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80071c6:	4b9c      	ldr	r3, [pc, #624]	@ (8007438 <_printf_float+0x2cc>)
 80071c8:	f7f9 fcd4 	bl	8000b74 <__aeabi_dcmpun>
 80071cc:	bb70      	cbnz	r0, 800722c <_printf_float+0xc0>
 80071ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071d2:	f04f 32ff 	mov.w	r2, #4294967295
 80071d6:	4b98      	ldr	r3, [pc, #608]	@ (8007438 <_printf_float+0x2cc>)
 80071d8:	f7f9 fcae 	bl	8000b38 <__aeabi_dcmple>
 80071dc:	bb30      	cbnz	r0, 800722c <_printf_float+0xc0>
 80071de:	2200      	movs	r2, #0
 80071e0:	2300      	movs	r3, #0
 80071e2:	4640      	mov	r0, r8
 80071e4:	4649      	mov	r1, r9
 80071e6:	f7f9 fc9d 	bl	8000b24 <__aeabi_dcmplt>
 80071ea:	b110      	cbz	r0, 80071f2 <_printf_float+0x86>
 80071ec:	232d      	movs	r3, #45	@ 0x2d
 80071ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071f2:	4a92      	ldr	r2, [pc, #584]	@ (800743c <_printf_float+0x2d0>)
 80071f4:	4b92      	ldr	r3, [pc, #584]	@ (8007440 <_printf_float+0x2d4>)
 80071f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071fa:	bf94      	ite	ls
 80071fc:	4690      	movls	r8, r2
 80071fe:	4698      	movhi	r8, r3
 8007200:	2303      	movs	r3, #3
 8007202:	f04f 0900 	mov.w	r9, #0
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	f02b 0304 	bic.w	r3, fp, #4
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	4633      	mov	r3, r6
 8007210:	4621      	mov	r1, r4
 8007212:	4628      	mov	r0, r5
 8007214:	9700      	str	r7, [sp, #0]
 8007216:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007218:	f000 f9d4 	bl	80075c4 <_printf_common>
 800721c:	3001      	adds	r0, #1
 800721e:	f040 8090 	bne.w	8007342 <_printf_float+0x1d6>
 8007222:	f04f 30ff 	mov.w	r0, #4294967295
 8007226:	b011      	add	sp, #68	@ 0x44
 8007228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722c:	4642      	mov	r2, r8
 800722e:	464b      	mov	r3, r9
 8007230:	4640      	mov	r0, r8
 8007232:	4649      	mov	r1, r9
 8007234:	f7f9 fc9e 	bl	8000b74 <__aeabi_dcmpun>
 8007238:	b148      	cbz	r0, 800724e <_printf_float+0xe2>
 800723a:	464b      	mov	r3, r9
 800723c:	2b00      	cmp	r3, #0
 800723e:	bfb8      	it	lt
 8007240:	232d      	movlt	r3, #45	@ 0x2d
 8007242:	4a80      	ldr	r2, [pc, #512]	@ (8007444 <_printf_float+0x2d8>)
 8007244:	bfb8      	it	lt
 8007246:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800724a:	4b7f      	ldr	r3, [pc, #508]	@ (8007448 <_printf_float+0x2dc>)
 800724c:	e7d3      	b.n	80071f6 <_printf_float+0x8a>
 800724e:	6863      	ldr	r3, [r4, #4]
 8007250:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	d13f      	bne.n	80072d8 <_printf_float+0x16c>
 8007258:	2306      	movs	r3, #6
 800725a:	6063      	str	r3, [r4, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	9206      	str	r2, [sp, #24]
 8007266:	aa0e      	add	r2, sp, #56	@ 0x38
 8007268:	e9cd a204 	strd	sl, r2, [sp, #16]
 800726c:	aa0d      	add	r2, sp, #52	@ 0x34
 800726e:	9203      	str	r2, [sp, #12]
 8007270:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007274:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007278:	6863      	ldr	r3, [r4, #4]
 800727a:	4642      	mov	r2, r8
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	4628      	mov	r0, r5
 8007280:	464b      	mov	r3, r9
 8007282:	910a      	str	r1, [sp, #40]	@ 0x28
 8007284:	f7ff fed4 	bl	8007030 <__cvt>
 8007288:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800728a:	4680      	mov	r8, r0
 800728c:	2947      	cmp	r1, #71	@ 0x47
 800728e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007290:	d128      	bne.n	80072e4 <_printf_float+0x178>
 8007292:	1cc8      	adds	r0, r1, #3
 8007294:	db02      	blt.n	800729c <_printf_float+0x130>
 8007296:	6863      	ldr	r3, [r4, #4]
 8007298:	4299      	cmp	r1, r3
 800729a:	dd40      	ble.n	800731e <_printf_float+0x1b2>
 800729c:	f1aa 0a02 	sub.w	sl, sl, #2
 80072a0:	fa5f fa8a 	uxtb.w	sl, sl
 80072a4:	4652      	mov	r2, sl
 80072a6:	3901      	subs	r1, #1
 80072a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80072ac:	910d      	str	r1, [sp, #52]	@ 0x34
 80072ae:	f7ff ff23 	bl	80070f8 <__exponent>
 80072b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072b4:	4681      	mov	r9, r0
 80072b6:	1813      	adds	r3, r2, r0
 80072b8:	2a01      	cmp	r2, #1
 80072ba:	6123      	str	r3, [r4, #16]
 80072bc:	dc02      	bgt.n	80072c4 <_printf_float+0x158>
 80072be:	6822      	ldr	r2, [r4, #0]
 80072c0:	07d2      	lsls	r2, r2, #31
 80072c2:	d501      	bpl.n	80072c8 <_printf_float+0x15c>
 80072c4:	3301      	adds	r3, #1
 80072c6:	6123      	str	r3, [r4, #16]
 80072c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d09e      	beq.n	800720e <_printf_float+0xa2>
 80072d0:	232d      	movs	r3, #45	@ 0x2d
 80072d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072d6:	e79a      	b.n	800720e <_printf_float+0xa2>
 80072d8:	2947      	cmp	r1, #71	@ 0x47
 80072da:	d1bf      	bne.n	800725c <_printf_float+0xf0>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1bd      	bne.n	800725c <_printf_float+0xf0>
 80072e0:	2301      	movs	r3, #1
 80072e2:	e7ba      	b.n	800725a <_printf_float+0xee>
 80072e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072e8:	d9dc      	bls.n	80072a4 <_printf_float+0x138>
 80072ea:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072ee:	d118      	bne.n	8007322 <_printf_float+0x1b6>
 80072f0:	2900      	cmp	r1, #0
 80072f2:	6863      	ldr	r3, [r4, #4]
 80072f4:	dd0b      	ble.n	800730e <_printf_float+0x1a2>
 80072f6:	6121      	str	r1, [r4, #16]
 80072f8:	b913      	cbnz	r3, 8007300 <_printf_float+0x194>
 80072fa:	6822      	ldr	r2, [r4, #0]
 80072fc:	07d0      	lsls	r0, r2, #31
 80072fe:	d502      	bpl.n	8007306 <_printf_float+0x19a>
 8007300:	3301      	adds	r3, #1
 8007302:	440b      	add	r3, r1
 8007304:	6123      	str	r3, [r4, #16]
 8007306:	f04f 0900 	mov.w	r9, #0
 800730a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800730c:	e7dc      	b.n	80072c8 <_printf_float+0x15c>
 800730e:	b913      	cbnz	r3, 8007316 <_printf_float+0x1aa>
 8007310:	6822      	ldr	r2, [r4, #0]
 8007312:	07d2      	lsls	r2, r2, #31
 8007314:	d501      	bpl.n	800731a <_printf_float+0x1ae>
 8007316:	3302      	adds	r3, #2
 8007318:	e7f4      	b.n	8007304 <_printf_float+0x198>
 800731a:	2301      	movs	r3, #1
 800731c:	e7f2      	b.n	8007304 <_printf_float+0x198>
 800731e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007324:	4299      	cmp	r1, r3
 8007326:	db05      	blt.n	8007334 <_printf_float+0x1c8>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	6121      	str	r1, [r4, #16]
 800732c:	07d8      	lsls	r0, r3, #31
 800732e:	d5ea      	bpl.n	8007306 <_printf_float+0x19a>
 8007330:	1c4b      	adds	r3, r1, #1
 8007332:	e7e7      	b.n	8007304 <_printf_float+0x198>
 8007334:	2900      	cmp	r1, #0
 8007336:	bfcc      	ite	gt
 8007338:	2201      	movgt	r2, #1
 800733a:	f1c1 0202 	rsble	r2, r1, #2
 800733e:	4413      	add	r3, r2
 8007340:	e7e0      	b.n	8007304 <_printf_float+0x198>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	055a      	lsls	r2, r3, #21
 8007346:	d407      	bmi.n	8007358 <_printf_float+0x1ec>
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	4642      	mov	r2, r8
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	d12b      	bne.n	80073ae <_printf_float+0x242>
 8007356:	e764      	b.n	8007222 <_printf_float+0xb6>
 8007358:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800735c:	f240 80dc 	bls.w	8007518 <_printf_float+0x3ac>
 8007360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007364:	2200      	movs	r2, #0
 8007366:	2300      	movs	r3, #0
 8007368:	f7f9 fbd2 	bl	8000b10 <__aeabi_dcmpeq>
 800736c:	2800      	cmp	r0, #0
 800736e:	d033      	beq.n	80073d8 <_printf_float+0x26c>
 8007370:	2301      	movs	r3, #1
 8007372:	4631      	mov	r1, r6
 8007374:	4628      	mov	r0, r5
 8007376:	4a35      	ldr	r2, [pc, #212]	@ (800744c <_printf_float+0x2e0>)
 8007378:	47b8      	blx	r7
 800737a:	3001      	adds	r0, #1
 800737c:	f43f af51 	beq.w	8007222 <_printf_float+0xb6>
 8007380:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007384:	4543      	cmp	r3, r8
 8007386:	db02      	blt.n	800738e <_printf_float+0x222>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	07d8      	lsls	r0, r3, #31
 800738c:	d50f      	bpl.n	80073ae <_printf_float+0x242>
 800738e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007392:	4631      	mov	r1, r6
 8007394:	4628      	mov	r0, r5
 8007396:	47b8      	blx	r7
 8007398:	3001      	adds	r0, #1
 800739a:	f43f af42 	beq.w	8007222 <_printf_float+0xb6>
 800739e:	f04f 0900 	mov.w	r9, #0
 80073a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80073a6:	f104 0a1a 	add.w	sl, r4, #26
 80073aa:	45c8      	cmp	r8, r9
 80073ac:	dc09      	bgt.n	80073c2 <_printf_float+0x256>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	079b      	lsls	r3, r3, #30
 80073b2:	f100 8102 	bmi.w	80075ba <_printf_float+0x44e>
 80073b6:	68e0      	ldr	r0, [r4, #12]
 80073b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ba:	4298      	cmp	r0, r3
 80073bc:	bfb8      	it	lt
 80073be:	4618      	movlt	r0, r3
 80073c0:	e731      	b.n	8007226 <_printf_float+0xba>
 80073c2:	2301      	movs	r3, #1
 80073c4:	4652      	mov	r2, sl
 80073c6:	4631      	mov	r1, r6
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b8      	blx	r7
 80073cc:	3001      	adds	r0, #1
 80073ce:	f43f af28 	beq.w	8007222 <_printf_float+0xb6>
 80073d2:	f109 0901 	add.w	r9, r9, #1
 80073d6:	e7e8      	b.n	80073aa <_printf_float+0x23e>
 80073d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073da:	2b00      	cmp	r3, #0
 80073dc:	dc38      	bgt.n	8007450 <_printf_float+0x2e4>
 80073de:	2301      	movs	r3, #1
 80073e0:	4631      	mov	r1, r6
 80073e2:	4628      	mov	r0, r5
 80073e4:	4a19      	ldr	r2, [pc, #100]	@ (800744c <_printf_float+0x2e0>)
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f af1a 	beq.w	8007222 <_printf_float+0xb6>
 80073ee:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80073f2:	ea59 0303 	orrs.w	r3, r9, r3
 80073f6:	d102      	bne.n	80073fe <_printf_float+0x292>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	07d9      	lsls	r1, r3, #31
 80073fc:	d5d7      	bpl.n	80073ae <_printf_float+0x242>
 80073fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007402:	4631      	mov	r1, r6
 8007404:	4628      	mov	r0, r5
 8007406:	47b8      	blx	r7
 8007408:	3001      	adds	r0, #1
 800740a:	f43f af0a 	beq.w	8007222 <_printf_float+0xb6>
 800740e:	f04f 0a00 	mov.w	sl, #0
 8007412:	f104 0b1a 	add.w	fp, r4, #26
 8007416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007418:	425b      	negs	r3, r3
 800741a:	4553      	cmp	r3, sl
 800741c:	dc01      	bgt.n	8007422 <_printf_float+0x2b6>
 800741e:	464b      	mov	r3, r9
 8007420:	e793      	b.n	800734a <_printf_float+0x1de>
 8007422:	2301      	movs	r3, #1
 8007424:	465a      	mov	r2, fp
 8007426:	4631      	mov	r1, r6
 8007428:	4628      	mov	r0, r5
 800742a:	47b8      	blx	r7
 800742c:	3001      	adds	r0, #1
 800742e:	f43f aef8 	beq.w	8007222 <_printf_float+0xb6>
 8007432:	f10a 0a01 	add.w	sl, sl, #1
 8007436:	e7ee      	b.n	8007416 <_printf_float+0x2aa>
 8007438:	7fefffff 	.word	0x7fefffff
 800743c:	0800e84b 	.word	0x0800e84b
 8007440:	0800e84f 	.word	0x0800e84f
 8007444:	0800e853 	.word	0x0800e853
 8007448:	0800e857 	.word	0x0800e857
 800744c:	0800e85b 	.word	0x0800e85b
 8007450:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007452:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007456:	4553      	cmp	r3, sl
 8007458:	bfa8      	it	ge
 800745a:	4653      	movge	r3, sl
 800745c:	2b00      	cmp	r3, #0
 800745e:	4699      	mov	r9, r3
 8007460:	dc36      	bgt.n	80074d0 <_printf_float+0x364>
 8007462:	f04f 0b00 	mov.w	fp, #0
 8007466:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800746a:	f104 021a 	add.w	r2, r4, #26
 800746e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007470:	930a      	str	r3, [sp, #40]	@ 0x28
 8007472:	eba3 0309 	sub.w	r3, r3, r9
 8007476:	455b      	cmp	r3, fp
 8007478:	dc31      	bgt.n	80074de <_printf_float+0x372>
 800747a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800747c:	459a      	cmp	sl, r3
 800747e:	dc3a      	bgt.n	80074f6 <_printf_float+0x38a>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	07da      	lsls	r2, r3, #31
 8007484:	d437      	bmi.n	80074f6 <_printf_float+0x38a>
 8007486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007488:	ebaa 0903 	sub.w	r9, sl, r3
 800748c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800748e:	ebaa 0303 	sub.w	r3, sl, r3
 8007492:	4599      	cmp	r9, r3
 8007494:	bfa8      	it	ge
 8007496:	4699      	movge	r9, r3
 8007498:	f1b9 0f00 	cmp.w	r9, #0
 800749c:	dc33      	bgt.n	8007506 <_printf_float+0x39a>
 800749e:	f04f 0800 	mov.w	r8, #0
 80074a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074a6:	f104 0b1a 	add.w	fp, r4, #26
 80074aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074ac:	ebaa 0303 	sub.w	r3, sl, r3
 80074b0:	eba3 0309 	sub.w	r3, r3, r9
 80074b4:	4543      	cmp	r3, r8
 80074b6:	f77f af7a 	ble.w	80073ae <_printf_float+0x242>
 80074ba:	2301      	movs	r3, #1
 80074bc:	465a      	mov	r2, fp
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b8      	blx	r7
 80074c4:	3001      	adds	r0, #1
 80074c6:	f43f aeac 	beq.w	8007222 <_printf_float+0xb6>
 80074ca:	f108 0801 	add.w	r8, r8, #1
 80074ce:	e7ec      	b.n	80074aa <_printf_float+0x33e>
 80074d0:	4642      	mov	r2, r8
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	d1c2      	bne.n	8007462 <_printf_float+0x2f6>
 80074dc:	e6a1      	b.n	8007222 <_printf_float+0xb6>
 80074de:	2301      	movs	r3, #1
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	920a      	str	r2, [sp, #40]	@ 0x28
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f ae9a 	beq.w	8007222 <_printf_float+0xb6>
 80074ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074f0:	f10b 0b01 	add.w	fp, fp, #1
 80074f4:	e7bb      	b.n	800746e <_printf_float+0x302>
 80074f6:	4631      	mov	r1, r6
 80074f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b8      	blx	r7
 8007500:	3001      	adds	r0, #1
 8007502:	d1c0      	bne.n	8007486 <_printf_float+0x31a>
 8007504:	e68d      	b.n	8007222 <_printf_float+0xb6>
 8007506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007508:	464b      	mov	r3, r9
 800750a:	4631      	mov	r1, r6
 800750c:	4628      	mov	r0, r5
 800750e:	4442      	add	r2, r8
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	d1c3      	bne.n	800749e <_printf_float+0x332>
 8007516:	e684      	b.n	8007222 <_printf_float+0xb6>
 8007518:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800751c:	f1ba 0f01 	cmp.w	sl, #1
 8007520:	dc01      	bgt.n	8007526 <_printf_float+0x3ba>
 8007522:	07db      	lsls	r3, r3, #31
 8007524:	d536      	bpl.n	8007594 <_printf_float+0x428>
 8007526:	2301      	movs	r3, #1
 8007528:	4642      	mov	r2, r8
 800752a:	4631      	mov	r1, r6
 800752c:	4628      	mov	r0, r5
 800752e:	47b8      	blx	r7
 8007530:	3001      	adds	r0, #1
 8007532:	f43f ae76 	beq.w	8007222 <_printf_float+0xb6>
 8007536:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800753a:	4631      	mov	r1, r6
 800753c:	4628      	mov	r0, r5
 800753e:	47b8      	blx	r7
 8007540:	3001      	adds	r0, #1
 8007542:	f43f ae6e 	beq.w	8007222 <_printf_float+0xb6>
 8007546:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800754a:	2200      	movs	r2, #0
 800754c:	2300      	movs	r3, #0
 800754e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007552:	f7f9 fadd 	bl	8000b10 <__aeabi_dcmpeq>
 8007556:	b9c0      	cbnz	r0, 800758a <_printf_float+0x41e>
 8007558:	4653      	mov	r3, sl
 800755a:	f108 0201 	add.w	r2, r8, #1
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	47b8      	blx	r7
 8007564:	3001      	adds	r0, #1
 8007566:	d10c      	bne.n	8007582 <_printf_float+0x416>
 8007568:	e65b      	b.n	8007222 <_printf_float+0xb6>
 800756a:	2301      	movs	r3, #1
 800756c:	465a      	mov	r2, fp
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f ae54 	beq.w	8007222 <_printf_float+0xb6>
 800757a:	f108 0801 	add.w	r8, r8, #1
 800757e:	45d0      	cmp	r8, sl
 8007580:	dbf3      	blt.n	800756a <_printf_float+0x3fe>
 8007582:	464b      	mov	r3, r9
 8007584:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007588:	e6e0      	b.n	800734c <_printf_float+0x1e0>
 800758a:	f04f 0800 	mov.w	r8, #0
 800758e:	f104 0b1a 	add.w	fp, r4, #26
 8007592:	e7f4      	b.n	800757e <_printf_float+0x412>
 8007594:	2301      	movs	r3, #1
 8007596:	4642      	mov	r2, r8
 8007598:	e7e1      	b.n	800755e <_printf_float+0x3f2>
 800759a:	2301      	movs	r3, #1
 800759c:	464a      	mov	r2, r9
 800759e:	4631      	mov	r1, r6
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b8      	blx	r7
 80075a4:	3001      	adds	r0, #1
 80075a6:	f43f ae3c 	beq.w	8007222 <_printf_float+0xb6>
 80075aa:	f108 0801 	add.w	r8, r8, #1
 80075ae:	68e3      	ldr	r3, [r4, #12]
 80075b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80075b2:	1a5b      	subs	r3, r3, r1
 80075b4:	4543      	cmp	r3, r8
 80075b6:	dcf0      	bgt.n	800759a <_printf_float+0x42e>
 80075b8:	e6fd      	b.n	80073b6 <_printf_float+0x24a>
 80075ba:	f04f 0800 	mov.w	r8, #0
 80075be:	f104 0919 	add.w	r9, r4, #25
 80075c2:	e7f4      	b.n	80075ae <_printf_float+0x442>

080075c4 <_printf_common>:
 80075c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	4616      	mov	r6, r2
 80075ca:	4698      	mov	r8, r3
 80075cc:	688a      	ldr	r2, [r1, #8]
 80075ce:	690b      	ldr	r3, [r1, #16]
 80075d0:	4607      	mov	r7, r0
 80075d2:	4293      	cmp	r3, r2
 80075d4:	bfb8      	it	lt
 80075d6:	4613      	movlt	r3, r2
 80075d8:	6033      	str	r3, [r6, #0]
 80075da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075de:	460c      	mov	r4, r1
 80075e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075e4:	b10a      	cbz	r2, 80075ea <_printf_common+0x26>
 80075e6:	3301      	adds	r3, #1
 80075e8:	6033      	str	r3, [r6, #0]
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	0699      	lsls	r1, r3, #26
 80075ee:	bf42      	ittt	mi
 80075f0:	6833      	ldrmi	r3, [r6, #0]
 80075f2:	3302      	addmi	r3, #2
 80075f4:	6033      	strmi	r3, [r6, #0]
 80075f6:	6825      	ldr	r5, [r4, #0]
 80075f8:	f015 0506 	ands.w	r5, r5, #6
 80075fc:	d106      	bne.n	800760c <_printf_common+0x48>
 80075fe:	f104 0a19 	add.w	sl, r4, #25
 8007602:	68e3      	ldr	r3, [r4, #12]
 8007604:	6832      	ldr	r2, [r6, #0]
 8007606:	1a9b      	subs	r3, r3, r2
 8007608:	42ab      	cmp	r3, r5
 800760a:	dc2b      	bgt.n	8007664 <_printf_common+0xa0>
 800760c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	3b00      	subs	r3, #0
 8007614:	bf18      	it	ne
 8007616:	2301      	movne	r3, #1
 8007618:	0692      	lsls	r2, r2, #26
 800761a:	d430      	bmi.n	800767e <_printf_common+0xba>
 800761c:	4641      	mov	r1, r8
 800761e:	4638      	mov	r0, r7
 8007620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007624:	47c8      	blx	r9
 8007626:	3001      	adds	r0, #1
 8007628:	d023      	beq.n	8007672 <_printf_common+0xae>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	6922      	ldr	r2, [r4, #16]
 800762e:	f003 0306 	and.w	r3, r3, #6
 8007632:	2b04      	cmp	r3, #4
 8007634:	bf14      	ite	ne
 8007636:	2500      	movne	r5, #0
 8007638:	6833      	ldreq	r3, [r6, #0]
 800763a:	f04f 0600 	mov.w	r6, #0
 800763e:	bf08      	it	eq
 8007640:	68e5      	ldreq	r5, [r4, #12]
 8007642:	f104 041a 	add.w	r4, r4, #26
 8007646:	bf08      	it	eq
 8007648:	1aed      	subeq	r5, r5, r3
 800764a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800764e:	bf08      	it	eq
 8007650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007654:	4293      	cmp	r3, r2
 8007656:	bfc4      	itt	gt
 8007658:	1a9b      	subgt	r3, r3, r2
 800765a:	18ed      	addgt	r5, r5, r3
 800765c:	42b5      	cmp	r5, r6
 800765e:	d11a      	bne.n	8007696 <_printf_common+0xd2>
 8007660:	2000      	movs	r0, #0
 8007662:	e008      	b.n	8007676 <_printf_common+0xb2>
 8007664:	2301      	movs	r3, #1
 8007666:	4652      	mov	r2, sl
 8007668:	4641      	mov	r1, r8
 800766a:	4638      	mov	r0, r7
 800766c:	47c8      	blx	r9
 800766e:	3001      	adds	r0, #1
 8007670:	d103      	bne.n	800767a <_printf_common+0xb6>
 8007672:	f04f 30ff 	mov.w	r0, #4294967295
 8007676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767a:	3501      	adds	r5, #1
 800767c:	e7c1      	b.n	8007602 <_printf_common+0x3e>
 800767e:	2030      	movs	r0, #48	@ 0x30
 8007680:	18e1      	adds	r1, r4, r3
 8007682:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800768c:	4422      	add	r2, r4
 800768e:	3302      	adds	r3, #2
 8007690:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007694:	e7c2      	b.n	800761c <_printf_common+0x58>
 8007696:	2301      	movs	r3, #1
 8007698:	4622      	mov	r2, r4
 800769a:	4641      	mov	r1, r8
 800769c:	4638      	mov	r0, r7
 800769e:	47c8      	blx	r9
 80076a0:	3001      	adds	r0, #1
 80076a2:	d0e6      	beq.n	8007672 <_printf_common+0xae>
 80076a4:	3601      	adds	r6, #1
 80076a6:	e7d9      	b.n	800765c <_printf_common+0x98>

080076a8 <_printf_i>:
 80076a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	7e0f      	ldrb	r7, [r1, #24]
 80076ae:	4691      	mov	r9, r2
 80076b0:	2f78      	cmp	r7, #120	@ 0x78
 80076b2:	4680      	mov	r8, r0
 80076b4:	460c      	mov	r4, r1
 80076b6:	469a      	mov	sl, r3
 80076b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076be:	d807      	bhi.n	80076d0 <_printf_i+0x28>
 80076c0:	2f62      	cmp	r7, #98	@ 0x62
 80076c2:	d80a      	bhi.n	80076da <_printf_i+0x32>
 80076c4:	2f00      	cmp	r7, #0
 80076c6:	f000 80d3 	beq.w	8007870 <_printf_i+0x1c8>
 80076ca:	2f58      	cmp	r7, #88	@ 0x58
 80076cc:	f000 80ba 	beq.w	8007844 <_printf_i+0x19c>
 80076d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076d8:	e03a      	b.n	8007750 <_printf_i+0xa8>
 80076da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076de:	2b15      	cmp	r3, #21
 80076e0:	d8f6      	bhi.n	80076d0 <_printf_i+0x28>
 80076e2:	a101      	add	r1, pc, #4	@ (adr r1, 80076e8 <_printf_i+0x40>)
 80076e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076e8:	08007741 	.word	0x08007741
 80076ec:	08007755 	.word	0x08007755
 80076f0:	080076d1 	.word	0x080076d1
 80076f4:	080076d1 	.word	0x080076d1
 80076f8:	080076d1 	.word	0x080076d1
 80076fc:	080076d1 	.word	0x080076d1
 8007700:	08007755 	.word	0x08007755
 8007704:	080076d1 	.word	0x080076d1
 8007708:	080076d1 	.word	0x080076d1
 800770c:	080076d1 	.word	0x080076d1
 8007710:	080076d1 	.word	0x080076d1
 8007714:	08007857 	.word	0x08007857
 8007718:	0800777f 	.word	0x0800777f
 800771c:	08007811 	.word	0x08007811
 8007720:	080076d1 	.word	0x080076d1
 8007724:	080076d1 	.word	0x080076d1
 8007728:	08007879 	.word	0x08007879
 800772c:	080076d1 	.word	0x080076d1
 8007730:	0800777f 	.word	0x0800777f
 8007734:	080076d1 	.word	0x080076d1
 8007738:	080076d1 	.word	0x080076d1
 800773c:	08007819 	.word	0x08007819
 8007740:	6833      	ldr	r3, [r6, #0]
 8007742:	1d1a      	adds	r2, r3, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6032      	str	r2, [r6, #0]
 8007748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800774c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007750:	2301      	movs	r3, #1
 8007752:	e09e      	b.n	8007892 <_printf_i+0x1ea>
 8007754:	6833      	ldr	r3, [r6, #0]
 8007756:	6820      	ldr	r0, [r4, #0]
 8007758:	1d19      	adds	r1, r3, #4
 800775a:	6031      	str	r1, [r6, #0]
 800775c:	0606      	lsls	r6, r0, #24
 800775e:	d501      	bpl.n	8007764 <_printf_i+0xbc>
 8007760:	681d      	ldr	r5, [r3, #0]
 8007762:	e003      	b.n	800776c <_printf_i+0xc4>
 8007764:	0645      	lsls	r5, r0, #25
 8007766:	d5fb      	bpl.n	8007760 <_printf_i+0xb8>
 8007768:	f9b3 5000 	ldrsh.w	r5, [r3]
 800776c:	2d00      	cmp	r5, #0
 800776e:	da03      	bge.n	8007778 <_printf_i+0xd0>
 8007770:	232d      	movs	r3, #45	@ 0x2d
 8007772:	426d      	negs	r5, r5
 8007774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007778:	230a      	movs	r3, #10
 800777a:	4859      	ldr	r0, [pc, #356]	@ (80078e0 <_printf_i+0x238>)
 800777c:	e011      	b.n	80077a2 <_printf_i+0xfa>
 800777e:	6821      	ldr	r1, [r4, #0]
 8007780:	6833      	ldr	r3, [r6, #0]
 8007782:	0608      	lsls	r0, r1, #24
 8007784:	f853 5b04 	ldr.w	r5, [r3], #4
 8007788:	d402      	bmi.n	8007790 <_printf_i+0xe8>
 800778a:	0649      	lsls	r1, r1, #25
 800778c:	bf48      	it	mi
 800778e:	b2ad      	uxthmi	r5, r5
 8007790:	2f6f      	cmp	r7, #111	@ 0x6f
 8007792:	6033      	str	r3, [r6, #0]
 8007794:	bf14      	ite	ne
 8007796:	230a      	movne	r3, #10
 8007798:	2308      	moveq	r3, #8
 800779a:	4851      	ldr	r0, [pc, #324]	@ (80078e0 <_printf_i+0x238>)
 800779c:	2100      	movs	r1, #0
 800779e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077a2:	6866      	ldr	r6, [r4, #4]
 80077a4:	2e00      	cmp	r6, #0
 80077a6:	bfa8      	it	ge
 80077a8:	6821      	ldrge	r1, [r4, #0]
 80077aa:	60a6      	str	r6, [r4, #8]
 80077ac:	bfa4      	itt	ge
 80077ae:	f021 0104 	bicge.w	r1, r1, #4
 80077b2:	6021      	strge	r1, [r4, #0]
 80077b4:	b90d      	cbnz	r5, 80077ba <_printf_i+0x112>
 80077b6:	2e00      	cmp	r6, #0
 80077b8:	d04b      	beq.n	8007852 <_printf_i+0x1aa>
 80077ba:	4616      	mov	r6, r2
 80077bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80077c0:	fb03 5711 	mls	r7, r3, r1, r5
 80077c4:	5dc7      	ldrb	r7, [r0, r7]
 80077c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077ca:	462f      	mov	r7, r5
 80077cc:	42bb      	cmp	r3, r7
 80077ce:	460d      	mov	r5, r1
 80077d0:	d9f4      	bls.n	80077bc <_printf_i+0x114>
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	d10b      	bne.n	80077ee <_printf_i+0x146>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	07df      	lsls	r7, r3, #31
 80077da:	d508      	bpl.n	80077ee <_printf_i+0x146>
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	6861      	ldr	r1, [r4, #4]
 80077e0:	4299      	cmp	r1, r3
 80077e2:	bfde      	ittt	le
 80077e4:	2330      	movle	r3, #48	@ 0x30
 80077e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077ee:	1b92      	subs	r2, r2, r6
 80077f0:	6122      	str	r2, [r4, #16]
 80077f2:	464b      	mov	r3, r9
 80077f4:	4621      	mov	r1, r4
 80077f6:	4640      	mov	r0, r8
 80077f8:	f8cd a000 	str.w	sl, [sp]
 80077fc:	aa03      	add	r2, sp, #12
 80077fe:	f7ff fee1 	bl	80075c4 <_printf_common>
 8007802:	3001      	adds	r0, #1
 8007804:	d14a      	bne.n	800789c <_printf_i+0x1f4>
 8007806:	f04f 30ff 	mov.w	r0, #4294967295
 800780a:	b004      	add	sp, #16
 800780c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	f043 0320 	orr.w	r3, r3, #32
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	2778      	movs	r7, #120	@ 0x78
 800781a:	4832      	ldr	r0, [pc, #200]	@ (80078e4 <_printf_i+0x23c>)
 800781c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	6831      	ldr	r1, [r6, #0]
 8007824:	061f      	lsls	r7, r3, #24
 8007826:	f851 5b04 	ldr.w	r5, [r1], #4
 800782a:	d402      	bmi.n	8007832 <_printf_i+0x18a>
 800782c:	065f      	lsls	r7, r3, #25
 800782e:	bf48      	it	mi
 8007830:	b2ad      	uxthmi	r5, r5
 8007832:	6031      	str	r1, [r6, #0]
 8007834:	07d9      	lsls	r1, r3, #31
 8007836:	bf44      	itt	mi
 8007838:	f043 0320 	orrmi.w	r3, r3, #32
 800783c:	6023      	strmi	r3, [r4, #0]
 800783e:	b11d      	cbz	r5, 8007848 <_printf_i+0x1a0>
 8007840:	2310      	movs	r3, #16
 8007842:	e7ab      	b.n	800779c <_printf_i+0xf4>
 8007844:	4826      	ldr	r0, [pc, #152]	@ (80078e0 <_printf_i+0x238>)
 8007846:	e7e9      	b.n	800781c <_printf_i+0x174>
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	f023 0320 	bic.w	r3, r3, #32
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	e7f6      	b.n	8007840 <_printf_i+0x198>
 8007852:	4616      	mov	r6, r2
 8007854:	e7bd      	b.n	80077d2 <_printf_i+0x12a>
 8007856:	6833      	ldr	r3, [r6, #0]
 8007858:	6825      	ldr	r5, [r4, #0]
 800785a:	1d18      	adds	r0, r3, #4
 800785c:	6961      	ldr	r1, [r4, #20]
 800785e:	6030      	str	r0, [r6, #0]
 8007860:	062e      	lsls	r6, r5, #24
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	d501      	bpl.n	800786a <_printf_i+0x1c2>
 8007866:	6019      	str	r1, [r3, #0]
 8007868:	e002      	b.n	8007870 <_printf_i+0x1c8>
 800786a:	0668      	lsls	r0, r5, #25
 800786c:	d5fb      	bpl.n	8007866 <_printf_i+0x1be>
 800786e:	8019      	strh	r1, [r3, #0]
 8007870:	2300      	movs	r3, #0
 8007872:	4616      	mov	r6, r2
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	e7bc      	b.n	80077f2 <_printf_i+0x14a>
 8007878:	6833      	ldr	r3, [r6, #0]
 800787a:	2100      	movs	r1, #0
 800787c:	1d1a      	adds	r2, r3, #4
 800787e:	6032      	str	r2, [r6, #0]
 8007880:	681e      	ldr	r6, [r3, #0]
 8007882:	6862      	ldr	r2, [r4, #4]
 8007884:	4630      	mov	r0, r6
 8007886:	f000 fc9c 	bl	80081c2 <memchr>
 800788a:	b108      	cbz	r0, 8007890 <_printf_i+0x1e8>
 800788c:	1b80      	subs	r0, r0, r6
 800788e:	6060      	str	r0, [r4, #4]
 8007890:	6863      	ldr	r3, [r4, #4]
 8007892:	6123      	str	r3, [r4, #16]
 8007894:	2300      	movs	r3, #0
 8007896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800789a:	e7aa      	b.n	80077f2 <_printf_i+0x14a>
 800789c:	4632      	mov	r2, r6
 800789e:	4649      	mov	r1, r9
 80078a0:	4640      	mov	r0, r8
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	47d0      	blx	sl
 80078a6:	3001      	adds	r0, #1
 80078a8:	d0ad      	beq.n	8007806 <_printf_i+0x15e>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	079b      	lsls	r3, r3, #30
 80078ae:	d413      	bmi.n	80078d8 <_printf_i+0x230>
 80078b0:	68e0      	ldr	r0, [r4, #12]
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	4298      	cmp	r0, r3
 80078b6:	bfb8      	it	lt
 80078b8:	4618      	movlt	r0, r3
 80078ba:	e7a6      	b.n	800780a <_printf_i+0x162>
 80078bc:	2301      	movs	r3, #1
 80078be:	4632      	mov	r2, r6
 80078c0:	4649      	mov	r1, r9
 80078c2:	4640      	mov	r0, r8
 80078c4:	47d0      	blx	sl
 80078c6:	3001      	adds	r0, #1
 80078c8:	d09d      	beq.n	8007806 <_printf_i+0x15e>
 80078ca:	3501      	adds	r5, #1
 80078cc:	68e3      	ldr	r3, [r4, #12]
 80078ce:	9903      	ldr	r1, [sp, #12]
 80078d0:	1a5b      	subs	r3, r3, r1
 80078d2:	42ab      	cmp	r3, r5
 80078d4:	dcf2      	bgt.n	80078bc <_printf_i+0x214>
 80078d6:	e7eb      	b.n	80078b0 <_printf_i+0x208>
 80078d8:	2500      	movs	r5, #0
 80078da:	f104 0619 	add.w	r6, r4, #25
 80078de:	e7f5      	b.n	80078cc <_printf_i+0x224>
 80078e0:	0800e85d 	.word	0x0800e85d
 80078e4:	0800e86e 	.word	0x0800e86e

080078e8 <_scanf_float>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	b087      	sub	sp, #28
 80078ee:	9303      	str	r3, [sp, #12]
 80078f0:	688b      	ldr	r3, [r1, #8]
 80078f2:	4617      	mov	r7, r2
 80078f4:	1e5a      	subs	r2, r3, #1
 80078f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80078fa:	bf82      	ittt	hi
 80078fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007900:	eb03 0b05 	addhi.w	fp, r3, r5
 8007904:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007908:	460a      	mov	r2, r1
 800790a:	f04f 0500 	mov.w	r5, #0
 800790e:	bf88      	it	hi
 8007910:	608b      	strhi	r3, [r1, #8]
 8007912:	680b      	ldr	r3, [r1, #0]
 8007914:	4680      	mov	r8, r0
 8007916:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800791a:	f842 3b1c 	str.w	r3, [r2], #28
 800791e:	460c      	mov	r4, r1
 8007920:	bf98      	it	ls
 8007922:	f04f 0b00 	movls.w	fp, #0
 8007926:	4616      	mov	r6, r2
 8007928:	46aa      	mov	sl, r5
 800792a:	46a9      	mov	r9, r5
 800792c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007930:	9201      	str	r2, [sp, #4]
 8007932:	9502      	str	r5, [sp, #8]
 8007934:	68a2      	ldr	r2, [r4, #8]
 8007936:	b152      	cbz	r2, 800794e <_scanf_float+0x66>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b4e      	cmp	r3, #78	@ 0x4e
 800793e:	d865      	bhi.n	8007a0c <_scanf_float+0x124>
 8007940:	2b40      	cmp	r3, #64	@ 0x40
 8007942:	d83d      	bhi.n	80079c0 <_scanf_float+0xd8>
 8007944:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007948:	b2c8      	uxtb	r0, r1
 800794a:	280e      	cmp	r0, #14
 800794c:	d93b      	bls.n	80079c6 <_scanf_float+0xde>
 800794e:	f1b9 0f00 	cmp.w	r9, #0
 8007952:	d003      	beq.n	800795c <_scanf_float+0x74>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800795a:	6023      	str	r3, [r4, #0]
 800795c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007960:	f1ba 0f01 	cmp.w	sl, #1
 8007964:	f200 8118 	bhi.w	8007b98 <_scanf_float+0x2b0>
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	429e      	cmp	r6, r3
 800796c:	f200 8109 	bhi.w	8007b82 <_scanf_float+0x29a>
 8007970:	2001      	movs	r0, #1
 8007972:	b007      	add	sp, #28
 8007974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007978:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800797c:	2a0d      	cmp	r2, #13
 800797e:	d8e6      	bhi.n	800794e <_scanf_float+0x66>
 8007980:	a101      	add	r1, pc, #4	@ (adr r1, 8007988 <_scanf_float+0xa0>)
 8007982:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007986:	bf00      	nop
 8007988:	08007acf 	.word	0x08007acf
 800798c:	0800794f 	.word	0x0800794f
 8007990:	0800794f 	.word	0x0800794f
 8007994:	0800794f 	.word	0x0800794f
 8007998:	08007b2f 	.word	0x08007b2f
 800799c:	08007b07 	.word	0x08007b07
 80079a0:	0800794f 	.word	0x0800794f
 80079a4:	0800794f 	.word	0x0800794f
 80079a8:	08007add 	.word	0x08007add
 80079ac:	0800794f 	.word	0x0800794f
 80079b0:	0800794f 	.word	0x0800794f
 80079b4:	0800794f 	.word	0x0800794f
 80079b8:	0800794f 	.word	0x0800794f
 80079bc:	08007a95 	.word	0x08007a95
 80079c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80079c4:	e7da      	b.n	800797c <_scanf_float+0x94>
 80079c6:	290e      	cmp	r1, #14
 80079c8:	d8c1      	bhi.n	800794e <_scanf_float+0x66>
 80079ca:	a001      	add	r0, pc, #4	@ (adr r0, 80079d0 <_scanf_float+0xe8>)
 80079cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80079d0:	08007a85 	.word	0x08007a85
 80079d4:	0800794f 	.word	0x0800794f
 80079d8:	08007a85 	.word	0x08007a85
 80079dc:	08007b1b 	.word	0x08007b1b
 80079e0:	0800794f 	.word	0x0800794f
 80079e4:	08007a2d 	.word	0x08007a2d
 80079e8:	08007a6b 	.word	0x08007a6b
 80079ec:	08007a6b 	.word	0x08007a6b
 80079f0:	08007a6b 	.word	0x08007a6b
 80079f4:	08007a6b 	.word	0x08007a6b
 80079f8:	08007a6b 	.word	0x08007a6b
 80079fc:	08007a6b 	.word	0x08007a6b
 8007a00:	08007a6b 	.word	0x08007a6b
 8007a04:	08007a6b 	.word	0x08007a6b
 8007a08:	08007a6b 	.word	0x08007a6b
 8007a0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8007a0e:	d809      	bhi.n	8007a24 <_scanf_float+0x13c>
 8007a10:	2b60      	cmp	r3, #96	@ 0x60
 8007a12:	d8b1      	bhi.n	8007978 <_scanf_float+0x90>
 8007a14:	2b54      	cmp	r3, #84	@ 0x54
 8007a16:	d07b      	beq.n	8007b10 <_scanf_float+0x228>
 8007a18:	2b59      	cmp	r3, #89	@ 0x59
 8007a1a:	d198      	bne.n	800794e <_scanf_float+0x66>
 8007a1c:	2d07      	cmp	r5, #7
 8007a1e:	d196      	bne.n	800794e <_scanf_float+0x66>
 8007a20:	2508      	movs	r5, #8
 8007a22:	e02c      	b.n	8007a7e <_scanf_float+0x196>
 8007a24:	2b74      	cmp	r3, #116	@ 0x74
 8007a26:	d073      	beq.n	8007b10 <_scanf_float+0x228>
 8007a28:	2b79      	cmp	r3, #121	@ 0x79
 8007a2a:	e7f6      	b.n	8007a1a <_scanf_float+0x132>
 8007a2c:	6821      	ldr	r1, [r4, #0]
 8007a2e:	05c8      	lsls	r0, r1, #23
 8007a30:	d51b      	bpl.n	8007a6a <_scanf_float+0x182>
 8007a32:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007a36:	6021      	str	r1, [r4, #0]
 8007a38:	f109 0901 	add.w	r9, r9, #1
 8007a3c:	f1bb 0f00 	cmp.w	fp, #0
 8007a40:	d003      	beq.n	8007a4a <_scanf_float+0x162>
 8007a42:	3201      	adds	r2, #1
 8007a44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a48:	60a2      	str	r2, [r4, #8]
 8007a4a:	68a3      	ldr	r3, [r4, #8]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	60a3      	str	r3, [r4, #8]
 8007a50:	6923      	ldr	r3, [r4, #16]
 8007a52:	3301      	adds	r3, #1
 8007a54:	6123      	str	r3, [r4, #16]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	607b      	str	r3, [r7, #4]
 8007a5e:	f340 8087 	ble.w	8007b70 <_scanf_float+0x288>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	603b      	str	r3, [r7, #0]
 8007a68:	e764      	b.n	8007934 <_scanf_float+0x4c>
 8007a6a:	eb1a 0105 	adds.w	r1, sl, r5
 8007a6e:	f47f af6e 	bne.w	800794e <_scanf_float+0x66>
 8007a72:	460d      	mov	r5, r1
 8007a74:	468a      	mov	sl, r1
 8007a76:	6822      	ldr	r2, [r4, #0]
 8007a78:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007a7c:	6022      	str	r2, [r4, #0]
 8007a7e:	f806 3b01 	strb.w	r3, [r6], #1
 8007a82:	e7e2      	b.n	8007a4a <_scanf_float+0x162>
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	0610      	lsls	r0, r2, #24
 8007a88:	f57f af61 	bpl.w	800794e <_scanf_float+0x66>
 8007a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a90:	6022      	str	r2, [r4, #0]
 8007a92:	e7f4      	b.n	8007a7e <_scanf_float+0x196>
 8007a94:	f1ba 0f00 	cmp.w	sl, #0
 8007a98:	d10e      	bne.n	8007ab8 <_scanf_float+0x1d0>
 8007a9a:	f1b9 0f00 	cmp.w	r9, #0
 8007a9e:	d10e      	bne.n	8007abe <_scanf_float+0x1d6>
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007aa6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007aaa:	d108      	bne.n	8007abe <_scanf_float+0x1d6>
 8007aac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ab0:	f04f 0a01 	mov.w	sl, #1
 8007ab4:	6022      	str	r2, [r4, #0]
 8007ab6:	e7e2      	b.n	8007a7e <_scanf_float+0x196>
 8007ab8:	f1ba 0f02 	cmp.w	sl, #2
 8007abc:	d055      	beq.n	8007b6a <_scanf_float+0x282>
 8007abe:	2d01      	cmp	r5, #1
 8007ac0:	d002      	beq.n	8007ac8 <_scanf_float+0x1e0>
 8007ac2:	2d04      	cmp	r5, #4
 8007ac4:	f47f af43 	bne.w	800794e <_scanf_float+0x66>
 8007ac8:	3501      	adds	r5, #1
 8007aca:	b2ed      	uxtb	r5, r5
 8007acc:	e7d7      	b.n	8007a7e <_scanf_float+0x196>
 8007ace:	f1ba 0f01 	cmp.w	sl, #1
 8007ad2:	f47f af3c 	bne.w	800794e <_scanf_float+0x66>
 8007ad6:	f04f 0a02 	mov.w	sl, #2
 8007ada:	e7d0      	b.n	8007a7e <_scanf_float+0x196>
 8007adc:	b97d      	cbnz	r5, 8007afe <_scanf_float+0x216>
 8007ade:	f1b9 0f00 	cmp.w	r9, #0
 8007ae2:	f47f af37 	bne.w	8007954 <_scanf_float+0x6c>
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007aec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007af0:	f040 8103 	bne.w	8007cfa <_scanf_float+0x412>
 8007af4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007af8:	2501      	movs	r5, #1
 8007afa:	6022      	str	r2, [r4, #0]
 8007afc:	e7bf      	b.n	8007a7e <_scanf_float+0x196>
 8007afe:	2d03      	cmp	r5, #3
 8007b00:	d0e2      	beq.n	8007ac8 <_scanf_float+0x1e0>
 8007b02:	2d05      	cmp	r5, #5
 8007b04:	e7de      	b.n	8007ac4 <_scanf_float+0x1dc>
 8007b06:	2d02      	cmp	r5, #2
 8007b08:	f47f af21 	bne.w	800794e <_scanf_float+0x66>
 8007b0c:	2503      	movs	r5, #3
 8007b0e:	e7b6      	b.n	8007a7e <_scanf_float+0x196>
 8007b10:	2d06      	cmp	r5, #6
 8007b12:	f47f af1c 	bne.w	800794e <_scanf_float+0x66>
 8007b16:	2507      	movs	r5, #7
 8007b18:	e7b1      	b.n	8007a7e <_scanf_float+0x196>
 8007b1a:	6822      	ldr	r2, [r4, #0]
 8007b1c:	0591      	lsls	r1, r2, #22
 8007b1e:	f57f af16 	bpl.w	800794e <_scanf_float+0x66>
 8007b22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007b26:	6022      	str	r2, [r4, #0]
 8007b28:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b2c:	e7a7      	b.n	8007a7e <_scanf_float+0x196>
 8007b2e:	6822      	ldr	r2, [r4, #0]
 8007b30:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007b34:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007b38:	d006      	beq.n	8007b48 <_scanf_float+0x260>
 8007b3a:	0550      	lsls	r0, r2, #21
 8007b3c:	f57f af07 	bpl.w	800794e <_scanf_float+0x66>
 8007b40:	f1b9 0f00 	cmp.w	r9, #0
 8007b44:	f000 80d9 	beq.w	8007cfa <_scanf_float+0x412>
 8007b48:	0591      	lsls	r1, r2, #22
 8007b4a:	bf58      	it	pl
 8007b4c:	9902      	ldrpl	r1, [sp, #8]
 8007b4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b52:	bf58      	it	pl
 8007b54:	eba9 0101 	subpl.w	r1, r9, r1
 8007b58:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007b5c:	f04f 0900 	mov.w	r9, #0
 8007b60:	bf58      	it	pl
 8007b62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b66:	6022      	str	r2, [r4, #0]
 8007b68:	e789      	b.n	8007a7e <_scanf_float+0x196>
 8007b6a:	f04f 0a03 	mov.w	sl, #3
 8007b6e:	e786      	b.n	8007a7e <_scanf_float+0x196>
 8007b70:	4639      	mov	r1, r7
 8007b72:	4640      	mov	r0, r8
 8007b74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007b78:	4798      	blx	r3
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	f43f aeda 	beq.w	8007934 <_scanf_float+0x4c>
 8007b80:	e6e5      	b.n	800794e <_scanf_float+0x66>
 8007b82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b86:	463a      	mov	r2, r7
 8007b88:	4640      	mov	r0, r8
 8007b8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b8e:	4798      	blx	r3
 8007b90:	6923      	ldr	r3, [r4, #16]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	6123      	str	r3, [r4, #16]
 8007b96:	e6e7      	b.n	8007968 <_scanf_float+0x80>
 8007b98:	1e6b      	subs	r3, r5, #1
 8007b9a:	2b06      	cmp	r3, #6
 8007b9c:	d824      	bhi.n	8007be8 <_scanf_float+0x300>
 8007b9e:	2d02      	cmp	r5, #2
 8007ba0:	d836      	bhi.n	8007c10 <_scanf_float+0x328>
 8007ba2:	9b01      	ldr	r3, [sp, #4]
 8007ba4:	429e      	cmp	r6, r3
 8007ba6:	f67f aee3 	bls.w	8007970 <_scanf_float+0x88>
 8007baa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bae:	463a      	mov	r2, r7
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bb6:	4798      	blx	r3
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	6123      	str	r3, [r4, #16]
 8007bbe:	e7f0      	b.n	8007ba2 <_scanf_float+0x2ba>
 8007bc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bc4:	463a      	mov	r2, r7
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007bcc:	4798      	blx	r3
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bd8:	fa5f fa8a 	uxtb.w	sl, sl
 8007bdc:	f1ba 0f02 	cmp.w	sl, #2
 8007be0:	d1ee      	bne.n	8007bc0 <_scanf_float+0x2d8>
 8007be2:	3d03      	subs	r5, #3
 8007be4:	b2ed      	uxtb	r5, r5
 8007be6:	1b76      	subs	r6, r6, r5
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	05da      	lsls	r2, r3, #23
 8007bec:	d530      	bpl.n	8007c50 <_scanf_float+0x368>
 8007bee:	055b      	lsls	r3, r3, #21
 8007bf0:	d511      	bpl.n	8007c16 <_scanf_float+0x32e>
 8007bf2:	9b01      	ldr	r3, [sp, #4]
 8007bf4:	429e      	cmp	r6, r3
 8007bf6:	f67f aebb 	bls.w	8007970 <_scanf_float+0x88>
 8007bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bfe:	463a      	mov	r2, r7
 8007c00:	4640      	mov	r0, r8
 8007c02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c06:	4798      	blx	r3
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	6123      	str	r3, [r4, #16]
 8007c0e:	e7f0      	b.n	8007bf2 <_scanf_float+0x30a>
 8007c10:	46aa      	mov	sl, r5
 8007c12:	46b3      	mov	fp, r6
 8007c14:	e7de      	b.n	8007bd4 <_scanf_float+0x2ec>
 8007c16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	2965      	cmp	r1, #101	@ 0x65
 8007c1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c22:	f106 35ff 	add.w	r5, r6, #4294967295
 8007c26:	6123      	str	r3, [r4, #16]
 8007c28:	d00c      	beq.n	8007c44 <_scanf_float+0x35c>
 8007c2a:	2945      	cmp	r1, #69	@ 0x45
 8007c2c:	d00a      	beq.n	8007c44 <_scanf_float+0x35c>
 8007c2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c32:	463a      	mov	r2, r7
 8007c34:	4640      	mov	r0, r8
 8007c36:	4798      	blx	r3
 8007c38:	6923      	ldr	r3, [r4, #16]
 8007c3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	1eb5      	subs	r5, r6, #2
 8007c42:	6123      	str	r3, [r4, #16]
 8007c44:	463a      	mov	r2, r7
 8007c46:	4640      	mov	r0, r8
 8007c48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c4c:	4798      	blx	r3
 8007c4e:	462e      	mov	r6, r5
 8007c50:	6822      	ldr	r2, [r4, #0]
 8007c52:	f012 0210 	ands.w	r2, r2, #16
 8007c56:	d001      	beq.n	8007c5c <_scanf_float+0x374>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	e68a      	b.n	8007972 <_scanf_float+0x8a>
 8007c5c:	7032      	strb	r2, [r6, #0]
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c68:	d11c      	bne.n	8007ca4 <_scanf_float+0x3bc>
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	454b      	cmp	r3, r9
 8007c6e:	eba3 0209 	sub.w	r2, r3, r9
 8007c72:	d123      	bne.n	8007cbc <_scanf_float+0x3d4>
 8007c74:	2200      	movs	r2, #0
 8007c76:	4640      	mov	r0, r8
 8007c78:	9901      	ldr	r1, [sp, #4]
 8007c7a:	f002 fcd1 	bl	800a620 <_strtod_r>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	6825      	ldr	r5, [r4, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f015 0f02 	tst.w	r5, #2
 8007c88:	4606      	mov	r6, r0
 8007c8a:	460f      	mov	r7, r1
 8007c8c:	f103 0204 	add.w	r2, r3, #4
 8007c90:	d01f      	beq.n	8007cd2 <_scanf_float+0x3ea>
 8007c92:	9903      	ldr	r1, [sp, #12]
 8007c94:	600a      	str	r2, [r1, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	e9c3 6700 	strd	r6, r7, [r3]
 8007c9c:	68e3      	ldr	r3, [r4, #12]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	60e3      	str	r3, [r4, #12]
 8007ca2:	e7d9      	b.n	8007c58 <_scanf_float+0x370>
 8007ca4:	9b04      	ldr	r3, [sp, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0e4      	beq.n	8007c74 <_scanf_float+0x38c>
 8007caa:	9905      	ldr	r1, [sp, #20]
 8007cac:	230a      	movs	r3, #10
 8007cae:	4640      	mov	r0, r8
 8007cb0:	3101      	adds	r1, #1
 8007cb2:	f7ff f9b1 	bl	8007018 <_strtol_r>
 8007cb6:	9b04      	ldr	r3, [sp, #16]
 8007cb8:	9e05      	ldr	r6, [sp, #20]
 8007cba:	1ac2      	subs	r2, r0, r3
 8007cbc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007cc0:	429e      	cmp	r6, r3
 8007cc2:	bf28      	it	cs
 8007cc4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007cc8:	4630      	mov	r0, r6
 8007cca:	490d      	ldr	r1, [pc, #52]	@ (8007d00 <_scanf_float+0x418>)
 8007ccc:	f000 f8de 	bl	8007e8c <siprintf>
 8007cd0:	e7d0      	b.n	8007c74 <_scanf_float+0x38c>
 8007cd2:	076d      	lsls	r5, r5, #29
 8007cd4:	d4dd      	bmi.n	8007c92 <_scanf_float+0x3aa>
 8007cd6:	9d03      	ldr	r5, [sp, #12]
 8007cd8:	602a      	str	r2, [r5, #0]
 8007cda:	681d      	ldr	r5, [r3, #0]
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	f7f8 ff48 	bl	8000b74 <__aeabi_dcmpun>
 8007ce4:	b120      	cbz	r0, 8007cf0 <_scanf_float+0x408>
 8007ce6:	4807      	ldr	r0, [pc, #28]	@ (8007d04 <_scanf_float+0x41c>)
 8007ce8:	f000 fa88 	bl	80081fc <nanf>
 8007cec:	6028      	str	r0, [r5, #0]
 8007cee:	e7d5      	b.n	8007c9c <_scanf_float+0x3b4>
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	f7f8 ff9c 	bl	8000c30 <__aeabi_d2f>
 8007cf8:	e7f8      	b.n	8007cec <_scanf_float+0x404>
 8007cfa:	f04f 0900 	mov.w	r9, #0
 8007cfe:	e62d      	b.n	800795c <_scanf_float+0x74>
 8007d00:	0800e87f 	.word	0x0800e87f
 8007d04:	0800e930 	.word	0x0800e930

08007d08 <std>:
 8007d08:	2300      	movs	r3, #0
 8007d0a:	b510      	push	{r4, lr}
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d16:	6083      	str	r3, [r0, #8]
 8007d18:	8181      	strh	r1, [r0, #12]
 8007d1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d1c:	81c2      	strh	r2, [r0, #14]
 8007d1e:	6183      	str	r3, [r0, #24]
 8007d20:	4619      	mov	r1, r3
 8007d22:	2208      	movs	r2, #8
 8007d24:	305c      	adds	r0, #92	@ 0x5c
 8007d26:	f000 f92e 	bl	8007f86 <memset>
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d60 <std+0x58>)
 8007d2c:	6224      	str	r4, [r4, #32]
 8007d2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d30:	4b0c      	ldr	r3, [pc, #48]	@ (8007d64 <std+0x5c>)
 8007d32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d34:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <std+0x60>)
 8007d36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d38:	4b0c      	ldr	r3, [pc, #48]	@ (8007d6c <std+0x64>)
 8007d3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d70 <std+0x68>)
 8007d3e:	429c      	cmp	r4, r3
 8007d40:	d006      	beq.n	8007d50 <std+0x48>
 8007d42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d46:	4294      	cmp	r4, r2
 8007d48:	d002      	beq.n	8007d50 <std+0x48>
 8007d4a:	33d0      	adds	r3, #208	@ 0xd0
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	d105      	bne.n	8007d5c <std+0x54>
 8007d50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d58:	f000 ba28 	b.w	80081ac <__retarget_lock_init_recursive>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	bf00      	nop
 8007d60:	08007ecd 	.word	0x08007ecd
 8007d64:	08007eef 	.word	0x08007eef
 8007d68:	08007f27 	.word	0x08007f27
 8007d6c:	08007f4b 	.word	0x08007f4b
 8007d70:	20000954 	.word	0x20000954

08007d74 <stdio_exit_handler>:
 8007d74:	4a02      	ldr	r2, [pc, #8]	@ (8007d80 <stdio_exit_handler+0xc>)
 8007d76:	4903      	ldr	r1, [pc, #12]	@ (8007d84 <stdio_exit_handler+0x10>)
 8007d78:	4803      	ldr	r0, [pc, #12]	@ (8007d88 <stdio_exit_handler+0x14>)
 8007d7a:	f000 b869 	b.w	8007e50 <_fwalk_sglue>
 8007d7e:	bf00      	nop
 8007d80:	20000034 	.word	0x20000034
 8007d84:	0800a9dd 	.word	0x0800a9dd
 8007d88:	20000044 	.word	0x20000044

08007d8c <cleanup_stdio>:
 8007d8c:	6841      	ldr	r1, [r0, #4]
 8007d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc0 <cleanup_stdio+0x34>)
 8007d90:	b510      	push	{r4, lr}
 8007d92:	4299      	cmp	r1, r3
 8007d94:	4604      	mov	r4, r0
 8007d96:	d001      	beq.n	8007d9c <cleanup_stdio+0x10>
 8007d98:	f002 fe20 	bl	800a9dc <_fflush_r>
 8007d9c:	68a1      	ldr	r1, [r4, #8]
 8007d9e:	4b09      	ldr	r3, [pc, #36]	@ (8007dc4 <cleanup_stdio+0x38>)
 8007da0:	4299      	cmp	r1, r3
 8007da2:	d002      	beq.n	8007daa <cleanup_stdio+0x1e>
 8007da4:	4620      	mov	r0, r4
 8007da6:	f002 fe19 	bl	800a9dc <_fflush_r>
 8007daa:	68e1      	ldr	r1, [r4, #12]
 8007dac:	4b06      	ldr	r3, [pc, #24]	@ (8007dc8 <cleanup_stdio+0x3c>)
 8007dae:	4299      	cmp	r1, r3
 8007db0:	d004      	beq.n	8007dbc <cleanup_stdio+0x30>
 8007db2:	4620      	mov	r0, r4
 8007db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db8:	f002 be10 	b.w	800a9dc <_fflush_r>
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000954 	.word	0x20000954
 8007dc4:	200009bc 	.word	0x200009bc
 8007dc8:	20000a24 	.word	0x20000a24

08007dcc <global_stdio_init.part.0>:
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	4b0b      	ldr	r3, [pc, #44]	@ (8007dfc <global_stdio_init.part.0+0x30>)
 8007dd0:	4c0b      	ldr	r4, [pc, #44]	@ (8007e00 <global_stdio_init.part.0+0x34>)
 8007dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8007e04 <global_stdio_init.part.0+0x38>)
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	2104      	movs	r1, #4
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f7ff ff94 	bl	8007d08 <std>
 8007de0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007de4:	2201      	movs	r2, #1
 8007de6:	2109      	movs	r1, #9
 8007de8:	f7ff ff8e 	bl	8007d08 <std>
 8007dec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007df0:	2202      	movs	r2, #2
 8007df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df6:	2112      	movs	r1, #18
 8007df8:	f7ff bf86 	b.w	8007d08 <std>
 8007dfc:	20000a8c 	.word	0x20000a8c
 8007e00:	20000954 	.word	0x20000954
 8007e04:	08007d75 	.word	0x08007d75

08007e08 <__sfp_lock_acquire>:
 8007e08:	4801      	ldr	r0, [pc, #4]	@ (8007e10 <__sfp_lock_acquire+0x8>)
 8007e0a:	f000 b9d0 	b.w	80081ae <__retarget_lock_acquire_recursive>
 8007e0e:	bf00      	nop
 8007e10:	20000a95 	.word	0x20000a95

08007e14 <__sfp_lock_release>:
 8007e14:	4801      	ldr	r0, [pc, #4]	@ (8007e1c <__sfp_lock_release+0x8>)
 8007e16:	f000 b9cb 	b.w	80081b0 <__retarget_lock_release_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	20000a95 	.word	0x20000a95

08007e20 <__sinit>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	4604      	mov	r4, r0
 8007e24:	f7ff fff0 	bl	8007e08 <__sfp_lock_acquire>
 8007e28:	6a23      	ldr	r3, [r4, #32]
 8007e2a:	b11b      	cbz	r3, 8007e34 <__sinit+0x14>
 8007e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e30:	f7ff bff0 	b.w	8007e14 <__sfp_lock_release>
 8007e34:	4b04      	ldr	r3, [pc, #16]	@ (8007e48 <__sinit+0x28>)
 8007e36:	6223      	str	r3, [r4, #32]
 8007e38:	4b04      	ldr	r3, [pc, #16]	@ (8007e4c <__sinit+0x2c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1f5      	bne.n	8007e2c <__sinit+0xc>
 8007e40:	f7ff ffc4 	bl	8007dcc <global_stdio_init.part.0>
 8007e44:	e7f2      	b.n	8007e2c <__sinit+0xc>
 8007e46:	bf00      	nop
 8007e48:	08007d8d 	.word	0x08007d8d
 8007e4c:	20000a8c 	.word	0x20000a8c

08007e50 <_fwalk_sglue>:
 8007e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e54:	4607      	mov	r7, r0
 8007e56:	4688      	mov	r8, r1
 8007e58:	4614      	mov	r4, r2
 8007e5a:	2600      	movs	r6, #0
 8007e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e60:	f1b9 0901 	subs.w	r9, r9, #1
 8007e64:	d505      	bpl.n	8007e72 <_fwalk_sglue+0x22>
 8007e66:	6824      	ldr	r4, [r4, #0]
 8007e68:	2c00      	cmp	r4, #0
 8007e6a:	d1f7      	bne.n	8007e5c <_fwalk_sglue+0xc>
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e72:	89ab      	ldrh	r3, [r5, #12]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d907      	bls.n	8007e88 <_fwalk_sglue+0x38>
 8007e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	d003      	beq.n	8007e88 <_fwalk_sglue+0x38>
 8007e80:	4629      	mov	r1, r5
 8007e82:	4638      	mov	r0, r7
 8007e84:	47c0      	blx	r8
 8007e86:	4306      	orrs	r6, r0
 8007e88:	3568      	adds	r5, #104	@ 0x68
 8007e8a:	e7e9      	b.n	8007e60 <_fwalk_sglue+0x10>

08007e8c <siprintf>:
 8007e8c:	b40e      	push	{r1, r2, r3}
 8007e8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e92:	b500      	push	{lr}
 8007e94:	b09c      	sub	sp, #112	@ 0x70
 8007e96:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e98:	9002      	str	r0, [sp, #8]
 8007e9a:	9006      	str	r0, [sp, #24]
 8007e9c:	9107      	str	r1, [sp, #28]
 8007e9e:	9104      	str	r1, [sp, #16]
 8007ea0:	4808      	ldr	r0, [pc, #32]	@ (8007ec4 <siprintf+0x38>)
 8007ea2:	4909      	ldr	r1, [pc, #36]	@ (8007ec8 <siprintf+0x3c>)
 8007ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea8:	9105      	str	r1, [sp, #20]
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	a902      	add	r1, sp, #8
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	f002 fc18 	bl	800a6e4 <_svfiprintf_r>
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	9b02      	ldr	r3, [sp, #8]
 8007eb8:	701a      	strb	r2, [r3, #0]
 8007eba:	b01c      	add	sp, #112	@ 0x70
 8007ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ec0:	b003      	add	sp, #12
 8007ec2:	4770      	bx	lr
 8007ec4:	20000040 	.word	0x20000040
 8007ec8:	ffff0208 	.word	0xffff0208

08007ecc <__sread>:
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	460c      	mov	r4, r1
 8007ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed4:	f000 f91c 	bl	8008110 <_read_r>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	bfab      	itete	ge
 8007edc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ede:	89a3      	ldrhlt	r3, [r4, #12]
 8007ee0:	181b      	addge	r3, r3, r0
 8007ee2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ee6:	bfac      	ite	ge
 8007ee8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007eea:	81a3      	strhlt	r3, [r4, #12]
 8007eec:	bd10      	pop	{r4, pc}

08007eee <__swrite>:
 8007eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef2:	461f      	mov	r7, r3
 8007ef4:	898b      	ldrh	r3, [r1, #12]
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	05db      	lsls	r3, r3, #23
 8007efa:	460c      	mov	r4, r1
 8007efc:	4616      	mov	r6, r2
 8007efe:	d505      	bpl.n	8007f0c <__swrite+0x1e>
 8007f00:	2302      	movs	r3, #2
 8007f02:	2200      	movs	r2, #0
 8007f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f08:	f000 f8f0 	bl	80080ec <_lseek_r>
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	4632      	mov	r2, r6
 8007f10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f14:	81a3      	strh	r3, [r4, #12]
 8007f16:	4628      	mov	r0, r5
 8007f18:	463b      	mov	r3, r7
 8007f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f22:	f000 b907 	b.w	8008134 <_write_r>

08007f26 <__sseek>:
 8007f26:	b510      	push	{r4, lr}
 8007f28:	460c      	mov	r4, r1
 8007f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2e:	f000 f8dd 	bl	80080ec <_lseek_r>
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	bf15      	itete	ne
 8007f38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f42:	81a3      	strheq	r3, [r4, #12]
 8007f44:	bf18      	it	ne
 8007f46:	81a3      	strhne	r3, [r4, #12]
 8007f48:	bd10      	pop	{r4, pc}

08007f4a <__sclose>:
 8007f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4e:	f000 b8bd 	b.w	80080cc <_close_r>

08007f52 <memmove>:
 8007f52:	4288      	cmp	r0, r1
 8007f54:	b510      	push	{r4, lr}
 8007f56:	eb01 0402 	add.w	r4, r1, r2
 8007f5a:	d902      	bls.n	8007f62 <memmove+0x10>
 8007f5c:	4284      	cmp	r4, r0
 8007f5e:	4623      	mov	r3, r4
 8007f60:	d807      	bhi.n	8007f72 <memmove+0x20>
 8007f62:	1e43      	subs	r3, r0, #1
 8007f64:	42a1      	cmp	r1, r4
 8007f66:	d008      	beq.n	8007f7a <memmove+0x28>
 8007f68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f70:	e7f8      	b.n	8007f64 <memmove+0x12>
 8007f72:	4601      	mov	r1, r0
 8007f74:	4402      	add	r2, r0
 8007f76:	428a      	cmp	r2, r1
 8007f78:	d100      	bne.n	8007f7c <memmove+0x2a>
 8007f7a:	bd10      	pop	{r4, pc}
 8007f7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f80:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f84:	e7f7      	b.n	8007f76 <memmove+0x24>

08007f86 <memset>:
 8007f86:	4603      	mov	r3, r0
 8007f88:	4402      	add	r2, r0
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d100      	bne.n	8007f90 <memset+0xa>
 8007f8e:	4770      	bx	lr
 8007f90:	f803 1b01 	strb.w	r1, [r3], #1
 8007f94:	e7f9      	b.n	8007f8a <memset+0x4>

08007f96 <strcspn>:
 8007f96:	4603      	mov	r3, r0
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	461e      	mov	r6, r3
 8007f9c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007fa0:	b144      	cbz	r4, 8007fb4 <strcspn+0x1e>
 8007fa2:	1e4a      	subs	r2, r1, #1
 8007fa4:	e001      	b.n	8007faa <strcspn+0x14>
 8007fa6:	42a5      	cmp	r5, r4
 8007fa8:	d004      	beq.n	8007fb4 <strcspn+0x1e>
 8007faa:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007fae:	2d00      	cmp	r5, #0
 8007fb0:	d1f9      	bne.n	8007fa6 <strcspn+0x10>
 8007fb2:	e7f2      	b.n	8007f9a <strcspn+0x4>
 8007fb4:	1a30      	subs	r0, r6, r0
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}

08007fb8 <strncpy>:
 8007fb8:	4603      	mov	r3, r0
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	3901      	subs	r1, #1
 8007fbe:	b132      	cbz	r2, 8007fce <strncpy+0x16>
 8007fc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007fc4:	3a01      	subs	r2, #1
 8007fc6:	f803 4b01 	strb.w	r4, [r3], #1
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	d1f7      	bne.n	8007fbe <strncpy+0x6>
 8007fce:	2100      	movs	r1, #0
 8007fd0:	441a      	add	r2, r3
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d100      	bne.n	8007fd8 <strncpy+0x20>
 8007fd6:	bd10      	pop	{r4, pc}
 8007fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8007fdc:	e7f9      	b.n	8007fd2 <strncpy+0x1a>
	...

08007fe0 <strtok>:
 8007fe0:	4b16      	ldr	r3, [pc, #88]	@ (800803c <strtok+0x5c>)
 8007fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe6:	681f      	ldr	r7, [r3, #0]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007fec:	460e      	mov	r6, r1
 8007fee:	b9ec      	cbnz	r4, 800802c <strtok+0x4c>
 8007ff0:	2050      	movs	r0, #80	@ 0x50
 8007ff2:	f000 ffbd 	bl	8008f70 <malloc>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	6478      	str	r0, [r7, #68]	@ 0x44
 8007ffa:	b920      	cbnz	r0, 8008006 <strtok+0x26>
 8007ffc:	215b      	movs	r1, #91	@ 0x5b
 8007ffe:	4b10      	ldr	r3, [pc, #64]	@ (8008040 <strtok+0x60>)
 8008000:	4810      	ldr	r0, [pc, #64]	@ (8008044 <strtok+0x64>)
 8008002:	f000 f8ff 	bl	8008204 <__assert_func>
 8008006:	e9c0 4400 	strd	r4, r4, [r0]
 800800a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800800e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008012:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008016:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800801a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800801e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008022:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008026:	6184      	str	r4, [r0, #24]
 8008028:	7704      	strb	r4, [r0, #28]
 800802a:	6244      	str	r4, [r0, #36]	@ 0x24
 800802c:	4631      	mov	r1, r6
 800802e:	4628      	mov	r0, r5
 8008030:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008032:	2301      	movs	r3, #1
 8008034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	f000 b806 	b.w	8008048 <__strtok_r>
 800803c:	20000040 	.word	0x20000040
 8008040:	0800e884 	.word	0x0800e884
 8008044:	0800e89b 	.word	0x0800e89b

08008048 <__strtok_r>:
 8008048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800804a:	4604      	mov	r4, r0
 800804c:	b908      	cbnz	r0, 8008052 <__strtok_r+0xa>
 800804e:	6814      	ldr	r4, [r2, #0]
 8008050:	b144      	cbz	r4, 8008064 <__strtok_r+0x1c>
 8008052:	460f      	mov	r7, r1
 8008054:	4620      	mov	r0, r4
 8008056:	f814 5b01 	ldrb.w	r5, [r4], #1
 800805a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800805e:	b91e      	cbnz	r6, 8008068 <__strtok_r+0x20>
 8008060:	b965      	cbnz	r5, 800807c <__strtok_r+0x34>
 8008062:	6015      	str	r5, [r2, #0]
 8008064:	2000      	movs	r0, #0
 8008066:	e005      	b.n	8008074 <__strtok_r+0x2c>
 8008068:	42b5      	cmp	r5, r6
 800806a:	d1f6      	bne.n	800805a <__strtok_r+0x12>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1f0      	bne.n	8008052 <__strtok_r+0xa>
 8008070:	6014      	str	r4, [r2, #0]
 8008072:	7003      	strb	r3, [r0, #0]
 8008074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008076:	461c      	mov	r4, r3
 8008078:	e00c      	b.n	8008094 <__strtok_r+0x4c>
 800807a:	b915      	cbnz	r5, 8008082 <__strtok_r+0x3a>
 800807c:	460e      	mov	r6, r1
 800807e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008082:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008086:	42ab      	cmp	r3, r5
 8008088:	d1f7      	bne.n	800807a <__strtok_r+0x32>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0f3      	beq.n	8008076 <__strtok_r+0x2e>
 800808e:	2300      	movs	r3, #0
 8008090:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008094:	6014      	str	r4, [r2, #0]
 8008096:	e7ed      	b.n	8008074 <__strtok_r+0x2c>

08008098 <strstr>:
 8008098:	780a      	ldrb	r2, [r1, #0]
 800809a:	b570      	push	{r4, r5, r6, lr}
 800809c:	b96a      	cbnz	r2, 80080ba <strstr+0x22>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d109      	bne.n	80080b8 <strstr+0x20>
 80080a4:	460c      	mov	r4, r1
 80080a6:	4605      	mov	r5, r0
 80080a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0f6      	beq.n	800809e <strstr+0x6>
 80080b0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80080b4:	429e      	cmp	r6, r3
 80080b6:	d0f7      	beq.n	80080a8 <strstr+0x10>
 80080b8:	3001      	adds	r0, #1
 80080ba:	7803      	ldrb	r3, [r0, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1ef      	bne.n	80080a0 <strstr+0x8>
 80080c0:	4618      	mov	r0, r3
 80080c2:	e7ec      	b.n	800809e <strstr+0x6>

080080c4 <_localeconv_r>:
 80080c4:	4800      	ldr	r0, [pc, #0]	@ (80080c8 <_localeconv_r+0x4>)
 80080c6:	4770      	bx	lr
 80080c8:	20000180 	.word	0x20000180

080080cc <_close_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	2300      	movs	r3, #0
 80080d0:	4d05      	ldr	r5, [pc, #20]	@ (80080e8 <_close_r+0x1c>)
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	602b      	str	r3, [r5, #0]
 80080d8:	f7fa fcb5 	bl	8002a46 <_close>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_close_r+0x1a>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_close_r+0x1a>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	20000a90 	.word	0x20000a90

080080ec <_lseek_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	2200      	movs	r2, #0
 80080f6:	4d05      	ldr	r5, [pc, #20]	@ (800810c <_lseek_r+0x20>)
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f7fa fcc7 	bl	8002a8e <_lseek>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_lseek_r+0x1e>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_lseek_r+0x1e>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	20000a90 	.word	0x20000a90

08008110 <_read_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4604      	mov	r4, r0
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	2200      	movs	r2, #0
 800811a:	4d05      	ldr	r5, [pc, #20]	@ (8008130 <_read_r+0x20>)
 800811c:	602a      	str	r2, [r5, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	f7fa fc58 	bl	80029d4 <_read>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_read_r+0x1e>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_read_r+0x1e>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	20000a90 	.word	0x20000a90

08008134 <_write_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	4611      	mov	r1, r2
 800813c:	2200      	movs	r2, #0
 800813e:	4d05      	ldr	r5, [pc, #20]	@ (8008154 <_write_r+0x20>)
 8008140:	602a      	str	r2, [r5, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	f7fa fc63 	bl	8002a0e <_write>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d102      	bne.n	8008152 <_write_r+0x1e>
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	b103      	cbz	r3, 8008152 <_write_r+0x1e>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	20000a90 	.word	0x20000a90

08008158 <__errno>:
 8008158:	4b01      	ldr	r3, [pc, #4]	@ (8008160 <__errno+0x8>)
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	20000040 	.word	0x20000040

08008164 <__libc_init_array>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	2600      	movs	r6, #0
 8008168:	4d0c      	ldr	r5, [pc, #48]	@ (800819c <__libc_init_array+0x38>)
 800816a:	4c0d      	ldr	r4, [pc, #52]	@ (80081a0 <__libc_init_array+0x3c>)
 800816c:	1b64      	subs	r4, r4, r5
 800816e:	10a4      	asrs	r4, r4, #2
 8008170:	42a6      	cmp	r6, r4
 8008172:	d109      	bne.n	8008188 <__libc_init_array+0x24>
 8008174:	f003 fada 	bl	800b72c <_init>
 8008178:	2600      	movs	r6, #0
 800817a:	4d0a      	ldr	r5, [pc, #40]	@ (80081a4 <__libc_init_array+0x40>)
 800817c:	4c0a      	ldr	r4, [pc, #40]	@ (80081a8 <__libc_init_array+0x44>)
 800817e:	1b64      	subs	r4, r4, r5
 8008180:	10a4      	asrs	r4, r4, #2
 8008182:	42a6      	cmp	r6, r4
 8008184:	d105      	bne.n	8008192 <__libc_init_array+0x2e>
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	f855 3b04 	ldr.w	r3, [r5], #4
 800818c:	4798      	blx	r3
 800818e:	3601      	adds	r6, #1
 8008190:	e7ee      	b.n	8008170 <__libc_init_array+0xc>
 8008192:	f855 3b04 	ldr.w	r3, [r5], #4
 8008196:	4798      	blx	r3
 8008198:	3601      	adds	r6, #1
 800819a:	e7f2      	b.n	8008182 <__libc_init_array+0x1e>
 800819c:	0800ebdc 	.word	0x0800ebdc
 80081a0:	0800ebdc 	.word	0x0800ebdc
 80081a4:	0800ebdc 	.word	0x0800ebdc
 80081a8:	0800ebe0 	.word	0x0800ebe0

080081ac <__retarget_lock_init_recursive>:
 80081ac:	4770      	bx	lr

080081ae <__retarget_lock_acquire_recursive>:
 80081ae:	4770      	bx	lr

080081b0 <__retarget_lock_release_recursive>:
 80081b0:	4770      	bx	lr

080081b2 <strcpy>:
 80081b2:	4603      	mov	r3, r0
 80081b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081b8:	f803 2b01 	strb.w	r2, [r3], #1
 80081bc:	2a00      	cmp	r2, #0
 80081be:	d1f9      	bne.n	80081b4 <strcpy+0x2>
 80081c0:	4770      	bx	lr

080081c2 <memchr>:
 80081c2:	4603      	mov	r3, r0
 80081c4:	b510      	push	{r4, lr}
 80081c6:	b2c9      	uxtb	r1, r1
 80081c8:	4402      	add	r2, r0
 80081ca:	4293      	cmp	r3, r2
 80081cc:	4618      	mov	r0, r3
 80081ce:	d101      	bne.n	80081d4 <memchr+0x12>
 80081d0:	2000      	movs	r0, #0
 80081d2:	e003      	b.n	80081dc <memchr+0x1a>
 80081d4:	7804      	ldrb	r4, [r0, #0]
 80081d6:	3301      	adds	r3, #1
 80081d8:	428c      	cmp	r4, r1
 80081da:	d1f6      	bne.n	80081ca <memchr+0x8>
 80081dc:	bd10      	pop	{r4, pc}

080081de <memcpy>:
 80081de:	440a      	add	r2, r1
 80081e0:	4291      	cmp	r1, r2
 80081e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80081e6:	d100      	bne.n	80081ea <memcpy+0xc>
 80081e8:	4770      	bx	lr
 80081ea:	b510      	push	{r4, lr}
 80081ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081f0:	4291      	cmp	r1, r2
 80081f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f6:	d1f9      	bne.n	80081ec <memcpy+0xe>
 80081f8:	bd10      	pop	{r4, pc}
	...

080081fc <nanf>:
 80081fc:	4800      	ldr	r0, [pc, #0]	@ (8008200 <nanf+0x4>)
 80081fe:	4770      	bx	lr
 8008200:	7fc00000 	.word	0x7fc00000

08008204 <__assert_func>:
 8008204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008206:	4614      	mov	r4, r2
 8008208:	461a      	mov	r2, r3
 800820a:	4b09      	ldr	r3, [pc, #36]	@ (8008230 <__assert_func+0x2c>)
 800820c:	4605      	mov	r5, r0
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68d8      	ldr	r0, [r3, #12]
 8008212:	b954      	cbnz	r4, 800822a <__assert_func+0x26>
 8008214:	4b07      	ldr	r3, [pc, #28]	@ (8008234 <__assert_func+0x30>)
 8008216:	461c      	mov	r4, r3
 8008218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800821c:	9100      	str	r1, [sp, #0]
 800821e:	462b      	mov	r3, r5
 8008220:	4905      	ldr	r1, [pc, #20]	@ (8008238 <__assert_func+0x34>)
 8008222:	f002 fc03 	bl	800aa2c <fiprintf>
 8008226:	f002 fc3b 	bl	800aaa0 <abort>
 800822a:	4b04      	ldr	r3, [pc, #16]	@ (800823c <__assert_func+0x38>)
 800822c:	e7f4      	b.n	8008218 <__assert_func+0x14>
 800822e:	bf00      	nop
 8008230:	20000040 	.word	0x20000040
 8008234:	0800e930 	.word	0x0800e930
 8008238:	0800e902 	.word	0x0800e902
 800823c:	0800e8f5 	.word	0x0800e8f5

08008240 <quorem>:
 8008240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	6903      	ldr	r3, [r0, #16]
 8008246:	690c      	ldr	r4, [r1, #16]
 8008248:	4607      	mov	r7, r0
 800824a:	42a3      	cmp	r3, r4
 800824c:	db7e      	blt.n	800834c <quorem+0x10c>
 800824e:	3c01      	subs	r4, #1
 8008250:	00a3      	lsls	r3, r4, #2
 8008252:	f100 0514 	add.w	r5, r0, #20
 8008256:	f101 0814 	add.w	r8, r1, #20
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008266:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800826a:	3301      	adds	r3, #1
 800826c:	429a      	cmp	r2, r3
 800826e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008272:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008276:	d32e      	bcc.n	80082d6 <quorem+0x96>
 8008278:	f04f 0a00 	mov.w	sl, #0
 800827c:	46c4      	mov	ip, r8
 800827e:	46ae      	mov	lr, r5
 8008280:	46d3      	mov	fp, sl
 8008282:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008286:	b298      	uxth	r0, r3
 8008288:	fb06 a000 	mla	r0, r6, r0, sl
 800828c:	0c1b      	lsrs	r3, r3, #16
 800828e:	0c02      	lsrs	r2, r0, #16
 8008290:	fb06 2303 	mla	r3, r6, r3, r2
 8008294:	f8de 2000 	ldr.w	r2, [lr]
 8008298:	b280      	uxth	r0, r0
 800829a:	b292      	uxth	r2, r2
 800829c:	1a12      	subs	r2, r2, r0
 800829e:	445a      	add	r2, fp
 80082a0:	f8de 0000 	ldr.w	r0, [lr]
 80082a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80082ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082b2:	b292      	uxth	r2, r2
 80082b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082b8:	45e1      	cmp	r9, ip
 80082ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082be:	f84e 2b04 	str.w	r2, [lr], #4
 80082c2:	d2de      	bcs.n	8008282 <quorem+0x42>
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	58eb      	ldr	r3, [r5, r3]
 80082c8:	b92b      	cbnz	r3, 80082d6 <quorem+0x96>
 80082ca:	9b01      	ldr	r3, [sp, #4]
 80082cc:	3b04      	subs	r3, #4
 80082ce:	429d      	cmp	r5, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	d32f      	bcc.n	8008334 <quorem+0xf4>
 80082d4:	613c      	str	r4, [r7, #16]
 80082d6:	4638      	mov	r0, r7
 80082d8:	f001 f9c2 	bl	8009660 <__mcmp>
 80082dc:	2800      	cmp	r0, #0
 80082de:	db25      	blt.n	800832c <quorem+0xec>
 80082e0:	4629      	mov	r1, r5
 80082e2:	2000      	movs	r0, #0
 80082e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80082e8:	f8d1 c000 	ldr.w	ip, [r1]
 80082ec:	fa1f fe82 	uxth.w	lr, r2
 80082f0:	fa1f f38c 	uxth.w	r3, ip
 80082f4:	eba3 030e 	sub.w	r3, r3, lr
 80082f8:	4403      	add	r3, r0
 80082fa:	0c12      	lsrs	r2, r2, #16
 80082fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008300:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008304:	b29b      	uxth	r3, r3
 8008306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800830a:	45c1      	cmp	r9, r8
 800830c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008310:	f841 3b04 	str.w	r3, [r1], #4
 8008314:	d2e6      	bcs.n	80082e4 <quorem+0xa4>
 8008316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800831a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800831e:	b922      	cbnz	r2, 800832a <quorem+0xea>
 8008320:	3b04      	subs	r3, #4
 8008322:	429d      	cmp	r5, r3
 8008324:	461a      	mov	r2, r3
 8008326:	d30b      	bcc.n	8008340 <quorem+0x100>
 8008328:	613c      	str	r4, [r7, #16]
 800832a:	3601      	adds	r6, #1
 800832c:	4630      	mov	r0, r6
 800832e:	b003      	add	sp, #12
 8008330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	6812      	ldr	r2, [r2, #0]
 8008336:	3b04      	subs	r3, #4
 8008338:	2a00      	cmp	r2, #0
 800833a:	d1cb      	bne.n	80082d4 <quorem+0x94>
 800833c:	3c01      	subs	r4, #1
 800833e:	e7c6      	b.n	80082ce <quorem+0x8e>
 8008340:	6812      	ldr	r2, [r2, #0]
 8008342:	3b04      	subs	r3, #4
 8008344:	2a00      	cmp	r2, #0
 8008346:	d1ef      	bne.n	8008328 <quorem+0xe8>
 8008348:	3c01      	subs	r4, #1
 800834a:	e7ea      	b.n	8008322 <quorem+0xe2>
 800834c:	2000      	movs	r0, #0
 800834e:	e7ee      	b.n	800832e <quorem+0xee>

08008350 <_dtoa_r>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	4614      	mov	r4, r2
 8008356:	461d      	mov	r5, r3
 8008358:	69c7      	ldr	r7, [r0, #28]
 800835a:	b097      	sub	sp, #92	@ 0x5c
 800835c:	4683      	mov	fp, r0
 800835e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008362:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008364:	b97f      	cbnz	r7, 8008386 <_dtoa_r+0x36>
 8008366:	2010      	movs	r0, #16
 8008368:	f000 fe02 	bl	8008f70 <malloc>
 800836c:	4602      	mov	r2, r0
 800836e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008372:	b920      	cbnz	r0, 800837e <_dtoa_r+0x2e>
 8008374:	21ef      	movs	r1, #239	@ 0xef
 8008376:	4ba8      	ldr	r3, [pc, #672]	@ (8008618 <_dtoa_r+0x2c8>)
 8008378:	48a8      	ldr	r0, [pc, #672]	@ (800861c <_dtoa_r+0x2cc>)
 800837a:	f7ff ff43 	bl	8008204 <__assert_func>
 800837e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008382:	6007      	str	r7, [r0, #0]
 8008384:	60c7      	str	r7, [r0, #12]
 8008386:	f8db 301c 	ldr.w	r3, [fp, #28]
 800838a:	6819      	ldr	r1, [r3, #0]
 800838c:	b159      	cbz	r1, 80083a6 <_dtoa_r+0x56>
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	2301      	movs	r3, #1
 8008392:	4093      	lsls	r3, r2
 8008394:	604a      	str	r2, [r1, #4]
 8008396:	608b      	str	r3, [r1, #8]
 8008398:	4658      	mov	r0, fp
 800839a:	f000 fedf 	bl	800915c <_Bfree>
 800839e:	2200      	movs	r2, #0
 80083a0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	1e2b      	subs	r3, r5, #0
 80083a8:	bfaf      	iteee	ge
 80083aa:	2300      	movge	r3, #0
 80083ac:	2201      	movlt	r2, #1
 80083ae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083b2:	9303      	strlt	r3, [sp, #12]
 80083b4:	bfa8      	it	ge
 80083b6:	6033      	strge	r3, [r6, #0]
 80083b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80083bc:	4b98      	ldr	r3, [pc, #608]	@ (8008620 <_dtoa_r+0x2d0>)
 80083be:	bfb8      	it	lt
 80083c0:	6032      	strlt	r2, [r6, #0]
 80083c2:	ea33 0308 	bics.w	r3, r3, r8
 80083c6:	d112      	bne.n	80083ee <_dtoa_r+0x9e>
 80083c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80083d4:	4323      	orrs	r3, r4
 80083d6:	f000 8550 	beq.w	8008e7a <_dtoa_r+0xb2a>
 80083da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80083dc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008624 <_dtoa_r+0x2d4>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 8552 	beq.w	8008e8a <_dtoa_r+0xb3a>
 80083e6:	f10a 0303 	add.w	r3, sl, #3
 80083ea:	f000 bd4c 	b.w	8008e86 <_dtoa_r+0xb36>
 80083ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80083f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083fa:	2200      	movs	r2, #0
 80083fc:	2300      	movs	r3, #0
 80083fe:	f7f8 fb87 	bl	8000b10 <__aeabi_dcmpeq>
 8008402:	4607      	mov	r7, r0
 8008404:	b158      	cbz	r0, 800841e <_dtoa_r+0xce>
 8008406:	2301      	movs	r3, #1
 8008408:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800840e:	b113      	cbz	r3, 8008416 <_dtoa_r+0xc6>
 8008410:	4b85      	ldr	r3, [pc, #532]	@ (8008628 <_dtoa_r+0x2d8>)
 8008412:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800862c <_dtoa_r+0x2dc>
 800841a:	f000 bd36 	b.w	8008e8a <_dtoa_r+0xb3a>
 800841e:	ab14      	add	r3, sp, #80	@ 0x50
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	ab15      	add	r3, sp, #84	@ 0x54
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	4658      	mov	r0, fp
 8008428:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800842c:	f001 fa30 	bl	8009890 <__d2b>
 8008430:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008434:	4681      	mov	r9, r0
 8008436:	2e00      	cmp	r6, #0
 8008438:	d077      	beq.n	800852a <_dtoa_r+0x1da>
 800843a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800843e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008440:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008448:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800844c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008450:	9712      	str	r7, [sp, #72]	@ 0x48
 8008452:	4619      	mov	r1, r3
 8008454:	2200      	movs	r2, #0
 8008456:	4b76      	ldr	r3, [pc, #472]	@ (8008630 <_dtoa_r+0x2e0>)
 8008458:	f7f7 ff3a 	bl	80002d0 <__aeabi_dsub>
 800845c:	a368      	add	r3, pc, #416	@ (adr r3, 8008600 <_dtoa_r+0x2b0>)
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	f7f8 f8ed 	bl	8000640 <__aeabi_dmul>
 8008466:	a368      	add	r3, pc, #416	@ (adr r3, 8008608 <_dtoa_r+0x2b8>)
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	f7f7 ff32 	bl	80002d4 <__adddf3>
 8008470:	4604      	mov	r4, r0
 8008472:	4630      	mov	r0, r6
 8008474:	460d      	mov	r5, r1
 8008476:	f7f8 f879 	bl	800056c <__aeabi_i2d>
 800847a:	a365      	add	r3, pc, #404	@ (adr r3, 8008610 <_dtoa_r+0x2c0>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f7f8 f8de 	bl	8000640 <__aeabi_dmul>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4620      	mov	r0, r4
 800848a:	4629      	mov	r1, r5
 800848c:	f7f7 ff22 	bl	80002d4 <__adddf3>
 8008490:	4604      	mov	r4, r0
 8008492:	460d      	mov	r5, r1
 8008494:	f7f8 fb84 	bl	8000ba0 <__aeabi_d2iz>
 8008498:	2200      	movs	r2, #0
 800849a:	4607      	mov	r7, r0
 800849c:	2300      	movs	r3, #0
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	f7f8 fb3f 	bl	8000b24 <__aeabi_dcmplt>
 80084a6:	b140      	cbz	r0, 80084ba <_dtoa_r+0x16a>
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7f8 f85f 	bl	800056c <__aeabi_i2d>
 80084ae:	4622      	mov	r2, r4
 80084b0:	462b      	mov	r3, r5
 80084b2:	f7f8 fb2d 	bl	8000b10 <__aeabi_dcmpeq>
 80084b6:	b900      	cbnz	r0, 80084ba <_dtoa_r+0x16a>
 80084b8:	3f01      	subs	r7, #1
 80084ba:	2f16      	cmp	r7, #22
 80084bc:	d853      	bhi.n	8008566 <_dtoa_r+0x216>
 80084be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084c2:	4b5c      	ldr	r3, [pc, #368]	@ (8008634 <_dtoa_r+0x2e4>)
 80084c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084cc:	f7f8 fb2a 	bl	8000b24 <__aeabi_dcmplt>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d04a      	beq.n	800856a <_dtoa_r+0x21a>
 80084d4:	2300      	movs	r3, #0
 80084d6:	3f01      	subs	r7, #1
 80084d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80084da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084dc:	1b9b      	subs	r3, r3, r6
 80084de:	1e5a      	subs	r2, r3, #1
 80084e0:	bf46      	itte	mi
 80084e2:	f1c3 0801 	rsbmi	r8, r3, #1
 80084e6:	2300      	movmi	r3, #0
 80084e8:	f04f 0800 	movpl.w	r8, #0
 80084ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80084ee:	bf48      	it	mi
 80084f0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80084f2:	2f00      	cmp	r7, #0
 80084f4:	db3b      	blt.n	800856e <_dtoa_r+0x21e>
 80084f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f8:	970e      	str	r7, [sp, #56]	@ 0x38
 80084fa:	443b      	add	r3, r7
 80084fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80084fe:	2300      	movs	r3, #0
 8008500:	930a      	str	r3, [sp, #40]	@ 0x28
 8008502:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008504:	2b09      	cmp	r3, #9
 8008506:	d866      	bhi.n	80085d6 <_dtoa_r+0x286>
 8008508:	2b05      	cmp	r3, #5
 800850a:	bfc4      	itt	gt
 800850c:	3b04      	subgt	r3, #4
 800850e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008510:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008512:	bfc8      	it	gt
 8008514:	2400      	movgt	r4, #0
 8008516:	f1a3 0302 	sub.w	r3, r3, #2
 800851a:	bfd8      	it	le
 800851c:	2401      	movle	r4, #1
 800851e:	2b03      	cmp	r3, #3
 8008520:	d864      	bhi.n	80085ec <_dtoa_r+0x29c>
 8008522:	e8df f003 	tbb	[pc, r3]
 8008526:	382b      	.short	0x382b
 8008528:	5636      	.short	0x5636
 800852a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800852e:	441e      	add	r6, r3
 8008530:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008534:	2b20      	cmp	r3, #32
 8008536:	bfc1      	itttt	gt
 8008538:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800853c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008540:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008544:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008548:	bfd6      	itet	le
 800854a:	f1c3 0320 	rsble	r3, r3, #32
 800854e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008552:	fa04 f003 	lslle.w	r0, r4, r3
 8008556:	f7f7 fff9 	bl	800054c <__aeabi_ui2d>
 800855a:	2201      	movs	r2, #1
 800855c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008560:	3e01      	subs	r6, #1
 8008562:	9212      	str	r2, [sp, #72]	@ 0x48
 8008564:	e775      	b.n	8008452 <_dtoa_r+0x102>
 8008566:	2301      	movs	r3, #1
 8008568:	e7b6      	b.n	80084d8 <_dtoa_r+0x188>
 800856a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800856c:	e7b5      	b.n	80084da <_dtoa_r+0x18a>
 800856e:	427b      	negs	r3, r7
 8008570:	930a      	str	r3, [sp, #40]	@ 0x28
 8008572:	2300      	movs	r3, #0
 8008574:	eba8 0807 	sub.w	r8, r8, r7
 8008578:	930e      	str	r3, [sp, #56]	@ 0x38
 800857a:	e7c2      	b.n	8008502 <_dtoa_r+0x1b2>
 800857c:	2300      	movs	r3, #0
 800857e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008580:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008582:	2b00      	cmp	r3, #0
 8008584:	dc35      	bgt.n	80085f2 <_dtoa_r+0x2a2>
 8008586:	2301      	movs	r3, #1
 8008588:	461a      	mov	r2, r3
 800858a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800858e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008590:	e00b      	b.n	80085aa <_dtoa_r+0x25a>
 8008592:	2301      	movs	r3, #1
 8008594:	e7f3      	b.n	800857e <_dtoa_r+0x22e>
 8008596:	2300      	movs	r3, #0
 8008598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800859a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800859c:	18fb      	adds	r3, r7, r3
 800859e:	9308      	str	r3, [sp, #32]
 80085a0:	3301      	adds	r3, #1
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	9307      	str	r3, [sp, #28]
 80085a6:	bfb8      	it	lt
 80085a8:	2301      	movlt	r3, #1
 80085aa:	2100      	movs	r1, #0
 80085ac:	2204      	movs	r2, #4
 80085ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 80085b2:	f102 0514 	add.w	r5, r2, #20
 80085b6:	429d      	cmp	r5, r3
 80085b8:	d91f      	bls.n	80085fa <_dtoa_r+0x2aa>
 80085ba:	6041      	str	r1, [r0, #4]
 80085bc:	4658      	mov	r0, fp
 80085be:	f000 fd8d 	bl	80090dc <_Balloc>
 80085c2:	4682      	mov	sl, r0
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d139      	bne.n	800863c <_dtoa_r+0x2ec>
 80085c8:	4602      	mov	r2, r0
 80085ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80085ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008638 <_dtoa_r+0x2e8>)
 80085d0:	e6d2      	b.n	8008378 <_dtoa_r+0x28>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e7e0      	b.n	8008598 <_dtoa_r+0x248>
 80085d6:	2401      	movs	r4, #1
 80085d8:	2300      	movs	r3, #0
 80085da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085dc:	9320      	str	r3, [sp, #128]	@ 0x80
 80085de:	f04f 33ff 	mov.w	r3, #4294967295
 80085e2:	2200      	movs	r2, #0
 80085e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80085e8:	2312      	movs	r3, #18
 80085ea:	e7d0      	b.n	800858e <_dtoa_r+0x23e>
 80085ec:	2301      	movs	r3, #1
 80085ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085f0:	e7f5      	b.n	80085de <_dtoa_r+0x28e>
 80085f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80085f8:	e7d7      	b.n	80085aa <_dtoa_r+0x25a>
 80085fa:	3101      	adds	r1, #1
 80085fc:	0052      	lsls	r2, r2, #1
 80085fe:	e7d8      	b.n	80085b2 <_dtoa_r+0x262>
 8008600:	636f4361 	.word	0x636f4361
 8008604:	3fd287a7 	.word	0x3fd287a7
 8008608:	8b60c8b3 	.word	0x8b60c8b3
 800860c:	3fc68a28 	.word	0x3fc68a28
 8008610:	509f79fb 	.word	0x509f79fb
 8008614:	3fd34413 	.word	0x3fd34413
 8008618:	0800e884 	.word	0x0800e884
 800861c:	0800e93e 	.word	0x0800e93e
 8008620:	7ff00000 	.word	0x7ff00000
 8008624:	0800e93a 	.word	0x0800e93a
 8008628:	0800e85c 	.word	0x0800e85c
 800862c:	0800e85b 	.word	0x0800e85b
 8008630:	3ff80000 	.word	0x3ff80000
 8008634:	0800ea38 	.word	0x0800ea38
 8008638:	0800e996 	.word	0x0800e996
 800863c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008640:	6018      	str	r0, [r3, #0]
 8008642:	9b07      	ldr	r3, [sp, #28]
 8008644:	2b0e      	cmp	r3, #14
 8008646:	f200 80a4 	bhi.w	8008792 <_dtoa_r+0x442>
 800864a:	2c00      	cmp	r4, #0
 800864c:	f000 80a1 	beq.w	8008792 <_dtoa_r+0x442>
 8008650:	2f00      	cmp	r7, #0
 8008652:	dd33      	ble.n	80086bc <_dtoa_r+0x36c>
 8008654:	4b86      	ldr	r3, [pc, #536]	@ (8008870 <_dtoa_r+0x520>)
 8008656:	f007 020f 	and.w	r2, r7, #15
 800865a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800865e:	05f8      	lsls	r0, r7, #23
 8008660:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008664:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008668:	ea4f 1427 	mov.w	r4, r7, asr #4
 800866c:	d516      	bpl.n	800869c <_dtoa_r+0x34c>
 800866e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008672:	4b80      	ldr	r3, [pc, #512]	@ (8008874 <_dtoa_r+0x524>)
 8008674:	2603      	movs	r6, #3
 8008676:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800867a:	f7f8 f90b 	bl	8000894 <__aeabi_ddiv>
 800867e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008682:	f004 040f 	and.w	r4, r4, #15
 8008686:	4d7b      	ldr	r5, [pc, #492]	@ (8008874 <_dtoa_r+0x524>)
 8008688:	b954      	cbnz	r4, 80086a0 <_dtoa_r+0x350>
 800868a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800868e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008692:	f7f8 f8ff 	bl	8000894 <__aeabi_ddiv>
 8008696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800869a:	e028      	b.n	80086ee <_dtoa_r+0x39e>
 800869c:	2602      	movs	r6, #2
 800869e:	e7f2      	b.n	8008686 <_dtoa_r+0x336>
 80086a0:	07e1      	lsls	r1, r4, #31
 80086a2:	d508      	bpl.n	80086b6 <_dtoa_r+0x366>
 80086a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086ac:	f7f7 ffc8 	bl	8000640 <__aeabi_dmul>
 80086b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086b4:	3601      	adds	r6, #1
 80086b6:	1064      	asrs	r4, r4, #1
 80086b8:	3508      	adds	r5, #8
 80086ba:	e7e5      	b.n	8008688 <_dtoa_r+0x338>
 80086bc:	f000 80d2 	beq.w	8008864 <_dtoa_r+0x514>
 80086c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086c4:	427c      	negs	r4, r7
 80086c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008870 <_dtoa_r+0x520>)
 80086c8:	f004 020f 	and.w	r2, r4, #15
 80086cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	f7f7 ffb4 	bl	8000640 <__aeabi_dmul>
 80086d8:	2602      	movs	r6, #2
 80086da:	2300      	movs	r3, #0
 80086dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e0:	4d64      	ldr	r5, [pc, #400]	@ (8008874 <_dtoa_r+0x524>)
 80086e2:	1124      	asrs	r4, r4, #4
 80086e4:	2c00      	cmp	r4, #0
 80086e6:	f040 80b2 	bne.w	800884e <_dtoa_r+0x4fe>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1d3      	bne.n	8008696 <_dtoa_r+0x346>
 80086ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80b7 	beq.w	8008868 <_dtoa_r+0x518>
 80086fa:	2200      	movs	r2, #0
 80086fc:	4620      	mov	r0, r4
 80086fe:	4629      	mov	r1, r5
 8008700:	4b5d      	ldr	r3, [pc, #372]	@ (8008878 <_dtoa_r+0x528>)
 8008702:	f7f8 fa0f 	bl	8000b24 <__aeabi_dcmplt>
 8008706:	2800      	cmp	r0, #0
 8008708:	f000 80ae 	beq.w	8008868 <_dtoa_r+0x518>
 800870c:	9b07      	ldr	r3, [sp, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80aa 	beq.w	8008868 <_dtoa_r+0x518>
 8008714:	9b08      	ldr	r3, [sp, #32]
 8008716:	2b00      	cmp	r3, #0
 8008718:	dd37      	ble.n	800878a <_dtoa_r+0x43a>
 800871a:	1e7b      	subs	r3, r7, #1
 800871c:	4620      	mov	r0, r4
 800871e:	9304      	str	r3, [sp, #16]
 8008720:	2200      	movs	r2, #0
 8008722:	4629      	mov	r1, r5
 8008724:	4b55      	ldr	r3, [pc, #340]	@ (800887c <_dtoa_r+0x52c>)
 8008726:	f7f7 ff8b 	bl	8000640 <__aeabi_dmul>
 800872a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800872e:	9c08      	ldr	r4, [sp, #32]
 8008730:	3601      	adds	r6, #1
 8008732:	4630      	mov	r0, r6
 8008734:	f7f7 ff1a 	bl	800056c <__aeabi_i2d>
 8008738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800873c:	f7f7 ff80 	bl	8000640 <__aeabi_dmul>
 8008740:	2200      	movs	r2, #0
 8008742:	4b4f      	ldr	r3, [pc, #316]	@ (8008880 <_dtoa_r+0x530>)
 8008744:	f7f7 fdc6 	bl	80002d4 <__adddf3>
 8008748:	4605      	mov	r5, r0
 800874a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800874e:	2c00      	cmp	r4, #0
 8008750:	f040 809a 	bne.w	8008888 <_dtoa_r+0x538>
 8008754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008758:	2200      	movs	r2, #0
 800875a:	4b4a      	ldr	r3, [pc, #296]	@ (8008884 <_dtoa_r+0x534>)
 800875c:	f7f7 fdb8 	bl	80002d0 <__aeabi_dsub>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008768:	462a      	mov	r2, r5
 800876a:	4633      	mov	r3, r6
 800876c:	f7f8 f9f8 	bl	8000b60 <__aeabi_dcmpgt>
 8008770:	2800      	cmp	r0, #0
 8008772:	f040 828e 	bne.w	8008c92 <_dtoa_r+0x942>
 8008776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800877a:	462a      	mov	r2, r5
 800877c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008780:	f7f8 f9d0 	bl	8000b24 <__aeabi_dcmplt>
 8008784:	2800      	cmp	r0, #0
 8008786:	f040 8127 	bne.w	80089d8 <_dtoa_r+0x688>
 800878a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800878e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008792:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008794:	2b00      	cmp	r3, #0
 8008796:	f2c0 8163 	blt.w	8008a60 <_dtoa_r+0x710>
 800879a:	2f0e      	cmp	r7, #14
 800879c:	f300 8160 	bgt.w	8008a60 <_dtoa_r+0x710>
 80087a0:	4b33      	ldr	r3, [pc, #204]	@ (8008870 <_dtoa_r+0x520>)
 80087a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80087ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da03      	bge.n	80087bc <_dtoa_r+0x46c>
 80087b4:	9b07      	ldr	r3, [sp, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f340 8100 	ble.w	80089bc <_dtoa_r+0x66c>
 80087bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087c0:	4656      	mov	r6, sl
 80087c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087c6:	4620      	mov	r0, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	f7f8 f863 	bl	8000894 <__aeabi_ddiv>
 80087ce:	f7f8 f9e7 	bl	8000ba0 <__aeabi_d2iz>
 80087d2:	4680      	mov	r8, r0
 80087d4:	f7f7 feca 	bl	800056c <__aeabi_i2d>
 80087d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087dc:	f7f7 ff30 	bl	8000640 <__aeabi_dmul>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4620      	mov	r0, r4
 80087e6:	4629      	mov	r1, r5
 80087e8:	f7f7 fd72 	bl	80002d0 <__aeabi_dsub>
 80087ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087f0:	9d07      	ldr	r5, [sp, #28]
 80087f2:	f806 4b01 	strb.w	r4, [r6], #1
 80087f6:	eba6 040a 	sub.w	r4, r6, sl
 80087fa:	42a5      	cmp	r5, r4
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	f040 8116 	bne.w	8008a30 <_dtoa_r+0x6e0>
 8008804:	f7f7 fd66 	bl	80002d4 <__adddf3>
 8008808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800880c:	4604      	mov	r4, r0
 800880e:	460d      	mov	r5, r1
 8008810:	f7f8 f9a6 	bl	8000b60 <__aeabi_dcmpgt>
 8008814:	2800      	cmp	r0, #0
 8008816:	f040 80f8 	bne.w	8008a0a <_dtoa_r+0x6ba>
 800881a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800881e:	4620      	mov	r0, r4
 8008820:	4629      	mov	r1, r5
 8008822:	f7f8 f975 	bl	8000b10 <__aeabi_dcmpeq>
 8008826:	b118      	cbz	r0, 8008830 <_dtoa_r+0x4e0>
 8008828:	f018 0f01 	tst.w	r8, #1
 800882c:	f040 80ed 	bne.w	8008a0a <_dtoa_r+0x6ba>
 8008830:	4649      	mov	r1, r9
 8008832:	4658      	mov	r0, fp
 8008834:	f000 fc92 	bl	800915c <_Bfree>
 8008838:	2300      	movs	r3, #0
 800883a:	7033      	strb	r3, [r6, #0]
 800883c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800883e:	3701      	adds	r7, #1
 8008840:	601f      	str	r7, [r3, #0]
 8008842:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8320 	beq.w	8008e8a <_dtoa_r+0xb3a>
 800884a:	601e      	str	r6, [r3, #0]
 800884c:	e31d      	b.n	8008e8a <_dtoa_r+0xb3a>
 800884e:	07e2      	lsls	r2, r4, #31
 8008850:	d505      	bpl.n	800885e <_dtoa_r+0x50e>
 8008852:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008856:	f7f7 fef3 	bl	8000640 <__aeabi_dmul>
 800885a:	2301      	movs	r3, #1
 800885c:	3601      	adds	r6, #1
 800885e:	1064      	asrs	r4, r4, #1
 8008860:	3508      	adds	r5, #8
 8008862:	e73f      	b.n	80086e4 <_dtoa_r+0x394>
 8008864:	2602      	movs	r6, #2
 8008866:	e742      	b.n	80086ee <_dtoa_r+0x39e>
 8008868:	9c07      	ldr	r4, [sp, #28]
 800886a:	9704      	str	r7, [sp, #16]
 800886c:	e761      	b.n	8008732 <_dtoa_r+0x3e2>
 800886e:	bf00      	nop
 8008870:	0800ea38 	.word	0x0800ea38
 8008874:	0800ea10 	.word	0x0800ea10
 8008878:	3ff00000 	.word	0x3ff00000
 800887c:	40240000 	.word	0x40240000
 8008880:	401c0000 	.word	0x401c0000
 8008884:	40140000 	.word	0x40140000
 8008888:	4b70      	ldr	r3, [pc, #448]	@ (8008a4c <_dtoa_r+0x6fc>)
 800888a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800888c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008890:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008894:	4454      	add	r4, sl
 8008896:	2900      	cmp	r1, #0
 8008898:	d045      	beq.n	8008926 <_dtoa_r+0x5d6>
 800889a:	2000      	movs	r0, #0
 800889c:	496c      	ldr	r1, [pc, #432]	@ (8008a50 <_dtoa_r+0x700>)
 800889e:	f7f7 fff9 	bl	8000894 <__aeabi_ddiv>
 80088a2:	4633      	mov	r3, r6
 80088a4:	462a      	mov	r2, r5
 80088a6:	f7f7 fd13 	bl	80002d0 <__aeabi_dsub>
 80088aa:	4656      	mov	r6, sl
 80088ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088b4:	f7f8 f974 	bl	8000ba0 <__aeabi_d2iz>
 80088b8:	4605      	mov	r5, r0
 80088ba:	f7f7 fe57 	bl	800056c <__aeabi_i2d>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088c6:	f7f7 fd03 	bl	80002d0 <__aeabi_dsub>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	3530      	adds	r5, #48	@ 0x30
 80088d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088d8:	f806 5b01 	strb.w	r5, [r6], #1
 80088dc:	f7f8 f922 	bl	8000b24 <__aeabi_dcmplt>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d163      	bne.n	80089ac <_dtoa_r+0x65c>
 80088e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088e8:	2000      	movs	r0, #0
 80088ea:	495a      	ldr	r1, [pc, #360]	@ (8008a54 <_dtoa_r+0x704>)
 80088ec:	f7f7 fcf0 	bl	80002d0 <__aeabi_dsub>
 80088f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088f4:	f7f8 f916 	bl	8000b24 <__aeabi_dcmplt>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	f040 8087 	bne.w	8008a0c <_dtoa_r+0x6bc>
 80088fe:	42a6      	cmp	r6, r4
 8008900:	f43f af43 	beq.w	800878a <_dtoa_r+0x43a>
 8008904:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008908:	2200      	movs	r2, #0
 800890a:	4b53      	ldr	r3, [pc, #332]	@ (8008a58 <_dtoa_r+0x708>)
 800890c:	f7f7 fe98 	bl	8000640 <__aeabi_dmul>
 8008910:	2200      	movs	r2, #0
 8008912:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800891a:	4b4f      	ldr	r3, [pc, #316]	@ (8008a58 <_dtoa_r+0x708>)
 800891c:	f7f7 fe90 	bl	8000640 <__aeabi_dmul>
 8008920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008924:	e7c4      	b.n	80088b0 <_dtoa_r+0x560>
 8008926:	4631      	mov	r1, r6
 8008928:	4628      	mov	r0, r5
 800892a:	f7f7 fe89 	bl	8000640 <__aeabi_dmul>
 800892e:	4656      	mov	r6, sl
 8008930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008934:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893a:	f7f8 f931 	bl	8000ba0 <__aeabi_d2iz>
 800893e:	4605      	mov	r5, r0
 8008940:	f7f7 fe14 	bl	800056c <__aeabi_i2d>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800894c:	f7f7 fcc0 	bl	80002d0 <__aeabi_dsub>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	3530      	adds	r5, #48	@ 0x30
 8008956:	f806 5b01 	strb.w	r5, [r6], #1
 800895a:	42a6      	cmp	r6, r4
 800895c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	d124      	bne.n	80089b0 <_dtoa_r+0x660>
 8008966:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800896a:	4b39      	ldr	r3, [pc, #228]	@ (8008a50 <_dtoa_r+0x700>)
 800896c:	f7f7 fcb2 	bl	80002d4 <__adddf3>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008978:	f7f8 f8f2 	bl	8000b60 <__aeabi_dcmpgt>
 800897c:	2800      	cmp	r0, #0
 800897e:	d145      	bne.n	8008a0c <_dtoa_r+0x6bc>
 8008980:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008984:	2000      	movs	r0, #0
 8008986:	4932      	ldr	r1, [pc, #200]	@ (8008a50 <_dtoa_r+0x700>)
 8008988:	f7f7 fca2 	bl	80002d0 <__aeabi_dsub>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008994:	f7f8 f8c6 	bl	8000b24 <__aeabi_dcmplt>
 8008998:	2800      	cmp	r0, #0
 800899a:	f43f aef6 	beq.w	800878a <_dtoa_r+0x43a>
 800899e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80089a0:	1e73      	subs	r3, r6, #1
 80089a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089a8:	2b30      	cmp	r3, #48	@ 0x30
 80089aa:	d0f8      	beq.n	800899e <_dtoa_r+0x64e>
 80089ac:	9f04      	ldr	r7, [sp, #16]
 80089ae:	e73f      	b.n	8008830 <_dtoa_r+0x4e0>
 80089b0:	4b29      	ldr	r3, [pc, #164]	@ (8008a58 <_dtoa_r+0x708>)
 80089b2:	f7f7 fe45 	bl	8000640 <__aeabi_dmul>
 80089b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ba:	e7bc      	b.n	8008936 <_dtoa_r+0x5e6>
 80089bc:	d10c      	bne.n	80089d8 <_dtoa_r+0x688>
 80089be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089c2:	2200      	movs	r2, #0
 80089c4:	4b25      	ldr	r3, [pc, #148]	@ (8008a5c <_dtoa_r+0x70c>)
 80089c6:	f7f7 fe3b 	bl	8000640 <__aeabi_dmul>
 80089ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089ce:	f7f8 f8bd 	bl	8000b4c <__aeabi_dcmpge>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f000 815b 	beq.w	8008c8e <_dtoa_r+0x93e>
 80089d8:	2400      	movs	r4, #0
 80089da:	4625      	mov	r5, r4
 80089dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089de:	4656      	mov	r6, sl
 80089e0:	43db      	mvns	r3, r3
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	2700      	movs	r7, #0
 80089e6:	4621      	mov	r1, r4
 80089e8:	4658      	mov	r0, fp
 80089ea:	f000 fbb7 	bl	800915c <_Bfree>
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	d0dc      	beq.n	80089ac <_dtoa_r+0x65c>
 80089f2:	b12f      	cbz	r7, 8008a00 <_dtoa_r+0x6b0>
 80089f4:	42af      	cmp	r7, r5
 80089f6:	d003      	beq.n	8008a00 <_dtoa_r+0x6b0>
 80089f8:	4639      	mov	r1, r7
 80089fa:	4658      	mov	r0, fp
 80089fc:	f000 fbae 	bl	800915c <_Bfree>
 8008a00:	4629      	mov	r1, r5
 8008a02:	4658      	mov	r0, fp
 8008a04:	f000 fbaa 	bl	800915c <_Bfree>
 8008a08:	e7d0      	b.n	80089ac <_dtoa_r+0x65c>
 8008a0a:	9704      	str	r7, [sp, #16]
 8008a0c:	4633      	mov	r3, r6
 8008a0e:	461e      	mov	r6, r3
 8008a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a14:	2a39      	cmp	r2, #57	@ 0x39
 8008a16:	d107      	bne.n	8008a28 <_dtoa_r+0x6d8>
 8008a18:	459a      	cmp	sl, r3
 8008a1a:	d1f8      	bne.n	8008a0e <_dtoa_r+0x6be>
 8008a1c:	9a04      	ldr	r2, [sp, #16]
 8008a1e:	3201      	adds	r2, #1
 8008a20:	9204      	str	r2, [sp, #16]
 8008a22:	2230      	movs	r2, #48	@ 0x30
 8008a24:	f88a 2000 	strb.w	r2, [sl]
 8008a28:	781a      	ldrb	r2, [r3, #0]
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	e7bd      	b.n	80089ac <_dtoa_r+0x65c>
 8008a30:	2200      	movs	r2, #0
 8008a32:	4b09      	ldr	r3, [pc, #36]	@ (8008a58 <_dtoa_r+0x708>)
 8008a34:	f7f7 fe04 	bl	8000640 <__aeabi_dmul>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	460d      	mov	r5, r1
 8008a40:	f7f8 f866 	bl	8000b10 <__aeabi_dcmpeq>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	f43f aebc 	beq.w	80087c2 <_dtoa_r+0x472>
 8008a4a:	e6f1      	b.n	8008830 <_dtoa_r+0x4e0>
 8008a4c:	0800ea38 	.word	0x0800ea38
 8008a50:	3fe00000 	.word	0x3fe00000
 8008a54:	3ff00000 	.word	0x3ff00000
 8008a58:	40240000 	.word	0x40240000
 8008a5c:	40140000 	.word	0x40140000
 8008a60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	f000 80db 	beq.w	8008c1e <_dtoa_r+0x8ce>
 8008a68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008a6a:	2a01      	cmp	r2, #1
 8008a6c:	f300 80bf 	bgt.w	8008bee <_dtoa_r+0x89e>
 8008a70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008a72:	2a00      	cmp	r2, #0
 8008a74:	f000 80b7 	beq.w	8008be6 <_dtoa_r+0x896>
 8008a78:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a7c:	4646      	mov	r6, r8
 8008a7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a82:	2101      	movs	r1, #1
 8008a84:	441a      	add	r2, r3
 8008a86:	4658      	mov	r0, fp
 8008a88:	4498      	add	r8, r3
 8008a8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a8c:	f000 fc64 	bl	8009358 <__i2b>
 8008a90:	4605      	mov	r5, r0
 8008a92:	b15e      	cbz	r6, 8008aac <_dtoa_r+0x75c>
 8008a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dd08      	ble.n	8008aac <_dtoa_r+0x75c>
 8008a9a:	42b3      	cmp	r3, r6
 8008a9c:	bfa8      	it	ge
 8008a9e:	4633      	movge	r3, r6
 8008aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aa2:	eba8 0803 	sub.w	r8, r8, r3
 8008aa6:	1af6      	subs	r6, r6, r3
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aae:	b1f3      	cbz	r3, 8008aee <_dtoa_r+0x79e>
 8008ab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 80b7 	beq.w	8008c26 <_dtoa_r+0x8d6>
 8008ab8:	b18c      	cbz	r4, 8008ade <_dtoa_r+0x78e>
 8008aba:	4629      	mov	r1, r5
 8008abc:	4622      	mov	r2, r4
 8008abe:	4658      	mov	r0, fp
 8008ac0:	f000 fd08 	bl	80094d4 <__pow5mult>
 8008ac4:	464a      	mov	r2, r9
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	4605      	mov	r5, r0
 8008aca:	4658      	mov	r0, fp
 8008acc:	f000 fc5a 	bl	8009384 <__multiply>
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	9004      	str	r0, [sp, #16]
 8008ad4:	4658      	mov	r0, fp
 8008ad6:	f000 fb41 	bl	800915c <_Bfree>
 8008ada:	9b04      	ldr	r3, [sp, #16]
 8008adc:	4699      	mov	r9, r3
 8008ade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ae0:	1b1a      	subs	r2, r3, r4
 8008ae2:	d004      	beq.n	8008aee <_dtoa_r+0x79e>
 8008ae4:	4649      	mov	r1, r9
 8008ae6:	4658      	mov	r0, fp
 8008ae8:	f000 fcf4 	bl	80094d4 <__pow5mult>
 8008aec:	4681      	mov	r9, r0
 8008aee:	2101      	movs	r1, #1
 8008af0:	4658      	mov	r0, fp
 8008af2:	f000 fc31 	bl	8009358 <__i2b>
 8008af6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008af8:	4604      	mov	r4, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 81c9 	beq.w	8008e92 <_dtoa_r+0xb42>
 8008b00:	461a      	mov	r2, r3
 8008b02:	4601      	mov	r1, r0
 8008b04:	4658      	mov	r0, fp
 8008b06:	f000 fce5 	bl	80094d4 <__pow5mult>
 8008b0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	f300 808f 	bgt.w	8008c32 <_dtoa_r+0x8e2>
 8008b14:	9b02      	ldr	r3, [sp, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f040 8087 	bne.w	8008c2a <_dtoa_r+0x8da>
 8008b1c:	9b03      	ldr	r3, [sp, #12]
 8008b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f040 8083 	bne.w	8008c2e <_dtoa_r+0x8de>
 8008b28:	9b03      	ldr	r3, [sp, #12]
 8008b2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b2e:	0d1b      	lsrs	r3, r3, #20
 8008b30:	051b      	lsls	r3, r3, #20
 8008b32:	b12b      	cbz	r3, 8008b40 <_dtoa_r+0x7f0>
 8008b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b36:	f108 0801 	add.w	r8, r8, #1
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b3e:	2301      	movs	r3, #1
 8008b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 81aa 	beq.w	8008e9e <_dtoa_r+0xb4e>
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b50:	6918      	ldr	r0, [r3, #16]
 8008b52:	f000 fbb5 	bl	80092c0 <__hi0bits>
 8008b56:	f1c0 0020 	rsb	r0, r0, #32
 8008b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5c:	4418      	add	r0, r3
 8008b5e:	f010 001f 	ands.w	r0, r0, #31
 8008b62:	d071      	beq.n	8008c48 <_dtoa_r+0x8f8>
 8008b64:	f1c0 0320 	rsb	r3, r0, #32
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	dd65      	ble.n	8008c38 <_dtoa_r+0x8e8>
 8008b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b6e:	f1c0 001c 	rsb	r0, r0, #28
 8008b72:	4403      	add	r3, r0
 8008b74:	4480      	add	r8, r0
 8008b76:	4406      	add	r6, r0
 8008b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7a:	f1b8 0f00 	cmp.w	r8, #0
 8008b7e:	dd05      	ble.n	8008b8c <_dtoa_r+0x83c>
 8008b80:	4649      	mov	r1, r9
 8008b82:	4642      	mov	r2, r8
 8008b84:	4658      	mov	r0, fp
 8008b86:	f000 fcff 	bl	8009588 <__lshift>
 8008b8a:	4681      	mov	r9, r0
 8008b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dd05      	ble.n	8008b9e <_dtoa_r+0x84e>
 8008b92:	4621      	mov	r1, r4
 8008b94:	461a      	mov	r2, r3
 8008b96:	4658      	mov	r0, fp
 8008b98:	f000 fcf6 	bl	8009588 <__lshift>
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d053      	beq.n	8008c4c <_dtoa_r+0x8fc>
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	4648      	mov	r0, r9
 8008ba8:	f000 fd5a 	bl	8009660 <__mcmp>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	da4d      	bge.n	8008c4c <_dtoa_r+0x8fc>
 8008bb0:	1e7b      	subs	r3, r7, #1
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	220a      	movs	r2, #10
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4658      	mov	r0, fp
 8008bbc:	f000 faf0 	bl	80091a0 <__multadd>
 8008bc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bc2:	4681      	mov	r9, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 816c 	beq.w	8008ea2 <_dtoa_r+0xb52>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	4629      	mov	r1, r5
 8008bce:	220a      	movs	r2, #10
 8008bd0:	4658      	mov	r0, fp
 8008bd2:	f000 fae5 	bl	80091a0 <__multadd>
 8008bd6:	9b08      	ldr	r3, [sp, #32]
 8008bd8:	4605      	mov	r5, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	dc61      	bgt.n	8008ca2 <_dtoa_r+0x952>
 8008bde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	dc3b      	bgt.n	8008c5c <_dtoa_r+0x90c>
 8008be4:	e05d      	b.n	8008ca2 <_dtoa_r+0x952>
 8008be6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008be8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008bec:	e746      	b.n	8008a7c <_dtoa_r+0x72c>
 8008bee:	9b07      	ldr	r3, [sp, #28]
 8008bf0:	1e5c      	subs	r4, r3, #1
 8008bf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	bfbf      	itttt	lt
 8008bf8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008bfa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008bfc:	1ae3      	sublt	r3, r4, r3
 8008bfe:	18d2      	addlt	r2, r2, r3
 8008c00:	bfa8      	it	ge
 8008c02:	1b1c      	subge	r4, r3, r4
 8008c04:	9b07      	ldr	r3, [sp, #28]
 8008c06:	bfbe      	ittt	lt
 8008c08:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008c0a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008c0c:	2400      	movlt	r4, #0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bfb5      	itete	lt
 8008c12:	eba8 0603 	sublt.w	r6, r8, r3
 8008c16:	4646      	movge	r6, r8
 8008c18:	2300      	movlt	r3, #0
 8008c1a:	9b07      	ldrge	r3, [sp, #28]
 8008c1c:	e730      	b.n	8008a80 <_dtoa_r+0x730>
 8008c1e:	4646      	mov	r6, r8
 8008c20:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c22:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008c24:	e735      	b.n	8008a92 <_dtoa_r+0x742>
 8008c26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c28:	e75c      	b.n	8008ae4 <_dtoa_r+0x794>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e788      	b.n	8008b40 <_dtoa_r+0x7f0>
 8008c2e:	9b02      	ldr	r3, [sp, #8]
 8008c30:	e786      	b.n	8008b40 <_dtoa_r+0x7f0>
 8008c32:	2300      	movs	r3, #0
 8008c34:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c36:	e788      	b.n	8008b4a <_dtoa_r+0x7fa>
 8008c38:	d09f      	beq.n	8008b7a <_dtoa_r+0x82a>
 8008c3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c3c:	331c      	adds	r3, #28
 8008c3e:	441a      	add	r2, r3
 8008c40:	4498      	add	r8, r3
 8008c42:	441e      	add	r6, r3
 8008c44:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c46:	e798      	b.n	8008b7a <_dtoa_r+0x82a>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	e7f6      	b.n	8008c3a <_dtoa_r+0x8ea>
 8008c4c:	9b07      	ldr	r3, [sp, #28]
 8008c4e:	9704      	str	r7, [sp, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dc20      	bgt.n	8008c96 <_dtoa_r+0x946>
 8008c54:	9308      	str	r3, [sp, #32]
 8008c56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	dd1e      	ble.n	8008c9a <_dtoa_r+0x94a>
 8008c5c:	9b08      	ldr	r3, [sp, #32]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f47f aebc 	bne.w	80089dc <_dtoa_r+0x68c>
 8008c64:	4621      	mov	r1, r4
 8008c66:	2205      	movs	r2, #5
 8008c68:	4658      	mov	r0, fp
 8008c6a:	f000 fa99 	bl	80091a0 <__multadd>
 8008c6e:	4601      	mov	r1, r0
 8008c70:	4604      	mov	r4, r0
 8008c72:	4648      	mov	r0, r9
 8008c74:	f000 fcf4 	bl	8009660 <__mcmp>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	f77f aeaf 	ble.w	80089dc <_dtoa_r+0x68c>
 8008c7e:	2331      	movs	r3, #49	@ 0x31
 8008c80:	4656      	mov	r6, sl
 8008c82:	f806 3b01 	strb.w	r3, [r6], #1
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	e6aa      	b.n	80089e4 <_dtoa_r+0x694>
 8008c8e:	9c07      	ldr	r4, [sp, #28]
 8008c90:	9704      	str	r7, [sp, #16]
 8008c92:	4625      	mov	r5, r4
 8008c94:	e7f3      	b.n	8008c7e <_dtoa_r+0x92e>
 8008c96:	9b07      	ldr	r3, [sp, #28]
 8008c98:	9308      	str	r3, [sp, #32]
 8008c9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 8104 	beq.w	8008eaa <_dtoa_r+0xb5a>
 8008ca2:	2e00      	cmp	r6, #0
 8008ca4:	dd05      	ble.n	8008cb2 <_dtoa_r+0x962>
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	4632      	mov	r2, r6
 8008caa:	4658      	mov	r0, fp
 8008cac:	f000 fc6c 	bl	8009588 <__lshift>
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d05a      	beq.n	8008d6e <_dtoa_r+0xa1e>
 8008cb8:	4658      	mov	r0, fp
 8008cba:	6869      	ldr	r1, [r5, #4]
 8008cbc:	f000 fa0e 	bl	80090dc <_Balloc>
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	b928      	cbnz	r0, 8008cd0 <_dtoa_r+0x980>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008cca:	4b83      	ldr	r3, [pc, #524]	@ (8008ed8 <_dtoa_r+0xb88>)
 8008ccc:	f7ff bb54 	b.w	8008378 <_dtoa_r+0x28>
 8008cd0:	692a      	ldr	r2, [r5, #16]
 8008cd2:	f105 010c 	add.w	r1, r5, #12
 8008cd6:	3202      	adds	r2, #2
 8008cd8:	0092      	lsls	r2, r2, #2
 8008cda:	300c      	adds	r0, #12
 8008cdc:	f7ff fa7f 	bl	80081de <memcpy>
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4658      	mov	r0, fp
 8008ce6:	f000 fc4f 	bl	8009588 <__lshift>
 8008cea:	462f      	mov	r7, r5
 8008cec:	4605      	mov	r5, r0
 8008cee:	f10a 0301 	add.w	r3, sl, #1
 8008cf2:	9307      	str	r3, [sp, #28]
 8008cf4:	9b08      	ldr	r3, [sp, #32]
 8008cf6:	4453      	add	r3, sl
 8008cf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cfa:	9b02      	ldr	r3, [sp, #8]
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d02:	9b07      	ldr	r3, [sp, #28]
 8008d04:	4621      	mov	r1, r4
 8008d06:	3b01      	subs	r3, #1
 8008d08:	4648      	mov	r0, r9
 8008d0a:	9302      	str	r3, [sp, #8]
 8008d0c:	f7ff fa98 	bl	8008240 <quorem>
 8008d10:	4639      	mov	r1, r7
 8008d12:	9008      	str	r0, [sp, #32]
 8008d14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d18:	4648      	mov	r0, r9
 8008d1a:	f000 fca1 	bl	8009660 <__mcmp>
 8008d1e:	462a      	mov	r2, r5
 8008d20:	9009      	str	r0, [sp, #36]	@ 0x24
 8008d22:	4621      	mov	r1, r4
 8008d24:	4658      	mov	r0, fp
 8008d26:	f000 fcb7 	bl	8009698 <__mdiff>
 8008d2a:	68c2      	ldr	r2, [r0, #12]
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	bb02      	cbnz	r2, 8008d72 <_dtoa_r+0xa22>
 8008d30:	4601      	mov	r1, r0
 8008d32:	4648      	mov	r0, r9
 8008d34:	f000 fc94 	bl	8009660 <__mcmp>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4658      	mov	r0, fp
 8008d3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d40:	f000 fa0c 	bl	800915c <_Bfree>
 8008d44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d48:	9e07      	ldr	r6, [sp, #28]
 8008d4a:	ea43 0102 	orr.w	r1, r3, r2
 8008d4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d50:	4319      	orrs	r1, r3
 8008d52:	d110      	bne.n	8008d76 <_dtoa_r+0xa26>
 8008d54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d58:	d029      	beq.n	8008dae <_dtoa_r+0xa5e>
 8008d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dd02      	ble.n	8008d66 <_dtoa_r+0xa16>
 8008d60:	9b08      	ldr	r3, [sp, #32]
 8008d62:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d66:	9b02      	ldr	r3, [sp, #8]
 8008d68:	f883 8000 	strb.w	r8, [r3]
 8008d6c:	e63b      	b.n	80089e6 <_dtoa_r+0x696>
 8008d6e:	4628      	mov	r0, r5
 8008d70:	e7bb      	b.n	8008cea <_dtoa_r+0x99a>
 8008d72:	2201      	movs	r2, #1
 8008d74:	e7e1      	b.n	8008d3a <_dtoa_r+0x9ea>
 8008d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	db04      	blt.n	8008d86 <_dtoa_r+0xa36>
 8008d7c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008d7e:	430b      	orrs	r3, r1
 8008d80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d82:	430b      	orrs	r3, r1
 8008d84:	d120      	bne.n	8008dc8 <_dtoa_r+0xa78>
 8008d86:	2a00      	cmp	r2, #0
 8008d88:	dded      	ble.n	8008d66 <_dtoa_r+0xa16>
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	4658      	mov	r0, fp
 8008d90:	f000 fbfa 	bl	8009588 <__lshift>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4681      	mov	r9, r0
 8008d98:	f000 fc62 	bl	8009660 <__mcmp>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	dc03      	bgt.n	8008da8 <_dtoa_r+0xa58>
 8008da0:	d1e1      	bne.n	8008d66 <_dtoa_r+0xa16>
 8008da2:	f018 0f01 	tst.w	r8, #1
 8008da6:	d0de      	beq.n	8008d66 <_dtoa_r+0xa16>
 8008da8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dac:	d1d8      	bne.n	8008d60 <_dtoa_r+0xa10>
 8008dae:	2339      	movs	r3, #57	@ 0x39
 8008db0:	9a02      	ldr	r2, [sp, #8]
 8008db2:	7013      	strb	r3, [r2, #0]
 8008db4:	4633      	mov	r3, r6
 8008db6:	461e      	mov	r6, r3
 8008db8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	2a39      	cmp	r2, #57	@ 0x39
 8008dc0:	d052      	beq.n	8008e68 <_dtoa_r+0xb18>
 8008dc2:	3201      	adds	r2, #1
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	e60e      	b.n	80089e6 <_dtoa_r+0x696>
 8008dc8:	2a00      	cmp	r2, #0
 8008dca:	dd07      	ble.n	8008ddc <_dtoa_r+0xa8c>
 8008dcc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dd0:	d0ed      	beq.n	8008dae <_dtoa_r+0xa5e>
 8008dd2:	9a02      	ldr	r2, [sp, #8]
 8008dd4:	f108 0301 	add.w	r3, r8, #1
 8008dd8:	7013      	strb	r3, [r2, #0]
 8008dda:	e604      	b.n	80089e6 <_dtoa_r+0x696>
 8008ddc:	9b07      	ldr	r3, [sp, #28]
 8008dde:	9a07      	ldr	r2, [sp, #28]
 8008de0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008de4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d028      	beq.n	8008e3c <_dtoa_r+0xaec>
 8008dea:	4649      	mov	r1, r9
 8008dec:	2300      	movs	r3, #0
 8008dee:	220a      	movs	r2, #10
 8008df0:	4658      	mov	r0, fp
 8008df2:	f000 f9d5 	bl	80091a0 <__multadd>
 8008df6:	42af      	cmp	r7, r5
 8008df8:	4681      	mov	r9, r0
 8008dfa:	f04f 0300 	mov.w	r3, #0
 8008dfe:	f04f 020a 	mov.w	r2, #10
 8008e02:	4639      	mov	r1, r7
 8008e04:	4658      	mov	r0, fp
 8008e06:	d107      	bne.n	8008e18 <_dtoa_r+0xac8>
 8008e08:	f000 f9ca 	bl	80091a0 <__multadd>
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	4605      	mov	r5, r0
 8008e10:	9b07      	ldr	r3, [sp, #28]
 8008e12:	3301      	adds	r3, #1
 8008e14:	9307      	str	r3, [sp, #28]
 8008e16:	e774      	b.n	8008d02 <_dtoa_r+0x9b2>
 8008e18:	f000 f9c2 	bl	80091a0 <__multadd>
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	4607      	mov	r7, r0
 8008e20:	2300      	movs	r3, #0
 8008e22:	220a      	movs	r2, #10
 8008e24:	4658      	mov	r0, fp
 8008e26:	f000 f9bb 	bl	80091a0 <__multadd>
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	e7f0      	b.n	8008e10 <_dtoa_r+0xac0>
 8008e2e:	9b08      	ldr	r3, [sp, #32]
 8008e30:	2700      	movs	r7, #0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	bfcc      	ite	gt
 8008e36:	461e      	movgt	r6, r3
 8008e38:	2601      	movle	r6, #1
 8008e3a:	4456      	add	r6, sl
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	2201      	movs	r2, #1
 8008e40:	4658      	mov	r0, fp
 8008e42:	f000 fba1 	bl	8009588 <__lshift>
 8008e46:	4621      	mov	r1, r4
 8008e48:	4681      	mov	r9, r0
 8008e4a:	f000 fc09 	bl	8009660 <__mcmp>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	dcb0      	bgt.n	8008db4 <_dtoa_r+0xa64>
 8008e52:	d102      	bne.n	8008e5a <_dtoa_r+0xb0a>
 8008e54:	f018 0f01 	tst.w	r8, #1
 8008e58:	d1ac      	bne.n	8008db4 <_dtoa_r+0xa64>
 8008e5a:	4633      	mov	r3, r6
 8008e5c:	461e      	mov	r6, r3
 8008e5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e62:	2a30      	cmp	r2, #48	@ 0x30
 8008e64:	d0fa      	beq.n	8008e5c <_dtoa_r+0xb0c>
 8008e66:	e5be      	b.n	80089e6 <_dtoa_r+0x696>
 8008e68:	459a      	cmp	sl, r3
 8008e6a:	d1a4      	bne.n	8008db6 <_dtoa_r+0xa66>
 8008e6c:	9b04      	ldr	r3, [sp, #16]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	9304      	str	r3, [sp, #16]
 8008e72:	2331      	movs	r3, #49	@ 0x31
 8008e74:	f88a 3000 	strb.w	r3, [sl]
 8008e78:	e5b5      	b.n	80089e6 <_dtoa_r+0x696>
 8008e7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008e7c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008edc <_dtoa_r+0xb8c>
 8008e80:	b11b      	cbz	r3, 8008e8a <_dtoa_r+0xb3a>
 8008e82:	f10a 0308 	add.w	r3, sl, #8
 8008e86:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	4650      	mov	r0, sl
 8008e8c:	b017      	add	sp, #92	@ 0x5c
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	f77f ae3d 	ble.w	8008b14 <_dtoa_r+0x7c4>
 8008e9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	e65b      	b.n	8008b5a <_dtoa_r+0x80a>
 8008ea2:	9b08      	ldr	r3, [sp, #32]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f77f aed6 	ble.w	8008c56 <_dtoa_r+0x906>
 8008eaa:	4656      	mov	r6, sl
 8008eac:	4621      	mov	r1, r4
 8008eae:	4648      	mov	r0, r9
 8008eb0:	f7ff f9c6 	bl	8008240 <quorem>
 8008eb4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008eb8:	9b08      	ldr	r3, [sp, #32]
 8008eba:	f806 8b01 	strb.w	r8, [r6], #1
 8008ebe:	eba6 020a 	sub.w	r2, r6, sl
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	ddb3      	ble.n	8008e2e <_dtoa_r+0xade>
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	2300      	movs	r3, #0
 8008eca:	220a      	movs	r2, #10
 8008ecc:	4658      	mov	r0, fp
 8008ece:	f000 f967 	bl	80091a0 <__multadd>
 8008ed2:	4681      	mov	r9, r0
 8008ed4:	e7ea      	b.n	8008eac <_dtoa_r+0xb5c>
 8008ed6:	bf00      	nop
 8008ed8:	0800e996 	.word	0x0800e996
 8008edc:	0800e931 	.word	0x0800e931

08008ee0 <_free_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	d040      	beq.n	8008f6a <_free_r+0x8a>
 8008ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eec:	1f0c      	subs	r4, r1, #4
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bfb8      	it	lt
 8008ef2:	18e4      	addlt	r4, r4, r3
 8008ef4:	f000 f8e6 	bl	80090c4 <__malloc_lock>
 8008ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8008f6c <_free_r+0x8c>)
 8008efa:	6813      	ldr	r3, [r2, #0]
 8008efc:	b933      	cbnz	r3, 8008f0c <_free_r+0x2c>
 8008efe:	6063      	str	r3, [r4, #4]
 8008f00:	6014      	str	r4, [r2, #0]
 8008f02:	4628      	mov	r0, r5
 8008f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f08:	f000 b8e2 	b.w	80090d0 <__malloc_unlock>
 8008f0c:	42a3      	cmp	r3, r4
 8008f0e:	d908      	bls.n	8008f22 <_free_r+0x42>
 8008f10:	6820      	ldr	r0, [r4, #0]
 8008f12:	1821      	adds	r1, r4, r0
 8008f14:	428b      	cmp	r3, r1
 8008f16:	bf01      	itttt	eq
 8008f18:	6819      	ldreq	r1, [r3, #0]
 8008f1a:	685b      	ldreq	r3, [r3, #4]
 8008f1c:	1809      	addeq	r1, r1, r0
 8008f1e:	6021      	streq	r1, [r4, #0]
 8008f20:	e7ed      	b.n	8008efe <_free_r+0x1e>
 8008f22:	461a      	mov	r2, r3
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	b10b      	cbz	r3, 8008f2c <_free_r+0x4c>
 8008f28:	42a3      	cmp	r3, r4
 8008f2a:	d9fa      	bls.n	8008f22 <_free_r+0x42>
 8008f2c:	6811      	ldr	r1, [r2, #0]
 8008f2e:	1850      	adds	r0, r2, r1
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	d10b      	bne.n	8008f4c <_free_r+0x6c>
 8008f34:	6820      	ldr	r0, [r4, #0]
 8008f36:	4401      	add	r1, r0
 8008f38:	1850      	adds	r0, r2, r1
 8008f3a:	4283      	cmp	r3, r0
 8008f3c:	6011      	str	r1, [r2, #0]
 8008f3e:	d1e0      	bne.n	8008f02 <_free_r+0x22>
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	4408      	add	r0, r1
 8008f46:	6010      	str	r0, [r2, #0]
 8008f48:	6053      	str	r3, [r2, #4]
 8008f4a:	e7da      	b.n	8008f02 <_free_r+0x22>
 8008f4c:	d902      	bls.n	8008f54 <_free_r+0x74>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	602b      	str	r3, [r5, #0]
 8008f52:	e7d6      	b.n	8008f02 <_free_r+0x22>
 8008f54:	6820      	ldr	r0, [r4, #0]
 8008f56:	1821      	adds	r1, r4, r0
 8008f58:	428b      	cmp	r3, r1
 8008f5a:	bf01      	itttt	eq
 8008f5c:	6819      	ldreq	r1, [r3, #0]
 8008f5e:	685b      	ldreq	r3, [r3, #4]
 8008f60:	1809      	addeq	r1, r1, r0
 8008f62:	6021      	streq	r1, [r4, #0]
 8008f64:	6063      	str	r3, [r4, #4]
 8008f66:	6054      	str	r4, [r2, #4]
 8008f68:	e7cb      	b.n	8008f02 <_free_r+0x22>
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	20000a9c 	.word	0x20000a9c

08008f70 <malloc>:
 8008f70:	4b02      	ldr	r3, [pc, #8]	@ (8008f7c <malloc+0xc>)
 8008f72:	4601      	mov	r1, r0
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	f000 b825 	b.w	8008fc4 <_malloc_r>
 8008f7a:	bf00      	nop
 8008f7c:	20000040 	.word	0x20000040

08008f80 <sbrk_aligned>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	4e0f      	ldr	r6, [pc, #60]	@ (8008fc0 <sbrk_aligned+0x40>)
 8008f84:	460c      	mov	r4, r1
 8008f86:	6831      	ldr	r1, [r6, #0]
 8008f88:	4605      	mov	r5, r0
 8008f8a:	b911      	cbnz	r1, 8008f92 <sbrk_aligned+0x12>
 8008f8c:	f001 fd72 	bl	800aa74 <_sbrk_r>
 8008f90:	6030      	str	r0, [r6, #0]
 8008f92:	4621      	mov	r1, r4
 8008f94:	4628      	mov	r0, r5
 8008f96:	f001 fd6d 	bl	800aa74 <_sbrk_r>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	d103      	bne.n	8008fa6 <sbrk_aligned+0x26>
 8008f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	bd70      	pop	{r4, r5, r6, pc}
 8008fa6:	1cc4      	adds	r4, r0, #3
 8008fa8:	f024 0403 	bic.w	r4, r4, #3
 8008fac:	42a0      	cmp	r0, r4
 8008fae:	d0f8      	beq.n	8008fa2 <sbrk_aligned+0x22>
 8008fb0:	1a21      	subs	r1, r4, r0
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f001 fd5e 	bl	800aa74 <_sbrk_r>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d1f2      	bne.n	8008fa2 <sbrk_aligned+0x22>
 8008fbc:	e7ef      	b.n	8008f9e <sbrk_aligned+0x1e>
 8008fbe:	bf00      	nop
 8008fc0:	20000a98 	.word	0x20000a98

08008fc4 <_malloc_r>:
 8008fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc8:	1ccd      	adds	r5, r1, #3
 8008fca:	f025 0503 	bic.w	r5, r5, #3
 8008fce:	3508      	adds	r5, #8
 8008fd0:	2d0c      	cmp	r5, #12
 8008fd2:	bf38      	it	cc
 8008fd4:	250c      	movcc	r5, #12
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	4606      	mov	r6, r0
 8008fda:	db01      	blt.n	8008fe0 <_malloc_r+0x1c>
 8008fdc:	42a9      	cmp	r1, r5
 8008fde:	d904      	bls.n	8008fea <_malloc_r+0x26>
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	6033      	str	r3, [r6, #0]
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090c0 <_malloc_r+0xfc>
 8008fee:	f000 f869 	bl	80090c4 <__malloc_lock>
 8008ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ff6:	461c      	mov	r4, r3
 8008ff8:	bb44      	cbnz	r4, 800904c <_malloc_r+0x88>
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7ff ffbf 	bl	8008f80 <sbrk_aligned>
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	4604      	mov	r4, r0
 8009006:	d158      	bne.n	80090ba <_malloc_r+0xf6>
 8009008:	f8d8 4000 	ldr.w	r4, [r8]
 800900c:	4627      	mov	r7, r4
 800900e:	2f00      	cmp	r7, #0
 8009010:	d143      	bne.n	800909a <_malloc_r+0xd6>
 8009012:	2c00      	cmp	r4, #0
 8009014:	d04b      	beq.n	80090ae <_malloc_r+0xea>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	4639      	mov	r1, r7
 800901a:	4630      	mov	r0, r6
 800901c:	eb04 0903 	add.w	r9, r4, r3
 8009020:	f001 fd28 	bl	800aa74 <_sbrk_r>
 8009024:	4581      	cmp	r9, r0
 8009026:	d142      	bne.n	80090ae <_malloc_r+0xea>
 8009028:	6821      	ldr	r1, [r4, #0]
 800902a:	4630      	mov	r0, r6
 800902c:	1a6d      	subs	r5, r5, r1
 800902e:	4629      	mov	r1, r5
 8009030:	f7ff ffa6 	bl	8008f80 <sbrk_aligned>
 8009034:	3001      	adds	r0, #1
 8009036:	d03a      	beq.n	80090ae <_malloc_r+0xea>
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	442b      	add	r3, r5
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	f8d8 3000 	ldr.w	r3, [r8]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	bb62      	cbnz	r2, 80090a0 <_malloc_r+0xdc>
 8009046:	f8c8 7000 	str.w	r7, [r8]
 800904a:	e00f      	b.n	800906c <_malloc_r+0xa8>
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	1b52      	subs	r2, r2, r5
 8009050:	d420      	bmi.n	8009094 <_malloc_r+0xd0>
 8009052:	2a0b      	cmp	r2, #11
 8009054:	d917      	bls.n	8009086 <_malloc_r+0xc2>
 8009056:	1961      	adds	r1, r4, r5
 8009058:	42a3      	cmp	r3, r4
 800905a:	6025      	str	r5, [r4, #0]
 800905c:	bf18      	it	ne
 800905e:	6059      	strne	r1, [r3, #4]
 8009060:	6863      	ldr	r3, [r4, #4]
 8009062:	bf08      	it	eq
 8009064:	f8c8 1000 	streq.w	r1, [r8]
 8009068:	5162      	str	r2, [r4, r5]
 800906a:	604b      	str	r3, [r1, #4]
 800906c:	4630      	mov	r0, r6
 800906e:	f000 f82f 	bl	80090d0 <__malloc_unlock>
 8009072:	f104 000b 	add.w	r0, r4, #11
 8009076:	1d23      	adds	r3, r4, #4
 8009078:	f020 0007 	bic.w	r0, r0, #7
 800907c:	1ac2      	subs	r2, r0, r3
 800907e:	bf1c      	itt	ne
 8009080:	1a1b      	subne	r3, r3, r0
 8009082:	50a3      	strne	r3, [r4, r2]
 8009084:	e7af      	b.n	8008fe6 <_malloc_r+0x22>
 8009086:	6862      	ldr	r2, [r4, #4]
 8009088:	42a3      	cmp	r3, r4
 800908a:	bf0c      	ite	eq
 800908c:	f8c8 2000 	streq.w	r2, [r8]
 8009090:	605a      	strne	r2, [r3, #4]
 8009092:	e7eb      	b.n	800906c <_malloc_r+0xa8>
 8009094:	4623      	mov	r3, r4
 8009096:	6864      	ldr	r4, [r4, #4]
 8009098:	e7ae      	b.n	8008ff8 <_malloc_r+0x34>
 800909a:	463c      	mov	r4, r7
 800909c:	687f      	ldr	r7, [r7, #4]
 800909e:	e7b6      	b.n	800900e <_malloc_r+0x4a>
 80090a0:	461a      	mov	r2, r3
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	d1fb      	bne.n	80090a0 <_malloc_r+0xdc>
 80090a8:	2300      	movs	r3, #0
 80090aa:	6053      	str	r3, [r2, #4]
 80090ac:	e7de      	b.n	800906c <_malloc_r+0xa8>
 80090ae:	230c      	movs	r3, #12
 80090b0:	4630      	mov	r0, r6
 80090b2:	6033      	str	r3, [r6, #0]
 80090b4:	f000 f80c 	bl	80090d0 <__malloc_unlock>
 80090b8:	e794      	b.n	8008fe4 <_malloc_r+0x20>
 80090ba:	6005      	str	r5, [r0, #0]
 80090bc:	e7d6      	b.n	800906c <_malloc_r+0xa8>
 80090be:	bf00      	nop
 80090c0:	20000a9c 	.word	0x20000a9c

080090c4 <__malloc_lock>:
 80090c4:	4801      	ldr	r0, [pc, #4]	@ (80090cc <__malloc_lock+0x8>)
 80090c6:	f7ff b872 	b.w	80081ae <__retarget_lock_acquire_recursive>
 80090ca:	bf00      	nop
 80090cc:	20000a94 	.word	0x20000a94

080090d0 <__malloc_unlock>:
 80090d0:	4801      	ldr	r0, [pc, #4]	@ (80090d8 <__malloc_unlock+0x8>)
 80090d2:	f7ff b86d 	b.w	80081b0 <__retarget_lock_release_recursive>
 80090d6:	bf00      	nop
 80090d8:	20000a94 	.word	0x20000a94

080090dc <_Balloc>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	69c6      	ldr	r6, [r0, #28]
 80090e0:	4604      	mov	r4, r0
 80090e2:	460d      	mov	r5, r1
 80090e4:	b976      	cbnz	r6, 8009104 <_Balloc+0x28>
 80090e6:	2010      	movs	r0, #16
 80090e8:	f7ff ff42 	bl	8008f70 <malloc>
 80090ec:	4602      	mov	r2, r0
 80090ee:	61e0      	str	r0, [r4, #28]
 80090f0:	b920      	cbnz	r0, 80090fc <_Balloc+0x20>
 80090f2:	216b      	movs	r1, #107	@ 0x6b
 80090f4:	4b17      	ldr	r3, [pc, #92]	@ (8009154 <_Balloc+0x78>)
 80090f6:	4818      	ldr	r0, [pc, #96]	@ (8009158 <_Balloc+0x7c>)
 80090f8:	f7ff f884 	bl	8008204 <__assert_func>
 80090fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009100:	6006      	str	r6, [r0, #0]
 8009102:	60c6      	str	r6, [r0, #12]
 8009104:	69e6      	ldr	r6, [r4, #28]
 8009106:	68f3      	ldr	r3, [r6, #12]
 8009108:	b183      	cbz	r3, 800912c <_Balloc+0x50>
 800910a:	69e3      	ldr	r3, [r4, #28]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009112:	b9b8      	cbnz	r0, 8009144 <_Balloc+0x68>
 8009114:	2101      	movs	r1, #1
 8009116:	fa01 f605 	lsl.w	r6, r1, r5
 800911a:	1d72      	adds	r2, r6, #5
 800911c:	4620      	mov	r0, r4
 800911e:	0092      	lsls	r2, r2, #2
 8009120:	f001 fcc5 	bl	800aaae <_calloc_r>
 8009124:	b160      	cbz	r0, 8009140 <_Balloc+0x64>
 8009126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800912a:	e00e      	b.n	800914a <_Balloc+0x6e>
 800912c:	2221      	movs	r2, #33	@ 0x21
 800912e:	2104      	movs	r1, #4
 8009130:	4620      	mov	r0, r4
 8009132:	f001 fcbc 	bl	800aaae <_calloc_r>
 8009136:	69e3      	ldr	r3, [r4, #28]
 8009138:	60f0      	str	r0, [r6, #12]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e4      	bne.n	800910a <_Balloc+0x2e>
 8009140:	2000      	movs	r0, #0
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	6802      	ldr	r2, [r0, #0]
 8009146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800914a:	2300      	movs	r3, #0
 800914c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009150:	e7f7      	b.n	8009142 <_Balloc+0x66>
 8009152:	bf00      	nop
 8009154:	0800e884 	.word	0x0800e884
 8009158:	0800e9a7 	.word	0x0800e9a7

0800915c <_Bfree>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	69c6      	ldr	r6, [r0, #28]
 8009160:	4605      	mov	r5, r0
 8009162:	460c      	mov	r4, r1
 8009164:	b976      	cbnz	r6, 8009184 <_Bfree+0x28>
 8009166:	2010      	movs	r0, #16
 8009168:	f7ff ff02 	bl	8008f70 <malloc>
 800916c:	4602      	mov	r2, r0
 800916e:	61e8      	str	r0, [r5, #28]
 8009170:	b920      	cbnz	r0, 800917c <_Bfree+0x20>
 8009172:	218f      	movs	r1, #143	@ 0x8f
 8009174:	4b08      	ldr	r3, [pc, #32]	@ (8009198 <_Bfree+0x3c>)
 8009176:	4809      	ldr	r0, [pc, #36]	@ (800919c <_Bfree+0x40>)
 8009178:	f7ff f844 	bl	8008204 <__assert_func>
 800917c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009180:	6006      	str	r6, [r0, #0]
 8009182:	60c6      	str	r6, [r0, #12]
 8009184:	b13c      	cbz	r4, 8009196 <_Bfree+0x3a>
 8009186:	69eb      	ldr	r3, [r5, #28]
 8009188:	6862      	ldr	r2, [r4, #4]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009190:	6021      	str	r1, [r4, #0]
 8009192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009196:	bd70      	pop	{r4, r5, r6, pc}
 8009198:	0800e884 	.word	0x0800e884
 800919c:	0800e9a7 	.word	0x0800e9a7

080091a0 <__multadd>:
 80091a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a4:	4607      	mov	r7, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	461e      	mov	r6, r3
 80091aa:	2000      	movs	r0, #0
 80091ac:	690d      	ldr	r5, [r1, #16]
 80091ae:	f101 0c14 	add.w	ip, r1, #20
 80091b2:	f8dc 3000 	ldr.w	r3, [ip]
 80091b6:	3001      	adds	r0, #1
 80091b8:	b299      	uxth	r1, r3
 80091ba:	fb02 6101 	mla	r1, r2, r1, r6
 80091be:	0c1e      	lsrs	r6, r3, #16
 80091c0:	0c0b      	lsrs	r3, r1, #16
 80091c2:	fb02 3306 	mla	r3, r2, r6, r3
 80091c6:	b289      	uxth	r1, r1
 80091c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091cc:	4285      	cmp	r5, r0
 80091ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091d2:	f84c 1b04 	str.w	r1, [ip], #4
 80091d6:	dcec      	bgt.n	80091b2 <__multadd+0x12>
 80091d8:	b30e      	cbz	r6, 800921e <__multadd+0x7e>
 80091da:	68a3      	ldr	r3, [r4, #8]
 80091dc:	42ab      	cmp	r3, r5
 80091de:	dc19      	bgt.n	8009214 <__multadd+0x74>
 80091e0:	6861      	ldr	r1, [r4, #4]
 80091e2:	4638      	mov	r0, r7
 80091e4:	3101      	adds	r1, #1
 80091e6:	f7ff ff79 	bl	80090dc <_Balloc>
 80091ea:	4680      	mov	r8, r0
 80091ec:	b928      	cbnz	r0, 80091fa <__multadd+0x5a>
 80091ee:	4602      	mov	r2, r0
 80091f0:	21ba      	movs	r1, #186	@ 0xba
 80091f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009224 <__multadd+0x84>)
 80091f4:	480c      	ldr	r0, [pc, #48]	@ (8009228 <__multadd+0x88>)
 80091f6:	f7ff f805 	bl	8008204 <__assert_func>
 80091fa:	6922      	ldr	r2, [r4, #16]
 80091fc:	f104 010c 	add.w	r1, r4, #12
 8009200:	3202      	adds	r2, #2
 8009202:	0092      	lsls	r2, r2, #2
 8009204:	300c      	adds	r0, #12
 8009206:	f7fe ffea 	bl	80081de <memcpy>
 800920a:	4621      	mov	r1, r4
 800920c:	4638      	mov	r0, r7
 800920e:	f7ff ffa5 	bl	800915c <_Bfree>
 8009212:	4644      	mov	r4, r8
 8009214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009218:	3501      	adds	r5, #1
 800921a:	615e      	str	r6, [r3, #20]
 800921c:	6125      	str	r5, [r4, #16]
 800921e:	4620      	mov	r0, r4
 8009220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009224:	0800e996 	.word	0x0800e996
 8009228:	0800e9a7 	.word	0x0800e9a7

0800922c <__s2b>:
 800922c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009230:	4615      	mov	r5, r2
 8009232:	2209      	movs	r2, #9
 8009234:	461f      	mov	r7, r3
 8009236:	3308      	adds	r3, #8
 8009238:	460c      	mov	r4, r1
 800923a:	fb93 f3f2 	sdiv	r3, r3, r2
 800923e:	4606      	mov	r6, r0
 8009240:	2201      	movs	r2, #1
 8009242:	2100      	movs	r1, #0
 8009244:	429a      	cmp	r2, r3
 8009246:	db09      	blt.n	800925c <__s2b+0x30>
 8009248:	4630      	mov	r0, r6
 800924a:	f7ff ff47 	bl	80090dc <_Balloc>
 800924e:	b940      	cbnz	r0, 8009262 <__s2b+0x36>
 8009250:	4602      	mov	r2, r0
 8009252:	21d3      	movs	r1, #211	@ 0xd3
 8009254:	4b18      	ldr	r3, [pc, #96]	@ (80092b8 <__s2b+0x8c>)
 8009256:	4819      	ldr	r0, [pc, #100]	@ (80092bc <__s2b+0x90>)
 8009258:	f7fe ffd4 	bl	8008204 <__assert_func>
 800925c:	0052      	lsls	r2, r2, #1
 800925e:	3101      	adds	r1, #1
 8009260:	e7f0      	b.n	8009244 <__s2b+0x18>
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	2d09      	cmp	r5, #9
 8009266:	6143      	str	r3, [r0, #20]
 8009268:	f04f 0301 	mov.w	r3, #1
 800926c:	6103      	str	r3, [r0, #16]
 800926e:	dd16      	ble.n	800929e <__s2b+0x72>
 8009270:	f104 0909 	add.w	r9, r4, #9
 8009274:	46c8      	mov	r8, r9
 8009276:	442c      	add	r4, r5
 8009278:	f818 3b01 	ldrb.w	r3, [r8], #1
 800927c:	4601      	mov	r1, r0
 800927e:	220a      	movs	r2, #10
 8009280:	4630      	mov	r0, r6
 8009282:	3b30      	subs	r3, #48	@ 0x30
 8009284:	f7ff ff8c 	bl	80091a0 <__multadd>
 8009288:	45a0      	cmp	r8, r4
 800928a:	d1f5      	bne.n	8009278 <__s2b+0x4c>
 800928c:	f1a5 0408 	sub.w	r4, r5, #8
 8009290:	444c      	add	r4, r9
 8009292:	1b2d      	subs	r5, r5, r4
 8009294:	1963      	adds	r3, r4, r5
 8009296:	42bb      	cmp	r3, r7
 8009298:	db04      	blt.n	80092a4 <__s2b+0x78>
 800929a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929e:	2509      	movs	r5, #9
 80092a0:	340a      	adds	r4, #10
 80092a2:	e7f6      	b.n	8009292 <__s2b+0x66>
 80092a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092a8:	4601      	mov	r1, r0
 80092aa:	220a      	movs	r2, #10
 80092ac:	4630      	mov	r0, r6
 80092ae:	3b30      	subs	r3, #48	@ 0x30
 80092b0:	f7ff ff76 	bl	80091a0 <__multadd>
 80092b4:	e7ee      	b.n	8009294 <__s2b+0x68>
 80092b6:	bf00      	nop
 80092b8:	0800e996 	.word	0x0800e996
 80092bc:	0800e9a7 	.word	0x0800e9a7

080092c0 <__hi0bits>:
 80092c0:	4603      	mov	r3, r0
 80092c2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80092c6:	bf3a      	itte	cc
 80092c8:	0403      	lslcc	r3, r0, #16
 80092ca:	2010      	movcc	r0, #16
 80092cc:	2000      	movcs	r0, #0
 80092ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092d2:	bf3c      	itt	cc
 80092d4:	021b      	lslcc	r3, r3, #8
 80092d6:	3008      	addcc	r0, #8
 80092d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092dc:	bf3c      	itt	cc
 80092de:	011b      	lslcc	r3, r3, #4
 80092e0:	3004      	addcc	r0, #4
 80092e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e6:	bf3c      	itt	cc
 80092e8:	009b      	lslcc	r3, r3, #2
 80092ea:	3002      	addcc	r0, #2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	db05      	blt.n	80092fc <__hi0bits+0x3c>
 80092f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80092f4:	f100 0001 	add.w	r0, r0, #1
 80092f8:	bf08      	it	eq
 80092fa:	2020      	moveq	r0, #32
 80092fc:	4770      	bx	lr

080092fe <__lo0bits>:
 80092fe:	6803      	ldr	r3, [r0, #0]
 8009300:	4602      	mov	r2, r0
 8009302:	f013 0007 	ands.w	r0, r3, #7
 8009306:	d00b      	beq.n	8009320 <__lo0bits+0x22>
 8009308:	07d9      	lsls	r1, r3, #31
 800930a:	d421      	bmi.n	8009350 <__lo0bits+0x52>
 800930c:	0798      	lsls	r0, r3, #30
 800930e:	bf49      	itett	mi
 8009310:	085b      	lsrmi	r3, r3, #1
 8009312:	089b      	lsrpl	r3, r3, #2
 8009314:	2001      	movmi	r0, #1
 8009316:	6013      	strmi	r3, [r2, #0]
 8009318:	bf5c      	itt	pl
 800931a:	2002      	movpl	r0, #2
 800931c:	6013      	strpl	r3, [r2, #0]
 800931e:	4770      	bx	lr
 8009320:	b299      	uxth	r1, r3
 8009322:	b909      	cbnz	r1, 8009328 <__lo0bits+0x2a>
 8009324:	2010      	movs	r0, #16
 8009326:	0c1b      	lsrs	r3, r3, #16
 8009328:	b2d9      	uxtb	r1, r3
 800932a:	b909      	cbnz	r1, 8009330 <__lo0bits+0x32>
 800932c:	3008      	adds	r0, #8
 800932e:	0a1b      	lsrs	r3, r3, #8
 8009330:	0719      	lsls	r1, r3, #28
 8009332:	bf04      	itt	eq
 8009334:	091b      	lsreq	r3, r3, #4
 8009336:	3004      	addeq	r0, #4
 8009338:	0799      	lsls	r1, r3, #30
 800933a:	bf04      	itt	eq
 800933c:	089b      	lsreq	r3, r3, #2
 800933e:	3002      	addeq	r0, #2
 8009340:	07d9      	lsls	r1, r3, #31
 8009342:	d403      	bmi.n	800934c <__lo0bits+0x4e>
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	f100 0001 	add.w	r0, r0, #1
 800934a:	d003      	beq.n	8009354 <__lo0bits+0x56>
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	4770      	bx	lr
 8009350:	2000      	movs	r0, #0
 8009352:	4770      	bx	lr
 8009354:	2020      	movs	r0, #32
 8009356:	4770      	bx	lr

08009358 <__i2b>:
 8009358:	b510      	push	{r4, lr}
 800935a:	460c      	mov	r4, r1
 800935c:	2101      	movs	r1, #1
 800935e:	f7ff febd 	bl	80090dc <_Balloc>
 8009362:	4602      	mov	r2, r0
 8009364:	b928      	cbnz	r0, 8009372 <__i2b+0x1a>
 8009366:	f240 1145 	movw	r1, #325	@ 0x145
 800936a:	4b04      	ldr	r3, [pc, #16]	@ (800937c <__i2b+0x24>)
 800936c:	4804      	ldr	r0, [pc, #16]	@ (8009380 <__i2b+0x28>)
 800936e:	f7fe ff49 	bl	8008204 <__assert_func>
 8009372:	2301      	movs	r3, #1
 8009374:	6144      	str	r4, [r0, #20]
 8009376:	6103      	str	r3, [r0, #16]
 8009378:	bd10      	pop	{r4, pc}
 800937a:	bf00      	nop
 800937c:	0800e996 	.word	0x0800e996
 8009380:	0800e9a7 	.word	0x0800e9a7

08009384 <__multiply>:
 8009384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009388:	4614      	mov	r4, r2
 800938a:	690a      	ldr	r2, [r1, #16]
 800938c:	6923      	ldr	r3, [r4, #16]
 800938e:	460f      	mov	r7, r1
 8009390:	429a      	cmp	r2, r3
 8009392:	bfa2      	ittt	ge
 8009394:	4623      	movge	r3, r4
 8009396:	460c      	movge	r4, r1
 8009398:	461f      	movge	r7, r3
 800939a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800939e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80093a2:	68a3      	ldr	r3, [r4, #8]
 80093a4:	6861      	ldr	r1, [r4, #4]
 80093a6:	eb0a 0609 	add.w	r6, sl, r9
 80093aa:	42b3      	cmp	r3, r6
 80093ac:	b085      	sub	sp, #20
 80093ae:	bfb8      	it	lt
 80093b0:	3101      	addlt	r1, #1
 80093b2:	f7ff fe93 	bl	80090dc <_Balloc>
 80093b6:	b930      	cbnz	r0, 80093c6 <__multiply+0x42>
 80093b8:	4602      	mov	r2, r0
 80093ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80093be:	4b43      	ldr	r3, [pc, #268]	@ (80094cc <__multiply+0x148>)
 80093c0:	4843      	ldr	r0, [pc, #268]	@ (80094d0 <__multiply+0x14c>)
 80093c2:	f7fe ff1f 	bl	8008204 <__assert_func>
 80093c6:	f100 0514 	add.w	r5, r0, #20
 80093ca:	462b      	mov	r3, r5
 80093cc:	2200      	movs	r2, #0
 80093ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093d2:	4543      	cmp	r3, r8
 80093d4:	d321      	bcc.n	800941a <__multiply+0x96>
 80093d6:	f107 0114 	add.w	r1, r7, #20
 80093da:	f104 0214 	add.w	r2, r4, #20
 80093de:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80093e2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	1b13      	subs	r3, r2, r4
 80093ea:	3b15      	subs	r3, #21
 80093ec:	f023 0303 	bic.w	r3, r3, #3
 80093f0:	3304      	adds	r3, #4
 80093f2:	f104 0715 	add.w	r7, r4, #21
 80093f6:	42ba      	cmp	r2, r7
 80093f8:	bf38      	it	cc
 80093fa:	2304      	movcc	r3, #4
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	9b02      	ldr	r3, [sp, #8]
 8009400:	9103      	str	r1, [sp, #12]
 8009402:	428b      	cmp	r3, r1
 8009404:	d80c      	bhi.n	8009420 <__multiply+0x9c>
 8009406:	2e00      	cmp	r6, #0
 8009408:	dd03      	ble.n	8009412 <__multiply+0x8e>
 800940a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800940e:	2b00      	cmp	r3, #0
 8009410:	d05a      	beq.n	80094c8 <__multiply+0x144>
 8009412:	6106      	str	r6, [r0, #16]
 8009414:	b005      	add	sp, #20
 8009416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941a:	f843 2b04 	str.w	r2, [r3], #4
 800941e:	e7d8      	b.n	80093d2 <__multiply+0x4e>
 8009420:	f8b1 a000 	ldrh.w	sl, [r1]
 8009424:	f1ba 0f00 	cmp.w	sl, #0
 8009428:	d023      	beq.n	8009472 <__multiply+0xee>
 800942a:	46a9      	mov	r9, r5
 800942c:	f04f 0c00 	mov.w	ip, #0
 8009430:	f104 0e14 	add.w	lr, r4, #20
 8009434:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009438:	f8d9 3000 	ldr.w	r3, [r9]
 800943c:	fa1f fb87 	uxth.w	fp, r7
 8009440:	b29b      	uxth	r3, r3
 8009442:	fb0a 330b 	mla	r3, sl, fp, r3
 8009446:	4463      	add	r3, ip
 8009448:	f8d9 c000 	ldr.w	ip, [r9]
 800944c:	0c3f      	lsrs	r7, r7, #16
 800944e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009452:	fb0a c707 	mla	r7, sl, r7, ip
 8009456:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800945a:	b29b      	uxth	r3, r3
 800945c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009460:	4572      	cmp	r2, lr
 8009462:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009466:	f849 3b04 	str.w	r3, [r9], #4
 800946a:	d8e3      	bhi.n	8009434 <__multiply+0xb0>
 800946c:	9b01      	ldr	r3, [sp, #4]
 800946e:	f845 c003 	str.w	ip, [r5, r3]
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	3104      	adds	r1, #4
 8009476:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800947a:	f1b9 0f00 	cmp.w	r9, #0
 800947e:	d021      	beq.n	80094c4 <__multiply+0x140>
 8009480:	46ae      	mov	lr, r5
 8009482:	f04f 0a00 	mov.w	sl, #0
 8009486:	682b      	ldr	r3, [r5, #0]
 8009488:	f104 0c14 	add.w	ip, r4, #20
 800948c:	f8bc b000 	ldrh.w	fp, [ip]
 8009490:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009494:	b29b      	uxth	r3, r3
 8009496:	fb09 770b 	mla	r7, r9, fp, r7
 800949a:	4457      	add	r7, sl
 800949c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80094a0:	f84e 3b04 	str.w	r3, [lr], #4
 80094a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80094a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094ac:	f8be 3000 	ldrh.w	r3, [lr]
 80094b0:	4562      	cmp	r2, ip
 80094b2:	fb09 330a 	mla	r3, r9, sl, r3
 80094b6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80094ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094be:	d8e5      	bhi.n	800948c <__multiply+0x108>
 80094c0:	9f01      	ldr	r7, [sp, #4]
 80094c2:	51eb      	str	r3, [r5, r7]
 80094c4:	3504      	adds	r5, #4
 80094c6:	e79a      	b.n	80093fe <__multiply+0x7a>
 80094c8:	3e01      	subs	r6, #1
 80094ca:	e79c      	b.n	8009406 <__multiply+0x82>
 80094cc:	0800e996 	.word	0x0800e996
 80094d0:	0800e9a7 	.word	0x0800e9a7

080094d4 <__pow5mult>:
 80094d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d8:	4615      	mov	r5, r2
 80094da:	f012 0203 	ands.w	r2, r2, #3
 80094de:	4607      	mov	r7, r0
 80094e0:	460e      	mov	r6, r1
 80094e2:	d007      	beq.n	80094f4 <__pow5mult+0x20>
 80094e4:	4c25      	ldr	r4, [pc, #148]	@ (800957c <__pow5mult+0xa8>)
 80094e6:	3a01      	subs	r2, #1
 80094e8:	2300      	movs	r3, #0
 80094ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094ee:	f7ff fe57 	bl	80091a0 <__multadd>
 80094f2:	4606      	mov	r6, r0
 80094f4:	10ad      	asrs	r5, r5, #2
 80094f6:	d03d      	beq.n	8009574 <__pow5mult+0xa0>
 80094f8:	69fc      	ldr	r4, [r7, #28]
 80094fa:	b97c      	cbnz	r4, 800951c <__pow5mult+0x48>
 80094fc:	2010      	movs	r0, #16
 80094fe:	f7ff fd37 	bl	8008f70 <malloc>
 8009502:	4602      	mov	r2, r0
 8009504:	61f8      	str	r0, [r7, #28]
 8009506:	b928      	cbnz	r0, 8009514 <__pow5mult+0x40>
 8009508:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800950c:	4b1c      	ldr	r3, [pc, #112]	@ (8009580 <__pow5mult+0xac>)
 800950e:	481d      	ldr	r0, [pc, #116]	@ (8009584 <__pow5mult+0xb0>)
 8009510:	f7fe fe78 	bl	8008204 <__assert_func>
 8009514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009518:	6004      	str	r4, [r0, #0]
 800951a:	60c4      	str	r4, [r0, #12]
 800951c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009524:	b94c      	cbnz	r4, 800953a <__pow5mult+0x66>
 8009526:	f240 2171 	movw	r1, #625	@ 0x271
 800952a:	4638      	mov	r0, r7
 800952c:	f7ff ff14 	bl	8009358 <__i2b>
 8009530:	2300      	movs	r3, #0
 8009532:	4604      	mov	r4, r0
 8009534:	f8c8 0008 	str.w	r0, [r8, #8]
 8009538:	6003      	str	r3, [r0, #0]
 800953a:	f04f 0900 	mov.w	r9, #0
 800953e:	07eb      	lsls	r3, r5, #31
 8009540:	d50a      	bpl.n	8009558 <__pow5mult+0x84>
 8009542:	4631      	mov	r1, r6
 8009544:	4622      	mov	r2, r4
 8009546:	4638      	mov	r0, r7
 8009548:	f7ff ff1c 	bl	8009384 <__multiply>
 800954c:	4680      	mov	r8, r0
 800954e:	4631      	mov	r1, r6
 8009550:	4638      	mov	r0, r7
 8009552:	f7ff fe03 	bl	800915c <_Bfree>
 8009556:	4646      	mov	r6, r8
 8009558:	106d      	asrs	r5, r5, #1
 800955a:	d00b      	beq.n	8009574 <__pow5mult+0xa0>
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	b938      	cbnz	r0, 8009570 <__pow5mult+0x9c>
 8009560:	4622      	mov	r2, r4
 8009562:	4621      	mov	r1, r4
 8009564:	4638      	mov	r0, r7
 8009566:	f7ff ff0d 	bl	8009384 <__multiply>
 800956a:	6020      	str	r0, [r4, #0]
 800956c:	f8c0 9000 	str.w	r9, [r0]
 8009570:	4604      	mov	r4, r0
 8009572:	e7e4      	b.n	800953e <__pow5mult+0x6a>
 8009574:	4630      	mov	r0, r6
 8009576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800957a:	bf00      	nop
 800957c:	0800ea00 	.word	0x0800ea00
 8009580:	0800e884 	.word	0x0800e884
 8009584:	0800e9a7 	.word	0x0800e9a7

08009588 <__lshift>:
 8009588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800958c:	460c      	mov	r4, r1
 800958e:	4607      	mov	r7, r0
 8009590:	4691      	mov	r9, r2
 8009592:	6923      	ldr	r3, [r4, #16]
 8009594:	6849      	ldr	r1, [r1, #4]
 8009596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800959a:	68a3      	ldr	r3, [r4, #8]
 800959c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095a0:	f108 0601 	add.w	r6, r8, #1
 80095a4:	42b3      	cmp	r3, r6
 80095a6:	db0b      	blt.n	80095c0 <__lshift+0x38>
 80095a8:	4638      	mov	r0, r7
 80095aa:	f7ff fd97 	bl	80090dc <_Balloc>
 80095ae:	4605      	mov	r5, r0
 80095b0:	b948      	cbnz	r0, 80095c6 <__lshift+0x3e>
 80095b2:	4602      	mov	r2, r0
 80095b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80095b8:	4b27      	ldr	r3, [pc, #156]	@ (8009658 <__lshift+0xd0>)
 80095ba:	4828      	ldr	r0, [pc, #160]	@ (800965c <__lshift+0xd4>)
 80095bc:	f7fe fe22 	bl	8008204 <__assert_func>
 80095c0:	3101      	adds	r1, #1
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	e7ee      	b.n	80095a4 <__lshift+0x1c>
 80095c6:	2300      	movs	r3, #0
 80095c8:	f100 0114 	add.w	r1, r0, #20
 80095cc:	f100 0210 	add.w	r2, r0, #16
 80095d0:	4618      	mov	r0, r3
 80095d2:	4553      	cmp	r3, sl
 80095d4:	db33      	blt.n	800963e <__lshift+0xb6>
 80095d6:	6920      	ldr	r0, [r4, #16]
 80095d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095dc:	f104 0314 	add.w	r3, r4, #20
 80095e0:	f019 091f 	ands.w	r9, r9, #31
 80095e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095ec:	d02b      	beq.n	8009646 <__lshift+0xbe>
 80095ee:	468a      	mov	sl, r1
 80095f0:	2200      	movs	r2, #0
 80095f2:	f1c9 0e20 	rsb	lr, r9, #32
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	fa00 f009 	lsl.w	r0, r0, r9
 80095fc:	4310      	orrs	r0, r2
 80095fe:	f84a 0b04 	str.w	r0, [sl], #4
 8009602:	f853 2b04 	ldr.w	r2, [r3], #4
 8009606:	459c      	cmp	ip, r3
 8009608:	fa22 f20e 	lsr.w	r2, r2, lr
 800960c:	d8f3      	bhi.n	80095f6 <__lshift+0x6e>
 800960e:	ebac 0304 	sub.w	r3, ip, r4
 8009612:	3b15      	subs	r3, #21
 8009614:	f023 0303 	bic.w	r3, r3, #3
 8009618:	3304      	adds	r3, #4
 800961a:	f104 0015 	add.w	r0, r4, #21
 800961e:	4584      	cmp	ip, r0
 8009620:	bf38      	it	cc
 8009622:	2304      	movcc	r3, #4
 8009624:	50ca      	str	r2, [r1, r3]
 8009626:	b10a      	cbz	r2, 800962c <__lshift+0xa4>
 8009628:	f108 0602 	add.w	r6, r8, #2
 800962c:	3e01      	subs	r6, #1
 800962e:	4638      	mov	r0, r7
 8009630:	4621      	mov	r1, r4
 8009632:	612e      	str	r6, [r5, #16]
 8009634:	f7ff fd92 	bl	800915c <_Bfree>
 8009638:	4628      	mov	r0, r5
 800963a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800963e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009642:	3301      	adds	r3, #1
 8009644:	e7c5      	b.n	80095d2 <__lshift+0x4a>
 8009646:	3904      	subs	r1, #4
 8009648:	f853 2b04 	ldr.w	r2, [r3], #4
 800964c:	459c      	cmp	ip, r3
 800964e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009652:	d8f9      	bhi.n	8009648 <__lshift+0xc0>
 8009654:	e7ea      	b.n	800962c <__lshift+0xa4>
 8009656:	bf00      	nop
 8009658:	0800e996 	.word	0x0800e996
 800965c:	0800e9a7 	.word	0x0800e9a7

08009660 <__mcmp>:
 8009660:	4603      	mov	r3, r0
 8009662:	690a      	ldr	r2, [r1, #16]
 8009664:	6900      	ldr	r0, [r0, #16]
 8009666:	b530      	push	{r4, r5, lr}
 8009668:	1a80      	subs	r0, r0, r2
 800966a:	d10e      	bne.n	800968a <__mcmp+0x2a>
 800966c:	3314      	adds	r3, #20
 800966e:	3114      	adds	r1, #20
 8009670:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009674:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009678:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800967c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009680:	4295      	cmp	r5, r2
 8009682:	d003      	beq.n	800968c <__mcmp+0x2c>
 8009684:	d205      	bcs.n	8009692 <__mcmp+0x32>
 8009686:	f04f 30ff 	mov.w	r0, #4294967295
 800968a:	bd30      	pop	{r4, r5, pc}
 800968c:	42a3      	cmp	r3, r4
 800968e:	d3f3      	bcc.n	8009678 <__mcmp+0x18>
 8009690:	e7fb      	b.n	800968a <__mcmp+0x2a>
 8009692:	2001      	movs	r0, #1
 8009694:	e7f9      	b.n	800968a <__mcmp+0x2a>
	...

08009698 <__mdiff>:
 8009698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	4689      	mov	r9, r1
 800969e:	4606      	mov	r6, r0
 80096a0:	4611      	mov	r1, r2
 80096a2:	4648      	mov	r0, r9
 80096a4:	4614      	mov	r4, r2
 80096a6:	f7ff ffdb 	bl	8009660 <__mcmp>
 80096aa:	1e05      	subs	r5, r0, #0
 80096ac:	d112      	bne.n	80096d4 <__mdiff+0x3c>
 80096ae:	4629      	mov	r1, r5
 80096b0:	4630      	mov	r0, r6
 80096b2:	f7ff fd13 	bl	80090dc <_Balloc>
 80096b6:	4602      	mov	r2, r0
 80096b8:	b928      	cbnz	r0, 80096c6 <__mdiff+0x2e>
 80096ba:	f240 2137 	movw	r1, #567	@ 0x237
 80096be:	4b3e      	ldr	r3, [pc, #248]	@ (80097b8 <__mdiff+0x120>)
 80096c0:	483e      	ldr	r0, [pc, #248]	@ (80097bc <__mdiff+0x124>)
 80096c2:	f7fe fd9f 	bl	8008204 <__assert_func>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096cc:	4610      	mov	r0, r2
 80096ce:	b003      	add	sp, #12
 80096d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d4:	bfbc      	itt	lt
 80096d6:	464b      	movlt	r3, r9
 80096d8:	46a1      	movlt	r9, r4
 80096da:	4630      	mov	r0, r6
 80096dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80096e0:	bfba      	itte	lt
 80096e2:	461c      	movlt	r4, r3
 80096e4:	2501      	movlt	r5, #1
 80096e6:	2500      	movge	r5, #0
 80096e8:	f7ff fcf8 	bl	80090dc <_Balloc>
 80096ec:	4602      	mov	r2, r0
 80096ee:	b918      	cbnz	r0, 80096f8 <__mdiff+0x60>
 80096f0:	f240 2145 	movw	r1, #581	@ 0x245
 80096f4:	4b30      	ldr	r3, [pc, #192]	@ (80097b8 <__mdiff+0x120>)
 80096f6:	e7e3      	b.n	80096c0 <__mdiff+0x28>
 80096f8:	f100 0b14 	add.w	fp, r0, #20
 80096fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009700:	f109 0310 	add.w	r3, r9, #16
 8009704:	60c5      	str	r5, [r0, #12]
 8009706:	f04f 0c00 	mov.w	ip, #0
 800970a:	f109 0514 	add.w	r5, r9, #20
 800970e:	46d9      	mov	r9, fp
 8009710:	6926      	ldr	r6, [r4, #16]
 8009712:	f104 0e14 	add.w	lr, r4, #20
 8009716:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800971a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	9b01      	ldr	r3, [sp, #4]
 8009722:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009726:	f853 af04 	ldr.w	sl, [r3, #4]!
 800972a:	b281      	uxth	r1, r0
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	fa1f f38a 	uxth.w	r3, sl
 8009732:	1a5b      	subs	r3, r3, r1
 8009734:	0c00      	lsrs	r0, r0, #16
 8009736:	4463      	add	r3, ip
 8009738:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800973c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009740:	b29b      	uxth	r3, r3
 8009742:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009746:	4576      	cmp	r6, lr
 8009748:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800974c:	f849 3b04 	str.w	r3, [r9], #4
 8009750:	d8e6      	bhi.n	8009720 <__mdiff+0x88>
 8009752:	1b33      	subs	r3, r6, r4
 8009754:	3b15      	subs	r3, #21
 8009756:	f023 0303 	bic.w	r3, r3, #3
 800975a:	3415      	adds	r4, #21
 800975c:	3304      	adds	r3, #4
 800975e:	42a6      	cmp	r6, r4
 8009760:	bf38      	it	cc
 8009762:	2304      	movcc	r3, #4
 8009764:	441d      	add	r5, r3
 8009766:	445b      	add	r3, fp
 8009768:	461e      	mov	r6, r3
 800976a:	462c      	mov	r4, r5
 800976c:	4544      	cmp	r4, r8
 800976e:	d30e      	bcc.n	800978e <__mdiff+0xf6>
 8009770:	f108 0103 	add.w	r1, r8, #3
 8009774:	1b49      	subs	r1, r1, r5
 8009776:	f021 0103 	bic.w	r1, r1, #3
 800977a:	3d03      	subs	r5, #3
 800977c:	45a8      	cmp	r8, r5
 800977e:	bf38      	it	cc
 8009780:	2100      	movcc	r1, #0
 8009782:	440b      	add	r3, r1
 8009784:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009788:	b199      	cbz	r1, 80097b2 <__mdiff+0x11a>
 800978a:	6117      	str	r7, [r2, #16]
 800978c:	e79e      	b.n	80096cc <__mdiff+0x34>
 800978e:	46e6      	mov	lr, ip
 8009790:	f854 1b04 	ldr.w	r1, [r4], #4
 8009794:	fa1f fc81 	uxth.w	ip, r1
 8009798:	44f4      	add	ip, lr
 800979a:	0c08      	lsrs	r0, r1, #16
 800979c:	4471      	add	r1, lr
 800979e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80097a2:	b289      	uxth	r1, r1
 80097a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80097a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097ac:	f846 1b04 	str.w	r1, [r6], #4
 80097b0:	e7dc      	b.n	800976c <__mdiff+0xd4>
 80097b2:	3f01      	subs	r7, #1
 80097b4:	e7e6      	b.n	8009784 <__mdiff+0xec>
 80097b6:	bf00      	nop
 80097b8:	0800e996 	.word	0x0800e996
 80097bc:	0800e9a7 	.word	0x0800e9a7

080097c0 <__ulp>:
 80097c0:	4b0e      	ldr	r3, [pc, #56]	@ (80097fc <__ulp+0x3c>)
 80097c2:	400b      	ands	r3, r1
 80097c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	dc08      	bgt.n	80097de <__ulp+0x1e>
 80097cc:	425b      	negs	r3, r3
 80097ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80097d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80097d6:	da04      	bge.n	80097e2 <__ulp+0x22>
 80097d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80097dc:	4113      	asrs	r3, r2
 80097de:	2200      	movs	r2, #0
 80097e0:	e008      	b.n	80097f4 <__ulp+0x34>
 80097e2:	f1a2 0314 	sub.w	r3, r2, #20
 80097e6:	2b1e      	cmp	r3, #30
 80097e8:	bfd6      	itet	le
 80097ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80097ee:	2201      	movgt	r2, #1
 80097f0:	40da      	lsrle	r2, r3
 80097f2:	2300      	movs	r3, #0
 80097f4:	4619      	mov	r1, r3
 80097f6:	4610      	mov	r0, r2
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	7ff00000 	.word	0x7ff00000

08009800 <__b2d>:
 8009800:	6902      	ldr	r2, [r0, #16]
 8009802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009804:	f100 0614 	add.w	r6, r0, #20
 8009808:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800980c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009810:	4f1e      	ldr	r7, [pc, #120]	@ (800988c <__b2d+0x8c>)
 8009812:	4620      	mov	r0, r4
 8009814:	f7ff fd54 	bl	80092c0 <__hi0bits>
 8009818:	4603      	mov	r3, r0
 800981a:	f1c0 0020 	rsb	r0, r0, #32
 800981e:	2b0a      	cmp	r3, #10
 8009820:	f1a2 0504 	sub.w	r5, r2, #4
 8009824:	6008      	str	r0, [r1, #0]
 8009826:	dc12      	bgt.n	800984e <__b2d+0x4e>
 8009828:	42ae      	cmp	r6, r5
 800982a:	bf2c      	ite	cs
 800982c:	2200      	movcs	r2, #0
 800982e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009832:	f1c3 0c0b 	rsb	ip, r3, #11
 8009836:	3315      	adds	r3, #21
 8009838:	fa24 fe0c 	lsr.w	lr, r4, ip
 800983c:	fa04 f303 	lsl.w	r3, r4, r3
 8009840:	fa22 f20c 	lsr.w	r2, r2, ip
 8009844:	ea4e 0107 	orr.w	r1, lr, r7
 8009848:	431a      	orrs	r2, r3
 800984a:	4610      	mov	r0, r2
 800984c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800984e:	42ae      	cmp	r6, r5
 8009850:	bf36      	itet	cc
 8009852:	f1a2 0508 	subcc.w	r5, r2, #8
 8009856:	2200      	movcs	r2, #0
 8009858:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800985c:	3b0b      	subs	r3, #11
 800985e:	d012      	beq.n	8009886 <__b2d+0x86>
 8009860:	f1c3 0720 	rsb	r7, r3, #32
 8009864:	fa22 f107 	lsr.w	r1, r2, r7
 8009868:	409c      	lsls	r4, r3
 800986a:	430c      	orrs	r4, r1
 800986c:	42b5      	cmp	r5, r6
 800986e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009872:	bf94      	ite	ls
 8009874:	2400      	movls	r4, #0
 8009876:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800987a:	409a      	lsls	r2, r3
 800987c:	40fc      	lsrs	r4, r7
 800987e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009882:	4322      	orrs	r2, r4
 8009884:	e7e1      	b.n	800984a <__b2d+0x4a>
 8009886:	ea44 0107 	orr.w	r1, r4, r7
 800988a:	e7de      	b.n	800984a <__b2d+0x4a>
 800988c:	3ff00000 	.word	0x3ff00000

08009890 <__d2b>:
 8009890:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009894:	2101      	movs	r1, #1
 8009896:	4690      	mov	r8, r2
 8009898:	4699      	mov	r9, r3
 800989a:	9e08      	ldr	r6, [sp, #32]
 800989c:	f7ff fc1e 	bl	80090dc <_Balloc>
 80098a0:	4604      	mov	r4, r0
 80098a2:	b930      	cbnz	r0, 80098b2 <__d2b+0x22>
 80098a4:	4602      	mov	r2, r0
 80098a6:	f240 310f 	movw	r1, #783	@ 0x30f
 80098aa:	4b23      	ldr	r3, [pc, #140]	@ (8009938 <__d2b+0xa8>)
 80098ac:	4823      	ldr	r0, [pc, #140]	@ (800993c <__d2b+0xac>)
 80098ae:	f7fe fca9 	bl	8008204 <__assert_func>
 80098b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098ba:	b10d      	cbz	r5, 80098c0 <__d2b+0x30>
 80098bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	f1b8 0300 	subs.w	r3, r8, #0
 80098c6:	d024      	beq.n	8009912 <__d2b+0x82>
 80098c8:	4668      	mov	r0, sp
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	f7ff fd17 	bl	80092fe <__lo0bits>
 80098d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098d4:	b1d8      	cbz	r0, 800990e <__d2b+0x7e>
 80098d6:	f1c0 0320 	rsb	r3, r0, #32
 80098da:	fa02 f303 	lsl.w	r3, r2, r3
 80098de:	430b      	orrs	r3, r1
 80098e0:	40c2      	lsrs	r2, r0
 80098e2:	6163      	str	r3, [r4, #20]
 80098e4:	9201      	str	r2, [sp, #4]
 80098e6:	9b01      	ldr	r3, [sp, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bf0c      	ite	eq
 80098ec:	2201      	moveq	r2, #1
 80098ee:	2202      	movne	r2, #2
 80098f0:	61a3      	str	r3, [r4, #24]
 80098f2:	6122      	str	r2, [r4, #16]
 80098f4:	b1ad      	cbz	r5, 8009922 <__d2b+0x92>
 80098f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80098fa:	4405      	add	r5, r0
 80098fc:	6035      	str	r5, [r6, #0]
 80098fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009904:	6018      	str	r0, [r3, #0]
 8009906:	4620      	mov	r0, r4
 8009908:	b002      	add	sp, #8
 800990a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800990e:	6161      	str	r1, [r4, #20]
 8009910:	e7e9      	b.n	80098e6 <__d2b+0x56>
 8009912:	a801      	add	r0, sp, #4
 8009914:	f7ff fcf3 	bl	80092fe <__lo0bits>
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	6163      	str	r3, [r4, #20]
 800991e:	3020      	adds	r0, #32
 8009920:	e7e7      	b.n	80098f2 <__d2b+0x62>
 8009922:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009926:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800992a:	6030      	str	r0, [r6, #0]
 800992c:	6918      	ldr	r0, [r3, #16]
 800992e:	f7ff fcc7 	bl	80092c0 <__hi0bits>
 8009932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009936:	e7e4      	b.n	8009902 <__d2b+0x72>
 8009938:	0800e996 	.word	0x0800e996
 800993c:	0800e9a7 	.word	0x0800e9a7

08009940 <__ratio>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	b085      	sub	sp, #20
 8009946:	e9cd 1000 	strd	r1, r0, [sp]
 800994a:	a902      	add	r1, sp, #8
 800994c:	f7ff ff58 	bl	8009800 <__b2d>
 8009950:	468b      	mov	fp, r1
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	9800      	ldr	r0, [sp, #0]
 8009958:	a903      	add	r1, sp, #12
 800995a:	f7ff ff51 	bl	8009800 <__b2d>
 800995e:	460d      	mov	r5, r1
 8009960:	9b01      	ldr	r3, [sp, #4]
 8009962:	4689      	mov	r9, r1
 8009964:	6919      	ldr	r1, [r3, #16]
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	4604      	mov	r4, r0
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	4630      	mov	r0, r6
 800996e:	1ac9      	subs	r1, r1, r3
 8009970:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009974:	1a9b      	subs	r3, r3, r2
 8009976:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800997a:	2b00      	cmp	r3, #0
 800997c:	bfcd      	iteet	gt
 800997e:	463a      	movgt	r2, r7
 8009980:	462a      	movle	r2, r5
 8009982:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009986:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800998a:	bfd8      	it	le
 800998c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009990:	464b      	mov	r3, r9
 8009992:	4622      	mov	r2, r4
 8009994:	4659      	mov	r1, fp
 8009996:	f7f6 ff7d 	bl	8000894 <__aeabi_ddiv>
 800999a:	b005      	add	sp, #20
 800999c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099a0 <__copybits>:
 80099a0:	3901      	subs	r1, #1
 80099a2:	b570      	push	{r4, r5, r6, lr}
 80099a4:	1149      	asrs	r1, r1, #5
 80099a6:	6914      	ldr	r4, [r2, #16]
 80099a8:	3101      	adds	r1, #1
 80099aa:	f102 0314 	add.w	r3, r2, #20
 80099ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099b6:	1f05      	subs	r5, r0, #4
 80099b8:	42a3      	cmp	r3, r4
 80099ba:	d30c      	bcc.n	80099d6 <__copybits+0x36>
 80099bc:	1aa3      	subs	r3, r4, r2
 80099be:	3b11      	subs	r3, #17
 80099c0:	f023 0303 	bic.w	r3, r3, #3
 80099c4:	3211      	adds	r2, #17
 80099c6:	42a2      	cmp	r2, r4
 80099c8:	bf88      	it	hi
 80099ca:	2300      	movhi	r3, #0
 80099cc:	4418      	add	r0, r3
 80099ce:	2300      	movs	r3, #0
 80099d0:	4288      	cmp	r0, r1
 80099d2:	d305      	bcc.n	80099e0 <__copybits+0x40>
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
 80099d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80099da:	f845 6f04 	str.w	r6, [r5, #4]!
 80099de:	e7eb      	b.n	80099b8 <__copybits+0x18>
 80099e0:	f840 3b04 	str.w	r3, [r0], #4
 80099e4:	e7f4      	b.n	80099d0 <__copybits+0x30>

080099e6 <__any_on>:
 80099e6:	f100 0214 	add.w	r2, r0, #20
 80099ea:	6900      	ldr	r0, [r0, #16]
 80099ec:	114b      	asrs	r3, r1, #5
 80099ee:	4298      	cmp	r0, r3
 80099f0:	b510      	push	{r4, lr}
 80099f2:	db11      	blt.n	8009a18 <__any_on+0x32>
 80099f4:	dd0a      	ble.n	8009a0c <__any_on+0x26>
 80099f6:	f011 011f 	ands.w	r1, r1, #31
 80099fa:	d007      	beq.n	8009a0c <__any_on+0x26>
 80099fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a00:	fa24 f001 	lsr.w	r0, r4, r1
 8009a04:	fa00 f101 	lsl.w	r1, r0, r1
 8009a08:	428c      	cmp	r4, r1
 8009a0a:	d10b      	bne.n	8009a24 <__any_on+0x3e>
 8009a0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d803      	bhi.n	8009a1c <__any_on+0x36>
 8009a14:	2000      	movs	r0, #0
 8009a16:	bd10      	pop	{r4, pc}
 8009a18:	4603      	mov	r3, r0
 8009a1a:	e7f7      	b.n	8009a0c <__any_on+0x26>
 8009a1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a20:	2900      	cmp	r1, #0
 8009a22:	d0f5      	beq.n	8009a10 <__any_on+0x2a>
 8009a24:	2001      	movs	r0, #1
 8009a26:	e7f6      	b.n	8009a16 <__any_on+0x30>

08009a28 <sulp>:
 8009a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	4690      	mov	r8, r2
 8009a30:	f7ff fec6 	bl	80097c0 <__ulp>
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	f1b8 0f00 	cmp.w	r8, #0
 8009a3c:	d011      	beq.n	8009a62 <sulp+0x3a>
 8009a3e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009a42:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	dd0b      	ble.n	8009a62 <sulp+0x3a>
 8009a4a:	2400      	movs	r4, #0
 8009a4c:	051b      	lsls	r3, r3, #20
 8009a4e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009a52:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009a56:	4622      	mov	r2, r4
 8009a58:	462b      	mov	r3, r5
 8009a5a:	f7f6 fdf1 	bl	8000640 <__aeabi_dmul>
 8009a5e:	4604      	mov	r4, r0
 8009a60:	460d      	mov	r5, r1
 8009a62:	4620      	mov	r0, r4
 8009a64:	4629      	mov	r1, r5
 8009a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a6a:	0000      	movs	r0, r0
 8009a6c:	0000      	movs	r0, r0
	...

08009a70 <_strtod_l>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	b09f      	sub	sp, #124	@ 0x7c
 8009a76:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009a78:	2200      	movs	r2, #0
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009a7e:	f04f 0a00 	mov.w	sl, #0
 8009a82:	f04f 0b00 	mov.w	fp, #0
 8009a86:	460a      	mov	r2, r1
 8009a88:	9005      	str	r0, [sp, #20]
 8009a8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a8c:	7811      	ldrb	r1, [r2, #0]
 8009a8e:	292b      	cmp	r1, #43	@ 0x2b
 8009a90:	d048      	beq.n	8009b24 <_strtod_l+0xb4>
 8009a92:	d836      	bhi.n	8009b02 <_strtod_l+0x92>
 8009a94:	290d      	cmp	r1, #13
 8009a96:	d830      	bhi.n	8009afa <_strtod_l+0x8a>
 8009a98:	2908      	cmp	r1, #8
 8009a9a:	d830      	bhi.n	8009afe <_strtod_l+0x8e>
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	d039      	beq.n	8009b14 <_strtod_l+0xa4>
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009aa4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009aa6:	782a      	ldrb	r2, [r5, #0]
 8009aa8:	2a30      	cmp	r2, #48	@ 0x30
 8009aaa:	f040 80b1 	bne.w	8009c10 <_strtod_l+0x1a0>
 8009aae:	786a      	ldrb	r2, [r5, #1]
 8009ab0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ab4:	2a58      	cmp	r2, #88	@ 0x58
 8009ab6:	d16c      	bne.n	8009b92 <_strtod_l+0x122>
 8009ab8:	9302      	str	r3, [sp, #8]
 8009aba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009abc:	4a8e      	ldr	r2, [pc, #568]	@ (8009cf8 <_strtod_l+0x288>)
 8009abe:	9301      	str	r3, [sp, #4]
 8009ac0:	ab1a      	add	r3, sp, #104	@ 0x68
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	9805      	ldr	r0, [sp, #20]
 8009ac6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ac8:	a919      	add	r1, sp, #100	@ 0x64
 8009aca:	f001 f86d 	bl	800aba8 <__gethex>
 8009ace:	f010 060f 	ands.w	r6, r0, #15
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	d005      	beq.n	8009ae2 <_strtod_l+0x72>
 8009ad6:	2e06      	cmp	r6, #6
 8009ad8:	d126      	bne.n	8009b28 <_strtod_l+0xb8>
 8009ada:	2300      	movs	r3, #0
 8009adc:	3501      	adds	r5, #1
 8009ade:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ae2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f040 8584 	bne.w	800a5f2 <_strtod_l+0xb82>
 8009aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009aec:	b1bb      	cbz	r3, 8009b1e <_strtod_l+0xae>
 8009aee:	4650      	mov	r0, sl
 8009af0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009af4:	b01f      	add	sp, #124	@ 0x7c
 8009af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afa:	2920      	cmp	r1, #32
 8009afc:	d1d0      	bne.n	8009aa0 <_strtod_l+0x30>
 8009afe:	3201      	adds	r2, #1
 8009b00:	e7c3      	b.n	8009a8a <_strtod_l+0x1a>
 8009b02:	292d      	cmp	r1, #45	@ 0x2d
 8009b04:	d1cc      	bne.n	8009aa0 <_strtod_l+0x30>
 8009b06:	2101      	movs	r1, #1
 8009b08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009b0a:	1c51      	adds	r1, r2, #1
 8009b0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b0e:	7852      	ldrb	r2, [r2, #1]
 8009b10:	2a00      	cmp	r2, #0
 8009b12:	d1c7      	bne.n	8009aa4 <_strtod_l+0x34>
 8009b14:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b16:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f040 8568 	bne.w	800a5ee <_strtod_l+0xb7e>
 8009b1e:	4650      	mov	r0, sl
 8009b20:	4659      	mov	r1, fp
 8009b22:	e7e7      	b.n	8009af4 <_strtod_l+0x84>
 8009b24:	2100      	movs	r1, #0
 8009b26:	e7ef      	b.n	8009b08 <_strtod_l+0x98>
 8009b28:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b2a:	b13a      	cbz	r2, 8009b3c <_strtod_l+0xcc>
 8009b2c:	2135      	movs	r1, #53	@ 0x35
 8009b2e:	a81c      	add	r0, sp, #112	@ 0x70
 8009b30:	f7ff ff36 	bl	80099a0 <__copybits>
 8009b34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b36:	9805      	ldr	r0, [sp, #20]
 8009b38:	f7ff fb10 	bl	800915c <_Bfree>
 8009b3c:	3e01      	subs	r6, #1
 8009b3e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009b40:	2e04      	cmp	r6, #4
 8009b42:	d806      	bhi.n	8009b52 <_strtod_l+0xe2>
 8009b44:	e8df f006 	tbb	[pc, r6]
 8009b48:	201d0314 	.word	0x201d0314
 8009b4c:	14          	.byte	0x14
 8009b4d:	00          	.byte	0x00
 8009b4e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009b52:	05e1      	lsls	r1, r4, #23
 8009b54:	bf48      	it	mi
 8009b56:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009b5a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b5e:	0d1b      	lsrs	r3, r3, #20
 8009b60:	051b      	lsls	r3, r3, #20
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1bd      	bne.n	8009ae2 <_strtod_l+0x72>
 8009b66:	f7fe faf7 	bl	8008158 <__errno>
 8009b6a:	2322      	movs	r3, #34	@ 0x22
 8009b6c:	6003      	str	r3, [r0, #0]
 8009b6e:	e7b8      	b.n	8009ae2 <_strtod_l+0x72>
 8009b70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009b78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b7c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b80:	e7e7      	b.n	8009b52 <_strtod_l+0xe2>
 8009b82:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009cfc <_strtod_l+0x28c>
 8009b86:	e7e4      	b.n	8009b52 <_strtod_l+0xe2>
 8009b88:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b8c:	f04f 3aff 	mov.w	sl, #4294967295
 8009b90:	e7df      	b.n	8009b52 <_strtod_l+0xe2>
 8009b92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	2b30      	cmp	r3, #48	@ 0x30
 8009b9c:	d0f9      	beq.n	8009b92 <_strtod_l+0x122>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d09f      	beq.n	8009ae2 <_strtod_l+0x72>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ba6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ba8:	220a      	movs	r2, #10
 8009baa:	930c      	str	r3, [sp, #48]	@ 0x30
 8009bac:	2300      	movs	r3, #0
 8009bae:	461f      	mov	r7, r3
 8009bb0:	9308      	str	r3, [sp, #32]
 8009bb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bb4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009bb6:	7805      	ldrb	r5, [r0, #0]
 8009bb8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009bbc:	b2d9      	uxtb	r1, r3
 8009bbe:	2909      	cmp	r1, #9
 8009bc0:	d928      	bls.n	8009c14 <_strtod_l+0x1a4>
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	494e      	ldr	r1, [pc, #312]	@ (8009d00 <_strtod_l+0x290>)
 8009bc6:	f000 ff43 	bl	800aa50 <strncmp>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d032      	beq.n	8009c34 <_strtod_l+0x1c4>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	462a      	mov	r2, r5
 8009bd2:	4681      	mov	r9, r0
 8009bd4:	463d      	mov	r5, r7
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2a65      	cmp	r2, #101	@ 0x65
 8009bda:	d001      	beq.n	8009be0 <_strtod_l+0x170>
 8009bdc:	2a45      	cmp	r2, #69	@ 0x45
 8009bde:	d114      	bne.n	8009c0a <_strtod_l+0x19a>
 8009be0:	b91d      	cbnz	r5, 8009bea <_strtod_l+0x17a>
 8009be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009be4:	4302      	orrs	r2, r0
 8009be6:	d095      	beq.n	8009b14 <_strtod_l+0xa4>
 8009be8:	2500      	movs	r5, #0
 8009bea:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009bec:	1c62      	adds	r2, r4, #1
 8009bee:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bf0:	7862      	ldrb	r2, [r4, #1]
 8009bf2:	2a2b      	cmp	r2, #43	@ 0x2b
 8009bf4:	d077      	beq.n	8009ce6 <_strtod_l+0x276>
 8009bf6:	2a2d      	cmp	r2, #45	@ 0x2d
 8009bf8:	d07b      	beq.n	8009cf2 <_strtod_l+0x282>
 8009bfa:	f04f 0c00 	mov.w	ip, #0
 8009bfe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009c02:	2909      	cmp	r1, #9
 8009c04:	f240 8082 	bls.w	8009d0c <_strtod_l+0x29c>
 8009c08:	9419      	str	r4, [sp, #100]	@ 0x64
 8009c0a:	f04f 0800 	mov.w	r8, #0
 8009c0e:	e0a2      	b.n	8009d56 <_strtod_l+0x2e6>
 8009c10:	2300      	movs	r3, #0
 8009c12:	e7c7      	b.n	8009ba4 <_strtod_l+0x134>
 8009c14:	2f08      	cmp	r7, #8
 8009c16:	bfd5      	itete	le
 8009c18:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009c1a:	9908      	ldrgt	r1, [sp, #32]
 8009c1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c20:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009c24:	f100 0001 	add.w	r0, r0, #1
 8009c28:	bfd4      	ite	le
 8009c2a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009c2c:	9308      	strgt	r3, [sp, #32]
 8009c2e:	3701      	adds	r7, #1
 8009c30:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c32:	e7bf      	b.n	8009bb4 <_strtod_l+0x144>
 8009c34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c3a:	785a      	ldrb	r2, [r3, #1]
 8009c3c:	b37f      	cbz	r7, 8009c9e <_strtod_l+0x22e>
 8009c3e:	4681      	mov	r9, r0
 8009c40:	463d      	mov	r5, r7
 8009c42:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	d912      	bls.n	8009c70 <_strtod_l+0x200>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e7c4      	b.n	8009bd8 <_strtod_l+0x168>
 8009c4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c50:	3001      	adds	r0, #1
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c56:	785a      	ldrb	r2, [r3, #1]
 8009c58:	2a30      	cmp	r2, #48	@ 0x30
 8009c5a:	d0f8      	beq.n	8009c4e <_strtod_l+0x1de>
 8009c5c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009c60:	2b08      	cmp	r3, #8
 8009c62:	f200 84cb 	bhi.w	800a5fc <_strtod_l+0xb8c>
 8009c66:	4681      	mov	r9, r0
 8009c68:	2000      	movs	r0, #0
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c6e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c70:	3a30      	subs	r2, #48	@ 0x30
 8009c72:	f100 0301 	add.w	r3, r0, #1
 8009c76:	d02a      	beq.n	8009cce <_strtod_l+0x25e>
 8009c78:	4499      	add	r9, r3
 8009c7a:	210a      	movs	r1, #10
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	eb00 0c05 	add.w	ip, r0, r5
 8009c82:	4563      	cmp	r3, ip
 8009c84:	d10d      	bne.n	8009ca2 <_strtod_l+0x232>
 8009c86:	1c69      	adds	r1, r5, #1
 8009c88:	4401      	add	r1, r0
 8009c8a:	4428      	add	r0, r5
 8009c8c:	2808      	cmp	r0, #8
 8009c8e:	dc16      	bgt.n	8009cbe <_strtod_l+0x24e>
 8009c90:	230a      	movs	r3, #10
 8009c92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c94:	fb03 2300 	mla	r3, r3, r0, r2
 8009c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e018      	b.n	8009cd0 <_strtod_l+0x260>
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	e7da      	b.n	8009c58 <_strtod_l+0x1e8>
 8009ca2:	2b08      	cmp	r3, #8
 8009ca4:	f103 0301 	add.w	r3, r3, #1
 8009ca8:	dc03      	bgt.n	8009cb2 <_strtod_l+0x242>
 8009caa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009cac:	434e      	muls	r6, r1
 8009cae:	960a      	str	r6, [sp, #40]	@ 0x28
 8009cb0:	e7e7      	b.n	8009c82 <_strtod_l+0x212>
 8009cb2:	2b10      	cmp	r3, #16
 8009cb4:	bfde      	ittt	le
 8009cb6:	9e08      	ldrle	r6, [sp, #32]
 8009cb8:	434e      	mulle	r6, r1
 8009cba:	9608      	strle	r6, [sp, #32]
 8009cbc:	e7e1      	b.n	8009c82 <_strtod_l+0x212>
 8009cbe:	280f      	cmp	r0, #15
 8009cc0:	dceb      	bgt.n	8009c9a <_strtod_l+0x22a>
 8009cc2:	230a      	movs	r3, #10
 8009cc4:	9808      	ldr	r0, [sp, #32]
 8009cc6:	fb03 2300 	mla	r3, r3, r0, r2
 8009cca:	9308      	str	r3, [sp, #32]
 8009ccc:	e7e5      	b.n	8009c9a <_strtod_l+0x22a>
 8009cce:	4629      	mov	r1, r5
 8009cd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	1c50      	adds	r0, r2, #1
 8009cd6:	9019      	str	r0, [sp, #100]	@ 0x64
 8009cd8:	7852      	ldrb	r2, [r2, #1]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	e7b1      	b.n	8009c42 <_strtod_l+0x1d2>
 8009cde:	f04f 0900 	mov.w	r9, #0
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e77d      	b.n	8009be2 <_strtod_l+0x172>
 8009ce6:	f04f 0c00 	mov.w	ip, #0
 8009cea:	1ca2      	adds	r2, r4, #2
 8009cec:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cee:	78a2      	ldrb	r2, [r4, #2]
 8009cf0:	e785      	b.n	8009bfe <_strtod_l+0x18e>
 8009cf2:	f04f 0c01 	mov.w	ip, #1
 8009cf6:	e7f8      	b.n	8009cea <_strtod_l+0x27a>
 8009cf8:	0800eb18 	.word	0x0800eb18
 8009cfc:	7ff00000 	.word	0x7ff00000
 8009d00:	0800eb00 	.word	0x0800eb00
 8009d04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d06:	1c51      	adds	r1, r2, #1
 8009d08:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d0a:	7852      	ldrb	r2, [r2, #1]
 8009d0c:	2a30      	cmp	r2, #48	@ 0x30
 8009d0e:	d0f9      	beq.n	8009d04 <_strtod_l+0x294>
 8009d10:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009d14:	2908      	cmp	r1, #8
 8009d16:	f63f af78 	bhi.w	8009c0a <_strtod_l+0x19a>
 8009d1a:	f04f 080a 	mov.w	r8, #10
 8009d1e:	3a30      	subs	r2, #48	@ 0x30
 8009d20:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d24:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009d26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d28:	1c56      	adds	r6, r2, #1
 8009d2a:	9619      	str	r6, [sp, #100]	@ 0x64
 8009d2c:	7852      	ldrb	r2, [r2, #1]
 8009d2e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009d32:	f1be 0f09 	cmp.w	lr, #9
 8009d36:	d939      	bls.n	8009dac <_strtod_l+0x33c>
 8009d38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009d3e:	1a76      	subs	r6, r6, r1
 8009d40:	2e08      	cmp	r6, #8
 8009d42:	dc03      	bgt.n	8009d4c <_strtod_l+0x2dc>
 8009d44:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d46:	4588      	cmp	r8, r1
 8009d48:	bfa8      	it	ge
 8009d4a:	4688      	movge	r8, r1
 8009d4c:	f1bc 0f00 	cmp.w	ip, #0
 8009d50:	d001      	beq.n	8009d56 <_strtod_l+0x2e6>
 8009d52:	f1c8 0800 	rsb	r8, r8, #0
 8009d56:	2d00      	cmp	r5, #0
 8009d58:	d14e      	bne.n	8009df8 <_strtod_l+0x388>
 8009d5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d5c:	4308      	orrs	r0, r1
 8009d5e:	f47f aec0 	bne.w	8009ae2 <_strtod_l+0x72>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f47f aed6 	bne.w	8009b14 <_strtod_l+0xa4>
 8009d68:	2a69      	cmp	r2, #105	@ 0x69
 8009d6a:	d028      	beq.n	8009dbe <_strtod_l+0x34e>
 8009d6c:	dc25      	bgt.n	8009dba <_strtod_l+0x34a>
 8009d6e:	2a49      	cmp	r2, #73	@ 0x49
 8009d70:	d025      	beq.n	8009dbe <_strtod_l+0x34e>
 8009d72:	2a4e      	cmp	r2, #78	@ 0x4e
 8009d74:	f47f aece 	bne.w	8009b14 <_strtod_l+0xa4>
 8009d78:	499a      	ldr	r1, [pc, #616]	@ (8009fe4 <_strtod_l+0x574>)
 8009d7a:	a819      	add	r0, sp, #100	@ 0x64
 8009d7c:	f001 f936 	bl	800afec <__match>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	f43f aec7 	beq.w	8009b14 <_strtod_l+0xa4>
 8009d86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2b28      	cmp	r3, #40	@ 0x28
 8009d8c:	d12e      	bne.n	8009dec <_strtod_l+0x37c>
 8009d8e:	4996      	ldr	r1, [pc, #600]	@ (8009fe8 <_strtod_l+0x578>)
 8009d90:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d92:	a819      	add	r0, sp, #100	@ 0x64
 8009d94:	f001 f93e 	bl	800b014 <__hexnan>
 8009d98:	2805      	cmp	r0, #5
 8009d9a:	d127      	bne.n	8009dec <_strtod_l+0x37c>
 8009d9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d9e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009da2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009da6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009daa:	e69a      	b.n	8009ae2 <_strtod_l+0x72>
 8009dac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009dae:	fb08 2101 	mla	r1, r8, r1, r2
 8009db2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009db6:	920e      	str	r2, [sp, #56]	@ 0x38
 8009db8:	e7b5      	b.n	8009d26 <_strtod_l+0x2b6>
 8009dba:	2a6e      	cmp	r2, #110	@ 0x6e
 8009dbc:	e7da      	b.n	8009d74 <_strtod_l+0x304>
 8009dbe:	498b      	ldr	r1, [pc, #556]	@ (8009fec <_strtod_l+0x57c>)
 8009dc0:	a819      	add	r0, sp, #100	@ 0x64
 8009dc2:	f001 f913 	bl	800afec <__match>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f43f aea4 	beq.w	8009b14 <_strtod_l+0xa4>
 8009dcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dce:	4988      	ldr	r1, [pc, #544]	@ (8009ff0 <_strtod_l+0x580>)
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	a819      	add	r0, sp, #100	@ 0x64
 8009dd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009dd6:	f001 f909 	bl	800afec <__match>
 8009dda:	b910      	cbnz	r0, 8009de2 <_strtod_l+0x372>
 8009ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dde:	3301      	adds	r3, #1
 8009de0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009de2:	f04f 0a00 	mov.w	sl, #0
 8009de6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009ff4 <_strtod_l+0x584>
 8009dea:	e67a      	b.n	8009ae2 <_strtod_l+0x72>
 8009dec:	4882      	ldr	r0, [pc, #520]	@ (8009ff8 <_strtod_l+0x588>)
 8009dee:	f000 fe51 	bl	800aa94 <nan>
 8009df2:	4682      	mov	sl, r0
 8009df4:	468b      	mov	fp, r1
 8009df6:	e674      	b.n	8009ae2 <_strtod_l+0x72>
 8009df8:	eba8 0309 	sub.w	r3, r8, r9
 8009dfc:	2f00      	cmp	r7, #0
 8009dfe:	bf08      	it	eq
 8009e00:	462f      	moveq	r7, r5
 8009e02:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e04:	2d10      	cmp	r5, #16
 8009e06:	462c      	mov	r4, r5
 8009e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e0a:	bfa8      	it	ge
 8009e0c:	2410      	movge	r4, #16
 8009e0e:	f7f6 fb9d 	bl	800054c <__aeabi_ui2d>
 8009e12:	2d09      	cmp	r5, #9
 8009e14:	4682      	mov	sl, r0
 8009e16:	468b      	mov	fp, r1
 8009e18:	dc11      	bgt.n	8009e3e <_strtod_l+0x3ce>
 8009e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f43f ae60 	beq.w	8009ae2 <_strtod_l+0x72>
 8009e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e24:	dd76      	ble.n	8009f14 <_strtod_l+0x4a4>
 8009e26:	2b16      	cmp	r3, #22
 8009e28:	dc5d      	bgt.n	8009ee6 <_strtod_l+0x476>
 8009e2a:	4974      	ldr	r1, [pc, #464]	@ (8009ffc <_strtod_l+0x58c>)
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e32:	465b      	mov	r3, fp
 8009e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e38:	f7f6 fc02 	bl	8000640 <__aeabi_dmul>
 8009e3c:	e7d9      	b.n	8009df2 <_strtod_l+0x382>
 8009e3e:	4b6f      	ldr	r3, [pc, #444]	@ (8009ffc <_strtod_l+0x58c>)
 8009e40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009e48:	f7f6 fbfa 	bl	8000640 <__aeabi_dmul>
 8009e4c:	4682      	mov	sl, r0
 8009e4e:	9808      	ldr	r0, [sp, #32]
 8009e50:	468b      	mov	fp, r1
 8009e52:	f7f6 fb7b 	bl	800054c <__aeabi_ui2d>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	4659      	mov	r1, fp
 8009e5e:	f7f6 fa39 	bl	80002d4 <__adddf3>
 8009e62:	2d0f      	cmp	r5, #15
 8009e64:	4682      	mov	sl, r0
 8009e66:	468b      	mov	fp, r1
 8009e68:	ddd7      	ble.n	8009e1a <_strtod_l+0x3aa>
 8009e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6c:	1b2c      	subs	r4, r5, r4
 8009e6e:	441c      	add	r4, r3
 8009e70:	2c00      	cmp	r4, #0
 8009e72:	f340 8096 	ble.w	8009fa2 <_strtod_l+0x532>
 8009e76:	f014 030f 	ands.w	r3, r4, #15
 8009e7a:	d00a      	beq.n	8009e92 <_strtod_l+0x422>
 8009e7c:	495f      	ldr	r1, [pc, #380]	@ (8009ffc <_strtod_l+0x58c>)
 8009e7e:	4652      	mov	r2, sl
 8009e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e88:	465b      	mov	r3, fp
 8009e8a:	f7f6 fbd9 	bl	8000640 <__aeabi_dmul>
 8009e8e:	4682      	mov	sl, r0
 8009e90:	468b      	mov	fp, r1
 8009e92:	f034 040f 	bics.w	r4, r4, #15
 8009e96:	d073      	beq.n	8009f80 <_strtod_l+0x510>
 8009e98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e9c:	dd48      	ble.n	8009f30 <_strtod_l+0x4c0>
 8009e9e:	2400      	movs	r4, #0
 8009ea0:	46a0      	mov	r8, r4
 8009ea2:	46a1      	mov	r9, r4
 8009ea4:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ea6:	2322      	movs	r3, #34	@ 0x22
 8009ea8:	f04f 0a00 	mov.w	sl, #0
 8009eac:	9a05      	ldr	r2, [sp, #20]
 8009eae:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009ff4 <_strtod_l+0x584>
 8009eb2:	6013      	str	r3, [r2, #0]
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f43f ae13 	beq.w	8009ae2 <_strtod_l+0x72>
 8009ebc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ebe:	9805      	ldr	r0, [sp, #20]
 8009ec0:	f7ff f94c 	bl	800915c <_Bfree>
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	9805      	ldr	r0, [sp, #20]
 8009ec8:	f7ff f948 	bl	800915c <_Bfree>
 8009ecc:	4641      	mov	r1, r8
 8009ece:	9805      	ldr	r0, [sp, #20]
 8009ed0:	f7ff f944 	bl	800915c <_Bfree>
 8009ed4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ed6:	9805      	ldr	r0, [sp, #20]
 8009ed8:	f7ff f940 	bl	800915c <_Bfree>
 8009edc:	4621      	mov	r1, r4
 8009ede:	9805      	ldr	r0, [sp, #20]
 8009ee0:	f7ff f93c 	bl	800915c <_Bfree>
 8009ee4:	e5fd      	b.n	8009ae2 <_strtod_l+0x72>
 8009ee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ee8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009eec:	4293      	cmp	r3, r2
 8009eee:	dbbc      	blt.n	8009e6a <_strtod_l+0x3fa>
 8009ef0:	4c42      	ldr	r4, [pc, #264]	@ (8009ffc <_strtod_l+0x58c>)
 8009ef2:	f1c5 050f 	rsb	r5, r5, #15
 8009ef6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009efa:	4652      	mov	r2, sl
 8009efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f00:	465b      	mov	r3, fp
 8009f02:	f7f6 fb9d 	bl	8000640 <__aeabi_dmul>
 8009f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f08:	1b5d      	subs	r5, r3, r5
 8009f0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f12:	e791      	b.n	8009e38 <_strtod_l+0x3c8>
 8009f14:	3316      	adds	r3, #22
 8009f16:	dba8      	blt.n	8009e6a <_strtod_l+0x3fa>
 8009f18:	4b38      	ldr	r3, [pc, #224]	@ (8009ffc <_strtod_l+0x58c>)
 8009f1a:	eba9 0808 	sub.w	r8, r9, r8
 8009f1e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009f22:	4650      	mov	r0, sl
 8009f24:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009f28:	4659      	mov	r1, fp
 8009f2a:	f7f6 fcb3 	bl	8000894 <__aeabi_ddiv>
 8009f2e:	e760      	b.n	8009df2 <_strtod_l+0x382>
 8009f30:	4b33      	ldr	r3, [pc, #204]	@ (800a000 <_strtod_l+0x590>)
 8009f32:	4650      	mov	r0, sl
 8009f34:	9308      	str	r3, [sp, #32]
 8009f36:	2300      	movs	r3, #0
 8009f38:	4659      	mov	r1, fp
 8009f3a:	461e      	mov	r6, r3
 8009f3c:	1124      	asrs	r4, r4, #4
 8009f3e:	2c01      	cmp	r4, #1
 8009f40:	dc21      	bgt.n	8009f86 <_strtod_l+0x516>
 8009f42:	b10b      	cbz	r3, 8009f48 <_strtod_l+0x4d8>
 8009f44:	4682      	mov	sl, r0
 8009f46:	468b      	mov	fp, r1
 8009f48:	492d      	ldr	r1, [pc, #180]	@ (800a000 <_strtod_l+0x590>)
 8009f4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009f4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009f52:	4652      	mov	r2, sl
 8009f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f58:	465b      	mov	r3, fp
 8009f5a:	f7f6 fb71 	bl	8000640 <__aeabi_dmul>
 8009f5e:	4b25      	ldr	r3, [pc, #148]	@ (8009ff4 <_strtod_l+0x584>)
 8009f60:	460a      	mov	r2, r1
 8009f62:	400b      	ands	r3, r1
 8009f64:	4927      	ldr	r1, [pc, #156]	@ (800a004 <_strtod_l+0x594>)
 8009f66:	4682      	mov	sl, r0
 8009f68:	428b      	cmp	r3, r1
 8009f6a:	d898      	bhi.n	8009e9e <_strtod_l+0x42e>
 8009f6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009f70:	428b      	cmp	r3, r1
 8009f72:	bf86      	itte	hi
 8009f74:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f78:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a008 <_strtod_l+0x598>
 8009f7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f80:	2300      	movs	r3, #0
 8009f82:	9308      	str	r3, [sp, #32]
 8009f84:	e07a      	b.n	800a07c <_strtod_l+0x60c>
 8009f86:	07e2      	lsls	r2, r4, #31
 8009f88:	d505      	bpl.n	8009f96 <_strtod_l+0x526>
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7f6 fb56 	bl	8000640 <__aeabi_dmul>
 8009f94:	2301      	movs	r3, #1
 8009f96:	9a08      	ldr	r2, [sp, #32]
 8009f98:	3601      	adds	r6, #1
 8009f9a:	3208      	adds	r2, #8
 8009f9c:	1064      	asrs	r4, r4, #1
 8009f9e:	9208      	str	r2, [sp, #32]
 8009fa0:	e7cd      	b.n	8009f3e <_strtod_l+0x4ce>
 8009fa2:	d0ed      	beq.n	8009f80 <_strtod_l+0x510>
 8009fa4:	4264      	negs	r4, r4
 8009fa6:	f014 020f 	ands.w	r2, r4, #15
 8009faa:	d00a      	beq.n	8009fc2 <_strtod_l+0x552>
 8009fac:	4b13      	ldr	r3, [pc, #76]	@ (8009ffc <_strtod_l+0x58c>)
 8009fae:	4650      	mov	r0, sl
 8009fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fb4:	4659      	mov	r1, fp
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f7f6 fc6b 	bl	8000894 <__aeabi_ddiv>
 8009fbe:	4682      	mov	sl, r0
 8009fc0:	468b      	mov	fp, r1
 8009fc2:	1124      	asrs	r4, r4, #4
 8009fc4:	d0dc      	beq.n	8009f80 <_strtod_l+0x510>
 8009fc6:	2c1f      	cmp	r4, #31
 8009fc8:	dd20      	ble.n	800a00c <_strtod_l+0x59c>
 8009fca:	2400      	movs	r4, #0
 8009fcc:	46a0      	mov	r8, r4
 8009fce:	46a1      	mov	r9, r4
 8009fd0:	940a      	str	r4, [sp, #40]	@ 0x28
 8009fd2:	2322      	movs	r3, #34	@ 0x22
 8009fd4:	9a05      	ldr	r2, [sp, #20]
 8009fd6:	f04f 0a00 	mov.w	sl, #0
 8009fda:	f04f 0b00 	mov.w	fp, #0
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	e768      	b.n	8009eb4 <_strtod_l+0x444>
 8009fe2:	bf00      	nop
 8009fe4:	0800e858 	.word	0x0800e858
 8009fe8:	0800eb04 	.word	0x0800eb04
 8009fec:	0800e850 	.word	0x0800e850
 8009ff0:	0800e934 	.word	0x0800e934
 8009ff4:	7ff00000 	.word	0x7ff00000
 8009ff8:	0800e930 	.word	0x0800e930
 8009ffc:	0800ea38 	.word	0x0800ea38
 800a000:	0800ea10 	.word	0x0800ea10
 800a004:	7ca00000 	.word	0x7ca00000
 800a008:	7fefffff 	.word	0x7fefffff
 800a00c:	f014 0310 	ands.w	r3, r4, #16
 800a010:	bf18      	it	ne
 800a012:	236a      	movne	r3, #106	@ 0x6a
 800a014:	4650      	mov	r0, sl
 800a016:	9308      	str	r3, [sp, #32]
 800a018:	4659      	mov	r1, fp
 800a01a:	2300      	movs	r3, #0
 800a01c:	4ea9      	ldr	r6, [pc, #676]	@ (800a2c4 <_strtod_l+0x854>)
 800a01e:	07e2      	lsls	r2, r4, #31
 800a020:	d504      	bpl.n	800a02c <_strtod_l+0x5bc>
 800a022:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a026:	f7f6 fb0b 	bl	8000640 <__aeabi_dmul>
 800a02a:	2301      	movs	r3, #1
 800a02c:	1064      	asrs	r4, r4, #1
 800a02e:	f106 0608 	add.w	r6, r6, #8
 800a032:	d1f4      	bne.n	800a01e <_strtod_l+0x5ae>
 800a034:	b10b      	cbz	r3, 800a03a <_strtod_l+0x5ca>
 800a036:	4682      	mov	sl, r0
 800a038:	468b      	mov	fp, r1
 800a03a:	9b08      	ldr	r3, [sp, #32]
 800a03c:	b1b3      	cbz	r3, 800a06c <_strtod_l+0x5fc>
 800a03e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a042:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a046:	2b00      	cmp	r3, #0
 800a048:	4659      	mov	r1, fp
 800a04a:	dd0f      	ble.n	800a06c <_strtod_l+0x5fc>
 800a04c:	2b1f      	cmp	r3, #31
 800a04e:	dd57      	ble.n	800a100 <_strtod_l+0x690>
 800a050:	2b34      	cmp	r3, #52	@ 0x34
 800a052:	bfd8      	it	le
 800a054:	f04f 33ff 	movle.w	r3, #4294967295
 800a058:	f04f 0a00 	mov.w	sl, #0
 800a05c:	bfcf      	iteee	gt
 800a05e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a062:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a066:	4093      	lslle	r3, r2
 800a068:	ea03 0b01 	andle.w	fp, r3, r1
 800a06c:	2200      	movs	r2, #0
 800a06e:	2300      	movs	r3, #0
 800a070:	4650      	mov	r0, sl
 800a072:	4659      	mov	r1, fp
 800a074:	f7f6 fd4c 	bl	8000b10 <__aeabi_dcmpeq>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d1a6      	bne.n	8009fca <_strtod_l+0x55a>
 800a07c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a07e:	463a      	mov	r2, r7
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a084:	462b      	mov	r3, r5
 800a086:	9805      	ldr	r0, [sp, #20]
 800a088:	f7ff f8d0 	bl	800922c <__s2b>
 800a08c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a08e:	2800      	cmp	r0, #0
 800a090:	f43f af05 	beq.w	8009e9e <_strtod_l+0x42e>
 800a094:	2400      	movs	r4, #0
 800a096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a098:	eba9 0308 	sub.w	r3, r9, r8
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	bfa8      	it	ge
 800a0a0:	2300      	movge	r3, #0
 800a0a2:	46a0      	mov	r8, r4
 800a0a4:	9312      	str	r3, [sp, #72]	@ 0x48
 800a0a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a0aa:	9316      	str	r3, [sp, #88]	@ 0x58
 800a0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ae:	9805      	ldr	r0, [sp, #20]
 800a0b0:	6859      	ldr	r1, [r3, #4]
 800a0b2:	f7ff f813 	bl	80090dc <_Balloc>
 800a0b6:	4681      	mov	r9, r0
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	f43f aef4 	beq.w	8009ea6 <_strtod_l+0x436>
 800a0be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0c0:	300c      	adds	r0, #12
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	f103 010c 	add.w	r1, r3, #12
 800a0c8:	3202      	adds	r2, #2
 800a0ca:	0092      	lsls	r2, r2, #2
 800a0cc:	f7fe f887 	bl	80081de <memcpy>
 800a0d0:	ab1c      	add	r3, sp, #112	@ 0x70
 800a0d2:	9301      	str	r3, [sp, #4]
 800a0d4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	4652      	mov	r2, sl
 800a0da:	465b      	mov	r3, fp
 800a0dc:	9805      	ldr	r0, [sp, #20]
 800a0de:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a0e2:	f7ff fbd5 	bl	8009890 <__d2b>
 800a0e6:	901a      	str	r0, [sp, #104]	@ 0x68
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	f43f aedc 	beq.w	8009ea6 <_strtod_l+0x436>
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	9805      	ldr	r0, [sp, #20]
 800a0f2:	f7ff f931 	bl	8009358 <__i2b>
 800a0f6:	4680      	mov	r8, r0
 800a0f8:	b948      	cbnz	r0, 800a10e <_strtod_l+0x69e>
 800a0fa:	f04f 0800 	mov.w	r8, #0
 800a0fe:	e6d2      	b.n	8009ea6 <_strtod_l+0x436>
 800a100:	f04f 32ff 	mov.w	r2, #4294967295
 800a104:	fa02 f303 	lsl.w	r3, r2, r3
 800a108:	ea03 0a0a 	and.w	sl, r3, sl
 800a10c:	e7ae      	b.n	800a06c <_strtod_l+0x5fc>
 800a10e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a110:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a112:	2d00      	cmp	r5, #0
 800a114:	bfab      	itete	ge
 800a116:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a118:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a11a:	18ef      	addge	r7, r5, r3
 800a11c:	1b5e      	sublt	r6, r3, r5
 800a11e:	9b08      	ldr	r3, [sp, #32]
 800a120:	bfa8      	it	ge
 800a122:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a124:	eba5 0503 	sub.w	r5, r5, r3
 800a128:	4415      	add	r5, r2
 800a12a:	4b67      	ldr	r3, [pc, #412]	@ (800a2c8 <_strtod_l+0x858>)
 800a12c:	f105 35ff 	add.w	r5, r5, #4294967295
 800a130:	bfb8      	it	lt
 800a132:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a134:	429d      	cmp	r5, r3
 800a136:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a13a:	da50      	bge.n	800a1de <_strtod_l+0x76e>
 800a13c:	1b5b      	subs	r3, r3, r5
 800a13e:	2b1f      	cmp	r3, #31
 800a140:	f04f 0101 	mov.w	r1, #1
 800a144:	eba2 0203 	sub.w	r2, r2, r3
 800a148:	dc3d      	bgt.n	800a1c6 <_strtod_l+0x756>
 800a14a:	fa01 f303 	lsl.w	r3, r1, r3
 800a14e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a150:	2300      	movs	r3, #0
 800a152:	9310      	str	r3, [sp, #64]	@ 0x40
 800a154:	18bd      	adds	r5, r7, r2
 800a156:	9b08      	ldr	r3, [sp, #32]
 800a158:	42af      	cmp	r7, r5
 800a15a:	4416      	add	r6, r2
 800a15c:	441e      	add	r6, r3
 800a15e:	463b      	mov	r3, r7
 800a160:	bfa8      	it	ge
 800a162:	462b      	movge	r3, r5
 800a164:	42b3      	cmp	r3, r6
 800a166:	bfa8      	it	ge
 800a168:	4633      	movge	r3, r6
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	bfc2      	ittt	gt
 800a16e:	1aed      	subgt	r5, r5, r3
 800a170:	1af6      	subgt	r6, r6, r3
 800a172:	1aff      	subgt	r7, r7, r3
 800a174:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a176:	2b00      	cmp	r3, #0
 800a178:	dd16      	ble.n	800a1a8 <_strtod_l+0x738>
 800a17a:	4641      	mov	r1, r8
 800a17c:	461a      	mov	r2, r3
 800a17e:	9805      	ldr	r0, [sp, #20]
 800a180:	f7ff f9a8 	bl	80094d4 <__pow5mult>
 800a184:	4680      	mov	r8, r0
 800a186:	2800      	cmp	r0, #0
 800a188:	d0b7      	beq.n	800a0fa <_strtod_l+0x68a>
 800a18a:	4601      	mov	r1, r0
 800a18c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a18e:	9805      	ldr	r0, [sp, #20]
 800a190:	f7ff f8f8 	bl	8009384 <__multiply>
 800a194:	900e      	str	r0, [sp, #56]	@ 0x38
 800a196:	2800      	cmp	r0, #0
 800a198:	f43f ae85 	beq.w	8009ea6 <_strtod_l+0x436>
 800a19c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a19e:	9805      	ldr	r0, [sp, #20]
 800a1a0:	f7fe ffdc 	bl	800915c <_Bfree>
 800a1a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	dc1d      	bgt.n	800a1e8 <_strtod_l+0x778>
 800a1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	dd23      	ble.n	800a1fa <_strtod_l+0x78a>
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a1b6:	9805      	ldr	r0, [sp, #20]
 800a1b8:	f7ff f98c 	bl	80094d4 <__pow5mult>
 800a1bc:	4681      	mov	r9, r0
 800a1be:	b9e0      	cbnz	r0, 800a1fa <_strtod_l+0x78a>
 800a1c0:	f04f 0900 	mov.w	r9, #0
 800a1c4:	e66f      	b.n	8009ea6 <_strtod_l+0x436>
 800a1c6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a1ca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a1ce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a1d2:	35e2      	adds	r5, #226	@ 0xe2
 800a1d4:	fa01 f305 	lsl.w	r3, r1, r5
 800a1d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1da:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a1dc:	e7ba      	b.n	800a154 <_strtod_l+0x6e4>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1e6:	e7b5      	b.n	800a154 <_strtod_l+0x6e4>
 800a1e8:	462a      	mov	r2, r5
 800a1ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1ec:	9805      	ldr	r0, [sp, #20]
 800a1ee:	f7ff f9cb 	bl	8009588 <__lshift>
 800a1f2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d1d9      	bne.n	800a1ac <_strtod_l+0x73c>
 800a1f8:	e655      	b.n	8009ea6 <_strtod_l+0x436>
 800a1fa:	2e00      	cmp	r6, #0
 800a1fc:	dd07      	ble.n	800a20e <_strtod_l+0x79e>
 800a1fe:	4649      	mov	r1, r9
 800a200:	4632      	mov	r2, r6
 800a202:	9805      	ldr	r0, [sp, #20]
 800a204:	f7ff f9c0 	bl	8009588 <__lshift>
 800a208:	4681      	mov	r9, r0
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d0d8      	beq.n	800a1c0 <_strtod_l+0x750>
 800a20e:	2f00      	cmp	r7, #0
 800a210:	dd08      	ble.n	800a224 <_strtod_l+0x7b4>
 800a212:	4641      	mov	r1, r8
 800a214:	463a      	mov	r2, r7
 800a216:	9805      	ldr	r0, [sp, #20]
 800a218:	f7ff f9b6 	bl	8009588 <__lshift>
 800a21c:	4680      	mov	r8, r0
 800a21e:	2800      	cmp	r0, #0
 800a220:	f43f ae41 	beq.w	8009ea6 <_strtod_l+0x436>
 800a224:	464a      	mov	r2, r9
 800a226:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a228:	9805      	ldr	r0, [sp, #20]
 800a22a:	f7ff fa35 	bl	8009698 <__mdiff>
 800a22e:	4604      	mov	r4, r0
 800a230:	2800      	cmp	r0, #0
 800a232:	f43f ae38 	beq.w	8009ea6 <_strtod_l+0x436>
 800a236:	68c3      	ldr	r3, [r0, #12]
 800a238:	4641      	mov	r1, r8
 800a23a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a23c:	2300      	movs	r3, #0
 800a23e:	60c3      	str	r3, [r0, #12]
 800a240:	f7ff fa0e 	bl	8009660 <__mcmp>
 800a244:	2800      	cmp	r0, #0
 800a246:	da45      	bge.n	800a2d4 <_strtod_l+0x864>
 800a248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a24a:	ea53 030a 	orrs.w	r3, r3, sl
 800a24e:	d16b      	bne.n	800a328 <_strtod_l+0x8b8>
 800a250:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a254:	2b00      	cmp	r3, #0
 800a256:	d167      	bne.n	800a328 <_strtod_l+0x8b8>
 800a258:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a25c:	0d1b      	lsrs	r3, r3, #20
 800a25e:	051b      	lsls	r3, r3, #20
 800a260:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a264:	d960      	bls.n	800a328 <_strtod_l+0x8b8>
 800a266:	6963      	ldr	r3, [r4, #20]
 800a268:	b913      	cbnz	r3, 800a270 <_strtod_l+0x800>
 800a26a:	6923      	ldr	r3, [r4, #16]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	dd5b      	ble.n	800a328 <_strtod_l+0x8b8>
 800a270:	4621      	mov	r1, r4
 800a272:	2201      	movs	r2, #1
 800a274:	9805      	ldr	r0, [sp, #20]
 800a276:	f7ff f987 	bl	8009588 <__lshift>
 800a27a:	4641      	mov	r1, r8
 800a27c:	4604      	mov	r4, r0
 800a27e:	f7ff f9ef 	bl	8009660 <__mcmp>
 800a282:	2800      	cmp	r0, #0
 800a284:	dd50      	ble.n	800a328 <_strtod_l+0x8b8>
 800a286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a28a:	9a08      	ldr	r2, [sp, #32]
 800a28c:	0d1b      	lsrs	r3, r3, #20
 800a28e:	051b      	lsls	r3, r3, #20
 800a290:	2a00      	cmp	r2, #0
 800a292:	d06a      	beq.n	800a36a <_strtod_l+0x8fa>
 800a294:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a298:	d867      	bhi.n	800a36a <_strtod_l+0x8fa>
 800a29a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a29e:	f67f ae98 	bls.w	8009fd2 <_strtod_l+0x562>
 800a2a2:	4650      	mov	r0, sl
 800a2a4:	4659      	mov	r1, fp
 800a2a6:	4b09      	ldr	r3, [pc, #36]	@ (800a2cc <_strtod_l+0x85c>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f7f6 f9c9 	bl	8000640 <__aeabi_dmul>
 800a2ae:	4b08      	ldr	r3, [pc, #32]	@ (800a2d0 <_strtod_l+0x860>)
 800a2b0:	4682      	mov	sl, r0
 800a2b2:	400b      	ands	r3, r1
 800a2b4:	468b      	mov	fp, r1
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f47f ae00 	bne.w	8009ebc <_strtod_l+0x44c>
 800a2bc:	2322      	movs	r3, #34	@ 0x22
 800a2be:	9a05      	ldr	r2, [sp, #20]
 800a2c0:	6013      	str	r3, [r2, #0]
 800a2c2:	e5fb      	b.n	8009ebc <_strtod_l+0x44c>
 800a2c4:	0800eb30 	.word	0x0800eb30
 800a2c8:	fffffc02 	.word	0xfffffc02
 800a2cc:	39500000 	.word	0x39500000
 800a2d0:	7ff00000 	.word	0x7ff00000
 800a2d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a2d8:	d165      	bne.n	800a3a6 <_strtod_l+0x936>
 800a2da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a2dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2e0:	b35a      	cbz	r2, 800a33a <_strtod_l+0x8ca>
 800a2e2:	4a99      	ldr	r2, [pc, #612]	@ (800a548 <_strtod_l+0xad8>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d12b      	bne.n	800a340 <_strtod_l+0x8d0>
 800a2e8:	9b08      	ldr	r3, [sp, #32]
 800a2ea:	4651      	mov	r1, sl
 800a2ec:	b303      	cbz	r3, 800a330 <_strtod_l+0x8c0>
 800a2ee:	465a      	mov	r2, fp
 800a2f0:	4b96      	ldr	r3, [pc, #600]	@ (800a54c <_strtod_l+0xadc>)
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fc:	d81b      	bhi.n	800a336 <_strtod_l+0x8c6>
 800a2fe:	0d1b      	lsrs	r3, r3, #20
 800a300:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a304:	fa02 f303 	lsl.w	r3, r2, r3
 800a308:	4299      	cmp	r1, r3
 800a30a:	d119      	bne.n	800a340 <_strtod_l+0x8d0>
 800a30c:	4b90      	ldr	r3, [pc, #576]	@ (800a550 <_strtod_l+0xae0>)
 800a30e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a310:	429a      	cmp	r2, r3
 800a312:	d102      	bne.n	800a31a <_strtod_l+0x8aa>
 800a314:	3101      	adds	r1, #1
 800a316:	f43f adc6 	beq.w	8009ea6 <_strtod_l+0x436>
 800a31a:	f04f 0a00 	mov.w	sl, #0
 800a31e:	4b8b      	ldr	r3, [pc, #556]	@ (800a54c <_strtod_l+0xadc>)
 800a320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a322:	401a      	ands	r2, r3
 800a324:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a328:	9b08      	ldr	r3, [sp, #32]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1b9      	bne.n	800a2a2 <_strtod_l+0x832>
 800a32e:	e5c5      	b.n	8009ebc <_strtod_l+0x44c>
 800a330:	f04f 33ff 	mov.w	r3, #4294967295
 800a334:	e7e8      	b.n	800a308 <_strtod_l+0x898>
 800a336:	4613      	mov	r3, r2
 800a338:	e7e6      	b.n	800a308 <_strtod_l+0x898>
 800a33a:	ea53 030a 	orrs.w	r3, r3, sl
 800a33e:	d0a2      	beq.n	800a286 <_strtod_l+0x816>
 800a340:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a342:	b1db      	cbz	r3, 800a37c <_strtod_l+0x90c>
 800a344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a346:	4213      	tst	r3, r2
 800a348:	d0ee      	beq.n	800a328 <_strtod_l+0x8b8>
 800a34a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a34c:	4650      	mov	r0, sl
 800a34e:	4659      	mov	r1, fp
 800a350:	9a08      	ldr	r2, [sp, #32]
 800a352:	b1bb      	cbz	r3, 800a384 <_strtod_l+0x914>
 800a354:	f7ff fb68 	bl	8009a28 <sulp>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a360:	f7f5 ffb8 	bl	80002d4 <__adddf3>
 800a364:	4682      	mov	sl, r0
 800a366:	468b      	mov	fp, r1
 800a368:	e7de      	b.n	800a328 <_strtod_l+0x8b8>
 800a36a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a36e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a372:	f04f 3aff 	mov.w	sl, #4294967295
 800a376:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a37a:	e7d5      	b.n	800a328 <_strtod_l+0x8b8>
 800a37c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a37e:	ea13 0f0a 	tst.w	r3, sl
 800a382:	e7e1      	b.n	800a348 <_strtod_l+0x8d8>
 800a384:	f7ff fb50 	bl	8009a28 <sulp>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a390:	f7f5 ff9e 	bl	80002d0 <__aeabi_dsub>
 800a394:	2200      	movs	r2, #0
 800a396:	2300      	movs	r3, #0
 800a398:	4682      	mov	sl, r0
 800a39a:	468b      	mov	fp, r1
 800a39c:	f7f6 fbb8 	bl	8000b10 <__aeabi_dcmpeq>
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d0c1      	beq.n	800a328 <_strtod_l+0x8b8>
 800a3a4:	e615      	b.n	8009fd2 <_strtod_l+0x562>
 800a3a6:	4641      	mov	r1, r8
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f7ff fac9 	bl	8009940 <__ratio>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	460f      	mov	r7, r1
 800a3b8:	f7f6 fbbe 	bl	8000b38 <__aeabi_dcmple>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d06d      	beq.n	800a49c <_strtod_l+0xa2c>
 800a3c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d178      	bne.n	800a4b8 <_strtod_l+0xa48>
 800a3c6:	f1ba 0f00 	cmp.w	sl, #0
 800a3ca:	d156      	bne.n	800a47a <_strtod_l+0xa0a>
 800a3cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d158      	bne.n	800a488 <_strtod_l+0xa18>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4639      	mov	r1, r7
 800a3dc:	4b5d      	ldr	r3, [pc, #372]	@ (800a554 <_strtod_l+0xae4>)
 800a3de:	f7f6 fba1 	bl	8000b24 <__aeabi_dcmplt>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d157      	bne.n	800a496 <_strtod_l+0xa26>
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	4639      	mov	r1, r7
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	4b5a      	ldr	r3, [pc, #360]	@ (800a558 <_strtod_l+0xae8>)
 800a3ee:	f7f6 f927 	bl	8000640 <__aeabi_dmul>
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460f      	mov	r7, r1
 800a3f6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a3fa:	9606      	str	r6, [sp, #24]
 800a3fc:	9307      	str	r3, [sp, #28]
 800a3fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a402:	4d52      	ldr	r5, [pc, #328]	@ (800a54c <_strtod_l+0xadc>)
 800a404:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a40a:	401d      	ands	r5, r3
 800a40c:	4b53      	ldr	r3, [pc, #332]	@ (800a55c <_strtod_l+0xaec>)
 800a40e:	429d      	cmp	r5, r3
 800a410:	f040 80aa 	bne.w	800a568 <_strtod_l+0xaf8>
 800a414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a416:	4650      	mov	r0, sl
 800a418:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a41c:	4659      	mov	r1, fp
 800a41e:	f7ff f9cf 	bl	80097c0 <__ulp>
 800a422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a426:	f7f6 f90b 	bl	8000640 <__aeabi_dmul>
 800a42a:	4652      	mov	r2, sl
 800a42c:	465b      	mov	r3, fp
 800a42e:	f7f5 ff51 	bl	80002d4 <__adddf3>
 800a432:	460b      	mov	r3, r1
 800a434:	4945      	ldr	r1, [pc, #276]	@ (800a54c <_strtod_l+0xadc>)
 800a436:	4a4a      	ldr	r2, [pc, #296]	@ (800a560 <_strtod_l+0xaf0>)
 800a438:	4019      	ands	r1, r3
 800a43a:	4291      	cmp	r1, r2
 800a43c:	4682      	mov	sl, r0
 800a43e:	d942      	bls.n	800a4c6 <_strtod_l+0xa56>
 800a440:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a442:	4b43      	ldr	r3, [pc, #268]	@ (800a550 <_strtod_l+0xae0>)
 800a444:	429a      	cmp	r2, r3
 800a446:	d103      	bne.n	800a450 <_strtod_l+0x9e0>
 800a448:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a44a:	3301      	adds	r3, #1
 800a44c:	f43f ad2b 	beq.w	8009ea6 <_strtod_l+0x436>
 800a450:	f04f 3aff 	mov.w	sl, #4294967295
 800a454:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a550 <_strtod_l+0xae0>
 800a458:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a45a:	9805      	ldr	r0, [sp, #20]
 800a45c:	f7fe fe7e 	bl	800915c <_Bfree>
 800a460:	4649      	mov	r1, r9
 800a462:	9805      	ldr	r0, [sp, #20]
 800a464:	f7fe fe7a 	bl	800915c <_Bfree>
 800a468:	4641      	mov	r1, r8
 800a46a:	9805      	ldr	r0, [sp, #20]
 800a46c:	f7fe fe76 	bl	800915c <_Bfree>
 800a470:	4621      	mov	r1, r4
 800a472:	9805      	ldr	r0, [sp, #20]
 800a474:	f7fe fe72 	bl	800915c <_Bfree>
 800a478:	e618      	b.n	800a0ac <_strtod_l+0x63c>
 800a47a:	f1ba 0f01 	cmp.w	sl, #1
 800a47e:	d103      	bne.n	800a488 <_strtod_l+0xa18>
 800a480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a482:	2b00      	cmp	r3, #0
 800a484:	f43f ada5 	beq.w	8009fd2 <_strtod_l+0x562>
 800a488:	2200      	movs	r2, #0
 800a48a:	4b36      	ldr	r3, [pc, #216]	@ (800a564 <_strtod_l+0xaf4>)
 800a48c:	2600      	movs	r6, #0
 800a48e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a492:	4f30      	ldr	r7, [pc, #192]	@ (800a554 <_strtod_l+0xae4>)
 800a494:	e7b3      	b.n	800a3fe <_strtod_l+0x98e>
 800a496:	2600      	movs	r6, #0
 800a498:	4f2f      	ldr	r7, [pc, #188]	@ (800a558 <_strtod_l+0xae8>)
 800a49a:	e7ac      	b.n	800a3f6 <_strtod_l+0x986>
 800a49c:	4630      	mov	r0, r6
 800a49e:	4639      	mov	r1, r7
 800a4a0:	4b2d      	ldr	r3, [pc, #180]	@ (800a558 <_strtod_l+0xae8>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f7f6 f8cc 	bl	8000640 <__aeabi_dmul>
 800a4a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	460f      	mov	r7, r1
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0a1      	beq.n	800a3f6 <_strtod_l+0x986>
 800a4b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a4b6:	e7a2      	b.n	800a3fe <_strtod_l+0x98e>
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	4b26      	ldr	r3, [pc, #152]	@ (800a554 <_strtod_l+0xae4>)
 800a4bc:	4616      	mov	r6, r2
 800a4be:	461f      	mov	r7, r3
 800a4c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4c4:	e79b      	b.n	800a3fe <_strtod_l+0x98e>
 800a4c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a4ca:	9b08      	ldr	r3, [sp, #32]
 800a4cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1c1      	bne.n	800a458 <_strtod_l+0x9e8>
 800a4d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4d8:	0d1b      	lsrs	r3, r3, #20
 800a4da:	051b      	lsls	r3, r3, #20
 800a4dc:	429d      	cmp	r5, r3
 800a4de:	d1bb      	bne.n	800a458 <_strtod_l+0x9e8>
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	f7f6 fd02 	bl	8000eec <__aeabi_d2lz>
 800a4e8:	f7f6 f87c 	bl	80005e4 <__aeabi_l2d>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f5 feec 	bl	80002d0 <__aeabi_dsub>
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a500:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a506:	ea46 060a 	orr.w	r6, r6, sl
 800a50a:	431e      	orrs	r6, r3
 800a50c:	d069      	beq.n	800a5e2 <_strtod_l+0xb72>
 800a50e:	a30a      	add	r3, pc, #40	@ (adr r3, 800a538 <_strtod_l+0xac8>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f6 fb06 	bl	8000b24 <__aeabi_dcmplt>
 800a518:	2800      	cmp	r0, #0
 800a51a:	f47f accf 	bne.w	8009ebc <_strtod_l+0x44c>
 800a51e:	a308      	add	r3, pc, #32	@ (adr r3, 800a540 <_strtod_l+0xad0>)
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a528:	f7f6 fb1a 	bl	8000b60 <__aeabi_dcmpgt>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d093      	beq.n	800a458 <_strtod_l+0x9e8>
 800a530:	e4c4      	b.n	8009ebc <_strtod_l+0x44c>
 800a532:	bf00      	nop
 800a534:	f3af 8000 	nop.w
 800a538:	94a03595 	.word	0x94a03595
 800a53c:	3fdfffff 	.word	0x3fdfffff
 800a540:	35afe535 	.word	0x35afe535
 800a544:	3fe00000 	.word	0x3fe00000
 800a548:	000fffff 	.word	0x000fffff
 800a54c:	7ff00000 	.word	0x7ff00000
 800a550:	7fefffff 	.word	0x7fefffff
 800a554:	3ff00000 	.word	0x3ff00000
 800a558:	3fe00000 	.word	0x3fe00000
 800a55c:	7fe00000 	.word	0x7fe00000
 800a560:	7c9fffff 	.word	0x7c9fffff
 800a564:	bff00000 	.word	0xbff00000
 800a568:	9b08      	ldr	r3, [sp, #32]
 800a56a:	b323      	cbz	r3, 800a5b6 <_strtod_l+0xb46>
 800a56c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a570:	d821      	bhi.n	800a5b6 <_strtod_l+0xb46>
 800a572:	a327      	add	r3, pc, #156	@ (adr r3, 800a610 <_strtod_l+0xba0>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	4630      	mov	r0, r6
 800a57a:	4639      	mov	r1, r7
 800a57c:	f7f6 fadc 	bl	8000b38 <__aeabi_dcmple>
 800a580:	b1a0      	cbz	r0, 800a5ac <_strtod_l+0xb3c>
 800a582:	4639      	mov	r1, r7
 800a584:	4630      	mov	r0, r6
 800a586:	f7f6 fb33 	bl	8000bf0 <__aeabi_d2uiz>
 800a58a:	2801      	cmp	r0, #1
 800a58c:	bf38      	it	cc
 800a58e:	2001      	movcc	r0, #1
 800a590:	f7f5 ffdc 	bl	800054c <__aeabi_ui2d>
 800a594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a596:	4606      	mov	r6, r0
 800a598:	460f      	mov	r7, r1
 800a59a:	b9fb      	cbnz	r3, 800a5dc <_strtod_l+0xb6c>
 800a59c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a5a0:	9014      	str	r0, [sp, #80]	@ 0x50
 800a5a2:	9315      	str	r3, [sp, #84]	@ 0x54
 800a5a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a5a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a5ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5ae:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a5b2:	1b5b      	subs	r3, r3, r5
 800a5b4:	9311      	str	r3, [sp, #68]	@ 0x44
 800a5b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5ba:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a5be:	f7ff f8ff 	bl	80097c0 <__ulp>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	4650      	mov	r0, sl
 800a5c8:	4659      	mov	r1, fp
 800a5ca:	f7f6 f839 	bl	8000640 <__aeabi_dmul>
 800a5ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a5d2:	f7f5 fe7f 	bl	80002d4 <__adddf3>
 800a5d6:	4682      	mov	sl, r0
 800a5d8:	468b      	mov	fp, r1
 800a5da:	e776      	b.n	800a4ca <_strtod_l+0xa5a>
 800a5dc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a5e0:	e7e0      	b.n	800a5a4 <_strtod_l+0xb34>
 800a5e2:	a30d      	add	r3, pc, #52	@ (adr r3, 800a618 <_strtod_l+0xba8>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f7f6 fa9c 	bl	8000b24 <__aeabi_dcmplt>
 800a5ec:	e79e      	b.n	800a52c <_strtod_l+0xabc>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5f4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a5f6:	6013      	str	r3, [r2, #0]
 800a5f8:	f7ff ba77 	b.w	8009aea <_strtod_l+0x7a>
 800a5fc:	2a65      	cmp	r2, #101	@ 0x65
 800a5fe:	f43f ab6e 	beq.w	8009cde <_strtod_l+0x26e>
 800a602:	2a45      	cmp	r2, #69	@ 0x45
 800a604:	f43f ab6b 	beq.w	8009cde <_strtod_l+0x26e>
 800a608:	2301      	movs	r3, #1
 800a60a:	f7ff bba6 	b.w	8009d5a <_strtod_l+0x2ea>
 800a60e:	bf00      	nop
 800a610:	ffc00000 	.word	0xffc00000
 800a614:	41dfffff 	.word	0x41dfffff
 800a618:	94a03595 	.word	0x94a03595
 800a61c:	3fcfffff 	.word	0x3fcfffff

0800a620 <_strtod_r>:
 800a620:	4b01      	ldr	r3, [pc, #4]	@ (800a628 <_strtod_r+0x8>)
 800a622:	f7ff ba25 	b.w	8009a70 <_strtod_l>
 800a626:	bf00      	nop
 800a628:	20000090 	.word	0x20000090

0800a62c <__ssputs_r>:
 800a62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a630:	461f      	mov	r7, r3
 800a632:	688e      	ldr	r6, [r1, #8]
 800a634:	4682      	mov	sl, r0
 800a636:	42be      	cmp	r6, r7
 800a638:	460c      	mov	r4, r1
 800a63a:	4690      	mov	r8, r2
 800a63c:	680b      	ldr	r3, [r1, #0]
 800a63e:	d82d      	bhi.n	800a69c <__ssputs_r+0x70>
 800a640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a648:	d026      	beq.n	800a698 <__ssputs_r+0x6c>
 800a64a:	6965      	ldr	r5, [r4, #20]
 800a64c:	6909      	ldr	r1, [r1, #16]
 800a64e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a652:	eba3 0901 	sub.w	r9, r3, r1
 800a656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a65a:	1c7b      	adds	r3, r7, #1
 800a65c:	444b      	add	r3, r9
 800a65e:	106d      	asrs	r5, r5, #1
 800a660:	429d      	cmp	r5, r3
 800a662:	bf38      	it	cc
 800a664:	461d      	movcc	r5, r3
 800a666:	0553      	lsls	r3, r2, #21
 800a668:	d527      	bpl.n	800a6ba <__ssputs_r+0x8e>
 800a66a:	4629      	mov	r1, r5
 800a66c:	f7fe fcaa 	bl	8008fc4 <_malloc_r>
 800a670:	4606      	mov	r6, r0
 800a672:	b360      	cbz	r0, 800a6ce <__ssputs_r+0xa2>
 800a674:	464a      	mov	r2, r9
 800a676:	6921      	ldr	r1, [r4, #16]
 800a678:	f7fd fdb1 	bl	80081de <memcpy>
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a686:	81a3      	strh	r3, [r4, #12]
 800a688:	6126      	str	r6, [r4, #16]
 800a68a:	444e      	add	r6, r9
 800a68c:	6026      	str	r6, [r4, #0]
 800a68e:	463e      	mov	r6, r7
 800a690:	6165      	str	r5, [r4, #20]
 800a692:	eba5 0509 	sub.w	r5, r5, r9
 800a696:	60a5      	str	r5, [r4, #8]
 800a698:	42be      	cmp	r6, r7
 800a69a:	d900      	bls.n	800a69e <__ssputs_r+0x72>
 800a69c:	463e      	mov	r6, r7
 800a69e:	4632      	mov	r2, r6
 800a6a0:	4641      	mov	r1, r8
 800a6a2:	6820      	ldr	r0, [r4, #0]
 800a6a4:	f7fd fc55 	bl	8007f52 <memmove>
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	1b9b      	subs	r3, r3, r6
 800a6ae:	60a3      	str	r3, [r4, #8]
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	4433      	add	r3, r6
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ba:	462a      	mov	r2, r5
 800a6bc:	f000 fd57 	bl	800b16e <_realloc_r>
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d1e0      	bne.n	800a688 <__ssputs_r+0x5c>
 800a6c6:	4650      	mov	r0, sl
 800a6c8:	6921      	ldr	r1, [r4, #16]
 800a6ca:	f7fe fc09 	bl	8008ee0 <_free_r>
 800a6ce:	230c      	movs	r3, #12
 800a6d0:	f8ca 3000 	str.w	r3, [sl]
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	e7e9      	b.n	800a6b6 <__ssputs_r+0x8a>
	...

0800a6e4 <_svfiprintf_r>:
 800a6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	4698      	mov	r8, r3
 800a6ea:	898b      	ldrh	r3, [r1, #12]
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	061b      	lsls	r3, r3, #24
 800a6f0:	460d      	mov	r5, r1
 800a6f2:	4614      	mov	r4, r2
 800a6f4:	b09d      	sub	sp, #116	@ 0x74
 800a6f6:	d510      	bpl.n	800a71a <_svfiprintf_r+0x36>
 800a6f8:	690b      	ldr	r3, [r1, #16]
 800a6fa:	b973      	cbnz	r3, 800a71a <_svfiprintf_r+0x36>
 800a6fc:	2140      	movs	r1, #64	@ 0x40
 800a6fe:	f7fe fc61 	bl	8008fc4 <_malloc_r>
 800a702:	6028      	str	r0, [r5, #0]
 800a704:	6128      	str	r0, [r5, #16]
 800a706:	b930      	cbnz	r0, 800a716 <_svfiprintf_r+0x32>
 800a708:	230c      	movs	r3, #12
 800a70a:	603b      	str	r3, [r7, #0]
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	b01d      	add	sp, #116	@ 0x74
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a716:	2340      	movs	r3, #64	@ 0x40
 800a718:	616b      	str	r3, [r5, #20]
 800a71a:	2300      	movs	r3, #0
 800a71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a71e:	2320      	movs	r3, #32
 800a720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a724:	2330      	movs	r3, #48	@ 0x30
 800a726:	f04f 0901 	mov.w	r9, #1
 800a72a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a72e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a8c8 <_svfiprintf_r+0x1e4>
 800a732:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a736:	4623      	mov	r3, r4
 800a738:	469a      	mov	sl, r3
 800a73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a73e:	b10a      	cbz	r2, 800a744 <_svfiprintf_r+0x60>
 800a740:	2a25      	cmp	r2, #37	@ 0x25
 800a742:	d1f9      	bne.n	800a738 <_svfiprintf_r+0x54>
 800a744:	ebba 0b04 	subs.w	fp, sl, r4
 800a748:	d00b      	beq.n	800a762 <_svfiprintf_r+0x7e>
 800a74a:	465b      	mov	r3, fp
 800a74c:	4622      	mov	r2, r4
 800a74e:	4629      	mov	r1, r5
 800a750:	4638      	mov	r0, r7
 800a752:	f7ff ff6b 	bl	800a62c <__ssputs_r>
 800a756:	3001      	adds	r0, #1
 800a758:	f000 80a7 	beq.w	800a8aa <_svfiprintf_r+0x1c6>
 800a75c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a75e:	445a      	add	r2, fp
 800a760:	9209      	str	r2, [sp, #36]	@ 0x24
 800a762:	f89a 3000 	ldrb.w	r3, [sl]
 800a766:	2b00      	cmp	r3, #0
 800a768:	f000 809f 	beq.w	800a8aa <_svfiprintf_r+0x1c6>
 800a76c:	2300      	movs	r3, #0
 800a76e:	f04f 32ff 	mov.w	r2, #4294967295
 800a772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a776:	f10a 0a01 	add.w	sl, sl, #1
 800a77a:	9304      	str	r3, [sp, #16]
 800a77c:	9307      	str	r3, [sp, #28]
 800a77e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a782:	931a      	str	r3, [sp, #104]	@ 0x68
 800a784:	4654      	mov	r4, sl
 800a786:	2205      	movs	r2, #5
 800a788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a78c:	484e      	ldr	r0, [pc, #312]	@ (800a8c8 <_svfiprintf_r+0x1e4>)
 800a78e:	f7fd fd18 	bl	80081c2 <memchr>
 800a792:	9a04      	ldr	r2, [sp, #16]
 800a794:	b9d8      	cbnz	r0, 800a7ce <_svfiprintf_r+0xea>
 800a796:	06d0      	lsls	r0, r2, #27
 800a798:	bf44      	itt	mi
 800a79a:	2320      	movmi	r3, #32
 800a79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7a0:	0711      	lsls	r1, r2, #28
 800a7a2:	bf44      	itt	mi
 800a7a4:	232b      	movmi	r3, #43	@ 0x2b
 800a7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7b0:	d015      	beq.n	800a7de <_svfiprintf_r+0xfa>
 800a7b2:	4654      	mov	r4, sl
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	f04f 0c0a 	mov.w	ip, #10
 800a7ba:	9a07      	ldr	r2, [sp, #28]
 800a7bc:	4621      	mov	r1, r4
 800a7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7c2:	3b30      	subs	r3, #48	@ 0x30
 800a7c4:	2b09      	cmp	r3, #9
 800a7c6:	d94b      	bls.n	800a860 <_svfiprintf_r+0x17c>
 800a7c8:	b1b0      	cbz	r0, 800a7f8 <_svfiprintf_r+0x114>
 800a7ca:	9207      	str	r2, [sp, #28]
 800a7cc:	e014      	b.n	800a7f8 <_svfiprintf_r+0x114>
 800a7ce:	eba0 0308 	sub.w	r3, r0, r8
 800a7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	46a2      	mov	sl, r4
 800a7da:	9304      	str	r3, [sp, #16]
 800a7dc:	e7d2      	b.n	800a784 <_svfiprintf_r+0xa0>
 800a7de:	9b03      	ldr	r3, [sp, #12]
 800a7e0:	1d19      	adds	r1, r3, #4
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	9103      	str	r1, [sp, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	bfbb      	ittet	lt
 800a7ea:	425b      	neglt	r3, r3
 800a7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a7f0:	9307      	strge	r3, [sp, #28]
 800a7f2:	9307      	strlt	r3, [sp, #28]
 800a7f4:	bfb8      	it	lt
 800a7f6:	9204      	strlt	r2, [sp, #16]
 800a7f8:	7823      	ldrb	r3, [r4, #0]
 800a7fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7fc:	d10a      	bne.n	800a814 <_svfiprintf_r+0x130>
 800a7fe:	7863      	ldrb	r3, [r4, #1]
 800a800:	2b2a      	cmp	r3, #42	@ 0x2a
 800a802:	d132      	bne.n	800a86a <_svfiprintf_r+0x186>
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	3402      	adds	r4, #2
 800a808:	1d1a      	adds	r2, r3, #4
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	9203      	str	r2, [sp, #12]
 800a80e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a812:	9305      	str	r3, [sp, #20]
 800a814:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a8cc <_svfiprintf_r+0x1e8>
 800a818:	2203      	movs	r2, #3
 800a81a:	4650      	mov	r0, sl
 800a81c:	7821      	ldrb	r1, [r4, #0]
 800a81e:	f7fd fcd0 	bl	80081c2 <memchr>
 800a822:	b138      	cbz	r0, 800a834 <_svfiprintf_r+0x150>
 800a824:	2240      	movs	r2, #64	@ 0x40
 800a826:	9b04      	ldr	r3, [sp, #16]
 800a828:	eba0 000a 	sub.w	r0, r0, sl
 800a82c:	4082      	lsls	r2, r0
 800a82e:	4313      	orrs	r3, r2
 800a830:	3401      	adds	r4, #1
 800a832:	9304      	str	r3, [sp, #16]
 800a834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a838:	2206      	movs	r2, #6
 800a83a:	4825      	ldr	r0, [pc, #148]	@ (800a8d0 <_svfiprintf_r+0x1ec>)
 800a83c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a840:	f7fd fcbf 	bl	80081c2 <memchr>
 800a844:	2800      	cmp	r0, #0
 800a846:	d036      	beq.n	800a8b6 <_svfiprintf_r+0x1d2>
 800a848:	4b22      	ldr	r3, [pc, #136]	@ (800a8d4 <_svfiprintf_r+0x1f0>)
 800a84a:	bb1b      	cbnz	r3, 800a894 <_svfiprintf_r+0x1b0>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	3307      	adds	r3, #7
 800a850:	f023 0307 	bic.w	r3, r3, #7
 800a854:	3308      	adds	r3, #8
 800a856:	9303      	str	r3, [sp, #12]
 800a858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a85a:	4433      	add	r3, r6
 800a85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a85e:	e76a      	b.n	800a736 <_svfiprintf_r+0x52>
 800a860:	460c      	mov	r4, r1
 800a862:	2001      	movs	r0, #1
 800a864:	fb0c 3202 	mla	r2, ip, r2, r3
 800a868:	e7a8      	b.n	800a7bc <_svfiprintf_r+0xd8>
 800a86a:	2300      	movs	r3, #0
 800a86c:	f04f 0c0a 	mov.w	ip, #10
 800a870:	4619      	mov	r1, r3
 800a872:	3401      	adds	r4, #1
 800a874:	9305      	str	r3, [sp, #20]
 800a876:	4620      	mov	r0, r4
 800a878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a87c:	3a30      	subs	r2, #48	@ 0x30
 800a87e:	2a09      	cmp	r2, #9
 800a880:	d903      	bls.n	800a88a <_svfiprintf_r+0x1a6>
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0c6      	beq.n	800a814 <_svfiprintf_r+0x130>
 800a886:	9105      	str	r1, [sp, #20]
 800a888:	e7c4      	b.n	800a814 <_svfiprintf_r+0x130>
 800a88a:	4604      	mov	r4, r0
 800a88c:	2301      	movs	r3, #1
 800a88e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a892:	e7f0      	b.n	800a876 <_svfiprintf_r+0x192>
 800a894:	ab03      	add	r3, sp, #12
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	462a      	mov	r2, r5
 800a89a:	4638      	mov	r0, r7
 800a89c:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d8 <_svfiprintf_r+0x1f4>)
 800a89e:	a904      	add	r1, sp, #16
 800a8a0:	f7fc fc64 	bl	800716c <_printf_float>
 800a8a4:	1c42      	adds	r2, r0, #1
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	d1d6      	bne.n	800a858 <_svfiprintf_r+0x174>
 800a8aa:	89ab      	ldrh	r3, [r5, #12]
 800a8ac:	065b      	lsls	r3, r3, #25
 800a8ae:	f53f af2d 	bmi.w	800a70c <_svfiprintf_r+0x28>
 800a8b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8b4:	e72c      	b.n	800a710 <_svfiprintf_r+0x2c>
 800a8b6:	ab03      	add	r3, sp, #12
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	4638      	mov	r0, r7
 800a8be:	4b06      	ldr	r3, [pc, #24]	@ (800a8d8 <_svfiprintf_r+0x1f4>)
 800a8c0:	a904      	add	r1, sp, #16
 800a8c2:	f7fc fef1 	bl	80076a8 <_printf_i>
 800a8c6:	e7ed      	b.n	800a8a4 <_svfiprintf_r+0x1c0>
 800a8c8:	0800eb58 	.word	0x0800eb58
 800a8cc:	0800eb5e 	.word	0x0800eb5e
 800a8d0:	0800eb62 	.word	0x0800eb62
 800a8d4:	0800716d 	.word	0x0800716d
 800a8d8:	0800a62d 	.word	0x0800a62d

0800a8dc <__sflush_r>:
 800a8dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	0716      	lsls	r6, r2, #28
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	d454      	bmi.n	800a994 <__sflush_r+0xb8>
 800a8ea:	684b      	ldr	r3, [r1, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	dc02      	bgt.n	800a8f6 <__sflush_r+0x1a>
 800a8f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	dd48      	ble.n	800a988 <__sflush_r+0xac>
 800a8f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8f8:	2e00      	cmp	r6, #0
 800a8fa:	d045      	beq.n	800a988 <__sflush_r+0xac>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a902:	682f      	ldr	r7, [r5, #0]
 800a904:	6a21      	ldr	r1, [r4, #32]
 800a906:	602b      	str	r3, [r5, #0]
 800a908:	d030      	beq.n	800a96c <__sflush_r+0x90>
 800a90a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a90c:	89a3      	ldrh	r3, [r4, #12]
 800a90e:	0759      	lsls	r1, r3, #29
 800a910:	d505      	bpl.n	800a91e <__sflush_r+0x42>
 800a912:	6863      	ldr	r3, [r4, #4]
 800a914:	1ad2      	subs	r2, r2, r3
 800a916:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a918:	b10b      	cbz	r3, 800a91e <__sflush_r+0x42>
 800a91a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a91c:	1ad2      	subs	r2, r2, r3
 800a91e:	2300      	movs	r3, #0
 800a920:	4628      	mov	r0, r5
 800a922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a924:	6a21      	ldr	r1, [r4, #32]
 800a926:	47b0      	blx	r6
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	d106      	bne.n	800a93c <__sflush_r+0x60>
 800a92e:	6829      	ldr	r1, [r5, #0]
 800a930:	291d      	cmp	r1, #29
 800a932:	d82b      	bhi.n	800a98c <__sflush_r+0xb0>
 800a934:	4a28      	ldr	r2, [pc, #160]	@ (800a9d8 <__sflush_r+0xfc>)
 800a936:	410a      	asrs	r2, r1
 800a938:	07d6      	lsls	r6, r2, #31
 800a93a:	d427      	bmi.n	800a98c <__sflush_r+0xb0>
 800a93c:	2200      	movs	r2, #0
 800a93e:	6062      	str	r2, [r4, #4]
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	04d9      	lsls	r1, r3, #19
 800a944:	6022      	str	r2, [r4, #0]
 800a946:	d504      	bpl.n	800a952 <__sflush_r+0x76>
 800a948:	1c42      	adds	r2, r0, #1
 800a94a:	d101      	bne.n	800a950 <__sflush_r+0x74>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b903      	cbnz	r3, 800a952 <__sflush_r+0x76>
 800a950:	6560      	str	r0, [r4, #84]	@ 0x54
 800a952:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a954:	602f      	str	r7, [r5, #0]
 800a956:	b1b9      	cbz	r1, 800a988 <__sflush_r+0xac>
 800a958:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a95c:	4299      	cmp	r1, r3
 800a95e:	d002      	beq.n	800a966 <__sflush_r+0x8a>
 800a960:	4628      	mov	r0, r5
 800a962:	f7fe fabd 	bl	8008ee0 <_free_r>
 800a966:	2300      	movs	r3, #0
 800a968:	6363      	str	r3, [r4, #52]	@ 0x34
 800a96a:	e00d      	b.n	800a988 <__sflush_r+0xac>
 800a96c:	2301      	movs	r3, #1
 800a96e:	4628      	mov	r0, r5
 800a970:	47b0      	blx	r6
 800a972:	4602      	mov	r2, r0
 800a974:	1c50      	adds	r0, r2, #1
 800a976:	d1c9      	bne.n	800a90c <__sflush_r+0x30>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0c6      	beq.n	800a90c <__sflush_r+0x30>
 800a97e:	2b1d      	cmp	r3, #29
 800a980:	d001      	beq.n	800a986 <__sflush_r+0xaa>
 800a982:	2b16      	cmp	r3, #22
 800a984:	d11d      	bne.n	800a9c2 <__sflush_r+0xe6>
 800a986:	602f      	str	r7, [r5, #0]
 800a988:	2000      	movs	r0, #0
 800a98a:	e021      	b.n	800a9d0 <__sflush_r+0xf4>
 800a98c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a990:	b21b      	sxth	r3, r3
 800a992:	e01a      	b.n	800a9ca <__sflush_r+0xee>
 800a994:	690f      	ldr	r7, [r1, #16]
 800a996:	2f00      	cmp	r7, #0
 800a998:	d0f6      	beq.n	800a988 <__sflush_r+0xac>
 800a99a:	0793      	lsls	r3, r2, #30
 800a99c:	bf18      	it	ne
 800a99e:	2300      	movne	r3, #0
 800a9a0:	680e      	ldr	r6, [r1, #0]
 800a9a2:	bf08      	it	eq
 800a9a4:	694b      	ldreq	r3, [r1, #20]
 800a9a6:	1bf6      	subs	r6, r6, r7
 800a9a8:	600f      	str	r7, [r1, #0]
 800a9aa:	608b      	str	r3, [r1, #8]
 800a9ac:	2e00      	cmp	r6, #0
 800a9ae:	ddeb      	ble.n	800a988 <__sflush_r+0xac>
 800a9b0:	4633      	mov	r3, r6
 800a9b2:	463a      	mov	r2, r7
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	6a21      	ldr	r1, [r4, #32]
 800a9b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a9bc:	47e0      	blx	ip
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	dc07      	bgt.n	800a9d2 <__sflush_r+0xf6>
 800a9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ce:	81a3      	strh	r3, [r4, #12]
 800a9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d2:	4407      	add	r7, r0
 800a9d4:	1a36      	subs	r6, r6, r0
 800a9d6:	e7e9      	b.n	800a9ac <__sflush_r+0xd0>
 800a9d8:	dfbffffe 	.word	0xdfbffffe

0800a9dc <_fflush_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	690b      	ldr	r3, [r1, #16]
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	b913      	cbnz	r3, 800a9ec <_fflush_r+0x10>
 800a9e6:	2500      	movs	r5, #0
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	b118      	cbz	r0, 800a9f6 <_fflush_r+0x1a>
 800a9ee:	6a03      	ldr	r3, [r0, #32]
 800a9f0:	b90b      	cbnz	r3, 800a9f6 <_fflush_r+0x1a>
 800a9f2:	f7fd fa15 	bl	8007e20 <__sinit>
 800a9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0f3      	beq.n	800a9e6 <_fflush_r+0xa>
 800a9fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa00:	07d0      	lsls	r0, r2, #31
 800aa02:	d404      	bmi.n	800aa0e <_fflush_r+0x32>
 800aa04:	0599      	lsls	r1, r3, #22
 800aa06:	d402      	bmi.n	800aa0e <_fflush_r+0x32>
 800aa08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa0a:	f7fd fbd0 	bl	80081ae <__retarget_lock_acquire_recursive>
 800aa0e:	4628      	mov	r0, r5
 800aa10:	4621      	mov	r1, r4
 800aa12:	f7ff ff63 	bl	800a8dc <__sflush_r>
 800aa16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa18:	4605      	mov	r5, r0
 800aa1a:	07da      	lsls	r2, r3, #31
 800aa1c:	d4e4      	bmi.n	800a9e8 <_fflush_r+0xc>
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	059b      	lsls	r3, r3, #22
 800aa22:	d4e1      	bmi.n	800a9e8 <_fflush_r+0xc>
 800aa24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa26:	f7fd fbc3 	bl	80081b0 <__retarget_lock_release_recursive>
 800aa2a:	e7dd      	b.n	800a9e8 <_fflush_r+0xc>

0800aa2c <fiprintf>:
 800aa2c:	b40e      	push	{r1, r2, r3}
 800aa2e:	b503      	push	{r0, r1, lr}
 800aa30:	4601      	mov	r1, r0
 800aa32:	ab03      	add	r3, sp, #12
 800aa34:	4805      	ldr	r0, [pc, #20]	@ (800aa4c <fiprintf+0x20>)
 800aa36:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa3a:	6800      	ldr	r0, [r0, #0]
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	f000 fbf9 	bl	800b234 <_vfiprintf_r>
 800aa42:	b002      	add	sp, #8
 800aa44:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa48:	b003      	add	sp, #12
 800aa4a:	4770      	bx	lr
 800aa4c:	20000040 	.word	0x20000040

0800aa50 <strncmp>:
 800aa50:	b510      	push	{r4, lr}
 800aa52:	b16a      	cbz	r2, 800aa70 <strncmp+0x20>
 800aa54:	3901      	subs	r1, #1
 800aa56:	1884      	adds	r4, r0, r2
 800aa58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d103      	bne.n	800aa6c <strncmp+0x1c>
 800aa64:	42a0      	cmp	r0, r4
 800aa66:	d001      	beq.n	800aa6c <strncmp+0x1c>
 800aa68:	2a00      	cmp	r2, #0
 800aa6a:	d1f5      	bne.n	800aa58 <strncmp+0x8>
 800aa6c:	1ad0      	subs	r0, r2, r3
 800aa6e:	bd10      	pop	{r4, pc}
 800aa70:	4610      	mov	r0, r2
 800aa72:	e7fc      	b.n	800aa6e <strncmp+0x1e>

0800aa74 <_sbrk_r>:
 800aa74:	b538      	push	{r3, r4, r5, lr}
 800aa76:	2300      	movs	r3, #0
 800aa78:	4d05      	ldr	r5, [pc, #20]	@ (800aa90 <_sbrk_r+0x1c>)
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	4608      	mov	r0, r1
 800aa7e:	602b      	str	r3, [r5, #0]
 800aa80:	f7f8 f812 	bl	8002aa8 <_sbrk>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_sbrk_r+0x1a>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_sbrk_r+0x1a>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	20000a90 	.word	0x20000a90

0800aa94 <nan>:
 800aa94:	2000      	movs	r0, #0
 800aa96:	4901      	ldr	r1, [pc, #4]	@ (800aa9c <nan+0x8>)
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	7ff80000 	.word	0x7ff80000

0800aaa0 <abort>:
 800aaa0:	2006      	movs	r0, #6
 800aaa2:	b508      	push	{r3, lr}
 800aaa4:	f000 fd9a 	bl	800b5dc <raise>
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	f7f7 ff88 	bl	80029be <_exit>

0800aaae <_calloc_r>:
 800aaae:	b570      	push	{r4, r5, r6, lr}
 800aab0:	fba1 5402 	umull	r5, r4, r1, r2
 800aab4:	b93c      	cbnz	r4, 800aac6 <_calloc_r+0x18>
 800aab6:	4629      	mov	r1, r5
 800aab8:	f7fe fa84 	bl	8008fc4 <_malloc_r>
 800aabc:	4606      	mov	r6, r0
 800aabe:	b928      	cbnz	r0, 800aacc <_calloc_r+0x1e>
 800aac0:	2600      	movs	r6, #0
 800aac2:	4630      	mov	r0, r6
 800aac4:	bd70      	pop	{r4, r5, r6, pc}
 800aac6:	220c      	movs	r2, #12
 800aac8:	6002      	str	r2, [r0, #0]
 800aaca:	e7f9      	b.n	800aac0 <_calloc_r+0x12>
 800aacc:	462a      	mov	r2, r5
 800aace:	4621      	mov	r1, r4
 800aad0:	f7fd fa59 	bl	8007f86 <memset>
 800aad4:	e7f5      	b.n	800aac2 <_calloc_r+0x14>

0800aad6 <rshift>:
 800aad6:	6903      	ldr	r3, [r0, #16]
 800aad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aadc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aae0:	f100 0414 	add.w	r4, r0, #20
 800aae4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aae8:	dd46      	ble.n	800ab78 <rshift+0xa2>
 800aaea:	f011 011f 	ands.w	r1, r1, #31
 800aaee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aaf2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aaf6:	d10c      	bne.n	800ab12 <rshift+0x3c>
 800aaf8:	4629      	mov	r1, r5
 800aafa:	f100 0710 	add.w	r7, r0, #16
 800aafe:	42b1      	cmp	r1, r6
 800ab00:	d335      	bcc.n	800ab6e <rshift+0x98>
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	1eea      	subs	r2, r5, #3
 800ab08:	4296      	cmp	r6, r2
 800ab0a:	bf38      	it	cc
 800ab0c:	2300      	movcc	r3, #0
 800ab0e:	4423      	add	r3, r4
 800ab10:	e015      	b.n	800ab3e <rshift+0x68>
 800ab12:	46a1      	mov	r9, r4
 800ab14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab18:	f1c1 0820 	rsb	r8, r1, #32
 800ab1c:	40cf      	lsrs	r7, r1
 800ab1e:	f105 0e04 	add.w	lr, r5, #4
 800ab22:	4576      	cmp	r6, lr
 800ab24:	46f4      	mov	ip, lr
 800ab26:	d816      	bhi.n	800ab56 <rshift+0x80>
 800ab28:	1a9a      	subs	r2, r3, r2
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	3a04      	subs	r2, #4
 800ab2e:	3501      	adds	r5, #1
 800ab30:	42ae      	cmp	r6, r5
 800ab32:	bf38      	it	cc
 800ab34:	2200      	movcc	r2, #0
 800ab36:	18a3      	adds	r3, r4, r2
 800ab38:	50a7      	str	r7, [r4, r2]
 800ab3a:	b107      	cbz	r7, 800ab3e <rshift+0x68>
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	42a3      	cmp	r3, r4
 800ab40:	eba3 0204 	sub.w	r2, r3, r4
 800ab44:	bf08      	it	eq
 800ab46:	2300      	moveq	r3, #0
 800ab48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab4c:	6102      	str	r2, [r0, #16]
 800ab4e:	bf08      	it	eq
 800ab50:	6143      	streq	r3, [r0, #20]
 800ab52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab56:	f8dc c000 	ldr.w	ip, [ip]
 800ab5a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab5e:	ea4c 0707 	orr.w	r7, ip, r7
 800ab62:	f849 7b04 	str.w	r7, [r9], #4
 800ab66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab6a:	40cf      	lsrs	r7, r1
 800ab6c:	e7d9      	b.n	800ab22 <rshift+0x4c>
 800ab6e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab72:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab76:	e7c2      	b.n	800aafe <rshift+0x28>
 800ab78:	4623      	mov	r3, r4
 800ab7a:	e7e0      	b.n	800ab3e <rshift+0x68>

0800ab7c <__hexdig_fun>:
 800ab7c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ab80:	2b09      	cmp	r3, #9
 800ab82:	d802      	bhi.n	800ab8a <__hexdig_fun+0xe>
 800ab84:	3820      	subs	r0, #32
 800ab86:	b2c0      	uxtb	r0, r0
 800ab88:	4770      	bx	lr
 800ab8a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ab8e:	2b05      	cmp	r3, #5
 800ab90:	d801      	bhi.n	800ab96 <__hexdig_fun+0x1a>
 800ab92:	3847      	subs	r0, #71	@ 0x47
 800ab94:	e7f7      	b.n	800ab86 <__hexdig_fun+0xa>
 800ab96:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ab9a:	2b05      	cmp	r3, #5
 800ab9c:	d801      	bhi.n	800aba2 <__hexdig_fun+0x26>
 800ab9e:	3827      	subs	r0, #39	@ 0x27
 800aba0:	e7f1      	b.n	800ab86 <__hexdig_fun+0xa>
 800aba2:	2000      	movs	r0, #0
 800aba4:	4770      	bx	lr
	...

0800aba8 <__gethex>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	468a      	mov	sl, r1
 800abae:	4690      	mov	r8, r2
 800abb0:	b085      	sub	sp, #20
 800abb2:	9302      	str	r3, [sp, #8]
 800abb4:	680b      	ldr	r3, [r1, #0]
 800abb6:	9001      	str	r0, [sp, #4]
 800abb8:	1c9c      	adds	r4, r3, #2
 800abba:	46a1      	mov	r9, r4
 800abbc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800abc0:	2830      	cmp	r0, #48	@ 0x30
 800abc2:	d0fa      	beq.n	800abba <__gethex+0x12>
 800abc4:	eba9 0303 	sub.w	r3, r9, r3
 800abc8:	f1a3 0b02 	sub.w	fp, r3, #2
 800abcc:	f7ff ffd6 	bl	800ab7c <__hexdig_fun>
 800abd0:	4605      	mov	r5, r0
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d168      	bne.n	800aca8 <__gethex+0x100>
 800abd6:	2201      	movs	r2, #1
 800abd8:	4648      	mov	r0, r9
 800abda:	499f      	ldr	r1, [pc, #636]	@ (800ae58 <__gethex+0x2b0>)
 800abdc:	f7ff ff38 	bl	800aa50 <strncmp>
 800abe0:	4607      	mov	r7, r0
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d167      	bne.n	800acb6 <__gethex+0x10e>
 800abe6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800abea:	4626      	mov	r6, r4
 800abec:	f7ff ffc6 	bl	800ab7c <__hexdig_fun>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d062      	beq.n	800acba <__gethex+0x112>
 800abf4:	4623      	mov	r3, r4
 800abf6:	7818      	ldrb	r0, [r3, #0]
 800abf8:	4699      	mov	r9, r3
 800abfa:	2830      	cmp	r0, #48	@ 0x30
 800abfc:	f103 0301 	add.w	r3, r3, #1
 800ac00:	d0f9      	beq.n	800abf6 <__gethex+0x4e>
 800ac02:	f7ff ffbb 	bl	800ab7c <__hexdig_fun>
 800ac06:	fab0 f580 	clz	r5, r0
 800ac0a:	f04f 0b01 	mov.w	fp, #1
 800ac0e:	096d      	lsrs	r5, r5, #5
 800ac10:	464a      	mov	r2, r9
 800ac12:	4616      	mov	r6, r2
 800ac14:	7830      	ldrb	r0, [r6, #0]
 800ac16:	3201      	adds	r2, #1
 800ac18:	f7ff ffb0 	bl	800ab7c <__hexdig_fun>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d1f8      	bne.n	800ac12 <__gethex+0x6a>
 800ac20:	2201      	movs	r2, #1
 800ac22:	4630      	mov	r0, r6
 800ac24:	498c      	ldr	r1, [pc, #560]	@ (800ae58 <__gethex+0x2b0>)
 800ac26:	f7ff ff13 	bl	800aa50 <strncmp>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d13f      	bne.n	800acae <__gethex+0x106>
 800ac2e:	b944      	cbnz	r4, 800ac42 <__gethex+0x9a>
 800ac30:	1c74      	adds	r4, r6, #1
 800ac32:	4622      	mov	r2, r4
 800ac34:	4616      	mov	r6, r2
 800ac36:	7830      	ldrb	r0, [r6, #0]
 800ac38:	3201      	adds	r2, #1
 800ac3a:	f7ff ff9f 	bl	800ab7c <__hexdig_fun>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	d1f8      	bne.n	800ac34 <__gethex+0x8c>
 800ac42:	1ba4      	subs	r4, r4, r6
 800ac44:	00a7      	lsls	r7, r4, #2
 800ac46:	7833      	ldrb	r3, [r6, #0]
 800ac48:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ac4c:	2b50      	cmp	r3, #80	@ 0x50
 800ac4e:	d13e      	bne.n	800acce <__gethex+0x126>
 800ac50:	7873      	ldrb	r3, [r6, #1]
 800ac52:	2b2b      	cmp	r3, #43	@ 0x2b
 800ac54:	d033      	beq.n	800acbe <__gethex+0x116>
 800ac56:	2b2d      	cmp	r3, #45	@ 0x2d
 800ac58:	d034      	beq.n	800acc4 <__gethex+0x11c>
 800ac5a:	2400      	movs	r4, #0
 800ac5c:	1c71      	adds	r1, r6, #1
 800ac5e:	7808      	ldrb	r0, [r1, #0]
 800ac60:	f7ff ff8c 	bl	800ab7c <__hexdig_fun>
 800ac64:	1e43      	subs	r3, r0, #1
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b18      	cmp	r3, #24
 800ac6a:	d830      	bhi.n	800acce <__gethex+0x126>
 800ac6c:	f1a0 0210 	sub.w	r2, r0, #16
 800ac70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac74:	f7ff ff82 	bl	800ab7c <__hexdig_fun>
 800ac78:	f100 3cff 	add.w	ip, r0, #4294967295
 800ac7c:	fa5f fc8c 	uxtb.w	ip, ip
 800ac80:	f1bc 0f18 	cmp.w	ip, #24
 800ac84:	f04f 030a 	mov.w	r3, #10
 800ac88:	d91e      	bls.n	800acc8 <__gethex+0x120>
 800ac8a:	b104      	cbz	r4, 800ac8e <__gethex+0xe6>
 800ac8c:	4252      	negs	r2, r2
 800ac8e:	4417      	add	r7, r2
 800ac90:	f8ca 1000 	str.w	r1, [sl]
 800ac94:	b1ed      	cbz	r5, 800acd2 <__gethex+0x12a>
 800ac96:	f1bb 0f00 	cmp.w	fp, #0
 800ac9a:	bf0c      	ite	eq
 800ac9c:	2506      	moveq	r5, #6
 800ac9e:	2500      	movne	r5, #0
 800aca0:	4628      	mov	r0, r5
 800aca2:	b005      	add	sp, #20
 800aca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca8:	2500      	movs	r5, #0
 800acaa:	462c      	mov	r4, r5
 800acac:	e7b0      	b.n	800ac10 <__gethex+0x68>
 800acae:	2c00      	cmp	r4, #0
 800acb0:	d1c7      	bne.n	800ac42 <__gethex+0x9a>
 800acb2:	4627      	mov	r7, r4
 800acb4:	e7c7      	b.n	800ac46 <__gethex+0x9e>
 800acb6:	464e      	mov	r6, r9
 800acb8:	462f      	mov	r7, r5
 800acba:	2501      	movs	r5, #1
 800acbc:	e7c3      	b.n	800ac46 <__gethex+0x9e>
 800acbe:	2400      	movs	r4, #0
 800acc0:	1cb1      	adds	r1, r6, #2
 800acc2:	e7cc      	b.n	800ac5e <__gethex+0xb6>
 800acc4:	2401      	movs	r4, #1
 800acc6:	e7fb      	b.n	800acc0 <__gethex+0x118>
 800acc8:	fb03 0002 	mla	r0, r3, r2, r0
 800accc:	e7ce      	b.n	800ac6c <__gethex+0xc4>
 800acce:	4631      	mov	r1, r6
 800acd0:	e7de      	b.n	800ac90 <__gethex+0xe8>
 800acd2:	4629      	mov	r1, r5
 800acd4:	eba6 0309 	sub.w	r3, r6, r9
 800acd8:	3b01      	subs	r3, #1
 800acda:	2b07      	cmp	r3, #7
 800acdc:	dc0a      	bgt.n	800acf4 <__gethex+0x14c>
 800acde:	9801      	ldr	r0, [sp, #4]
 800ace0:	f7fe f9fc 	bl	80090dc <_Balloc>
 800ace4:	4604      	mov	r4, r0
 800ace6:	b940      	cbnz	r0, 800acfa <__gethex+0x152>
 800ace8:	4602      	mov	r2, r0
 800acea:	21e4      	movs	r1, #228	@ 0xe4
 800acec:	4b5b      	ldr	r3, [pc, #364]	@ (800ae5c <__gethex+0x2b4>)
 800acee:	485c      	ldr	r0, [pc, #368]	@ (800ae60 <__gethex+0x2b8>)
 800acf0:	f7fd fa88 	bl	8008204 <__assert_func>
 800acf4:	3101      	adds	r1, #1
 800acf6:	105b      	asrs	r3, r3, #1
 800acf8:	e7ef      	b.n	800acda <__gethex+0x132>
 800acfa:	2300      	movs	r3, #0
 800acfc:	f100 0a14 	add.w	sl, r0, #20
 800ad00:	4655      	mov	r5, sl
 800ad02:	469b      	mov	fp, r3
 800ad04:	45b1      	cmp	r9, r6
 800ad06:	d337      	bcc.n	800ad78 <__gethex+0x1d0>
 800ad08:	f845 bb04 	str.w	fp, [r5], #4
 800ad0c:	eba5 050a 	sub.w	r5, r5, sl
 800ad10:	10ad      	asrs	r5, r5, #2
 800ad12:	6125      	str	r5, [r4, #16]
 800ad14:	4658      	mov	r0, fp
 800ad16:	f7fe fad3 	bl	80092c0 <__hi0bits>
 800ad1a:	016d      	lsls	r5, r5, #5
 800ad1c:	f8d8 6000 	ldr.w	r6, [r8]
 800ad20:	1a2d      	subs	r5, r5, r0
 800ad22:	42b5      	cmp	r5, r6
 800ad24:	dd54      	ble.n	800add0 <__gethex+0x228>
 800ad26:	1bad      	subs	r5, r5, r6
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f7fe fe5b 	bl	80099e6 <__any_on>
 800ad30:	4681      	mov	r9, r0
 800ad32:	b178      	cbz	r0, 800ad54 <__gethex+0x1ac>
 800ad34:	f04f 0901 	mov.w	r9, #1
 800ad38:	1e6b      	subs	r3, r5, #1
 800ad3a:	1159      	asrs	r1, r3, #5
 800ad3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad40:	f003 021f 	and.w	r2, r3, #31
 800ad44:	fa09 f202 	lsl.w	r2, r9, r2
 800ad48:	420a      	tst	r2, r1
 800ad4a:	d003      	beq.n	800ad54 <__gethex+0x1ac>
 800ad4c:	454b      	cmp	r3, r9
 800ad4e:	dc36      	bgt.n	800adbe <__gethex+0x216>
 800ad50:	f04f 0902 	mov.w	r9, #2
 800ad54:	4629      	mov	r1, r5
 800ad56:	4620      	mov	r0, r4
 800ad58:	f7ff febd 	bl	800aad6 <rshift>
 800ad5c:	442f      	add	r7, r5
 800ad5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad62:	42bb      	cmp	r3, r7
 800ad64:	da42      	bge.n	800adec <__gethex+0x244>
 800ad66:	4621      	mov	r1, r4
 800ad68:	9801      	ldr	r0, [sp, #4]
 800ad6a:	f7fe f9f7 	bl	800915c <_Bfree>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad72:	25a3      	movs	r5, #163	@ 0xa3
 800ad74:	6013      	str	r3, [r2, #0]
 800ad76:	e793      	b.n	800aca0 <__gethex+0xf8>
 800ad78:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ad7c:	2a2e      	cmp	r2, #46	@ 0x2e
 800ad7e:	d012      	beq.n	800ada6 <__gethex+0x1fe>
 800ad80:	2b20      	cmp	r3, #32
 800ad82:	d104      	bne.n	800ad8e <__gethex+0x1e6>
 800ad84:	f845 bb04 	str.w	fp, [r5], #4
 800ad88:	f04f 0b00 	mov.w	fp, #0
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	7830      	ldrb	r0, [r6, #0]
 800ad90:	9303      	str	r3, [sp, #12]
 800ad92:	f7ff fef3 	bl	800ab7c <__hexdig_fun>
 800ad96:	9b03      	ldr	r3, [sp, #12]
 800ad98:	f000 000f 	and.w	r0, r0, #15
 800ad9c:	4098      	lsls	r0, r3
 800ad9e:	ea4b 0b00 	orr.w	fp, fp, r0
 800ada2:	3304      	adds	r3, #4
 800ada4:	e7ae      	b.n	800ad04 <__gethex+0x15c>
 800ada6:	45b1      	cmp	r9, r6
 800ada8:	d8ea      	bhi.n	800ad80 <__gethex+0x1d8>
 800adaa:	2201      	movs	r2, #1
 800adac:	4630      	mov	r0, r6
 800adae:	492a      	ldr	r1, [pc, #168]	@ (800ae58 <__gethex+0x2b0>)
 800adb0:	9303      	str	r3, [sp, #12]
 800adb2:	f7ff fe4d 	bl	800aa50 <strncmp>
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	2800      	cmp	r0, #0
 800adba:	d1e1      	bne.n	800ad80 <__gethex+0x1d8>
 800adbc:	e7a2      	b.n	800ad04 <__gethex+0x15c>
 800adbe:	4620      	mov	r0, r4
 800adc0:	1ea9      	subs	r1, r5, #2
 800adc2:	f7fe fe10 	bl	80099e6 <__any_on>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d0c2      	beq.n	800ad50 <__gethex+0x1a8>
 800adca:	f04f 0903 	mov.w	r9, #3
 800adce:	e7c1      	b.n	800ad54 <__gethex+0x1ac>
 800add0:	da09      	bge.n	800ade6 <__gethex+0x23e>
 800add2:	1b75      	subs	r5, r6, r5
 800add4:	4621      	mov	r1, r4
 800add6:	462a      	mov	r2, r5
 800add8:	9801      	ldr	r0, [sp, #4]
 800adda:	f7fe fbd5 	bl	8009588 <__lshift>
 800adde:	4604      	mov	r4, r0
 800ade0:	1b7f      	subs	r7, r7, r5
 800ade2:	f100 0a14 	add.w	sl, r0, #20
 800ade6:	f04f 0900 	mov.w	r9, #0
 800adea:	e7b8      	b.n	800ad5e <__gethex+0x1b6>
 800adec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800adf0:	42bd      	cmp	r5, r7
 800adf2:	dd6f      	ble.n	800aed4 <__gethex+0x32c>
 800adf4:	1bed      	subs	r5, r5, r7
 800adf6:	42ae      	cmp	r6, r5
 800adf8:	dc34      	bgt.n	800ae64 <__gethex+0x2bc>
 800adfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d022      	beq.n	800ae48 <__gethex+0x2a0>
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d024      	beq.n	800ae50 <__gethex+0x2a8>
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d115      	bne.n	800ae36 <__gethex+0x28e>
 800ae0a:	42ae      	cmp	r6, r5
 800ae0c:	d113      	bne.n	800ae36 <__gethex+0x28e>
 800ae0e:	2e01      	cmp	r6, #1
 800ae10:	d10b      	bne.n	800ae2a <__gethex+0x282>
 800ae12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae16:	9a02      	ldr	r2, [sp, #8]
 800ae18:	2562      	movs	r5, #98	@ 0x62
 800ae1a:	6013      	str	r3, [r2, #0]
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	6123      	str	r3, [r4, #16]
 800ae20:	f8ca 3000 	str.w	r3, [sl]
 800ae24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae26:	601c      	str	r4, [r3, #0]
 800ae28:	e73a      	b.n	800aca0 <__gethex+0xf8>
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	1e71      	subs	r1, r6, #1
 800ae2e:	f7fe fdda 	bl	80099e6 <__any_on>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d1ed      	bne.n	800ae12 <__gethex+0x26a>
 800ae36:	4621      	mov	r1, r4
 800ae38:	9801      	ldr	r0, [sp, #4]
 800ae3a:	f7fe f98f 	bl	800915c <_Bfree>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae42:	2550      	movs	r5, #80	@ 0x50
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	e72b      	b.n	800aca0 <__gethex+0xf8>
 800ae48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1f3      	bne.n	800ae36 <__gethex+0x28e>
 800ae4e:	e7e0      	b.n	800ae12 <__gethex+0x26a>
 800ae50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1dd      	bne.n	800ae12 <__gethex+0x26a>
 800ae56:	e7ee      	b.n	800ae36 <__gethex+0x28e>
 800ae58:	0800eb00 	.word	0x0800eb00
 800ae5c:	0800e996 	.word	0x0800e996
 800ae60:	0800eb71 	.word	0x0800eb71
 800ae64:	1e6f      	subs	r7, r5, #1
 800ae66:	f1b9 0f00 	cmp.w	r9, #0
 800ae6a:	d130      	bne.n	800aece <__gethex+0x326>
 800ae6c:	b127      	cbz	r7, 800ae78 <__gethex+0x2d0>
 800ae6e:	4639      	mov	r1, r7
 800ae70:	4620      	mov	r0, r4
 800ae72:	f7fe fdb8 	bl	80099e6 <__any_on>
 800ae76:	4681      	mov	r9, r0
 800ae78:	2301      	movs	r3, #1
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	1b76      	subs	r6, r6, r5
 800ae7e:	2502      	movs	r5, #2
 800ae80:	117a      	asrs	r2, r7, #5
 800ae82:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ae86:	f007 071f 	and.w	r7, r7, #31
 800ae8a:	40bb      	lsls	r3, r7
 800ae8c:	4213      	tst	r3, r2
 800ae8e:	4620      	mov	r0, r4
 800ae90:	bf18      	it	ne
 800ae92:	f049 0902 	orrne.w	r9, r9, #2
 800ae96:	f7ff fe1e 	bl	800aad6 <rshift>
 800ae9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ae9e:	f1b9 0f00 	cmp.w	r9, #0
 800aea2:	d047      	beq.n	800af34 <__gethex+0x38c>
 800aea4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d015      	beq.n	800aed8 <__gethex+0x330>
 800aeac:	2b03      	cmp	r3, #3
 800aeae:	d017      	beq.n	800aee0 <__gethex+0x338>
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d109      	bne.n	800aec8 <__gethex+0x320>
 800aeb4:	f019 0f02 	tst.w	r9, #2
 800aeb8:	d006      	beq.n	800aec8 <__gethex+0x320>
 800aeba:	f8da 3000 	ldr.w	r3, [sl]
 800aebe:	ea49 0903 	orr.w	r9, r9, r3
 800aec2:	f019 0f01 	tst.w	r9, #1
 800aec6:	d10e      	bne.n	800aee6 <__gethex+0x33e>
 800aec8:	f045 0510 	orr.w	r5, r5, #16
 800aecc:	e032      	b.n	800af34 <__gethex+0x38c>
 800aece:	f04f 0901 	mov.w	r9, #1
 800aed2:	e7d1      	b.n	800ae78 <__gethex+0x2d0>
 800aed4:	2501      	movs	r5, #1
 800aed6:	e7e2      	b.n	800ae9e <__gethex+0x2f6>
 800aed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeda:	f1c3 0301 	rsb	r3, r3, #1
 800aede:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0f0      	beq.n	800aec8 <__gethex+0x320>
 800aee6:	f04f 0c00 	mov.w	ip, #0
 800aeea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aeee:	f104 0314 	add.w	r3, r4, #20
 800aef2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aef6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aefa:	4618      	mov	r0, r3
 800aefc:	f853 2b04 	ldr.w	r2, [r3], #4
 800af00:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af04:	d01b      	beq.n	800af3e <__gethex+0x396>
 800af06:	3201      	adds	r2, #1
 800af08:	6002      	str	r2, [r0, #0]
 800af0a:	2d02      	cmp	r5, #2
 800af0c:	f104 0314 	add.w	r3, r4, #20
 800af10:	d13c      	bne.n	800af8c <__gethex+0x3e4>
 800af12:	f8d8 2000 	ldr.w	r2, [r8]
 800af16:	3a01      	subs	r2, #1
 800af18:	42b2      	cmp	r2, r6
 800af1a:	d109      	bne.n	800af30 <__gethex+0x388>
 800af1c:	2201      	movs	r2, #1
 800af1e:	1171      	asrs	r1, r6, #5
 800af20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af24:	f006 061f 	and.w	r6, r6, #31
 800af28:	fa02 f606 	lsl.w	r6, r2, r6
 800af2c:	421e      	tst	r6, r3
 800af2e:	d13a      	bne.n	800afa6 <__gethex+0x3fe>
 800af30:	f045 0520 	orr.w	r5, r5, #32
 800af34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af36:	601c      	str	r4, [r3, #0]
 800af38:	9b02      	ldr	r3, [sp, #8]
 800af3a:	601f      	str	r7, [r3, #0]
 800af3c:	e6b0      	b.n	800aca0 <__gethex+0xf8>
 800af3e:	4299      	cmp	r1, r3
 800af40:	f843 cc04 	str.w	ip, [r3, #-4]
 800af44:	d8d9      	bhi.n	800aefa <__gethex+0x352>
 800af46:	68a3      	ldr	r3, [r4, #8]
 800af48:	459b      	cmp	fp, r3
 800af4a:	db17      	blt.n	800af7c <__gethex+0x3d4>
 800af4c:	6861      	ldr	r1, [r4, #4]
 800af4e:	9801      	ldr	r0, [sp, #4]
 800af50:	3101      	adds	r1, #1
 800af52:	f7fe f8c3 	bl	80090dc <_Balloc>
 800af56:	4681      	mov	r9, r0
 800af58:	b918      	cbnz	r0, 800af62 <__gethex+0x3ba>
 800af5a:	4602      	mov	r2, r0
 800af5c:	2184      	movs	r1, #132	@ 0x84
 800af5e:	4b19      	ldr	r3, [pc, #100]	@ (800afc4 <__gethex+0x41c>)
 800af60:	e6c5      	b.n	800acee <__gethex+0x146>
 800af62:	6922      	ldr	r2, [r4, #16]
 800af64:	f104 010c 	add.w	r1, r4, #12
 800af68:	3202      	adds	r2, #2
 800af6a:	0092      	lsls	r2, r2, #2
 800af6c:	300c      	adds	r0, #12
 800af6e:	f7fd f936 	bl	80081de <memcpy>
 800af72:	4621      	mov	r1, r4
 800af74:	9801      	ldr	r0, [sp, #4]
 800af76:	f7fe f8f1 	bl	800915c <_Bfree>
 800af7a:	464c      	mov	r4, r9
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	1c5a      	adds	r2, r3, #1
 800af80:	6122      	str	r2, [r4, #16]
 800af82:	2201      	movs	r2, #1
 800af84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af88:	615a      	str	r2, [r3, #20]
 800af8a:	e7be      	b.n	800af0a <__gethex+0x362>
 800af8c:	6922      	ldr	r2, [r4, #16]
 800af8e:	455a      	cmp	r2, fp
 800af90:	dd0b      	ble.n	800afaa <__gethex+0x402>
 800af92:	2101      	movs	r1, #1
 800af94:	4620      	mov	r0, r4
 800af96:	f7ff fd9e 	bl	800aad6 <rshift>
 800af9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af9e:	3701      	adds	r7, #1
 800afa0:	42bb      	cmp	r3, r7
 800afa2:	f6ff aee0 	blt.w	800ad66 <__gethex+0x1be>
 800afa6:	2501      	movs	r5, #1
 800afa8:	e7c2      	b.n	800af30 <__gethex+0x388>
 800afaa:	f016 061f 	ands.w	r6, r6, #31
 800afae:	d0fa      	beq.n	800afa6 <__gethex+0x3fe>
 800afb0:	4453      	add	r3, sl
 800afb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800afb6:	f7fe f983 	bl	80092c0 <__hi0bits>
 800afba:	f1c6 0620 	rsb	r6, r6, #32
 800afbe:	42b0      	cmp	r0, r6
 800afc0:	dbe7      	blt.n	800af92 <__gethex+0x3ea>
 800afc2:	e7f0      	b.n	800afa6 <__gethex+0x3fe>
 800afc4:	0800e996 	.word	0x0800e996

0800afc8 <L_shift>:
 800afc8:	f1c2 0208 	rsb	r2, r2, #8
 800afcc:	0092      	lsls	r2, r2, #2
 800afce:	b570      	push	{r4, r5, r6, lr}
 800afd0:	f1c2 0620 	rsb	r6, r2, #32
 800afd4:	6843      	ldr	r3, [r0, #4]
 800afd6:	6804      	ldr	r4, [r0, #0]
 800afd8:	fa03 f506 	lsl.w	r5, r3, r6
 800afdc:	432c      	orrs	r4, r5
 800afde:	40d3      	lsrs	r3, r2
 800afe0:	6004      	str	r4, [r0, #0]
 800afe2:	f840 3f04 	str.w	r3, [r0, #4]!
 800afe6:	4288      	cmp	r0, r1
 800afe8:	d3f4      	bcc.n	800afd4 <L_shift+0xc>
 800afea:	bd70      	pop	{r4, r5, r6, pc}

0800afec <__match>:
 800afec:	b530      	push	{r4, r5, lr}
 800afee:	6803      	ldr	r3, [r0, #0]
 800aff0:	3301      	adds	r3, #1
 800aff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aff6:	b914      	cbnz	r4, 800affe <__match+0x12>
 800aff8:	6003      	str	r3, [r0, #0]
 800affa:	2001      	movs	r0, #1
 800affc:	bd30      	pop	{r4, r5, pc}
 800affe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b002:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b006:	2d19      	cmp	r5, #25
 800b008:	bf98      	it	ls
 800b00a:	3220      	addls	r2, #32
 800b00c:	42a2      	cmp	r2, r4
 800b00e:	d0f0      	beq.n	800aff2 <__match+0x6>
 800b010:	2000      	movs	r0, #0
 800b012:	e7f3      	b.n	800affc <__match+0x10>

0800b014 <__hexnan>:
 800b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b018:	2500      	movs	r5, #0
 800b01a:	680b      	ldr	r3, [r1, #0]
 800b01c:	4682      	mov	sl, r0
 800b01e:	115e      	asrs	r6, r3, #5
 800b020:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b024:	f013 031f 	ands.w	r3, r3, #31
 800b028:	bf18      	it	ne
 800b02a:	3604      	addne	r6, #4
 800b02c:	1f37      	subs	r7, r6, #4
 800b02e:	4690      	mov	r8, r2
 800b030:	46b9      	mov	r9, r7
 800b032:	463c      	mov	r4, r7
 800b034:	46ab      	mov	fp, r5
 800b036:	b087      	sub	sp, #28
 800b038:	6801      	ldr	r1, [r0, #0]
 800b03a:	9301      	str	r3, [sp, #4]
 800b03c:	f846 5c04 	str.w	r5, [r6, #-4]
 800b040:	9502      	str	r5, [sp, #8]
 800b042:	784a      	ldrb	r2, [r1, #1]
 800b044:	1c4b      	adds	r3, r1, #1
 800b046:	9303      	str	r3, [sp, #12]
 800b048:	b342      	cbz	r2, 800b09c <__hexnan+0x88>
 800b04a:	4610      	mov	r0, r2
 800b04c:	9105      	str	r1, [sp, #20]
 800b04e:	9204      	str	r2, [sp, #16]
 800b050:	f7ff fd94 	bl	800ab7c <__hexdig_fun>
 800b054:	2800      	cmp	r0, #0
 800b056:	d151      	bne.n	800b0fc <__hexnan+0xe8>
 800b058:	9a04      	ldr	r2, [sp, #16]
 800b05a:	9905      	ldr	r1, [sp, #20]
 800b05c:	2a20      	cmp	r2, #32
 800b05e:	d818      	bhi.n	800b092 <__hexnan+0x7e>
 800b060:	9b02      	ldr	r3, [sp, #8]
 800b062:	459b      	cmp	fp, r3
 800b064:	dd13      	ble.n	800b08e <__hexnan+0x7a>
 800b066:	454c      	cmp	r4, r9
 800b068:	d206      	bcs.n	800b078 <__hexnan+0x64>
 800b06a:	2d07      	cmp	r5, #7
 800b06c:	dc04      	bgt.n	800b078 <__hexnan+0x64>
 800b06e:	462a      	mov	r2, r5
 800b070:	4649      	mov	r1, r9
 800b072:	4620      	mov	r0, r4
 800b074:	f7ff ffa8 	bl	800afc8 <L_shift>
 800b078:	4544      	cmp	r4, r8
 800b07a:	d952      	bls.n	800b122 <__hexnan+0x10e>
 800b07c:	2300      	movs	r3, #0
 800b07e:	f1a4 0904 	sub.w	r9, r4, #4
 800b082:	f844 3c04 	str.w	r3, [r4, #-4]
 800b086:	461d      	mov	r5, r3
 800b088:	464c      	mov	r4, r9
 800b08a:	f8cd b008 	str.w	fp, [sp, #8]
 800b08e:	9903      	ldr	r1, [sp, #12]
 800b090:	e7d7      	b.n	800b042 <__hexnan+0x2e>
 800b092:	2a29      	cmp	r2, #41	@ 0x29
 800b094:	d157      	bne.n	800b146 <__hexnan+0x132>
 800b096:	3102      	adds	r1, #2
 800b098:	f8ca 1000 	str.w	r1, [sl]
 800b09c:	f1bb 0f00 	cmp.w	fp, #0
 800b0a0:	d051      	beq.n	800b146 <__hexnan+0x132>
 800b0a2:	454c      	cmp	r4, r9
 800b0a4:	d206      	bcs.n	800b0b4 <__hexnan+0xa0>
 800b0a6:	2d07      	cmp	r5, #7
 800b0a8:	dc04      	bgt.n	800b0b4 <__hexnan+0xa0>
 800b0aa:	462a      	mov	r2, r5
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f7ff ff8a 	bl	800afc8 <L_shift>
 800b0b4:	4544      	cmp	r4, r8
 800b0b6:	d936      	bls.n	800b126 <__hexnan+0x112>
 800b0b8:	4623      	mov	r3, r4
 800b0ba:	f1a8 0204 	sub.w	r2, r8, #4
 800b0be:	f853 1b04 	ldr.w	r1, [r3], #4
 800b0c2:	429f      	cmp	r7, r3
 800b0c4:	f842 1f04 	str.w	r1, [r2, #4]!
 800b0c8:	d2f9      	bcs.n	800b0be <__hexnan+0xaa>
 800b0ca:	1b3b      	subs	r3, r7, r4
 800b0cc:	f023 0303 	bic.w	r3, r3, #3
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	3401      	adds	r4, #1
 800b0d4:	3e03      	subs	r6, #3
 800b0d6:	42b4      	cmp	r4, r6
 800b0d8:	bf88      	it	hi
 800b0da:	2304      	movhi	r3, #4
 800b0dc:	2200      	movs	r2, #0
 800b0de:	4443      	add	r3, r8
 800b0e0:	f843 2b04 	str.w	r2, [r3], #4
 800b0e4:	429f      	cmp	r7, r3
 800b0e6:	d2fb      	bcs.n	800b0e0 <__hexnan+0xcc>
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	b91b      	cbnz	r3, 800b0f4 <__hexnan+0xe0>
 800b0ec:	4547      	cmp	r7, r8
 800b0ee:	d128      	bne.n	800b142 <__hexnan+0x12e>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	603b      	str	r3, [r7, #0]
 800b0f4:	2005      	movs	r0, #5
 800b0f6:	b007      	add	sp, #28
 800b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fc:	3501      	adds	r5, #1
 800b0fe:	2d08      	cmp	r5, #8
 800b100:	f10b 0b01 	add.w	fp, fp, #1
 800b104:	dd06      	ble.n	800b114 <__hexnan+0x100>
 800b106:	4544      	cmp	r4, r8
 800b108:	d9c1      	bls.n	800b08e <__hexnan+0x7a>
 800b10a:	2300      	movs	r3, #0
 800b10c:	2501      	movs	r5, #1
 800b10e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b112:	3c04      	subs	r4, #4
 800b114:	6822      	ldr	r2, [r4, #0]
 800b116:	f000 000f 	and.w	r0, r0, #15
 800b11a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b11e:	6020      	str	r0, [r4, #0]
 800b120:	e7b5      	b.n	800b08e <__hexnan+0x7a>
 800b122:	2508      	movs	r5, #8
 800b124:	e7b3      	b.n	800b08e <__hexnan+0x7a>
 800b126:	9b01      	ldr	r3, [sp, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d0dd      	beq.n	800b0e8 <__hexnan+0xd4>
 800b12c:	f04f 32ff 	mov.w	r2, #4294967295
 800b130:	f1c3 0320 	rsb	r3, r3, #32
 800b134:	40da      	lsrs	r2, r3
 800b136:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b13a:	4013      	ands	r3, r2
 800b13c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b140:	e7d2      	b.n	800b0e8 <__hexnan+0xd4>
 800b142:	3f04      	subs	r7, #4
 800b144:	e7d0      	b.n	800b0e8 <__hexnan+0xd4>
 800b146:	2004      	movs	r0, #4
 800b148:	e7d5      	b.n	800b0f6 <__hexnan+0xe2>

0800b14a <__ascii_mbtowc>:
 800b14a:	b082      	sub	sp, #8
 800b14c:	b901      	cbnz	r1, 800b150 <__ascii_mbtowc+0x6>
 800b14e:	a901      	add	r1, sp, #4
 800b150:	b142      	cbz	r2, 800b164 <__ascii_mbtowc+0x1a>
 800b152:	b14b      	cbz	r3, 800b168 <__ascii_mbtowc+0x1e>
 800b154:	7813      	ldrb	r3, [r2, #0]
 800b156:	600b      	str	r3, [r1, #0]
 800b158:	7812      	ldrb	r2, [r2, #0]
 800b15a:	1e10      	subs	r0, r2, #0
 800b15c:	bf18      	it	ne
 800b15e:	2001      	movne	r0, #1
 800b160:	b002      	add	sp, #8
 800b162:	4770      	bx	lr
 800b164:	4610      	mov	r0, r2
 800b166:	e7fb      	b.n	800b160 <__ascii_mbtowc+0x16>
 800b168:	f06f 0001 	mvn.w	r0, #1
 800b16c:	e7f8      	b.n	800b160 <__ascii_mbtowc+0x16>

0800b16e <_realloc_r>:
 800b16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b172:	4680      	mov	r8, r0
 800b174:	4615      	mov	r5, r2
 800b176:	460c      	mov	r4, r1
 800b178:	b921      	cbnz	r1, 800b184 <_realloc_r+0x16>
 800b17a:	4611      	mov	r1, r2
 800b17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b180:	f7fd bf20 	b.w	8008fc4 <_malloc_r>
 800b184:	b92a      	cbnz	r2, 800b192 <_realloc_r+0x24>
 800b186:	f7fd feab 	bl	8008ee0 <_free_r>
 800b18a:	2400      	movs	r4, #0
 800b18c:	4620      	mov	r0, r4
 800b18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b192:	f000 fa3f 	bl	800b614 <_malloc_usable_size_r>
 800b196:	4285      	cmp	r5, r0
 800b198:	4606      	mov	r6, r0
 800b19a:	d802      	bhi.n	800b1a2 <_realloc_r+0x34>
 800b19c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b1a0:	d8f4      	bhi.n	800b18c <_realloc_r+0x1e>
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	f7fd ff0d 	bl	8008fc4 <_malloc_r>
 800b1aa:	4607      	mov	r7, r0
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d0ec      	beq.n	800b18a <_realloc_r+0x1c>
 800b1b0:	42b5      	cmp	r5, r6
 800b1b2:	462a      	mov	r2, r5
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	bf28      	it	cs
 800b1b8:	4632      	movcs	r2, r6
 800b1ba:	f7fd f810 	bl	80081de <memcpy>
 800b1be:	4621      	mov	r1, r4
 800b1c0:	4640      	mov	r0, r8
 800b1c2:	f7fd fe8d 	bl	8008ee0 <_free_r>
 800b1c6:	463c      	mov	r4, r7
 800b1c8:	e7e0      	b.n	800b18c <_realloc_r+0x1e>

0800b1ca <__ascii_wctomb>:
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	b141      	cbz	r1, 800b1e2 <__ascii_wctomb+0x18>
 800b1d0:	2aff      	cmp	r2, #255	@ 0xff
 800b1d2:	d904      	bls.n	800b1de <__ascii_wctomb+0x14>
 800b1d4:	228a      	movs	r2, #138	@ 0x8a
 800b1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	4770      	bx	lr
 800b1de:	2001      	movs	r0, #1
 800b1e0:	700a      	strb	r2, [r1, #0]
 800b1e2:	4770      	bx	lr

0800b1e4 <__sfputc_r>:
 800b1e4:	6893      	ldr	r3, [r2, #8]
 800b1e6:	b410      	push	{r4}
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	6093      	str	r3, [r2, #8]
 800b1ee:	da07      	bge.n	800b200 <__sfputc_r+0x1c>
 800b1f0:	6994      	ldr	r4, [r2, #24]
 800b1f2:	42a3      	cmp	r3, r4
 800b1f4:	db01      	blt.n	800b1fa <__sfputc_r+0x16>
 800b1f6:	290a      	cmp	r1, #10
 800b1f8:	d102      	bne.n	800b200 <__sfputc_r+0x1c>
 800b1fa:	bc10      	pop	{r4}
 800b1fc:	f000 b932 	b.w	800b464 <__swbuf_r>
 800b200:	6813      	ldr	r3, [r2, #0]
 800b202:	1c58      	adds	r0, r3, #1
 800b204:	6010      	str	r0, [r2, #0]
 800b206:	7019      	strb	r1, [r3, #0]
 800b208:	4608      	mov	r0, r1
 800b20a:	bc10      	pop	{r4}
 800b20c:	4770      	bx	lr

0800b20e <__sfputs_r>:
 800b20e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b210:	4606      	mov	r6, r0
 800b212:	460f      	mov	r7, r1
 800b214:	4614      	mov	r4, r2
 800b216:	18d5      	adds	r5, r2, r3
 800b218:	42ac      	cmp	r4, r5
 800b21a:	d101      	bne.n	800b220 <__sfputs_r+0x12>
 800b21c:	2000      	movs	r0, #0
 800b21e:	e007      	b.n	800b230 <__sfputs_r+0x22>
 800b220:	463a      	mov	r2, r7
 800b222:	4630      	mov	r0, r6
 800b224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b228:	f7ff ffdc 	bl	800b1e4 <__sfputc_r>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d1f3      	bne.n	800b218 <__sfputs_r+0xa>
 800b230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b234 <_vfiprintf_r>:
 800b234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b238:	460d      	mov	r5, r1
 800b23a:	4614      	mov	r4, r2
 800b23c:	4698      	mov	r8, r3
 800b23e:	4606      	mov	r6, r0
 800b240:	b09d      	sub	sp, #116	@ 0x74
 800b242:	b118      	cbz	r0, 800b24c <_vfiprintf_r+0x18>
 800b244:	6a03      	ldr	r3, [r0, #32]
 800b246:	b90b      	cbnz	r3, 800b24c <_vfiprintf_r+0x18>
 800b248:	f7fc fdea 	bl	8007e20 <__sinit>
 800b24c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b24e:	07d9      	lsls	r1, r3, #31
 800b250:	d405      	bmi.n	800b25e <_vfiprintf_r+0x2a>
 800b252:	89ab      	ldrh	r3, [r5, #12]
 800b254:	059a      	lsls	r2, r3, #22
 800b256:	d402      	bmi.n	800b25e <_vfiprintf_r+0x2a>
 800b258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b25a:	f7fc ffa8 	bl	80081ae <__retarget_lock_acquire_recursive>
 800b25e:	89ab      	ldrh	r3, [r5, #12]
 800b260:	071b      	lsls	r3, r3, #28
 800b262:	d501      	bpl.n	800b268 <_vfiprintf_r+0x34>
 800b264:	692b      	ldr	r3, [r5, #16]
 800b266:	b99b      	cbnz	r3, 800b290 <_vfiprintf_r+0x5c>
 800b268:	4629      	mov	r1, r5
 800b26a:	4630      	mov	r0, r6
 800b26c:	f000 f938 	bl	800b4e0 <__swsetup_r>
 800b270:	b170      	cbz	r0, 800b290 <_vfiprintf_r+0x5c>
 800b272:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b274:	07dc      	lsls	r4, r3, #31
 800b276:	d504      	bpl.n	800b282 <_vfiprintf_r+0x4e>
 800b278:	f04f 30ff 	mov.w	r0, #4294967295
 800b27c:	b01d      	add	sp, #116	@ 0x74
 800b27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b282:	89ab      	ldrh	r3, [r5, #12]
 800b284:	0598      	lsls	r0, r3, #22
 800b286:	d4f7      	bmi.n	800b278 <_vfiprintf_r+0x44>
 800b288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b28a:	f7fc ff91 	bl	80081b0 <__retarget_lock_release_recursive>
 800b28e:	e7f3      	b.n	800b278 <_vfiprintf_r+0x44>
 800b290:	2300      	movs	r3, #0
 800b292:	9309      	str	r3, [sp, #36]	@ 0x24
 800b294:	2320      	movs	r3, #32
 800b296:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b29a:	2330      	movs	r3, #48	@ 0x30
 800b29c:	f04f 0901 	mov.w	r9, #1
 800b2a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b450 <_vfiprintf_r+0x21c>
 800b2a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2ac:	4623      	mov	r3, r4
 800b2ae:	469a      	mov	sl, r3
 800b2b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2b4:	b10a      	cbz	r2, 800b2ba <_vfiprintf_r+0x86>
 800b2b6:	2a25      	cmp	r2, #37	@ 0x25
 800b2b8:	d1f9      	bne.n	800b2ae <_vfiprintf_r+0x7a>
 800b2ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b2be:	d00b      	beq.n	800b2d8 <_vfiprintf_r+0xa4>
 800b2c0:	465b      	mov	r3, fp
 800b2c2:	4622      	mov	r2, r4
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f7ff ffa1 	bl	800b20e <__sfputs_r>
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	f000 80a7 	beq.w	800b420 <_vfiprintf_r+0x1ec>
 800b2d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2d4:	445a      	add	r2, fp
 800b2d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 809f 	beq.w	800b420 <_vfiprintf_r+0x1ec>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ec:	f10a 0a01 	add.w	sl, sl, #1
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	9307      	str	r3, [sp, #28]
 800b2f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2fa:	4654      	mov	r4, sl
 800b2fc:	2205      	movs	r2, #5
 800b2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b302:	4853      	ldr	r0, [pc, #332]	@ (800b450 <_vfiprintf_r+0x21c>)
 800b304:	f7fc ff5d 	bl	80081c2 <memchr>
 800b308:	9a04      	ldr	r2, [sp, #16]
 800b30a:	b9d8      	cbnz	r0, 800b344 <_vfiprintf_r+0x110>
 800b30c:	06d1      	lsls	r1, r2, #27
 800b30e:	bf44      	itt	mi
 800b310:	2320      	movmi	r3, #32
 800b312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b316:	0713      	lsls	r3, r2, #28
 800b318:	bf44      	itt	mi
 800b31a:	232b      	movmi	r3, #43	@ 0x2b
 800b31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b320:	f89a 3000 	ldrb.w	r3, [sl]
 800b324:	2b2a      	cmp	r3, #42	@ 0x2a
 800b326:	d015      	beq.n	800b354 <_vfiprintf_r+0x120>
 800b328:	4654      	mov	r4, sl
 800b32a:	2000      	movs	r0, #0
 800b32c:	f04f 0c0a 	mov.w	ip, #10
 800b330:	9a07      	ldr	r2, [sp, #28]
 800b332:	4621      	mov	r1, r4
 800b334:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b338:	3b30      	subs	r3, #48	@ 0x30
 800b33a:	2b09      	cmp	r3, #9
 800b33c:	d94b      	bls.n	800b3d6 <_vfiprintf_r+0x1a2>
 800b33e:	b1b0      	cbz	r0, 800b36e <_vfiprintf_r+0x13a>
 800b340:	9207      	str	r2, [sp, #28]
 800b342:	e014      	b.n	800b36e <_vfiprintf_r+0x13a>
 800b344:	eba0 0308 	sub.w	r3, r0, r8
 800b348:	fa09 f303 	lsl.w	r3, r9, r3
 800b34c:	4313      	orrs	r3, r2
 800b34e:	46a2      	mov	sl, r4
 800b350:	9304      	str	r3, [sp, #16]
 800b352:	e7d2      	b.n	800b2fa <_vfiprintf_r+0xc6>
 800b354:	9b03      	ldr	r3, [sp, #12]
 800b356:	1d19      	adds	r1, r3, #4
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	9103      	str	r1, [sp, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	bfbb      	ittet	lt
 800b360:	425b      	neglt	r3, r3
 800b362:	f042 0202 	orrlt.w	r2, r2, #2
 800b366:	9307      	strge	r3, [sp, #28]
 800b368:	9307      	strlt	r3, [sp, #28]
 800b36a:	bfb8      	it	lt
 800b36c:	9204      	strlt	r2, [sp, #16]
 800b36e:	7823      	ldrb	r3, [r4, #0]
 800b370:	2b2e      	cmp	r3, #46	@ 0x2e
 800b372:	d10a      	bne.n	800b38a <_vfiprintf_r+0x156>
 800b374:	7863      	ldrb	r3, [r4, #1]
 800b376:	2b2a      	cmp	r3, #42	@ 0x2a
 800b378:	d132      	bne.n	800b3e0 <_vfiprintf_r+0x1ac>
 800b37a:	9b03      	ldr	r3, [sp, #12]
 800b37c:	3402      	adds	r4, #2
 800b37e:	1d1a      	adds	r2, r3, #4
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	9203      	str	r2, [sp, #12]
 800b384:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b388:	9305      	str	r3, [sp, #20]
 800b38a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b454 <_vfiprintf_r+0x220>
 800b38e:	2203      	movs	r2, #3
 800b390:	4650      	mov	r0, sl
 800b392:	7821      	ldrb	r1, [r4, #0]
 800b394:	f7fc ff15 	bl	80081c2 <memchr>
 800b398:	b138      	cbz	r0, 800b3aa <_vfiprintf_r+0x176>
 800b39a:	2240      	movs	r2, #64	@ 0x40
 800b39c:	9b04      	ldr	r3, [sp, #16]
 800b39e:	eba0 000a 	sub.w	r0, r0, sl
 800b3a2:	4082      	lsls	r2, r0
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	3401      	adds	r4, #1
 800b3a8:	9304      	str	r3, [sp, #16]
 800b3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ae:	2206      	movs	r2, #6
 800b3b0:	4829      	ldr	r0, [pc, #164]	@ (800b458 <_vfiprintf_r+0x224>)
 800b3b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3b6:	f7fc ff04 	bl	80081c2 <memchr>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d03f      	beq.n	800b43e <_vfiprintf_r+0x20a>
 800b3be:	4b27      	ldr	r3, [pc, #156]	@ (800b45c <_vfiprintf_r+0x228>)
 800b3c0:	bb1b      	cbnz	r3, 800b40a <_vfiprintf_r+0x1d6>
 800b3c2:	9b03      	ldr	r3, [sp, #12]
 800b3c4:	3307      	adds	r3, #7
 800b3c6:	f023 0307 	bic.w	r3, r3, #7
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	9303      	str	r3, [sp, #12]
 800b3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d0:	443b      	add	r3, r7
 800b3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3d4:	e76a      	b.n	800b2ac <_vfiprintf_r+0x78>
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	2001      	movs	r0, #1
 800b3da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3de:	e7a8      	b.n	800b332 <_vfiprintf_r+0xfe>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f04f 0c0a 	mov.w	ip, #10
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	3401      	adds	r4, #1
 800b3ea:	9305      	str	r3, [sp, #20]
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3f2:	3a30      	subs	r2, #48	@ 0x30
 800b3f4:	2a09      	cmp	r2, #9
 800b3f6:	d903      	bls.n	800b400 <_vfiprintf_r+0x1cc>
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d0c6      	beq.n	800b38a <_vfiprintf_r+0x156>
 800b3fc:	9105      	str	r1, [sp, #20]
 800b3fe:	e7c4      	b.n	800b38a <_vfiprintf_r+0x156>
 800b400:	4604      	mov	r4, r0
 800b402:	2301      	movs	r3, #1
 800b404:	fb0c 2101 	mla	r1, ip, r1, r2
 800b408:	e7f0      	b.n	800b3ec <_vfiprintf_r+0x1b8>
 800b40a:	ab03      	add	r3, sp, #12
 800b40c:	9300      	str	r3, [sp, #0]
 800b40e:	462a      	mov	r2, r5
 800b410:	4630      	mov	r0, r6
 800b412:	4b13      	ldr	r3, [pc, #76]	@ (800b460 <_vfiprintf_r+0x22c>)
 800b414:	a904      	add	r1, sp, #16
 800b416:	f7fb fea9 	bl	800716c <_printf_float>
 800b41a:	4607      	mov	r7, r0
 800b41c:	1c78      	adds	r0, r7, #1
 800b41e:	d1d6      	bne.n	800b3ce <_vfiprintf_r+0x19a>
 800b420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b422:	07d9      	lsls	r1, r3, #31
 800b424:	d405      	bmi.n	800b432 <_vfiprintf_r+0x1fe>
 800b426:	89ab      	ldrh	r3, [r5, #12]
 800b428:	059a      	lsls	r2, r3, #22
 800b42a:	d402      	bmi.n	800b432 <_vfiprintf_r+0x1fe>
 800b42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b42e:	f7fc febf 	bl	80081b0 <__retarget_lock_release_recursive>
 800b432:	89ab      	ldrh	r3, [r5, #12]
 800b434:	065b      	lsls	r3, r3, #25
 800b436:	f53f af1f 	bmi.w	800b278 <_vfiprintf_r+0x44>
 800b43a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b43c:	e71e      	b.n	800b27c <_vfiprintf_r+0x48>
 800b43e:	ab03      	add	r3, sp, #12
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	462a      	mov	r2, r5
 800b444:	4630      	mov	r0, r6
 800b446:	4b06      	ldr	r3, [pc, #24]	@ (800b460 <_vfiprintf_r+0x22c>)
 800b448:	a904      	add	r1, sp, #16
 800b44a:	f7fc f92d 	bl	80076a8 <_printf_i>
 800b44e:	e7e4      	b.n	800b41a <_vfiprintf_r+0x1e6>
 800b450:	0800eb58 	.word	0x0800eb58
 800b454:	0800eb5e 	.word	0x0800eb5e
 800b458:	0800eb62 	.word	0x0800eb62
 800b45c:	0800716d 	.word	0x0800716d
 800b460:	0800b20f 	.word	0x0800b20f

0800b464 <__swbuf_r>:
 800b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b466:	460e      	mov	r6, r1
 800b468:	4614      	mov	r4, r2
 800b46a:	4605      	mov	r5, r0
 800b46c:	b118      	cbz	r0, 800b476 <__swbuf_r+0x12>
 800b46e:	6a03      	ldr	r3, [r0, #32]
 800b470:	b90b      	cbnz	r3, 800b476 <__swbuf_r+0x12>
 800b472:	f7fc fcd5 	bl	8007e20 <__sinit>
 800b476:	69a3      	ldr	r3, [r4, #24]
 800b478:	60a3      	str	r3, [r4, #8]
 800b47a:	89a3      	ldrh	r3, [r4, #12]
 800b47c:	071a      	lsls	r2, r3, #28
 800b47e:	d501      	bpl.n	800b484 <__swbuf_r+0x20>
 800b480:	6923      	ldr	r3, [r4, #16]
 800b482:	b943      	cbnz	r3, 800b496 <__swbuf_r+0x32>
 800b484:	4621      	mov	r1, r4
 800b486:	4628      	mov	r0, r5
 800b488:	f000 f82a 	bl	800b4e0 <__swsetup_r>
 800b48c:	b118      	cbz	r0, 800b496 <__swbuf_r+0x32>
 800b48e:	f04f 37ff 	mov.w	r7, #4294967295
 800b492:	4638      	mov	r0, r7
 800b494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	6922      	ldr	r2, [r4, #16]
 800b49a:	b2f6      	uxtb	r6, r6
 800b49c:	1a98      	subs	r0, r3, r2
 800b49e:	6963      	ldr	r3, [r4, #20]
 800b4a0:	4637      	mov	r7, r6
 800b4a2:	4283      	cmp	r3, r0
 800b4a4:	dc05      	bgt.n	800b4b2 <__swbuf_r+0x4e>
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	f7ff fa97 	bl	800a9dc <_fflush_r>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d1ed      	bne.n	800b48e <__swbuf_r+0x2a>
 800b4b2:	68a3      	ldr	r3, [r4, #8]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	60a3      	str	r3, [r4, #8]
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	6022      	str	r2, [r4, #0]
 800b4be:	701e      	strb	r6, [r3, #0]
 800b4c0:	6962      	ldr	r2, [r4, #20]
 800b4c2:	1c43      	adds	r3, r0, #1
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d004      	beq.n	800b4d2 <__swbuf_r+0x6e>
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	07db      	lsls	r3, r3, #31
 800b4cc:	d5e1      	bpl.n	800b492 <__swbuf_r+0x2e>
 800b4ce:	2e0a      	cmp	r6, #10
 800b4d0:	d1df      	bne.n	800b492 <__swbuf_r+0x2e>
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f7ff fa81 	bl	800a9dc <_fflush_r>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d0d9      	beq.n	800b492 <__swbuf_r+0x2e>
 800b4de:	e7d6      	b.n	800b48e <__swbuf_r+0x2a>

0800b4e0 <__swsetup_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4b29      	ldr	r3, [pc, #164]	@ (800b588 <__swsetup_r+0xa8>)
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	6818      	ldr	r0, [r3, #0]
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	b118      	cbz	r0, 800b4f4 <__swsetup_r+0x14>
 800b4ec:	6a03      	ldr	r3, [r0, #32]
 800b4ee:	b90b      	cbnz	r3, 800b4f4 <__swsetup_r+0x14>
 800b4f0:	f7fc fc96 	bl	8007e20 <__sinit>
 800b4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4f8:	0719      	lsls	r1, r3, #28
 800b4fa:	d422      	bmi.n	800b542 <__swsetup_r+0x62>
 800b4fc:	06da      	lsls	r2, r3, #27
 800b4fe:	d407      	bmi.n	800b510 <__swsetup_r+0x30>
 800b500:	2209      	movs	r2, #9
 800b502:	602a      	str	r2, [r5, #0]
 800b504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b508:	f04f 30ff 	mov.w	r0, #4294967295
 800b50c:	81a3      	strh	r3, [r4, #12]
 800b50e:	e033      	b.n	800b578 <__swsetup_r+0x98>
 800b510:	0758      	lsls	r0, r3, #29
 800b512:	d512      	bpl.n	800b53a <__swsetup_r+0x5a>
 800b514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b516:	b141      	cbz	r1, 800b52a <__swsetup_r+0x4a>
 800b518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b51c:	4299      	cmp	r1, r3
 800b51e:	d002      	beq.n	800b526 <__swsetup_r+0x46>
 800b520:	4628      	mov	r0, r5
 800b522:	f7fd fcdd 	bl	8008ee0 <_free_r>
 800b526:	2300      	movs	r3, #0
 800b528:	6363      	str	r3, [r4, #52]	@ 0x34
 800b52a:	89a3      	ldrh	r3, [r4, #12]
 800b52c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b530:	81a3      	strh	r3, [r4, #12]
 800b532:	2300      	movs	r3, #0
 800b534:	6063      	str	r3, [r4, #4]
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	89a3      	ldrh	r3, [r4, #12]
 800b53c:	f043 0308 	orr.w	r3, r3, #8
 800b540:	81a3      	strh	r3, [r4, #12]
 800b542:	6923      	ldr	r3, [r4, #16]
 800b544:	b94b      	cbnz	r3, 800b55a <__swsetup_r+0x7a>
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b54c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b550:	d003      	beq.n	800b55a <__swsetup_r+0x7a>
 800b552:	4621      	mov	r1, r4
 800b554:	4628      	mov	r0, r5
 800b556:	f000 f88a 	bl	800b66e <__smakebuf_r>
 800b55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b55e:	f013 0201 	ands.w	r2, r3, #1
 800b562:	d00a      	beq.n	800b57a <__swsetup_r+0x9a>
 800b564:	2200      	movs	r2, #0
 800b566:	60a2      	str	r2, [r4, #8]
 800b568:	6962      	ldr	r2, [r4, #20]
 800b56a:	4252      	negs	r2, r2
 800b56c:	61a2      	str	r2, [r4, #24]
 800b56e:	6922      	ldr	r2, [r4, #16]
 800b570:	b942      	cbnz	r2, 800b584 <__swsetup_r+0xa4>
 800b572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b576:	d1c5      	bne.n	800b504 <__swsetup_r+0x24>
 800b578:	bd38      	pop	{r3, r4, r5, pc}
 800b57a:	0799      	lsls	r1, r3, #30
 800b57c:	bf58      	it	pl
 800b57e:	6962      	ldrpl	r2, [r4, #20]
 800b580:	60a2      	str	r2, [r4, #8]
 800b582:	e7f4      	b.n	800b56e <__swsetup_r+0x8e>
 800b584:	2000      	movs	r0, #0
 800b586:	e7f7      	b.n	800b578 <__swsetup_r+0x98>
 800b588:	20000040 	.word	0x20000040

0800b58c <_raise_r>:
 800b58c:	291f      	cmp	r1, #31
 800b58e:	b538      	push	{r3, r4, r5, lr}
 800b590:	4605      	mov	r5, r0
 800b592:	460c      	mov	r4, r1
 800b594:	d904      	bls.n	800b5a0 <_raise_r+0x14>
 800b596:	2316      	movs	r3, #22
 800b598:	6003      	str	r3, [r0, #0]
 800b59a:	f04f 30ff 	mov.w	r0, #4294967295
 800b59e:	bd38      	pop	{r3, r4, r5, pc}
 800b5a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b5a2:	b112      	cbz	r2, 800b5aa <_raise_r+0x1e>
 800b5a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5a8:	b94b      	cbnz	r3, 800b5be <_raise_r+0x32>
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f000 f830 	bl	800b610 <_getpid_r>
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5ba:	f000 b817 	b.w	800b5ec <_kill_r>
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d00a      	beq.n	800b5d8 <_raise_r+0x4c>
 800b5c2:	1c59      	adds	r1, r3, #1
 800b5c4:	d103      	bne.n	800b5ce <_raise_r+0x42>
 800b5c6:	2316      	movs	r3, #22
 800b5c8:	6003      	str	r3, [r0, #0]
 800b5ca:	2001      	movs	r0, #1
 800b5cc:	e7e7      	b.n	800b59e <_raise_r+0x12>
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b5d6:	4798      	blx	r3
 800b5d8:	2000      	movs	r0, #0
 800b5da:	e7e0      	b.n	800b59e <_raise_r+0x12>

0800b5dc <raise>:
 800b5dc:	4b02      	ldr	r3, [pc, #8]	@ (800b5e8 <raise+0xc>)
 800b5de:	4601      	mov	r1, r0
 800b5e0:	6818      	ldr	r0, [r3, #0]
 800b5e2:	f7ff bfd3 	b.w	800b58c <_raise_r>
 800b5e6:	bf00      	nop
 800b5e8:	20000040 	.word	0x20000040

0800b5ec <_kill_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	4d06      	ldr	r5, [pc, #24]	@ (800b60c <_kill_r+0x20>)
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	f7f7 f9d0 	bl	800299e <_kill>
 800b5fe:	1c43      	adds	r3, r0, #1
 800b600:	d102      	bne.n	800b608 <_kill_r+0x1c>
 800b602:	682b      	ldr	r3, [r5, #0]
 800b604:	b103      	cbz	r3, 800b608 <_kill_r+0x1c>
 800b606:	6023      	str	r3, [r4, #0]
 800b608:	bd38      	pop	{r3, r4, r5, pc}
 800b60a:	bf00      	nop
 800b60c:	20000a90 	.word	0x20000a90

0800b610 <_getpid_r>:
 800b610:	f7f7 b9be 	b.w	8002990 <_getpid>

0800b614 <_malloc_usable_size_r>:
 800b614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b618:	1f18      	subs	r0, r3, #4
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	bfbc      	itt	lt
 800b61e:	580b      	ldrlt	r3, [r1, r0]
 800b620:	18c0      	addlt	r0, r0, r3
 800b622:	4770      	bx	lr

0800b624 <__swhatbuf_r>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	460c      	mov	r4, r1
 800b628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62c:	4615      	mov	r5, r2
 800b62e:	2900      	cmp	r1, #0
 800b630:	461e      	mov	r6, r3
 800b632:	b096      	sub	sp, #88	@ 0x58
 800b634:	da0c      	bge.n	800b650 <__swhatbuf_r+0x2c>
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	2100      	movs	r1, #0
 800b63a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b63e:	bf14      	ite	ne
 800b640:	2340      	movne	r3, #64	@ 0x40
 800b642:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b646:	2000      	movs	r0, #0
 800b648:	6031      	str	r1, [r6, #0]
 800b64a:	602b      	str	r3, [r5, #0]
 800b64c:	b016      	add	sp, #88	@ 0x58
 800b64e:	bd70      	pop	{r4, r5, r6, pc}
 800b650:	466a      	mov	r2, sp
 800b652:	f000 f849 	bl	800b6e8 <_fstat_r>
 800b656:	2800      	cmp	r0, #0
 800b658:	dbed      	blt.n	800b636 <__swhatbuf_r+0x12>
 800b65a:	9901      	ldr	r1, [sp, #4]
 800b65c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b660:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b664:	4259      	negs	r1, r3
 800b666:	4159      	adcs	r1, r3
 800b668:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b66c:	e7eb      	b.n	800b646 <__swhatbuf_r+0x22>

0800b66e <__smakebuf_r>:
 800b66e:	898b      	ldrh	r3, [r1, #12]
 800b670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b672:	079d      	lsls	r5, r3, #30
 800b674:	4606      	mov	r6, r0
 800b676:	460c      	mov	r4, r1
 800b678:	d507      	bpl.n	800b68a <__smakebuf_r+0x1c>
 800b67a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b67e:	6023      	str	r3, [r4, #0]
 800b680:	6123      	str	r3, [r4, #16]
 800b682:	2301      	movs	r3, #1
 800b684:	6163      	str	r3, [r4, #20]
 800b686:	b003      	add	sp, #12
 800b688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b68a:	466a      	mov	r2, sp
 800b68c:	ab01      	add	r3, sp, #4
 800b68e:	f7ff ffc9 	bl	800b624 <__swhatbuf_r>
 800b692:	9f00      	ldr	r7, [sp, #0]
 800b694:	4605      	mov	r5, r0
 800b696:	4639      	mov	r1, r7
 800b698:	4630      	mov	r0, r6
 800b69a:	f7fd fc93 	bl	8008fc4 <_malloc_r>
 800b69e:	b948      	cbnz	r0, 800b6b4 <__smakebuf_r+0x46>
 800b6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a4:	059a      	lsls	r2, r3, #22
 800b6a6:	d4ee      	bmi.n	800b686 <__smakebuf_r+0x18>
 800b6a8:	f023 0303 	bic.w	r3, r3, #3
 800b6ac:	f043 0302 	orr.w	r3, r3, #2
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	e7e2      	b.n	800b67a <__smakebuf_r+0xc>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b6ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	9b01      	ldr	r3, [sp, #4]
 800b6c2:	6020      	str	r0, [r4, #0]
 800b6c4:	b15b      	cbz	r3, 800b6de <__smakebuf_r+0x70>
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6cc:	f000 f81e 	bl	800b70c <_isatty_r>
 800b6d0:	b128      	cbz	r0, 800b6de <__smakebuf_r+0x70>
 800b6d2:	89a3      	ldrh	r3, [r4, #12]
 800b6d4:	f023 0303 	bic.w	r3, r3, #3
 800b6d8:	f043 0301 	orr.w	r3, r3, #1
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	89a3      	ldrh	r3, [r4, #12]
 800b6e0:	431d      	orrs	r5, r3
 800b6e2:	81a5      	strh	r5, [r4, #12]
 800b6e4:	e7cf      	b.n	800b686 <__smakebuf_r+0x18>
	...

0800b6e8 <_fstat_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4d06      	ldr	r5, [pc, #24]	@ (800b708 <_fstat_r+0x20>)
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	4608      	mov	r0, r1
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	602b      	str	r3, [r5, #0]
 800b6f6:	f7f7 f9b1 	bl	8002a5c <_fstat>
 800b6fa:	1c43      	adds	r3, r0, #1
 800b6fc:	d102      	bne.n	800b704 <_fstat_r+0x1c>
 800b6fe:	682b      	ldr	r3, [r5, #0]
 800b700:	b103      	cbz	r3, 800b704 <_fstat_r+0x1c>
 800b702:	6023      	str	r3, [r4, #0]
 800b704:	bd38      	pop	{r3, r4, r5, pc}
 800b706:	bf00      	nop
 800b708:	20000a90 	.word	0x20000a90

0800b70c <_isatty_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	2300      	movs	r3, #0
 800b710:	4d05      	ldr	r5, [pc, #20]	@ (800b728 <_isatty_r+0x1c>)
 800b712:	4604      	mov	r4, r0
 800b714:	4608      	mov	r0, r1
 800b716:	602b      	str	r3, [r5, #0]
 800b718:	f7f7 f9af 	bl	8002a7a <_isatty>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_isatty_r+0x1a>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_isatty_r+0x1a>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20000a90 	.word	0x20000a90

0800b72c <_init>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	bf00      	nop
 800b730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b732:	bc08      	pop	{r3}
 800b734:	469e      	mov	lr, r3
 800b736:	4770      	bx	lr

0800b738 <_fini>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	bf00      	nop
 800b73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b73e:	bc08      	pop	{r3}
 800b740:	469e      	mov	lr, r3
 800b742:	4770      	bx	lr
