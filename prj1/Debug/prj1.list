
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b120  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f38  0800b22c  0800b22c  0000c22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e164  0800e164  000101ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e164  0800e164  0000f164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e16c  0800e16c  000101ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e16c  0800e16c  0000f16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e170  0800e170  0000f170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800e174  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000181c  200001ec  0800e360  000101ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  0800e360  00010a08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016257  00000000  00000000  00010215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc7  00000000  00000000  0002646c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0002a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb5  00000000  00000000  0002b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb83  00000000  00000000  0002c585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b477  00000000  00000000  00048108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ac2  00000000  00000000  0006357f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8041  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c1c  00000000  00000000  000f8084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000fdca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b214 	.word	0x0800b214

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	0800b214 	.word	0x0800b214

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	@ 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	3c01      	subs	r4, #1
 8000400:	bf28      	it	cs
 8000402:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000406:	d2e9      	bcs.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_frsub>:
 8000ab0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ab4:	e002      	b.n	8000abc <__addsf3>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_fsub>:
 8000ab8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000abc <__addsf3>:
 8000abc:	0042      	lsls	r2, r0, #1
 8000abe:	bf1f      	itttt	ne
 8000ac0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac4:	ea92 0f03 	teqne	r2, r3
 8000ac8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000acc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad0:	d06a      	beq.n	8000ba8 <__addsf3+0xec>
 8000ad2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ada:	bfc1      	itttt	gt
 8000adc:	18d2      	addgt	r2, r2, r3
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	4048      	eorgt	r0, r1
 8000ae2:	4041      	eorgt	r1, r0
 8000ae4:	bfb8      	it	lt
 8000ae6:	425b      	neglt	r3, r3
 8000ae8:	2b19      	cmp	r3, #25
 8000aea:	bf88      	it	hi
 8000aec:	4770      	bxhi	lr
 8000aee:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b02:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b06:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b0a:	bf18      	it	ne
 8000b0c:	4249      	negne	r1, r1
 8000b0e:	ea92 0f03 	teq	r2, r3
 8000b12:	d03f      	beq.n	8000b94 <__addsf3+0xd8>
 8000b14:	f1a2 0201 	sub.w	r2, r2, #1
 8000b18:	fa41 fc03 	asr.w	ip, r1, r3
 8000b1c:	eb10 000c 	adds.w	r0, r0, ip
 8000b20:	f1c3 0320 	rsb	r3, r3, #32
 8000b24:	fa01 f103 	lsl.w	r1, r1, r3
 8000b28:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b2c:	d502      	bpl.n	8000b34 <__addsf3+0x78>
 8000b2e:	4249      	negs	r1, r1
 8000b30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b34:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b38:	d313      	bcc.n	8000b62 <__addsf3+0xa6>
 8000b3a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b3e:	d306      	bcc.n	8000b4e <__addsf3+0x92>
 8000b40:	0840      	lsrs	r0, r0, #1
 8000b42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b46:	f102 0201 	add.w	r2, r2, #1
 8000b4a:	2afe      	cmp	r2, #254	@ 0xfe
 8000b4c:	d251      	bcs.n	8000bf2 <__addsf3+0x136>
 8000b4e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b56:	bf08      	it	eq
 8000b58:	f020 0001 	biceq.w	r0, r0, #1
 8000b5c:	ea40 0003 	orr.w	r0, r0, r3
 8000b60:	4770      	bx	lr
 8000b62:	0049      	lsls	r1, r1, #1
 8000b64:	eb40 0000 	adc.w	r0, r0, r0
 8000b68:	3a01      	subs	r2, #1
 8000b6a:	bf28      	it	cs
 8000b6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b70:	d2ed      	bcs.n	8000b4e <__addsf3+0x92>
 8000b72:	fab0 fc80 	clz	ip, r0
 8000b76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b82:	bfaa      	itet	ge
 8000b84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b88:	4252      	neglt	r2, r2
 8000b8a:	4318      	orrge	r0, r3
 8000b8c:	bfbc      	itt	lt
 8000b8e:	40d0      	lsrlt	r0, r2
 8000b90:	4318      	orrlt	r0, r3
 8000b92:	4770      	bx	lr
 8000b94:	f092 0f00 	teq	r2, #0
 8000b98:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b9c:	bf06      	itte	eq
 8000b9e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ba2:	3201      	addeq	r2, #1
 8000ba4:	3b01      	subne	r3, #1
 8000ba6:	e7b5      	b.n	8000b14 <__addsf3+0x58>
 8000ba8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb0:	bf18      	it	ne
 8000bb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb6:	d021      	beq.n	8000bfc <__addsf3+0x140>
 8000bb8:	ea92 0f03 	teq	r2, r3
 8000bbc:	d004      	beq.n	8000bc8 <__addsf3+0x10c>
 8000bbe:	f092 0f00 	teq	r2, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	4608      	moveq	r0, r1
 8000bc6:	4770      	bx	lr
 8000bc8:	ea90 0f01 	teq	r0, r1
 8000bcc:	bf1c      	itt	ne
 8000bce:	2000      	movne	r0, #0
 8000bd0:	4770      	bxne	lr
 8000bd2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bd6:	d104      	bne.n	8000be2 <__addsf3+0x126>
 8000bd8:	0040      	lsls	r0, r0, #1
 8000bda:	bf28      	it	cs
 8000bdc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000be0:	4770      	bx	lr
 8000be2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000be6:	bf3c      	itt	cc
 8000be8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bec:	4770      	bxcc	lr
 8000bee:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	4770      	bx	lr
 8000bfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c00:	bf16      	itet	ne
 8000c02:	4608      	movne	r0, r1
 8000c04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c08:	4601      	movne	r1, r0
 8000c0a:	0242      	lsls	r2, r0, #9
 8000c0c:	bf06      	itte	eq
 8000c0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c12:	ea90 0f01 	teqeq	r0, r1
 8000c16:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_ui2f>:
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e004      	b.n	8000c2c <__aeabi_i2f+0x8>
 8000c22:	bf00      	nop

08000c24 <__aeabi_i2f>:
 8000c24:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c28:	bf48      	it	mi
 8000c2a:	4240      	negmi	r0, r0
 8000c2c:	ea5f 0c00 	movs.w	ip, r0
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c38:	4601      	mov	r1, r0
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	e01c      	b.n	8000c7a <__aeabi_l2f+0x2a>

08000c40 <__aeabi_ul2f>:
 8000c40:	ea50 0201 	orrs.w	r2, r0, r1
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e00a      	b.n	8000c64 <__aeabi_l2f+0x14>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_l2f>:
 8000c50:	ea50 0201 	orrs.w	r2, r0, r1
 8000c54:	bf08      	it	eq
 8000c56:	4770      	bxeq	lr
 8000c58:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__aeabi_l2f+0x14>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	ea5f 0c01 	movs.w	ip, r1
 8000c68:	bf02      	ittt	eq
 8000c6a:	4684      	moveq	ip, r0
 8000c6c:	4601      	moveq	r1, r0
 8000c6e:	2000      	moveq	r0, #0
 8000c70:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c74:	bf08      	it	eq
 8000c76:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c7e:	fabc f28c 	clz	r2, ip
 8000c82:	3a08      	subs	r2, #8
 8000c84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c88:	db10      	blt.n	8000cac <__aeabi_l2f+0x5c>
 8000c8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8e:	4463      	add	r3, ip
 8000c90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	f020 0001 	biceq.w	r0, r0, #1
 8000caa:	4770      	bx	lr
 8000cac:	f102 0220 	add.w	r2, r2, #32
 8000cb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb4:	f1c2 0220 	rsb	r2, r2, #32
 8000cb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc0:	eb43 0002 	adc.w	r0, r3, r2
 8000cc4:	bf08      	it	eq
 8000cc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_f2uiz>:
 8000ccc:	0042      	lsls	r2, r0, #1
 8000cce:	d20e      	bcs.n	8000cee <__aeabi_f2uiz+0x22>
 8000cd0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cd4:	d30b      	bcc.n	8000cee <__aeabi_f2uiz+0x22>
 8000cd6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cde:	d409      	bmi.n	8000cf4 <__aeabi_f2uiz+0x28>
 8000ce0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ce4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ce8:	fa23 f002 	lsr.w	r0, r3, r2
 8000cec:	4770      	bx	lr
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	4770      	bx	lr
 8000cf4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000cf8:	d101      	bne.n	8000cfe <__aeabi_f2uiz+0x32>
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	d102      	bne.n	8000d04 <__aeabi_f2uiz+0x38>
 8000cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8000d02:	4770      	bx	lr
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	889b      	ldrh	r3, [r3, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f001 fee8 	bl	8002b02 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	889b      	ldrh	r3, [r3, #4]
 8000d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000d38:	2311      	movs	r3, #17
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	79db      	ldrb	r3, [r3, #7]
 8000d40:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000d42:	2303      	movs	r3, #3
 8000d44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f107 0208 	add.w	r2, r7, #8
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fd3b 	bl	80027cc <HAL_GPIO_Init>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	889b      	ldrh	r3, [r3, #4]
 8000d78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	79db      	ldrb	r3, [r3, #7]
 8000d82:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f107 0208 	add.w	r2, r7, #8
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fd1c 	bl	80027cc <HAL_GPIO_Init>
}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 8000da6:	4a76      	ldr	r2, [pc, #472]	@ (8000f80 <DHT_getData+0x1e4>)
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db0:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	799b      	ldrb	r3, [r3, #6]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d103      	bne.n	8000dc4 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000dbc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000dc0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000dc2:	e002      	b.n	8000dca <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8000dc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000dca:	f001 f89d 	bl	8001f08 <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	1ad2      	subs	r2, r2, r3
 8000dd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d212      	bcs.n	8000e02 <DHT_getData+0x66>
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00e      	beq.n	8000e02 <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	61bb      	str	r3, [r7, #24]
		return data;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	461a      	mov	r2, r3
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dfc:	e882 0003 	stmia.w	r2, {r0, r1}
 8000e00:	e166      	b.n	80010d0 <DHT_getData+0x334>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8000e02:	f001 f881 	bl	8001f08 <HAL_GetTick>
 8000e06:	4603      	mov	r3, r0
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8000e0e:	6838      	ldr	r0, [r7, #0]
 8000e10:	f7ff ff7c 	bl	8000d0c <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	889b      	ldrh	r3, [r3, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f001 fe6f 	bl	8002b02 <HAL_GPIO_WritePin>
	Delay(18);
 8000e24:	2012      	movs	r0, #18
 8000e26:	f001 f879 	bl	8001f1c <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	6818      	ldr	r0, [r3, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	889b      	ldrh	r3, [r3, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	4619      	mov	r1, r3
 8000e36:	f001 fe64 	bl	8002b02 <HAL_GPIO_WritePin>
	goToInput(sensor);
 8000e3a:	6838      	ldr	r0, [r7, #0]
 8000e3c:	f7ff ff8f 	bl	8000d5e <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 8000e48:	e01a      	b.n	8000e80 <DHT_getData+0xe4>
		timeout++;
 8000e4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8000e50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d912      	bls.n	8000e80 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e5a:	b662      	cpsie	i
}
 8000e5c:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000e64:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000e6c:	60da      	str	r2, [r3, #12]

			return data;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	461a      	mov	r2, r3
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e7a:	e882 0003 	stmia.w	r2, {r0, r1}
 8000e7e:	e127      	b.n	80010d0 <DHT_getData+0x334>
	while(getLine()) {
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	889b      	ldrh	r3, [r3, #4]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	f001 fe22 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d0d9      	beq.n	8000e4a <DHT_getData+0xae>
		}
	}
	timeout = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание подъёма
	while(!getLine()) {
 8000e9a:	e01a      	b.n	8000ed2 <DHT_getData+0x136>
		timeout++;
 8000e9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8000ea2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ea4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d912      	bls.n	8000ed2 <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 8000eac:	b662      	cpsie	i
}
 8000eae:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000eb6:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000ebe:	60da      	str	r2, [r3, #12]

			return data;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ecc:	e882 0003 	stmia.w	r2, {r0, r1}
 8000ed0:	e0fe      	b.n	80010d0 <DHT_getData+0x334>
	while(!getLine()) {
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	889b      	ldrh	r3, [r3, #4]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4610      	mov	r0, r2
 8000ede:	f001 fdf9 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d1d9      	bne.n	8000e9c <DHT_getData+0x100>
		}
	}
	timeout = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 8000eec:	e012      	b.n	8000f14 <DHT_getData+0x178>
		timeout++;
 8000eee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8000ef4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ef6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d90a      	bls.n	8000f14 <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 8000efe:	b662      	cpsie	i
}
 8000f00:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	461a      	mov	r2, r3
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f0e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000f12:	e0dd      	b.n	80010d0 <DHT_getData+0x334>
	while(getLine()) {
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	889b      	ldrh	r3, [r3, #4]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4610      	mov	r0, r2
 8000f20:	f001 fdd8 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d0e1      	beq.n	8000eee <DHT_getData+0x152>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8000f2a:	4a16      	ldr	r2, [pc, #88]	@ (8000f84 <DHT_getData+0x1e8>)
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f34:	6018      	str	r0, [r3, #0]
 8000f36:	3304      	adds	r3, #4
 8000f38:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000f40:	e05d      	b.n	8000ffe <DHT_getData+0x262>
		for(uint8_t b = 7; b != 255; b--) {
 8000f42:	2307      	movs	r3, #7
 8000f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000f48:	e050      	b.n	8000fec <DHT_getData+0x250>
			uint16_t hT = 0, lT = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	843b      	strh	r3, [r7, #32]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8000f52:	e002      	b.n	8000f5a <DHT_getData+0x1be>
 8000f54:	8bfb      	ldrh	r3, [r7, #30]
 8000f56:	3301      	adds	r3, #1
 8000f58:	83fb      	strh	r3, [r7, #30]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	889b      	ldrh	r3, [r3, #4]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	f001 fdb5 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d004      	beq.n	8000f7a <DHT_getData+0x1de>
 8000f70:	8bfb      	ldrh	r3, [r7, #30]
 8000f72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d1ec      	bne.n	8000f54 <DHT_getData+0x1b8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			while(getLine()&& hT != 65535) hT++;
 8000f7e:	e006      	b.n	8000f8e <DHT_getData+0x1f2>
 8000f80:	0800b22c 	.word	0x0800b22c
 8000f84:	0800b234 	.word	0x0800b234
 8000f88:	8c3b      	ldrh	r3, [r7, #32]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	843b      	strh	r3, [r7, #32]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	889b      	ldrh	r3, [r3, #4]
 8000f96:	4619      	mov	r1, r3
 8000f98:	4610      	mov	r0, r2
 8000f9a:	f001 fd9b 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d104      	bne.n	8000fae <DHT_getData+0x212>
 8000fa4:	8c3b      	ldrh	r3, [r7, #32]
 8000fa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d1ec      	bne.n	8000f88 <DHT_getData+0x1ec>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 8000fae:	8c3a      	ldrh	r2, [r7, #32]
 8000fb0:	8bfb      	ldrh	r3, [r7, #30]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d915      	bls.n	8000fe2 <DHT_getData+0x246>
 8000fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fba:	3328      	adds	r3, #40	@ 0x28
 8000fbc:	443b      	add	r3, r7
 8000fbe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000fc2:	b25a      	sxtb	r2, r3
 8000fc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fc8:	2101      	movs	r1, #1
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b25a      	sxtb	r2, r3
 8000fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	3328      	adds	r3, #40	@ 0x28
 8000fdc:	443b      	add	r3, r7
 8000fde:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 8000fe2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000fec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000ff0:	2bff      	cmp	r3, #255	@ 0xff
 8000ff2:	d1aa      	bne.n	8000f4a <DHT_getData+0x1ae>
	for(uint8_t a = 0; a < 5; a++) {
 8000ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000ffe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001002:	2b04      	cmp	r3, #4
 8001004:	d99d      	bls.n	8000f42 <DHT_getData+0x1a6>
  __ASM volatile ("cpsie i" : : : "memory");
 8001006:	b662      	cpsie	i
}
 8001008:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 800100a:	7b3a      	ldrb	r2, [r7, #12]
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	4413      	add	r3, r2
 8001010:	b2da      	uxtb	r2, r3
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	4413      	add	r3, r2
 8001016:	b2da      	uxtb	r2, r3
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	4413      	add	r3, r2
 800101c:	b2da      	uxtb	r2, r3
 800101e:	7c3b      	ldrb	r3, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d147      	bne.n	80010b4 <DHT_getData+0x318>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	799b      	ldrb	r3, [r3, #6]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d133      	bne.n	8001094 <DHT_getData+0x2f8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	7b7a      	ldrb	r2, [r7, #13]
 8001032:	4313      	orrs	r3, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fdf5 	bl	8000c24 <__aeabi_i2f>
 800103a:	4603      	mov	r3, r0
 800103c:	4926      	ldr	r1, [pc, #152]	@ (80010d8 <DHT_getData+0x33c>)
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f88c 	bl	800015c <__aeabi_fmul>
 8001044:	4603      	mov	r3, r0
 8001046:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	b25b      	sxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0e      	blt.n	800106e <DHT_getData+0x2d2>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	7bfa      	ldrb	r2, [r7, #15]
 8001056:	4313      	orrs	r3, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fde3 	bl	8000c24 <__aeabi_i2f>
 800105e:	4603      	mov	r3, r0
 8001060:	491d      	ldr	r1, [pc, #116]	@ (80010d8 <DHT_getData+0x33c>)
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f87a 	bl	800015c <__aeabi_fmul>
 8001068:	4603      	mov	r3, r0
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	e012      	b.n	8001094 <DHT_getData+0x2f8>
			}	else {
				rawData[2] &= ~(1<<7);
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001074:	b2db      	uxtb	r3, r3
 8001076:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	4313      	orrs	r3, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fdcf 	bl	8000c24 <__aeabi_i2f>
 8001086:	4603      	mov	r3, r0
 8001088:	4914      	ldr	r1, [pc, #80]	@ (80010dc <DHT_getData+0x340>)
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f866 	bl	800015c <__aeabi_fmul>
 8001090:	4603      	mov	r3, r0
 8001092:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	799b      	ldrb	r3, [r3, #6]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10b      	bne.n	80010b4 <DHT_getData+0x318>
			data.hum = (float)rawData[0];
 800109c:	7b3b      	ldrb	r3, [r7, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fdbc 	bl	8000c1c <__aeabi_ui2f>
 80010a4:	4603      	mov	r3, r0
 80010a6:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fdb6 	bl	8000c1c <__aeabi_ui2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	461a      	mov	r2, r3
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	3728      	adds	r7, #40	@ 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	3dcccccd 	.word	0x3dcccccd
 80010dc:	bdcccccd 	.word	0xbdcccccd

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b0a3      	sub	sp, #140	@ 0x8c
 80010e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f000 feb7 	bl	8001e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 f86b 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f000 f981 	bl	80013f4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80010f2:	f008 ff0f 	bl	8009f14 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80010f6:	f000 f8c3 	bl	8001280 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010fa:	f000 f8ff 	bl	80012fc <MX_I2C1_Init>
  MX_TIM4_Init();
 80010fe:	f000 f92b 	bl	8001358 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8001102:	482a      	ldr	r0, [pc, #168]	@ (80011ac <main+0xcc>)
 8001104:	f001 f806 	bl	8002114 <HAL_ADC_Start>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110e:	4828      	ldr	r0, [pc, #160]	@ (80011b0 <main+0xd0>)
 8001110:	f001 fcf7 	bl	8002b02 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim4);
 8001114:	4827      	ldr	r0, [pc, #156]	@ (80011b4 <main+0xd4>)
 8001116:	f004 fc41 	bl	800599c <HAL_TIM_Base_Start_IT>
  ssd1306_Init();
 800111a:	f000 fa0f 	bl	800153c <ssd1306_Init>
  ssd1306_TestFonts();
 800111e:	f000 fc3d 	bl	800199c <ssd1306_TestFonts>
  ssd1306_TestAll();
 8001122:	f000 fd0f 	bl	8001b44 <ssd1306_TestAll>

  DHT_sensor livingRoom = {GPIOB, GPIO_PIN_4, DHT11, GPIO_NOPULL};
 8001126:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <main+0xd8>)
 8001138:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800113a:	2310      	movs	r3, #16
 800113c:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001140:	481a      	ldr	r0, [pc, #104]	@ (80011ac <main+0xcc>)
 8001142:	f001 f895 	bl	8002270 <HAL_ADC_GetValue>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <main+0xdc>)
 800114c:	801a      	strh	r2, [r3, #0]
//	  sprintf(CDC_BUFFER,"ADC: %hu \r\n",ADC_BUFFER);

	    uint8_t msg[100];
	    DHT_data d = DHT_getData(&livingRoom);
 800114e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001152:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fe1f 	bl	8000d9c <DHT_getData>
	    sprintf(msg, "Living room: Temp %d°C, Hum %d%% ADC:%d\r\n", (uint8_t)d.temp, (uint8_t)d.hum , ADC_BUFFER);
 800115e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fdb3 	bl	8000ccc <__aeabi_f2uiz>
 8001166:	4603      	mov	r3, r0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461c      	mov	r4, r3
 800116c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fdac 	bl	8000ccc <__aeabi_f2uiz>
 8001174:	4603      	mov	r3, r0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <main+0xdc>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	4638      	mov	r0, r7
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	4613      	mov	r3, r2
 8001184:	4622      	mov	r2, r4
 8001186:	490e      	ldr	r1, [pc, #56]	@ (80011c0 <main+0xe0>)
 8001188:	f009 fb94 	bl	800a8b4 <siprintf>

		  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800118c:	463b      	mov	r3, r7
 800118e:	4618      	mov	r0, r3
 8001190:	f7fe ffdc 	bl	800014c <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	b29a      	uxth	r2, r3
 8001198:	463b      	mov	r3, r7
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f008 ff77 	bl	800a090 <CDC_Transmit_FS>




//	  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
	  	  HAL_Delay(100);
 80011a2:	2064      	movs	r0, #100	@ 0x64
 80011a4:	f000 feba 	bl	8001f1c <HAL_Delay>
  {
 80011a8:	bf00      	nop
 80011aa:	e7c9      	b.n	8001140 <main+0x60>
 80011ac:	20000208 	.word	0x20000208
 80011b0:	40011000 	.word	0x40011000
 80011b4:	2000028c 	.word	0x2000028c
 80011b8:	40010c00 	.word	0x40010c00
 80011bc:	200002d4 	.word	0x200002d4
 80011c0:	0800b23c 	.word	0x0800b23c

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	@ 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ce:	2228      	movs	r2, #40	@ 0x28
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 fba8 	bl	800a928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001202:	2301      	movs	r3, #1
 8001204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001206:	2302      	movs	r3, #2
 8001208:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800120e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001210:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121a:	4618      	mov	r0, r3
 800121c:	f003 febc 	bl	8004f98 <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001226:	f000 f94b 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800123a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2102      	movs	r1, #2
 8001246:	4618      	mov	r0, r3
 8001248:	f004 f928 	bl	800549c <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001252:	f000 f935 	bl	80014c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001256:	2312      	movs	r3, #18
 8001258:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800125a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800125e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4618      	mov	r0, r3
 8001268:	f004 fa92 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001272:	f000 f925 	bl	80014c0 <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	3750      	adds	r7, #80	@ 0x50
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001290:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <MX_ADC1_Init+0x74>)
 8001292:	4a19      	ldr	r2, [pc, #100]	@ (80012f8 <MX_ADC1_Init+0x78>)
 8001294:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MX_ADC1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <MX_ADC1_Init+0x74>)
 800129e:	2201      	movs	r2, #1
 80012a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <MX_ADC1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <MX_ADC1_Init+0x74>)
 80012aa:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80012ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <MX_ADC1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <MX_ADC1_Init+0x74>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012bc:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <MX_ADC1_Init+0x74>)
 80012be:	f000 fe51 	bl	8001f64 <HAL_ADC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80012c8:	f000 f8fa 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_ADC1_Init+0x74>)
 80012de:	f000 ffd3 	bl	8002288 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012e8:	f000 f8ea 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000208 	.word	0x20000208
 80012f8:	40012400 	.word	0x40012400

080012fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_I2C1_Init+0x50>)
 8001302:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <MX_I2C1_Init+0x54>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_I2C1_Init+0x50>)
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <MX_I2C1_Init+0x58>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_I2C1_Init+0x50>)
 800131a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800131e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_I2C1_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_I2C1_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <MX_I2C1_Init+0x50>)
 800133a:	f001 fc13 	bl	8002b64 <HAL_I2C_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001344:	f000 f8bc 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000238 	.word	0x20000238
 8001350:	40005400 	.word	0x40005400
 8001354:	00061a80 	.word	0x00061a80

08001358 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_TIM4_Init+0x94>)
 8001376:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <MX_TIM4_Init+0x98>)
 8001378:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_TIM4_Init+0x94>)
 800137c:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001380:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_TIM4_Init+0x94>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_TIM4_Init+0x94>)
 800138a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800138e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_TIM4_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <MX_TIM4_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800139c:	4813      	ldr	r0, [pc, #76]	@ (80013ec <MX_TIM4_Init+0x94>)
 800139e:	f004 faad 	bl	80058fc <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80013a8:	f000 f88a 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <MX_TIM4_Init+0x94>)
 80013ba:	f004 fc49 	bl	8005c50 <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80013c4:	f000 f87c 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_TIM4_Init+0x94>)
 80013d6:	f004 fe27 	bl	8006028 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80013e0:	f000 f86e 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000028c 	.word	0x2000028c
 80013f0:	40000800 	.word	0x40000800

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a29      	ldr	r2, [pc, #164]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a23      	ldr	r2, [pc, #140]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a1d      	ldr	r2, [pc, #116]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <MX_GPIO_Init+0xc0>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800146e:	4812      	ldr	r0, [pc, #72]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001470:	f001 fb47 	bl	8002b02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001474:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2302      	movs	r3, #2
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	480a      	ldr	r0, [pc, #40]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 800148e:	f001 f99d 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 DS18B20_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|DS18B20_Pin;
 8001492:	2330      	movs	r3, #48	@ 0x30
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_GPIO_Init+0xc8>)
 80014a6:	f001 f991 	bl	80027cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40010c00 	.word	0x40010c00

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af04      	add	r7, sp, #16
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	2301      	movs	r3, #1
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	2200      	movs	r2, #0
 80014f4:	2178      	movs	r1, #120	@ 0x78
 80014f6:	4803      	ldr	r0, [pc, #12]	@ (8001504 <ssd1306_WriteCommand+0x2c>)
 80014f8:	f001 fc78 	bl	8002dec <HAL_I2C_Mem_Write>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000238 	.word	0x20000238

08001508 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af04      	add	r7, sp, #16
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	f04f 32ff 	mov.w	r2, #4294967295
 800151a:	9202      	str	r2, [sp, #8]
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2301      	movs	r3, #1
 8001524:	2240      	movs	r2, #64	@ 0x40
 8001526:	2178      	movs	r1, #120	@ 0x78
 8001528:	4803      	ldr	r0, [pc, #12]	@ (8001538 <ssd1306_WriteData+0x30>)
 800152a:	f001 fc5f 	bl	8002dec <HAL_I2C_Mem_Write>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000238 	.word	0x20000238

0800153c <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001540:	f7ff ffc4 	bl	80014cc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001544:	2064      	movs	r0, #100	@ 0x64
 8001546:	f000 fce9 	bl	8001f1c <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 800154a:	20ae      	movs	r0, #174	@ 0xae
 800154c:	f7ff ffc4 	bl	80014d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001550:	2020      	movs	r0, #32
 8001552:	f7ff ffc1 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff ffbe 	bl	80014d8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800155c:	20b0      	movs	r0, #176	@ 0xb0
 800155e:	f7ff ffbb 	bl	80014d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001562:	20c8      	movs	r0, #200	@ 0xc8
 8001564:	f7ff ffb8 	bl	80014d8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff ffb5 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800156e:	2010      	movs	r0, #16
 8001570:	f7ff ffb2 	bl	80014d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001574:	2040      	movs	r0, #64	@ 0x40
 8001576:	f7ff ffaf 	bl	80014d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800157a:	2081      	movs	r0, #129	@ 0x81
 800157c:	f7ff ffac 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001580:	20ff      	movs	r0, #255	@ 0xff
 8001582:	f7ff ffa9 	bl	80014d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001586:	20a1      	movs	r0, #161	@ 0xa1
 8001588:	f7ff ffa6 	bl	80014d8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800158c:	20a6      	movs	r0, #166	@ 0xa6
 800158e:	f7ff ffa3 	bl	80014d8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001592:	20a8      	movs	r0, #168	@ 0xa8
 8001594:	f7ff ffa0 	bl	80014d8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001598:	203f      	movs	r0, #63	@ 0x3f
 800159a:	f7ff ff9d 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800159e:	20a4      	movs	r0, #164	@ 0xa4
 80015a0:	f7ff ff9a 	bl	80014d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80015a4:	20d3      	movs	r0, #211	@ 0xd3
 80015a6:	f7ff ff97 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff ff94 	bl	80014d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80015b0:	20d5      	movs	r0, #213	@ 0xd5
 80015b2:	f7ff ff91 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80015b6:	20f0      	movs	r0, #240	@ 0xf0
 80015b8:	f7ff ff8e 	bl	80014d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80015bc:	20d9      	movs	r0, #217	@ 0xd9
 80015be:	f7ff ff8b 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80015c2:	2022      	movs	r0, #34	@ 0x22
 80015c4:	f7ff ff88 	bl	80014d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80015c8:	20da      	movs	r0, #218	@ 0xda
 80015ca:	f7ff ff85 	bl	80014d8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80015ce:	2012      	movs	r0, #18
 80015d0:	f7ff ff82 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80015d4:	20db      	movs	r0, #219	@ 0xdb
 80015d6:	f7ff ff7f 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80015da:	2020      	movs	r0, #32
 80015dc:	f7ff ff7c 	bl	80014d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80015e0:	208d      	movs	r0, #141	@ 0x8d
 80015e2:	f7ff ff79 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80015e6:	2014      	movs	r0, #20
 80015e8:	f7ff ff76 	bl	80014d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80015ec:	20af      	movs	r0, #175	@ 0xaf
 80015ee:	f7ff ff73 	bl	80014d8 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f810 	bl	8001618 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80015f8:	f000 f830 	bl	800165c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <ssd1306_Init+0xd8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001602:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <ssd1306_Init+0xd8>)
 8001604:	2200      	movs	r2, #0
 8001606:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001608:	4b02      	ldr	r3, [pc, #8]	@ (8001614 <ssd1306_Init+0xd8>)
 800160a:	2201      	movs	r2, #1
 800160c:	715a      	strb	r2, [r3, #5]
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200006d8 	.word	0x200006d8

08001618 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	e00d      	b.n	8001644 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <ssd1306_Fill+0x1a>
 800162e:	2100      	movs	r1, #0
 8001630:	e000      	b.n	8001634 <ssd1306_Fill+0x1c>
 8001632:	21ff      	movs	r1, #255	@ 0xff
 8001634:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <ssd1306_Fill+0x40>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4413      	add	r3, r2
 800163a:	460a      	mov	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3301      	adds	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800164a:	d3ed      	bcc.n	8001628 <ssd1306_Fill+0x10>
    }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	200002d8 	.word	0x200002d8

0800165c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001662:	2300      	movs	r3, #0
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	e016      	b.n	8001696 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	3b50      	subs	r3, #80	@ 0x50
 800166c:	b2db      	uxtb	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff ff32 	bl	80014d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff ff2f 	bl	80014d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800167a:	2010      	movs	r0, #16
 800167c:	f7ff ff2c 	bl	80014d8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	01db      	lsls	r3, r3, #7
 8001684:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <ssd1306_UpdateScreen+0x4c>)
 8001686:	4413      	add	r3, r2
 8001688:	2180      	movs	r1, #128	@ 0x80
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff3c 	bl	8001508 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	3301      	adds	r3, #1
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b07      	cmp	r3, #7
 800169a:	d9e5      	bls.n	8001668 <ssd1306_UpdateScreen+0xc>
    }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200002d8 	.word	0x200002d8

080016ac <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	460b      	mov	r3, r1
 80016b8:	71bb      	strb	r3, [r7, #6]
 80016ba:	4613      	mov	r3, r2
 80016bc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db48      	blt.n	8001758 <ssd1306_DrawPixel+0xac>
 80016c6:	79bb      	ldrb	r3, [r7, #6]
 80016c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80016ca:	d845      	bhi.n	8001758 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80016cc:	4b25      	ldr	r3, [pc, #148]	@ (8001764 <ssd1306_DrawPixel+0xb8>)
 80016ce:	791b      	ldrb	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80016d4:	797b      	ldrb	r3, [r7, #5]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf0c      	ite	eq
 80016da:	2301      	moveq	r3, #1
 80016dc:	2300      	movne	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80016e2:	797b      	ldrb	r3, [r7, #5]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d11a      	bne.n	800171e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016e8:	79fa      	ldrb	r2, [r7, #7]
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	08db      	lsrs	r3, r3, #3
 80016ee:	b2d8      	uxtb	r0, r3
 80016f0:	4603      	mov	r3, r0
 80016f2:	01db      	lsls	r3, r3, #7
 80016f4:	4413      	add	r3, r2
 80016f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001768 <ssd1306_DrawPixel+0xbc>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	b25a      	sxtb	r2, r3
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	2101      	movs	r1, #1
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	b25b      	sxtb	r3, r3
 800170a:	4313      	orrs	r3, r2
 800170c:	b259      	sxtb	r1, r3
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	4603      	mov	r3, r0
 8001712:	01db      	lsls	r3, r3, #7
 8001714:	4413      	add	r3, r2
 8001716:	b2c9      	uxtb	r1, r1
 8001718:	4a13      	ldr	r2, [pc, #76]	@ (8001768 <ssd1306_DrawPixel+0xbc>)
 800171a:	54d1      	strb	r1, [r2, r3]
 800171c:	e01d      	b.n	800175a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800171e:	79fa      	ldrb	r2, [r7, #7]
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	08db      	lsrs	r3, r3, #3
 8001724:	b2d8      	uxtb	r0, r3
 8001726:	4603      	mov	r3, r0
 8001728:	01db      	lsls	r3, r3, #7
 800172a:	4413      	add	r3, r2
 800172c:	4a0e      	ldr	r2, [pc, #56]	@ (8001768 <ssd1306_DrawPixel+0xbc>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	b25a      	sxtb	r2, r3
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	2101      	movs	r1, #1
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	b25b      	sxtb	r3, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	b25b      	sxtb	r3, r3
 8001744:	4013      	ands	r3, r2
 8001746:	b259      	sxtb	r1, r3
 8001748:	79fa      	ldrb	r2, [r7, #7]
 800174a:	4603      	mov	r3, r0
 800174c:	01db      	lsls	r3, r3, #7
 800174e:	4413      	add	r3, r2
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <ssd1306_DrawPixel+0xbc>)
 8001754:	54d1      	strb	r1, [r2, r3]
 8001756:	e000      	b.n	800175a <ssd1306_DrawPixel+0xae>
        return;
 8001758:	bf00      	nop
    }
}
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200006d8 	.word	0x200006d8
 8001768:	200002d8 	.word	0x200002d8

0800176c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	4604      	mov	r4, r0
 8001774:	1d38      	adds	r0, r7, #4
 8001776:	e880 0006 	stmia.w	r0, {r1, r2}
 800177a:	461a      	mov	r2, r3
 800177c:	4623      	mov	r3, r4
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	4613      	mov	r3, r2
 8001782:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b1f      	cmp	r3, #31
 8001788:	d902      	bls.n	8001790 <ssd1306_WriteChar+0x24>
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	2b7e      	cmp	r3, #126	@ 0x7e
 800178e:	d901      	bls.n	8001794 <ssd1306_WriteChar+0x28>
        return 0;
 8001790:	2300      	movs	r3, #0
 8001792:	e06c      	b.n	800186e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001794:	4b38      	ldr	r3, [pc, #224]	@ (8001878 <ssd1306_WriteChar+0x10c>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	793b      	ldrb	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	2b80      	cmp	r3, #128	@ 0x80
 80017a0:	dc06      	bgt.n	80017b0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80017a2:	4b35      	ldr	r3, [pc, #212]	@ (8001878 <ssd1306_WriteChar+0x10c>)
 80017a4:	885b      	ldrh	r3, [r3, #2]
 80017a6:	461a      	mov	r2, r3
 80017a8:	797b      	ldrb	r3, [r7, #5]
 80017aa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017ac:	2b40      	cmp	r3, #64	@ 0x40
 80017ae:	dd01      	ble.n	80017b4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e05c      	b.n	800186e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	e04c      	b.n	8001854 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	3b20      	subs	r3, #32
 80017c0:	7979      	ldrb	r1, [r7, #5]
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4619      	mov	r1, r3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	440b      	add	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	e034      	b.n	8001844 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d012      	beq.n	8001810 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80017ea:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <ssd1306_WriteChar+0x10c>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b2d8      	uxtb	r0, r3
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <ssd1306_WriteChar+0x10c>)
 80017fa:	885b      	ldrh	r3, [r3, #2]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b2db      	uxtb	r3, r3
 8001806:	7bba      	ldrb	r2, [r7, #14]
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff ff4f 	bl	80016ac <ssd1306_DrawPixel>
 800180e:	e016      	b.n	800183e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <ssd1306_WriteChar+0x10c>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	4413      	add	r3, r2
 800181c:	b2d8      	uxtb	r0, r3
 800181e:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <ssd1306_WriteChar+0x10c>)
 8001820:	885b      	ldrh	r3, [r3, #2]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4413      	add	r3, r2
 800182a:	b2d9      	uxtb	r1, r3
 800182c:	7bbb      	ldrb	r3, [r7, #14]
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf0c      	ite	eq
 8001832:	2301      	moveq	r3, #1
 8001834:	2300      	movne	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	f7ff ff37 	bl	80016ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	3301      	adds	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	793b      	ldrb	r3, [r7, #4]
 8001846:	461a      	mov	r2, r3
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	4293      	cmp	r3, r2
 800184c:	d3c5      	bcc.n	80017da <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	797b      	ldrb	r3, [r7, #5]
 8001856:	461a      	mov	r2, r3
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	4293      	cmp	r3, r2
 800185c:	d3ad      	bcc.n	80017ba <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <ssd1306_WriteChar+0x10c>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	793a      	ldrb	r2, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <ssd1306_WriteChar+0x10c>)
 800186a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	@ 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	bf00      	nop
 8001878:	200006d8 	.word	0x200006d8

0800187c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	1d38      	adds	r0, r7, #4
 8001886:	e880 0006 	stmia.w	r0, {r1, r2}
 800188a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800188c:	e012      	b.n	80018b4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	7818      	ldrb	r0, [r3, #0]
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	1d3a      	adds	r2, r7, #4
 8001896:	ca06      	ldmia	r2, {r1, r2}
 8001898:	f7ff ff68 	bl	800176c <ssd1306_WriteChar>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d002      	beq.n	80018ae <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	e008      	b.n	80018c0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1e8      	bne.n	800188e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	781b      	ldrb	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <ssd1306_SetCursor+0x2c>)
 80018de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80018e0:	79bb      	ldrb	r3, [r7, #6]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <ssd1306_SetCursor+0x2c>)
 80018e6:	805a      	strh	r2, [r3, #2]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200006d8 	.word	0x200006d8

080018f8 <ssd1306_TestBorder>:
#include <string.h>
#include <stdio.h>
#include "ssd1306.h"
#include "ssd1306_tests.h"

void ssd1306_TestBorder() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fe8a 	bl	8001618 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8001904:	f000 fb00 	bl	8001f08 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8001916:	7bb9      	ldrb	r1, [r7, #14]
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2200      	movs	r2, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fec5 	bl	80016ac <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d106      	bne.n	8001936 <ssd1306_TestBorder+0x3e>
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b7e      	cmp	r3, #126	@ 0x7e
 800192c:	d803      	bhi.n	8001936 <ssd1306_TestBorder+0x3e>
            x++;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	3301      	adds	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e016      	b.n	8001964 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < 63))
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b7f      	cmp	r3, #127	@ 0x7f
 800193a:	d106      	bne.n	800194a <ssd1306_TestBorder+0x52>
 800193c:	7bbb      	ldrb	r3, [r7, #14]
 800193e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001940:	d803      	bhi.n	800194a <ssd1306_TestBorder+0x52>
            y++;
 8001942:	7bbb      	ldrb	r3, [r7, #14]
 8001944:	3301      	adds	r3, #1
 8001946:	73bb      	strb	r3, [r7, #14]
 8001948:	e00c      	b.n	8001964 <ssd1306_TestBorder+0x6c>
        else if((y == 63) && (x > 0)) 
 800194a:	7bbb      	ldrb	r3, [r7, #14]
 800194c:	2b3f      	cmp	r3, #63	@ 0x3f
 800194e:	d106      	bne.n	800195e <ssd1306_TestBorder+0x66>
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <ssd1306_TestBorder+0x66>
            x--;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	3b01      	subs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e002      	b.n	8001964 <ssd1306_TestBorder+0x6c>
        else
            y--;
 800195e:	7bbb      	ldrb	r3, [r7, #14]
 8001960:	3b01      	subs	r3, #1
 8001962:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 8001964:	7bb9      	ldrb	r1, [r7, #14]
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	2201      	movs	r2, #1
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fe9e 	bl	80016ac <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8001970:	f7ff fe74 	bl	800165c <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8001974:	2005      	movs	r0, #5
 8001976:	f000 fad1 	bl	8001f1c <HAL_Delay>
        end = HAL_GetTick();
 800197a:	f000 fac5 	bl	8001f08 <HAL_GetTick>
 800197e:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800198a:	d3c4      	bcc.n	8001916 <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 800198c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001990:	f000 fac4 	bl	8001f1c <HAL_Delay>
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <ssd1306_TestFonts>:

void ssd1306_TestFonts() {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fe39 	bl	8001618 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 80019a6:	2100      	movs	r1, #0
 80019a8:	2002      	movs	r0, #2
 80019aa:	f7ff ff8d 	bl	80018c8 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 80019ae:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <ssd1306_TestFonts+0x64>)
 80019b0:	2301      	movs	r3, #1
 80019b2:	ca06      	ldmia	r2, {r1, r2}
 80019b4:	4813      	ldr	r0, [pc, #76]	@ (8001a04 <ssd1306_TestFonts+0x68>)
 80019b6:	f7ff ff61 	bl	800187c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 80019ba:	211a      	movs	r1, #26
 80019bc:	2002      	movs	r0, #2
 80019be:	f7ff ff83 	bl	80018c8 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80019c2:	4a11      	ldr	r2, [pc, #68]	@ (8001a08 <ssd1306_TestFonts+0x6c>)
 80019c4:	2301      	movs	r3, #1
 80019c6:	ca06      	ldmia	r2, {r1, r2}
 80019c8:	4810      	ldr	r0, [pc, #64]	@ (8001a0c <ssd1306_TestFonts+0x70>)
 80019ca:	f7ff ff57 	bl	800187c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 80019ce:	212c      	movs	r1, #44	@ 0x2c
 80019d0:	2002      	movs	r0, #2
 80019d2:	f7ff ff79 	bl	80018c8 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80019d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a10 <ssd1306_TestFonts+0x74>)
 80019d8:	2301      	movs	r3, #1
 80019da:	ca06      	ldmia	r2, {r1, r2}
 80019dc:	480d      	ldr	r0, [pc, #52]	@ (8001a14 <ssd1306_TestFonts+0x78>)
 80019de:	f7ff ff4d 	bl	800187c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 80019e2:	2136      	movs	r1, #54	@ 0x36
 80019e4:	2002      	movs	r0, #2
 80019e6:	f7ff ff6f 	bl	80018c8 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80019ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001a18 <ssd1306_TestFonts+0x7c>)
 80019ec:	2301      	movs	r3, #1
 80019ee:	ca06      	ldmia	r2, {r1, r2}
 80019f0:	480a      	ldr	r0, [pc, #40]	@ (8001a1c <ssd1306_TestFonts+0x80>)
 80019f2:	f7ff ff43 	bl	800187c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80019f6:	f7ff fe31 	bl	800165c <ssd1306_UpdateScreen>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000018 	.word	0x20000018
 8001a04:	0800b268 	.word	0x0800b268
 8001a08:	20000010 	.word	0x20000010
 8001a0c:	0800b274 	.word	0x0800b274
 8001a10:	20000008 	.word	0x20000008
 8001a14:	0800b280 	.word	0x0800b280
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	0800b28c 	.word	0x0800b28c

08001a20 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b098      	sub	sp, #96	@ 0x60
 8001a24:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f7ff fdf6 	bl	8001618 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8001a2c:	f000 fa6c 	bl	8001f08 <HAL_GetTick>
 8001a30:	65b8      	str	r0, [r7, #88]	@ 0x58
    uint32_t end = start;
 8001a32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a34:	657b      	str	r3, [r7, #84]	@ 0x54
    int fps = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char message[] = "ABCDEFGHIJK";
 8001a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b30 <ssd1306_TestFPS+0x110>)
 8001a3c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a40:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8001a46:	2100      	movs	r1, #0
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7ff ff3d 	bl	80018c8 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8001a4e:	4a39      	ldr	r2, [pc, #228]	@ (8001b34 <ssd1306_TestFPS+0x114>)
 8001a50:	2300      	movs	r3, #0
 8001a52:	ca06      	ldmia	r2, {r1, r2}
 8001a54:	4838      	ldr	r0, [pc, #224]	@ (8001b38 <ssd1306_TestFPS+0x118>)
 8001a56:	f7ff ff11 	bl	800187c <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8001a5a:	2112      	movs	r1, #18
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f7ff ff33 	bl	80018c8 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8001a62:	4a34      	ldr	r2, [pc, #208]	@ (8001b34 <ssd1306_TestFPS+0x114>)
 8001a64:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001a68:	2300      	movs	r3, #0
 8001a6a:	ca06      	ldmia	r2, {r1, r2}
 8001a6c:	f7ff ff06 	bl	800187c <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001a70:	f7ff fdf4 	bl	800165c <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8001a74:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001a78:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        memmove(message, message+1, sizeof(message)-2);
 8001a7c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a80:	3301      	adds	r3, #1
 8001a82:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001a86:	220a      	movs	r2, #10
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f008 ff33 	bl	800a8f4 <memmove>
        message[sizeof(message)-2] = ch;
 8001a8e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001a92:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        fps++;
 8001a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a98:	3301      	adds	r3, #1
 8001a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        end = HAL_GetTick();
 8001a9c:	f000 fa34 	bl	8001f08 <HAL_GetTick>
 8001aa0:	6578      	str	r0, [r7, #84]	@ 0x54
    } while((end - start) < 5000);
 8001aa2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001aa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d9d4      	bls.n	8001a5a <ssd1306_TestFPS+0x3a>
   
    HAL_Delay(1000);
 8001ab0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ab4:	f000 fa32 	bl	8001f1c <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8001ab8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001aba:	f7ff f8b3 	bl	8000c24 <__aeabi_i2f>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd63 	bl	800058c <__aeabi_f2d>
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	460d      	mov	r5, r1
 8001aca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001acc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd39 	bl	8000548 <__aeabi_ui2d>
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <ssd1306_TestFPS+0x11c>)
 8001adc:	f7fe fed8 	bl	8000890 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	f7fe fed2 	bl	8000890 <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7fe ffb4 	bl	8000a60 <__aeabi_d2iz>
 8001af8:	4603      	mov	r3, r0
 8001afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8001afc:	1d38      	adds	r0, r7, #4
 8001afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b00:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <ssd1306_TestFPS+0x120>)
 8001b02:	2140      	movs	r1, #64	@ 0x40
 8001b04:	f008 fea2 	bl	800a84c <sniprintf>
   
    ssd1306_Fill(White);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f7ff fd85 	bl	8001618 <ssd1306_Fill>
    ssd1306_SetCursor(2, 18);
 8001b0e:	2112      	movs	r1, #18
 8001b10:	2002      	movs	r0, #2
 8001b12:	f7ff fed9 	bl	80018c8 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8001b16:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <ssd1306_TestFPS+0x114>)
 8001b18:	1d38      	adds	r0, r7, #4
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	ca06      	ldmia	r2, {r1, r2}
 8001b1e:	f7ff fead 	bl	800187c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001b22:	f7ff fd9b 	bl	800165c <ssd1306_UpdateScreen>
}
 8001b26:	bf00      	nop
 8001b28:	3760      	adds	r7, #96	@ 0x60
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	0800b2ac 	.word	0x0800b2ac
 8001b34:	20000010 	.word	0x20000010
 8001b38:	0800b298 	.word	0x0800b298
 8001b3c:	408f4000 	.word	0x408f4000
 8001b40:	0800b2a4 	.word	0x0800b2a4

08001b44 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001b48:	f7ff fcf8 	bl	800153c <ssd1306_Init>
    ssd1306_TestFPS();
 8001b4c:	f7ff ff68 	bl	8001a20 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8001b50:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001b54:	f000 f9e2 	bl	8001f1c <HAL_Delay>
    ssd1306_TestBorder();
 8001b58:	f7ff fece 	bl	80018f8 <ssd1306_TestBorder>
    ssd1306_TestFonts();
 8001b5c:	f7ff ff1e 	bl	800199c <ssd1306_TestFonts>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_MspInit+0x60>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <HAL_MspInit+0x60>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a14      	ldr	r2, [pc, #80]	@ (8001c34 <HAL_ADC_MspInit+0x6c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d121      	bne.n	8001c2c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <HAL_ADC_MspInit+0x70>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a12      	ldr	r2, [pc, #72]	@ (8001c38 <HAL_ADC_MspInit+0x70>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_ADC_MspInit+0x70>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <HAL_ADC_MspInit+0x70>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a0c      	ldr	r2, [pc, #48]	@ (8001c38 <HAL_ADC_MspInit+0x70>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_ADC_MspInit+0x70>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <HAL_ADC_MspInit+0x74>)
 8001c28:	f000 fdd0 	bl	80027cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40012400 	.word	0x40012400
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010800 	.word	0x40010800

08001c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a15      	ldr	r2, [pc, #84]	@ (8001cb0 <HAL_I2C_MspInit+0x70>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a13      	ldr	r2, [pc, #76]	@ (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c78:	23c0      	movs	r3, #192	@ 0xc0
 8001c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c7c:	2312      	movs	r3, #18
 8001c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480b      	ldr	r0, [pc, #44]	@ (8001cb8 <HAL_I2C_MspInit+0x78>)
 8001c8c:	f000 fd9e 	bl	80027cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	4a07      	ldr	r2, [pc, #28]	@ (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c9a:	61d3      	str	r3, [r2, #28]
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010c00 	.word	0x40010c00

08001cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d00 <HAL_TIM_Base_MspInit+0x44>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d113      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <HAL_TIM_Base_MspInit+0x48>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d04 <HAL_TIM_Base_MspInit+0x48>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	61d3      	str	r3, [r2, #28]
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_TIM_Base_MspInit+0x48>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	201e      	movs	r0, #30
 8001cec:	f000 fd37 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cf0:	201e      	movs	r0, #30
 8001cf2:	f000 fd50 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40021000 	.word	0x40021000

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <NMI_Handler+0x4>

08001d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <HardFault_Handler+0x4>

08001d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <MemManage_Handler+0x4>

08001d20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 f8c4 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d66:	f001 fcce 	bl	8003706 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200013b0 	.word	0x200013b0

08001d74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d7c:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <TIM4_IRQHandler+0x18>)
 8001d7e:	f000 fed8 	bl	8002b32 <HAL_GPIO_TogglePin>
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d82:	4803      	ldr	r0, [pc, #12]	@ (8001d90 <TIM4_IRQHandler+0x1c>)
 8001d84:	f003 fe5c 	bl	8005a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	2000028c 	.word	0x2000028c

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	@ (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f008 fdb8 	bl	800a938 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20005000 	.word	0x20005000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	200006e0 	.word	0x200006e0
 8001dfc:	20001a08 	.word	0x20001a08

08001e00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e0c:	f7ff fff8 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e10:	480b      	ldr	r0, [pc, #44]	@ (8001e40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e12:	490c      	ldr	r1, [pc, #48]	@ (8001e44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e14:	4a0c      	ldr	r2, [pc, #48]	@ (8001e48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e26:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e28:	4c09      	ldr	r4, [pc, #36]	@ (8001e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e36:	f008 fd85 	bl	800a944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e3a:	f7ff f951 	bl	80010e0 <main>
  bx lr
 8001e3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001e48:	0800e174 	.word	0x0800e174
  ldr r2, =_sbss
 8001e4c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001e50:	20001a08 	.word	0x20001a08

08001e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC1_2_IRQHandler>
	...

08001e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5c:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <HAL_Init+0x28>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	@ (8001e80 <HAL_Init+0x28>)
 8001e62:	f043 0310 	orr.w	r3, r3, #16
 8001e66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f000 fc6d 	bl	8002748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6e:	200f      	movs	r0, #15
 8001e70:	f000 f808 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e74:	f7ff fe76 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40022000 	.word	0x40022000

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <HAL_InitTick+0x54>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_InitTick+0x58>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fc85 	bl	80027b2 <HAL_SYSTICK_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00e      	b.n	8001ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d80a      	bhi.n	8001ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f000 fc4d 	bl	800275e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec4:	4a06      	ldr	r2, [pc, #24]	@ (8001ee0 <HAL_InitTick+0x5c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000020 	.word	0x20000020
 8001edc:	20000028 	.word	0x20000028
 8001ee0:	20000024 	.word	0x20000024

08001ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_IncTick+0x1c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_IncTick+0x20>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a03      	ldr	r2, [pc, #12]	@ (8001f04 <HAL_IncTick+0x20>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20000028 	.word	0x20000028
 8001f04:	200006e4 	.word	0x200006e4

08001f08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	@ (8001f18 <HAL_GetTick+0x10>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	200006e4 	.word	0x200006e4

08001f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff fff0 	bl	8001f08 <HAL_GetTick>
 8001f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d005      	beq.n	8001f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_Delay+0x44>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f42:	bf00      	nop
 8001f44:	f7ff ffe0 	bl	8001f08 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d8f7      	bhi.n	8001f44 <HAL_Delay+0x28>
  {
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000028 	.word	0x20000028

08001f64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0be      	b.n	8002104 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fe10 	bl	8001bc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fabf 	bl	800252c <ADC_ConversionStop_Disable>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 8099 	bne.w	80020f2 <HAL_ADC_Init+0x18e>
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 8095 	bne.w	80020f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fcc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fd0:	f023 0302 	bic.w	r3, r3, #2
 8001fd4:	f043 0202 	orr.w	r2, r3, #2
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fe4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7b1b      	ldrb	r3, [r3, #12]
 8001fea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ffc:	d003      	beq.n	8002006 <HAL_ADC_Init+0xa2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_ADC_Init+0xa8>
 8002006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800200a:	e000      	b.n	800200e <HAL_ADC_Init+0xaa>
 800200c:	2300      	movs	r3, #0
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7d1b      	ldrb	r3, [r3, #20]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d119      	bne.n	8002050 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7b1b      	ldrb	r3, [r3, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	3b01      	subs	r3, #1
 800202a:	035a      	lsls	r2, r3, #13
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	e00b      	b.n	8002050 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	f043 0220 	orr.w	r2, r3, #32
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	430a      	orrs	r2, r1
 8002062:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	4b28      	ldr	r3, [pc, #160]	@ (800210c <HAL_ADC_Init+0x1a8>)
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	430b      	orrs	r3, r1
 8002076:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002080:	d003      	beq.n	800208a <HAL_ADC_Init+0x126>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d104      	bne.n	8002094 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	3b01      	subs	r3, #1
 8002090:	051b      	lsls	r3, r3, #20
 8002092:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <HAL_ADC_Init+0x1ac>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d10b      	bne.n	80020d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c2:	f023 0303 	bic.w	r3, r3, #3
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ce:	e018      	b.n	8002102 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d4:	f023 0312 	bic.w	r3, r3, #18
 80020d8:	f043 0210 	orr.w	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020f0:	e007      	b.n	8002102 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f6:	f043 0210 	orr.w	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002102:	7dfb      	ldrb	r3, [r7, #23]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	ffe1f7fd 	.word	0xffe1f7fd
 8002110:	ff1f0efe 	.word	0xff1f0efe

08002114 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_ADC_Start+0x1a>
 800212a:	2302      	movs	r3, #2
 800212c:	e098      	b.n	8002260 <HAL_ADC_Start+0x14c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f99e 	bl	8002478 <ADC_Enable>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 8087 	bne.w	8002256 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a41      	ldr	r2, [pc, #260]	@ (8002268 <HAL_ADC_Start+0x154>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d105      	bne.n	8002172 <HAL_ADC_Start+0x5e>
 8002166:	4b41      	ldr	r3, [pc, #260]	@ (800226c <HAL_ADC_Start+0x158>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d115      	bne.n	800219e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002176:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002188:	2b00      	cmp	r3, #0
 800218a:	d026      	beq.n	80021da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002190:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002194:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800219c:	e01d      	b.n	80021da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2f      	ldr	r2, [pc, #188]	@ (800226c <HAL_ADC_Start+0x158>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d004      	beq.n	80021be <HAL_ADC_Start+0xaa>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002268 <HAL_ADC_Start+0x154>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d10d      	bne.n	80021da <HAL_ADC_Start+0xc6>
 80021be:	4b2b      	ldr	r3, [pc, #172]	@ (800226c <HAL_ADC_Start+0x158>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ea:	f023 0206 	bic.w	r2, r3, #6
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021f2:	e002      	b.n	80021fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f06f 0202 	mvn.w	r2, #2
 800220a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002216:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800221a:	d113      	bne.n	8002244 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002220:	4a11      	ldr	r2, [pc, #68]	@ (8002268 <HAL_ADC_Start+0x154>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d105      	bne.n	8002232 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002226:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_ADC_Start+0x158>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	e00c      	b.n	800225e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	e003      	b.n	800225e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40012800 	.word	0x40012800
 800226c:	40012400 	.word	0x40012400

08002270 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x20>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e0dc      	b.n	8002462 <HAL_ADC_ConfigChannel+0x1da>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b06      	cmp	r3, #6
 80022b6:	d81c      	bhi.n	80022f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b05      	subs	r3, #5
 80022ca:	221f      	movs	r2, #31
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4019      	ands	r1, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b05      	subs	r3, #5
 80022e4:	fa00 f203 	lsl.w	r2, r0, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80022f0:	e03c      	b.n	800236c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d81c      	bhi.n	8002334 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b23      	subs	r3, #35	@ 0x23
 800230c:	221f      	movs	r2, #31
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	4019      	ands	r1, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b23      	subs	r3, #35	@ 0x23
 8002326:	fa00 f203 	lsl.w	r2, r0, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30
 8002332:	e01b      	b.n	800236c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	3b41      	subs	r3, #65	@ 0x41
 8002346:	221f      	movs	r2, #31
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	4019      	ands	r1, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	3b41      	subs	r3, #65	@ 0x41
 8002360:	fa00 f203 	lsl.w	r2, r0, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b09      	cmp	r3, #9
 8002372:	d91c      	bls.n	80023ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68d9      	ldr	r1, [r3, #12]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	3b1e      	subs	r3, #30
 8002386:	2207      	movs	r2, #7
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	4019      	ands	r1, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6898      	ldr	r0, [r3, #8]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	3b1e      	subs	r3, #30
 80023a0:	fa00 f203 	lsl.w	r2, r0, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	e019      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6919      	ldr	r1, [r3, #16]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	2207      	movs	r2, #7
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4019      	ands	r1, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6898      	ldr	r0, [r3, #8]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	fa00 f203 	lsl.w	r2, r0, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d003      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023ee:	2b11      	cmp	r3, #17
 80023f0:	d132      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1d      	ldr	r2, [pc, #116]	@ (800246c <HAL_ADC_ConfigChannel+0x1e4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d125      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d126      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002418:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d11a      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002422:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <HAL_ADC_ConfigChannel+0x1e8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a13      	ldr	r2, [pc, #76]	@ (8002474 <HAL_ADC_ConfigChannel+0x1ec>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	0c9a      	lsrs	r2, r3, #18
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002438:	e002      	b.n	8002440 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3b01      	subs	r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f9      	bne.n	800243a <HAL_ADC_ConfigChannel+0x1b2>
 8002446:	e007      	b.n	8002458 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	f043 0220 	orr.w	r2, r3, #32
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40012400 	.word	0x40012400
 8002470:	20000020 	.word	0x20000020
 8002474:	431bde83 	.word	0x431bde83

08002478 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d040      	beq.n	8002518 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <ADC_Enable+0xac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002528 <ADC_Enable+0xb0>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9b      	lsrs	r3, r3, #18
 80024b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024b4:	e002      	b.n	80024bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024c2:	f7ff fd21 	bl	8001f08 <HAL_GetTick>
 80024c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024c8:	e01f      	b.n	800250a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ca:	f7ff fd1d 	bl	8001f08 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d918      	bls.n	800250a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d011      	beq.n	800250a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	f043 0210 	orr.w	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e007      	b.n	800251a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d1d8      	bne.n	80024ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000020 	.word	0x20000020
 8002528:	431bde83 	.word	0x431bde83

0800252c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d12e      	bne.n	80025a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002556:	f7ff fcd7 	bl	8001f08 <HAL_GetTick>
 800255a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800255c:	e01b      	b.n	8002596 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800255e:	f7ff fcd3 	bl	8001f08 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d914      	bls.n	8002596 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10d      	bne.n	8002596 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	f043 0210 	orr.w	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e007      	b.n	80025a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d0dc      	beq.n	800255e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c0:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e2:	4a04      	ldr	r2, [pc, #16]	@ (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	60d3      	str	r3, [r2, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <__NVIC_GetPriorityGrouping+0x18>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	f003 0307 	and.w	r3, r3, #7
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	db0b      	blt.n	800263e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	4906      	ldr	r1, [pc, #24]	@ (8002648 <__NVIC_EnableIRQ+0x34>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2001      	movs	r0, #1
 8002636:	fa00 f202 	lsl.w	r2, r0, r2
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db0a      	blt.n	8002676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	490c      	ldr	r1, [pc, #48]	@ (8002698 <__NVIC_SetPriority+0x4c>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	440b      	add	r3, r1
 8002670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002674:	e00a      	b.n	800268c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4908      	ldr	r1, [pc, #32]	@ (800269c <__NVIC_SetPriority+0x50>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3b04      	subs	r3, #4
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	440b      	add	r3, r1
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	@ 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f1c3 0307 	rsb	r3, r3, #7
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	bf28      	it	cs
 80026be:	2304      	movcs	r3, #4
 80026c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d902      	bls.n	80026d0 <NVIC_EncodePriority+0x30>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b03      	subs	r3, #3
 80026ce:	e000      	b.n	80026d2 <NVIC_EncodePriority+0x32>
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43d9      	mvns	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	4313      	orrs	r3, r2
         );
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	@ 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002714:	d301      	bcc.n	800271a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002716:	2301      	movs	r3, #1
 8002718:	e00f      	b.n	800273a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <SysTick_Config+0x40>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002722:	210f      	movs	r1, #15
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f7ff ff90 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <SysTick_Config+0x40>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <SysTick_Config+0x40>)
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000e010 	.word	0xe000e010

08002748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ff2d 	bl	80025b0 <__NVIC_SetPriorityGrouping>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002770:	f7ff ff42 	bl	80025f8 <__NVIC_GetPriorityGrouping>
 8002774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	6978      	ldr	r0, [r7, #20]
 800277c:	f7ff ff90 	bl	80026a0 <NVIC_EncodePriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff5f 	bl	800264c <__NVIC_SetPriority>
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff35 	bl	8002614 <__NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffa2 	bl	8002704 <SysTick_Config>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b08b      	sub	sp, #44	@ 0x2c
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027de:	e169      	b.n	8002ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027e0:	2201      	movs	r2, #1
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	f040 8158 	bne.w	8002aae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4a9a      	ldr	r2, [pc, #616]	@ (8002a6c <HAL_GPIO_Init+0x2a0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d05e      	beq.n	80028c6 <HAL_GPIO_Init+0xfa>
 8002808:	4a98      	ldr	r2, [pc, #608]	@ (8002a6c <HAL_GPIO_Init+0x2a0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d875      	bhi.n	80028fa <HAL_GPIO_Init+0x12e>
 800280e:	4a98      	ldr	r2, [pc, #608]	@ (8002a70 <HAL_GPIO_Init+0x2a4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d058      	beq.n	80028c6 <HAL_GPIO_Init+0xfa>
 8002814:	4a96      	ldr	r2, [pc, #600]	@ (8002a70 <HAL_GPIO_Init+0x2a4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d86f      	bhi.n	80028fa <HAL_GPIO_Init+0x12e>
 800281a:	4a96      	ldr	r2, [pc, #600]	@ (8002a74 <HAL_GPIO_Init+0x2a8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d052      	beq.n	80028c6 <HAL_GPIO_Init+0xfa>
 8002820:	4a94      	ldr	r2, [pc, #592]	@ (8002a74 <HAL_GPIO_Init+0x2a8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d869      	bhi.n	80028fa <HAL_GPIO_Init+0x12e>
 8002826:	4a94      	ldr	r2, [pc, #592]	@ (8002a78 <HAL_GPIO_Init+0x2ac>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d04c      	beq.n	80028c6 <HAL_GPIO_Init+0xfa>
 800282c:	4a92      	ldr	r2, [pc, #584]	@ (8002a78 <HAL_GPIO_Init+0x2ac>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d863      	bhi.n	80028fa <HAL_GPIO_Init+0x12e>
 8002832:	4a92      	ldr	r2, [pc, #584]	@ (8002a7c <HAL_GPIO_Init+0x2b0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d046      	beq.n	80028c6 <HAL_GPIO_Init+0xfa>
 8002838:	4a90      	ldr	r2, [pc, #576]	@ (8002a7c <HAL_GPIO_Init+0x2b0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d85d      	bhi.n	80028fa <HAL_GPIO_Init+0x12e>
 800283e:	2b12      	cmp	r3, #18
 8002840:	d82a      	bhi.n	8002898 <HAL_GPIO_Init+0xcc>
 8002842:	2b12      	cmp	r3, #18
 8002844:	d859      	bhi.n	80028fa <HAL_GPIO_Init+0x12e>
 8002846:	a201      	add	r2, pc, #4	@ (adr r2, 800284c <HAL_GPIO_Init+0x80>)
 8002848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284c:	080028c7 	.word	0x080028c7
 8002850:	080028a1 	.word	0x080028a1
 8002854:	080028b3 	.word	0x080028b3
 8002858:	080028f5 	.word	0x080028f5
 800285c:	080028fb 	.word	0x080028fb
 8002860:	080028fb 	.word	0x080028fb
 8002864:	080028fb 	.word	0x080028fb
 8002868:	080028fb 	.word	0x080028fb
 800286c:	080028fb 	.word	0x080028fb
 8002870:	080028fb 	.word	0x080028fb
 8002874:	080028fb 	.word	0x080028fb
 8002878:	080028fb 	.word	0x080028fb
 800287c:	080028fb 	.word	0x080028fb
 8002880:	080028fb 	.word	0x080028fb
 8002884:	080028fb 	.word	0x080028fb
 8002888:	080028fb 	.word	0x080028fb
 800288c:	080028fb 	.word	0x080028fb
 8002890:	080028a9 	.word	0x080028a9
 8002894:	080028bd 	.word	0x080028bd
 8002898:	4a79      	ldr	r2, [pc, #484]	@ (8002a80 <HAL_GPIO_Init+0x2b4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800289e:	e02c      	b.n	80028fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	623b      	str	r3, [r7, #32]
          break;
 80028a6:	e029      	b.n	80028fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	3304      	adds	r3, #4
 80028ae:	623b      	str	r3, [r7, #32]
          break;
 80028b0:	e024      	b.n	80028fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	3308      	adds	r3, #8
 80028b8:	623b      	str	r3, [r7, #32]
          break;
 80028ba:	e01f      	b.n	80028fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	330c      	adds	r3, #12
 80028c2:	623b      	str	r3, [r7, #32]
          break;
 80028c4:	e01a      	b.n	80028fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028ce:	2304      	movs	r3, #4
 80028d0:	623b      	str	r3, [r7, #32]
          break;
 80028d2:	e013      	b.n	80028fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028dc:	2308      	movs	r3, #8
 80028de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	611a      	str	r2, [r3, #16]
          break;
 80028e6:	e009      	b.n	80028fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e8:	2308      	movs	r3, #8
 80028ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	615a      	str	r2, [r3, #20]
          break;
 80028f2:	e003      	b.n	80028fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
          break;
 80028f8:	e000      	b.n	80028fc <HAL_GPIO_Init+0x130>
          break;
 80028fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2bff      	cmp	r3, #255	@ 0xff
 8002900:	d801      	bhi.n	8002906 <HAL_GPIO_Init+0x13a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	e001      	b.n	800290a <HAL_GPIO_Init+0x13e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2bff      	cmp	r3, #255	@ 0xff
 8002910:	d802      	bhi.n	8002918 <HAL_GPIO_Init+0x14c>
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	e002      	b.n	800291e <HAL_GPIO_Init+0x152>
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	3b08      	subs	r3, #8
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	210f      	movs	r1, #15
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	401a      	ands	r2, r3
 8002930:	6a39      	ldr	r1, [r7, #32]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	431a      	orrs	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80b1 	beq.w	8002aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800294c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a84 <HAL_GPIO_Init+0x2b8>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4a4c      	ldr	r2, [pc, #304]	@ (8002a84 <HAL_GPIO_Init+0x2b8>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6193      	str	r3, [r2, #24]
 8002958:	4b4a      	ldr	r3, [pc, #296]	@ (8002a84 <HAL_GPIO_Init+0x2b8>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002964:	4a48      	ldr	r2, [pc, #288]	@ (8002a88 <HAL_GPIO_Init+0x2bc>)
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	3302      	adds	r3, #2
 800296c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002970:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	220f      	movs	r2, #15
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4013      	ands	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a40      	ldr	r2, [pc, #256]	@ (8002a8c <HAL_GPIO_Init+0x2c0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_GPIO_Init+0x1ec>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a3f      	ldr	r2, [pc, #252]	@ (8002a90 <HAL_GPIO_Init+0x2c4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00d      	beq.n	80029b4 <HAL_GPIO_Init+0x1e8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a94 <HAL_GPIO_Init+0x2c8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <HAL_GPIO_Init+0x1e4>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a3d      	ldr	r2, [pc, #244]	@ (8002a98 <HAL_GPIO_Init+0x2cc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_GPIO_Init+0x1e0>
 80029a8:	2303      	movs	r3, #3
 80029aa:	e006      	b.n	80029ba <HAL_GPIO_Init+0x1ee>
 80029ac:	2304      	movs	r3, #4
 80029ae:	e004      	b.n	80029ba <HAL_GPIO_Init+0x1ee>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e002      	b.n	80029ba <HAL_GPIO_Init+0x1ee>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_GPIO_Init+0x1ee>
 80029b8:	2300      	movs	r3, #0
 80029ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029bc:	f002 0203 	and.w	r2, r2, #3
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	4093      	lsls	r3, r2
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029ca:	492f      	ldr	r1, [pc, #188]	@ (8002a88 <HAL_GPIO_Init+0x2bc>)
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029e4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	492c      	ldr	r1, [pc, #176]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029f2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	4928      	ldr	r1, [pc, #160]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d006      	beq.n	8002a1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a0c:	4b23      	ldr	r3, [pc, #140]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	4922      	ldr	r1, [pc, #136]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60cb      	str	r3, [r1, #12]
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a1a:	4b20      	ldr	r3, [pc, #128]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	491e      	ldr	r1, [pc, #120]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d006      	beq.n	8002a42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a34:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4918      	ldr	r1, [pc, #96]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
 8002a40:	e006      	b.n	8002a50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a42:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	4914      	ldr	r1, [pc, #80]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d021      	beq.n	8002aa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	490e      	ldr	r1, [pc, #56]	@ (8002a9c <HAL_GPIO_Init+0x2d0>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e021      	b.n	8002aae <HAL_GPIO_Init+0x2e2>
 8002a6a:	bf00      	nop
 8002a6c:	10320000 	.word	0x10320000
 8002a70:	10310000 	.word	0x10310000
 8002a74:	10220000 	.word	0x10220000
 8002a78:	10210000 	.word	0x10210000
 8002a7c:	10120000 	.word	0x10120000
 8002a80:	10110000 	.word	0x10110000
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40010800 	.word	0x40010800
 8002a90:	40010c00 	.word	0x40010c00
 8002a94:	40011000 	.word	0x40011000
 8002a98:	40011400 	.word	0x40011400
 8002a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <HAL_GPIO_Init+0x304>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	4909      	ldr	r1, [pc, #36]	@ (8002ad0 <HAL_GPIO_Init+0x304>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f47f ae8e 	bne.w	80027e0 <HAL_GPIO_Init+0x14>
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	372c      	adds	r7, #44	@ 0x2c
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	887b      	ldrh	r3, [r7, #2]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	e001      	b.n	8002af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	807b      	strh	r3, [r7, #2]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b12:	787b      	ldrb	r3, [r7, #1]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b18:	887a      	ldrh	r2, [r7, #2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b1e:	e003      	b.n	8002b28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	041a      	lsls	r2, r3, #16
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	611a      	str	r2, [r3, #16]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b44:	887a      	ldrh	r2, [r7, #2]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	041a      	lsls	r2, r3, #16
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	400b      	ands	r3, r1
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	611a      	str	r2, [r3, #16]
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e12b      	b.n	8002dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff f858 	bl	8001c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	@ 0x24
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bc8:	f002 fdb0 	bl	800572c <HAL_RCC_GetPCLK1Freq>
 8002bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a81      	ldr	r2, [pc, #516]	@ (8002dd8 <HAL_I2C_Init+0x274>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d807      	bhi.n	8002be8 <HAL_I2C_Init+0x84>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a80      	ldr	r2, [pc, #512]	@ (8002ddc <HAL_I2C_Init+0x278>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	bf94      	ite	ls
 8002be0:	2301      	movls	r3, #1
 8002be2:	2300      	movhi	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e006      	b.n	8002bf6 <HAL_I2C_Init+0x92>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a7d      	ldr	r2, [pc, #500]	@ (8002de0 <HAL_I2C_Init+0x27c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	bf94      	ite	ls
 8002bf0:	2301      	movls	r3, #1
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0e7      	b.n	8002dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a78      	ldr	r2, [pc, #480]	@ (8002de4 <HAL_I2C_Init+0x280>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0c9b      	lsrs	r3, r3, #18
 8002c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a6a      	ldr	r2, [pc, #424]	@ (8002dd8 <HAL_I2C_Init+0x274>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d802      	bhi.n	8002c38 <HAL_I2C_Init+0xd4>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3301      	adds	r3, #1
 8002c36:	e009      	b.n	8002c4c <HAL_I2C_Init+0xe8>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	4a69      	ldr	r2, [pc, #420]	@ (8002de8 <HAL_I2C_Init+0x284>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	495c      	ldr	r1, [pc, #368]	@ (8002dd8 <HAL_I2C_Init+0x274>)
 8002c68:	428b      	cmp	r3, r1
 8002c6a:	d819      	bhi.n	8002ca0 <HAL_I2C_Init+0x13c>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e59      	subs	r1, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c80:	400b      	ands	r3, r1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_I2C_Init+0x138>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1e59      	subs	r1, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	e051      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	e04f      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <HAL_I2C_Init+0x168>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e58      	subs	r0, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	440b      	add	r3, r1
 8002cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e012      	b.n	8002cf2 <HAL_I2C_Init+0x18e>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e58      	subs	r0, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	0099      	lsls	r1, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Init+0x196>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e022      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10e      	bne.n	8002d20 <HAL_I2C_Init+0x1bc>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1e58      	subs	r0, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	440b      	add	r3, r1
 8002d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d1e:	e00f      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e58      	subs	r0, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	0099      	lsls	r1, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	6809      	ldr	r1, [r1, #0]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6911      	ldr	r1, [r2, #16]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68d2      	ldr	r2, [r2, #12]
 8002d7a:	4311      	orrs	r1, r2
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	000186a0 	.word	0x000186a0
 8002ddc:	001e847f 	.word	0x001e847f
 8002de0:	003d08ff 	.word	0x003d08ff
 8002de4:	431bde83 	.word	0x431bde83
 8002de8:	10624dd3 	.word	0x10624dd3

08002dec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	4608      	mov	r0, r1
 8002df6:	4611      	mov	r1, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	817b      	strh	r3, [r7, #10]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	813b      	strh	r3, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e06:	f7ff f87f 	bl	8001f08 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	f040 80d9 	bne.w	8002fcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2319      	movs	r3, #25
 8002e20:	2201      	movs	r2, #1
 8002e22:	496d      	ldr	r1, [pc, #436]	@ (8002fd8 <HAL_I2C_Mem_Write+0x1ec>)
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f971 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
 8002e32:	e0cc      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2C_Mem_Write+0x56>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0c5      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d007      	beq.n	8002e68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2221      	movs	r2, #33	@ 0x21
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2240      	movs	r2, #64	@ 0x40
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a4d      	ldr	r2, [pc, #308]	@ (8002fdc <HAL_I2C_Mem_Write+0x1f0>)
 8002ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eaa:	88f8      	ldrh	r0, [r7, #6]
 8002eac:	893a      	ldrh	r2, [r7, #8]
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4603      	mov	r3, r0
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f890 	bl	8002fe0 <I2C_RequestMemoryWrite>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d052      	beq.n	8002f6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e081      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fa36 	bl	8003340 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d107      	bne.n	8002ef2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e06b      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d11b      	bne.n	8002f6c <HAL_I2C_Mem_Write+0x180>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d017      	beq.n	8002f6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1aa      	bne.n	8002eca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fa29 	bl	80033d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d107      	bne.n	8002f9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e016      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
  }
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	00100002 	.word	0x00100002
 8002fdc:	ffff0000 	.word	0xffff0000

08002fe0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	4608      	mov	r0, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	461a      	mov	r2, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	817b      	strh	r3, [r7, #10]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	813b      	strh	r3, [r7, #8]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2200      	movs	r2, #0
 8003012:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f878 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003030:	d103      	bne.n	800303a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e05f      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800304c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	492d      	ldr	r1, [pc, #180]	@ (8003108 <I2C_RequestMemoryWrite+0x128>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f8d3 	bl	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e04c      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f95e 	bl	8003340 <I2C_WaitOnTXEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	2b04      	cmp	r3, #4
 8003090:	d107      	bne.n	80030a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e02b      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	611a      	str	r2, [r3, #16]
 80030b6:	e021      	b.n	80030fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030b8:	893b      	ldrh	r3, [r7, #8]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	b29b      	uxth	r3, r3
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f938 	bl	8003340 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d107      	bne.n	80030ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e005      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f2:	893b      	ldrh	r3, [r7, #8]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	00010002 	.word	0x00010002

0800310c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800311c:	e048      	b.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d044      	beq.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003126:	f7fe feef 	bl	8001f08 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d139      	bne.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10d      	bne.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	43da      	mvns	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4013      	ands	r3, r2
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	e00c      	b.n	800317c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	43da      	mvns	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	429a      	cmp	r2, r3
 8003180:	d116      	bne.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e023      	b.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	0c1b      	lsrs	r3, r3, #16
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10d      	bne.n	80031d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	e00c      	b.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	43da      	mvns	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d093      	beq.n	800311e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800320e:	e071      	b.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321e:	d123      	bne.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e067      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d041      	beq.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003270:	f7fe fe4a 	bl	8001f08 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d136      	bne.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10c      	bne.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf14      	ite	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	2300      	moveq	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	e00b      	b.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	43da      	mvns	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4013      	ands	r3, r2
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e021      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d10c      	bne.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	43da      	mvns	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4013      	ands	r3, r2
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e00b      	b.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf14      	ite	ne
 800332a:	2301      	movne	r3, #1
 800332c:	2300      	moveq	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f af6d 	bne.w	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800334c:	e034      	b.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f886 	bl	8003460 <I2C_IsAcknowledgeFailed>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e034      	b.n	80033c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d028      	beq.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fdcf 	bl	8001f08 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11d      	bne.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003386:	2b80      	cmp	r3, #128	@ 0x80
 8003388:	d016      	beq.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c2:	2b80      	cmp	r3, #128	@ 0x80
 80033c4:	d1c3      	bne.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033dc:	e034      	b.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f83e 	bl	8003460 <I2C_IsAcknowledgeFailed>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e034      	b.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d028      	beq.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe fd87 	bl	8001f08 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d11d      	bne.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b04      	cmp	r3, #4
 8003418:	d016      	beq.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e007      	b.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d1c3      	bne.n	80033de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003476:	d11b      	bne.n	80034b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003480:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	f043 0204 	orr.w	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034be:	b08b      	sub	sp, #44	@ 0x2c
 80034c0:	af06      	add	r7, sp, #24
 80034c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0f1      	b.n	80036b2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f006 ff08 	bl	800a2f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2203      	movs	r2, #3
 80034ec:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f002 fe2d 	bl	8006154 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	687e      	ldr	r6, [r7, #4]
 8003502:	466d      	mov	r5, sp
 8003504:	f106 0410 	add.w	r4, r6, #16
 8003508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800350a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	602b      	str	r3, [r5, #0]
 8003510:	1d33      	adds	r3, r6, #4
 8003512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003514:	6838      	ldr	r0, [r7, #0]
 8003516:	f002 fdf7 	bl	8006108 <USB_CoreInit>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0c2      	b.n	80036b2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2100      	movs	r1, #0
 8003532:	4618      	mov	r0, r3
 8003534:	f002 fe28 	bl	8006188 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
 800353c:	e040      	b.n	80035c0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	440b      	add	r3, r1
 800354e:	3301      	adds	r3, #1
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	440b      	add	r3, r1
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	3303      	adds	r3, #3
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	3338      	adds	r3, #56	@ 0x38
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	440b      	add	r3, r1
 80035a0:	333c      	adds	r3, #60	@ 0x3c
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	3340      	adds	r3, #64	@ 0x40
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	3301      	adds	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d3b9      	bcc.n	800353e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	e044      	b.n	800365a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	440b      	add	r3, r1
 800360a:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	3301      	adds	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	d3b5      	bcc.n	80035d0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	687e      	ldr	r6, [r7, #4]
 800366c:	466d      	mov	r5, sp
 800366e:	f106 0410 	add.w	r4, r6, #16
 8003672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	602b      	str	r3, [r5, #0]
 800367a:	1d33      	adds	r3, r6, #4
 800367c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800367e:	6838      	ldr	r0, [r7, #0]
 8003680:	f002 fd8e 	bl	80061a0 <USB_DevInit>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e00d      	b.n	80036b2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f005 f80f 	bl	80086ce <USB_DevDisconnect>

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_PCD_Start+0x16>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e016      	b.n	80036fe <HAL_PCD_Start+0x44>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f002 fd23 	bl	8006128 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80036e2:	2101      	movs	r1, #1
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f007 f87a 	bl	800a7de <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f004 ffe3 	bl	80086ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b088      	sub	sp, #32
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f004 ffe5 	bl	80086e2 <USB_ReadInterrupts>
 8003718:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fb1b 	bl	8003d60 <PCD_EP_ISR_Handler>

    return;
 800372a:	e119      	b.n	8003960 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003732:	2b00      	cmp	r3, #0
 8003734:	d013      	beq.n	800375e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003748:	b292      	uxth	r2, r2
 800374a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f006 fe4d 	bl	800a3ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003754:	2100      	movs	r1, #0
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f905 	bl	8003966 <HAL_PCD_SetAddress>

    return;
 800375c:	e100      	b.n	8003960 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800377a:	b292      	uxth	r2, r2
 800377c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003780:	e0ee      	b.n	8003960 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00c      	beq.n	80037a6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003794:	b29a      	uxth	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800379e:	b292      	uxth	r2, r2
 80037a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037a4:	e0dc      	b.n	8003960 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d027      	beq.n	8003800 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0204 	bic.w	r2, r2, #4
 80037c2:	b292      	uxth	r2, r2
 80037c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0208 	bic.w	r2, r2, #8
 80037da:	b292      	uxth	r2, r2
 80037dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f006 fe3d 	bl	800a460 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037f8:	b292      	uxth	r2, r2
 80037fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037fe:	e0af      	b.n	8003960 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8083 	beq.w	8003912 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800380c:	2300      	movs	r3, #0
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e010      	b.n	8003834 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	7ffb      	ldrb	r3, [r7, #31]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	441a      	add	r2, r3
 800381e:	7ffb      	ldrb	r3, [r7, #31]
 8003820:	8812      	ldrh	r2, [r2, #0]
 8003822:	b292      	uxth	r2, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	3320      	adds	r3, #32
 8003828:	443b      	add	r3, r7
 800382a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800382e:	7ffb      	ldrb	r3, [r7, #31]
 8003830:	3301      	adds	r3, #1
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	7ffb      	ldrb	r3, [r7, #31]
 8003836:	2b07      	cmp	r3, #7
 8003838:	d9eb      	bls.n	8003812 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003842:	b29a      	uxth	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	b292      	uxth	r2, r2
 800384e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	b292      	uxth	r2, r2
 8003866:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800386a:	bf00      	nop
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003874:	b29b      	uxth	r3, r3
 8003876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f6      	beq.n	800386c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003890:	b292      	uxth	r2, r2
 8003892:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003896:	2300      	movs	r3, #0
 8003898:	77fb      	strb	r3, [r7, #31]
 800389a:	e00f      	b.n	80038bc <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800389c:	7ffb      	ldrb	r3, [r7, #31]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	4611      	mov	r1, r2
 80038a4:	7ffa      	ldrb	r2, [r7, #31]
 80038a6:	0092      	lsls	r2, r2, #2
 80038a8:	440a      	add	r2, r1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	3320      	adds	r3, #32
 80038ae:	443b      	add	r3, r7
 80038b0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038b4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80038b6:	7ffb      	ldrb	r3, [r7, #31]
 80038b8:	3301      	adds	r3, #1
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	7ffb      	ldrb	r3, [r7, #31]
 80038be:	2b07      	cmp	r3, #7
 80038c0:	d9ec      	bls.n	800389c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0208 	orr.w	r2, r2, #8
 80038d4:	b292      	uxth	r2, r2
 80038d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ec:	b292      	uxth	r2, r2
 80038ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0204 	orr.w	r2, r2, #4
 8003904:	b292      	uxth	r2, r2
 8003906:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f006 fd8e 	bl	800a42c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003910:	e026      	b.n	8003960 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00f      	beq.n	800393c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800392e:	b292      	uxth	r2, r2
 8003930:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f006 fd4c 	bl	800a3d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800393a:	e011      	b.n	8003960 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003958:	b292      	uxth	r2, r2
 800395a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800395e:	bf00      	nop
  }
}
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_PCD_SetAddress+0x1a>
 800397c:	2302      	movs	r3, #2
 800397e:	e013      	b.n	80039a8 <HAL_PCD_SetAddress+0x42>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f004 fe7b 	bl	8008694 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	4608      	mov	r0, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	70fb      	strb	r3, [r7, #3]
 80039c2:	460b      	mov	r3, r1
 80039c4:	803b      	strh	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da0e      	bge.n	80039f4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	705a      	strb	r2, [r3, #1]
 80039f2:	e00e      	b.n	8003a12 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	f003 0207 	and.w	r2, r3, #7
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a1e:	883a      	ldrh	r2, [r7, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	78ba      	ldrb	r2, [r7, #2]
 8003a28:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a2a:	78bb      	ldrb	r3, [r7, #2]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d102      	bne.n	8003a36 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_PCD_EP_Open+0x94>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e00e      	b.n	8003a62 <HAL_PCD_EP_Open+0xb2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 fbc4 	bl	80061e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8003a60:	7afb      	ldrb	r3, [r7, #11]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da0e      	bge.n	8003a9c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	705a      	strb	r2, [r3, #1]
 8003a9a:	e00e      	b.n	8003aba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	f003 0207 	and.w	r2, r3, #7
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_PCD_EP_Close+0x6a>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e00e      	b.n	8003af2 <HAL_PCD_EP_Close+0x88>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f002 ff3c 	bl	8006960 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	460b      	mov	r3, r1
 8003b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
 8003b0c:	f003 0207 	and.w	r2, r3, #7
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b3a:	7afb      	ldrb	r3, [r7, #11]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6979      	ldr	r1, [r7, #20]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 f8f3 	bl	8006d38 <USB_EPStartXfer>

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	f003 0207 	and.w	r2, r3, #7
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	460b      	mov	r3, r1
 8003b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4413      	add	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6979      	ldr	r1, [r7, #20]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 f8a5 	bl	8006d38 <USB_EPStartXfer>

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 0207 	and.w	r2, r3, #7
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d901      	bls.n	8003c16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e04c      	b.n	8003cb0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	da0e      	bge.n	8003c3c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	705a      	strb	r2, [r3, #1]
 8003c3a:	e00c      	b.n	8003c56 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_PCD_EP_SetStall+0x7e>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e01c      	b.n	8003cb0 <HAL_PCD_EP_SetStall+0xb8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 fc08 	bl	800849a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d108      	bne.n	8003ca6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f004 fd2d 	bl	8008700 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d901      	bls.n	8003cd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e040      	b.n	8003d58 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da0e      	bge.n	8003cfc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	705a      	strb	r2, [r3, #1]
 8003cfa:	e00e      	b.n	8003d1a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	f003 0207 	and.w	r2, r3, #7
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_PCD_EP_ClrStall+0x82>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e00e      	b.n	8003d58 <HAL_PCD_EP_ClrStall+0xa0>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 fbf6 	bl	800853a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b096      	sub	sp, #88	@ 0x58
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d68:	e3be      	b.n	80044e8 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003d84:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f040 8178 	bne.w	800407e <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d151      	bne.n	8003e3e <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003daa:	81fb      	strh	r3, [r7, #14]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	89fb      	ldrh	r3, [r7, #14]
 8003db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3328      	adds	r3, #40	@ 0x28
 8003dc2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3302      	adds	r3, #2
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	441a      	add	r2, r3
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f006 facc 	bl	800a39e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 836a 	beq.w	80044e8 <PCD_EP_ISR_Handler+0x788>
 8003e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f040 8365 	bne.w	80044e8 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e3c:	e354      	b.n	80044e8 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003e44:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d034      	beq.n	8003ec6 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	3306      	adds	r3, #6
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e86:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8003e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e94:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e98:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f004 fc80 	bl	80087a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003eac:	4013      	ands	r3, r2
 8003eae:	823b      	strh	r3, [r7, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	8a3a      	ldrh	r2, [r7, #16]
 8003eb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eba:	b292      	uxth	r2, r2
 8003ebc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f006 fa40 	bl	800a344 <HAL_PCD_SetupStageCallback>
 8003ec4:	e310      	b.n	80044e8 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ec6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f280 830c 	bge.w	80044e8 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003edc:	4013      	ands	r3, r2
 8003ede:	83fb      	strh	r3, [r7, #30]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	8bfa      	ldrh	r2, [r7, #30]
 8003ee6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eea:	b292      	uxth	r2, r2
 8003eec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	3306      	adds	r3, #6
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f18:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d019      	beq.n	8003f56 <PCD_EP_ISR_Handler+0x1f6>
 8003f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d015      	beq.n	8003f56 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f30:	6959      	ldr	r1, [r3, #20]
 8003f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f34:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f38:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f004 fc30 	bl	80087a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	441a      	add	r2, r3
 8003f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f4e:	2100      	movs	r1, #0
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f006 fa09 	bl	800a368 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003f60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f040 82bd 	bne.w	80044e8 <PCD_EP_ISR_Handler+0x788>
 8003f6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f7a:	f000 82b5 	beq.w	80044e8 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	4413      	add	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fb4:	d91d      	bls.n	8003ff2 <PCD_EP_ISR_Handler+0x292>
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <PCD_EP_ISR_Handler+0x270>
 8003fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	029b      	lsls	r3, r3, #10
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	801a      	strh	r2, [r3, #0]
 8003ff0:	e026      	b.n	8004040 <PCD_EP_ISR_Handler+0x2e0>
 8003ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <PCD_EP_ISR_Handler+0x2b0>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004008:	b29a      	uxth	r2, r3
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	e017      	b.n	8004040 <PCD_EP_ISR_Handler+0x2e0>
 8004010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	085b      	lsrs	r3, r3, #1
 8004016:	647b      	str	r3, [r7, #68]	@ 0x44
 8004018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <PCD_EP_ISR_Handler+0x2ca>
 8004024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004026:	3301      	adds	r3, #1
 8004028:	647b      	str	r3, [r7, #68]	@ 0x44
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29a      	uxth	r2, r3
 8004030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004032:	b29b      	uxth	r3, r3
 8004034:	029b      	lsls	r3, r3, #10
 8004036:	b29b      	uxth	r3, r3
 8004038:	4313      	orrs	r3, r2
 800403a:	b29a      	uxth	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800404c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004050:	827b      	strh	r3, [r7, #18]
 8004052:	8a7b      	ldrh	r3, [r7, #18]
 8004054:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004058:	827b      	strh	r3, [r7, #18]
 800405a:	8a7b      	ldrh	r3, [r7, #18]
 800405c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004060:	827b      	strh	r3, [r7, #18]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	8a7b      	ldrh	r3, [r7, #18]
 8004068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800406c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004078:	b29b      	uxth	r3, r3
 800407a:	8013      	strh	r3, [r2, #0]
 800407c:	e234      	b.n	80044e8 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004092:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004096:	2b00      	cmp	r3, #0
 8004098:	f280 80fc 	bge.w	8004294 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80040b2:	4013      	ands	r3, r2
 80040b4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80040ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80040ce:	b292      	uxth	r2, r2
 80040d0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80040d2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80040e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ea:	7b1b      	ldrb	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d125      	bne.n	800413c <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	3306      	adds	r3, #6
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004118:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800411c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8092 	beq.w	800424a <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412c:	6959      	ldr	r1, [r3, #20]
 800412e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004130:	88da      	ldrh	r2, [r3, #6]
 8004132:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004136:	f004 fb33 	bl	80087a0 <USB_ReadPMA>
 800413a:	e086      	b.n	800424a <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800413c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800413e:	78db      	ldrb	r3, [r3, #3]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d10a      	bne.n	800415a <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004144:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004148:	461a      	mov	r2, r3
 800414a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f9d9 	bl	8004504 <HAL_PCD_EP_DB_Receive>
 8004152:	4603      	mov	r3, r0
 8004154:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004158:	e077      	b.n	800424a <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004174:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	441a      	add	r2, r3
 8004186:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800418a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800418e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004196:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800419a:	b29b      	uxth	r3, r3
 800419c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d024      	beq.n	8004202 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4413      	add	r3, r2
 80041cc:	3302      	adds	r3, #2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041e0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80041e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02e      	beq.n	800424a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f2:	6959      	ldr	r1, [r3, #20]
 80041f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f6:	891a      	ldrh	r2, [r3, #8]
 80041f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041fc:	f004 fad0 	bl	80087a0 <USB_ReadPMA>
 8004200:	e023      	b.n	800424a <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	3306      	adds	r3, #6
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800422a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800422e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	6959      	ldr	r1, [r3, #20]
 800423e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004240:	895a      	ldrh	r2, [r3, #10]
 8004242:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004246:	f004 faab 	bl	80087a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800424a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004252:	441a      	add	r2, r3
 8004254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004256:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004260:	441a      	add	r2, r3
 8004262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004264:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <PCD_EP_ISR_Handler+0x51a>
 800426e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	429a      	cmp	r2, r3
 8004278:	d206      	bcs.n	8004288 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800427a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f006 f871 	bl	800a368 <HAL_PCD_DataOutStageCallback>
 8004286:	e005      	b.n	8004294 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800428e:	4618      	mov	r0, r3
 8004290:	f002 fd52 	bl	8006d38 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004294:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8123 	beq.w	80044e8 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 80042a2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4413      	add	r3, r2
 80042b4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80042cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80042e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80042f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f4:	78db      	ldrb	r3, [r3, #3]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	f040 80a2 	bne.w	8004440 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80042fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fe:	2200      	movs	r2, #0
 8004300:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	7b1b      	ldrb	r3, [r3, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8093 	beq.w	8004432 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800430c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d046      	beq.n	80043a6 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431a:	785b      	ldrb	r3, [r3, #1]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d126      	bne.n	800436e <PCD_EP_ISR_Handler+0x60e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	4413      	add	r3, r2
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
 8004338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	011a      	lsls	r2, r3, #4
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	4413      	add	r3, r2
 8004342:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004346:	623b      	str	r3, [r7, #32]
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004352:	b29a      	uxth	r2, r3
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	801a      	strh	r2, [r3, #0]
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004366:	b29a      	uxth	r2, r3
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	e061      	b.n	8004432 <PCD_EP_ISR_Handler+0x6d2>
 800436e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004370:	785b      	ldrb	r3, [r3, #1]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d15d      	bne.n	8004432 <PCD_EP_ISR_Handler+0x6d2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004384:	b29b      	uxth	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438a:	4413      	add	r3, r2
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800438e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	011a      	lsls	r2, r3, #4
 8004394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004396:	4413      	add	r3, r2
 8004398:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	2200      	movs	r2, #0
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	e045      	b.n	8004432 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ae:	785b      	ldrb	r3, [r3, #1]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d126      	bne.n	8004402 <PCD_EP_ISR_Handler+0x6a2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c8:	4413      	add	r3, r2
 80043ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80043cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	011a      	lsls	r2, r3, #4
 80043d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d4:	4413      	add	r3, r2
 80043d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043da:	633b      	str	r3, [r7, #48]	@ 0x30
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	801a      	strh	r2, [r3, #0]
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	801a      	strh	r2, [r3, #0]
 8004400:	e017      	b.n	8004432 <PCD_EP_ISR_Handler+0x6d2>
 8004402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d113      	bne.n	8004432 <PCD_EP_ISR_Handler+0x6d2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004412:	b29b      	uxth	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004418:	4413      	add	r3, r2
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800441c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	011a      	lsls	r2, r3, #4
 8004422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004424:	4413      	add	r3, r2
 8004426:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	2200      	movs	r2, #0
 8004430:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f005 ffb0 	bl	800a39e <HAL_PCD_DataInStageCallback>
 800443e:	e053      	b.n	80044e8 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004440:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d146      	bne.n	80044da <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004454:	b29b      	uxth	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	3302      	adds	r3, #2
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004474:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004480:	429a      	cmp	r2, r3
 8004482:	d907      	bls.n	8004494 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8004484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800448c:	1ad2      	subs	r2, r2, r3
 800448e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004490:	619a      	str	r2, [r3, #24]
 8004492:	e002      	b.n	800449a <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004496:	2200      	movs	r2, #0
 8004498:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800449a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f005 ff78 	bl	800a39e <HAL_PCD_DataInStageCallback>
 80044ae:	e01b      	b.n	80044e8 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80044b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80044b8:	441a      	add	r2, r3
 80044ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044bc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80044be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80044c6:	441a      	add	r2, r3
 80044c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044d2:	4618      	mov	r0, r3
 80044d4:	f002 fc30 	bl	8006d38 <USB_EPStartXfer>
 80044d8:	e006      	b.n	80044e8 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80044da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044de:	461a      	mov	r2, r3
 80044e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f91b 	bl	800471e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	b21b      	sxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f6ff ac38 	blt.w	8003d6a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3758      	adds	r7, #88	@ 0x58
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d07e      	beq.n	800461a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004524:	b29b      	uxth	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	3302      	adds	r3, #2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004544:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	8b7b      	ldrh	r3, [r7, #26]
 800454c:	429a      	cmp	r2, r3
 800454e:	d306      	bcc.n	800455e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	8b7b      	ldrh	r3, [r7, #26]
 8004556:	1ad2      	subs	r2, r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	619a      	str	r2, [r3, #24]
 800455c:	e002      	b.n	8004564 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2200      	movs	r2, #0
 8004562:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d123      	bne.n	80045b4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004586:	833b      	strh	r3, [r7, #24]
 8004588:	8b3b      	ldrh	r3, [r7, #24]
 800458a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800458e:	833b      	strh	r3, [r7, #24]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	441a      	add	r2, r3
 800459e:	8b3b      	ldrh	r3, [r7, #24]
 80045a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01f      	beq.n	80045fe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d8:	82fb      	strh	r3, [r7, #22]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	441a      	add	r2, r3
 80045e8:	8afb      	ldrh	r3, [r7, #22]
 80045ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80045fe:	8b7b      	ldrh	r3, [r7, #26]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8087 	beq.w	8004714 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6959      	ldr	r1, [r3, #20]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	891a      	ldrh	r2, [r3, #8]
 8004612:	8b7b      	ldrh	r3, [r7, #26]
 8004614:	f004 f8c4 	bl	80087a0 <USB_ReadPMA>
 8004618:	e07c      	b.n	8004714 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004622:	b29b      	uxth	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	3306      	adds	r3, #6
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004642:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	8b7b      	ldrh	r3, [r7, #26]
 800464a:	429a      	cmp	r2, r3
 800464c:	d306      	bcc.n	800465c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	8b7b      	ldrh	r3, [r7, #26]
 8004654:	1ad2      	subs	r2, r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	619a      	str	r2, [r3, #24]
 800465a:	e002      	b.n	8004662 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2200      	movs	r2, #0
 8004660:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d123      	bne.n	80046b2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004684:	83fb      	strh	r3, [r7, #30]
 8004686:	8bfb      	ldrh	r3, [r7, #30]
 8004688:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800468c:	83fb      	strh	r3, [r7, #30]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	441a      	add	r2, r3
 800469c:	8bfb      	ldrh	r3, [r7, #30]
 800469e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d11f      	bne.n	80046fc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d6:	83bb      	strh	r3, [r7, #28]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	8bbb      	ldrh	r3, [r7, #28]
 80046e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80046fc:	8b7b      	ldrh	r3, [r7, #26]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6959      	ldr	r1, [r3, #20]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	895a      	ldrh	r2, [r3, #10]
 800470e:	8b7b      	ldrh	r3, [r7, #26]
 8004710:	f004 f846 	bl	80087a0 <USB_ReadPMA>
    }
  }

  return count;
 8004714:	8b7b      	ldrh	r3, [r7, #26]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b0a4      	sub	sp, #144	@ 0x90
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	4613      	mov	r3, r2
 800472a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 81dd 	beq.w	8004af2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004740:	b29b      	uxth	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	3302      	adds	r3, #2
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004760:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800476c:	429a      	cmp	r2, r3
 800476e:	d907      	bls.n	8004780 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004778:	1ad2      	subs	r2, r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	619a      	str	r2, [r3, #24]
 800477e:	e002      	b.n	8004786 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2200      	movs	r2, #0
 8004784:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f040 80b9 	bne.w	8004902 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d126      	bne.n	80047e6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ac:	4413      	add	r3, r2
 80047ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	011a      	lsls	r2, r3, #4
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	4413      	add	r3, r2
 80047ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047de:	b29a      	uxth	r2, r3
 80047e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	e01a      	b.n	800481c <HAL_PCD_EP_DB_Transmit+0xfe>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	785b      	ldrb	r3, [r3, #1]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d116      	bne.n	800481c <HAL_PCD_EP_DB_Transmit+0xfe>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004802:	4413      	add	r3, r2
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	011a      	lsls	r2, r3, #4
 800480c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480e:	4413      	add	r3, r2
 8004810:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004814:	633b      	str	r3, [r7, #48]	@ 0x30
 8004816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004818:	2200      	movs	r2, #0
 800481a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	785b      	ldrb	r3, [r3, #1]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d126      	bne.n	8004878 <HAL_PCD_EP_DB_Transmit+0x15a>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004838:	b29b      	uxth	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	4413      	add	r3, r2
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	011a      	lsls	r2, r3, #4
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	4413      	add	r3, r2
 800484c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	b29b      	uxth	r3, r3
 8004858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800485c:	b29a      	uxth	r2, r3
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004870:	b29a      	uxth	r2, r3
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	e017      	b.n	80048a8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d113      	bne.n	80048a8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004888:	b29b      	uxth	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488e:	4413      	add	r3, r2
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	011a      	lsls	r2, r3, #4
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	4413      	add	r3, r2
 800489c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048a0:	623b      	str	r3, [r7, #32]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	2200      	movs	r2, #0
 80048a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	4619      	mov	r1, r3
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f005 fd75 	bl	800a39e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 82fc 	beq.w	8004eb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048da:	82fb      	strh	r3, [r7, #22]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	8afb      	ldrh	r3, [r7, #22]
 80048ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	8013      	strh	r3, [r2, #0]
 8004900:	e2da      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d021      	beq.n	8004950 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004926:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800493c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004944:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494c:	b29b      	uxth	r3, r3
 800494e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004956:	2b01      	cmp	r3, #1
 8004958:	f040 82ae 	bne.w	8004eb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004964:	441a      	add	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004972:	441a      	add	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	429a      	cmp	r2, r3
 8004982:	d30b      	bcc.n	800499c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004994:	1ad2      	subs	r2, r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	621a      	str	r2, [r3, #32]
 800499a:	e017      	b.n	80049cc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80049a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80049b4:	e00a      	b.n	80049cc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2200      	movs	r2, #0
 80049ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d165      	bne.n	8004aa0 <HAL_PCD_EP_DB_Transmit+0x382>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e8:	4413      	add	r3, r2
 80049ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	011a      	lsls	r2, r3, #4
 80049f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f4:	4413      	add	r3, r2
 80049f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0a:	801a      	strh	r2, [r3, #0]
 8004a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a10:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a12:	d91d      	bls.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x332>
 8004a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <HAL_PCD_EP_DB_Transmit+0x310>
 8004a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	029b      	lsls	r3, r3, #10
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4c:	801a      	strh	r2, [r3, #0]
 8004a4e:	e044      	b.n	8004ada <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <HAL_PCD_EP_DB_Transmit+0x350>
 8004a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6a:	801a      	strh	r2, [r3, #0]
 8004a6c:	e035      	b.n	8004ada <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a84:	3301      	adds	r3, #1
 8004a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	029b      	lsls	r3, r3, #10
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	4313      	orrs	r3, r2
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9c:	801a      	strh	r2, [r3, #0]
 8004a9e:	e01c      	b.n	8004ada <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d118      	bne.n	8004ada <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004abc:	4413      	add	r3, r2
 8004abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac8:	4413      	add	r3, r2
 8004aca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ace:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6959      	ldr	r1, [r3, #20]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	891a      	ldrh	r2, [r3, #8]
 8004ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f003 fe13 	bl	8008716 <USB_WritePMA>
 8004af0:	e1e2      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4413      	add	r3, r2
 8004b06:	3306      	adds	r3, #6
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b1a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d307      	bcc.n	8004b3a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b32:	1ad2      	subs	r2, r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	619a      	str	r2, [r3, #24]
 8004b38:	e002      	b.n	8004b40 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f040 80c0 	bne.w	8004cca <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d126      	bne.n	8004ba0 <HAL_PCD_EP_DB_Transmit+0x482>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b66:	4413      	add	r3, r2
 8004b68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	011a      	lsls	r2, r3, #4
 8004b70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b72:	4413      	add	r3, r2
 8004b74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	e01a      	b.n	8004bd6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	785b      	ldrb	r3, [r3, #1]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d116      	bne.n	8004bd6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bbc:	4413      	add	r3, r2
 8004bbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	011a      	lsls	r2, r3, #4
 8004bc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bc8:	4413      	add	r3, r2
 8004bca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bce:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d12b      	bne.n	8004c3c <HAL_PCD_EP_DB_Transmit+0x51e>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf8:	4413      	add	r3, r2
 8004bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	011a      	lsls	r2, r3, #4
 8004c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c04:	4413      	add	r3, r2
 8004c06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c20:	801a      	strh	r2, [r3, #0]
 8004c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c38:	801a      	strh	r2, [r3, #0]
 8004c3a:	e017      	b.n	8004c6c <HAL_PCD_EP_DB_Transmit+0x54e>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	785b      	ldrb	r3, [r3, #1]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d113      	bne.n	8004c6c <HAL_PCD_EP_DB_Transmit+0x54e>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c52:	4413      	add	r3, r2
 8004c54:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	011a      	lsls	r2, r3, #4
 8004c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c5e:	4413      	add	r3, r2
 8004c60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c64:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	4619      	mov	r1, r3
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f005 fb93 	bl	800a39e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 811a 	bne.w	8004eb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8013      	strh	r3, [r2, #0]
 8004cc8:	e0f6      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d121      	bne.n	8004d18 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	441a      	add	r2, r3
 8004d00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	f040 80ca 	bne.w	8004eb8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d3a:	441a      	add	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6a1a      	ldr	r2, [r3, #32]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d30b      	bcc.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d5c:	1ad2      	subs	r2, r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	621a      	str	r2, [r3, #32]
 8004d62:	e017      	b.n	8004d94 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d108      	bne.n	8004d7e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004d6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d7c:	e00a      	b.n	8004d94 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d165      	bne.n	8004e6e <HAL_PCD_EP_DB_Transmit+0x750>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004db6:	4413      	add	r3, r2
 8004db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	011a      	lsls	r2, r3, #4
 8004dc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dde:	2b3e      	cmp	r3, #62	@ 0x3e
 8004de0:	d91d      	bls.n	8004e1e <HAL_PCD_EP_DB_Transmit+0x700>
 8004de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d102      	bne.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x6de>
 8004df6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	029b      	lsls	r3, r3, #10
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	e041      	b.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x71e>
 8004e26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	e032      	b.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e40:	085b      	lsrs	r3, r3, #1
 8004e42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_PCD_EP_DB_Transmit+0x738>
 8004e50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e52:	3301      	adds	r3, #1
 8004e54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	029b      	lsls	r3, r3, #10
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	4313      	orrs	r3, r2
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e6a:	801a      	strh	r2, [r3, #0]
 8004e6c:	e019      	b.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	785b      	ldrb	r3, [r3, #1]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d115      	bne.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e84:	4413      	add	r3, r2
 8004e86:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	011a      	lsls	r2, r3, #4
 8004e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e90:	4413      	add	r3, r2
 8004e92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e96:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	6959      	ldr	r1, [r3, #20]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	895a      	ldrh	r2, [r3, #10]
 8004eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f003 fc2f 	bl	8008716 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ed2:	82bb      	strh	r3, [r7, #20]
 8004ed4:	8abb      	ldrh	r3, [r7, #20]
 8004ed6:	f083 0310 	eor.w	r3, r3, #16
 8004eda:	82bb      	strh	r3, [r7, #20]
 8004edc:	8abb      	ldrh	r3, [r7, #20]
 8004ede:	f083 0320 	eor.w	r3, r3, #32
 8004ee2:	82bb      	strh	r3, [r7, #20]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	8abb      	ldrh	r3, [r7, #20]
 8004ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3790      	adds	r7, #144	@ 0x90
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b087      	sub	sp, #28
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	817b      	strh	r3, [r7, #10]
 8004f20:	4613      	mov	r3, r2
 8004f22:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f24:	897b      	ldrh	r3, [r7, #10]
 8004f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f30:	897b      	ldrh	r3, [r7, #10]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	e009      	b.n	8004f5c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f48:	897a      	ldrh	r2, [r7, #10]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f5c:	893b      	ldrh	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d107      	bne.n	8004f72 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2200      	movs	r2, #0
 8004f66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	80da      	strh	r2, [r3, #6]
 8004f70:	e00b      	b.n	8004f8a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2201      	movs	r2, #1
 8004f76:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0c1b      	lsrs	r3, r3, #16
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr
	...

08004f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e272      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8087 	beq.w	80050c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fb8:	4b92      	ldr	r3, [pc, #584]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 030c 	and.w	r3, r3, #12
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d00c      	beq.n	8004fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d112      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x5e>
 8004fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fdc:	d10b      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fde:	4b89      	ldr	r3, [pc, #548]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d06c      	beq.n	80050c4 <HAL_RCC_OscConfig+0x12c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d168      	bne.n	80050c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e24c      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ffe:	d106      	bne.n	800500e <HAL_RCC_OscConfig+0x76>
 8005000:	4b80      	ldr	r3, [pc, #512]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7f      	ldr	r2, [pc, #508]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	e02e      	b.n	800506c <HAL_RCC_OscConfig+0xd4>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10c      	bne.n	8005030 <HAL_RCC_OscConfig+0x98>
 8005016:	4b7b      	ldr	r3, [pc, #492]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a7a      	ldr	r2, [pc, #488]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 800501c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	4b78      	ldr	r3, [pc, #480]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a77      	ldr	r2, [pc, #476]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005028:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e01d      	b.n	800506c <HAL_RCC_OscConfig+0xd4>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005038:	d10c      	bne.n	8005054 <HAL_RCC_OscConfig+0xbc>
 800503a:	4b72      	ldr	r3, [pc, #456]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a71      	ldr	r2, [pc, #452]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	4b6f      	ldr	r3, [pc, #444]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a6e      	ldr	r2, [pc, #440]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e00b      	b.n	800506c <HAL_RCC_OscConfig+0xd4>
 8005054:	4b6b      	ldr	r3, [pc, #428]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6a      	ldr	r2, [pc, #424]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 800505a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4b68      	ldr	r3, [pc, #416]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a67      	ldr	r2, [pc, #412]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800506a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fc ff48 	bl	8001f08 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800507c:	f7fc ff44 	bl	8001f08 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	@ 0x64
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e200      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b5d      	ldr	r3, [pc, #372]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0xe4>
 800509a:	e014      	b.n	80050c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fc ff34 	bl	8001f08 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a4:	f7fc ff30 	bl	8001f08 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	@ 0x64
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e1ec      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b6:	4b53      	ldr	r3, [pc, #332]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x10c>
 80050c2:	e000      	b.n	80050c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d063      	beq.n	800519a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050d2:	4b4c      	ldr	r3, [pc, #304]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f003 030c 	and.w	r3, r3, #12
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050de:	4b49      	ldr	r3, [pc, #292]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d11c      	bne.n	8005124 <HAL_RCC_OscConfig+0x18c>
 80050ea:	4b46      	ldr	r3, [pc, #280]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d116      	bne.n	8005124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f6:	4b43      	ldr	r3, [pc, #268]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <HAL_RCC_OscConfig+0x176>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d001      	beq.n	800510e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e1c0      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510e:	4b3d      	ldr	r3, [pc, #244]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4939      	ldr	r1, [pc, #228]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 800511e:	4313      	orrs	r3, r2
 8005120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005122:	e03a      	b.n	800519a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d020      	beq.n	800516e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800512c:	4b36      	ldr	r3, [pc, #216]	@ (8005208 <HAL_RCC_OscConfig+0x270>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005132:	f7fc fee9 	bl	8001f08 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513a:	f7fc fee5 	bl	8001f08 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e1a1      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514c:	4b2d      	ldr	r3, [pc, #180]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005158:	4b2a      	ldr	r3, [pc, #168]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4927      	ldr	r1, [pc, #156]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]
 800516c:	e015      	b.n	800519a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800516e:	4b26      	ldr	r3, [pc, #152]	@ (8005208 <HAL_RCC_OscConfig+0x270>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fc fec8 	bl	8001f08 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517c:	f7fc fec4 	bl	8001f08 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e180      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518e:	4b1d      	ldr	r3, [pc, #116]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d03a      	beq.n	800521c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d019      	beq.n	80051e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ae:	4b17      	ldr	r3, [pc, #92]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b4:	f7fc fea8 	bl	8001f08 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051bc:	f7fc fea4 	bl	8001f08 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e160      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <HAL_RCC_OscConfig+0x26c>)
 80051d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051da:	2001      	movs	r0, #1
 80051dc:	f000 faba 	bl	8005754 <RCC_Delay>
 80051e0:	e01c      	b.n	800521c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e2:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fc fe8e 	bl	8001f08 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ee:	e00f      	b.n	8005210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f0:	f7fc fe8a 	bl	8001f08 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d908      	bls.n	8005210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e146      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	42420000 	.word	0x42420000
 800520c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005210:	4b92      	ldr	r3, [pc, #584]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e9      	bne.n	80051f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a6 	beq.w	8005376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522e:	4b8b      	ldr	r3, [pc, #556]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10d      	bne.n	8005256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523a:	4b88      	ldr	r3, [pc, #544]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	4a87      	ldr	r2, [pc, #540]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005244:	61d3      	str	r3, [r2, #28]
 8005246:	4b85      	ldr	r3, [pc, #532]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005256:	4b82      	ldr	r3, [pc, #520]	@ (8005460 <HAL_RCC_OscConfig+0x4c8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d118      	bne.n	8005294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005262:	4b7f      	ldr	r3, [pc, #508]	@ (8005460 <HAL_RCC_OscConfig+0x4c8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7e      	ldr	r2, [pc, #504]	@ (8005460 <HAL_RCC_OscConfig+0x4c8>)
 8005268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800526c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526e:	f7fc fe4b 	bl	8001f08 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005276:	f7fc fe47 	bl	8001f08 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b64      	cmp	r3, #100	@ 0x64
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e103      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005288:	4b75      	ldr	r3, [pc, #468]	@ (8005460 <HAL_RCC_OscConfig+0x4c8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x312>
 800529c:	4b6f      	ldr	r3, [pc, #444]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	4a6e      	ldr	r2, [pc, #440]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	6213      	str	r3, [r2, #32]
 80052a8:	e02d      	b.n	8005306 <HAL_RCC_OscConfig+0x36e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0x334>
 80052b2:	4b6a      	ldr	r3, [pc, #424]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	4a69      	ldr	r2, [pc, #420]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	6213      	str	r3, [r2, #32]
 80052be:	4b67      	ldr	r3, [pc, #412]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4a66      	ldr	r2, [pc, #408]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	6213      	str	r3, [r2, #32]
 80052ca:	e01c      	b.n	8005306 <HAL_RCC_OscConfig+0x36e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b05      	cmp	r3, #5
 80052d2:	d10c      	bne.n	80052ee <HAL_RCC_OscConfig+0x356>
 80052d4:	4b61      	ldr	r3, [pc, #388]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	4a60      	ldr	r2, [pc, #384]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052da:	f043 0304 	orr.w	r3, r3, #4
 80052de:	6213      	str	r3, [r2, #32]
 80052e0:	4b5e      	ldr	r3, [pc, #376]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	4a5d      	ldr	r2, [pc, #372]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	6213      	str	r3, [r2, #32]
 80052ec:	e00b      	b.n	8005306 <HAL_RCC_OscConfig+0x36e>
 80052ee:	4b5b      	ldr	r3, [pc, #364]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	4a5a      	ldr	r2, [pc, #360]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	6213      	str	r3, [r2, #32]
 80052fa:	4b58      	ldr	r3, [pc, #352]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4a57      	ldr	r2, [pc, #348]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 8005300:	f023 0304 	bic.w	r3, r3, #4
 8005304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d015      	beq.n	800533a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530e:	f7fc fdfb 	bl	8001f08 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005314:	e00a      	b.n	800532c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005316:	f7fc fdf7 	bl	8001f08 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e0b1      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532c:	4b4b      	ldr	r3, [pc, #300]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0ee      	beq.n	8005316 <HAL_RCC_OscConfig+0x37e>
 8005338:	e014      	b.n	8005364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533a:	f7fc fde5 	bl	8001f08 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005340:	e00a      	b.n	8005358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fc fde1 	bl	8001f08 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e09b      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005358:	4b40      	ldr	r3, [pc, #256]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1ee      	bne.n	8005342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005364:	7dfb      	ldrb	r3, [r7, #23]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d105      	bne.n	8005376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800536a:	4b3c      	ldr	r3, [pc, #240]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4a3b      	ldr	r2, [pc, #236]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 8005370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8087 	beq.w	800548e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005380:	4b36      	ldr	r3, [pc, #216]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b08      	cmp	r3, #8
 800538a:	d061      	beq.n	8005450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d146      	bne.n	8005422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005394:	4b33      	ldr	r3, [pc, #204]	@ (8005464 <HAL_RCC_OscConfig+0x4cc>)
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fc fdb5 	bl	8001f08 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a2:	f7fc fdb1 	bl	8001f08 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e06d      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053b4:	4b29      	ldr	r3, [pc, #164]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f0      	bne.n	80053a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c8:	d108      	bne.n	80053dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053ca:	4b24      	ldr	r3, [pc, #144]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	4921      	ldr	r1, [pc, #132]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053dc:	4b1f      	ldr	r3, [pc, #124]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a19      	ldr	r1, [r3, #32]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	430b      	orrs	r3, r1
 80053ee:	491b      	ldr	r1, [pc, #108]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005464 <HAL_RCC_OscConfig+0x4cc>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fa:	f7fc fd85 	bl	8001f08 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005402:	f7fc fd81 	bl	8001f08 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e03d      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005414:	4b11      	ldr	r3, [pc, #68]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCC_OscConfig+0x46a>
 8005420:	e035      	b.n	800548e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005422:	4b10      	ldr	r3, [pc, #64]	@ (8005464 <HAL_RCC_OscConfig+0x4cc>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005428:	f7fc fd6e 	bl	8001f08 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005430:	f7fc fd6a 	bl	8001f08 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e026      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <HAL_RCC_OscConfig+0x4c4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x498>
 800544e:	e01e      	b.n	800548e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d107      	bne.n	8005468 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e019      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
 800545c:	40021000 	.word	0x40021000
 8005460:	40007000 	.word	0x40007000
 8005464:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <HAL_RCC_OscConfig+0x500>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	429a      	cmp	r2, r3
 800547a:	d106      	bne.n	800548a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d001      	beq.n	800548e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000

0800549c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0d0      	b.n	8005652 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054b0:	4b6a      	ldr	r3, [pc, #424]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d910      	bls.n	80054e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b67      	ldr	r3, [pc, #412]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 0207 	bic.w	r2, r3, #7
 80054c6:	4965      	ldr	r1, [pc, #404]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b63      	ldr	r3, [pc, #396]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0b8      	b.n	8005652 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d020      	beq.n	800552e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f8:	4b59      	ldr	r3, [pc, #356]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4a58      	ldr	r2, [pc, #352]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80054fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005502:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005510:	4b53      	ldr	r3, [pc, #332]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4a52      	ldr	r2, [pc, #328]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 8005516:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800551a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800551c:	4b50      	ldr	r3, [pc, #320]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	494d      	ldr	r1, [pc, #308]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 800552a:	4313      	orrs	r3, r2
 800552c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d040      	beq.n	80055bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d107      	bne.n	8005552 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005542:	4b47      	ldr	r3, [pc, #284]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d115      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e07f      	b.n	8005652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d107      	bne.n	800556a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555a:	4b41      	ldr	r3, [pc, #260]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e073      	b.n	8005652 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556a:	4b3d      	ldr	r3, [pc, #244]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e06b      	b.n	8005652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800557a:	4b39      	ldr	r3, [pc, #228]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f023 0203 	bic.w	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4936      	ldr	r1, [pc, #216]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 8005588:	4313      	orrs	r3, r2
 800558a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800558c:	f7fc fcbc 	bl	8001f08 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	e00a      	b.n	80055aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005594:	f7fc fcb8 	bl	8001f08 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e053      	b.n	8005652 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f003 020c 	and.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1eb      	bne.n	8005594 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055bc:	4b27      	ldr	r3, [pc, #156]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d210      	bcs.n	80055ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b24      	ldr	r3, [pc, #144]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 0207 	bic.w	r2, r3, #7
 80055d2:	4922      	ldr	r1, [pc, #136]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055da:	4b20      	ldr	r3, [pc, #128]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d001      	beq.n	80055ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e032      	b.n	8005652 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f8:	4b19      	ldr	r3, [pc, #100]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	4916      	ldr	r1, [pc, #88]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 8005606:	4313      	orrs	r3, r2
 8005608:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005616:	4b12      	ldr	r3, [pc, #72]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	490e      	ldr	r1, [pc, #56]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 8005626:	4313      	orrs	r3, r2
 8005628:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800562a:	f000 f821 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 800562e:	4602      	mov	r2, r0
 8005630:	4b0b      	ldr	r3, [pc, #44]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	091b      	lsrs	r3, r3, #4
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	490a      	ldr	r1, [pc, #40]	@ (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 800563c:	5ccb      	ldrb	r3, [r1, r3]
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	4a09      	ldr	r2, [pc, #36]	@ (8005668 <HAL_RCC_ClockConfig+0x1cc>)
 8005644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005646:	4b09      	ldr	r3, [pc, #36]	@ (800566c <HAL_RCC_ClockConfig+0x1d0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f7fc fc1a 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40022000 	.word	0x40022000
 8005660:	40021000 	.word	0x40021000
 8005664:	0800e104 	.word	0x0800e104
 8005668:	20000020 	.word	0x20000020
 800566c:	20000024 	.word	0x20000024

08005670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	2300      	movs	r3, #0
 8005684:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800568a:	4b1e      	ldr	r3, [pc, #120]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x94>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b04      	cmp	r3, #4
 8005698:	d002      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x30>
 800569a:	2b08      	cmp	r3, #8
 800569c:	d003      	beq.n	80056a6 <HAL_RCC_GetSysClockFreq+0x36>
 800569e:	e027      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056a0:	4b19      	ldr	r3, [pc, #100]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x98>)
 80056a2:	613b      	str	r3, [r7, #16]
      break;
 80056a4:	e027      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	0c9b      	lsrs	r3, r3, #18
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	4a17      	ldr	r2, [pc, #92]	@ (800570c <HAL_RCC_GetSysClockFreq+0x9c>)
 80056b0:	5cd3      	ldrb	r3, [r2, r3]
 80056b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d010      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056be:	4b11      	ldr	r3, [pc, #68]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x94>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	0c5b      	lsrs	r3, r3, #17
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	4a11      	ldr	r2, [pc, #68]	@ (8005710 <HAL_RCC_GetSysClockFreq+0xa0>)
 80056ca:	5cd3      	ldrb	r3, [r2, r3]
 80056cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x98>)
 80056d2:	fb03 f202 	mul.w	r2, r3, r2
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e004      	b.n	80056ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005714 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056e4:	fb02 f303 	mul.w	r3, r2, r3
 80056e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	613b      	str	r3, [r7, #16]
      break;
 80056ee:	e002      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056f0:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x98>)
 80056f2:	613b      	str	r3, [r7, #16]
      break;
 80056f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f6:	693b      	ldr	r3, [r7, #16]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40021000 	.word	0x40021000
 8005708:	007a1200 	.word	0x007a1200
 800570c:	0800e11c 	.word	0x0800e11c
 8005710:	0800e12c 	.word	0x0800e12c
 8005714:	003d0900 	.word	0x003d0900

08005718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800571c:	4b02      	ldr	r3, [pc, #8]	@ (8005728 <HAL_RCC_GetHCLKFreq+0x10>)
 800571e:	681b      	ldr	r3, [r3, #0]
}
 8005720:	4618      	mov	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr
 8005728:	20000020 	.word	0x20000020

0800572c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005730:	f7ff fff2 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 8005734:	4602      	mov	r2, r0
 8005736:	4b05      	ldr	r3, [pc, #20]	@ (800574c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	0a1b      	lsrs	r3, r3, #8
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	4903      	ldr	r1, [pc, #12]	@ (8005750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005742:	5ccb      	ldrb	r3, [r1, r3]
 8005744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005748:	4618      	mov	r0, r3
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40021000 	.word	0x40021000
 8005750:	0800e114 	.word	0x0800e114

08005754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800575c:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <RCC_Delay+0x34>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <RCC_Delay+0x38>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	0a5b      	lsrs	r3, r3, #9
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005770:	bf00      	nop
  }
  while (Delay --);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1e5a      	subs	r2, r3, #1
 8005776:	60fa      	str	r2, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f9      	bne.n	8005770 <RCC_Delay+0x1c>
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	20000020 	.word	0x20000020
 800578c:	10624dd3 	.word	0x10624dd3

08005790 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d07d      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80057ac:	2300      	movs	r3, #0
 80057ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b0:	4b4f      	ldr	r3, [pc, #316]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10d      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057bc:	4b4c      	ldr	r3, [pc, #304]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	4a4b      	ldr	r2, [pc, #300]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c6:	61d3      	str	r3, [r2, #28]
 80057c8:	4b49      	ldr	r3, [pc, #292]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d4:	2301      	movs	r3, #1
 80057d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d8:	4b46      	ldr	r3, [pc, #280]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d118      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057e4:	4b43      	ldr	r3, [pc, #268]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a42      	ldr	r2, [pc, #264]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f0:	f7fc fb8a 	bl	8001f08 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f6:	e008      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f8:	f7fc fb86 	bl	8001f08 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b64      	cmp	r3, #100	@ 0x64
 8005804:	d901      	bls.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e06d      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580a:	4b3a      	ldr	r3, [pc, #232]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0f0      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005816:	4b36      	ldr	r3, [pc, #216]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d02e      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	429a      	cmp	r2, r3
 8005832:	d027      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005834:	4b2e      	ldr	r3, [pc, #184]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800583c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800583e:	4b2e      	ldr	r3, [pc, #184]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005844:	4b2c      	ldr	r3, [pc, #176]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800584a:	4a29      	ldr	r2, [pc, #164]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d014      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585a:	f7fc fb55 	bl	8001f08 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005860:	e00a      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005862:	f7fc fb51 	bl	8001f08 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e036      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005878:	4b1d      	ldr	r3, [pc, #116]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ee      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005884:	4b1a      	ldr	r3, [pc, #104]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4917      	ldr	r1, [pc, #92]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005892:	4313      	orrs	r3, r2
 8005894:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005896:	7dfb      	ldrb	r3, [r7, #23]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d105      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589c:	4b14      	ldr	r3, [pc, #80]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4a13      	ldr	r2, [pc, #76]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058b4:	4b0e      	ldr	r3, [pc, #56]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	490b      	ldr	r1, [pc, #44]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058d2:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	4904      	ldr	r1, [pc, #16]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40007000 	.word	0x40007000
 80058f8:	42420440 	.word	0x42420440

080058fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e041      	b.n	8005992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc f9ca 	bl	8001cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f000 fa7c 	bl	8005e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d001      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e03a      	b.n	8005a2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a18      	ldr	r2, [pc, #96]	@ (8005a34 <HAL_TIM_Base_Start_IT+0x98>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00e      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x58>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059de:	d009      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x58>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a14      	ldr	r2, [pc, #80]	@ (8005a38 <HAL_TIM_Base_Start_IT+0x9c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x58>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a13      	ldr	r2, [pc, #76]	@ (8005a3c <HAL_TIM_Base_Start_IT+0xa0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d111      	bne.n	8005a18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d010      	beq.n	8005a28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0201 	orr.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	e007      	b.n	8005a28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	40012c00 	.word	0x40012c00
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800

08005a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0202 	mvn.w	r2, #2
 8005a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f9bd 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9b0 	bl	8005df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f9bf 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d122      	bne.n	8005af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0204 	mvn.w	r2, #4
 8005ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f993 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f986 	bl	8005df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f995 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d122      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d11b      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0208 	mvn.w	r2, #8
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f969 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f95c 	bl	8005df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f96b 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d122      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d11b      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0210 	mvn.w	r2, #16
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f93f 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f932 	bl	8005df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f941 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0201 	mvn.w	r2, #1
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f90d 	bl	8005dde <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bce:	2b80      	cmp	r3, #128	@ 0x80
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bdc:	2b80      	cmp	r3, #128	@ 0x80
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa83 	bl	80060f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfa:	2b40      	cmp	r3, #64	@ 0x40
 8005bfc:	d10e      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c08:	2b40      	cmp	r3, #64	@ 0x40
 8005c0a:	d107      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f905 	bl	8005e26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d10e      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d107      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0220 	mvn.w	r2, #32
 8005c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa4e 	bl	80060e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_TIM_ConfigClockSource+0x1c>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e0b4      	b.n	8005dd6 <HAL_TIM_ConfigClockSource+0x186>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca4:	d03e      	beq.n	8005d24 <HAL_TIM_ConfigClockSource+0xd4>
 8005ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005caa:	f200 8087 	bhi.w	8005dbc <HAL_TIM_ConfigClockSource+0x16c>
 8005cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb2:	f000 8086 	beq.w	8005dc2 <HAL_TIM_ConfigClockSource+0x172>
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cba:	d87f      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x16c>
 8005cbc:	2b70      	cmp	r3, #112	@ 0x70
 8005cbe:	d01a      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8005cc0:	2b70      	cmp	r3, #112	@ 0x70
 8005cc2:	d87b      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x16c>
 8005cc4:	2b60      	cmp	r3, #96	@ 0x60
 8005cc6:	d050      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x11a>
 8005cc8:	2b60      	cmp	r3, #96	@ 0x60
 8005cca:	d877      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ccc:	2b50      	cmp	r3, #80	@ 0x50
 8005cce:	d03c      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0xfa>
 8005cd0:	2b50      	cmp	r3, #80	@ 0x50
 8005cd2:	d873      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x16c>
 8005cd4:	2b40      	cmp	r3, #64	@ 0x40
 8005cd6:	d058      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0x13a>
 8005cd8:	2b40      	cmp	r3, #64	@ 0x40
 8005cda:	d86f      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x16c>
 8005cdc:	2b30      	cmp	r3, #48	@ 0x30
 8005cde:	d064      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15a>
 8005ce0:	2b30      	cmp	r3, #48	@ 0x30
 8005ce2:	d86b      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d060      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15a>
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d867      	bhi.n	8005dbc <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d05c      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15a>
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d05a      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x15a>
 8005cf4:	e062      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d06:	f000 f970 	bl	8005fea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	609a      	str	r2, [r3, #8]
      break;
 8005d22:	e04f      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d34:	f000 f959 	bl	8005fea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d46:	609a      	str	r2, [r3, #8]
      break;
 8005d48:	e03c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d56:	461a      	mov	r2, r3
 8005d58:	f000 f8d0 	bl	8005efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2150      	movs	r1, #80	@ 0x50
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f927 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005d68:	e02c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d76:	461a      	mov	r2, r3
 8005d78:	f000 f8ee 	bl	8005f58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2160      	movs	r1, #96	@ 0x60
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f917 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005d88:	e01c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d96:	461a      	mov	r2, r3
 8005d98:	f000 f8b0 	bl	8005efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2140      	movs	r1, #64	@ 0x40
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 f907 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005da8:	e00c      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f000 f8fe 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005dba:	e003      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc0:	e000      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr

08005e02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr

08005e26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a29      	ldr	r2, [pc, #164]	@ (8005ef0 <TIM_Base_SetConfig+0xb8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00b      	beq.n	8005e68 <TIM_Base_SetConfig+0x30>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e56:	d007      	beq.n	8005e68 <TIM_Base_SetConfig+0x30>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a26      	ldr	r2, [pc, #152]	@ (8005ef4 <TIM_Base_SetConfig+0xbc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_Base_SetConfig+0x30>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a25      	ldr	r2, [pc, #148]	@ (8005ef8 <TIM_Base_SetConfig+0xc0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d108      	bne.n	8005e7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef0 <TIM_Base_SetConfig+0xb8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_Base_SetConfig+0x62>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e88:	d007      	beq.n	8005e9a <TIM_Base_SetConfig+0x62>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a19      	ldr	r2, [pc, #100]	@ (8005ef4 <TIM_Base_SetConfig+0xbc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_Base_SetConfig+0x62>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a18      	ldr	r2, [pc, #96]	@ (8005ef8 <TIM_Base_SetConfig+0xc0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d108      	bne.n	8005eac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a07      	ldr	r2, [pc, #28]	@ (8005ef0 <TIM_Base_SetConfig+0xb8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d103      	bne.n	8005ee0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	615a      	str	r2, [r3, #20]
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800

08005efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f023 0201 	bic.w	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f023 030a 	bic.w	r3, r3, #10
 8005f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr

08005f58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f023 0210 	bic.w	r2, r3, #16
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	031b      	lsls	r3, r3, #12
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	621a      	str	r2, [r3, #32]
}
 8005fac:	bf00      	nop
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr

08005fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f043 0307 	orr.w	r3, r3, #7
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	609a      	str	r2, [r3, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b087      	sub	sp, #28
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006004:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	021a      	lsls	r2, r3, #8
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	431a      	orrs	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4313      	orrs	r3, r2
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	609a      	str	r2, [r3, #8]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr

08006028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800603c:	2302      	movs	r3, #2
 800603e:	e046      	b.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a16      	ldr	r2, [pc, #88]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00e      	beq.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800608c:	d009      	beq.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a12      	ldr	r2, [pc, #72]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d004      	beq.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a10      	ldr	r2, [pc, #64]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10c      	bne.n	80060bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800

080060e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr

080060f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr

08006108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006108:	b084      	sub	sp, #16
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	f107 0014 	add.w	r0, r7, #20
 8006116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	b004      	add	sp, #16
 8006126:	4770      	bx	lr

08006128 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006138:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800613c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	b29a      	uxth	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr

08006154 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800615c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006160:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	b29b      	uxth	r3, r3
 800616e:	43db      	mvns	r3, r3
 8006170:	b29b      	uxth	r3, r3
 8006172:	4013      	ands	r3, r2
 8006174:	b29a      	uxth	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr

080061a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061a0:	b084      	sub	sp, #16
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	f107 0014 	add.w	r0, r7, #20
 80061ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	b004      	add	sp, #16
 80061de:	4770      	bx	lr

080061e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b09d      	sub	sp, #116	@ 0x74
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006206:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	78db      	ldrb	r3, [r3, #3]
 800620e:	2b03      	cmp	r3, #3
 8006210:	d81f      	bhi.n	8006252 <USB_ActivateEndpoint+0x72>
 8006212:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <USB_ActivateEndpoint+0x38>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006229 	.word	0x08006229
 800621c:	08006245 	.word	0x08006245
 8006220:	0800625b 	.word	0x0800625b
 8006224:	08006237 	.word	0x08006237
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006228:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800622c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006230:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006234:	e012      	b.n	800625c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006236:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800623a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800623e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006242:	e00b      	b.n	800625c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006244:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006248:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800624c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006250:	e004      	b.n	800625c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006258:	e000      	b.n	800625c <USB_ActivateEndpoint+0x7c>
      break;
 800625a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800626a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800626e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800627a:	b29b      	uxth	r3, r3
 800627c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006294:	b29b      	uxth	r3, r3
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	7812      	ldrb	r2, [r2, #0]
 800629a:	4313      	orrs	r3, r2
 800629c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	441a      	add	r2, r3
 80062aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80062ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062be:	b29b      	uxth	r3, r3
 80062c0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	7b1b      	ldrb	r3, [r3, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 8178 	bne.w	80065bc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8084 	beq.w	80063de <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	4413      	add	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	011a      	lsls	r2, r3, #4
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	88db      	ldrh	r3, [r3, #6]
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	b29b      	uxth	r3, r3
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	827b      	strh	r3, [r7, #18]
 8006318:	8a7b      	ldrh	r3, [r7, #18]
 800631a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01b      	beq.n	800635a <USB_ActivateEndpoint+0x17a>
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006338:	823b      	strh	r3, [r7, #16]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	8a3b      	ldrh	r3, [r7, #16]
 8006346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800634a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800634e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006352:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006356:	b29b      	uxth	r3, r3
 8006358:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	78db      	ldrb	r3, [r3, #3]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d020      	beq.n	80063a4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006378:	81bb      	strh	r3, [r7, #12]
 800637a:	89bb      	ldrh	r3, [r7, #12]
 800637c:	f083 0320 	eor.w	r3, r3, #32
 8006380:	81bb      	strh	r3, [r7, #12]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	441a      	add	r2, r3
 800638c:	89bb      	ldrh	r3, [r7, #12]
 800638e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800639a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800639e:	b29b      	uxth	r3, r3
 80063a0:	8013      	strh	r3, [r2, #0]
 80063a2:	e2d5      	b.n	8006950 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ba:	81fb      	strh	r3, [r7, #14]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	441a      	add	r2, r3
 80063c6:	89fb      	ldrh	r3, [r7, #14]
 80063c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d8:	b29b      	uxth	r3, r3
 80063da:	8013      	strh	r3, [r2, #0]
 80063dc:	e2b8      	b.n	8006950 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ee:	4413      	add	r3, r2
 80063f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	011a      	lsls	r2, r3, #4
 80063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	88db      	ldrh	r3, [r3, #6]
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	b29b      	uxth	r3, r3
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006410:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800641c:	b29b      	uxth	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006422:	4413      	add	r3, r2
 8006424:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	011a      	lsls	r2, r3, #4
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642e:	4413      	add	r3, r2
 8006430:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006440:	b29a      	uxth	r2, r3
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b3e      	cmp	r3, #62	@ 0x3e
 800644c:	d91d      	bls.n	800648a <USB_ActivateEndpoint+0x2aa>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <USB_ActivateEndpoint+0x288>
 8006462:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006464:	3b01      	subs	r3, #1
 8006466:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29a      	uxth	r2, r3
 800646e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006470:	b29b      	uxth	r3, r3
 8006472:	029b      	lsls	r3, r3, #10
 8006474:	b29b      	uxth	r3, r3
 8006476:	4313      	orrs	r3, r2
 8006478:	b29b      	uxth	r3, r3
 800647a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006482:	b29a      	uxth	r2, r3
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	e026      	b.n	80064d8 <USB_ActivateEndpoint+0x2f8>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <USB_ActivateEndpoint+0x2c8>
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	e017      	b.n	80064d8 <USB_ActivateEndpoint+0x2f8>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <USB_ActivateEndpoint+0x2e2>
 80064bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064be:	3301      	adds	r3, #1
 80064c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	029b      	lsls	r3, r3, #10
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	4313      	orrs	r3, r2
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80064e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80064e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01b      	beq.n	8006528 <USB_ActivateEndpoint+0x348>
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006506:	843b      	strh	r3, [r7, #32]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	441a      	add	r2, r3
 8006512:	8c3b      	ldrh	r3, [r7, #32]
 8006514:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006518:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006524:	b29b      	uxth	r3, r3
 8006526:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d124      	bne.n	800657a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006546:	83bb      	strh	r3, [r7, #28]
 8006548:	8bbb      	ldrh	r3, [r7, #28]
 800654a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800654e:	83bb      	strh	r3, [r7, #28]
 8006550:	8bbb      	ldrh	r3, [r7, #28]
 8006552:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006556:	83bb      	strh	r3, [r7, #28]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	441a      	add	r2, r3
 8006562:	8bbb      	ldrh	r3, [r7, #28]
 8006564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800656c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006574:	b29b      	uxth	r3, r3
 8006576:	8013      	strh	r3, [r2, #0]
 8006578:	e1ea      	b.n	8006950 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800658c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006590:	83fb      	strh	r3, [r7, #30]
 8006592:	8bfb      	ldrh	r3, [r7, #30]
 8006594:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006598:	83fb      	strh	r3, [r7, #30]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	441a      	add	r2, r3
 80065a4:	8bfb      	ldrh	r3, [r7, #30]
 80065a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8013      	strh	r3, [r2, #0]
 80065ba:	e1c9      	b.n	8006950 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	78db      	ldrb	r3, [r3, #3]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d11e      	bne.n	8006602 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065da:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80065ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80065f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	8013      	strh	r3, [r2, #0]
 8006600:	e01d      	b.n	800663e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006618:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	441a      	add	r2, r3
 8006626:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800662a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800662e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800663a:	b29b      	uxth	r3, r3
 800663c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006648:	b29b      	uxth	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800664e:	4413      	add	r3, r2
 8006650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	011a      	lsls	r2, r3, #4
 8006658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800665a:	4413      	add	r3, r2
 800665c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006660:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	891b      	ldrh	r3, [r3, #8]
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	b29b      	uxth	r3, r3
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	657b      	str	r3, [r7, #84]	@ 0x54
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800667c:	b29b      	uxth	r3, r3
 800667e:	461a      	mov	r2, r3
 8006680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006682:	4413      	add	r3, r2
 8006684:	657b      	str	r3, [r7, #84]	@ 0x54
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	011a      	lsls	r2, r3, #4
 800668c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668e:	4413      	add	r3, r2
 8006690:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006694:	653b      	str	r3, [r7, #80]	@ 0x50
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	895b      	ldrh	r3, [r3, #10]
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	b29b      	uxth	r3, r3
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	785b      	ldrb	r3, [r3, #1]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 8093 	bne.w	80067d6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80066c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80066c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01b      	beq.n	8006704 <USB_ActivateEndpoint+0x524>
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	441a      	add	r2, r3
 80066ee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80066f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006700:	b29b      	uxth	r3, r3
 8006702:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006712:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01b      	beq.n	8006754 <USB_ActivateEndpoint+0x574>
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800672e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006732:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	441a      	add	r2, r3
 800673e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006748:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800674c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006750:	b29b      	uxth	r3, r3
 8006752:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800676c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800676e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006772:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006774:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006776:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800677a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800678c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006798:	b29b      	uxth	r3, r3
 800679a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	8013      	strh	r3, [r2, #0]
 80067d4:	e0bc      	b.n	8006950 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80067e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80067ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d01d      	beq.n	800682e <USB_ActivateEndpoint+0x64e>
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006808:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800681a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800681e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006822:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800682a:	b29b      	uxth	r3, r3
 800682c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800683e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01d      	beq.n	8006886 <USB_ActivateEndpoint+0x6a6>
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800685c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006860:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	441a      	add	r2, r3
 800686e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800687a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800687e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006882:	b29b      	uxth	r3, r3
 8006884:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	78db      	ldrb	r3, [r3, #3]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d024      	beq.n	80068d8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80068a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80068ac:	f083 0320 	eor.w	r3, r3, #32
 80068b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	441a      	add	r2, r3
 80068be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80068c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	8013      	strh	r3, [r2, #0]
 80068d6:	e01d      	b.n	8006914 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006900:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006904:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800690c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006910:	b29b      	uxth	r3, r3
 8006912:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800692a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	441a      	add	r2, r3
 8006938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800693c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800694c:	b29b      	uxth	r3, r3
 800694e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006950:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006954:	4618      	mov	r0, r3
 8006956:	3774      	adds	r7, #116	@ 0x74
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop

08006960 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006960:	b480      	push	{r7}
 8006962:	b08d      	sub	sp, #52	@ 0x34
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	7b1b      	ldrb	r3, [r3, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 808e 	bne.w	8006a90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d044      	beq.n	8006a06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	81bb      	strh	r3, [r7, #12]
 800698a:	89bb      	ldrh	r3, [r7, #12]
 800698c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <USB_DeactivateEndpoint+0x6c>
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069aa:	817b      	strh	r3, [r7, #10]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	897b      	ldrh	r3, [r7, #10]
 80069b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069e2:	813b      	strh	r3, [r7, #8]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	441a      	add	r2, r3
 80069ee:	893b      	ldrh	r3, [r7, #8]
 80069f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	8013      	strh	r3, [r2, #0]
 8006a04:	e192      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	827b      	strh	r3, [r7, #18]
 8006a14:	8a7b      	ldrh	r3, [r7, #18]
 8006a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01b      	beq.n	8006a56 <USB_DeactivateEndpoint+0xf6>
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a34:	823b      	strh	r3, [r7, #16]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	8a3b      	ldrh	r3, [r7, #16]
 8006a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6c:	81fb      	strh	r3, [r7, #14]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]
 8006a8e:	e14d      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 80a5 	bne.w	8006be4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	843b      	strh	r3, [r7, #32]
 8006aa8:	8c3b      	ldrh	r3, [r7, #32]
 8006aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01b      	beq.n	8006aea <USB_DeactivateEndpoint+0x18a>
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac8:	83fb      	strh	r3, [r7, #30]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	8bfb      	ldrh	r3, [r7, #30]
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ade:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	83bb      	strh	r3, [r7, #28]
 8006af8:	8bbb      	ldrh	r3, [r7, #28]
 8006afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01b      	beq.n	8006b3a <USB_DeactivateEndpoint+0x1da>
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b18:	837b      	strh	r3, [r7, #26]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	441a      	add	r2, r3
 8006b24:	8b7b      	ldrh	r3, [r7, #26]
 8006b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b50:	833b      	strh	r3, [r7, #24]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	441a      	add	r2, r3
 8006b5c:	8b3b      	ldrh	r3, [r7, #24]
 8006b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b88:	82fb      	strh	r3, [r7, #22]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	8afb      	ldrh	r3, [r7, #22]
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc0:	82bb      	strh	r3, [r7, #20]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8abb      	ldrh	r3, [r7, #20]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
 8006be2:	e0a3      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006bf2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <USB_DeactivateEndpoint+0x2d4>
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c12:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006c42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01b      	beq.n	8006c84 <USB_DeactivateEndpoint+0x324>
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	441a      	add	r2, r3
 8006c6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	441a      	add	r2, r3
 8006cde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	441a      	add	r2, r3
 8006d16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3734      	adds	r7, #52	@ 0x34
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b0c2      	sub	sp, #264	@ 0x108
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d46:	6018      	str	r0, [r3, #0]
 8006d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d50:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	785b      	ldrb	r3, [r3, #1]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	f040 86b7 	bne.w	8007ad2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	699a      	ldr	r2, [r3, #24]
 8006d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d908      	bls.n	8006d92 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d90:	e007      	b.n	8006da2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	7b1b      	ldrb	r3, [r3, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d13a      	bne.n	8006e28 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6959      	ldr	r1, [r3, #20]
 8006dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	88da      	ldrh	r2, [r3, #6]
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006dd4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006dd8:	6800      	ldr	r0, [r0, #0]
 8006dda:	f001 fc9c 	bl	8008716 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	4413      	add	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	011a      	lsls	r2, r3, #4
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	4413      	add	r3, r2
 8006e14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	f000 be1f 	b.w	8007a66 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	78db      	ldrb	r3, [r3, #3]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	f040 8462 	bne.w	80076fe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6a1a      	ldr	r2, [r3, #32]
 8006e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	f240 83df 	bls.w	8007616 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	441a      	add	r2, r3
 8006e9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006ea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ea8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6a1a      	ldr	r2, [r3, #32]
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec4:	1ad2      	subs	r2, r2, r3
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 81c7 	beq.w	8007288 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d177      	bne.n	8007006 <USB_EPStartXfer+0x2ce>
 8006f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	461a      	mov	r2, r3
 8006f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f36:	4413      	add	r3, r2
 8006f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	011a      	lsls	r2, r3, #4
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	801a      	strh	r2, [r3, #0]
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f66:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f68:	d921      	bls.n	8006fae <USB_EPStartXfer+0x276>
 8006f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <USB_EPStartXfer+0x252>
 8006f80:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f84:	3b01      	subs	r3, #1
 8006f86:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	029b      	lsls	r3, r3, #10
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	e050      	b.n	8007050 <USB_EPStartXfer+0x318>
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <USB_EPStartXfer+0x294>
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	801a      	strh	r2, [r3, #0]
 8006fca:	e041      	b.n	8007050 <USB_EPStartXfer+0x318>
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <USB_EPStartXfer+0x2b4>
 8006fe2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	029b      	lsls	r3, r3, #10
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	e024      	b.n	8007050 <USB_EPStartXfer+0x318>
 8007006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	785b      	ldrb	r3, [r3, #1]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d11c      	bne.n	8007050 <USB_EPStartXfer+0x318>
 8007016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007024:	b29b      	uxth	r3, r3
 8007026:	461a      	mov	r2, r3
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	4413      	add	r3, r2
 800702c:	633b      	str	r3, [r7, #48]	@ 0x30
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	011a      	lsls	r2, r3, #4
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	4413      	add	r3, r2
 8007040:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704a:	b29a      	uxth	r2, r3
 800704c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	895b      	ldrh	r3, [r3, #10]
 800705c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6959      	ldr	r1, [r3, #20]
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007070:	b29b      	uxth	r3, r3
 8007072:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007076:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800707a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800707e:	6800      	ldr	r0, [r0, #0]
 8007080:	f001 fb49 	bl	8008716 <USB_WritePMA>
            ep->xfer_buff += len;
 8007084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	695a      	ldr	r2, [r3, #20]
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007094:	441a      	add	r2, r3
 8007096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6a1a      	ldr	r2, [r3, #32]
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d90f      	bls.n	80070de <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80070be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6a1a      	ldr	r2, [r3, #32]
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	621a      	str	r2, [r3, #32]
 80070dc:	e00e      	b.n	80070fc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80070de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80070ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	785b      	ldrb	r3, [r3, #1]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d177      	bne.n	80071fc <USB_EPStartXfer+0x4c4>
 800710c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007126:	b29b      	uxth	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	4413      	add	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	011a      	lsls	r2, r3, #4
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	4413      	add	r3, r2
 8007142:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007152:	b29a      	uxth	r2, r3
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	801a      	strh	r2, [r3, #0]
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715c:	2b3e      	cmp	r3, #62	@ 0x3e
 800715e:	d921      	bls.n	80071a4 <USB_EPStartXfer+0x46c>
 8007160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <USB_EPStartXfer+0x448>
 8007176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800717a:	3b01      	subs	r3, #1
 800717c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800718a:	b29b      	uxth	r3, r3
 800718c:	029b      	lsls	r3, r3, #10
 800718e:	b29b      	uxth	r3, r3
 8007190:	4313      	orrs	r3, r2
 8007192:	b29b      	uxth	r3, r3
 8007194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719c:	b29a      	uxth	r2, r3
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	e056      	b.n	8007252 <USB_EPStartXfer+0x51a>
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <USB_EPStartXfer+0x48a>
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	e047      	b.n	8007252 <USB_EPStartXfer+0x51a>
 80071c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <USB_EPStartXfer+0x4aa>
 80071d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071dc:	3301      	adds	r3, #1
 80071de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	029b      	lsls	r3, r3, #10
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	4313      	orrs	r3, r2
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	e02a      	b.n	8007252 <USB_EPStartXfer+0x51a>
 80071fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d122      	bne.n	8007252 <USB_EPStartXfer+0x51a>
 800720c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	623b      	str	r3, [r7, #32]
 8007218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007226:	b29b      	uxth	r3, r3
 8007228:	461a      	mov	r2, r3
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	4413      	add	r3, r2
 800722e:	623b      	str	r3, [r7, #32]
 8007230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	011a      	lsls	r2, r3, #4
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	4413      	add	r3, r2
 8007242:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724c:	b29a      	uxth	r2, r3
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	891b      	ldrh	r3, [r3, #8]
 800725e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6959      	ldr	r1, [r3, #20]
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007272:	b29b      	uxth	r3, r3
 8007274:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007278:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800727c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007280:	6800      	ldr	r0, [r0, #0]
 8007282:	f001 fa48 	bl	8008716 <USB_WritePMA>
 8007286:	e3ee      	b.n	8007a66 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d177      	bne.n	8007388 <USB_EPStartXfer+0x650>
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072b8:	4413      	add	r3, r2
 80072ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	011a      	lsls	r2, r3, #4
 80072ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072cc:	4413      	add	r3, r2
 80072ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80072d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072de:	b29a      	uxth	r2, r3
 80072e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e2:	801a      	strh	r2, [r3, #0]
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ea:	d921      	bls.n	8007330 <USB_EPStartXfer+0x5f8>
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fa:	f003 031f 	and.w	r3, r3, #31
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d104      	bne.n	800730c <USB_EPStartXfer+0x5d4>
 8007302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007306:	3b01      	subs	r3, #1
 8007308:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800730c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29b      	uxth	r3, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	b29b      	uxth	r3, r3
 8007320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007328:	b29a      	uxth	r2, r3
 800732a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e056      	b.n	80073de <USB_EPStartXfer+0x6a6>
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <USB_EPStartXfer+0x616>
 8007338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007346:	b29a      	uxth	r2, r3
 8007348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	e047      	b.n	80073de <USB_EPStartXfer+0x6a6>
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007352:	085b      	lsrs	r3, r3, #1
 8007354:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <USB_EPStartXfer+0x636>
 8007364:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007368:	3301      	adds	r3, #1
 800736a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800736e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	b29a      	uxth	r2, r3
 8007374:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007378:	b29b      	uxth	r3, r3
 800737a:	029b      	lsls	r3, r3, #10
 800737c:	b29b      	uxth	r3, r3
 800737e:	4313      	orrs	r3, r2
 8007380:	b29a      	uxth	r2, r3
 8007382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	e02a      	b.n	80073de <USB_EPStartXfer+0x6a6>
 8007388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	785b      	ldrb	r3, [r3, #1]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d122      	bne.n	80073de <USB_EPStartXfer+0x6a6>
 8007398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80073a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073b8:	4413      	add	r3, r2
 80073ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80073bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	011a      	lsls	r2, r3, #4
 80073ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073cc:	4413      	add	r3, r2
 80073ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d8:	b29a      	uxth	r2, r3
 80073da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	891b      	ldrh	r3, [r3, #8]
 80073ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6959      	ldr	r1, [r3, #20]
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007404:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007408:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800740c:	6800      	ldr	r0, [r0, #0]
 800740e:	f001 f982 	bl	8008716 <USB_WritePMA>
            ep->xfer_buff += len;
 8007412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	695a      	ldr	r2, [r3, #20]
 800741e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007422:	441a      	add	r2, r3
 8007424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6a1a      	ldr	r2, [r3, #32]
 800743c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	429a      	cmp	r2, r3
 800744a:	d90f      	bls.n	800746c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6a1a      	ldr	r2, [r3, #32]
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745c:	1ad2      	subs	r2, r2, r3
 800745e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	621a      	str	r2, [r3, #32]
 800746a:	e00e      	b.n	800748a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800746c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800747c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2200      	movs	r2, #0
 8007488:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800748a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	643b      	str	r3, [r7, #64]	@ 0x40
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d177      	bne.n	8007596 <USB_EPStartXfer+0x85e>
 80074a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c6:	4413      	add	r3, r2
 80074c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	011a      	lsls	r2, r3, #4
 80074d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074da:	4413      	add	r3, r2
 80074dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80074f8:	d921      	bls.n	800753e <USB_EPStartXfer+0x806>
 80074fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007508:	f003 031f 	and.w	r3, r3, #31
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <USB_EPStartXfer+0x7e2>
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007514:	3b01      	subs	r3, #1
 8007516:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800751a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29a      	uxth	r2, r3
 8007520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007524:	b29b      	uxth	r3, r3
 8007526:	029b      	lsls	r3, r3, #10
 8007528:	b29b      	uxth	r3, r3
 800752a:	4313      	orrs	r3, r2
 800752c:	b29b      	uxth	r3, r3
 800752e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007536:	b29a      	uxth	r2, r3
 8007538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753a:	801a      	strh	r2, [r3, #0]
 800753c:	e050      	b.n	80075e0 <USB_EPStartXfer+0x8a8>
 800753e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10a      	bne.n	800755c <USB_EPStartXfer+0x824>
 8007546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007554:	b29a      	uxth	r2, r3
 8007556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007558:	801a      	strh	r2, [r3, #0]
 800755a:	e041      	b.n	80075e0 <USB_EPStartXfer+0x8a8>
 800755c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <USB_EPStartXfer+0x844>
 8007572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007576:	3301      	adds	r3, #1
 8007578:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800757c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29a      	uxth	r2, r3
 8007582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007586:	b29b      	uxth	r3, r3
 8007588:	029b      	lsls	r3, r3, #10
 800758a:	b29b      	uxth	r3, r3
 800758c:	4313      	orrs	r3, r2
 800758e:	b29a      	uxth	r2, r3
 8007590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	e024      	b.n	80075e0 <USB_EPStartXfer+0x8a8>
 8007596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d11c      	bne.n	80075e0 <USB_EPStartXfer+0x8a8>
 80075a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ba:	4413      	add	r3, r2
 80075bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80075be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	011a      	lsls	r2, r3, #4
 80075cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ce:	4413      	add	r3, r2
 80075d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075da:	b29a      	uxth	r2, r3
 80075dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	895b      	ldrh	r3, [r3, #10]
 80075ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6959      	ldr	r1, [r3, #20]
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007600:	b29b      	uxth	r3, r3
 8007602:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007606:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800760a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800760e:	6800      	ldr	r0, [r0, #0]
 8007610:	f001 f881 	bl	8008716 <USB_WritePMA>
 8007614:	e227      	b.n	8007a66 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	441a      	add	r2, r3
 800766a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800766e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007672:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800767a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767e:	b29b      	uxth	r3, r3
 8007680:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007686:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800768e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800769c:	b29b      	uxth	r3, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076a2:	4413      	add	r3, r2
 80076a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	011a      	lsls	r2, r3, #4
 80076b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076b6:	4413      	add	r3, r2
 80076b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	891b      	ldrh	r3, [r3, #8]
 80076d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6959      	ldr	r1, [r3, #20]
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076f6:	6800      	ldr	r0, [r0, #0]
 80076f8:	f001 f80d 	bl	8008716 <USB_WritePMA>
 80076fc:	e1b3      	b.n	8007a66 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80076fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6a1a      	ldr	r2, [r3, #32]
 800770a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 80c6 	beq.w	80078d0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d177      	bne.n	8007850 <USB_EPStartXfer+0xb18>
 8007760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800776c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800777a:	b29b      	uxth	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007780:	4413      	add	r3, r2
 8007782:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	011a      	lsls	r2, r3, #4
 8007792:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007794:	4413      	add	r3, r2
 8007796:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800779a:	667b      	str	r3, [r7, #100]	@ 0x64
 800779c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80077b2:	d921      	bls.n	80077f8 <USB_EPStartXfer+0xac0>
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c2:	f003 031f 	and.w	r3, r3, #31
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <USB_EPStartXfer+0xa9c>
 80077ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077ce:	3b01      	subs	r3, #1
 80077d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29a      	uxth	r2, r3
 80077da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077de:	b29b      	uxth	r3, r3
 80077e0:	029b      	lsls	r3, r3, #10
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4313      	orrs	r3, r2
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	e050      	b.n	800789a <USB_EPStartXfer+0xb62>
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <USB_EPStartXfer+0xade>
 8007800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29b      	uxth	r3, r3
 8007806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800780a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800780e:	b29a      	uxth	r2, r3
 8007810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007812:	801a      	strh	r2, [r3, #0]
 8007814:	e041      	b.n	800789a <USB_EPStartXfer+0xb62>
 8007816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <USB_EPStartXfer+0xafe>
 800782c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007830:	3301      	adds	r3, #1
 8007832:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007836:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	b29a      	uxth	r2, r3
 800783c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007840:	b29b      	uxth	r3, r3
 8007842:	029b      	lsls	r3, r3, #10
 8007844:	b29b      	uxth	r3, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	b29a      	uxth	r2, r3
 800784a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	e024      	b.n	800789a <USB_EPStartXfer+0xb62>
 8007850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d11c      	bne.n	800789a <USB_EPStartXfer+0xb62>
 8007860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007864:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800786e:	b29b      	uxth	r3, r3
 8007870:	461a      	mov	r2, r3
 8007872:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007874:	4413      	add	r3, r2
 8007876:	673b      	str	r3, [r7, #112]	@ 0x70
 8007878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	011a      	lsls	r2, r3, #4
 8007886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007888:	4413      	add	r3, r2
 800788a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800788e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007894:	b29a      	uxth	r2, r3
 8007896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007898:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800789a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	895b      	ldrh	r3, [r3, #10]
 80078a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6959      	ldr	r1, [r3, #20]
 80078b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078c8:	6800      	ldr	r0, [r0, #0]
 80078ca:	f000 ff24 	bl	8008716 <USB_WritePMA>
 80078ce:	e0ca      	b.n	8007a66 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d177      	bne.n	80079d0 <USB_EPStartXfer+0xc98>
 80078e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007900:	4413      	add	r3, r2
 8007902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	011a      	lsls	r2, r3, #4
 8007912:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007914:	4413      	add	r3, r2
 8007916:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800791a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800791c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29b      	uxth	r3, r3
 8007922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007926:	b29a      	uxth	r2, r3
 8007928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007930:	2b3e      	cmp	r3, #62	@ 0x3e
 8007932:	d921      	bls.n	8007978 <USB_EPStartXfer+0xc40>
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007938:	095b      	lsrs	r3, r3, #5
 800793a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800793e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	2b00      	cmp	r3, #0
 8007948:	d104      	bne.n	8007954 <USB_EPStartXfer+0xc1c>
 800794a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800794e:	3b01      	subs	r3, #1
 8007950:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29a      	uxth	r2, r3
 800795a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800795e:	b29b      	uxth	r3, r3
 8007960:	029b      	lsls	r3, r3, #10
 8007962:	b29b      	uxth	r3, r3
 8007964:	4313      	orrs	r3, r2
 8007966:	b29b      	uxth	r3, r3
 8007968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800796c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007970:	b29a      	uxth	r2, r3
 8007972:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	e05c      	b.n	8007a32 <USB_EPStartXfer+0xcfa>
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10a      	bne.n	8007996 <USB_EPStartXfer+0xc5e>
 8007980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b29b      	uxth	r3, r3
 8007986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800798a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798e:	b29a      	uxth	r2, r3
 8007990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007992:	801a      	strh	r2, [r3, #0]
 8007994:	e04d      	b.n	8007a32 <USB_EPStartXfer+0xcfa>
 8007996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <USB_EPStartXfer+0xc7e>
 80079ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079b0:	3301      	adds	r3, #1
 80079b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	029b      	lsls	r3, r3, #10
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	4313      	orrs	r3, r2
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	e030      	b.n	8007a32 <USB_EPStartXfer+0xcfa>
 80079d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d128      	bne.n	8007a32 <USB_EPStartXfer+0xcfa>
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a04:	4413      	add	r3, r2
 8007a06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	011a      	lsls	r2, r3, #4
 8007a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	891b      	ldrh	r3, [r3, #8]
 8007a3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6959      	ldr	r1, [r3, #20]
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a58:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a5c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a60:	6800      	ldr	r0, [r0, #0]
 8007a62:	f000 fe58 	bl	8008716 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a8c:	817b      	strh	r3, [r7, #10]
 8007a8e:	897b      	ldrh	r3, [r7, #10]
 8007a90:	f083 0310 	eor.w	r3, r3, #16
 8007a94:	817b      	strh	r3, [r7, #10]
 8007a96:	897b      	ldrh	r3, [r7, #10]
 8007a98:	f083 0320 	eor.w	r3, r3, #32
 8007a9c:	817b      	strh	r3, [r7, #10]
 8007a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	441a      	add	r2, r3
 8007ab8:	897b      	ldrh	r3, [r7, #10]
 8007aba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007abe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]
 8007ace:	f000 bcde 	b.w	800848e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	7b1b      	ldrb	r3, [r3, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 80bb 	bne.w	8007c5a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	699a      	ldr	r2, [r3, #24]
 8007af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d917      	bls.n	8007b30 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b20:	1ad2      	subs	r2, r2, r3
 8007b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	619a      	str	r2, [r3, #24]
 8007b2e:	e00e      	b.n	8007b4e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b72:	4413      	add	r3, r2
 8007b74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	011a      	lsls	r2, r3, #4
 8007b86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bae:	d924      	bls.n	8007bfa <USB_EPStartXfer+0xec2>
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	095b      	lsrs	r3, r3, #5
 8007bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d104      	bne.n	8007bd0 <USB_EPStartXfer+0xe98>
 8007bc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	029b      	lsls	r3, r3, #10
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	4313      	orrs	r3, r2
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bf4:	801a      	strh	r2, [r3, #0]
 8007bf6:	f000 bc10 	b.w	800841a <USB_EPStartXfer+0x16e2>
 8007bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10c      	bne.n	8007c1c <USB_EPStartXfer+0xee4>
 8007c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	e3fe      	b.n	800841a <USB_EPStartXfer+0x16e2>
 8007c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c20:	085b      	lsrs	r3, r3, #1
 8007c22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d004      	beq.n	8007c3c <USB_EPStartXfer+0xf04>
 8007c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c36:	3301      	adds	r3, #1
 8007c38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	029b      	lsls	r3, r3, #10
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c56:	801a      	strh	r2, [r3, #0]
 8007c58:	e3df      	b.n	800841a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	78db      	ldrb	r3, [r3, #3]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	f040 8218 	bne.w	800809c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	785b      	ldrb	r3, [r3, #1]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f040 809d 	bne.w	8007db8 <USB_EPStartXfer+0x1080>
 8007c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	011a      	lsls	r2, r3, #4
 8007cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cba:	4413      	add	r3, r2
 8007cbc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cd6:	801a      	strh	r2, [r3, #0]
 8007cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ce6:	d92b      	bls.n	8007d40 <USB_EPStartXfer+0x1008>
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	095b      	lsrs	r3, r3, #5
 8007cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d104      	bne.n	8007d18 <USB_EPStartXfer+0xfe0>
 8007d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d12:	3b01      	subs	r3, #1
 8007d14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	029b      	lsls	r3, r3, #10
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	e070      	b.n	8007e22 <USB_EPStartXfer+0x10ea>
 8007d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10c      	bne.n	8007d6a <USB_EPStartXfer+0x1032>
 8007d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d66:	801a      	strh	r2, [r3, #0]
 8007d68:	e05b      	b.n	8007e22 <USB_EPStartXfer+0x10ea>
 8007d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	085b      	lsrs	r3, r3, #1
 8007d78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <USB_EPStartXfer+0x1062>
 8007d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d94:	3301      	adds	r3, #1
 8007d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	029b      	lsls	r3, r3, #10
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4313      	orrs	r3, r2
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007db4:	801a      	strh	r2, [r3, #0]
 8007db6:	e034      	b.n	8007e22 <USB_EPStartXfer+0x10ea>
 8007db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d12c      	bne.n	8007e22 <USB_EPStartXfer+0x10ea>
 8007dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	461a      	mov	r2, r3
 8007de8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007dec:	4413      	add	r3, r2
 8007dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	011a      	lsls	r2, r3, #4
 8007e00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e04:	4413      	add	r3, r2
 8007e06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 809d 	bne.w	8007f7c <USB_EPStartXfer+0x1244>
 8007e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e66:	4413      	add	r3, r2
 8007e68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	011a      	lsls	r2, r3, #4
 8007e7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e7e:	4413      	add	r3, r2
 8007e80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e9a:	801a      	strh	r2, [r3, #0]
 8007e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007eaa:	d92b      	bls.n	8007f04 <USB_EPStartXfer+0x11cc>
 8007eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	095b      	lsrs	r3, r3, #5
 8007eba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f003 031f 	and.w	r3, r3, #31
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d104      	bne.n	8007edc <USB_EPStartXfer+0x11a4>
 8007ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	029b      	lsls	r3, r3, #10
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	e069      	b.n	8007fd8 <USB_EPStartXfer+0x12a0>
 8007f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10c      	bne.n	8007f2e <USB_EPStartXfer+0x11f6>
 8007f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	e054      	b.n	8007fd8 <USB_EPStartXfer+0x12a0>
 8007f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d004      	beq.n	8007f5e <USB_EPStartXfer+0x1226>
 8007f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f58:	3301      	adds	r3, #1
 8007f5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	029b      	lsls	r3, r3, #10
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	4313      	orrs	r3, r2
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f78:	801a      	strh	r2, [r3, #0]
 8007f7a:	e02d      	b.n	8007fd8 <USB_EPStartXfer+0x12a0>
 8007f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	785b      	ldrb	r3, [r3, #1]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d125      	bne.n	8007fd8 <USB_EPStartXfer+0x12a0>
 8007f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	011a      	lsls	r2, r3, #4
 8007fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007fba:	4413      	add	r3, r2
 8007fbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fd6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8218 	beq.w	800841a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800800a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800800e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <USB_EPStartXfer+0x12ea>
 8008016:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800801a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10d      	bne.n	800803e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008022:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800802a:	2b00      	cmp	r3, #0
 800802c:	f040 81f5 	bne.w	800841a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008030:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	f040 81ee 	bne.w	800841a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800803e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008064:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	441a      	add	r2, r3
 8008082:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800808a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800808e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008092:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008096:	b29b      	uxth	r3, r3
 8008098:	8013      	strh	r3, [r2, #0]
 800809a:	e1be      	b.n	800841a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800809c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	78db      	ldrb	r3, [r3, #3]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	f040 81b4 	bne.w	8008416 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80080ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699a      	ldr	r2, [r3, #24]
 80080ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d917      	bls.n	80080fa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80080ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80080da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ea:	1ad2      	subs	r2, r2, r3
 80080ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	619a      	str	r2, [r3, #24]
 80080f8:	e00e      	b.n	8008118 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80080fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800810a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2200      	movs	r2, #0
 8008116:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 8085 	bne.w	8008234 <USB_EPStartXfer+0x14fc>
 800812a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008146:	b29b      	uxth	r3, r3
 8008148:	461a      	mov	r2, r3
 800814a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800814e:	4413      	add	r3, r2
 8008150:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	011a      	lsls	r2, r3, #4
 8008162:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008166:	4413      	add	r3, r2
 8008168:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800816c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008170:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	b29b      	uxth	r3, r3
 8008178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800817c:	b29a      	uxth	r2, r3
 800817e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008182:	801a      	strh	r2, [r3, #0]
 8008184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008188:	2b3e      	cmp	r3, #62	@ 0x3e
 800818a:	d923      	bls.n	80081d4 <USB_EPStartXfer+0x149c>
 800818c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008190:	095b      	lsrs	r3, r3, #5
 8008192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <USB_EPStartXfer+0x1474>
 80081a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081a6:	3b01      	subs	r3, #1
 80081a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	029b      	lsls	r3, r3, #10
 80081bc:	b29b      	uxth	r3, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081d0:	801a      	strh	r2, [r3, #0]
 80081d2:	e060      	b.n	8008296 <USB_EPStartXfer+0x155e>
 80081d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10c      	bne.n	80081f6 <USB_EPStartXfer+0x14be>
 80081dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081f2:	801a      	strh	r2, [r3, #0]
 80081f4:	e04f      	b.n	8008296 <USB_EPStartXfer+0x155e>
 80081f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081fa:	085b      	lsrs	r3, r3, #1
 80081fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d004      	beq.n	8008216 <USB_EPStartXfer+0x14de>
 800820c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008210:	3301      	adds	r3, #1
 8008212:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008216:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29a      	uxth	r2, r3
 800821e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008222:	b29b      	uxth	r3, r3
 8008224:	029b      	lsls	r3, r3, #10
 8008226:	b29b      	uxth	r3, r3
 8008228:	4313      	orrs	r3, r2
 800822a:	b29a      	uxth	r2, r3
 800822c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008230:	801a      	strh	r2, [r3, #0]
 8008232:	e030      	b.n	8008296 <USB_EPStartXfer+0x155e>
 8008234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d128      	bne.n	8008296 <USB_EPStartXfer+0x155e>
 8008244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008248:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008260:	b29b      	uxth	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008268:	4413      	add	r3, r2
 800826a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800826e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	011a      	lsls	r2, r3, #4
 800827c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008280:	4413      	add	r3, r2
 8008282:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008286:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800828a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800828e:	b29a      	uxth	r2, r3
 8008290:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008294:	801a      	strh	r2, [r3, #0]
 8008296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800829a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	785b      	ldrb	r3, [r3, #1]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 8085 	bne.w	80083c0 <USB_EPStartXfer+0x1688>
 80082b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082da:	4413      	add	r3, r2
 80082dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	011a      	lsls	r2, r3, #4
 80082ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082f2:	4413      	add	r3, r2
 80082f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008308:	b29a      	uxth	r2, r3
 800830a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800830e:	801a      	strh	r2, [r3, #0]
 8008310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008314:	2b3e      	cmp	r3, #62	@ 0x3e
 8008316:	d923      	bls.n	8008360 <USB_EPStartXfer+0x1628>
 8008318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800831c:	095b      	lsrs	r3, r3, #5
 800831e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008326:	f003 031f 	and.w	r3, r3, #31
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <USB_EPStartXfer+0x1600>
 800832e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008332:	3b01      	subs	r3, #1
 8008334:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008338:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	b29a      	uxth	r2, r3
 8008340:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008344:	b29b      	uxth	r3, r3
 8008346:	029b      	lsls	r3, r3, #10
 8008348:	b29b      	uxth	r3, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	b29b      	uxth	r3, r3
 800834e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008356:	b29a      	uxth	r2, r3
 8008358:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800835c:	801a      	strh	r2, [r3, #0]
 800835e:	e05c      	b.n	800841a <USB_EPStartXfer+0x16e2>
 8008360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10c      	bne.n	8008382 <USB_EPStartXfer+0x164a>
 8008368:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008378:	b29a      	uxth	r2, r3
 800837a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800837e:	801a      	strh	r2, [r3, #0]
 8008380:	e04b      	b.n	800841a <USB_EPStartXfer+0x16e2>
 8008382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008386:	085b      	lsrs	r3, r3, #1
 8008388:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800838c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <USB_EPStartXfer+0x166a>
 8008398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800839c:	3301      	adds	r3, #1
 800839e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	029b      	lsls	r3, r3, #10
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	4313      	orrs	r3, r2
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083bc:	801a      	strh	r2, [r3, #0]
 80083be:	e02c      	b.n	800841a <USB_EPStartXfer+0x16e2>
 80083c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	785b      	ldrb	r3, [r3, #1]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d124      	bne.n	800841a <USB_EPStartXfer+0x16e2>
 80083d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083de:	b29b      	uxth	r3, r3
 80083e0:	461a      	mov	r2, r3
 80083e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083e6:	4413      	add	r3, r2
 80083e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	011a      	lsls	r2, r3, #4
 80083fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083fe:	4413      	add	r3, r2
 8008400:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008404:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840c:	b29a      	uxth	r2, r3
 800840e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008412:	801a      	strh	r2, [r3, #0]
 8008414:	e001      	b.n	800841a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e03a      	b.n	8008490 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800841a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	b29b      	uxth	r3, r3
 8008438:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800843c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008440:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008444:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008448:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800844c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008450:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008454:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008458:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800845c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	441a      	add	r2, r3
 8008476:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800847a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800847e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800848a:	b29b      	uxth	r3, r3
 800848c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d020      	beq.n	80084ee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084c2:	81bb      	strh	r3, [r7, #12]
 80084c4:	89bb      	ldrh	r3, [r7, #12]
 80084c6:	f083 0310 	eor.w	r3, r3, #16
 80084ca:	81bb      	strh	r3, [r7, #12]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	441a      	add	r2, r3
 80084d6:	89bb      	ldrh	r3, [r7, #12]
 80084d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	8013      	strh	r3, [r2, #0]
 80084ec:	e01f      	b.n	800852e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008504:	81fb      	strh	r3, [r7, #14]
 8008506:	89fb      	ldrh	r3, [r7, #14]
 8008508:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800850c:	81fb      	strh	r3, [r7, #14]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	441a      	add	r2, r3
 8008518:	89fb      	ldrh	r3, [r7, #14]
 800851a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800851e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800852a:	b29b      	uxth	r3, r3
 800852c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr

0800853a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800853a:	b480      	push	{r7}
 800853c:	b087      	sub	sp, #28
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	7b1b      	ldrb	r3, [r3, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	f040 809d 	bne.w	8008688 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	785b      	ldrb	r3, [r3, #1]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d04c      	beq.n	80085f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	823b      	strh	r3, [r7, #16]
 8008564:	8a3b      	ldrh	r3, [r7, #16]
 8008566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d01b      	beq.n	80085a6 <USB_EPClearStall+0x6c>
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008584:	81fb      	strh	r3, [r7, #14]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	441a      	add	r2, r3
 8008590:	89fb      	ldrh	r3, [r7, #14]
 8008592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800859a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800859e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	78db      	ldrb	r3, [r3, #3]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d06c      	beq.n	8008688 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085c4:	81bb      	strh	r3, [r7, #12]
 80085c6:	89bb      	ldrh	r3, [r7, #12]
 80085c8:	f083 0320 	eor.w	r3, r3, #32
 80085cc:	81bb      	strh	r3, [r7, #12]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	441a      	add	r2, r3
 80085d8:	89bb      	ldrh	r3, [r7, #12]
 80085da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	8013      	strh	r3, [r2, #0]
 80085ee:	e04b      	b.n	8008688 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	82fb      	strh	r3, [r7, #22]
 80085fe:	8afb      	ldrh	r3, [r7, #22]
 8008600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d01b      	beq.n	8008640 <USB_EPClearStall+0x106>
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800861a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861e:	82bb      	strh	r3, [r7, #20]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	441a      	add	r2, r3
 800862a:	8abb      	ldrh	r3, [r7, #20]
 800862c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800863c:	b29b      	uxth	r3, r3
 800863e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	b29b      	uxth	r3, r3
 800864e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008656:	827b      	strh	r3, [r7, #18]
 8008658:	8a7b      	ldrh	r3, [r7, #18]
 800865a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800865e:	827b      	strh	r3, [r7, #18]
 8008660:	8a7b      	ldrh	r3, [r7, #18]
 8008662:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008666:	827b      	strh	r3, [r7, #18]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	441a      	add	r2, r3
 8008672:	8a7b      	ldrh	r3, [r7, #18]
 8008674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800867c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008684:	b29b      	uxth	r3, r3
 8008686:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	bc80      	pop	{r7}
 8008692:	4770      	bx	lr

08008694 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d103      	bne.n	80086ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2280      	movs	r2, #128	@ 0x80
 80086aa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bc80      	pop	{r7}
 80086cc:	4770      	bx	lr

080086ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80086f4:	68fb      	ldr	r3, [r7, #12]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr

08008716 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008716:	b480      	push	{r7}
 8008718:	b08b      	sub	sp, #44	@ 0x2c
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	4611      	mov	r1, r2
 8008722:	461a      	mov	r2, r3
 8008724:	460b      	mov	r3, r1
 8008726:	80fb      	strh	r3, [r7, #6]
 8008728:	4613      	mov	r3, r2
 800872a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800872c:	88bb      	ldrh	r3, [r7, #4]
 800872e:	3301      	adds	r3, #1
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	005a      	lsls	r2, r3, #1
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008748:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	627b      	str	r3, [r7, #36]	@ 0x24
 800874e:	e01e      	b.n	800878e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	3301      	adds	r3, #1
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	b21a      	sxth	r2, r3
 8008760:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008764:	4313      	orrs	r3, r2
 8008766:	b21b      	sxth	r3, r3
 8008768:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	8a7a      	ldrh	r2, [r7, #18]
 800876e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	3302      	adds	r3, #2
 8008774:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	3302      	adds	r3, #2
 800877a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	3301      	adds	r3, #1
 8008780:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	3301      	adds	r3, #1
 8008786:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	3b01      	subs	r3, #1
 800878c:	627b      	str	r3, [r7, #36]	@ 0x24
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1dd      	bne.n	8008750 <USB_WritePMA+0x3a>
  }
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop
 8008798:	372c      	adds	r7, #44	@ 0x2c
 800879a:	46bd      	mov	sp, r7
 800879c:	bc80      	pop	{r7}
 800879e:	4770      	bx	lr

080087a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b08b      	sub	sp, #44	@ 0x2c
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	4611      	mov	r1, r2
 80087ac:	461a      	mov	r2, r3
 80087ae:	460b      	mov	r3, r1
 80087b0:	80fb      	strh	r3, [r7, #6]
 80087b2:	4613      	mov	r3, r2
 80087b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087b6:	88bb      	ldrh	r3, [r7, #4]
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087c6:	88fb      	ldrh	r3, [r7, #6]
 80087c8:	005a      	lsls	r2, r3, #1
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80087d8:	e01b      	b.n	8008812 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	3302      	adds	r3, #2
 80087e6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	3301      	adds	r3, #1
 80087f4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	0a1b      	lsrs	r3, r3, #8
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	3301      	adds	r3, #1
 8008804:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	3302      	adds	r3, #2
 800880a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	3b01      	subs	r3, #1
 8008810:	627b      	str	r3, [r7, #36]	@ 0x24
 8008812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e0      	bne.n	80087da <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008818:	88bb      	ldrh	r3, [r7, #4]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d007      	beq.n	8008834 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	b29b      	uxth	r3, r3
 800882a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	b2da      	uxtb	r2, r3
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	701a      	strb	r2, [r3, #0]
  }
}
 8008834:	bf00      	nop
 8008836:	372c      	adds	r7, #44	@ 0x2c
 8008838:	46bd      	mov	sp, r7
 800883a:	bc80      	pop	{r7}
 800883c:	4770      	bx	lr

0800883e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	7c1b      	ldrb	r3, [r3, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d115      	bne.n	8008882 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008856:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800885a:	2202      	movs	r2, #2
 800885c:	2181      	movs	r1, #129	@ 0x81
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f001 fe81 	bl	800a566 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800886a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800886e:	2202      	movs	r2, #2
 8008870:	2101      	movs	r1, #1
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 fe77 	bl	800a566 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008880:	e012      	b.n	80088a8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008882:	2340      	movs	r3, #64	@ 0x40
 8008884:	2202      	movs	r2, #2
 8008886:	2181      	movs	r1, #129	@ 0x81
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 fe6c 	bl	800a566 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008894:	2340      	movs	r3, #64	@ 0x40
 8008896:	2202      	movs	r2, #2
 8008898:	2101      	movs	r1, #1
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 fe63 	bl	800a566 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088a8:	2308      	movs	r3, #8
 80088aa:	2203      	movs	r2, #3
 80088ac:	2182      	movs	r1, #130	@ 0x82
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 fe59 	bl	800a566 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088ba:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80088be:	f001 ff79 	bl	800a7b4 <USBD_static_malloc>
 80088c2:	4602      	mov	r2, r0
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80088d4:	2301      	movs	r3, #1
 80088d6:	73fb      	strb	r3, [r7, #15]
 80088d8:	e026      	b.n	8008928 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	7c1b      	ldrb	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d109      	bne.n	8008918 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800890a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800890e:	2101      	movs	r1, #1
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 ff19 	bl	800a748 <USBD_LL_PrepareReceive>
 8008916:	e007      	b.n	8008928 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800891e:	2340      	movs	r3, #64	@ 0x40
 8008920:	2101      	movs	r1, #1
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 ff10 	bl	800a748 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008942:	2181      	movs	r1, #129	@ 0x81
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 fe34 	bl	800a5b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008950:	2101      	movs	r1, #1
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f001 fe2d 	bl	800a5b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008960:	2182      	movs	r1, #130	@ 0x82
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 fe25 	bl	800a5b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00e      	beq.n	8008996 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008988:	4618      	mov	r0, r3
 800898a:	f001 ff1f 	bl	800a7cc <USBD_static_free>
    pdev->pClassData = NULL;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008996:	7bfb      	ldrb	r3, [r7, #15]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d039      	beq.n	8008a3e <USBD_CDC_Setup+0x9e>
 80089ca:	2b20      	cmp	r3, #32
 80089cc:	d17f      	bne.n	8008ace <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	88db      	ldrh	r3, [r3, #6]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d029      	beq.n	8008a2a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	b25b      	sxtb	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	da11      	bge.n	8008a04 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80089ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	88d2      	ldrh	r2, [r2, #6]
 80089f2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80089f4:	6939      	ldr	r1, [r7, #16]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	88db      	ldrh	r3, [r3, #6]
 80089fa:	461a      	mov	r2, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 fa05 	bl	8009e0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a02:	e06b      	b.n	8008adc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	785a      	ldrb	r2, [r3, #1]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	88db      	ldrh	r3, [r3, #6]
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a1a:	6939      	ldr	r1, [r7, #16]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	88db      	ldrh	r3, [r3, #6]
 8008a20:	461a      	mov	r2, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 fa20 	bl	8009e68 <USBD_CtlPrepareRx>
      break;
 8008a28:	e058      	b.n	8008adc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	7850      	ldrb	r0, [r2, #1]
 8008a36:	2200      	movs	r2, #0
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	4798      	blx	r3
      break;
 8008a3c:	e04e      	b.n	8008adc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	785b      	ldrb	r3, [r3, #1]
 8008a42:	2b0b      	cmp	r3, #11
 8008a44:	d02e      	beq.n	8008aa4 <USBD_CDC_Setup+0x104>
 8008a46:	2b0b      	cmp	r3, #11
 8008a48:	dc38      	bgt.n	8008abc <USBD_CDC_Setup+0x11c>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <USBD_CDC_Setup+0xb4>
 8008a4e:	2b0a      	cmp	r3, #10
 8008a50:	d014      	beq.n	8008a7c <USBD_CDC_Setup+0xdc>
 8008a52:	e033      	b.n	8008abc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d107      	bne.n	8008a6e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008a5e:	f107 030c 	add.w	r3, r7, #12
 8008a62:	2202      	movs	r2, #2
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 f9d0 	bl	8009e0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a6c:	e02e      	b.n	8008acc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 f961 	bl	8009d38 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a76:	2302      	movs	r3, #2
 8008a78:	75fb      	strb	r3, [r7, #23]
          break;
 8008a7a:	e027      	b.n	8008acc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d107      	bne.n	8008a96 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a86:	f107 030f 	add.w	r3, r7, #15
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f001 f9bc 	bl	8009e0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a94:	e01a      	b.n	8008acc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 f94d 	bl	8009d38 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8008aa2:	e013      	b.n	8008acc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	d00d      	beq.n	8008aca <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f941 	bl	8009d38 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008aba:	e006      	b.n	8008aca <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 f93a 	bl	8009d38 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac8:	e000      	b.n	8008acc <USBD_CDC_Setup+0x12c>
          break;
 8008aca:	bf00      	nop
      }
      break;
 8008acc:	e006      	b.n	8008adc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f001 f931 	bl	8009d38 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8008ada:	bf00      	nop
  }

  return ret;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008af8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b00:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d03a      	beq.n	8008b82 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	331c      	adds	r3, #28
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d029      	beq.n	8008b76 <USBD_CDC_DataIn+0x90>
 8008b22:	78fa      	ldrb	r2, [r7, #3]
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	440b      	add	r3, r1
 8008b30:	331c      	adds	r3, #28
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	78f9      	ldrb	r1, [r7, #3]
 8008b36:	68b8      	ldr	r0, [r7, #8]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	440b      	add	r3, r1
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	4403      	add	r3, r0
 8008b42:	3338      	adds	r3, #56	@ 0x38
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b4a:	fb01 f303 	mul.w	r3, r1, r3
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d110      	bne.n	8008b76 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008b54:	78fa      	ldrb	r2, [r7, #3]
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	440b      	add	r3, r1
 8008b62:	331c      	adds	r3, #28
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b68:	78f9      	ldrb	r1, [r7, #3]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 fdc7 	bl	800a702 <USBD_LL_Transmit>
 8008b74:	e003      	b.n	8008b7e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e000      	b.n	8008b84 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008b82:	2302      	movs	r3, #2
  }
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ba0:	78fb      	ldrb	r3, [r7, #3]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 fdf2 	bl	800a78e <USBD_LL_GetRxDataSize>
 8008baa:	4602      	mov	r2, r0
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00d      	beq.n	8008bd8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4798      	blx	r3

    return USBD_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	e000      	b.n	8008bda <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008bd8:	2302      	movs	r3, #2
  }
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bf0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d014      	beq.n	8008c26 <USBD_CDC_EP0_RxReady+0x44>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c02:	2bff      	cmp	r3, #255	@ 0xff
 8008c04:	d00f      	beq.n	8008c26 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c14:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	22ff      	movs	r2, #255	@ 0xff
 8008c22:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2243      	movs	r2, #67	@ 0x43
 8008c3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008c3e:	4b03      	ldr	r3, [pc, #12]	@ (8008c4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bc80      	pop	{r7}
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	200000b4 	.word	0x200000b4

08008c50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2243      	movs	r2, #67	@ 0x43
 8008c5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008c5e:	4b03      	ldr	r3, [pc, #12]	@ (8008c6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	20000070 	.word	0x20000070

08008c70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2243      	movs	r2, #67	@ 0x43
 8008c7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008c7e:	4b03      	ldr	r3, [pc, #12]	@ (8008c8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bc80      	pop	{r7}
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	200000f8 	.word	0x200000f8

08008c90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	220a      	movs	r2, #10
 8008c9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008c9e:	4b03      	ldr	r3, [pc, #12]	@ (8008cac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bc80      	pop	{r7}
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	2000002c 	.word	0x2000002c

08008cb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008cba:	2302      	movs	r3, #2
 8008cbc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d005      	beq.n	8008cd0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr

08008cdc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cf0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008cfa:	88fa      	ldrh	r2, [r7, #6]
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr

08008d0e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d1e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bc80      	pop	{r7}
 8008d32:	4770      	bx	lr

08008d34 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01c      	beq.n	8008d88 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d115      	bne.n	8008d84 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	2181      	movs	r1, #129	@ 0x81
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 fcc1 	bl	800a702 <USBD_LL_Transmit>

      return USBD_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	e002      	b.n	8008d8a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e000      	b.n	8008d8a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008d88:	2302      	movs	r3, #2
  }
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d017      	beq.n	8008ddc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	7c1b      	ldrb	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d109      	bne.n	8008dc8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 fcc1 	bl	800a748 <USBD_LL_PrepareReceive>
 8008dc6:	e007      	b.n	8008dd8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dce:	2340      	movs	r3, #64	@ 0x40
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 fcb8 	bl	800a748 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e000      	b.n	8008dde <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008ddc:	2302      	movs	r3, #2
  }
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	4613      	mov	r3, r2
 8008df2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	e01a      	b.n	8008e34 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	79fa      	ldrb	r2, [r7, #7]
 8008e2a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f001 fb25 	bl	800a47c <USBD_LL_Init>

  return USBD_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d006      	beq.n	8008e5e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73fb      	strb	r3, [r7, #15]
 8008e5c:	e001      	b.n	8008e62 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bc80      	pop	{r7}
 8008e6c:	4770      	bx	lr

08008e6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f001 fb5a 	bl	800a530 <USBD_LL_Start>

  return USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bc80      	pop	{r7}
 8008e98:	4770      	bx	lr

08008e9a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00c      	beq.n	8008ece <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	78fa      	ldrb	r2, [r7, #3]
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	4798      	blx	r3
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	4611      	mov	r1, r2
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	4798      	blx	r3

  return USBD_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 fed8 	bl	8009cc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f24:	461a      	mov	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f32:	f003 031f 	and.w	r3, r3, #31
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d016      	beq.n	8008f68 <USBD_LL_SetupStage+0x6a>
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d81c      	bhi.n	8008f78 <USBD_LL_SetupStage+0x7a>
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <USBD_LL_SetupStage+0x4a>
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d008      	beq.n	8008f58 <USBD_LL_SetupStage+0x5a>
 8008f46:	e017      	b.n	8008f78 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f9cb 	bl	80092ec <USBD_StdDevReq>
      break;
 8008f56:	e01a      	b.n	8008f8e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fa2d 	bl	80093c0 <USBD_StdItfReq>
      break;
 8008f66:	e012      	b.n	8008f8e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fa6d 	bl	8009450 <USBD_StdEPReq>
      break;
 8008f76:	e00a      	b.n	8008f8e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fb32 	bl	800a5f0 <USBD_LL_StallEP>
      break;
 8008f8c:	bf00      	nop
  }

  return USBD_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fa6:	7afb      	ldrb	r3, [r7, #11]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d14b      	bne.n	8009044 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008fb2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d134      	bne.n	8009028 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d919      	bls.n	8008ffe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	1ad2      	subs	r2, r2, r3
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d203      	bcs.n	8008fec <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	e002      	b.n	8008ff2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 ff54 	bl	8009ea4 <USBD_CtlContinueRx>
 8008ffc:	e038      	b.n	8009070 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009010:	2b03      	cmp	r3, #3
 8009012:	d105      	bne.n	8009020 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 ff51 	bl	8009ec8 <USBD_CtlSendStatus>
 8009026:	e023      	b.n	8009070 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800902e:	2b05      	cmp	r3, #5
 8009030:	d11e      	bne.n	8009070 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800903a:	2100      	movs	r1, #0
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f001 fad7 	bl	800a5f0 <USBD_LL_StallEP>
 8009042:	e015      	b.n	8009070 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00d      	beq.n	800906c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009056:	2b03      	cmp	r3, #3
 8009058:	d108      	bne.n	800906c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	7afa      	ldrb	r2, [r7, #11]
 8009064:	4611      	mov	r1, r2
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	4798      	blx	r3
 800906a:	e001      	b.n	8009070 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800906c:	2302      	movs	r3, #2
 800906e:	e000      	b.n	8009072 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b086      	sub	sp, #24
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	460b      	mov	r3, r1
 8009084:	607a      	str	r2, [r7, #4]
 8009086:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009088:	7afb      	ldrb	r3, [r7, #11]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d17f      	bne.n	800918e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3314      	adds	r3, #20
 8009092:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800909a:	2b02      	cmp	r3, #2
 800909c:	d15c      	bne.n	8009158 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d915      	bls.n	80090d6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	1ad2      	subs	r2, r2, r3
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 febe 	bl	8009e44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090c8:	2300      	movs	r3, #0
 80090ca:	2200      	movs	r2, #0
 80090cc:	2100      	movs	r1, #0
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f001 fb3a 	bl	800a748 <USBD_LL_PrepareReceive>
 80090d4:	e04e      	b.n	8009174 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	6912      	ldr	r2, [r2, #16]
 80090de:	fbb3 f1f2 	udiv	r1, r3, r2
 80090e2:	fb01 f202 	mul.w	r2, r1, r2
 80090e6:	1a9b      	subs	r3, r3, r2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d11c      	bne.n	8009126 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	689a      	ldr	r2, [r3, #8]
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d316      	bcc.n	8009126 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009102:	429a      	cmp	r2, r3
 8009104:	d20f      	bcs.n	8009126 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009106:	2200      	movs	r2, #0
 8009108:	2100      	movs	r1, #0
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 fe9a 	bl	8009e44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009118:	2300      	movs	r3, #0
 800911a:	2200      	movs	r2, #0
 800911c:	2100      	movs	r1, #0
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f001 fb12 	bl	800a748 <USBD_LL_PrepareReceive>
 8009124:	e026      	b.n	8009174 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009138:	2b03      	cmp	r3, #3
 800913a:	d105      	bne.n	8009148 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009148:	2180      	movs	r1, #128	@ 0x80
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f001 fa50 	bl	800a5f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 fecc 	bl	8009eee <USBD_CtlReceiveStatus>
 8009156:	e00d      	b.n	8009174 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800915e:	2b04      	cmp	r3, #4
 8009160:	d004      	beq.n	800916c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009168:	2b00      	cmp	r3, #0
 800916a:	d103      	bne.n	8009174 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800916c:	2180      	movs	r1, #128	@ 0x80
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f001 fa3e 	bl	800a5f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800917a:	2b01      	cmp	r3, #1
 800917c:	d11d      	bne.n	80091ba <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff fe81 	bl	8008e86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800918c:	e015      	b.n	80091ba <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00d      	beq.n	80091b6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d108      	bne.n	80091b6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	7afa      	ldrb	r2, [r7, #11]
 80091ae:	4611      	mov	r1, r2
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	4798      	blx	r3
 80091b4:	e001      	b.n	80091ba <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091b6:	2302      	movs	r3, #2
 80091b8:	e000      	b.n	80091bc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091cc:	2340      	movs	r3, #64	@ 0x40
 80091ce:	2200      	movs	r2, #0
 80091d0:	2100      	movs	r1, #0
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 f9c7 	bl	800a566 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2240      	movs	r2, #64	@ 0x40
 80091e4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091e8:	2340      	movs	r3, #64	@ 0x40
 80091ea:	2200      	movs	r2, #0
 80091ec:	2180      	movs	r1, #128	@ 0x80
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 f9b9 	bl	800a566 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2240      	movs	r2, #64	@ 0x40
 80091fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009224:	2b00      	cmp	r3, #0
 8009226:	d009      	beq.n	800923c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	6852      	ldr	r2, [r2, #4]
 8009234:	b2d2      	uxtb	r2, r2
 8009236:	4611      	mov	r1, r2
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	4798      	blx	r3
  }

  return USBD_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	460b      	mov	r3, r1
 8009250:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	78fa      	ldrb	r2, [r7, #3]
 8009256:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	bc80      	pop	{r7}
 8009262:	4770      	bx	lr

08009264 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2204      	movs	r2, #4
 800927c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	bc80      	pop	{r7}
 800928a:	4770      	bx	lr

0800928c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800929a:	2b04      	cmp	r3, #4
 800929c:	d105      	bne.n	80092aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr

080092b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d10b      	bne.n	80092e0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ce:	69db      	ldr	r3, [r3, #28]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d005      	beq.n	80092e0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009302:	2b40      	cmp	r3, #64	@ 0x40
 8009304:	d005      	beq.n	8009312 <USBD_StdDevReq+0x26>
 8009306:	2b40      	cmp	r3, #64	@ 0x40
 8009308:	d84f      	bhi.n	80093aa <USBD_StdDevReq+0xbe>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d009      	beq.n	8009322 <USBD_StdDevReq+0x36>
 800930e:	2b20      	cmp	r3, #32
 8009310:	d14b      	bne.n	80093aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	4798      	blx	r3
      break;
 8009320:	e048      	b.n	80093b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b09      	cmp	r3, #9
 8009328:	d839      	bhi.n	800939e <USBD_StdDevReq+0xb2>
 800932a:	a201      	add	r2, pc, #4	@ (adr r2, 8009330 <USBD_StdDevReq+0x44>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	08009381 	.word	0x08009381
 8009334:	08009395 	.word	0x08009395
 8009338:	0800939f 	.word	0x0800939f
 800933c:	0800938b 	.word	0x0800938b
 8009340:	0800939f 	.word	0x0800939f
 8009344:	08009363 	.word	0x08009363
 8009348:	08009359 	.word	0x08009359
 800934c:	0800939f 	.word	0x0800939f
 8009350:	08009377 	.word	0x08009377
 8009354:	0800936d 	.word	0x0800936d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f9dc 	bl	8009718 <USBD_GetDescriptor>
          break;
 8009360:	e022      	b.n	80093a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fb3f 	bl	80099e8 <USBD_SetAddress>
          break;
 800936a:	e01d      	b.n	80093a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fb7e 	bl	8009a70 <USBD_SetConfig>
          break;
 8009374:	e018      	b.n	80093a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fc07 	bl	8009b8c <USBD_GetConfig>
          break;
 800937e:	e013      	b.n	80093a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fc37 	bl	8009bf6 <USBD_GetStatus>
          break;
 8009388:	e00e      	b.n	80093a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fc65 	bl	8009c5c <USBD_SetFeature>
          break;
 8009392:	e009      	b.n	80093a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fc74 	bl	8009c84 <USBD_ClrFeature>
          break;
 800939c:	e004      	b.n	80093a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fcc9 	bl	8009d38 <USBD_CtlError>
          break;
 80093a6:	bf00      	nop
      }
      break;
 80093a8:	e004      	b.n	80093b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fcc3 	bl	8009d38 <USBD_CtlError>
      break;
 80093b2:	bf00      	nop
  }

  return ret;
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop

080093c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093d6:	2b40      	cmp	r3, #64	@ 0x40
 80093d8:	d005      	beq.n	80093e6 <USBD_StdItfReq+0x26>
 80093da:	2b40      	cmp	r3, #64	@ 0x40
 80093dc:	d82e      	bhi.n	800943c <USBD_StdItfReq+0x7c>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <USBD_StdItfReq+0x26>
 80093e2:	2b20      	cmp	r3, #32
 80093e4:	d12a      	bne.n	800943c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ec:	3b01      	subs	r3, #1
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d81d      	bhi.n	800942e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	889b      	ldrh	r3, [r3, #4]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d813      	bhi.n	8009424 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	4798      	blx	r3
 800940a:	4603      	mov	r3, r0
 800940c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	88db      	ldrh	r3, [r3, #6]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d110      	bne.n	8009438 <USBD_StdItfReq+0x78>
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10d      	bne.n	8009438 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fd53 	bl	8009ec8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009422:	e009      	b.n	8009438 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fc86 	bl	8009d38 <USBD_CtlError>
          break;
 800942c:	e004      	b.n	8009438 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fc81 	bl	8009d38 <USBD_CtlError>
          break;
 8009436:	e000      	b.n	800943a <USBD_StdItfReq+0x7a>
          break;
 8009438:	bf00      	nop
      }
      break;
 800943a:	e004      	b.n	8009446 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fc7a 	bl	8009d38 <USBD_CtlError>
      break;
 8009444:	bf00      	nop
  }

  return USBD_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	889b      	ldrh	r3, [r3, #4]
 8009462:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800946c:	2b40      	cmp	r3, #64	@ 0x40
 800946e:	d007      	beq.n	8009480 <USBD_StdEPReq+0x30>
 8009470:	2b40      	cmp	r3, #64	@ 0x40
 8009472:	f200 8146 	bhi.w	8009702 <USBD_StdEPReq+0x2b2>
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <USBD_StdEPReq+0x40>
 800947a:	2b20      	cmp	r3, #32
 800947c:	f040 8141 	bne.w	8009702 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	4798      	blx	r3
      break;
 800948e:	e13d      	b.n	800970c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009498:	2b20      	cmp	r3, #32
 800949a:	d10a      	bne.n	80094b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	4798      	blx	r3
 80094aa:	4603      	mov	r3, r0
 80094ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	e12d      	b.n	800970e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d007      	beq.n	80094ca <USBD_StdEPReq+0x7a>
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	f300 811b 	bgt.w	80096f6 <USBD_StdEPReq+0x2a6>
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d072      	beq.n	80095aa <USBD_StdEPReq+0x15a>
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d03a      	beq.n	800953e <USBD_StdEPReq+0xee>
 80094c8:	e115      	b.n	80096f6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d002      	beq.n	80094da <USBD_StdEPReq+0x8a>
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d015      	beq.n	8009504 <USBD_StdEPReq+0xb4>
 80094d8:	e02b      	b.n	8009532 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00c      	beq.n	80094fa <USBD_StdEPReq+0xaa>
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b80      	cmp	r3, #128	@ 0x80
 80094e4:	d009      	beq.n	80094fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 f880 	bl	800a5f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094f0:	2180      	movs	r1, #128	@ 0x80
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 f87c 	bl	800a5f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094f8:	e020      	b.n	800953c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fc1b 	bl	8009d38 <USBD_CtlError>
              break;
 8009502:	e01b      	b.n	800953c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	885b      	ldrh	r3, [r3, #2]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10e      	bne.n	800952a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00b      	beq.n	800952a <USBD_StdEPReq+0xda>
 8009512:	7bbb      	ldrb	r3, [r7, #14]
 8009514:	2b80      	cmp	r3, #128	@ 0x80
 8009516:	d008      	beq.n	800952a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	88db      	ldrh	r3, [r3, #6]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d104      	bne.n	800952a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 f863 	bl	800a5f0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fccc 	bl	8009ec8 <USBD_CtlSendStatus>

              break;
 8009530:	e004      	b.n	800953c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fbff 	bl	8009d38 <USBD_CtlError>
              break;
 800953a:	bf00      	nop
          }
          break;
 800953c:	e0e0      	b.n	8009700 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009544:	2b02      	cmp	r3, #2
 8009546:	d002      	beq.n	800954e <USBD_StdEPReq+0xfe>
 8009548:	2b03      	cmp	r3, #3
 800954a:	d015      	beq.n	8009578 <USBD_StdEPReq+0x128>
 800954c:	e026      	b.n	800959c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00c      	beq.n	800956e <USBD_StdEPReq+0x11e>
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	2b80      	cmp	r3, #128	@ 0x80
 8009558:	d009      	beq.n	800956e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 f846 	bl	800a5f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009564:	2180      	movs	r1, #128	@ 0x80
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 f842 	bl	800a5f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800956c:	e01c      	b.n	80095a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fbe1 	bl	8009d38 <USBD_CtlError>
              break;
 8009576:	e017      	b.n	80095a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	885b      	ldrh	r3, [r3, #2]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d112      	bne.n	80095a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009586:	2b00      	cmp	r3, #0
 8009588:	d004      	beq.n	8009594 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 f84d 	bl	800a62e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fc97 	bl	8009ec8 <USBD_CtlSendStatus>
              }
              break;
 800959a:	e004      	b.n	80095a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fbca 	bl	8009d38 <USBD_CtlError>
              break;
 80095a4:	e000      	b.n	80095a8 <USBD_StdEPReq+0x158>
              break;
 80095a6:	bf00      	nop
          }
          break;
 80095a8:	e0aa      	b.n	8009700 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d002      	beq.n	80095ba <USBD_StdEPReq+0x16a>
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d032      	beq.n	800961e <USBD_StdEPReq+0x1ce>
 80095b8:	e097      	b.n	80096ea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d007      	beq.n	80095d0 <USBD_StdEPReq+0x180>
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	2b80      	cmp	r3, #128	@ 0x80
 80095c4:	d004      	beq.n	80095d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fbb5 	bl	8009d38 <USBD_CtlError>
                break;
 80095ce:	e091      	b.n	80096f4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	da0b      	bge.n	80095f0 <USBD_StdEPReq+0x1a0>
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	3310      	adds	r3, #16
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	4413      	add	r3, r2
 80095ec:	3304      	adds	r3, #4
 80095ee:	e00b      	b.n	8009608 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	4413      	add	r3, r2
 8009606:	3304      	adds	r3, #4
 8009608:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2200      	movs	r2, #0
 800960e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2202      	movs	r2, #2
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fbf8 	bl	8009e0c <USBD_CtlSendData>
              break;
 800961c:	e06a      	b.n	80096f4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800961e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009622:	2b00      	cmp	r3, #0
 8009624:	da11      	bge.n	800964a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009626:	7bbb      	ldrb	r3, [r7, #14]
 8009628:	f003 020f 	and.w	r2, r3, #15
 800962c:	6879      	ldr	r1, [r7, #4]
 800962e:	4613      	mov	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	440b      	add	r3, r1
 8009638:	3318      	adds	r3, #24
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d117      	bne.n	8009670 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fb78 	bl	8009d38 <USBD_CtlError>
                  break;
 8009648:	e054      	b.n	80096f4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	f003 020f 	and.w	r2, r3, #15
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	4613      	mov	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	440b      	add	r3, r1
 800965c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d104      	bne.n	8009670 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fb65 	bl	8009d38 <USBD_CtlError>
                  break;
 800966e:	e041      	b.n	80096f4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009674:	2b00      	cmp	r3, #0
 8009676:	da0b      	bge.n	8009690 <USBD_StdEPReq+0x240>
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	3310      	adds	r3, #16
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	4413      	add	r3, r2
 800968c:	3304      	adds	r3, #4
 800968e:	e00b      	b.n	80096a8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009690:	7bbb      	ldrb	r3, [r7, #14]
 8009692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	4413      	add	r3, r2
 80096a6:	3304      	adds	r3, #4
 80096a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <USBD_StdEPReq+0x266>
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	2b80      	cmp	r3, #128	@ 0x80
 80096b4:	d103      	bne.n	80096be <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	e00e      	b.n	80096dc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 ffd2 	bl	800a66c <USBD_LL_IsStallEP>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2201      	movs	r2, #1
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	e002      	b.n	80096dc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2202      	movs	r2, #2
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fb92 	bl	8009e0c <USBD_CtlSendData>
              break;
 80096e8:	e004      	b.n	80096f4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fb23 	bl	8009d38 <USBD_CtlError>
              break;
 80096f2:	bf00      	nop
          }
          break;
 80096f4:	e004      	b.n	8009700 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fb1d 	bl	8009d38 <USBD_CtlError>
          break;
 80096fe:	bf00      	nop
      }
      break;
 8009700:	e004      	b.n	800970c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fb17 	bl	8009d38 <USBD_CtlError>
      break;
 800970a:	bf00      	nop
  }

  return ret;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	885b      	ldrh	r3, [r3, #2]
 8009732:	0a1b      	lsrs	r3, r3, #8
 8009734:	b29b      	uxth	r3, r3
 8009736:	3b01      	subs	r3, #1
 8009738:	2b06      	cmp	r3, #6
 800973a:	f200 8128 	bhi.w	800998e <USBD_GetDescriptor+0x276>
 800973e:	a201      	add	r2, pc, #4	@ (adr r2, 8009744 <USBD_GetDescriptor+0x2c>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	08009761 	.word	0x08009761
 8009748:	08009779 	.word	0x08009779
 800974c:	080097b9 	.word	0x080097b9
 8009750:	0800998f 	.word	0x0800998f
 8009754:	0800998f 	.word	0x0800998f
 8009758:	0800992f 	.word	0x0800992f
 800975c:	0800995b 	.word	0x0800995b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	7c12      	ldrb	r2, [r2, #16]
 800976c:	f107 0108 	add.w	r1, r7, #8
 8009770:	4610      	mov	r0, r2
 8009772:	4798      	blx	r3
 8009774:	60f8      	str	r0, [r7, #12]
      break;
 8009776:	e112      	b.n	800999e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	7c1b      	ldrb	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10d      	bne.n	800979c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009788:	f107 0208 	add.w	r2, r7, #8
 800978c:	4610      	mov	r0, r2
 800978e:	4798      	blx	r3
 8009790:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3301      	adds	r3, #1
 8009796:	2202      	movs	r2, #2
 8009798:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800979a:	e100      	b.n	800999e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a4:	f107 0208 	add.w	r2, r7, #8
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	2202      	movs	r2, #2
 80097b4:	701a      	strb	r2, [r3, #0]
      break;
 80097b6:	e0f2      	b.n	800999e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	885b      	ldrh	r3, [r3, #2]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b05      	cmp	r3, #5
 80097c0:	f200 80ac 	bhi.w	800991c <USBD_GetDescriptor+0x204>
 80097c4:	a201      	add	r2, pc, #4	@ (adr r2, 80097cc <USBD_GetDescriptor+0xb4>)
 80097c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ca:	bf00      	nop
 80097cc:	080097e5 	.word	0x080097e5
 80097d0:	08009819 	.word	0x08009819
 80097d4:	0800984d 	.word	0x0800984d
 80097d8:	08009881 	.word	0x08009881
 80097dc:	080098b5 	.word	0x080098b5
 80097e0:	080098e9 	.word	0x080098e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00b      	beq.n	8009808 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	7c12      	ldrb	r2, [r2, #16]
 80097fc:	f107 0108 	add.w	r1, r7, #8
 8009800:	4610      	mov	r0, r2
 8009802:	4798      	blx	r3
 8009804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009806:	e091      	b.n	800992c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fa94 	bl	8009d38 <USBD_CtlError>
            err++;
 8009810:	7afb      	ldrb	r3, [r7, #11]
 8009812:	3301      	adds	r3, #1
 8009814:	72fb      	strb	r3, [r7, #11]
          break;
 8009816:	e089      	b.n	800992c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	7c12      	ldrb	r2, [r2, #16]
 8009830:	f107 0108 	add.w	r1, r7, #8
 8009834:	4610      	mov	r0, r2
 8009836:	4798      	blx	r3
 8009838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800983a:	e077      	b.n	800992c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa7a 	bl	8009d38 <USBD_CtlError>
            err++;
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	3301      	adds	r3, #1
 8009848:	72fb      	strb	r3, [r7, #11]
          break;
 800984a:	e06f      	b.n	800992c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	7c12      	ldrb	r2, [r2, #16]
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	4610      	mov	r0, r2
 800986a:	4798      	blx	r3
 800986c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800986e:	e05d      	b.n	800992c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa60 	bl	8009d38 <USBD_CtlError>
            err++;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	3301      	adds	r3, #1
 800987c:	72fb      	strb	r3, [r7, #11]
          break;
 800987e:	e055      	b.n	800992c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	7c12      	ldrb	r2, [r2, #16]
 8009898:	f107 0108 	add.w	r1, r7, #8
 800989c:	4610      	mov	r0, r2
 800989e:	4798      	blx	r3
 80098a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098a2:	e043      	b.n	800992c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa46 	bl	8009d38 <USBD_CtlError>
            err++;
 80098ac:	7afb      	ldrb	r3, [r7, #11]
 80098ae:	3301      	adds	r3, #1
 80098b0:	72fb      	strb	r3, [r7, #11]
          break;
 80098b2:	e03b      	b.n	800992c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7c12      	ldrb	r2, [r2, #16]
 80098cc:	f107 0108 	add.w	r1, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098d6:	e029      	b.n	800992c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa2c 	bl	8009d38 <USBD_CtlError>
            err++;
 80098e0:	7afb      	ldrb	r3, [r7, #11]
 80098e2:	3301      	adds	r3, #1
 80098e4:	72fb      	strb	r3, [r7, #11]
          break;
 80098e6:	e021      	b.n	800992c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7c12      	ldrb	r2, [r2, #16]
 8009900:	f107 0108 	add.w	r1, r7, #8
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
 8009908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800990a:	e00f      	b.n	800992c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa12 	bl	8009d38 <USBD_CtlError>
            err++;
 8009914:	7afb      	ldrb	r3, [r7, #11]
 8009916:	3301      	adds	r3, #1
 8009918:	72fb      	strb	r3, [r7, #11]
          break;
 800991a:	e007      	b.n	800992c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fa0a 	bl	8009d38 <USBD_CtlError>
          err++;
 8009924:	7afb      	ldrb	r3, [r7, #11]
 8009926:	3301      	adds	r3, #1
 8009928:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800992a:	e038      	b.n	800999e <USBD_GetDescriptor+0x286>
 800992c:	e037      	b.n	800999e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7c1b      	ldrb	r3, [r3, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d109      	bne.n	800994a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800993c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800993e:	f107 0208 	add.w	r2, r7, #8
 8009942:	4610      	mov	r0, r2
 8009944:	4798      	blx	r3
 8009946:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009948:	e029      	b.n	800999e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f9f3 	bl	8009d38 <USBD_CtlError>
        err++;
 8009952:	7afb      	ldrb	r3, [r7, #11]
 8009954:	3301      	adds	r3, #1
 8009956:	72fb      	strb	r3, [r7, #11]
      break;
 8009958:	e021      	b.n	800999e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	7c1b      	ldrb	r3, [r3, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10d      	bne.n	800997e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996a:	f107 0208 	add.w	r2, r7, #8
 800996e:	4610      	mov	r0, r2
 8009970:	4798      	blx	r3
 8009972:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	2207      	movs	r2, #7
 800997a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800997c:	e00f      	b.n	800999e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f9d9 	bl	8009d38 <USBD_CtlError>
        err++;
 8009986:	7afb      	ldrb	r3, [r7, #11]
 8009988:	3301      	adds	r3, #1
 800998a:	72fb      	strb	r3, [r7, #11]
      break;
 800998c:	e007      	b.n	800999e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f9d1 	bl	8009d38 <USBD_CtlError>
      err++;
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	3301      	adds	r3, #1
 800999a:	72fb      	strb	r3, [r7, #11]
      break;
 800999c:	bf00      	nop
  }

  if (err != 0U)
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d11c      	bne.n	80099de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099a4:	893b      	ldrh	r3, [r7, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d011      	beq.n	80099ce <USBD_GetDescriptor+0x2b6>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	88db      	ldrh	r3, [r3, #6]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00d      	beq.n	80099ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	88da      	ldrh	r2, [r3, #6]
 80099b6:	893b      	ldrh	r3, [r7, #8]
 80099b8:	4293      	cmp	r3, r2
 80099ba:	bf28      	it	cs
 80099bc:	4613      	movcs	r3, r2
 80099be:	b29b      	uxth	r3, r3
 80099c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099c2:	893b      	ldrh	r3, [r7, #8]
 80099c4:	461a      	mov	r2, r3
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa1f 	bl	8009e0c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	88db      	ldrh	r3, [r3, #6]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d104      	bne.n	80099e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fa76 	bl	8009ec8 <USBD_CtlSendStatus>
 80099dc:	e000      	b.n	80099e0 <USBD_GetDescriptor+0x2c8>
    return;
 80099de:	bf00      	nop
    }
  }
}
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop

080099e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	889b      	ldrh	r3, [r3, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d130      	bne.n	8009a5c <USBD_SetAddress+0x74>
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	88db      	ldrh	r3, [r3, #6]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d12c      	bne.n	8009a5c <USBD_SetAddress+0x74>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	885b      	ldrh	r3, [r3, #2]
 8009a06:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a08:	d828      	bhi.n	8009a5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	885b      	ldrh	r3, [r3, #2]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d104      	bne.n	8009a2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f988 	bl	8009d38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a28:	e01d      	b.n	8009a66 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	7bfa      	ldrb	r2, [r7, #15]
 8009a2e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fe44 	bl	800a6c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fa43 	bl	8009ec8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d004      	beq.n	8009a52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a50:	e009      	b.n	8009a66 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a5a:	e004      	b.n	8009a66 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f96a 	bl	8009d38 <USBD_CtlError>
  }
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	885b      	ldrh	r3, [r3, #2]
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	4b41      	ldr	r3, [pc, #260]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009a82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a84:	4b40      	ldr	r3, [pc, #256]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d904      	bls.n	8009a96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f952 	bl	8009d38 <USBD_CtlError>
 8009a94:	e075      	b.n	8009b82 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d002      	beq.n	8009aa6 <USBD_SetConfig+0x36>
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d023      	beq.n	8009aec <USBD_SetConfig+0x7c>
 8009aa4:	e062      	b.n	8009b6c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009aa6:	4b38      	ldr	r3, [pc, #224]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01a      	beq.n	8009ae4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009aae:	4b36      	ldr	r3, [pc, #216]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2203      	movs	r2, #3
 8009abc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ac0:	4b31      	ldr	r3, [pc, #196]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff f9e7 	bl	8008e9a <USBD_SetClassConfig>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d104      	bne.n	8009adc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f92f 	bl	8009d38 <USBD_CtlError>
            return;
 8009ada:	e052      	b.n	8009b82 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f9f3 	bl	8009ec8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ae2:	e04e      	b.n	8009b82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f9ef 	bl	8009ec8 <USBD_CtlSendStatus>
        break;
 8009aea:	e04a      	b.n	8009b82 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009aec:	4b26      	ldr	r3, [pc, #152]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d112      	bne.n	8009b1a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009afc:	4b22      	ldr	r3, [pc, #136]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	461a      	mov	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b06:	4b20      	ldr	r3, [pc, #128]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7ff f9e3 	bl	8008ed8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f9d8 	bl	8009ec8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b18:	e033      	b.n	8009b82 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d01d      	beq.n	8009b64 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7ff f9d1 	bl	8008ed8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b36:	4b14      	ldr	r3, [pc, #80]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b40:	4b11      	ldr	r3, [pc, #68]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff f9a7 	bl	8008e9a <USBD_SetClassConfig>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d104      	bne.n	8009b5c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f8ef 	bl	8009d38 <USBD_CtlError>
            return;
 8009b5a:	e012      	b.n	8009b82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f9b3 	bl	8009ec8 <USBD_CtlSendStatus>
        break;
 8009b62:	e00e      	b.n	8009b82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f9af 	bl	8009ec8 <USBD_CtlSendStatus>
        break;
 8009b6a:	e00a      	b.n	8009b82 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f8e2 	bl	8009d38 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b74:	4b04      	ldr	r3, [pc, #16]	@ (8009b88 <USBD_SetConfig+0x118>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff f9ac 	bl	8008ed8 <USBD_ClrClassConfig>
        break;
 8009b80:	bf00      	nop
    }
  }
}
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	200006e8 	.word	0x200006e8

08009b8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	88db      	ldrh	r3, [r3, #6]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d004      	beq.n	8009ba8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f8c9 	bl	8009d38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ba6:	e022      	b.n	8009bee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	dc02      	bgt.n	8009bb8 <USBD_GetConfig+0x2c>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dc03      	bgt.n	8009bbe <USBD_GetConfig+0x32>
 8009bb6:	e015      	b.n	8009be4 <USBD_GetConfig+0x58>
 8009bb8:	2b03      	cmp	r3, #3
 8009bba:	d00b      	beq.n	8009bd4 <USBD_GetConfig+0x48>
 8009bbc:	e012      	b.n	8009be4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	2201      	movs	r2, #1
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f91d 	bl	8009e0c <USBD_CtlSendData>
        break;
 8009bd2:	e00c      	b.n	8009bee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	2201      	movs	r2, #1
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f915 	bl	8009e0c <USBD_CtlSendData>
        break;
 8009be2:	e004      	b.n	8009bee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f8a6 	bl	8009d38 <USBD_CtlError>
        break;
 8009bec:	bf00      	nop
}
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c06:	3b01      	subs	r3, #1
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d81e      	bhi.n	8009c4a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	88db      	ldrh	r3, [r3, #6]
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d004      	beq.n	8009c1e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f88e 	bl	8009d38 <USBD_CtlError>
        break;
 8009c1c:	e01a      	b.n	8009c54 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d005      	beq.n	8009c3a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f043 0202 	orr.w	r2, r3, #2
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	330c      	adds	r3, #12
 8009c3e:	2202      	movs	r2, #2
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f8e2 	bl	8009e0c <USBD_CtlSendData>
      break;
 8009c48:	e004      	b.n	8009c54 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f873 	bl	8009d38 <USBD_CtlError>
      break;
 8009c52:	bf00      	nop
  }
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	885b      	ldrh	r3, [r3, #2]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d106      	bne.n	8009c7c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f926 	bl	8009ec8 <USBD_CtlSendStatus>
  }
}
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c94:	3b01      	subs	r3, #1
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d80b      	bhi.n	8009cb2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	885b      	ldrh	r3, [r3, #2]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d10c      	bne.n	8009cbc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f90c 	bl	8009ec8 <USBD_CtlSendStatus>
      }
      break;
 8009cb0:	e004      	b.n	8009cbc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f83f 	bl	8009d38 <USBD_CtlError>
      break;
 8009cba:	e000      	b.n	8009cbe <USBD_ClrFeature+0x3a>
      break;
 8009cbc:	bf00      	nop
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	781a      	ldrb	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	785a      	ldrb	r2, [r3, #1]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	3302      	adds	r3, #2
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	3303      	adds	r3, #3
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	021b      	lsls	r3, r3, #8
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	3305      	adds	r3, #5
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4413      	add	r3, r2
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	3306      	adds	r3, #6
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	3307      	adds	r3, #7
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	021b      	lsls	r3, r3, #8
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	4413      	add	r3, r2
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	80da      	strh	r2, [r3, #6]

}
 8009d2e:	bf00      	nop
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bc80      	pop	{r7}
 8009d36:	4770      	bx	lr

08009d38 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d42:	2180      	movs	r1, #128	@ 0x80
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fc53 	bl	800a5f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fc4f 	bl	800a5f0 <USBD_LL_StallEP>
}
 8009d52:	bf00      	nop
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b086      	sub	sp, #24
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d032      	beq.n	8009dd6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f834 	bl	8009dde <USBD_GetLen>
 8009d76:	4603      	mov	r3, r0
 8009d78:	3301      	adds	r3, #1
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	1c5a      	adds	r2, r3, #1
 8009d88:	75fa      	strb	r2, [r7, #23]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4413      	add	r3, r2
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	7812      	ldrb	r2, [r2, #0]
 8009d94:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	75fa      	strb	r2, [r7, #23]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	4413      	add	r3, r2
 8009da2:	2203      	movs	r2, #3
 8009da4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009da6:	e012      	b.n	8009dce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	60fa      	str	r2, [r7, #12]
 8009dae:	7dfa      	ldrb	r2, [r7, #23]
 8009db0:	1c51      	adds	r1, r2, #1
 8009db2:	75f9      	strb	r1, [r7, #23]
 8009db4:	4611      	mov	r1, r2
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	440a      	add	r2, r1
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	75fa      	strb	r2, [r7, #23]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	4413      	add	r3, r2
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e8      	bne.n	8009da8 <USBD_GetString+0x4e>
    }
  }
}
 8009dd6:	bf00      	nop
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009dea:	e005      	b.n	8009df8 <USBD_GetLen+0x1a>
  {
    len++;
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	3301      	adds	r3, #1
 8009df0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3301      	adds	r3, #1
 8009df6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1f5      	bne.n	8009dec <USBD_GetLen+0xe>
  }

  return len;
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr

08009e0c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	4613      	mov	r3, r2
 8009e18:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e22:	88fa      	ldrh	r2, [r7, #6]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e28:	88fa      	ldrh	r2, [r7, #6]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e2e:	88fb      	ldrh	r3, [r7, #6]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	2100      	movs	r1, #0
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f000 fc64 	bl	800a702 <USBD_LL_Transmit>

  return USBD_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e52:	88fb      	ldrh	r3, [r7, #6]
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	2100      	movs	r1, #0
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 fc52 	bl	800a702 <USBD_LL_Transmit>

  return USBD_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	4613      	mov	r3, r2
 8009e74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2203      	movs	r2, #3
 8009e7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e7e:	88fa      	ldrh	r2, [r7, #6]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e86:	88fa      	ldrh	r2, [r7, #6]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e8e:	88fb      	ldrh	r3, [r7, #6]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	2100      	movs	r1, #0
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f000 fc57 	bl	800a748 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eb2:	88fb      	ldrh	r3, [r7, #6]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 fc45 	bl	800a748 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2204      	movs	r2, #4
 8009ed4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2200      	movs	r2, #0
 8009edc:	2100      	movs	r1, #0
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fc0f 	bl	800a702 <USBD_LL_Transmit>

  return USBD_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2205      	movs	r2, #5
 8009efa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009efe:	2300      	movs	r3, #0
 8009f00:	2200      	movs	r2, #0
 8009f02:	2100      	movs	r1, #0
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fc1f 	bl	800a748 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	4912      	ldr	r1, [pc, #72]	@ (8009f64 <MX_USB_DEVICE_Init+0x50>)
 8009f1c:	4812      	ldr	r0, [pc, #72]	@ (8009f68 <MX_USB_DEVICE_Init+0x54>)
 8009f1e:	f7fe ff62 	bl	8008de6 <USBD_Init>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f28:	f7f7 faca 	bl	80014c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f2c:	490f      	ldr	r1, [pc, #60]	@ (8009f6c <MX_USB_DEVICE_Init+0x58>)
 8009f2e:	480e      	ldr	r0, [pc, #56]	@ (8009f68 <MX_USB_DEVICE_Init+0x54>)
 8009f30:	f7fe ff84 	bl	8008e3c <USBD_RegisterClass>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f3a:	f7f7 fac1 	bl	80014c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f3e:	490c      	ldr	r1, [pc, #48]	@ (8009f70 <MX_USB_DEVICE_Init+0x5c>)
 8009f40:	4809      	ldr	r0, [pc, #36]	@ (8009f68 <MX_USB_DEVICE_Init+0x54>)
 8009f42:	f7fe feb5 	bl	8008cb0 <USBD_CDC_RegisterInterface>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f4c:	f7f7 fab8 	bl	80014c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f50:	4805      	ldr	r0, [pc, #20]	@ (8009f68 <MX_USB_DEVICE_Init+0x54>)
 8009f52:	f7fe ff8c 	bl	8008e6e <USBD_Start>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f5c:	f7f7 fab0 	bl	80014c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f60:	bf00      	nop
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	2000014c 	.word	0x2000014c
 8009f68:	200006ec 	.word	0x200006ec
 8009f6c:	20000038 	.word	0x20000038
 8009f70:	2000013c 	.word	0x2000013c

08009f74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4905      	ldr	r1, [pc, #20]	@ (8009f90 <CDC_Init_FS+0x1c>)
 8009f7c:	4805      	ldr	r0, [pc, #20]	@ (8009f94 <CDC_Init_FS+0x20>)
 8009f7e:	f7fe fead 	bl	8008cdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f82:	4905      	ldr	r1, [pc, #20]	@ (8009f98 <CDC_Init_FS+0x24>)
 8009f84:	4803      	ldr	r0, [pc, #12]	@ (8009f94 <CDC_Init_FS+0x20>)
 8009f86:	f7fe fec2 	bl	8008d0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000db0 	.word	0x20000db0
 8009f94:	200006ec 	.word	0x200006ec
 8009f98:	200009b0 	.word	0x200009b0

08009f9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fa0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bc80      	pop	{r7}
 8009fa8:	4770      	bx	lr
	...

08009fac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	6039      	str	r1, [r7, #0]
 8009fb6:	71fb      	strb	r3, [r7, #7]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	2b23      	cmp	r3, #35	@ 0x23
 8009fc0:	d84a      	bhi.n	800a058 <CDC_Control_FS+0xac>
 8009fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc8 <CDC_Control_FS+0x1c>)
 8009fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc8:	0800a059 	.word	0x0800a059
 8009fcc:	0800a059 	.word	0x0800a059
 8009fd0:	0800a059 	.word	0x0800a059
 8009fd4:	0800a059 	.word	0x0800a059
 8009fd8:	0800a059 	.word	0x0800a059
 8009fdc:	0800a059 	.word	0x0800a059
 8009fe0:	0800a059 	.word	0x0800a059
 8009fe4:	0800a059 	.word	0x0800a059
 8009fe8:	0800a059 	.word	0x0800a059
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a059 	.word	0x0800a059
 8009ff4:	0800a059 	.word	0x0800a059
 8009ff8:	0800a059 	.word	0x0800a059
 8009ffc:	0800a059 	.word	0x0800a059
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a059 	.word	0x0800a059
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	0800a059 	.word	0x0800a059
 800a010:	0800a059 	.word	0x0800a059
 800a014:	0800a059 	.word	0x0800a059
 800a018:	0800a059 	.word	0x0800a059
 800a01c:	0800a059 	.word	0x0800a059
 800a020:	0800a059 	.word	0x0800a059
 800a024:	0800a059 	.word	0x0800a059
 800a028:	0800a059 	.word	0x0800a059
 800a02c:	0800a059 	.word	0x0800a059
 800a030:	0800a059 	.word	0x0800a059
 800a034:	0800a059 	.word	0x0800a059
 800a038:	0800a059 	.word	0x0800a059
 800a03c:	0800a059 	.word	0x0800a059
 800a040:	0800a059 	.word	0x0800a059
 800a044:	0800a059 	.word	0x0800a059
 800a048:	0800a059 	.word	0x0800a059
 800a04c:	0800a059 	.word	0x0800a059
 800a050:	0800a059 	.word	0x0800a059
 800a054:	0800a059 	.word	0x0800a059
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a058:	bf00      	nop
  }

  return (USBD_OK);
 800a05a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop

0800a068 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	4805      	ldr	r0, [pc, #20]	@ (800a08c <CDC_Receive_FS+0x24>)
 800a076:	f7fe fe4a 	bl	8008d0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a07a:	4804      	ldr	r0, [pc, #16]	@ (800a08c <CDC_Receive_FS+0x24>)
 800a07c:	f7fe fe89 	bl	8008d92 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a080:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	200006ec 	.word	0x200006ec

0800a090 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a0a0:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d8 <CDC_Transmit_FS+0x48>)
 800a0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e00b      	b.n	800a0ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a0b6:	887b      	ldrh	r3, [r7, #2]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	4806      	ldr	r0, [pc, #24]	@ (800a0d8 <CDC_Transmit_FS+0x48>)
 800a0be:	f7fe fe0d 	bl	8008cdc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a0c2:	4805      	ldr	r0, [pc, #20]	@ (800a0d8 <CDC_Transmit_FS+0x48>)
 800a0c4:	f7fe fe36 	bl	8008d34 <USBD_CDC_TransmitPacket>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	200006ec 	.word	0x200006ec

0800a0dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	6039      	str	r1, [r7, #0]
 800a0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2212      	movs	r2, #18
 800a0ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0ee:	4b03      	ldr	r3, [pc, #12]	@ (800a0fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bc80      	pop	{r7}
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	20000168 	.word	0x20000168

0800a100 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	4603      	mov	r3, r0
 800a108:	6039      	str	r1, [r7, #0]
 800a10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2204      	movs	r2, #4
 800a110:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a112:	4b03      	ldr	r3, [pc, #12]	@ (800a120 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a114:	4618      	mov	r0, r3
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	bc80      	pop	{r7}
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	2000017c 	.word	0x2000017c

0800a124 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	4603      	mov	r3, r0
 800a12c:	6039      	str	r1, [r7, #0]
 800a12e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a130:	79fb      	ldrb	r3, [r7, #7]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d105      	bne.n	800a142 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	4907      	ldr	r1, [pc, #28]	@ (800a158 <USBD_FS_ProductStrDescriptor+0x34>)
 800a13a:	4808      	ldr	r0, [pc, #32]	@ (800a15c <USBD_FS_ProductStrDescriptor+0x38>)
 800a13c:	f7ff fe0d 	bl	8009d5a <USBD_GetString>
 800a140:	e004      	b.n	800a14c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	4904      	ldr	r1, [pc, #16]	@ (800a158 <USBD_FS_ProductStrDescriptor+0x34>)
 800a146:	4805      	ldr	r0, [pc, #20]	@ (800a15c <USBD_FS_ProductStrDescriptor+0x38>)
 800a148:	f7ff fe07 	bl	8009d5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a14c:	4b02      	ldr	r3, [pc, #8]	@ (800a158 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	200011b0 	.word	0x200011b0
 800a15c:	0800b2b8 	.word	0x0800b2b8

0800a160 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	6039      	str	r1, [r7, #0]
 800a16a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	4904      	ldr	r1, [pc, #16]	@ (800a180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a170:	4804      	ldr	r0, [pc, #16]	@ (800a184 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a172:	f7ff fdf2 	bl	8009d5a <USBD_GetString>
  return USBD_StrDesc;
 800a176:	4b02      	ldr	r3, [pc, #8]	@ (800a180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	200011b0 	.word	0x200011b0
 800a184:	0800b2d0 	.word	0x0800b2d0

0800a188 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	6039      	str	r1, [r7, #0]
 800a192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	221a      	movs	r2, #26
 800a198:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a19a:	f000 f843 	bl	800a224 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a19e:	4b02      	ldr	r3, [pc, #8]	@ (800a1a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	20000180 	.word	0x20000180

0800a1ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	6039      	str	r1, [r7, #0]
 800a1b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1b8:	79fb      	ldrb	r3, [r7, #7]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d105      	bne.n	800a1ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	4907      	ldr	r1, [pc, #28]	@ (800a1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1c2:	4808      	ldr	r0, [pc, #32]	@ (800a1e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1c4:	f7ff fdc9 	bl	8009d5a <USBD_GetString>
 800a1c8:	e004      	b.n	800a1d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	4904      	ldr	r1, [pc, #16]	@ (800a1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1ce:	4805      	ldr	r0, [pc, #20]	@ (800a1e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1d0:	f7ff fdc3 	bl	8009d5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1d4:	4b02      	ldr	r3, [pc, #8]	@ (800a1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	200011b0 	.word	0x200011b0
 800a1e4:	0800b2e4 	.word	0x0800b2e4

0800a1e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	6039      	str	r1, [r7, #0]
 800a1f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d105      	bne.n	800a206 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	4907      	ldr	r1, [pc, #28]	@ (800a21c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1fe:	4808      	ldr	r0, [pc, #32]	@ (800a220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a200:	f7ff fdab 	bl	8009d5a <USBD_GetString>
 800a204:	e004      	b.n	800a210 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	4904      	ldr	r1, [pc, #16]	@ (800a21c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a20a:	4805      	ldr	r0, [pc, #20]	@ (800a220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a20c:	f7ff fda5 	bl	8009d5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a210:	4b02      	ldr	r3, [pc, #8]	@ (800a21c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	200011b0 	.word	0x200011b0
 800a220:	0800b2f0 	.word	0x0800b2f0

0800a224 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a22a:	4b0f      	ldr	r3, [pc, #60]	@ (800a268 <Get_SerialNum+0x44>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a230:	4b0e      	ldr	r3, [pc, #56]	@ (800a26c <Get_SerialNum+0x48>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a236:	4b0e      	ldr	r3, [pc, #56]	@ (800a270 <Get_SerialNum+0x4c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4413      	add	r3, r2
 800a242:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d009      	beq.n	800a25e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a24a:	2208      	movs	r2, #8
 800a24c:	4909      	ldr	r1, [pc, #36]	@ (800a274 <Get_SerialNum+0x50>)
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 f814 	bl	800a27c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a254:	2204      	movs	r2, #4
 800a256:	4908      	ldr	r1, [pc, #32]	@ (800a278 <Get_SerialNum+0x54>)
 800a258:	68b8      	ldr	r0, [r7, #8]
 800a25a:	f000 f80f 	bl	800a27c <IntToUnicode>
  }
}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	1ffff7e8 	.word	0x1ffff7e8
 800a26c:	1ffff7ec 	.word	0x1ffff7ec
 800a270:	1ffff7f0 	.word	0x1ffff7f0
 800a274:	20000182 	.word	0x20000182
 800a278:	20000192 	.word	0x20000192

0800a27c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b087      	sub	sp, #28
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	4613      	mov	r3, r2
 800a288:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a28a:	2300      	movs	r3, #0
 800a28c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a28e:	2300      	movs	r3, #0
 800a290:	75fb      	strb	r3, [r7, #23]
 800a292:	e027      	b.n	800a2e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	0f1b      	lsrs	r3, r3, #28
 800a298:	2b09      	cmp	r3, #9
 800a29a:	d80b      	bhi.n	800a2b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	0f1b      	lsrs	r3, r3, #28
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	440b      	add	r3, r1
 800a2ac:	3230      	adds	r2, #48	@ 0x30
 800a2ae:	b2d2      	uxtb	r2, r2
 800a2b0:	701a      	strb	r2, [r3, #0]
 800a2b2:	e00a      	b.n	800a2ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	0f1b      	lsrs	r3, r3, #28
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
 800a2bc:	005b      	lsls	r3, r3, #1
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	440b      	add	r3, r1
 800a2c4:	3237      	adds	r2, #55	@ 0x37
 800a2c6:	b2d2      	uxtb	r2, r2
 800a2c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	011b      	lsls	r3, r3, #4
 800a2ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	4413      	add	r3, r2
 800a2da:	2200      	movs	r2, #0
 800a2dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	75fb      	strb	r3, [r7, #23]
 800a2e4:	7dfa      	ldrb	r2, [r7, #23]
 800a2e6:	79fb      	ldrb	r3, [r7, #7]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d3d3      	bcc.n	800a294 <IntToUnicode+0x18>
  }
}
 800a2ec:	bf00      	nop
 800a2ee:	bf00      	nop
 800a2f0:	371c      	adds	r7, #28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bc80      	pop	{r7}
 800a2f6:	4770      	bx	lr

0800a2f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a0d      	ldr	r2, [pc, #52]	@ (800a33c <HAL_PCD_MspInit+0x44>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d113      	bne.n	800a332 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a30a:	4b0d      	ldr	r3, [pc, #52]	@ (800a340 <HAL_PCD_MspInit+0x48>)
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	4a0c      	ldr	r2, [pc, #48]	@ (800a340 <HAL_PCD_MspInit+0x48>)
 800a310:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a314:	61d3      	str	r3, [r2, #28]
 800a316:	4b0a      	ldr	r3, [pc, #40]	@ (800a340 <HAL_PCD_MspInit+0x48>)
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a31e:	60fb      	str	r3, [r7, #12]
 800a320:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a322:	2200      	movs	r2, #0
 800a324:	2100      	movs	r1, #0
 800a326:	2014      	movs	r0, #20
 800a328:	f7f8 fa19 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a32c:	2014      	movs	r0, #20
 800a32e:	f7f8 fa32 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a332:	bf00      	nop
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	40005c00 	.word	0x40005c00
 800a340:	40021000 	.word	0x40021000

0800a344 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a358:	4619      	mov	r1, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	f7fe fdcf 	bl	8008efe <USBD_LL_SetupStage>
}
 800a360:	bf00      	nop
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	460b      	mov	r3, r1
 800a372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a37a:	78fa      	ldrb	r2, [r7, #3]
 800a37c:	6879      	ldr	r1, [r7, #4]
 800a37e:	4613      	mov	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	00db      	lsls	r3, r3, #3
 800a386:	440b      	add	r3, r1
 800a388:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	78fb      	ldrb	r3, [r7, #3]
 800a390:	4619      	mov	r1, r3
 800a392:	f7fe fe01 	bl	8008f98 <USBD_LL_DataOutStage>
}
 800a396:	bf00      	nop
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a3b0:	78fa      	ldrb	r2, [r7, #3]
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	00db      	lsls	r3, r3, #3
 800a3bc:	440b      	add	r3, r1
 800a3be:	333c      	adds	r3, #60	@ 0x3c
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	78fb      	ldrb	r3, [r7, #3]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	f7fe fe58 	bl	800907a <USBD_LL_DataInStage>
}
 800a3ca:	bf00      	nop
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe ff68 	bl	80092b6 <USBD_LL_SOF>
}
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d001      	beq.n	800a406 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a402:	f7f7 f85d 	bl	80014c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a40c:	7bfa      	ldrb	r2, [r7, #15]
 800a40e:	4611      	mov	r1, r2
 800a410:	4618      	mov	r0, r3
 800a412:	f7fe ff18 	bl	8009246 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe fed1 	bl	80091c4 <USBD_LL_Reset>
}
 800a422:	bf00      	nop
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
	...

0800a42c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe ff12 	bl	8009264 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d005      	beq.n	800a454 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a448:	4b04      	ldr	r3, [pc, #16]	@ (800a45c <HAL_PCD_SuspendCallback+0x30>)
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	4a03      	ldr	r2, [pc, #12]	@ (800a45c <HAL_PCD_SuspendCallback+0x30>)
 800a44e:	f043 0306 	orr.w	r3, r3, #6
 800a452:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	e000ed00 	.word	0xe000ed00

0800a460 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe ff0c 	bl	800928c <USBD_LL_Resume>
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a484:	4a28      	ldr	r2, [pc, #160]	@ (800a528 <USBD_LL_Init+0xac>)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a26      	ldr	r2, [pc, #152]	@ (800a528 <USBD_LL_Init+0xac>)
 800a490:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a494:	4b24      	ldr	r3, [pc, #144]	@ (800a528 <USBD_LL_Init+0xac>)
 800a496:	4a25      	ldr	r2, [pc, #148]	@ (800a52c <USBD_LL_Init+0xb0>)
 800a498:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a49a:	4b23      	ldr	r3, [pc, #140]	@ (800a528 <USBD_LL_Init+0xac>)
 800a49c:	2208      	movs	r2, #8
 800a49e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a4a0:	4b21      	ldr	r3, [pc, #132]	@ (800a528 <USBD_LL_Init+0xac>)
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a4a6:	4b20      	ldr	r3, [pc, #128]	@ (800a528 <USBD_LL_Init+0xac>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a4ac:	4b1e      	ldr	r3, [pc, #120]	@ (800a528 <USBD_LL_Init+0xac>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a4b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a528 <USBD_LL_Init+0xac>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a4b8:	481b      	ldr	r0, [pc, #108]	@ (800a528 <USBD_LL_Init+0xac>)
 800a4ba:	f7f8 ffff 	bl	80034bc <HAL_PCD_Init>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a4c4:	f7f6 fffc 	bl	80014c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4ce:	2318      	movs	r3, #24
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	f7fa fd1d 	bl	8004f12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4de:	2358      	movs	r3, #88	@ 0x58
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2180      	movs	r1, #128	@ 0x80
 800a4e4:	f7fa fd15 	bl	8004f12 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4ee:	23c0      	movs	r3, #192	@ 0xc0
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2181      	movs	r1, #129	@ 0x81
 800a4f4:	f7fa fd0d 	bl	8004f12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4fe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a502:	2200      	movs	r2, #0
 800a504:	2101      	movs	r1, #1
 800a506:	f7fa fd04 	bl	8004f12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a510:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a514:	2200      	movs	r2, #0
 800a516:	2182      	movs	r1, #130	@ 0x82
 800a518:	f7fa fcfb 	bl	8004f12 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	200013b0 	.word	0x200013b0
 800a52c:	40005c00 	.word	0x40005c00

0800a530 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a546:	4618      	mov	r0, r3
 800a548:	f7f9 f8b7 	bl	80036ba <HAL_PCD_Start>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	4618      	mov	r0, r3
 800a554:	f000 f94e 	bl	800a7f4 <USBD_Get_USB_Status>
 800a558:	4603      	mov	r3, r0
 800a55a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	4608      	mov	r0, r1
 800a570:	4611      	mov	r1, r2
 800a572:	461a      	mov	r2, r3
 800a574:	4603      	mov	r3, r0
 800a576:	70fb      	strb	r3, [r7, #3]
 800a578:	460b      	mov	r3, r1
 800a57a:	70bb      	strb	r3, [r7, #2]
 800a57c:	4613      	mov	r3, r2
 800a57e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a58e:	78bb      	ldrb	r3, [r7, #2]
 800a590:	883a      	ldrh	r2, [r7, #0]
 800a592:	78f9      	ldrb	r1, [r7, #3]
 800a594:	f7f9 fa0c 	bl	80039b0 <HAL_PCD_EP_Open>
 800a598:	4603      	mov	r3, r0
 800a59a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 f928 	bl	800a7f4 <USBD_Get_USB_Status>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5cc:	78fa      	ldrb	r2, [r7, #3]
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7f9 fa4a 	bl	8003a6a <HAL_PCD_EP_Close>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5da:	7bfb      	ldrb	r3, [r7, #15]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 f909 	bl	800a7f4 <USBD_Get_USB_Status>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a60a:	78fa      	ldrb	r2, [r7, #3]
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f7f9 faf2 	bl	8003bf8 <HAL_PCD_EP_SetStall>
 800a614:	4603      	mov	r3, r0
 800a616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a618:	7bfb      	ldrb	r3, [r7, #15]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f8ea 	bl	800a7f4 <USBD_Get_USB_Status>
 800a620:	4603      	mov	r3, r0
 800a622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a624:	7bbb      	ldrb	r3, [r7, #14]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	460b      	mov	r3, r1
 800a638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a648:	78fa      	ldrb	r2, [r7, #3]
 800a64a:	4611      	mov	r1, r2
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7f9 fb33 	bl	8003cb8 <HAL_PCD_EP_ClrStall>
 800a652:	4603      	mov	r3, r0
 800a654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 f8cb 	bl	800a7f4 <USBD_Get_USB_Status>
 800a65e:	4603      	mov	r3, r0
 800a660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a662:	7bbb      	ldrb	r3, [r7, #14]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a67e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a684:	2b00      	cmp	r3, #0
 800a686:	da0c      	bge.n	800a6a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a68e:	68f9      	ldr	r1, [r7, #12]
 800a690:	1c5a      	adds	r2, r3, #1
 800a692:	4613      	mov	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4413      	add	r3, r2
 800a698:	00db      	lsls	r3, r3, #3
 800a69a:	440b      	add	r3, r1
 800a69c:	3302      	adds	r3, #2
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	e00b      	b.n	800a6ba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6a2:	78fb      	ldrb	r3, [r7, #3]
 800a6a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6a8:	68f9      	ldr	r1, [r7, #12]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	440b      	add	r3, r1
 800a6b4:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a6b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bc80      	pop	{r7}
 800a6c2:	4770      	bx	lr

0800a6c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6de:	78fa      	ldrb	r2, [r7, #3]
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7f9 f93f 	bl	8003966 <HAL_PCD_SetAddress>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 f880 	bl	800a7f4 <USBD_Get_USB_Status>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b086      	sub	sp, #24
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	461a      	mov	r2, r3
 800a70e:	460b      	mov	r3, r1
 800a710:	72fb      	strb	r3, [r7, #11]
 800a712:	4613      	mov	r3, r2
 800a714:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a724:	893b      	ldrh	r3, [r7, #8]
 800a726:	7af9      	ldrb	r1, [r7, #11]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	f7f9 fa2e 	bl	8003b8a <HAL_PCD_EP_Transmit>
 800a72e:	4603      	mov	r3, r0
 800a730:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a732:	7dfb      	ldrb	r3, [r7, #23]
 800a734:	4618      	mov	r0, r3
 800a736:	f000 f85d 	bl	800a7f4 <USBD_Get_USB_Status>
 800a73a:	4603      	mov	r3, r0
 800a73c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a73e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	607a      	str	r2, [r7, #4]
 800a752:	461a      	mov	r2, r3
 800a754:	460b      	mov	r3, r1
 800a756:	72fb      	strb	r3, [r7, #11]
 800a758:	4613      	mov	r3, r2
 800a75a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a76a:	893b      	ldrh	r3, [r7, #8]
 800a76c:	7af9      	ldrb	r1, [r7, #11]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	f7f9 f9c3 	bl	8003afa <HAL_PCD_EP_Receive>
 800a774:	4603      	mov	r3, r0
 800a776:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a778:	7dfb      	ldrb	r3, [r7, #23]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 f83a 	bl	800a7f4 <USBD_Get_USB_Status>
 800a780:	4603      	mov	r3, r0
 800a782:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a784:	7dbb      	ldrb	r3, [r7, #22]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b082      	sub	sp, #8
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	460b      	mov	r3, r1
 800a798:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7a0:	78fa      	ldrb	r2, [r7, #3]
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7f9 f9d9 	bl	8003b5c <HAL_PCD_EP_GetRxCount>
 800a7aa:	4603      	mov	r3, r0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7bc:	4b02      	ldr	r3, [pc, #8]	@ (800a7c8 <USBD_static_malloc+0x14>)
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bc80      	pop	{r7}
 800a7c6:	4770      	bx	lr
 800a7c8:	200016a0 	.word	0x200016a0

0800a7cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]

}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bc80      	pop	{r7}
 800a7dc:	4770      	bx	lr

0800a7de <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bc80      	pop	{r7}
 800a7f2:	4770      	bx	lr

0800a7f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7fe:	2300      	movs	r3, #0
 800a800:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a802:	79fb      	ldrb	r3, [r7, #7]
 800a804:	2b03      	cmp	r3, #3
 800a806:	d817      	bhi.n	800a838 <USBD_Get_USB_Status+0x44>
 800a808:	a201      	add	r2, pc, #4	@ (adr r2, 800a810 <USBD_Get_USB_Status+0x1c>)
 800a80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80e:	bf00      	nop
 800a810:	0800a821 	.word	0x0800a821
 800a814:	0800a827 	.word	0x0800a827
 800a818:	0800a82d 	.word	0x0800a82d
 800a81c:	0800a833 	.word	0x0800a833
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	73fb      	strb	r3, [r7, #15]
    break;
 800a824:	e00b      	b.n	800a83e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a826:	2302      	movs	r3, #2
 800a828:	73fb      	strb	r3, [r7, #15]
    break;
 800a82a:	e008      	b.n	800a83e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a82c:	2301      	movs	r3, #1
 800a82e:	73fb      	strb	r3, [r7, #15]
    break;
 800a830:	e005      	b.n	800a83e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a832:	2302      	movs	r3, #2
 800a834:	73fb      	strb	r3, [r7, #15]
    break;
 800a836:	e002      	b.n	800a83e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a838:	2302      	movs	r3, #2
 800a83a:	73fb      	strb	r3, [r7, #15]
    break;
 800a83c:	bf00      	nop
  }
  return usb_status;
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	bc80      	pop	{r7}
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop

0800a84c <sniprintf>:
 800a84c:	b40c      	push	{r2, r3}
 800a84e:	b530      	push	{r4, r5, lr}
 800a850:	4b17      	ldr	r3, [pc, #92]	@ (800a8b0 <sniprintf+0x64>)
 800a852:	1e0c      	subs	r4, r1, #0
 800a854:	681d      	ldr	r5, [r3, #0]
 800a856:	b09d      	sub	sp, #116	@ 0x74
 800a858:	da08      	bge.n	800a86c <sniprintf+0x20>
 800a85a:	238b      	movs	r3, #139	@ 0x8b
 800a85c:	f04f 30ff 	mov.w	r0, #4294967295
 800a860:	602b      	str	r3, [r5, #0]
 800a862:	b01d      	add	sp, #116	@ 0x74
 800a864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a868:	b002      	add	sp, #8
 800a86a:	4770      	bx	lr
 800a86c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a870:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a874:	bf0c      	ite	eq
 800a876:	4623      	moveq	r3, r4
 800a878:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a87c:	9304      	str	r3, [sp, #16]
 800a87e:	9307      	str	r3, [sp, #28]
 800a880:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a884:	9002      	str	r0, [sp, #8]
 800a886:	9006      	str	r0, [sp, #24]
 800a888:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a88c:	4628      	mov	r0, r5
 800a88e:	ab21      	add	r3, sp, #132	@ 0x84
 800a890:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a892:	a902      	add	r1, sp, #8
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	f000 f9cd 	bl	800ac34 <_svfiprintf_r>
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	bfbc      	itt	lt
 800a89e:	238b      	movlt	r3, #139	@ 0x8b
 800a8a0:	602b      	strlt	r3, [r5, #0]
 800a8a2:	2c00      	cmp	r4, #0
 800a8a4:	d0dd      	beq.n	800a862 <sniprintf+0x16>
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	9b02      	ldr	r3, [sp, #8]
 800a8aa:	701a      	strb	r2, [r3, #0]
 800a8ac:	e7d9      	b.n	800a862 <sniprintf+0x16>
 800a8ae:	bf00      	nop
 800a8b0:	2000019c 	.word	0x2000019c

0800a8b4 <siprintf>:
 800a8b4:	b40e      	push	{r1, r2, r3}
 800a8b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a8ba:	b500      	push	{lr}
 800a8bc:	b09c      	sub	sp, #112	@ 0x70
 800a8be:	ab1d      	add	r3, sp, #116	@ 0x74
 800a8c0:	9002      	str	r0, [sp, #8]
 800a8c2:	9006      	str	r0, [sp, #24]
 800a8c4:	9107      	str	r1, [sp, #28]
 800a8c6:	9104      	str	r1, [sp, #16]
 800a8c8:	4808      	ldr	r0, [pc, #32]	@ (800a8ec <siprintf+0x38>)
 800a8ca:	4909      	ldr	r1, [pc, #36]	@ (800a8f0 <siprintf+0x3c>)
 800a8cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d0:	9105      	str	r1, [sp, #20]
 800a8d2:	6800      	ldr	r0, [r0, #0]
 800a8d4:	a902      	add	r1, sp, #8
 800a8d6:	9301      	str	r3, [sp, #4]
 800a8d8:	f000 f9ac 	bl	800ac34 <_svfiprintf_r>
 800a8dc:	2200      	movs	r2, #0
 800a8de:	9b02      	ldr	r3, [sp, #8]
 800a8e0:	701a      	strb	r2, [r3, #0]
 800a8e2:	b01c      	add	sp, #112	@ 0x70
 800a8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8e8:	b003      	add	sp, #12
 800a8ea:	4770      	bx	lr
 800a8ec:	2000019c 	.word	0x2000019c
 800a8f0:	ffff0208 	.word	0xffff0208

0800a8f4 <memmove>:
 800a8f4:	4288      	cmp	r0, r1
 800a8f6:	b510      	push	{r4, lr}
 800a8f8:	eb01 0402 	add.w	r4, r1, r2
 800a8fc:	d902      	bls.n	800a904 <memmove+0x10>
 800a8fe:	4284      	cmp	r4, r0
 800a900:	4623      	mov	r3, r4
 800a902:	d807      	bhi.n	800a914 <memmove+0x20>
 800a904:	1e43      	subs	r3, r0, #1
 800a906:	42a1      	cmp	r1, r4
 800a908:	d008      	beq.n	800a91c <memmove+0x28>
 800a90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a90e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a912:	e7f8      	b.n	800a906 <memmove+0x12>
 800a914:	4601      	mov	r1, r0
 800a916:	4402      	add	r2, r0
 800a918:	428a      	cmp	r2, r1
 800a91a:	d100      	bne.n	800a91e <memmove+0x2a>
 800a91c:	bd10      	pop	{r4, pc}
 800a91e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a926:	e7f7      	b.n	800a918 <memmove+0x24>

0800a928 <memset>:
 800a928:	4603      	mov	r3, r0
 800a92a:	4402      	add	r2, r0
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d100      	bne.n	800a932 <memset+0xa>
 800a930:	4770      	bx	lr
 800a932:	f803 1b01 	strb.w	r1, [r3], #1
 800a936:	e7f9      	b.n	800a92c <memset+0x4>

0800a938 <__errno>:
 800a938:	4b01      	ldr	r3, [pc, #4]	@ (800a940 <__errno+0x8>)
 800a93a:	6818      	ldr	r0, [r3, #0]
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	2000019c 	.word	0x2000019c

0800a944 <__libc_init_array>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	2600      	movs	r6, #0
 800a948:	4d0c      	ldr	r5, [pc, #48]	@ (800a97c <__libc_init_array+0x38>)
 800a94a:	4c0d      	ldr	r4, [pc, #52]	@ (800a980 <__libc_init_array+0x3c>)
 800a94c:	1b64      	subs	r4, r4, r5
 800a94e:	10a4      	asrs	r4, r4, #2
 800a950:	42a6      	cmp	r6, r4
 800a952:	d109      	bne.n	800a968 <__libc_init_array+0x24>
 800a954:	f000 fc5e 	bl	800b214 <_init>
 800a958:	2600      	movs	r6, #0
 800a95a:	4d0a      	ldr	r5, [pc, #40]	@ (800a984 <__libc_init_array+0x40>)
 800a95c:	4c0a      	ldr	r4, [pc, #40]	@ (800a988 <__libc_init_array+0x44>)
 800a95e:	1b64      	subs	r4, r4, r5
 800a960:	10a4      	asrs	r4, r4, #2
 800a962:	42a6      	cmp	r6, r4
 800a964:	d105      	bne.n	800a972 <__libc_init_array+0x2e>
 800a966:	bd70      	pop	{r4, r5, r6, pc}
 800a968:	f855 3b04 	ldr.w	r3, [r5], #4
 800a96c:	4798      	blx	r3
 800a96e:	3601      	adds	r6, #1
 800a970:	e7ee      	b.n	800a950 <__libc_init_array+0xc>
 800a972:	f855 3b04 	ldr.w	r3, [r5], #4
 800a976:	4798      	blx	r3
 800a978:	3601      	adds	r6, #1
 800a97a:	e7f2      	b.n	800a962 <__libc_init_array+0x1e>
 800a97c:	0800e16c 	.word	0x0800e16c
 800a980:	0800e16c 	.word	0x0800e16c
 800a984:	0800e16c 	.word	0x0800e16c
 800a988:	0800e170 	.word	0x0800e170

0800a98c <__retarget_lock_acquire_recursive>:
 800a98c:	4770      	bx	lr

0800a98e <__retarget_lock_release_recursive>:
 800a98e:	4770      	bx	lr

0800a990 <_free_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4605      	mov	r5, r0
 800a994:	2900      	cmp	r1, #0
 800a996:	d040      	beq.n	800aa1a <_free_r+0x8a>
 800a998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99c:	1f0c      	subs	r4, r1, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bfb8      	it	lt
 800a9a2:	18e4      	addlt	r4, r4, r3
 800a9a4:	f000 f8de 	bl	800ab64 <__malloc_lock>
 800a9a8:	4a1c      	ldr	r2, [pc, #112]	@ (800aa1c <_free_r+0x8c>)
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	b933      	cbnz	r3, 800a9bc <_free_r+0x2c>
 800a9ae:	6063      	str	r3, [r4, #4]
 800a9b0:	6014      	str	r4, [r2, #0]
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9b8:	f000 b8da 	b.w	800ab70 <__malloc_unlock>
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	d908      	bls.n	800a9d2 <_free_r+0x42>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	1821      	adds	r1, r4, r0
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	bf01      	itttt	eq
 800a9c8:	6819      	ldreq	r1, [r3, #0]
 800a9ca:	685b      	ldreq	r3, [r3, #4]
 800a9cc:	1809      	addeq	r1, r1, r0
 800a9ce:	6021      	streq	r1, [r4, #0]
 800a9d0:	e7ed      	b.n	800a9ae <_free_r+0x1e>
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	b10b      	cbz	r3, 800a9dc <_free_r+0x4c>
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d9fa      	bls.n	800a9d2 <_free_r+0x42>
 800a9dc:	6811      	ldr	r1, [r2, #0]
 800a9de:	1850      	adds	r0, r2, r1
 800a9e0:	42a0      	cmp	r0, r4
 800a9e2:	d10b      	bne.n	800a9fc <_free_r+0x6c>
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	4401      	add	r1, r0
 800a9e8:	1850      	adds	r0, r2, r1
 800a9ea:	4283      	cmp	r3, r0
 800a9ec:	6011      	str	r1, [r2, #0]
 800a9ee:	d1e0      	bne.n	800a9b2 <_free_r+0x22>
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	4408      	add	r0, r1
 800a9f6:	6010      	str	r0, [r2, #0]
 800a9f8:	6053      	str	r3, [r2, #4]
 800a9fa:	e7da      	b.n	800a9b2 <_free_r+0x22>
 800a9fc:	d902      	bls.n	800aa04 <_free_r+0x74>
 800a9fe:	230c      	movs	r3, #12
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	e7d6      	b.n	800a9b2 <_free_r+0x22>
 800aa04:	6820      	ldr	r0, [r4, #0]
 800aa06:	1821      	adds	r1, r4, r0
 800aa08:	428b      	cmp	r3, r1
 800aa0a:	bf01      	itttt	eq
 800aa0c:	6819      	ldreq	r1, [r3, #0]
 800aa0e:	685b      	ldreq	r3, [r3, #4]
 800aa10:	1809      	addeq	r1, r1, r0
 800aa12:	6021      	streq	r1, [r4, #0]
 800aa14:	6063      	str	r3, [r4, #4]
 800aa16:	6054      	str	r4, [r2, #4]
 800aa18:	e7cb      	b.n	800a9b2 <_free_r+0x22>
 800aa1a:	bd38      	pop	{r3, r4, r5, pc}
 800aa1c:	20001a04 	.word	0x20001a04

0800aa20 <sbrk_aligned>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	4e0f      	ldr	r6, [pc, #60]	@ (800aa60 <sbrk_aligned+0x40>)
 800aa24:	460c      	mov	r4, r1
 800aa26:	6831      	ldr	r1, [r6, #0]
 800aa28:	4605      	mov	r5, r0
 800aa2a:	b911      	cbnz	r1, 800aa32 <sbrk_aligned+0x12>
 800aa2c:	f000 fb90 	bl	800b150 <_sbrk_r>
 800aa30:	6030      	str	r0, [r6, #0]
 800aa32:	4621      	mov	r1, r4
 800aa34:	4628      	mov	r0, r5
 800aa36:	f000 fb8b 	bl	800b150 <_sbrk_r>
 800aa3a:	1c43      	adds	r3, r0, #1
 800aa3c:	d103      	bne.n	800aa46 <sbrk_aligned+0x26>
 800aa3e:	f04f 34ff 	mov.w	r4, #4294967295
 800aa42:	4620      	mov	r0, r4
 800aa44:	bd70      	pop	{r4, r5, r6, pc}
 800aa46:	1cc4      	adds	r4, r0, #3
 800aa48:	f024 0403 	bic.w	r4, r4, #3
 800aa4c:	42a0      	cmp	r0, r4
 800aa4e:	d0f8      	beq.n	800aa42 <sbrk_aligned+0x22>
 800aa50:	1a21      	subs	r1, r4, r0
 800aa52:	4628      	mov	r0, r5
 800aa54:	f000 fb7c 	bl	800b150 <_sbrk_r>
 800aa58:	3001      	adds	r0, #1
 800aa5a:	d1f2      	bne.n	800aa42 <sbrk_aligned+0x22>
 800aa5c:	e7ef      	b.n	800aa3e <sbrk_aligned+0x1e>
 800aa5e:	bf00      	nop
 800aa60:	20001a00 	.word	0x20001a00

0800aa64 <_malloc_r>:
 800aa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa68:	1ccd      	adds	r5, r1, #3
 800aa6a:	f025 0503 	bic.w	r5, r5, #3
 800aa6e:	3508      	adds	r5, #8
 800aa70:	2d0c      	cmp	r5, #12
 800aa72:	bf38      	it	cc
 800aa74:	250c      	movcc	r5, #12
 800aa76:	2d00      	cmp	r5, #0
 800aa78:	4606      	mov	r6, r0
 800aa7a:	db01      	blt.n	800aa80 <_malloc_r+0x1c>
 800aa7c:	42a9      	cmp	r1, r5
 800aa7e:	d904      	bls.n	800aa8a <_malloc_r+0x26>
 800aa80:	230c      	movs	r3, #12
 800aa82:	6033      	str	r3, [r6, #0]
 800aa84:	2000      	movs	r0, #0
 800aa86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab60 <_malloc_r+0xfc>
 800aa8e:	f000 f869 	bl	800ab64 <__malloc_lock>
 800aa92:	f8d8 3000 	ldr.w	r3, [r8]
 800aa96:	461c      	mov	r4, r3
 800aa98:	bb44      	cbnz	r4, 800aaec <_malloc_r+0x88>
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff ffbf 	bl	800aa20 <sbrk_aligned>
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	d158      	bne.n	800ab5a <_malloc_r+0xf6>
 800aaa8:	f8d8 4000 	ldr.w	r4, [r8]
 800aaac:	4627      	mov	r7, r4
 800aaae:	2f00      	cmp	r7, #0
 800aab0:	d143      	bne.n	800ab3a <_malloc_r+0xd6>
 800aab2:	2c00      	cmp	r4, #0
 800aab4:	d04b      	beq.n	800ab4e <_malloc_r+0xea>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	4639      	mov	r1, r7
 800aaba:	4630      	mov	r0, r6
 800aabc:	eb04 0903 	add.w	r9, r4, r3
 800aac0:	f000 fb46 	bl	800b150 <_sbrk_r>
 800aac4:	4581      	cmp	r9, r0
 800aac6:	d142      	bne.n	800ab4e <_malloc_r+0xea>
 800aac8:	6821      	ldr	r1, [r4, #0]
 800aaca:	4630      	mov	r0, r6
 800aacc:	1a6d      	subs	r5, r5, r1
 800aace:	4629      	mov	r1, r5
 800aad0:	f7ff ffa6 	bl	800aa20 <sbrk_aligned>
 800aad4:	3001      	adds	r0, #1
 800aad6:	d03a      	beq.n	800ab4e <_malloc_r+0xea>
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	442b      	add	r3, r5
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	f8d8 3000 	ldr.w	r3, [r8]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	bb62      	cbnz	r2, 800ab40 <_malloc_r+0xdc>
 800aae6:	f8c8 7000 	str.w	r7, [r8]
 800aaea:	e00f      	b.n	800ab0c <_malloc_r+0xa8>
 800aaec:	6822      	ldr	r2, [r4, #0]
 800aaee:	1b52      	subs	r2, r2, r5
 800aaf0:	d420      	bmi.n	800ab34 <_malloc_r+0xd0>
 800aaf2:	2a0b      	cmp	r2, #11
 800aaf4:	d917      	bls.n	800ab26 <_malloc_r+0xc2>
 800aaf6:	1961      	adds	r1, r4, r5
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	6025      	str	r5, [r4, #0]
 800aafc:	bf18      	it	ne
 800aafe:	6059      	strne	r1, [r3, #4]
 800ab00:	6863      	ldr	r3, [r4, #4]
 800ab02:	bf08      	it	eq
 800ab04:	f8c8 1000 	streq.w	r1, [r8]
 800ab08:	5162      	str	r2, [r4, r5]
 800ab0a:	604b      	str	r3, [r1, #4]
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f000 f82f 	bl	800ab70 <__malloc_unlock>
 800ab12:	f104 000b 	add.w	r0, r4, #11
 800ab16:	1d23      	adds	r3, r4, #4
 800ab18:	f020 0007 	bic.w	r0, r0, #7
 800ab1c:	1ac2      	subs	r2, r0, r3
 800ab1e:	bf1c      	itt	ne
 800ab20:	1a1b      	subne	r3, r3, r0
 800ab22:	50a3      	strne	r3, [r4, r2]
 800ab24:	e7af      	b.n	800aa86 <_malloc_r+0x22>
 800ab26:	6862      	ldr	r2, [r4, #4]
 800ab28:	42a3      	cmp	r3, r4
 800ab2a:	bf0c      	ite	eq
 800ab2c:	f8c8 2000 	streq.w	r2, [r8]
 800ab30:	605a      	strne	r2, [r3, #4]
 800ab32:	e7eb      	b.n	800ab0c <_malloc_r+0xa8>
 800ab34:	4623      	mov	r3, r4
 800ab36:	6864      	ldr	r4, [r4, #4]
 800ab38:	e7ae      	b.n	800aa98 <_malloc_r+0x34>
 800ab3a:	463c      	mov	r4, r7
 800ab3c:	687f      	ldr	r7, [r7, #4]
 800ab3e:	e7b6      	b.n	800aaae <_malloc_r+0x4a>
 800ab40:	461a      	mov	r2, r3
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	d1fb      	bne.n	800ab40 <_malloc_r+0xdc>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	6053      	str	r3, [r2, #4]
 800ab4c:	e7de      	b.n	800ab0c <_malloc_r+0xa8>
 800ab4e:	230c      	movs	r3, #12
 800ab50:	4630      	mov	r0, r6
 800ab52:	6033      	str	r3, [r6, #0]
 800ab54:	f000 f80c 	bl	800ab70 <__malloc_unlock>
 800ab58:	e794      	b.n	800aa84 <_malloc_r+0x20>
 800ab5a:	6005      	str	r5, [r0, #0]
 800ab5c:	e7d6      	b.n	800ab0c <_malloc_r+0xa8>
 800ab5e:	bf00      	nop
 800ab60:	20001a04 	.word	0x20001a04

0800ab64 <__malloc_lock>:
 800ab64:	4801      	ldr	r0, [pc, #4]	@ (800ab6c <__malloc_lock+0x8>)
 800ab66:	f7ff bf11 	b.w	800a98c <__retarget_lock_acquire_recursive>
 800ab6a:	bf00      	nop
 800ab6c:	200019fc 	.word	0x200019fc

0800ab70 <__malloc_unlock>:
 800ab70:	4801      	ldr	r0, [pc, #4]	@ (800ab78 <__malloc_unlock+0x8>)
 800ab72:	f7ff bf0c 	b.w	800a98e <__retarget_lock_release_recursive>
 800ab76:	bf00      	nop
 800ab78:	200019fc 	.word	0x200019fc

0800ab7c <__ssputs_r>:
 800ab7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab80:	461f      	mov	r7, r3
 800ab82:	688e      	ldr	r6, [r1, #8]
 800ab84:	4682      	mov	sl, r0
 800ab86:	42be      	cmp	r6, r7
 800ab88:	460c      	mov	r4, r1
 800ab8a:	4690      	mov	r8, r2
 800ab8c:	680b      	ldr	r3, [r1, #0]
 800ab8e:	d82d      	bhi.n	800abec <__ssputs_r+0x70>
 800ab90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab98:	d026      	beq.n	800abe8 <__ssputs_r+0x6c>
 800ab9a:	6965      	ldr	r5, [r4, #20]
 800ab9c:	6909      	ldr	r1, [r1, #16]
 800ab9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aba2:	eba3 0901 	sub.w	r9, r3, r1
 800aba6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abaa:	1c7b      	adds	r3, r7, #1
 800abac:	444b      	add	r3, r9
 800abae:	106d      	asrs	r5, r5, #1
 800abb0:	429d      	cmp	r5, r3
 800abb2:	bf38      	it	cc
 800abb4:	461d      	movcc	r5, r3
 800abb6:	0553      	lsls	r3, r2, #21
 800abb8:	d527      	bpl.n	800ac0a <__ssputs_r+0x8e>
 800abba:	4629      	mov	r1, r5
 800abbc:	f7ff ff52 	bl	800aa64 <_malloc_r>
 800abc0:	4606      	mov	r6, r0
 800abc2:	b360      	cbz	r0, 800ac1e <__ssputs_r+0xa2>
 800abc4:	464a      	mov	r2, r9
 800abc6:	6921      	ldr	r1, [r4, #16]
 800abc8:	f000 fae0 	bl	800b18c <memcpy>
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800abd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	6126      	str	r6, [r4, #16]
 800abda:	444e      	add	r6, r9
 800abdc:	6026      	str	r6, [r4, #0]
 800abde:	463e      	mov	r6, r7
 800abe0:	6165      	str	r5, [r4, #20]
 800abe2:	eba5 0509 	sub.w	r5, r5, r9
 800abe6:	60a5      	str	r5, [r4, #8]
 800abe8:	42be      	cmp	r6, r7
 800abea:	d900      	bls.n	800abee <__ssputs_r+0x72>
 800abec:	463e      	mov	r6, r7
 800abee:	4632      	mov	r2, r6
 800abf0:	4641      	mov	r1, r8
 800abf2:	6820      	ldr	r0, [r4, #0]
 800abf4:	f7ff fe7e 	bl	800a8f4 <memmove>
 800abf8:	2000      	movs	r0, #0
 800abfa:	68a3      	ldr	r3, [r4, #8]
 800abfc:	1b9b      	subs	r3, r3, r6
 800abfe:	60a3      	str	r3, [r4, #8]
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	4433      	add	r3, r6
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac0a:	462a      	mov	r2, r5
 800ac0c:	f000 facc 	bl	800b1a8 <_realloc_r>
 800ac10:	4606      	mov	r6, r0
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d1e0      	bne.n	800abd8 <__ssputs_r+0x5c>
 800ac16:	4650      	mov	r0, sl
 800ac18:	6921      	ldr	r1, [r4, #16]
 800ac1a:	f7ff feb9 	bl	800a990 <_free_r>
 800ac1e:	230c      	movs	r3, #12
 800ac20:	f8ca 3000 	str.w	r3, [sl]
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac2e:	81a3      	strh	r3, [r4, #12]
 800ac30:	e7e9      	b.n	800ac06 <__ssputs_r+0x8a>
	...

0800ac34 <_svfiprintf_r>:
 800ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	4698      	mov	r8, r3
 800ac3a:	898b      	ldrh	r3, [r1, #12]
 800ac3c:	4607      	mov	r7, r0
 800ac3e:	061b      	lsls	r3, r3, #24
 800ac40:	460d      	mov	r5, r1
 800ac42:	4614      	mov	r4, r2
 800ac44:	b09d      	sub	sp, #116	@ 0x74
 800ac46:	d510      	bpl.n	800ac6a <_svfiprintf_r+0x36>
 800ac48:	690b      	ldr	r3, [r1, #16]
 800ac4a:	b973      	cbnz	r3, 800ac6a <_svfiprintf_r+0x36>
 800ac4c:	2140      	movs	r1, #64	@ 0x40
 800ac4e:	f7ff ff09 	bl	800aa64 <_malloc_r>
 800ac52:	6028      	str	r0, [r5, #0]
 800ac54:	6128      	str	r0, [r5, #16]
 800ac56:	b930      	cbnz	r0, 800ac66 <_svfiprintf_r+0x32>
 800ac58:	230c      	movs	r3, #12
 800ac5a:	603b      	str	r3, [r7, #0]
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac60:	b01d      	add	sp, #116	@ 0x74
 800ac62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac66:	2340      	movs	r3, #64	@ 0x40
 800ac68:	616b      	str	r3, [r5, #20]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac6e:	2320      	movs	r3, #32
 800ac70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac74:	2330      	movs	r3, #48	@ 0x30
 800ac76:	f04f 0901 	mov.w	r9, #1
 800ac7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac7e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ae18 <_svfiprintf_r+0x1e4>
 800ac82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac86:	4623      	mov	r3, r4
 800ac88:	469a      	mov	sl, r3
 800ac8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac8e:	b10a      	cbz	r2, 800ac94 <_svfiprintf_r+0x60>
 800ac90:	2a25      	cmp	r2, #37	@ 0x25
 800ac92:	d1f9      	bne.n	800ac88 <_svfiprintf_r+0x54>
 800ac94:	ebba 0b04 	subs.w	fp, sl, r4
 800ac98:	d00b      	beq.n	800acb2 <_svfiprintf_r+0x7e>
 800ac9a:	465b      	mov	r3, fp
 800ac9c:	4622      	mov	r2, r4
 800ac9e:	4629      	mov	r1, r5
 800aca0:	4638      	mov	r0, r7
 800aca2:	f7ff ff6b 	bl	800ab7c <__ssputs_r>
 800aca6:	3001      	adds	r0, #1
 800aca8:	f000 80a7 	beq.w	800adfa <_svfiprintf_r+0x1c6>
 800acac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acae:	445a      	add	r2, fp
 800acb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800acb2:	f89a 3000 	ldrb.w	r3, [sl]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 809f 	beq.w	800adfa <_svfiprintf_r+0x1c6>
 800acbc:	2300      	movs	r3, #0
 800acbe:	f04f 32ff 	mov.w	r2, #4294967295
 800acc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acc6:	f10a 0a01 	add.w	sl, sl, #1
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	9307      	str	r3, [sp, #28]
 800acce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acd2:	931a      	str	r3, [sp, #104]	@ 0x68
 800acd4:	4654      	mov	r4, sl
 800acd6:	2205      	movs	r2, #5
 800acd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acdc:	484e      	ldr	r0, [pc, #312]	@ (800ae18 <_svfiprintf_r+0x1e4>)
 800acde:	f000 fa47 	bl	800b170 <memchr>
 800ace2:	9a04      	ldr	r2, [sp, #16]
 800ace4:	b9d8      	cbnz	r0, 800ad1e <_svfiprintf_r+0xea>
 800ace6:	06d0      	lsls	r0, r2, #27
 800ace8:	bf44      	itt	mi
 800acea:	2320      	movmi	r3, #32
 800acec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acf0:	0711      	lsls	r1, r2, #28
 800acf2:	bf44      	itt	mi
 800acf4:	232b      	movmi	r3, #43	@ 0x2b
 800acf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acfa:	f89a 3000 	ldrb.w	r3, [sl]
 800acfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad00:	d015      	beq.n	800ad2e <_svfiprintf_r+0xfa>
 800ad02:	4654      	mov	r4, sl
 800ad04:	2000      	movs	r0, #0
 800ad06:	f04f 0c0a 	mov.w	ip, #10
 800ad0a:	9a07      	ldr	r2, [sp, #28]
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad12:	3b30      	subs	r3, #48	@ 0x30
 800ad14:	2b09      	cmp	r3, #9
 800ad16:	d94b      	bls.n	800adb0 <_svfiprintf_r+0x17c>
 800ad18:	b1b0      	cbz	r0, 800ad48 <_svfiprintf_r+0x114>
 800ad1a:	9207      	str	r2, [sp, #28]
 800ad1c:	e014      	b.n	800ad48 <_svfiprintf_r+0x114>
 800ad1e:	eba0 0308 	sub.w	r3, r0, r8
 800ad22:	fa09 f303 	lsl.w	r3, r9, r3
 800ad26:	4313      	orrs	r3, r2
 800ad28:	46a2      	mov	sl, r4
 800ad2a:	9304      	str	r3, [sp, #16]
 800ad2c:	e7d2      	b.n	800acd4 <_svfiprintf_r+0xa0>
 800ad2e:	9b03      	ldr	r3, [sp, #12]
 800ad30:	1d19      	adds	r1, r3, #4
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	9103      	str	r1, [sp, #12]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	bfbb      	ittet	lt
 800ad3a:	425b      	neglt	r3, r3
 800ad3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad40:	9307      	strge	r3, [sp, #28]
 800ad42:	9307      	strlt	r3, [sp, #28]
 800ad44:	bfb8      	it	lt
 800ad46:	9204      	strlt	r2, [sp, #16]
 800ad48:	7823      	ldrb	r3, [r4, #0]
 800ad4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad4c:	d10a      	bne.n	800ad64 <_svfiprintf_r+0x130>
 800ad4e:	7863      	ldrb	r3, [r4, #1]
 800ad50:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad52:	d132      	bne.n	800adba <_svfiprintf_r+0x186>
 800ad54:	9b03      	ldr	r3, [sp, #12]
 800ad56:	3402      	adds	r4, #2
 800ad58:	1d1a      	adds	r2, r3, #4
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	9203      	str	r2, [sp, #12]
 800ad5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad62:	9305      	str	r3, [sp, #20]
 800ad64:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ae1c <_svfiprintf_r+0x1e8>
 800ad68:	2203      	movs	r2, #3
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	7821      	ldrb	r1, [r4, #0]
 800ad6e:	f000 f9ff 	bl	800b170 <memchr>
 800ad72:	b138      	cbz	r0, 800ad84 <_svfiprintf_r+0x150>
 800ad74:	2240      	movs	r2, #64	@ 0x40
 800ad76:	9b04      	ldr	r3, [sp, #16]
 800ad78:	eba0 000a 	sub.w	r0, r0, sl
 800ad7c:	4082      	lsls	r2, r0
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	3401      	adds	r4, #1
 800ad82:	9304      	str	r3, [sp, #16]
 800ad84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad88:	2206      	movs	r2, #6
 800ad8a:	4825      	ldr	r0, [pc, #148]	@ (800ae20 <_svfiprintf_r+0x1ec>)
 800ad8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad90:	f000 f9ee 	bl	800b170 <memchr>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d036      	beq.n	800ae06 <_svfiprintf_r+0x1d2>
 800ad98:	4b22      	ldr	r3, [pc, #136]	@ (800ae24 <_svfiprintf_r+0x1f0>)
 800ad9a:	bb1b      	cbnz	r3, 800ade4 <_svfiprintf_r+0x1b0>
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	3307      	adds	r3, #7
 800ada0:	f023 0307 	bic.w	r3, r3, #7
 800ada4:	3308      	adds	r3, #8
 800ada6:	9303      	str	r3, [sp, #12]
 800ada8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adaa:	4433      	add	r3, r6
 800adac:	9309      	str	r3, [sp, #36]	@ 0x24
 800adae:	e76a      	b.n	800ac86 <_svfiprintf_r+0x52>
 800adb0:	460c      	mov	r4, r1
 800adb2:	2001      	movs	r0, #1
 800adb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800adb8:	e7a8      	b.n	800ad0c <_svfiprintf_r+0xd8>
 800adba:	2300      	movs	r3, #0
 800adbc:	f04f 0c0a 	mov.w	ip, #10
 800adc0:	4619      	mov	r1, r3
 800adc2:	3401      	adds	r4, #1
 800adc4:	9305      	str	r3, [sp, #20]
 800adc6:	4620      	mov	r0, r4
 800adc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adcc:	3a30      	subs	r2, #48	@ 0x30
 800adce:	2a09      	cmp	r2, #9
 800add0:	d903      	bls.n	800adda <_svfiprintf_r+0x1a6>
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0c6      	beq.n	800ad64 <_svfiprintf_r+0x130>
 800add6:	9105      	str	r1, [sp, #20]
 800add8:	e7c4      	b.n	800ad64 <_svfiprintf_r+0x130>
 800adda:	4604      	mov	r4, r0
 800addc:	2301      	movs	r3, #1
 800adde:	fb0c 2101 	mla	r1, ip, r1, r2
 800ade2:	e7f0      	b.n	800adc6 <_svfiprintf_r+0x192>
 800ade4:	ab03      	add	r3, sp, #12
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	462a      	mov	r2, r5
 800adea:	4638      	mov	r0, r7
 800adec:	4b0e      	ldr	r3, [pc, #56]	@ (800ae28 <_svfiprintf_r+0x1f4>)
 800adee:	a904      	add	r1, sp, #16
 800adf0:	f3af 8000 	nop.w
 800adf4:	1c42      	adds	r2, r0, #1
 800adf6:	4606      	mov	r6, r0
 800adf8:	d1d6      	bne.n	800ada8 <_svfiprintf_r+0x174>
 800adfa:	89ab      	ldrh	r3, [r5, #12]
 800adfc:	065b      	lsls	r3, r3, #25
 800adfe:	f53f af2d 	bmi.w	800ac5c <_svfiprintf_r+0x28>
 800ae02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae04:	e72c      	b.n	800ac60 <_svfiprintf_r+0x2c>
 800ae06:	ab03      	add	r3, sp, #12
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	462a      	mov	r2, r5
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	4b06      	ldr	r3, [pc, #24]	@ (800ae28 <_svfiprintf_r+0x1f4>)
 800ae10:	a904      	add	r1, sp, #16
 800ae12:	f000 f87d 	bl	800af10 <_printf_i>
 800ae16:	e7ed      	b.n	800adf4 <_svfiprintf_r+0x1c0>
 800ae18:	0800e12e 	.word	0x0800e12e
 800ae1c:	0800e134 	.word	0x0800e134
 800ae20:	0800e138 	.word	0x0800e138
 800ae24:	00000000 	.word	0x00000000
 800ae28:	0800ab7d 	.word	0x0800ab7d

0800ae2c <_printf_common>:
 800ae2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae30:	4616      	mov	r6, r2
 800ae32:	4698      	mov	r8, r3
 800ae34:	688a      	ldr	r2, [r1, #8]
 800ae36:	690b      	ldr	r3, [r1, #16]
 800ae38:	4607      	mov	r7, r0
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	bfb8      	it	lt
 800ae3e:	4613      	movlt	r3, r2
 800ae40:	6033      	str	r3, [r6, #0]
 800ae42:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae46:	460c      	mov	r4, r1
 800ae48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae4c:	b10a      	cbz	r2, 800ae52 <_printf_common+0x26>
 800ae4e:	3301      	adds	r3, #1
 800ae50:	6033      	str	r3, [r6, #0]
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	0699      	lsls	r1, r3, #26
 800ae56:	bf42      	ittt	mi
 800ae58:	6833      	ldrmi	r3, [r6, #0]
 800ae5a:	3302      	addmi	r3, #2
 800ae5c:	6033      	strmi	r3, [r6, #0]
 800ae5e:	6825      	ldr	r5, [r4, #0]
 800ae60:	f015 0506 	ands.w	r5, r5, #6
 800ae64:	d106      	bne.n	800ae74 <_printf_common+0x48>
 800ae66:	f104 0a19 	add.w	sl, r4, #25
 800ae6a:	68e3      	ldr	r3, [r4, #12]
 800ae6c:	6832      	ldr	r2, [r6, #0]
 800ae6e:	1a9b      	subs	r3, r3, r2
 800ae70:	42ab      	cmp	r3, r5
 800ae72:	dc2b      	bgt.n	800aecc <_printf_common+0xa0>
 800ae74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae78:	6822      	ldr	r2, [r4, #0]
 800ae7a:	3b00      	subs	r3, #0
 800ae7c:	bf18      	it	ne
 800ae7e:	2301      	movne	r3, #1
 800ae80:	0692      	lsls	r2, r2, #26
 800ae82:	d430      	bmi.n	800aee6 <_printf_common+0xba>
 800ae84:	4641      	mov	r1, r8
 800ae86:	4638      	mov	r0, r7
 800ae88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae8c:	47c8      	blx	r9
 800ae8e:	3001      	adds	r0, #1
 800ae90:	d023      	beq.n	800aeda <_printf_common+0xae>
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	6922      	ldr	r2, [r4, #16]
 800ae96:	f003 0306 	and.w	r3, r3, #6
 800ae9a:	2b04      	cmp	r3, #4
 800ae9c:	bf14      	ite	ne
 800ae9e:	2500      	movne	r5, #0
 800aea0:	6833      	ldreq	r3, [r6, #0]
 800aea2:	f04f 0600 	mov.w	r6, #0
 800aea6:	bf08      	it	eq
 800aea8:	68e5      	ldreq	r5, [r4, #12]
 800aeaa:	f104 041a 	add.w	r4, r4, #26
 800aeae:	bf08      	it	eq
 800aeb0:	1aed      	subeq	r5, r5, r3
 800aeb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aeb6:	bf08      	it	eq
 800aeb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aebc:	4293      	cmp	r3, r2
 800aebe:	bfc4      	itt	gt
 800aec0:	1a9b      	subgt	r3, r3, r2
 800aec2:	18ed      	addgt	r5, r5, r3
 800aec4:	42b5      	cmp	r5, r6
 800aec6:	d11a      	bne.n	800aefe <_printf_common+0xd2>
 800aec8:	2000      	movs	r0, #0
 800aeca:	e008      	b.n	800aede <_printf_common+0xb2>
 800aecc:	2301      	movs	r3, #1
 800aece:	4652      	mov	r2, sl
 800aed0:	4641      	mov	r1, r8
 800aed2:	4638      	mov	r0, r7
 800aed4:	47c8      	blx	r9
 800aed6:	3001      	adds	r0, #1
 800aed8:	d103      	bne.n	800aee2 <_printf_common+0xb6>
 800aeda:	f04f 30ff 	mov.w	r0, #4294967295
 800aede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee2:	3501      	adds	r5, #1
 800aee4:	e7c1      	b.n	800ae6a <_printf_common+0x3e>
 800aee6:	2030      	movs	r0, #48	@ 0x30
 800aee8:	18e1      	adds	r1, r4, r3
 800aeea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aef4:	4422      	add	r2, r4
 800aef6:	3302      	adds	r3, #2
 800aef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aefc:	e7c2      	b.n	800ae84 <_printf_common+0x58>
 800aefe:	2301      	movs	r3, #1
 800af00:	4622      	mov	r2, r4
 800af02:	4641      	mov	r1, r8
 800af04:	4638      	mov	r0, r7
 800af06:	47c8      	blx	r9
 800af08:	3001      	adds	r0, #1
 800af0a:	d0e6      	beq.n	800aeda <_printf_common+0xae>
 800af0c:	3601      	adds	r6, #1
 800af0e:	e7d9      	b.n	800aec4 <_printf_common+0x98>

0800af10 <_printf_i>:
 800af10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af14:	7e0f      	ldrb	r7, [r1, #24]
 800af16:	4691      	mov	r9, r2
 800af18:	2f78      	cmp	r7, #120	@ 0x78
 800af1a:	4680      	mov	r8, r0
 800af1c:	460c      	mov	r4, r1
 800af1e:	469a      	mov	sl, r3
 800af20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af26:	d807      	bhi.n	800af38 <_printf_i+0x28>
 800af28:	2f62      	cmp	r7, #98	@ 0x62
 800af2a:	d80a      	bhi.n	800af42 <_printf_i+0x32>
 800af2c:	2f00      	cmp	r7, #0
 800af2e:	f000 80d3 	beq.w	800b0d8 <_printf_i+0x1c8>
 800af32:	2f58      	cmp	r7, #88	@ 0x58
 800af34:	f000 80ba 	beq.w	800b0ac <_printf_i+0x19c>
 800af38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af40:	e03a      	b.n	800afb8 <_printf_i+0xa8>
 800af42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af46:	2b15      	cmp	r3, #21
 800af48:	d8f6      	bhi.n	800af38 <_printf_i+0x28>
 800af4a:	a101      	add	r1, pc, #4	@ (adr r1, 800af50 <_printf_i+0x40>)
 800af4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af50:	0800afa9 	.word	0x0800afa9
 800af54:	0800afbd 	.word	0x0800afbd
 800af58:	0800af39 	.word	0x0800af39
 800af5c:	0800af39 	.word	0x0800af39
 800af60:	0800af39 	.word	0x0800af39
 800af64:	0800af39 	.word	0x0800af39
 800af68:	0800afbd 	.word	0x0800afbd
 800af6c:	0800af39 	.word	0x0800af39
 800af70:	0800af39 	.word	0x0800af39
 800af74:	0800af39 	.word	0x0800af39
 800af78:	0800af39 	.word	0x0800af39
 800af7c:	0800b0bf 	.word	0x0800b0bf
 800af80:	0800afe7 	.word	0x0800afe7
 800af84:	0800b079 	.word	0x0800b079
 800af88:	0800af39 	.word	0x0800af39
 800af8c:	0800af39 	.word	0x0800af39
 800af90:	0800b0e1 	.word	0x0800b0e1
 800af94:	0800af39 	.word	0x0800af39
 800af98:	0800afe7 	.word	0x0800afe7
 800af9c:	0800af39 	.word	0x0800af39
 800afa0:	0800af39 	.word	0x0800af39
 800afa4:	0800b081 	.word	0x0800b081
 800afa8:	6833      	ldr	r3, [r6, #0]
 800afaa:	1d1a      	adds	r2, r3, #4
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	6032      	str	r2, [r6, #0]
 800afb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afb8:	2301      	movs	r3, #1
 800afba:	e09e      	b.n	800b0fa <_printf_i+0x1ea>
 800afbc:	6833      	ldr	r3, [r6, #0]
 800afbe:	6820      	ldr	r0, [r4, #0]
 800afc0:	1d19      	adds	r1, r3, #4
 800afc2:	6031      	str	r1, [r6, #0]
 800afc4:	0606      	lsls	r6, r0, #24
 800afc6:	d501      	bpl.n	800afcc <_printf_i+0xbc>
 800afc8:	681d      	ldr	r5, [r3, #0]
 800afca:	e003      	b.n	800afd4 <_printf_i+0xc4>
 800afcc:	0645      	lsls	r5, r0, #25
 800afce:	d5fb      	bpl.n	800afc8 <_printf_i+0xb8>
 800afd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800afd4:	2d00      	cmp	r5, #0
 800afd6:	da03      	bge.n	800afe0 <_printf_i+0xd0>
 800afd8:	232d      	movs	r3, #45	@ 0x2d
 800afda:	426d      	negs	r5, r5
 800afdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afe0:	230a      	movs	r3, #10
 800afe2:	4859      	ldr	r0, [pc, #356]	@ (800b148 <_printf_i+0x238>)
 800afe4:	e011      	b.n	800b00a <_printf_i+0xfa>
 800afe6:	6821      	ldr	r1, [r4, #0]
 800afe8:	6833      	ldr	r3, [r6, #0]
 800afea:	0608      	lsls	r0, r1, #24
 800afec:	f853 5b04 	ldr.w	r5, [r3], #4
 800aff0:	d402      	bmi.n	800aff8 <_printf_i+0xe8>
 800aff2:	0649      	lsls	r1, r1, #25
 800aff4:	bf48      	it	mi
 800aff6:	b2ad      	uxthmi	r5, r5
 800aff8:	2f6f      	cmp	r7, #111	@ 0x6f
 800affa:	6033      	str	r3, [r6, #0]
 800affc:	bf14      	ite	ne
 800affe:	230a      	movne	r3, #10
 800b000:	2308      	moveq	r3, #8
 800b002:	4851      	ldr	r0, [pc, #324]	@ (800b148 <_printf_i+0x238>)
 800b004:	2100      	movs	r1, #0
 800b006:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b00a:	6866      	ldr	r6, [r4, #4]
 800b00c:	2e00      	cmp	r6, #0
 800b00e:	bfa8      	it	ge
 800b010:	6821      	ldrge	r1, [r4, #0]
 800b012:	60a6      	str	r6, [r4, #8]
 800b014:	bfa4      	itt	ge
 800b016:	f021 0104 	bicge.w	r1, r1, #4
 800b01a:	6021      	strge	r1, [r4, #0]
 800b01c:	b90d      	cbnz	r5, 800b022 <_printf_i+0x112>
 800b01e:	2e00      	cmp	r6, #0
 800b020:	d04b      	beq.n	800b0ba <_printf_i+0x1aa>
 800b022:	4616      	mov	r6, r2
 800b024:	fbb5 f1f3 	udiv	r1, r5, r3
 800b028:	fb03 5711 	mls	r7, r3, r1, r5
 800b02c:	5dc7      	ldrb	r7, [r0, r7]
 800b02e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b032:	462f      	mov	r7, r5
 800b034:	42bb      	cmp	r3, r7
 800b036:	460d      	mov	r5, r1
 800b038:	d9f4      	bls.n	800b024 <_printf_i+0x114>
 800b03a:	2b08      	cmp	r3, #8
 800b03c:	d10b      	bne.n	800b056 <_printf_i+0x146>
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	07df      	lsls	r7, r3, #31
 800b042:	d508      	bpl.n	800b056 <_printf_i+0x146>
 800b044:	6923      	ldr	r3, [r4, #16]
 800b046:	6861      	ldr	r1, [r4, #4]
 800b048:	4299      	cmp	r1, r3
 800b04a:	bfde      	ittt	le
 800b04c:	2330      	movle	r3, #48	@ 0x30
 800b04e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b052:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b056:	1b92      	subs	r2, r2, r6
 800b058:	6122      	str	r2, [r4, #16]
 800b05a:	464b      	mov	r3, r9
 800b05c:	4621      	mov	r1, r4
 800b05e:	4640      	mov	r0, r8
 800b060:	f8cd a000 	str.w	sl, [sp]
 800b064:	aa03      	add	r2, sp, #12
 800b066:	f7ff fee1 	bl	800ae2c <_printf_common>
 800b06a:	3001      	adds	r0, #1
 800b06c:	d14a      	bne.n	800b104 <_printf_i+0x1f4>
 800b06e:	f04f 30ff 	mov.w	r0, #4294967295
 800b072:	b004      	add	sp, #16
 800b074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	f043 0320 	orr.w	r3, r3, #32
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	2778      	movs	r7, #120	@ 0x78
 800b082:	4832      	ldr	r0, [pc, #200]	@ (800b14c <_printf_i+0x23c>)
 800b084:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	6831      	ldr	r1, [r6, #0]
 800b08c:	061f      	lsls	r7, r3, #24
 800b08e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b092:	d402      	bmi.n	800b09a <_printf_i+0x18a>
 800b094:	065f      	lsls	r7, r3, #25
 800b096:	bf48      	it	mi
 800b098:	b2ad      	uxthmi	r5, r5
 800b09a:	6031      	str	r1, [r6, #0]
 800b09c:	07d9      	lsls	r1, r3, #31
 800b09e:	bf44      	itt	mi
 800b0a0:	f043 0320 	orrmi.w	r3, r3, #32
 800b0a4:	6023      	strmi	r3, [r4, #0]
 800b0a6:	b11d      	cbz	r5, 800b0b0 <_printf_i+0x1a0>
 800b0a8:	2310      	movs	r3, #16
 800b0aa:	e7ab      	b.n	800b004 <_printf_i+0xf4>
 800b0ac:	4826      	ldr	r0, [pc, #152]	@ (800b148 <_printf_i+0x238>)
 800b0ae:	e7e9      	b.n	800b084 <_printf_i+0x174>
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	f023 0320 	bic.w	r3, r3, #32
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	e7f6      	b.n	800b0a8 <_printf_i+0x198>
 800b0ba:	4616      	mov	r6, r2
 800b0bc:	e7bd      	b.n	800b03a <_printf_i+0x12a>
 800b0be:	6833      	ldr	r3, [r6, #0]
 800b0c0:	6825      	ldr	r5, [r4, #0]
 800b0c2:	1d18      	adds	r0, r3, #4
 800b0c4:	6961      	ldr	r1, [r4, #20]
 800b0c6:	6030      	str	r0, [r6, #0]
 800b0c8:	062e      	lsls	r6, r5, #24
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	d501      	bpl.n	800b0d2 <_printf_i+0x1c2>
 800b0ce:	6019      	str	r1, [r3, #0]
 800b0d0:	e002      	b.n	800b0d8 <_printf_i+0x1c8>
 800b0d2:	0668      	lsls	r0, r5, #25
 800b0d4:	d5fb      	bpl.n	800b0ce <_printf_i+0x1be>
 800b0d6:	8019      	strh	r1, [r3, #0]
 800b0d8:	2300      	movs	r3, #0
 800b0da:	4616      	mov	r6, r2
 800b0dc:	6123      	str	r3, [r4, #16]
 800b0de:	e7bc      	b.n	800b05a <_printf_i+0x14a>
 800b0e0:	6833      	ldr	r3, [r6, #0]
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	1d1a      	adds	r2, r3, #4
 800b0e6:	6032      	str	r2, [r6, #0]
 800b0e8:	681e      	ldr	r6, [r3, #0]
 800b0ea:	6862      	ldr	r2, [r4, #4]
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f000 f83f 	bl	800b170 <memchr>
 800b0f2:	b108      	cbz	r0, 800b0f8 <_printf_i+0x1e8>
 800b0f4:	1b80      	subs	r0, r0, r6
 800b0f6:	6060      	str	r0, [r4, #4]
 800b0f8:	6863      	ldr	r3, [r4, #4]
 800b0fa:	6123      	str	r3, [r4, #16]
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b102:	e7aa      	b.n	800b05a <_printf_i+0x14a>
 800b104:	4632      	mov	r2, r6
 800b106:	4649      	mov	r1, r9
 800b108:	4640      	mov	r0, r8
 800b10a:	6923      	ldr	r3, [r4, #16]
 800b10c:	47d0      	blx	sl
 800b10e:	3001      	adds	r0, #1
 800b110:	d0ad      	beq.n	800b06e <_printf_i+0x15e>
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	079b      	lsls	r3, r3, #30
 800b116:	d413      	bmi.n	800b140 <_printf_i+0x230>
 800b118:	68e0      	ldr	r0, [r4, #12]
 800b11a:	9b03      	ldr	r3, [sp, #12]
 800b11c:	4298      	cmp	r0, r3
 800b11e:	bfb8      	it	lt
 800b120:	4618      	movlt	r0, r3
 800b122:	e7a6      	b.n	800b072 <_printf_i+0x162>
 800b124:	2301      	movs	r3, #1
 800b126:	4632      	mov	r2, r6
 800b128:	4649      	mov	r1, r9
 800b12a:	4640      	mov	r0, r8
 800b12c:	47d0      	blx	sl
 800b12e:	3001      	adds	r0, #1
 800b130:	d09d      	beq.n	800b06e <_printf_i+0x15e>
 800b132:	3501      	adds	r5, #1
 800b134:	68e3      	ldr	r3, [r4, #12]
 800b136:	9903      	ldr	r1, [sp, #12]
 800b138:	1a5b      	subs	r3, r3, r1
 800b13a:	42ab      	cmp	r3, r5
 800b13c:	dcf2      	bgt.n	800b124 <_printf_i+0x214>
 800b13e:	e7eb      	b.n	800b118 <_printf_i+0x208>
 800b140:	2500      	movs	r5, #0
 800b142:	f104 0619 	add.w	r6, r4, #25
 800b146:	e7f5      	b.n	800b134 <_printf_i+0x224>
 800b148:	0800e13f 	.word	0x0800e13f
 800b14c:	0800e150 	.word	0x0800e150

0800b150 <_sbrk_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	2300      	movs	r3, #0
 800b154:	4d05      	ldr	r5, [pc, #20]	@ (800b16c <_sbrk_r+0x1c>)
 800b156:	4604      	mov	r4, r0
 800b158:	4608      	mov	r0, r1
 800b15a:	602b      	str	r3, [r5, #0]
 800b15c:	f7f6 fe1a 	bl	8001d94 <_sbrk>
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d102      	bne.n	800b16a <_sbrk_r+0x1a>
 800b164:	682b      	ldr	r3, [r5, #0]
 800b166:	b103      	cbz	r3, 800b16a <_sbrk_r+0x1a>
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	bd38      	pop	{r3, r4, r5, pc}
 800b16c:	200019f8 	.word	0x200019f8

0800b170 <memchr>:
 800b170:	4603      	mov	r3, r0
 800b172:	b510      	push	{r4, lr}
 800b174:	b2c9      	uxtb	r1, r1
 800b176:	4402      	add	r2, r0
 800b178:	4293      	cmp	r3, r2
 800b17a:	4618      	mov	r0, r3
 800b17c:	d101      	bne.n	800b182 <memchr+0x12>
 800b17e:	2000      	movs	r0, #0
 800b180:	e003      	b.n	800b18a <memchr+0x1a>
 800b182:	7804      	ldrb	r4, [r0, #0]
 800b184:	3301      	adds	r3, #1
 800b186:	428c      	cmp	r4, r1
 800b188:	d1f6      	bne.n	800b178 <memchr+0x8>
 800b18a:	bd10      	pop	{r4, pc}

0800b18c <memcpy>:
 800b18c:	440a      	add	r2, r1
 800b18e:	4291      	cmp	r1, r2
 800b190:	f100 33ff 	add.w	r3, r0, #4294967295
 800b194:	d100      	bne.n	800b198 <memcpy+0xc>
 800b196:	4770      	bx	lr
 800b198:	b510      	push	{r4, lr}
 800b19a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b19e:	4291      	cmp	r1, r2
 800b1a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1a4:	d1f9      	bne.n	800b19a <memcpy+0xe>
 800b1a6:	bd10      	pop	{r4, pc}

0800b1a8 <_realloc_r>:
 800b1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	4615      	mov	r5, r2
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	b921      	cbnz	r1, 800b1be <_realloc_r+0x16>
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ba:	f7ff bc53 	b.w	800aa64 <_malloc_r>
 800b1be:	b92a      	cbnz	r2, 800b1cc <_realloc_r+0x24>
 800b1c0:	f7ff fbe6 	bl	800a990 <_free_r>
 800b1c4:	2400      	movs	r4, #0
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1cc:	f000 f81a 	bl	800b204 <_malloc_usable_size_r>
 800b1d0:	4285      	cmp	r5, r0
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	d802      	bhi.n	800b1dc <_realloc_r+0x34>
 800b1d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b1da:	d8f4      	bhi.n	800b1c6 <_realloc_r+0x1e>
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4640      	mov	r0, r8
 800b1e0:	f7ff fc40 	bl	800aa64 <_malloc_r>
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d0ec      	beq.n	800b1c4 <_realloc_r+0x1c>
 800b1ea:	42b5      	cmp	r5, r6
 800b1ec:	462a      	mov	r2, r5
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	bf28      	it	cs
 800b1f2:	4632      	movcs	r2, r6
 800b1f4:	f7ff ffca 	bl	800b18c <memcpy>
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	4640      	mov	r0, r8
 800b1fc:	f7ff fbc8 	bl	800a990 <_free_r>
 800b200:	463c      	mov	r4, r7
 800b202:	e7e0      	b.n	800b1c6 <_realloc_r+0x1e>

0800b204 <_malloc_usable_size_r>:
 800b204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b208:	1f18      	subs	r0, r3, #4
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	bfbc      	itt	lt
 800b20e:	580b      	ldrlt	r3, [r1, r0]
 800b210:	18c0      	addlt	r0, r0, r3
 800b212:	4770      	bx	lr

0800b214 <_init>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	bf00      	nop
 800b218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21a:	bc08      	pop	{r3}
 800b21c:	469e      	mov	lr, r3
 800b21e:	4770      	bx	lr

0800b220 <_fini>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	bf00      	nop
 800b224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b226:	bc08      	pop	{r3}
 800b228:	469e      	mov	lr, r3
 800b22a:	4770      	bx	lr
