
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f44  0800a800  0800a800  0000b800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d744  0800d744  0000f1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d744  0800d744  0000e744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d74c  0800d74c  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d74c  0800d74c  0000e74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d750  0800d750  0000e750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800d754  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001838  200001ec  0800d940  0000f1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a24  0800d940  0000fa24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016250  00000000  00000000  0000f215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc7  00000000  00000000  00025465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00029130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb5  00000000  00000000  0002a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb2d  00000000  00000000  0002b57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b484  00000000  00000000  000470aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a93  00000000  00000000  0006252e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6fc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a7c  00000000  00000000  000f7004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000fca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a7e8 	.word	0x0800a7e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	0800a7e8 	.word	0x0800a7e8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2uiz>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	d20e      	bcs.n	8000502 <__aeabi_f2uiz+0x22>
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004e8:	d30b      	bcc.n	8000502 <__aeabi_f2uiz+0x22>
 80004ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d409      	bmi.n	8000508 <__aeabi_f2uiz+0x28>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000500:	4770      	bx	lr
 8000502:	f04f 0000 	mov.w	r0, #0
 8000506:	4770      	bx	lr
 8000508:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800050c:	d101      	bne.n	8000512 <__aeabi_f2uiz+0x32>
 800050e:	0242      	lsls	r2, r0, #9
 8000510:	d102      	bne.n	8000518 <__aeabi_f2uiz+0x38>
 8000512:	f04f 30ff 	mov.w	r0, #4294967295
 8000516:	4770      	bx	lr
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	889b      	ldrh	r3, [r3, #4]
 800053e:	2201      	movs	r2, #1
 8000540:	4619      	mov	r1, r3
 8000542:	f001 fdfc 	bl	800213e <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	889b      	ldrh	r3, [r3, #4]
 800054a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 800054c:	2311      	movs	r3, #17
 800054e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	79db      	ldrb	r3, [r3, #7]
 8000554:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000556:	2303      	movs	r3, #3
 8000558:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f107 0208 	add.w	r2, r7, #8
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f001 fc4f 	bl	8001e08 <HAL_GPIO_Init>
}
 800056a:	bf00      	nop
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8000572:	b580      	push	{r7, lr}
 8000574:	b086      	sub	sp, #24
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	889b      	ldrh	r3, [r3, #4]
 800058c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	79db      	ldrb	r3, [r3, #7]
 8000596:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f107 0208 	add.w	r2, r7, #8
 80005a0:	4611      	mov	r1, r2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fc30 	bl	8001e08 <HAL_GPIO_Init>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80005ba:	4a76      	ldr	r2, [pc, #472]	@ (8000794 <DHT_getData+0x1e4>)
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c4:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	799b      	ldrb	r3, [r3, #6]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d103      	bne.n	80005d8 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 80005d0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80005d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80005d6:	e002      	b.n	80005de <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 80005d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 80005de:	f000 ffb1 	bl	8001544 <HAL_GetTick>
 80005e2:	4602      	mov	r2, r0
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	1ad2      	subs	r2, r2, r3
 80005ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d212      	bcs.n	8000616 <DHT_getData+0x66>
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00e      	beq.n	8000616 <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	61bb      	str	r3, [r7, #24]
		return data;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	461a      	mov	r2, r3
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000610:	e882 0003 	stmia.w	r2, {r0, r1}
 8000614:	e166      	b.n	80008e4 <DHT_getData+0x334>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8000616:	f000 ff95 	bl	8001544 <HAL_GetTick>
 800061a:	4603      	mov	r3, r0
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f7ff ff7c 	bl	8000520 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	889b      	ldrh	r3, [r3, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	f001 fd83 	bl	800213e <HAL_GPIO_WritePin>
	Delay(18);
 8000638:	2012      	movs	r0, #18
 800063a:	f000 ff8d 	bl	8001558 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	889b      	ldrh	r3, [r3, #4]
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	f001 fd78 	bl	800213e <HAL_GPIO_WritePin>
	goToInput(sensor);
 800064e:	6838      	ldr	r0, [r7, #0]
 8000650:	f7ff ff8f 	bl	8000572 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 800065c:	e01a      	b.n	8000694 <DHT_getData+0xe4>
		timeout++;
 800065e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000660:	3301      	adds	r3, #1
 8000662:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8000664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000666:	f242 7210 	movw	r2, #10000	@ 0x2710
 800066a:	4293      	cmp	r3, r2
 800066c:	d912      	bls.n	8000694 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 800066e:	b662      	cpsie	i
}
 8000670:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000678:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000680:	60da      	str	r2, [r3, #12]

			return data;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	461a      	mov	r2, r3
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800068e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000692:	e127      	b.n	80008e4 <DHT_getData+0x334>
	while(getLine()) {
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	889b      	ldrh	r3, [r3, #4]
 800069c:	4619      	mov	r1, r3
 800069e:	4610      	mov	r0, r2
 80006a0:	f001 fd36 	bl	8002110 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d0d9      	beq.n	800065e <DHT_getData+0xae>
		}
	}
	timeout = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание подъёма
	while(!getLine()) {
 80006ae:	e01a      	b.n	80006e6 <DHT_getData+0x136>
		timeout++;
 80006b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006b2:	3301      	adds	r3, #1
 80006b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 80006b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006bc:	4293      	cmp	r3, r2
 80006be:	d912      	bls.n	80006e6 <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 80006c0:	b662      	cpsie	i
}
 80006c2:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80006ca:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80006d2:	60da      	str	r2, [r3, #12]

			return data;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	461a      	mov	r2, r3
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80006e4:	e0fe      	b.n	80008e4 <DHT_getData+0x334>
	while(!getLine()) {
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	889b      	ldrh	r3, [r3, #4]
 80006ee:	4619      	mov	r1, r3
 80006f0:	4610      	mov	r0, r2
 80006f2:	f001 fd0d 	bl	8002110 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d1d9      	bne.n	80006b0 <DHT_getData+0x100>
		}
	}
	timeout = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 8000700:	e012      	b.n	8000728 <DHT_getData+0x178>
		timeout++;
 8000702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000704:	3301      	adds	r3, #1
 8000706:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8000708:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800070a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800070e:	4293      	cmp	r3, r2
 8000710:	d90a      	bls.n	8000728 <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 8000712:	b662      	cpsie	i
}
 8000714:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	461a      	mov	r2, r3
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000722:	e882 0003 	stmia.w	r2, {r0, r1}
 8000726:	e0dd      	b.n	80008e4 <DHT_getData+0x334>
	while(getLine()) {
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	889b      	ldrh	r3, [r3, #4]
 8000730:	4619      	mov	r1, r3
 8000732:	4610      	mov	r0, r2
 8000734:	f001 fcec 	bl	8002110 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d0e1      	beq.n	8000702 <DHT_getData+0x152>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 800073e:	4a16      	ldr	r2, [pc, #88]	@ (8000798 <DHT_getData+0x1e8>)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000748:	6018      	str	r0, [r3, #0]
 800074a:	3304      	adds	r3, #4
 800074c:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 800074e:	2300      	movs	r3, #0
 8000750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000754:	e05d      	b.n	8000812 <DHT_getData+0x262>
		for(uint8_t b = 7; b != 255; b--) {
 8000756:	2307      	movs	r3, #7
 8000758:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800075c:	e050      	b.n	8000800 <DHT_getData+0x250>
			uint16_t hT = 0, lT = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	843b      	strh	r3, [r7, #32]
 8000762:	2300      	movs	r3, #0
 8000764:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8000766:	e002      	b.n	800076e <DHT_getData+0x1be>
 8000768:	8bfb      	ldrh	r3, [r7, #30]
 800076a:	3301      	adds	r3, #1
 800076c:	83fb      	strh	r3, [r7, #30]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	889b      	ldrh	r3, [r3, #4]
 8000776:	4619      	mov	r1, r3
 8000778:	4610      	mov	r0, r2
 800077a:	f001 fcc9 	bl	8002110 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b01      	cmp	r3, #1
 8000782:	d004      	beq.n	800078e <DHT_getData+0x1de>
 8000784:	8bfb      	ldrh	r3, [r7, #30]
 8000786:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800078a:	4293      	cmp	r3, r2
 800078c:	d1ec      	bne.n	8000768 <DHT_getData+0x1b8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	84bb      	strh	r3, [r7, #36]	@ 0x24
			while(getLine()&& hT != 65535) hT++;
 8000792:	e006      	b.n	80007a2 <DHT_getData+0x1f2>
 8000794:	0800a800 	.word	0x0800a800
 8000798:	0800a808 	.word	0x0800a808
 800079c:	8c3b      	ldrh	r3, [r7, #32]
 800079e:	3301      	adds	r3, #1
 80007a0:	843b      	strh	r3, [r7, #32]
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	889b      	ldrh	r3, [r3, #4]
 80007aa:	4619      	mov	r1, r3
 80007ac:	4610      	mov	r0, r2
 80007ae:	f001 fcaf 	bl	8002110 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d104      	bne.n	80007c2 <DHT_getData+0x212>
 80007b8:	8c3b      	ldrh	r3, [r7, #32]
 80007ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007be:	4293      	cmp	r3, r2
 80007c0:	d1ec      	bne.n	800079c <DHT_getData+0x1ec>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80007c2:	8c3a      	ldrh	r2, [r7, #32]
 80007c4:	8bfb      	ldrh	r3, [r7, #30]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d915      	bls.n	80007f6 <DHT_getData+0x246>
 80007ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80007ce:	3328      	adds	r3, #40	@ 0x28
 80007d0:	443b      	add	r3, r7
 80007d2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80007d6:	b25a      	sxtb	r2, r3
 80007d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80007dc:	2101      	movs	r1, #1
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	3328      	adds	r3, #40	@ 0x28
 80007f0:	443b      	add	r3, r7
 80007f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 80007f6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000800:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000804:	2bff      	cmp	r3, #255	@ 0xff
 8000806:	d1aa      	bne.n	800075e <DHT_getData+0x1ae>
	for(uint8_t a = 0; a < 5; a++) {
 8000808:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800080c:	3301      	adds	r3, #1
 800080e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000812:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000816:	2b04      	cmp	r3, #4
 8000818:	d99d      	bls.n	8000756 <DHT_getData+0x1a6>
  __ASM volatile ("cpsie i" : : : "memory");
 800081a:	b662      	cpsie	i
}
 800081c:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 800081e:	7b3a      	ldrb	r2, [r7, #12]
 8000820:	7b7b      	ldrb	r3, [r7, #13]
 8000822:	4413      	add	r3, r2
 8000824:	b2da      	uxtb	r2, r3
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	4413      	add	r3, r2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	4413      	add	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	7c3b      	ldrb	r3, [r7, #16]
 8000834:	429a      	cmp	r2, r3
 8000836:	d147      	bne.n	80008c8 <DHT_getData+0x318>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	799b      	ldrb	r3, [r3, #6]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d133      	bne.n	80008a8 <DHT_getData+0x2f8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8000840:	7b3b      	ldrb	r3, [r7, #12]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	7b7a      	ldrb	r2, [r7, #13]
 8000846:	4313      	orrs	r3, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fdf5 	bl	8000438 <__aeabi_i2f>
 800084e:	4603      	mov	r3, r0
 8000850:	4926      	ldr	r1, [pc, #152]	@ (80008ec <DHT_getData+0x33c>)
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fc82 	bl	800015c <__aeabi_fmul>
 8000858:	4603      	mov	r3, r0
 800085a:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	b25b      	sxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	db0e      	blt.n	8000882 <DHT_getData+0x2d2>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	4313      	orrs	r3, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fde3 	bl	8000438 <__aeabi_i2f>
 8000872:	4603      	mov	r3, r0
 8000874:	491d      	ldr	r1, [pc, #116]	@ (80008ec <DHT_getData+0x33c>)
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fc70 	bl	800015c <__aeabi_fmul>
 800087c:	4603      	mov	r3, r0
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	e012      	b.n	80008a8 <DHT_getData+0x2f8>
			}	else {
				rawData[2] &= ~(1<<7);
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000888:	b2db      	uxtb	r3, r3
 800088a:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	4313      	orrs	r3, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fdcf 	bl	8000438 <__aeabi_i2f>
 800089a:	4603      	mov	r3, r0
 800089c:	4914      	ldr	r1, [pc, #80]	@ (80008f0 <DHT_getData+0x340>)
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fc5c 	bl	800015c <__aeabi_fmul>
 80008a4:	4603      	mov	r3, r0
 80008a6:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	799b      	ldrb	r3, [r3, #6]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10b      	bne.n	80008c8 <DHT_getData+0x318>
			data.hum = (float)rawData[0];
 80008b0:	7b3b      	ldrb	r3, [r7, #12]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fdbc 	bl	8000430 <__aeabi_ui2f>
 80008b8:	4603      	mov	r3, r0
 80008ba:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80008bc:	7bbb      	ldrb	r3, [r7, #14]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fdb6 	bl	8000430 <__aeabi_ui2f>
 80008c4:	4603      	mov	r3, r0
 80008c6:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	461a      	mov	r2, r3
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008e0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	3dcccccd 	.word	0x3dcccccd
 80008f0:	bdcccccd 	.word	0xbdcccccd

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b093      	sub	sp, #76	@ 0x4c
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 fdcb 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f873 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f000 f989 	bl	8000c18 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000906:	f008 fe23 	bl	8009550 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800090a:	f000 f8cb 	bl	8000aa4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800090e:	f000 f907 	bl	8000b20 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000912:	f000 f933 	bl	8000b7c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000916:	482c      	ldr	r0, [pc, #176]	@ (80009c8 <main+0xd4>)
 8000918:	f000 ff1a 	bl	8001750 <HAL_ADC_Start>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000922:	482a      	ldr	r0, [pc, #168]	@ (80009cc <main+0xd8>)
 8000924:	f001 fc0b 	bl	800213e <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim4);
 8000928:	4829      	ldr	r0, [pc, #164]	@ (80009d0 <main+0xdc>)
 800092a:	f004 fb55 	bl	8004fd8 <HAL_TIM_Base_Start_IT>
  ssd1306_Init();
 800092e:	f000 fa17 	bl	8000d60 <ssd1306_Init>
  ssd1306_TestFonts();
 8000932:	f000 fbf3 	bl	800111c <ssd1306_TestFonts>


  DHT_sensor livingRoom = {GPIOB, GPIO_PIN_4, DHT11, GPIO_NOPULL};
 8000936:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <main+0xe0>)
 8000948:	637b      	str	r3, [r7, #52]	@ 0x34
 800094a:	2310      	movs	r3, #16
 800094c:	873b      	strh	r3, [r7, #56]	@ 0x38
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

	    //Буффер для печати текста
	    char msg[40];
	    //Получение данных с датчика DHT11
	    DHT_data d = DHT_getData(&livingRoom);
 800094e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000952:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe29 	bl	80005b0 <DHT_getData>
	    //Печать данных в буффер
	    sprintf(msg, "\fLiving room: Temp %d°C, Hum %d%%\r\n", (uint8_t)d.temp, (uint8_t)d.hum);
 800095e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fdbd 	bl	80004e0 <__aeabi_f2uiz>
 8000966:	4603      	mov	r3, r0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	461c      	mov	r4, r3
 800096c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fdb6 	bl	80004e0 <__aeabi_f2uiz>
 8000974:	4603      	mov	r3, r0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	1d38      	adds	r0, r7, #4
 800097a:	4622      	mov	r2, r4
 800097c:	4916      	ldr	r1, [pc, #88]	@ (80009d8 <main+0xe4>)
 800097e:	f009 fa83 	bl	8009e88 <siprintf>

		  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fbe1 	bl	800014c <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f008 fe9a 	bl	80096cc <CDC_Transmit_FS>

	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8000998:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <main+0xd4>)
 800099a:	f000 ff87 	bl	80018ac <HAL_ADC_GetValue>
 800099e:	4603      	mov	r3, r0
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <main+0xe8>)
 80009a4:	801a      	strh	r2, [r3, #0]
	  sprintf(CDC_BUFFER,"ADC: %hu  \r\n",ADC_BUFFER);
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <main+0xe8>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	@ (80009e0 <main+0xec>)
 80009ae:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <main+0xf0>)
 80009b0:	f009 fa6a 	bl	8009e88 <siprintf>
	  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 80009b4:	211e      	movs	r1, #30
 80009b6:	480b      	ldr	r0, [pc, #44]	@ (80009e4 <main+0xf0>)
 80009b8:	f008 fe88 	bl	80096cc <CDC_Transmit_FS>
	  	  HAL_Delay(100);
 80009bc:	2064      	movs	r0, #100	@ 0x64
 80009be:	f000 fdcb 	bl	8001558 <HAL_Delay>
  {
 80009c2:	bf00      	nop
 80009c4:	e7c3      	b.n	800094e <main+0x5a>
 80009c6:	bf00      	nop
 80009c8:	20000208 	.word	0x20000208
 80009cc:	40011000 	.word	0x40011000
 80009d0:	2000028c 	.word	0x2000028c
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	0800a810 	.word	0x0800a810
 80009dc:	200002f2 	.word	0x200002f2
 80009e0:	0800a838 	.word	0x0800a838
 80009e4:	200002d4 	.word	0x200002d4

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	@ 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009f2:	2228      	movs	r2, #40	@ 0x28
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f009 fa80 	bl	8009efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a26:	2301      	movs	r3, #1
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a34:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 fdc8 	bl	80045d4 <HAL_RCC_OscConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a4a:	f000 f94b 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4e:	230f      	movs	r3, #15
 8000a50:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 f834 	bl	8004ad8 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a76:	f000 f935 	bl	8000ce4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000a7a:	2312      	movs	r3, #18
 8000a7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a82:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f004 f99e 	bl	8004dcc <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a96:	f000 f925 	bl	8000ce4 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3750      	adds	r7, #80	@ 0x50
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_ADC1_Init+0x74>)
 8000ab6:	4a19      	ldr	r2, [pc, #100]	@ (8000b1c <MX_ADC1_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_ADC1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_ADC1_Init+0x74>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_ADC1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_ADC1_Init+0x74>)
 8000ace:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000ad2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <MX_ADC1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_ADC1_Init+0x74>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae0:	480d      	ldr	r0, [pc, #52]	@ (8000b18 <MX_ADC1_Init+0x74>)
 8000ae2:	f000 fd5d 	bl	80015a0 <HAL_ADC_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 f8fa 	bl	8000ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_ADC1_Init+0x74>)
 8000b02:	f000 fedf 	bl	80018c4 <HAL_ADC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b0c:	f000 f8ea 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000208 	.word	0x20000208
 8000b1c:	40012400 	.word	0x40012400

08000b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <MX_I2C1_Init+0x50>)
 8000b26:	4a13      	ldr	r2, [pc, #76]	@ (8000b74 <MX_I2C1_Init+0x54>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_I2C1_Init+0x50>)
 8000b2c:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <MX_I2C1_Init+0x58>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_I2C1_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_I2C1_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_I2C1_Init+0x50>)
 8000b3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <MX_I2C1_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_I2C1_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <MX_I2C1_Init+0x50>)
 8000b5e:	f001 fb1f 	bl	80021a0 <HAL_I2C_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b68:	f000 f8bc 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000238 	.word	0x20000238
 8000b74:	40005400 	.word	0x40005400
 8000b78:	00061a80 	.word	0x00061a80

08000b7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	463b      	mov	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <MX_TIM4_Init+0x94>)
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c14 <MX_TIM4_Init+0x98>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_TIM4_Init+0x94>)
 8000ba0:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000ba4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_TIM4_Init+0x94>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8000bac:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <MX_TIM4_Init+0x94>)
 8000bae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000bb2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_TIM4_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <MX_TIM4_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bc0:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <MX_TIM4_Init+0x94>)
 8000bc2:	f004 f9b9 	bl	8004f38 <HAL_TIM_Base_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000bcc:	f000 f88a 	bl	8000ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <MX_TIM4_Init+0x94>)
 8000bde:	f004 fb55 	bl	800528c <HAL_TIM_ConfigClockSource>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000be8:	f000 f87c 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_TIM4_Init+0x94>)
 8000bfa:	f004 fd33 	bl	8005664 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c04:	f000 f86e 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000028c 	.word	0x2000028c
 8000c14:	40000800 	.word	0x40000800

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a29      	ldr	r2, [pc, #164]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c44:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a23      	ldr	r2, [pc, #140]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c4a:	f043 0320 	orr.w	r3, r3, #32
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a17      	ldr	r2, [pc, #92]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_GPIO_Init+0xc0>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c92:	4812      	ldr	r0, [pc, #72]	@ (8000cdc <MX_GPIO_Init+0xc4>)
 8000c94:	f001 fa53 	bl	800213e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480a      	ldr	r0, [pc, #40]	@ (8000cdc <MX_GPIO_Init+0xc4>)
 8000cb2:	f001 f8a9 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_GPIO_Init+0xc8>)
 8000cca:	f001 f89d 	bl	8001e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <Error_Handler+0x8>

08000cf0 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af04      	add	r7, sp, #16
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	2200      	movs	r2, #0
 8000d18:	2178      	movs	r1, #120	@ 0x78
 8000d1a:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <ssd1306_WriteCommand+0x2c>)
 8000d1c:	f001 fb84 	bl	8002428 <HAL_I2C_Mem_Write>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000238 	.word	0x20000238

08000d2c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3e:	9202      	str	r2, [sp, #8]
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	2240      	movs	r2, #64	@ 0x40
 8000d4a:	2178      	movs	r1, #120	@ 0x78
 8000d4c:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <ssd1306_WriteData+0x30>)
 8000d4e:	f001 fb6b 	bl	8002428 <HAL_I2C_Mem_Write>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000238 	.word	0x20000238

08000d60 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000d64:	f7ff ffc4 	bl	8000cf0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000d68:	2064      	movs	r0, #100	@ 0x64
 8000d6a:	f000 fbf5 	bl	8001558 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8000d6e:	20ae      	movs	r0, #174	@ 0xae
 8000d70:	f7ff ffc4 	bl	8000cfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8000d74:	2020      	movs	r0, #32
 8000d76:	f7ff ffc1 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff ffbe 	bl	8000cfc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d80:	20b0      	movs	r0, #176	@ 0xb0
 8000d82:	f7ff ffbb 	bl	8000cfc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000d86:	20c8      	movs	r0, #200	@ 0xc8
 8000d88:	f7ff ffb8 	bl	8000cfc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff ffb5 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000d92:	2010      	movs	r0, #16
 8000d94:	f7ff ffb2 	bl	8000cfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000d98:	2040      	movs	r0, #64	@ 0x40
 8000d9a:	f7ff ffaf 	bl	8000cfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8000d9e:	2081      	movs	r0, #129	@ 0x81
 8000da0:	f7ff ffac 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8000da4:	20ff      	movs	r0, #255	@ 0xff
 8000da6:	f7ff ffa9 	bl	8000cfc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000daa:	20a1      	movs	r0, #161	@ 0xa1
 8000dac:	f7ff ffa6 	bl	8000cfc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000db0:	20a6      	movs	r0, #166	@ 0xa6
 8000db2:	f7ff ffa3 	bl	8000cfc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000db6:	20a8      	movs	r0, #168	@ 0xa8
 8000db8:	f7ff ffa0 	bl	8000cfc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000dbc:	203f      	movs	r0, #63	@ 0x3f
 8000dbe:	f7ff ff9d 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000dc2:	20a4      	movs	r0, #164	@ 0xa4
 8000dc4:	f7ff ff9a 	bl	8000cfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000dc8:	20d3      	movs	r0, #211	@ 0xd3
 8000dca:	f7ff ff97 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff ff94 	bl	8000cfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000dd4:	20d5      	movs	r0, #213	@ 0xd5
 8000dd6:	f7ff ff91 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000dda:	20f0      	movs	r0, #240	@ 0xf0
 8000ddc:	f7ff ff8e 	bl	8000cfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000de0:	20d9      	movs	r0, #217	@ 0xd9
 8000de2:	f7ff ff8b 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000de6:	2022      	movs	r0, #34	@ 0x22
 8000de8:	f7ff ff88 	bl	8000cfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000dec:	20da      	movs	r0, #218	@ 0xda
 8000dee:	f7ff ff85 	bl	8000cfc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000df2:	2012      	movs	r0, #18
 8000df4:	f7ff ff82 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000df8:	20db      	movs	r0, #219	@ 0xdb
 8000dfa:	f7ff ff7f 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000dfe:	2020      	movs	r0, #32
 8000e00:	f7ff ff7c 	bl	8000cfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000e04:	208d      	movs	r0, #141	@ 0x8d
 8000e06:	f7ff ff79 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f7ff ff76 	bl	8000cfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000e10:	20af      	movs	r0, #175	@ 0xaf
 8000e12:	f7ff ff73 	bl	8000cfc <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f810 	bl	8000e3c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000e1c:	f000 f830 	bl	8000e80 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <ssd1306_Init+0xd8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000e26:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <ssd1306_Init+0xd8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	@ (8000e38 <ssd1306_Init+0xd8>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	715a      	strb	r2, [r3, #5]
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200006f4 	.word	0x200006f4

08000e3c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	e00d      	b.n	8000e68 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <ssd1306_Fill+0x1a>
 8000e52:	2100      	movs	r1, #0
 8000e54:	e000      	b.n	8000e58 <ssd1306_Fill+0x1c>
 8000e56:	21ff      	movs	r1, #255	@ 0xff
 8000e58:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <ssd1306_Fill+0x40>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	460a      	mov	r2, r1
 8000e60:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3301      	adds	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e6e:	d3ed      	bcc.n	8000e4c <ssd1306_Fill+0x10>
    }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	200002f4 	.word	0x200002f4

08000e80 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e86:	2300      	movs	r3, #0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e016      	b.n	8000eba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	3b50      	subs	r3, #80	@ 0x50
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff32 	bl	8000cfc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff ff2f 	bl	8000cfc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000e9e:	2010      	movs	r0, #16
 8000ea0:	f7ff ff2c 	bl	8000cfc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	01db      	lsls	r3, r3, #7
 8000ea8:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <ssd1306_UpdateScreen+0x4c>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	2180      	movs	r1, #128	@ 0x80
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff3c 	bl	8000d2c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b07      	cmp	r3, #7
 8000ebe:	d9e5      	bls.n	8000e8c <ssd1306_UpdateScreen+0xc>
    }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200002f4 	.word	0x200002f4

08000ed0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	460b      	mov	r3, r1
 8000edc:	71bb      	strb	r3, [r7, #6]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db48      	blt.n	8000f7c <ssd1306_DrawPixel+0xac>
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	2b3f      	cmp	r3, #63	@ 0x3f
 8000eee:	d845      	bhi.n	8000f7c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000ef0:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <ssd1306_DrawPixel+0xb8>)
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000ef8:	797b      	ldrb	r3, [r7, #5]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf0c      	ite	eq
 8000efe:	2301      	moveq	r3, #1
 8000f00:	2300      	movne	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8000f06:	797b      	ldrb	r3, [r7, #5]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d11a      	bne.n	8000f42 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f0c:	79fa      	ldrb	r2, [r7, #7]
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	08db      	lsrs	r3, r3, #3
 8000f12:	b2d8      	uxtb	r0, r3
 8000f14:	4603      	mov	r3, r0
 8000f16:	01db      	lsls	r3, r3, #7
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <ssd1306_DrawPixel+0xbc>)
 8000f1c:	5cd3      	ldrb	r3, [r2, r3]
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b259      	sxtb	r1, r3
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	4603      	mov	r3, r0
 8000f36:	01db      	lsls	r3, r3, #7
 8000f38:	4413      	add	r3, r2
 8000f3a:	b2c9      	uxtb	r1, r1
 8000f3c:	4a13      	ldr	r2, [pc, #76]	@ (8000f8c <ssd1306_DrawPixel+0xbc>)
 8000f3e:	54d1      	strb	r1, [r2, r3]
 8000f40:	e01d      	b.n	8000f7e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	08db      	lsrs	r3, r3, #3
 8000f48:	b2d8      	uxtb	r0, r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	01db      	lsls	r3, r3, #7
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <ssd1306_DrawPixel+0xbc>)
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	b25a      	sxtb	r2, r3
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	4013      	ands	r3, r2
 8000f6a:	b259      	sxtb	r1, r3
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	01db      	lsls	r3, r3, #7
 8000f72:	4413      	add	r3, r2
 8000f74:	b2c9      	uxtb	r1, r1
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <ssd1306_DrawPixel+0xbc>)
 8000f78:	54d1      	strb	r1, [r2, r3]
 8000f7a:	e000      	b.n	8000f7e <ssd1306_DrawPixel+0xae>
        return;
 8000f7c:	bf00      	nop
    }
}
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200006f4 	.word	0x200006f4
 8000f8c:	200002f4 	.word	0x200002f4

08000f90 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4604      	mov	r4, r0
 8000f98:	1d38      	adds	r0, r7, #4
 8000f9a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b1f      	cmp	r3, #31
 8000fac:	d902      	bls.n	8000fb4 <ssd1306_WriteChar+0x24>
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2b7e      	cmp	r3, #126	@ 0x7e
 8000fb2:	d901      	bls.n	8000fb8 <ssd1306_WriteChar+0x28>
        return 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e06c      	b.n	8001092 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000fb8:	4b38      	ldr	r3, [pc, #224]	@ (800109c <ssd1306_WriteChar+0x10c>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	793b      	ldrb	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	2b80      	cmp	r3, #128	@ 0x80
 8000fc4:	dc06      	bgt.n	8000fd4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000fc6:	4b35      	ldr	r3, [pc, #212]	@ (800109c <ssd1306_WriteChar+0x10c>)
 8000fc8:	885b      	ldrh	r3, [r3, #2]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	797b      	ldrb	r3, [r7, #5]
 8000fce:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000fd0:	2b40      	cmp	r3, #64	@ 0x40
 8000fd2:	dd01      	ble.n	8000fd8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e05c      	b.n	8001092 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	e04c      	b.n	8001078 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3b20      	subs	r3, #32
 8000fe4:	7979      	ldrb	r1, [r7, #5]
 8000fe6:	fb01 f303 	mul.w	r3, r1, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	440b      	add	r3, r1
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	e034      	b.n	8001068 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d012      	beq.n	8001034 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800100e:	4b23      	ldr	r3, [pc, #140]	@ (800109c <ssd1306_WriteChar+0x10c>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4413      	add	r3, r2
 800101a:	b2d8      	uxtb	r0, r3
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <ssd1306_WriteChar+0x10c>)
 800101e:	885b      	ldrh	r3, [r3, #2]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4413      	add	r3, r2
 8001028:	b2db      	uxtb	r3, r3
 800102a:	7bba      	ldrb	r2, [r7, #14]
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff ff4f 	bl	8000ed0 <ssd1306_DrawPixel>
 8001032:	e016      	b.n	8001062 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001034:	4b19      	ldr	r3, [pc, #100]	@ (800109c <ssd1306_WriteChar+0x10c>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4413      	add	r3, r2
 8001040:	b2d8      	uxtb	r0, r3
 8001042:	4b16      	ldr	r3, [pc, #88]	@ (800109c <ssd1306_WriteChar+0x10c>)
 8001044:	885b      	ldrh	r3, [r3, #2]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4413      	add	r3, r2
 800104e:	b2d9      	uxtb	r1, r3
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf0c      	ite	eq
 8001056:	2301      	moveq	r3, #1
 8001058:	2300      	movne	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	f7ff ff37 	bl	8000ed0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	3301      	adds	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	793b      	ldrb	r3, [r7, #4]
 800106a:	461a      	mov	r2, r3
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	4293      	cmp	r3, r2
 8001070:	d3c5      	bcc.n	8000ffe <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	797b      	ldrb	r3, [r7, #5]
 800107a:	461a      	mov	r2, r3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	4293      	cmp	r3, r2
 8001080:	d3ad      	bcc.n	8000fde <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <ssd1306_WriteChar+0x10c>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	793a      	ldrb	r2, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <ssd1306_WriteChar+0x10c>)
 800108e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd90      	pop	{r4, r7, pc}
 800109a:	bf00      	nop
 800109c:	200006f4 	.word	0x200006f4

080010a0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	1d38      	adds	r0, r7, #4
 80010aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80010ae:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80010b0:	e012      	b.n	80010d8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	7818      	ldrb	r0, [r3, #0]
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	1d3a      	adds	r2, r7, #4
 80010ba:	ca06      	ldmia	r2, {r1, r2}
 80010bc:	f7ff ff68 	bl	8000f90 <ssd1306_WriteChar>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d002      	beq.n	80010d2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	e008      	b.n	80010e4 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e8      	bne.n	80010b2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	781b      	ldrb	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <ssd1306_SetCursor+0x2c>)
 8001102:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <ssd1306_SetCursor+0x2c>)
 800110a:	805a      	strh	r2, [r3, #2]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200006f4 	.word	0x200006f4

0800111c <ssd1306_TestFonts>:
    } while((end - start) < 8000);
   
    HAL_Delay(1000);
}

void ssd1306_TestFonts() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff fe8b 	bl	8000e3c <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8001126:	2100      	movs	r1, #0
 8001128:	2002      	movs	r0, #2
 800112a:	f7ff ffdf 	bl	80010ec <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 800112e:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <ssd1306_TestFonts+0x64>)
 8001130:	2301      	movs	r3, #1
 8001132:	ca06      	ldmia	r2, {r1, r2}
 8001134:	4813      	ldr	r0, [pc, #76]	@ (8001184 <ssd1306_TestFonts+0x68>)
 8001136:	f7ff ffb3 	bl	80010a0 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 800113a:	211a      	movs	r1, #26
 800113c:	2002      	movs	r0, #2
 800113e:	f7ff ffd5 	bl	80010ec <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8001142:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <ssd1306_TestFonts+0x6c>)
 8001144:	2301      	movs	r3, #1
 8001146:	ca06      	ldmia	r2, {r1, r2}
 8001148:	4810      	ldr	r0, [pc, #64]	@ (800118c <ssd1306_TestFonts+0x70>)
 800114a:	f7ff ffa9 	bl	80010a0 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 800114e:	212c      	movs	r1, #44	@ 0x2c
 8001150:	2002      	movs	r0, #2
 8001152:	f7ff ffcb 	bl	80010ec <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <ssd1306_TestFonts+0x74>)
 8001158:	2301      	movs	r3, #1
 800115a:	ca06      	ldmia	r2, {r1, r2}
 800115c:	480d      	ldr	r0, [pc, #52]	@ (8001194 <ssd1306_TestFonts+0x78>)
 800115e:	f7ff ff9f 	bl	80010a0 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 8001162:	2136      	movs	r1, #54	@ 0x36
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff ffc1 	bl	80010ec <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 800116a:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <ssd1306_TestFonts+0x7c>)
 800116c:	2301      	movs	r3, #1
 800116e:	ca06      	ldmia	r2, {r1, r2}
 8001170:	480a      	ldr	r0, [pc, #40]	@ (800119c <ssd1306_TestFonts+0x80>)
 8001172:	f7ff ff95 	bl	80010a0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001176:	f7ff fe83 	bl	8000e80 <ssd1306_UpdateScreen>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000018 	.word	0x20000018
 8001184:	0800a848 	.word	0x0800a848
 8001188:	20000010 	.word	0x20000010
 800118c:	0800a854 	.word	0x0800a854
 8001190:	20000008 	.word	0x20000008
 8001194:	0800a860 	.word	0x0800a860
 8001198:	20000000 	.word	0x20000000
 800119c:	0800a86c 	.word	0x0800a86c

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_MspInit+0x5c>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4a14      	ldr	r2, [pc, #80]	@ (80011fc <HAL_MspInit+0x5c>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_MspInit+0x5c>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <HAL_MspInit+0x5c>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <HAL_MspInit+0x5c>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <HAL_MspInit+0x5c>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_MspInit+0x60>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <HAL_MspInit+0x60>)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000

08001204 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <HAL_ADC_MspInit+0x6c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d121      	bne.n	8001268 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <HAL_ADC_MspInit+0x70>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <HAL_ADC_MspInit+0x70>)
 800122a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <HAL_ADC_MspInit+0x70>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <HAL_ADC_MspInit+0x70>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a0c      	ldr	r2, [pc, #48]	@ (8001274 <HAL_ADC_MspInit+0x70>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_ADC_MspInit+0x70>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001254:	2302      	movs	r3, #2
 8001256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001258:	2303      	movs	r3, #3
 800125a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <HAL_ADC_MspInit+0x74>)
 8001264:	f000 fdd0 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40012400 	.word	0x40012400
 8001274:	40021000 	.word	0x40021000
 8001278:	40010800 	.word	0x40010800

0800127c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <HAL_I2C_MspInit+0x70>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d123      	bne.n	80012e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_I2C_MspInit+0x74>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <HAL_I2C_MspInit+0x74>)
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_I2C_MspInit+0x74>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b4:	23c0      	movs	r3, #192	@ 0xc0
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b8:	2312      	movs	r3, #18
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	480b      	ldr	r0, [pc, #44]	@ (80012f4 <HAL_I2C_MspInit+0x78>)
 80012c8:	f000 fd9e 	bl	8001e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_I2C_MspInit+0x74>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_I2C_MspInit+0x74>)
 80012d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012d6:	61d3      	str	r3, [r2, #28]
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <HAL_I2C_MspInit+0x74>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40005400 	.word	0x40005400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010c00 	.word	0x40010c00

080012f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <HAL_TIM_Base_MspInit+0x44>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d113      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <HAL_TIM_Base_MspInit+0x48>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a0c      	ldr	r2, [pc, #48]	@ (8001340 <HAL_TIM_Base_MspInit+0x48>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_TIM_Base_MspInit+0x48>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	201e      	movs	r0, #30
 8001328:	f000 fd37 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800132c:	201e      	movs	r0, #30
 800132e:	f000 fd50 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40000800 	.word	0x40000800
 8001340:	40021000 	.word	0x40021000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <NMI_Handler+0x4>

0800134c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <MemManage_Handler+0x4>

0800135c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <UsageFault_Handler+0x4>

0800136c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 f8c4 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80013a2:	f001 fcce 	bl	8002d42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200013cc 	.word	0x200013cc

080013b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <TIM4_IRQHandler+0x18>)
 80013ba:	f000 fed8 	bl	800216e <HAL_GPIO_TogglePin>
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013be:	4803      	ldr	r0, [pc, #12]	@ (80013cc <TIM4_IRQHandler+0x1c>)
 80013c0:	f003 fe5c 	bl	800507c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40011000 	.word	0x40011000
 80013cc:	2000028c 	.word	0x2000028c

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	@ (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f008 fd84 	bl	8009f0c <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20005000 	.word	0x20005000
 8001430:	00000400 	.word	0x00000400
 8001434:	200006fc 	.word	0x200006fc
 8001438:	20001a28 	.word	0x20001a28

0800143c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001448:	f7ff fff8 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480b      	ldr	r0, [pc, #44]	@ (800147c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800144e:	490c      	ldr	r1, [pc, #48]	@ (8001480 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001450:	4a0c      	ldr	r2, [pc, #48]	@ (8001484 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001464:	4c09      	ldr	r4, [pc, #36]	@ (800148c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f008 fd51 	bl	8009f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001476:	f7ff fa3d 	bl	80008f4 <main>
  bx lr
 800147a:	4770      	bx	lr
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001484:	0800d754 	.word	0x0800d754
  ldr r2, =_sbss
 8001488:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800148c:	20001a24 	.word	0x20001a24

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <HAL_Init+0x28>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	@ (80014bc <HAL_Init+0x28>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 fc6d 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fe76 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fc85 	bl	8001dee <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 fc4d 	bl	8001d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	@ (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000020 	.word	0x20000020
 8001518:	20000028 	.word	0x20000028
 800151c:	20000024 	.word	0x20000024

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <HAL_IncTick+0x1c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <HAL_IncTick+0x20>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a03      	ldr	r2, [pc, #12]	@ (8001540 <HAL_IncTick+0x20>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000028 	.word	0x20000028
 8001540:	20000700 	.word	0x20000700

08001544 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b02      	ldr	r3, [pc, #8]	@ (8001554 <HAL_GetTick+0x10>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	20000700 	.word	0x20000700

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff fff0 	bl	8001544 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffe0 	bl	8001544 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000028 	.word	0x20000028

080015a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0be      	b.n	8001740 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d109      	bne.n	80015e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fe10 	bl	8001204 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fabf 	bl	8001b68 <ADC_ConversionStop_Disable>
 80015ea:	4603      	mov	r3, r0
 80015ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 8099 	bne.w	800172e <HAL_ADC_Init+0x18e>
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 8095 	bne.w	800172e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001608:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800160c:	f023 0302 	bic.w	r3, r3, #2
 8001610:	f043 0202 	orr.w	r2, r3, #2
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001620:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7b1b      	ldrb	r3, [r3, #12]
 8001626:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001628:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	4313      	orrs	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001638:	d003      	beq.n	8001642 <HAL_ADC_Init+0xa2>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d102      	bne.n	8001648 <HAL_ADC_Init+0xa8>
 8001642:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001646:	e000      	b.n	800164a <HAL_ADC_Init+0xaa>
 8001648:	2300      	movs	r3, #0
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7d1b      	ldrb	r3, [r3, #20]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d119      	bne.n	800168c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7b1b      	ldrb	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d109      	bne.n	8001674 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	3b01      	subs	r3, #1
 8001666:	035a      	lsls	r2, r3, #13
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	e00b      	b.n	800168c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001678:	f043 0220 	orr.w	r2, r3, #32
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	430a      	orrs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	4b28      	ldr	r3, [pc, #160]	@ (8001748 <HAL_ADC_Init+0x1a8>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016bc:	d003      	beq.n	80016c6 <HAL_ADC_Init+0x126>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d104      	bne.n	80016d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	051b      	lsls	r3, r3, #20
 80016ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <HAL_ADC_Init+0x1ac>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d10b      	bne.n	800170c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fe:	f023 0303 	bic.w	r3, r3, #3
 8001702:	f043 0201 	orr.w	r2, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800170a:	e018      	b.n	800173e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001710:	f023 0312 	bic.w	r3, r3, #18
 8001714:	f043 0210 	orr.w	r2, r3, #16
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800172c:	e007      	b.n	800173e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001732:	f043 0210 	orr.w	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800173e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	ffe1f7fd 	.word	0xffe1f7fd
 800174c:	ff1f0efe 	.word	0xff1f0efe

08001750 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_ADC_Start+0x1a>
 8001766:	2302      	movs	r3, #2
 8001768:	e098      	b.n	800189c <HAL_ADC_Start+0x14c>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f99e 	bl	8001ab4 <ADC_Enable>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 8087 	bne.w	8001892 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a41      	ldr	r2, [pc, #260]	@ (80018a4 <HAL_ADC_Start+0x154>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d105      	bne.n	80017ae <HAL_ADC_Start+0x5e>
 80017a2:	4b41      	ldr	r3, [pc, #260]	@ (80018a8 <HAL_ADC_Start+0x158>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d115      	bne.n	80017da <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d026      	beq.n	8001816 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017d8:	e01d      	b.n	8001816 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a2f      	ldr	r2, [pc, #188]	@ (80018a8 <HAL_ADC_Start+0x158>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d004      	beq.n	80017fa <HAL_ADC_Start+0xaa>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2b      	ldr	r2, [pc, #172]	@ (80018a4 <HAL_ADC_Start+0x154>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10d      	bne.n	8001816 <HAL_ADC_Start+0xc6>
 80017fa:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <HAL_ADC_Start+0x158>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800180e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001826:	f023 0206 	bic.w	r2, r3, #6
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800182e:	e002      	b.n	8001836 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f06f 0202 	mvn.w	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001852:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001856:	d113      	bne.n	8001880 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800185c:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <HAL_ADC_Start+0x154>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d105      	bne.n	800186e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_ADC_Start+0x158>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d108      	bne.n	8001880 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	e00c      	b.n	800189a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	e003      	b.n	800189a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40012800 	.word	0x40012800
 80018a8:	40012400 	.word	0x40012400

080018ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x20>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e0dc      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x1da>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b06      	cmp	r3, #6
 80018f2:	d81c      	bhi.n	800192e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	3b05      	subs	r3, #5
 8001906:	221f      	movs	r2, #31
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	4019      	ands	r1, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3b05      	subs	r3, #5
 8001920:	fa00 f203 	lsl.w	r2, r0, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	635a      	str	r2, [r3, #52]	@ 0x34
 800192c:	e03c      	b.n	80019a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d81c      	bhi.n	8001970 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b23      	subs	r3, #35	@ 0x23
 8001948:	221f      	movs	r2, #31
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	4019      	ands	r1, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b23      	subs	r3, #35	@ 0x23
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	631a      	str	r2, [r3, #48]	@ 0x30
 800196e:	e01b      	b.n	80019a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	3b41      	subs	r3, #65	@ 0x41
 8001982:	221f      	movs	r2, #31
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	4019      	ands	r1, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3b41      	subs	r3, #65	@ 0x41
 800199c:	fa00 f203 	lsl.w	r2, r0, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	d91c      	bls.n	80019ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68d9      	ldr	r1, [r3, #12]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	3b1e      	subs	r3, #30
 80019c2:	2207      	movs	r2, #7
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4019      	ands	r1, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6898      	ldr	r0, [r3, #8]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	3b1e      	subs	r3, #30
 80019dc:	fa00 f203 	lsl.w	r2, r0, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	e019      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6919      	ldr	r1, [r3, #16]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	2207      	movs	r2, #7
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4019      	ands	r1, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6898      	ldr	r0, [r3, #8]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	fa00 f203 	lsl.w	r2, r0, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d003      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a2a:	2b11      	cmp	r3, #17
 8001a2c:	d132      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d125      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d126      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a54:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d11a      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <HAL_ADC_ConfigChannel+0x1e8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a13      	ldr	r2, [pc, #76]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	0c9a      	lsrs	r2, r3, #18
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f9      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x1b2>
 8001a82:	e007      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a88:	f043 0220 	orr.w	r2, r3, #32
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40012400 	.word	0x40012400
 8001aac:	20000020 	.word	0x20000020
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d040      	beq.n	8001b54 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <ADC_Enable+0xac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b64 <ADC_Enable+0xb0>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	0c9b      	lsrs	r3, r3, #18
 8001aee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001af0:	e002      	b.n	8001af8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f9      	bne.n	8001af2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001afe:	f7ff fd21 	bl	8001544 <HAL_GetTick>
 8001b02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b04:	e01f      	b.n	8001b46 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b06:	f7ff fd1d 	bl	8001544 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d918      	bls.n	8001b46 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d011      	beq.n	8001b46 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b26:	f043 0210 	orr.w	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e007      	b.n	8001b56 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d1d8      	bne.n	8001b06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000020 	.word	0x20000020
 8001b64:	431bde83 	.word	0x431bde83

08001b68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d12e      	bne.n	8001be0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b92:	f7ff fcd7 	bl	8001544 <HAL_GetTick>
 8001b96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b98:	e01b      	b.n	8001bd2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b9a:	f7ff fcd3 	bl	8001544 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d914      	bls.n	8001bd2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d10d      	bne.n	8001bd2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e007      	b.n	8001be2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d0dc      	beq.n	8001b9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4906      	ldr	r1, [pc, #24]	@ (8001c84 <__NVIC_EnableIRQ+0x34>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	@ (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	@ (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	@ 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	@ 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f7ff ff90 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff2d 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff42 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff90 	bl	8001cdc <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5f 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff35 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffa2 	bl	8001d40 <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b08b      	sub	sp, #44	@ 0x2c
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	e169      	b.n	80020f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 8158 	bne.w	80020ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a9a      	ldr	r2, [pc, #616]	@ (80020a8 <HAL_GPIO_Init+0x2a0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d05e      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e44:	4a98      	ldr	r2, [pc, #608]	@ (80020a8 <HAL_GPIO_Init+0x2a0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d875      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e4a:	4a98      	ldr	r2, [pc, #608]	@ (80020ac <HAL_GPIO_Init+0x2a4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d058      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e50:	4a96      	ldr	r2, [pc, #600]	@ (80020ac <HAL_GPIO_Init+0x2a4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d86f      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e56:	4a96      	ldr	r2, [pc, #600]	@ (80020b0 <HAL_GPIO_Init+0x2a8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d052      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e5c:	4a94      	ldr	r2, [pc, #592]	@ (80020b0 <HAL_GPIO_Init+0x2a8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d869      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e62:	4a94      	ldr	r2, [pc, #592]	@ (80020b4 <HAL_GPIO_Init+0x2ac>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d04c      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e68:	4a92      	ldr	r2, [pc, #584]	@ (80020b4 <HAL_GPIO_Init+0x2ac>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d863      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e6e:	4a92      	ldr	r2, [pc, #584]	@ (80020b8 <HAL_GPIO_Init+0x2b0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d046      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
 8001e74:	4a90      	ldr	r2, [pc, #576]	@ (80020b8 <HAL_GPIO_Init+0x2b0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d85d      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e7a:	2b12      	cmp	r3, #18
 8001e7c:	d82a      	bhi.n	8001ed4 <HAL_GPIO_Init+0xcc>
 8001e7e:	2b12      	cmp	r3, #18
 8001e80:	d859      	bhi.n	8001f36 <HAL_GPIO_Init+0x12e>
 8001e82:	a201      	add	r2, pc, #4	@ (adr r2, 8001e88 <HAL_GPIO_Init+0x80>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001f03 	.word	0x08001f03
 8001e8c:	08001edd 	.word	0x08001edd
 8001e90:	08001eef 	.word	0x08001eef
 8001e94:	08001f31 	.word	0x08001f31
 8001e98:	08001f37 	.word	0x08001f37
 8001e9c:	08001f37 	.word	0x08001f37
 8001ea0:	08001f37 	.word	0x08001f37
 8001ea4:	08001f37 	.word	0x08001f37
 8001ea8:	08001f37 	.word	0x08001f37
 8001eac:	08001f37 	.word	0x08001f37
 8001eb0:	08001f37 	.word	0x08001f37
 8001eb4:	08001f37 	.word	0x08001f37
 8001eb8:	08001f37 	.word	0x08001f37
 8001ebc:	08001f37 	.word	0x08001f37
 8001ec0:	08001f37 	.word	0x08001f37
 8001ec4:	08001f37 	.word	0x08001f37
 8001ec8:	08001f37 	.word	0x08001f37
 8001ecc:	08001ee5 	.word	0x08001ee5
 8001ed0:	08001ef9 	.word	0x08001ef9
 8001ed4:	4a79      	ldr	r2, [pc, #484]	@ (80020bc <HAL_GPIO_Init+0x2b4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eda:	e02c      	b.n	8001f36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	623b      	str	r3, [r7, #32]
          break;
 8001ee2:	e029      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	623b      	str	r3, [r7, #32]
          break;
 8001eec:	e024      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e01f      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	330c      	adds	r3, #12
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e01a      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	623b      	str	r3, [r7, #32]
          break;
 8001f0e:	e013      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d105      	bne.n	8001f24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	611a      	str	r2, [r3, #16]
          break;
 8001f22:	e009      	b.n	8001f38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	615a      	str	r2, [r3, #20]
          break;
 8001f2e:	e003      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
          break;
 8001f34:	e000      	b.n	8001f38 <HAL_GPIO_Init+0x130>
          break;
 8001f36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2bff      	cmp	r3, #255	@ 0xff
 8001f3c:	d801      	bhi.n	8001f42 <HAL_GPIO_Init+0x13a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	e001      	b.n	8001f46 <HAL_GPIO_Init+0x13e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3304      	adds	r3, #4
 8001f46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2bff      	cmp	r3, #255	@ 0xff
 8001f4c:	d802      	bhi.n	8001f54 <HAL_GPIO_Init+0x14c>
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	e002      	b.n	8001f5a <HAL_GPIO_Init+0x152>
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	3b08      	subs	r3, #8
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	210f      	movs	r1, #15
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	6a39      	ldr	r1, [r7, #32]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	431a      	orrs	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80b1 	beq.w	80020ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f88:	4b4d      	ldr	r3, [pc, #308]	@ (80020c0 <HAL_GPIO_Init+0x2b8>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80020c0 <HAL_GPIO_Init+0x2b8>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b4a      	ldr	r3, [pc, #296]	@ (80020c0 <HAL_GPIO_Init+0x2b8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fa0:	4a48      	ldr	r2, [pc, #288]	@ (80020c4 <HAL_GPIO_Init+0x2bc>)
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a40      	ldr	r2, [pc, #256]	@ (80020c8 <HAL_GPIO_Init+0x2c0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <HAL_GPIO_Init+0x1ec>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3f      	ldr	r2, [pc, #252]	@ (80020cc <HAL_GPIO_Init+0x2c4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00d      	beq.n	8001ff0 <HAL_GPIO_Init+0x1e8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3e      	ldr	r2, [pc, #248]	@ (80020d0 <HAL_GPIO_Init+0x2c8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <HAL_GPIO_Init+0x1e4>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3d      	ldr	r2, [pc, #244]	@ (80020d4 <HAL_GPIO_Init+0x2cc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_GPIO_Init+0x1e0>
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e006      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e004      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e002      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_GPIO_Init+0x1ee>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff8:	f002 0203 	and.w	r2, r2, #3
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	4093      	lsls	r3, r2
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002006:	492f      	ldr	r1, [pc, #188]	@ (80020c4 <HAL_GPIO_Init+0x2bc>)
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002020:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	492c      	ldr	r1, [pc, #176]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800202e:	4b2a      	ldr	r3, [pc, #168]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	43db      	mvns	r3, r3
 8002036:	4928      	ldr	r1, [pc, #160]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002038:	4013      	ands	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002048:	4b23      	ldr	r3, [pc, #140]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	4922      	ldr	r1, [pc, #136]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	60cb      	str	r3, [r1, #12]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002056:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	491e      	ldr	r1, [pc, #120]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002060:	4013      	ands	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002070:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4918      	ldr	r1, [pc, #96]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800207e:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	43db      	mvns	r3, r3
 8002086:	4914      	ldr	r1, [pc, #80]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 8002088:	4013      	ands	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d021      	beq.n	80020dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	490e      	ldr	r1, [pc, #56]	@ (80020d8 <HAL_GPIO_Init+0x2d0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e021      	b.n	80020ea <HAL_GPIO_Init+0x2e2>
 80020a6:	bf00      	nop
 80020a8:	10320000 	.word	0x10320000
 80020ac:	10310000 	.word	0x10310000
 80020b0:	10220000 	.word	0x10220000
 80020b4:	10210000 	.word	0x10210000
 80020b8:	10120000 	.word	0x10120000
 80020bc:	10110000 	.word	0x10110000
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40010800 	.word	0x40010800
 80020cc:	40010c00 	.word	0x40010c00
 80020d0:	40011000 	.word	0x40011000
 80020d4:	40011400 	.word	0x40011400
 80020d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_GPIO_Init+0x304>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	4909      	ldr	r1, [pc, #36]	@ (800210c <HAL_GPIO_Init+0x304>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	3301      	adds	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	fa22 f303 	lsr.w	r3, r2, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f47f ae8e 	bne.w	8001e1c <HAL_GPIO_Init+0x14>
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	372c      	adds	r7, #44	@ 0x2c
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	e001      	b.n	8002132 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	807b      	strh	r3, [r7, #2]
 800214a:	4613      	mov	r3, r2
 800214c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800214e:	787b      	ldrb	r3, [r7, #1]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002154:	887a      	ldrh	r2, [r7, #2]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800215a:	e003      	b.n	8002164 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	041a      	lsls	r2, r3, #16
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	611a      	str	r2, [r3, #16]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002180:	887a      	ldrh	r2, [r7, #2]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4013      	ands	r3, r2
 8002186:	041a      	lsls	r2, r3, #16
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	43d9      	mvns	r1, r3
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	400b      	ands	r3, r1
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e12b      	b.n	800240a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff f858 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2224      	movs	r2, #36	@ 0x24
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002202:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002204:	f002 fdb0 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8002208:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a81      	ldr	r2, [pc, #516]	@ (8002414 <HAL_I2C_Init+0x274>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d807      	bhi.n	8002224 <HAL_I2C_Init+0x84>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a80      	ldr	r2, [pc, #512]	@ (8002418 <HAL_I2C_Init+0x278>)
 8002218:	4293      	cmp	r3, r2
 800221a:	bf94      	ite	ls
 800221c:	2301      	movls	r3, #1
 800221e:	2300      	movhi	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e006      	b.n	8002232 <HAL_I2C_Init+0x92>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a7d      	ldr	r2, [pc, #500]	@ (800241c <HAL_I2C_Init+0x27c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	bf94      	ite	ls
 800222c:	2301      	movls	r3, #1
 800222e:	2300      	movhi	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0e7      	b.n	800240a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a78      	ldr	r2, [pc, #480]	@ (8002420 <HAL_I2C_Init+0x280>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0c9b      	lsrs	r3, r3, #18
 8002244:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	430a      	orrs	r2, r1
 8002258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a6a      	ldr	r2, [pc, #424]	@ (8002414 <HAL_I2C_Init+0x274>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d802      	bhi.n	8002274 <HAL_I2C_Init+0xd4>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3301      	adds	r3, #1
 8002272:	e009      	b.n	8002288 <HAL_I2C_Init+0xe8>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	4a69      	ldr	r2, [pc, #420]	@ (8002424 <HAL_I2C_Init+0x284>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	3301      	adds	r3, #1
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	430b      	orrs	r3, r1
 800228e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800229a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	495c      	ldr	r1, [pc, #368]	@ (8002414 <HAL_I2C_Init+0x274>)
 80022a4:	428b      	cmp	r3, r1
 80022a6:	d819      	bhi.n	80022dc <HAL_I2C_Init+0x13c>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e59      	subs	r1, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b6:	1c59      	adds	r1, r3, #1
 80022b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022bc:	400b      	ands	r3, r1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_I2C_Init+0x138>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1e59      	subs	r1, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d6:	e051      	b.n	800237c <HAL_I2C_Init+0x1dc>
 80022d8:	2304      	movs	r3, #4
 80022da:	e04f      	b.n	800237c <HAL_I2C_Init+0x1dc>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d111      	bne.n	8002308 <HAL_I2C_Init+0x168>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e58      	subs	r0, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	440b      	add	r3, r1
 80022f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e012      	b.n	800232e <HAL_I2C_Init+0x18e>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	0099      	lsls	r1, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	fbb0 f3f3 	udiv	r3, r0, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Init+0x196>
 8002332:	2301      	movs	r3, #1
 8002334:	e022      	b.n	800237c <HAL_I2C_Init+0x1dc>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10e      	bne.n	800235c <HAL_I2C_Init+0x1bc>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e58      	subs	r0, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	440b      	add	r3, r1
 800234c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800235a:	e00f      	b.n	800237c <HAL_I2C_Init+0x1dc>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1e58      	subs	r0, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	0099      	lsls	r1, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002378:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	6809      	ldr	r1, [r1, #0]
 8002380:	4313      	orrs	r3, r2
 8002382:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6911      	ldr	r1, [r2, #16]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68d2      	ldr	r2, [r2, #12]
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	430b      	orrs	r3, r1
 80023be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	000186a0 	.word	0x000186a0
 8002418:	001e847f 	.word	0x001e847f
 800241c:	003d08ff 	.word	0x003d08ff
 8002420:	431bde83 	.word	0x431bde83
 8002424:	10624dd3 	.word	0x10624dd3

08002428 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	817b      	strh	r3, [r7, #10]
 800243a:	460b      	mov	r3, r1
 800243c:	813b      	strh	r3, [r7, #8]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002442:	f7ff f87f 	bl	8001544 <HAL_GetTick>
 8002446:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b20      	cmp	r3, #32
 8002452:	f040 80d9 	bne.w	8002608 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2319      	movs	r3, #25
 800245c:	2201      	movs	r2, #1
 800245e:	496d      	ldr	r1, [pc, #436]	@ (8002614 <HAL_I2C_Mem_Write+0x1ec>)
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f971 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
 800246e:	e0cc      	b.n	800260a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_I2C_Mem_Write+0x56>
 800247a:	2302      	movs	r3, #2
 800247c:	e0c5      	b.n	800260a <HAL_I2C_Mem_Write+0x1e2>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d007      	beq.n	80024a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2221      	movs	r2, #33	@ 0x21
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2240      	movs	r2, #64	@ 0x40
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a3a      	ldr	r2, [r7, #32]
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002618 <HAL_I2C_Mem_Write+0x1f0>)
 80024e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024e6:	88f8      	ldrh	r0, [r7, #6]
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	8979      	ldrh	r1, [r7, #10]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	4603      	mov	r3, r0
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f890 	bl	800261c <I2C_RequestMemoryWrite>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d052      	beq.n	80025a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e081      	b.n	800260a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fa36 	bl	800297c <I2C_WaitOnTXEFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	2b04      	cmp	r3, #4
 800251c:	d107      	bne.n	800252e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800252c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06b      	b.n	800260a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b04      	cmp	r3, #4
 800256e:	d11b      	bne.n	80025a8 <HAL_I2C_Mem_Write+0x180>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d017      	beq.n	80025a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1aa      	bne.n	8002506 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fa29 	bl	8002a0c <I2C_WaitOnBTFFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00d      	beq.n	80025dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d107      	bne.n	80025d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e016      	b.n	800260a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	00100002 	.word	0x00100002
 8002618:	ffff0000 	.word	0xffff0000

0800261c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	4608      	mov	r0, r1
 8002626:	4611      	mov	r1, r2
 8002628:	461a      	mov	r2, r3
 800262a:	4603      	mov	r3, r0
 800262c:	817b      	strh	r3, [r7, #10]
 800262e:	460b      	mov	r3, r1
 8002630:	813b      	strh	r3, [r7, #8]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002644:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	2200      	movs	r2, #0
 800264e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f878 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00d      	beq.n	800267a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800266c:	d103      	bne.n	8002676 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002674:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e05f      	b.n	800273a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002688:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	492d      	ldr	r1, [pc, #180]	@ (8002744 <I2C_RequestMemoryWrite+0x128>)
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f8d3 	bl	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e04c      	b.n	800273a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b8:	6a39      	ldr	r1, [r7, #32]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f95e 	bl	800297c <I2C_WaitOnTXEFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00d      	beq.n	80026e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d107      	bne.n	80026de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e02b      	b.n	800273a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026e8:	893b      	ldrh	r3, [r7, #8]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	611a      	str	r2, [r3, #16]
 80026f2:	e021      	b.n	8002738 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026f4:	893b      	ldrh	r3, [r7, #8]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002704:	6a39      	ldr	r1, [r7, #32]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f938 	bl	800297c <I2C_WaitOnTXEFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2b04      	cmp	r3, #4
 8002718:	d107      	bne.n	800272a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002728:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e005      	b.n	800273a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800272e:	893b      	ldrh	r3, [r7, #8]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	00010002 	.word	0x00010002

08002748 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002758:	e048      	b.n	80027ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d044      	beq.n	80027ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002762:	f7fe feef 	bl	8001544 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d302      	bcc.n	8002778 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d139      	bne.n	80027ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	0c1b      	lsrs	r3, r3, #16
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10d      	bne.n	800279e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	43da      	mvns	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4013      	ands	r3, r2
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	e00c      	b.n	80027b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	43da      	mvns	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4013      	ands	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d116      	bne.n	80027ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e023      	b.n	8002834 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	0c1b      	lsrs	r3, r3, #16
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d10d      	bne.n	8002812 <I2C_WaitOnFlagUntilTimeout+0xca>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	43da      	mvns	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4013      	ands	r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	e00c      	b.n	800282c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	43da      	mvns	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4013      	ands	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	429a      	cmp	r2, r3
 8002830:	d093      	beq.n	800275a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800284a:	e071      	b.n	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800285a:	d123      	bne.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002874:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e067      	b.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d041      	beq.n	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ac:	f7fe fe4a 	bl	8001544 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d302      	bcc.n	80028c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d136      	bne.n	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10c      	bne.n	80028e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4013      	ands	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	e00b      	b.n	80028fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	43da      	mvns	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4013      	ands	r3, r2
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf14      	ite	ne
 80028f8:	2301      	movne	r3, #1
 80028fa:	2300      	moveq	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e021      	b.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	0c1b      	lsrs	r3, r3, #16
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d10c      	bne.n	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	43da      	mvns	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e00b      	b.n	800296c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4013      	ands	r3, r2
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf14      	ite	ne
 8002966:	2301      	movne	r3, #1
 8002968:	2300      	moveq	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	f47f af6d 	bne.w	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002988:	e034      	b.n	80029f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f886 	bl	8002a9c <I2C_IsAcknowledgeFailed>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e034      	b.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d028      	beq.n	80029f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a2:	f7fe fdcf 	bl	8001544 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d302      	bcc.n	80029b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d11d      	bne.n	80029f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c2:	2b80      	cmp	r3, #128	@ 0x80
 80029c4:	d016      	beq.n	80029f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e007      	b.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fe:	2b80      	cmp	r3, #128	@ 0x80
 8002a00:	d1c3      	bne.n	800298a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a18:	e034      	b.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f83e 	bl	8002a9c <I2C_IsAcknowledgeFailed>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e034      	b.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d028      	beq.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7fe fd87 	bl	8001544 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d11d      	bne.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d016      	beq.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e007      	b.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d1c3      	bne.n	8002a1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab2:	d11b      	bne.n	8002aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	f043 0204 	orr.w	r2, r3, #4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afa:	b08b      	sub	sp, #44	@ 0x2c
 8002afc:	af06      	add	r7, sp, #24
 8002afe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0f1      	b.n	8002cee <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f006 ff08 	bl	8009934 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2203      	movs	r2, #3
 8002b28:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 fe2d 	bl	8005790 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	687e      	ldr	r6, [r7, #4]
 8002b3e:	466d      	mov	r5, sp
 8002b40:	f106 0410 	add.w	r4, r6, #16
 8002b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	602b      	str	r3, [r5, #0]
 8002b4c:	1d33      	adds	r3, r6, #4
 8002b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b50:	6838      	ldr	r0, [r7, #0]
 8002b52:	f002 fdf7 	bl	8005744 <USB_CoreInit>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0c2      	b.n	8002cee <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fe28 	bl	80057c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	e040      	b.n	8002bfc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	440b      	add	r3, r1
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3303      	adds	r3, #3
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3338      	adds	r3, #56	@ 0x38
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	333c      	adds	r3, #60	@ 0x3c
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3340      	adds	r3, #64	@ 0x40
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d3b9      	bcc.n	8002b7a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
 8002c0a:	e044      	b.n	8002c96 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	3301      	adds	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d3b5      	bcc.n	8002c0c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	687e      	ldr	r6, [r7, #4]
 8002ca8:	466d      	mov	r5, sp
 8002caa:	f106 0410 	add.w	r4, r6, #16
 8002cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	602b      	str	r3, [r5, #0]
 8002cb6:	1d33      	adds	r3, r6, #4
 8002cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cba:	6838      	ldr	r0, [r7, #0]
 8002cbc:	f002 fd8e 	bl	80057dc <USB_DevInit>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00d      	b.n	8002cee <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f005 f80f 	bl	8007d0a <USB_DevDisconnect>

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_Start+0x16>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e016      	b.n	8002d3a <HAL_PCD_Start+0x44>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 fd23 	bl	8005764 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d1e:	2101      	movs	r1, #1
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f007 f87a 	bl	8009e1a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 ffe3 	bl	8007cf6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b088      	sub	sp, #32
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 ffe5 	bl	8007d1e <USB_ReadInterrupts>
 8002d54:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fb1b 	bl	800339c <PCD_EP_ISR_Handler>

    return;
 8002d66:	e119      	b.n	8002f9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d013      	beq.n	8002d9a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d84:	b292      	uxth	r2, r2
 8002d86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f006 fe4d 	bl	8009a2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d90:	2100      	movs	r1, #0
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f905 	bl	8002fa2 <HAL_PCD_SetAddress>

    return;
 8002d98:	e100      	b.n	8002f9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00c      	beq.n	8002dbe <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002db6:	b292      	uxth	r2, r2
 8002db8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002dbc:	e0ee      	b.n	8002f9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00c      	beq.n	8002de2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dda:	b292      	uxth	r2, r2
 8002ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002de0:	e0dc      	b.n	8002f9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d027      	beq.n	8002e3c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0204 	bic.w	r2, r2, #4
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0208 	bic.w	r2, r2, #8
 8002e16:	b292      	uxth	r2, r2
 8002e18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f006 fe3d 	bl	8009a9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e34:	b292      	uxth	r2, r2
 8002e36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e3a:	e0af      	b.n	8002f9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8083 	beq.w	8002f4e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e010      	b.n	8002e70 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	7ffb      	ldrb	r3, [r7, #31]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
 8002e5c:	8812      	ldrh	r2, [r2, #0]
 8002e5e:	b292      	uxth	r2, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	3320      	adds	r3, #32
 8002e64:	443b      	add	r3, r7
 8002e66:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002e6a:	7ffb      	ldrb	r3, [r7, #31]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	7ffb      	ldrb	r3, [r7, #31]
 8002e72:	2b07      	cmp	r3, #7
 8002e74:	d9eb      	bls.n	8002e4e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	b292      	uxth	r2, r2
 8002e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	b292      	uxth	r2, r2
 8002ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002ea6:	bf00      	nop
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f6      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ecc:	b292      	uxth	r2, r2
 8002ece:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	77fb      	strb	r3, [r7, #31]
 8002ed6:	e00f      	b.n	8002ef8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	7ffa      	ldrb	r2, [r7, #31]
 8002ee2:	0092      	lsls	r2, r2, #2
 8002ee4:	440a      	add	r2, r1
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	3320      	adds	r3, #32
 8002eea:	443b      	add	r3, r7
 8002eec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ef0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
 8002efa:	2b07      	cmp	r3, #7
 8002efc:	d9ec      	bls.n	8002ed8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0208 	orr.w	r2, r2, #8
 8002f10:	b292      	uxth	r2, r2
 8002f12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0204 	orr.w	r2, r2, #4
 8002f40:	b292      	uxth	r2, r2
 8002f42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f006 fd8e 	bl	8009a68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f4c:	e026      	b.n	8002f9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00f      	beq.n	8002f78 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f006 fd4c 	bl	8009a0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f76:	e011      	b.n	8002f9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f94:	b292      	uxth	r2, r2
 8002f96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f9a:	bf00      	nop
  }
}
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_PCD_SetAddress+0x1a>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e013      	b.n	8002fe4 <HAL_PCD_SetAddress+0x42>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f004 fe7b 	bl	8007cd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	70fb      	strb	r3, [r7, #3]
 8002ffe:	460b      	mov	r3, r1
 8003000:	803b      	strh	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800300a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300e:	2b00      	cmp	r3, #0
 8003010:	da0e      	bge.n	8003030 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	705a      	strb	r2, [r3, #1]
 800302e:	e00e      	b.n	800304e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f003 0207 	and.w	r2, r3, #7
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800305a:	883a      	ldrh	r2, [r7, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	78ba      	ldrb	r2, [r7, #2]
 8003064:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003066:	78bb      	ldrb	r3, [r7, #2]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d102      	bne.n	8003072 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_PCD_EP_Open+0x94>
 800307c:	2302      	movs	r3, #2
 800307e:	e00e      	b.n	800309e <HAL_PCD_EP_Open+0xb2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68f9      	ldr	r1, [r7, #12]
 800308e:	4618      	mov	r0, r3
 8003090:	f002 fbc4 	bl	800581c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 800309c:	7afb      	ldrb	r3, [r7, #11]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da0e      	bge.n	80030d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	705a      	strb	r2, [r3, #1]
 80030d6:	e00e      	b.n	80030f6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 0207 	and.w	r2, r3, #7
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_EP_Close+0x6a>
 800310c:	2302      	movs	r3, #2
 800310e:	e00e      	b.n	800312e <HAL_PCD_EP_Close+0x88>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f002 ff3c 	bl	8005f9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	460b      	mov	r3, r1
 8003144:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003146:	7afb      	ldrb	r3, [r7, #11]
 8003148:	f003 0207 	and.w	r2, r3, #7
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2200      	movs	r2, #0
 8003174:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003176:	7afb      	ldrb	r3, [r7, #11]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	b2da      	uxtb	r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6979      	ldr	r1, [r7, #20]
 8003188:	4618      	mov	r0, r3
 800318a:	f003 f8f3 	bl	8006374 <USB_EPStartXfer>

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 0207 	and.w	r2, r3, #7
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	460b      	mov	r3, r1
 80031d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2201      	movs	r2, #1
 8003210:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003212:	7afb      	ldrb	r3, [r7, #11]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	b2da      	uxtb	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6979      	ldr	r1, [r7, #20]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 f8a5 	bl	8006374 <USB_EPStartXfer>

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 0207 	and.w	r2, r3, #7
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d901      	bls.n	8003252 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e04c      	b.n	80032ec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003256:	2b00      	cmp	r3, #0
 8003258:	da0e      	bge.n	8003278 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	705a      	strb	r2, [r3, #1]
 8003276:	e00c      	b.n	8003292 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_PCD_EP_SetStall+0x7e>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e01c      	b.n	80032ec <HAL_PCD_EP_SetStall+0xb8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f004 fc08 	bl	8007ad6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d108      	bne.n	80032e2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f004 fd2d 	bl	8007d3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d901      	bls.n	8003312 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e040      	b.n	8003394 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003316:	2b00      	cmp	r3, #0
 8003318:	da0e      	bge.n	8003338 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	705a      	strb	r2, [r3, #1]
 8003336:	e00e      	b.n	8003356 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	f003 0207 	and.w	r2, r3, #7
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_PCD_EP_ClrStall+0x82>
 8003372:	2302      	movs	r3, #2
 8003374:	e00e      	b.n	8003394 <HAL_PCD_EP_ClrStall+0xa0>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	4618      	mov	r0, r3
 8003386:	f004 fbf6 	bl	8007b76 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b096      	sub	sp, #88	@ 0x58
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033a4:	e3be      	b.n	8003b24 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033ae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80033c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 8178 	bne.w	80036ba <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d151      	bne.n	800347a <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80033e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e6:	81fb      	strh	r3, [r7, #14]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	89fb      	ldrh	r3, [r7, #14]
 80033ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3328      	adds	r3, #40	@ 0x28
 80033fe:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	3302      	adds	r3, #2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800342c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	441a      	add	r2, r3
 8003436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003438:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800343a:	2100      	movs	r1, #0
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f006 facc 	bl	80099da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 836a 	beq.w	8003b24 <PCD_EP_ISR_Handler+0x788>
 8003450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 8365 	bne.w	8003b24 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003466:	b2da      	uxtb	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003478:	e354      	b.n	8003b24 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003480:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800348c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003494:	2b00      	cmp	r3, #0
 8003496:	d034      	beq.n	8003502 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	3306      	adds	r3, #6
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	f004 fc80 	bl	8007ddc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034e8:	4013      	ands	r3, r2
 80034ea:	823b      	strh	r3, [r7, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	8a3a      	ldrh	r2, [r7, #16]
 80034f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034f6:	b292      	uxth	r2, r2
 80034f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f006 fa40 	bl	8009980 <HAL_PCD_SetupStageCallback>
 8003500:	e310      	b.n	8003b24 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003502:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003506:	2b00      	cmp	r3, #0
 8003508:	f280 830c 	bge.w	8003b24 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29a      	uxth	r2, r3
 8003514:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003518:	4013      	ands	r3, r2
 800351a:	83fb      	strh	r3, [r7, #30]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	8bfa      	ldrh	r2, [r7, #30]
 8003522:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003526:	b292      	uxth	r2, r2
 8003528:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003532:	b29b      	uxth	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	3306      	adds	r3, #6
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003554:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d019      	beq.n	8003592 <PCD_EP_ISR_Handler+0x1f6>
 800355e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d015      	beq.n	8003592 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356c:	6959      	ldr	r1, [r3, #20]
 800356e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003570:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003574:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003576:	b29b      	uxth	r3, r3
 8003578:	f004 fc30 	bl	8007ddc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800357c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	441a      	add	r2, r3
 8003586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003588:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800358a:	2100      	movs	r1, #0
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f006 fa09 	bl	80099a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800359c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f040 82bd 	bne.w	8003b24 <PCD_EP_ISR_Handler+0x788>
 80035aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80035b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035b6:	f000 82b5 	beq.w	8003b24 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	4413      	add	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80035f0:	d91d      	bls.n	800362e <PCD_EP_ISR_Handler+0x292>
 80035f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <PCD_EP_ISR_Handler+0x270>
 8003606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003608:	3b01      	subs	r3, #1
 800360a:	647b      	str	r3, [r7, #68]	@ 0x44
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29a      	uxth	r2, r3
 8003612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003614:	b29b      	uxth	r3, r3
 8003616:	029b      	lsls	r3, r3, #10
 8003618:	b29b      	uxth	r3, r3
 800361a:	4313      	orrs	r3, r2
 800361c:	b29b      	uxth	r3, r3
 800361e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003626:	b29a      	uxth	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	801a      	strh	r2, [r3, #0]
 800362c:	e026      	b.n	800367c <PCD_EP_ISR_Handler+0x2e0>
 800362e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <PCD_EP_ISR_Handler+0x2b0>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003644:	b29a      	uxth	r2, r3
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	e017      	b.n	800367c <PCD_EP_ISR_Handler+0x2e0>
 800364c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	647b      	str	r3, [r7, #68]	@ 0x44
 8003654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <PCD_EP_ISR_Handler+0x2ca>
 8003660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003662:	3301      	adds	r3, #1
 8003664:	647b      	str	r3, [r7, #68]	@ 0x44
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	b29a      	uxth	r2, r3
 800366c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800366e:	b29b      	uxth	r3, r3
 8003670:	029b      	lsls	r3, r3, #10
 8003672:	b29b      	uxth	r3, r3
 8003674:	4313      	orrs	r3, r2
 8003676:	b29a      	uxth	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800368c:	827b      	strh	r3, [r7, #18]
 800368e:	8a7b      	ldrh	r3, [r7, #18]
 8003690:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003694:	827b      	strh	r3, [r7, #18]
 8003696:	8a7b      	ldrh	r3, [r7, #18]
 8003698:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800369c:	827b      	strh	r3, [r7, #18]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	8a7b      	ldrh	r3, [r7, #18]
 80036a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	8013      	strh	r3, [r2, #0]
 80036b8:	e234      	b.n	8003b24 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036ce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f280 80fc 	bge.w	80038d0 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80036ee:	4013      	ands	r3, r2
 80036f0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003706:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800370a:	b292      	uxth	r2, r2
 800370c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800370e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003726:	7b1b      	ldrb	r3, [r3, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d125      	bne.n	8003778 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003734:	b29b      	uxth	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	3306      	adds	r3, #6
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003754:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003758:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8092 	beq.w	8003886 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003768:	6959      	ldr	r1, [r3, #20]
 800376a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376c:	88da      	ldrh	r2, [r3, #6]
 800376e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003772:	f004 fb33 	bl	8007ddc <USB_ReadPMA>
 8003776:	e086      	b.n	8003886 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377a:	78db      	ldrb	r3, [r3, #3]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d10a      	bne.n	8003796 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003780:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003784:	461a      	mov	r2, r3
 8003786:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f9d9 	bl	8003b40 <HAL_PCD_EP_DB_Receive>
 800378e:	4603      	mov	r3, r0
 8003790:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003794:	e077      	b.n	8003886 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	441a      	add	r2, r3
 80037c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80037c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d024      	beq.n	800383e <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	3302      	adds	r3, #2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003820:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02e      	beq.n	8003886 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382e:	6959      	ldr	r1, [r3, #20]
 8003830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003832:	891a      	ldrh	r2, [r3, #8]
 8003834:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003838:	f004 fad0 	bl	8007ddc <USB_ReadPMA>
 800383c:	e023      	b.n	8003886 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003846:	b29b      	uxth	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	3306      	adds	r3, #6
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003866:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800386a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003878:	6959      	ldr	r1, [r3, #20]
 800387a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800387c:	895a      	ldrh	r2, [r3, #10]
 800387e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003882:	f004 faab 	bl	8007ddc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800388e:	441a      	add	r2, r3
 8003890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003892:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800389c:	441a      	add	r2, r3
 800389e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <PCD_EP_ISR_Handler+0x51a>
 80038aa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80038ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d206      	bcs.n	80038c4 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f006 f871 	bl	80099a4 <HAL_PCD_DataOutStageCallback>
 80038c2:	e005      	b.n	80038d0 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038ca:	4618      	mov	r0, r3
 80038cc:	f002 fd52 	bl	8006374 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80038d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8123 	beq.w	8003b24 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 80038de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800390c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	441a      	add	r2, r3
 800391e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392a:	b29b      	uxth	r3, r3
 800392c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800392e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003930:	78db      	ldrb	r3, [r3, #3]
 8003932:	2b01      	cmp	r3, #1
 8003934:	f040 80a2 	bne.w	8003a7c <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8003938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393a:	2200      	movs	r2, #0
 800393c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800393e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003940:	7b1b      	ldrb	r3, [r3, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8093 	beq.w	8003a6e <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003948:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d046      	beq.n	80039e2 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d126      	bne.n	80039aa <PCD_EP_ISR_Handler+0x60e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800396a:	b29b      	uxth	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	4413      	add	r3, r2
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
 8003974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	011a      	lsls	r2, r3, #4
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	4413      	add	r3, r2
 800397e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003982:	623b      	str	r3, [r7, #32]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398e:	b29a      	uxth	r2, r3
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	801a      	strh	r2, [r3, #0]
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800399e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	e061      	b.n	8003a6e <PCD_EP_ISR_Handler+0x6d2>
 80039aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ac:	785b      	ldrb	r3, [r3, #1]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d15d      	bne.n	8003a6e <PCD_EP_ISR_Handler+0x6d2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c6:	4413      	add	r3, r2
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	011a      	lsls	r2, r3, #4
 80039d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d2:	4413      	add	r3, r2
 80039d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	2200      	movs	r2, #0
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	e045      	b.n	8003a6e <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ea:	785b      	ldrb	r3, [r3, #1]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d126      	bne.n	8003a3e <PCD_EP_ISR_Handler+0x6a2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a04:	4413      	add	r3, r2
 8003a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	011a      	lsls	r2, r3, #4
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a10:	4413      	add	r3, r2
 8003a12:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a16:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	801a      	strh	r2, [r3, #0]
 8003a3c:	e017      	b.n	8003a6e <PCD_EP_ISR_Handler+0x6d2>
 8003a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a40:	785b      	ldrb	r3, [r3, #1]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d113      	bne.n	8003a6e <PCD_EP_ISR_Handler+0x6d2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a54:	4413      	add	r3, r2
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	011a      	lsls	r2, r3, #4
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a60:	4413      	add	r3, r2
 8003a62:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f005 ffb0 	bl	80099da <HAL_PCD_DataInStageCallback>
 8003a7a:	e053      	b.n	8003b24 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003a7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d146      	bne.n	8003b16 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d907      	bls.n	8003ad0 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8003ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac2:	699a      	ldr	r2, [r3, #24]
 8003ac4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ac8:	1ad2      	subs	r2, r2, r3
 8003aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003acc:	619a      	str	r2, [r3, #24]
 8003ace:	e002      	b.n	8003ad6 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f005 ff78 	bl	80099da <HAL_PCD_DataInStageCallback>
 8003aea:	e01b      	b.n	8003b24 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003af4:	441a      	add	r2, r3
 8003af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b02:	441a      	add	r2, r3
 8003b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b06:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f002 fc30 	bl	8006374 <USB_EPStartXfer>
 8003b14:	e006      	b.n	8003b24 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f91b 	bl	8003d5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	b21b      	sxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f6ff ac38 	blt.w	80033a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3758      	adds	r7, #88	@ 0x58
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d07e      	beq.n	8003c56 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b80:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	8b7b      	ldrh	r3, [r7, #26]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d306      	bcc.n	8003b9a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	8b7b      	ldrh	r3, [r7, #26]
 8003b92:	1ad2      	subs	r2, r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	619a      	str	r2, [r3, #24]
 8003b98:	e002      	b.n	8003ba0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d123      	bne.n	8003bf0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc2:	833b      	strh	r3, [r7, #24]
 8003bc4:	8b3b      	ldrh	r3, [r7, #24]
 8003bc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003bca:	833b      	strh	r3, [r7, #24]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	441a      	add	r2, r3
 8003bda:	8b3b      	ldrh	r3, [r7, #24]
 8003bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01f      	beq.n	8003c3a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c14:	82fb      	strh	r3, [r7, #22]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	441a      	add	r2, r3
 8003c24:	8afb      	ldrh	r3, [r7, #22]
 8003c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c3a:	8b7b      	ldrh	r3, [r7, #26]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8087 	beq.w	8003d50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6959      	ldr	r1, [r3, #20]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	891a      	ldrh	r2, [r3, #8]
 8003c4e:	8b7b      	ldrh	r3, [r7, #26]
 8003c50:	f004 f8c4 	bl	8007ddc <USB_ReadPMA>
 8003c54:	e07c      	b.n	8003d50 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	3306      	adds	r3, #6
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	8b7b      	ldrh	r3, [r7, #26]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d306      	bcc.n	8003c98 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	8b7b      	ldrh	r3, [r7, #26]
 8003c90:	1ad2      	subs	r2, r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	619a      	str	r2, [r3, #24]
 8003c96:	e002      	b.n	8003c9e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d123      	bne.n	8003cee <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc0:	83fb      	strh	r3, [r7, #30]
 8003cc2:	8bfb      	ldrh	r3, [r7, #30]
 8003cc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003cc8:	83fb      	strh	r3, [r7, #30]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	441a      	add	r2, r3
 8003cd8:	8bfb      	ldrh	r3, [r7, #30]
 8003cda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d11f      	bne.n	8003d38 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d12:	83bb      	strh	r3, [r7, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	8bbb      	ldrh	r3, [r7, #28]
 8003d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d38:	8b7b      	ldrh	r3, [r7, #26]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6959      	ldr	r1, [r3, #20]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	895a      	ldrh	r2, [r3, #10]
 8003d4a:	8b7b      	ldrh	r3, [r7, #26]
 8003d4c:	f004 f846 	bl	8007ddc <USB_ReadPMA>
    }
  }

  return count;
 8003d50:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b0a4      	sub	sp, #144	@ 0x90
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 81dd 	beq.w	800412e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	3302      	adds	r3, #2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d9c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	699a      	ldr	r2, [r3, #24]
 8003da4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d907      	bls.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	699a      	ldr	r2, [r3, #24]
 8003db0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003db4:	1ad2      	subs	r2, r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	619a      	str	r2, [r3, #24]
 8003dba:	e002      	b.n	8003dc2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 80b9 	bne.w	8003f3e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d126      	bne.n	8003e22 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de8:	4413      	add	r3, r2
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	4413      	add	r3, r2
 8003df6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	801a      	strh	r2, [r3, #0]
 8003e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	e01a      	b.n	8003e58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	785b      	ldrb	r3, [r3, #1]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d116      	bne.n	8003e58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3e:	4413      	add	r3, r2
 8003e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	011a      	lsls	r2, r3, #4
 8003e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e54:	2200      	movs	r2, #0
 8003e56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d126      	bne.n	8003eb4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	011a      	lsls	r2, r3, #4
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	801a      	strh	r2, [r3, #0]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	e017      	b.n	8003ee4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d113      	bne.n	8003ee4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	4413      	add	r3, r2
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	011a      	lsls	r2, r3, #4
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f005 fd75 	bl	80099da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 82fc 	beq.w	80044f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	82fb      	strh	r3, [r7, #22]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	441a      	add	r2, r3
 8003f26:	8afb      	ldrh	r3, [r7, #22]
 8003f28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	8013      	strh	r3, [r2, #0]
 8003f3c:	e2da      	b.n	80044f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d021      	beq.n	8003f8c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f62:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	f040 82ae 	bne.w	80044f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fa0:	441a      	add	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fae:	441a      	add	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6a1a      	ldr	r2, [r3, #32]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d30b      	bcc.n	8003fd8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd0:	1ad2      	subs	r2, r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	621a      	str	r2, [r3, #32]
 8003fd6:	e017      	b.n	8004008 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d108      	bne.n	8003ff2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003fe0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fe4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ff0:	e00a      	b.n	8004008 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2200      	movs	r2, #0
 8004006:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d165      	bne.n	80040dc <HAL_PCD_EP_DB_Transmit+0x382>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800401e:	b29b      	uxth	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004024:	4413      	add	r3, r2
 8004026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	011a      	lsls	r2, r3, #4
 800402e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004030:	4413      	add	r3, r2
 8004032:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004036:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004042:	b29a      	uxth	r2, r3
 8004044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004046:	801a      	strh	r2, [r3, #0]
 8004048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800404c:	2b3e      	cmp	r3, #62	@ 0x3e
 800404e:	d91d      	bls.n	800408c <HAL_PCD_EP_DB_Transmit+0x332>
 8004050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004058:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <HAL_PCD_EP_DB_Transmit+0x310>
 8004064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004066:	3b01      	subs	r3, #1
 8004068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800406a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29a      	uxth	r2, r3
 8004070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004072:	b29b      	uxth	r3, r3
 8004074:	029b      	lsls	r3, r3, #10
 8004076:	b29b      	uxth	r3, r3
 8004078:	4313      	orrs	r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004084:	b29a      	uxth	r2, r3
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004088:	801a      	strh	r2, [r3, #0]
 800408a:	e044      	b.n	8004116 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800408c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <HAL_PCD_EP_DB_Transmit+0x350>
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800409e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a6:	801a      	strh	r2, [r3, #0]
 80040a8:	e035      	b.n	8004116 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80040be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c0:	3301      	adds	r3, #1
 80040c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	029b      	lsls	r3, r3, #10
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	4313      	orrs	r3, r2
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	e01c      	b.n	8004116 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	785b      	ldrb	r3, [r3, #1]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d118      	bne.n	8004116 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040f8:	4413      	add	r3, r2
 80040fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	011a      	lsls	r2, r3, #4
 8004102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004104:	4413      	add	r3, r2
 8004106:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800410a:	643b      	str	r3, [r7, #64]	@ 0x40
 800410c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004110:	b29a      	uxth	r2, r3
 8004112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004114:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6959      	ldr	r1, [r3, #20]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	891a      	ldrh	r2, [r3, #8]
 8004122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004126:	b29b      	uxth	r3, r3
 8004128:	f003 fe13 	bl	8007d52 <USB_WritePMA>
 800412c:	e1e2      	b.n	80044f4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004136:	b29b      	uxth	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	3306      	adds	r3, #6
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004156:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004162:	429a      	cmp	r2, r3
 8004164:	d307      	bcc.n	8004176 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800416e:	1ad2      	subs	r2, r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	619a      	str	r2, [r3, #24]
 8004174:	e002      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2200      	movs	r2, #0
 800417a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f040 80c0 	bne.w	8004306 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d126      	bne.n	80041dc <HAL_PCD_EP_DB_Transmit+0x482>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800419c:	b29b      	uxth	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041a2:	4413      	add	r3, r2
 80041a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	011a      	lsls	r2, r3, #4
 80041ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041ae:	4413      	add	r3, r2
 80041b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	e01a      	b.n	8004212 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d116      	bne.n	8004212 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041f8:	4413      	add	r3, r2
 80041fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	011a      	lsls	r2, r3, #4
 8004202:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004204:	4413      	add	r3, r2
 8004206:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800420a:	663b      	str	r3, [r7, #96]	@ 0x60
 800420c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800420e:	2200      	movs	r2, #0
 8004210:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	677b      	str	r3, [r7, #116]	@ 0x74
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d12b      	bne.n	8004278 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004234:	4413      	add	r3, r2
 8004236:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	011a      	lsls	r2, r3, #4
 800423e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004240:	4413      	add	r3, r2
 8004242:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004246:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800424a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004256:	b29a      	uxth	r2, r3
 8004258:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800425c:	801a      	strh	r2, [r3, #0]
 800425e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800426a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426e:	b29a      	uxth	r2, r3
 8004270:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	e017      	b.n	80042a8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	785b      	ldrb	r3, [r3, #1]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d113      	bne.n	80042a8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800428e:	4413      	add	r3, r2
 8004290:	677b      	str	r3, [r7, #116]	@ 0x74
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	011a      	lsls	r2, r3, #4
 8004298:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800429a:	4413      	add	r3, r2
 800429c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80042a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042a4:	2200      	movs	r2, #0
 80042a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	4619      	mov	r1, r3
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f005 fb93 	bl	80099da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 811a 	bne.w	80044f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042da:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80042f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004300:	b29b      	uxth	r3, r3
 8004302:	8013      	strh	r3, [r2, #0]
 8004304:	e0f6      	b.n	80044f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d121      	bne.n	8004354 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800434c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800435a:	2b01      	cmp	r3, #1
 800435c:	f040 80ca 	bne.w	80044f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004368:	441a      	add	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004376:	441a      	add	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6a1a      	ldr	r2, [r3, #32]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	429a      	cmp	r2, r3
 8004386:	d30b      	bcc.n	80043a0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6a1a      	ldr	r2, [r3, #32]
 8004394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004398:	1ad2      	subs	r2, r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	621a      	str	r2, [r3, #32]
 800439e:	e017      	b.n	80043d0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d108      	bne.n	80043ba <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80043a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80043b8:	e00a      	b.n	80043d0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2200      	movs	r2, #0
 80043c6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d165      	bne.n	80044aa <HAL_PCD_EP_DB_Transmit+0x750>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043f2:	4413      	add	r3, r2
 80043f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	011a      	lsls	r2, r3, #4
 80043fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043fe:	4413      	add	r3, r2
 8004400:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004404:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004406:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004410:	b29a      	uxth	r2, r3
 8004412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800441a:	2b3e      	cmp	r3, #62	@ 0x3e
 800441c:	d91d      	bls.n	800445a <HAL_PCD_EP_DB_Transmit+0x700>
 800441e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004432:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004434:	3b01      	subs	r3, #1
 8004436:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004438:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29a      	uxth	r2, r3
 800443e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004440:	b29b      	uxth	r3, r3
 8004442:	029b      	lsls	r3, r3, #10
 8004444:	b29b      	uxth	r3, r3
 8004446:	4313      	orrs	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800444e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004452:	b29a      	uxth	r2, r3
 8004454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004456:	801a      	strh	r2, [r3, #0]
 8004458:	e041      	b.n	80044de <HAL_PCD_EP_DB_Transmit+0x784>
 800445a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004470:	b29a      	uxth	r2, r3
 8004472:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	e032      	b.n	80044de <HAL_PCD_EP_DB_Transmit+0x784>
 8004478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_PCD_EP_DB_Transmit+0x738>
 800448c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800448e:	3301      	adds	r3, #1
 8004490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29a      	uxth	r2, r3
 8004498:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800449a:	b29b      	uxth	r3, r3
 800449c:	029b      	lsls	r3, r3, #10
 800449e:	b29b      	uxth	r3, r3
 80044a0:	4313      	orrs	r3, r2
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	e019      	b.n	80044de <HAL_PCD_EP_DB_Transmit+0x784>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d115      	bne.n	80044de <HAL_PCD_EP_DB_Transmit+0x784>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c0:	4413      	add	r3, r2
 80044c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	011a      	lsls	r2, r3, #4
 80044ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044cc:	4413      	add	r3, r2
 80044ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044d8:	b29a      	uxth	r2, r3
 80044da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6959      	ldr	r1, [r3, #20]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	895a      	ldrh	r2, [r3, #10]
 80044ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f003 fc2f 	bl	8007d52 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800450a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800450e:	82bb      	strh	r3, [r7, #20]
 8004510:	8abb      	ldrh	r3, [r7, #20]
 8004512:	f083 0310 	eor.w	r3, r3, #16
 8004516:	82bb      	strh	r3, [r7, #20]
 8004518:	8abb      	ldrh	r3, [r7, #20]
 800451a:	f083 0320 	eor.w	r3, r3, #32
 800451e:	82bb      	strh	r3, [r7, #20]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	8abb      	ldrh	r3, [r7, #20]
 8004530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800453c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004540:	b29b      	uxth	r3, r3
 8004542:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3790      	adds	r7, #144	@ 0x90
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800454e:	b480      	push	{r7}
 8004550:	b087      	sub	sp, #28
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	817b      	strh	r3, [r7, #10]
 800455c:	4613      	mov	r3, r2
 800455e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004560:	897b      	ldrh	r3, [r7, #10]
 8004562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800456c:	897b      	ldrh	r3, [r7, #10]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e009      	b.n	8004598 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004584:	897a      	ldrh	r2, [r7, #10]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d107      	bne.n	80045ae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	80da      	strh	r2, [r3, #6]
 80045ac:	e00b      	b.n	80045c6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2201      	movs	r2, #1
 80045b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	0c1b      	lsrs	r3, r3, #16
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr
	...

080045d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e272      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8087 	beq.w	8004702 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045f4:	4b92      	ldr	r3, [pc, #584]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d00c      	beq.n	800461a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004600:	4b8f      	ldr	r3, [pc, #572]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 030c 	and.w	r3, r3, #12
 8004608:	2b08      	cmp	r3, #8
 800460a:	d112      	bne.n	8004632 <HAL_RCC_OscConfig+0x5e>
 800460c:	4b8c      	ldr	r3, [pc, #560]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004618:	d10b      	bne.n	8004632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461a:	4b89      	ldr	r3, [pc, #548]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d06c      	beq.n	8004700 <HAL_RCC_OscConfig+0x12c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d168      	bne.n	8004700 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e24c      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463a:	d106      	bne.n	800464a <HAL_RCC_OscConfig+0x76>
 800463c:	4b80      	ldr	r3, [pc, #512]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a7f      	ldr	r2, [pc, #508]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e02e      	b.n	80046a8 <HAL_RCC_OscConfig+0xd4>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x98>
 8004652:	4b7b      	ldr	r3, [pc, #492]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a7a      	ldr	r2, [pc, #488]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4b78      	ldr	r3, [pc, #480]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a77      	ldr	r2, [pc, #476]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004664:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e01d      	b.n	80046a8 <HAL_RCC_OscConfig+0xd4>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0xbc>
 8004676:	4b72      	ldr	r3, [pc, #456]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a71      	ldr	r2, [pc, #452]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 800467c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	4b6f      	ldr	r3, [pc, #444]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6e      	ldr	r2, [pc, #440]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0xd4>
 8004690:	4b6b      	ldr	r3, [pc, #428]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a6a      	ldr	r2, [pc, #424]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b68      	ldr	r3, [pc, #416]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a67      	ldr	r2, [pc, #412]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 80046a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d013      	beq.n	80046d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fc ff48 	bl	8001544 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fc ff44 	bl	8001544 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	@ 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e200      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0xe4>
 80046d6:	e014      	b.n	8004702 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fc ff34 	bl	8001544 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e0:	f7fc ff30 	bl	8001544 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	@ 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1ec      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	4b53      	ldr	r3, [pc, #332]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x10c>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d063      	beq.n	80047d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800470e:	4b4c      	ldr	r3, [pc, #304]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800471a:	4b49      	ldr	r3, [pc, #292]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b08      	cmp	r3, #8
 8004724:	d11c      	bne.n	8004760 <HAL_RCC_OscConfig+0x18c>
 8004726:	4b46      	ldr	r3, [pc, #280]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d116      	bne.n	8004760 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	4b43      	ldr	r3, [pc, #268]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_RCC_OscConfig+0x176>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e1c0      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474a:	4b3d      	ldr	r3, [pc, #244]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4939      	ldr	r1, [pc, #228]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	e03a      	b.n	80047d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004768:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <HAL_RCC_OscConfig+0x270>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fc fee9 	bl	8001544 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004776:	f7fc fee5 	bl	8001544 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e1a1      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	4b2d      	ldr	r3, [pc, #180]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b2a      	ldr	r3, [pc, #168]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4927      	ldr	r1, [pc, #156]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
 80047a8:	e015      	b.n	80047d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047aa:	4b26      	ldr	r3, [pc, #152]	@ (8004844 <HAL_RCC_OscConfig+0x270>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fc fec8 	bl	8001544 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fc fec4 	bl	8001544 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e180      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d03a      	beq.n	8004858 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d019      	beq.n	800481e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ea:	4b17      	ldr	r3, [pc, #92]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f0:	f7fc fea8 	bl	8001544 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fc fea4 	bl	8001544 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e160      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	4b0d      	ldr	r3, [pc, #52]	@ (8004840 <HAL_RCC_OscConfig+0x26c>)
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004816:	2001      	movs	r0, #1
 8004818:	f000 faba 	bl	8004d90 <RCC_Delay>
 800481c:	e01c      	b.n	8004858 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004824:	f7fc fe8e 	bl	8001544 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482a:	e00f      	b.n	800484c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482c:	f7fc fe8a 	bl	8001544 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d908      	bls.n	800484c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e146      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	42420000 	.word	0x42420000
 8004848:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800484c:	4b92      	ldr	r3, [pc, #584]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e9      	bne.n	800482c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80a6 	beq.w	80049b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800486a:	4b8b      	ldr	r3, [pc, #556]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10d      	bne.n	8004892 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004876:	4b88      	ldr	r3, [pc, #544]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4a87      	ldr	r2, [pc, #540]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004880:	61d3      	str	r3, [r2, #28]
 8004882:	4b85      	ldr	r3, [pc, #532]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004892:	4b82      	ldr	r3, [pc, #520]	@ (8004a9c <HAL_RCC_OscConfig+0x4c8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d118      	bne.n	80048d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a9c <HAL_RCC_OscConfig+0x4c8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a7e      	ldr	r2, [pc, #504]	@ (8004a9c <HAL_RCC_OscConfig+0x4c8>)
 80048a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048aa:	f7fc fe4b 	bl	8001544 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b2:	f7fc fe47 	bl	8001544 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b64      	cmp	r3, #100	@ 0x64
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e103      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	4b75      	ldr	r3, [pc, #468]	@ (8004a9c <HAL_RCC_OscConfig+0x4c8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d106      	bne.n	80048e6 <HAL_RCC_OscConfig+0x312>
 80048d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6213      	str	r3, [r2, #32]
 80048e4:	e02d      	b.n	8004942 <HAL_RCC_OscConfig+0x36e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0x334>
 80048ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4a69      	ldr	r2, [pc, #420]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	6213      	str	r3, [r2, #32]
 80048fa:	4b67      	ldr	r3, [pc, #412]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	4a66      	ldr	r2, [pc, #408]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	6213      	str	r3, [r2, #32]
 8004906:	e01c      	b.n	8004942 <HAL_RCC_OscConfig+0x36e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b05      	cmp	r3, #5
 800490e:	d10c      	bne.n	800492a <HAL_RCC_OscConfig+0x356>
 8004910:	4b61      	ldr	r3, [pc, #388]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	4a60      	ldr	r2, [pc, #384]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004916:	f043 0304 	orr.w	r3, r3, #4
 800491a:	6213      	str	r3, [r2, #32]
 800491c:	4b5e      	ldr	r3, [pc, #376]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4a5d      	ldr	r2, [pc, #372]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6213      	str	r3, [r2, #32]
 8004928:	e00b      	b.n	8004942 <HAL_RCC_OscConfig+0x36e>
 800492a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	4a5a      	ldr	r2, [pc, #360]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	6213      	str	r3, [r2, #32]
 8004936:	4b58      	ldr	r3, [pc, #352]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	4a57      	ldr	r2, [pc, #348]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d015      	beq.n	8004976 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494a:	f7fc fdfb 	bl	8001544 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fc fdf7 	bl	8001544 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e0b1      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004968:	4b4b      	ldr	r3, [pc, #300]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ee      	beq.n	8004952 <HAL_RCC_OscConfig+0x37e>
 8004974:	e014      	b.n	80049a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004976:	f7fc fde5 	bl	8001544 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497c:	e00a      	b.n	8004994 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497e:	f7fc fde1 	bl	8001544 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800498c:	4293      	cmp	r3, r2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e09b      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004994:	4b40      	ldr	r3, [pc, #256]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ee      	bne.n	800497e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 80049ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 8087 	beq.w	8004aca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049bc:	4b36      	ldr	r3, [pc, #216]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 030c 	and.w	r3, r3, #12
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d061      	beq.n	8004a8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d146      	bne.n	8004a5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d0:	4b33      	ldr	r3, [pc, #204]	@ (8004aa0 <HAL_RCC_OscConfig+0x4cc>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d6:	f7fc fdb5 	bl	8001544 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049de:	f7fc fdb1 	bl	8001544 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e06d      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f0:	4b29      	ldr	r3, [pc, #164]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f0      	bne.n	80049de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a04:	d108      	bne.n	8004a18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a06:	4b24      	ldr	r3, [pc, #144]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	4921      	ldr	r1, [pc, #132]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a18:	4b1f      	ldr	r3, [pc, #124]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a19      	ldr	r1, [r3, #32]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	491b      	ldr	r1, [pc, #108]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a30:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <HAL_RCC_OscConfig+0x4cc>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a36:	f7fc fd85 	bl	8001544 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3e:	f7fc fd81 	bl	8001544 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e03d      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a50:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x46a>
 8004a5c:	e035      	b.n	8004aca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5e:	4b10      	ldr	r3, [pc, #64]	@ (8004aa0 <HAL_RCC_OscConfig+0x4cc>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fc fd6e 	bl	8001544 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fc fd6a 	bl	8001544 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e026      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a7e:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x498>
 8004a8a:	e01e      	b.n	8004aca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d107      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e019      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40007000 	.word	0x40007000
 8004aa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <HAL_RCC_OscConfig+0x500>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000

08004ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0d0      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aec:	4b6a      	ldr	r3, [pc, #424]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d910      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afa:	4b67      	ldr	r3, [pc, #412]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 0207 	bic.w	r2, r3, #7
 8004b02:	4965      	ldr	r1, [pc, #404]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c0>)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b63      	ldr	r3, [pc, #396]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0b8      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b34:	4b59      	ldr	r3, [pc, #356]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4a58      	ldr	r2, [pc, #352]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b4c:	4b53      	ldr	r3, [pc, #332]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4a52      	ldr	r2, [pc, #328]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b58:	4b50      	ldr	r3, [pc, #320]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	494d      	ldr	r1, [pc, #308]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d040      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	4b47      	ldr	r3, [pc, #284]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d115      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b96:	4b41      	ldr	r3, [pc, #260]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e073      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e06b      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bb6:	4b39      	ldr	r3, [pc, #228]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f023 0203 	bic.w	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4936      	ldr	r1, [pc, #216]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc8:	f7fc fcbc 	bl	8001544 <HAL_GetTick>
 8004bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd0:	f7fc fcb8 	bl	8001544 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e053      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 020c 	and.w	r2, r3, #12
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d1eb      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b27      	ldr	r3, [pc, #156]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d210      	bcs.n	8004c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b24      	ldr	r3, [pc, #144]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 0207 	bic.w	r2, r3, #7
 8004c0e:	4922      	ldr	r1, [pc, #136]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c0>)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	4b20      	ldr	r3, [pc, #128]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e032      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c34:	4b19      	ldr	r3, [pc, #100]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4916      	ldr	r1, [pc, #88]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c52:	4b12      	ldr	r3, [pc, #72]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	490e      	ldr	r1, [pc, #56]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c66:	f000 f821 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	490a      	ldr	r1, [pc, #40]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c78:	5ccb      	ldrb	r3, [r1, r3]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8004c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c82:	4b09      	ldr	r3, [pc, #36]	@ (8004ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fc fc1a 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40022000 	.word	0x40022000
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	0800d6e4 	.word	0x0800d6e4
 8004ca4:	20000020 	.word	0x20000020
 8004ca8:	20000024 	.word	0x20000024

08004cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d002      	beq.n	8004cdc <HAL_RCC_GetSysClockFreq+0x30>
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d003      	beq.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8004cda:	e027      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cdc:	4b19      	ldr	r3, [pc, #100]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cde:	613b      	str	r3, [r7, #16]
      break;
 8004ce0:	e027      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	0c9b      	lsrs	r3, r3, #18
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	4a17      	ldr	r2, [pc, #92]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004cec:	5cd3      	ldrb	r3, [r2, r3]
 8004cee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d010      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cfa:	4b11      	ldr	r3, [pc, #68]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	0c5b      	lsrs	r3, r3, #17
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	4a11      	ldr	r2, [pc, #68]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d06:	5cd3      	ldrb	r3, [r2, r3]
 8004d08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d0e:	fb03 f202 	mul.w	r2, r3, r2
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	e004      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
 8004d24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	613b      	str	r3, [r7, #16]
      break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d2e:	613b      	str	r3, [r7, #16]
      break;
 8004d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d32:	693b      	ldr	r3, [r7, #16]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
 8004d44:	007a1200 	.word	0x007a1200
 8004d48:	0800d6fc 	.word	0x0800d6fc
 8004d4c:	0800d70c 	.word	0x0800d70c
 8004d50:	003d0900 	.word	0x003d0900

08004d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d58:	4b02      	ldr	r3, [pc, #8]	@ (8004d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	20000020 	.word	0x20000020

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d6c:	f7ff fff2 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4903      	ldr	r1, [pc, #12]	@ (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	0800d6f4 	.word	0x0800d6f4

08004d90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <RCC_Delay+0x34>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc8 <RCC_Delay+0x38>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	0a5b      	lsrs	r3, r3, #9
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004dac:	bf00      	nop
  }
  while (Delay --);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1e5a      	subs	r2, r3, #1
 8004db2:	60fa      	str	r2, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f9      	bne.n	8004dac <RCC_Delay+0x1c>
}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	20000020 	.word	0x20000020
 8004dc8:	10624dd3 	.word	0x10624dd3

08004dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d07d      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004de8:	2300      	movs	r3, #0
 8004dea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dec:	4b4f      	ldr	r3, [pc, #316]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10d      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df8:	4b4c      	ldr	r3, [pc, #304]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e02:	61d3      	str	r3, [r2, #28]
 8004e04:	4b49      	ldr	r3, [pc, #292]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e10:	2301      	movs	r3, #1
 8004e12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e14:	4b46      	ldr	r3, [pc, #280]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d118      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e20:	4b43      	ldr	r3, [pc, #268]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a42      	ldr	r2, [pc, #264]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2c:	f7fc fb8a 	bl	8001544 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e32:	e008      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e34:	f7fc fb86 	bl	8001544 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	@ 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e06d      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e46:	4b3a      	ldr	r3, [pc, #232]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e52:	4b36      	ldr	r3, [pc, #216]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d02e      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d027      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e70:	4b2e      	ldr	r3, [pc, #184]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e80:	4b2c      	ldr	r3, [pc, #176]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e86:	4a29      	ldr	r2, [pc, #164]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d014      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e96:	f7fc fb55 	bl	8001544 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9e:	f7fc fb51 	bl	8001544 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e036      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0ee      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4917      	ldr	r1, [pc, #92]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed8:	4b14      	ldr	r3, [pc, #80]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	4a13      	ldr	r2, [pc, #76]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ee2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	490b      	ldr	r1, [pc, #44]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0310 	and.w	r3, r3, #16
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f0e:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	4904      	ldr	r1, [pc, #16]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40007000 	.word	0x40007000
 8004f34:	42420440 	.word	0x42420440

08004f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e041      	b.n	8004fce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fc f9ca 	bl	80012f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f000 fa7c 	bl	8005474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e03a      	b.n	8005066 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a18      	ldr	r2, [pc, #96]	@ (8005070 <HAL_TIM_Base_Start_IT+0x98>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00e      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x58>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501a:	d009      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x58>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a14      	ldr	r2, [pc, #80]	@ (8005074 <HAL_TIM_Base_Start_IT+0x9c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d004      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x58>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a13      	ldr	r2, [pc, #76]	@ (8005078 <HAL_TIM_Base_Start_IT+0xa0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d111      	bne.n	8005054 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b06      	cmp	r3, #6
 8005040:	d010      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	e007      	b.n	8005064 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800

0800507c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b02      	cmp	r3, #2
 8005090:	d122      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b02      	cmp	r3, #2
 800509e:	d11b      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0202 	mvn.w	r2, #2
 80050a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f9bd 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f9b0 	bl	800542c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f9bf 	bl	8005450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d122      	bne.n	800512c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d11b      	bne.n	800512c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0204 	mvn.w	r2, #4
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f993 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f986 	bl	800542c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f995 	bl	8005450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b08      	cmp	r3, #8
 8005138:	d122      	bne.n	8005180 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b08      	cmp	r3, #8
 8005146:	d11b      	bne.n	8005180 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0208 	mvn.w	r2, #8
 8005150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2204      	movs	r2, #4
 8005156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f969 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f95c 	bl	800542c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f96b 	bl	8005450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b10      	cmp	r3, #16
 800518c:	d122      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b10      	cmp	r3, #16
 800519a:	d11b      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0210 	mvn.w	r2, #16
 80051a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2208      	movs	r2, #8
 80051aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f93f 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f932 	bl	800542c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f941 	bl	8005450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d10e      	bne.n	8005200 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d107      	bne.n	8005200 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0201 	mvn.w	r2, #1
 80051f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f90d 	bl	800541a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520a:	2b80      	cmp	r3, #128	@ 0x80
 800520c:	d10e      	bne.n	800522c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005218:	2b80      	cmp	r3, #128	@ 0x80
 800521a:	d107      	bne.n	800522c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa83 	bl	8005732 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005236:	2b40      	cmp	r3, #64	@ 0x40
 8005238:	d10e      	bne.n	8005258 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005244:	2b40      	cmp	r3, #64	@ 0x40
 8005246:	d107      	bne.n	8005258 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f905 	bl	8005462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b20      	cmp	r3, #32
 8005264:	d10e      	bne.n	8005284 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b20      	cmp	r3, #32
 8005272:	d107      	bne.n	8005284 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0220 	mvn.w	r2, #32
 800527c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa4e 	bl	8005720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_TIM_ConfigClockSource+0x1c>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e0b4      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x186>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e0:	d03e      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0xd4>
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e6:	f200 8087 	bhi.w	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ee:	f000 8086 	beq.w	80053fe <HAL_TIM_ConfigClockSource+0x172>
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f6:	d87f      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b70      	cmp	r3, #112	@ 0x70
 80052fa:	d01a      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0xa6>
 80052fc:	2b70      	cmp	r3, #112	@ 0x70
 80052fe:	d87b      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005300:	2b60      	cmp	r3, #96	@ 0x60
 8005302:	d050      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005304:	2b60      	cmp	r3, #96	@ 0x60
 8005306:	d877      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005308:	2b50      	cmp	r3, #80	@ 0x50
 800530a:	d03c      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0xfa>
 800530c:	2b50      	cmp	r3, #80	@ 0x50
 800530e:	d873      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b40      	cmp	r3, #64	@ 0x40
 8005312:	d058      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005314:	2b40      	cmp	r3, #64	@ 0x40
 8005316:	d86f      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b30      	cmp	r3, #48	@ 0x30
 800531a:	d064      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 800531c:	2b30      	cmp	r3, #48	@ 0x30
 800531e:	d86b      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b20      	cmp	r3, #32
 8005322:	d060      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005324:	2b20      	cmp	r3, #32
 8005326:	d867      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d05c      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 800532c:	2b10      	cmp	r3, #16
 800532e:	d05a      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005330:	e062      	b.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005342:	f000 f970 	bl	8005626 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	609a      	str	r2, [r3, #8]
      break;
 800535e:	e04f      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005370:	f000 f959 	bl	8005626 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005382:	609a      	str	r2, [r3, #8]
      break;
 8005384:	e03c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005392:	461a      	mov	r2, r3
 8005394:	f000 f8d0 	bl	8005538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2150      	movs	r1, #80	@ 0x50
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f927 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 80053a4:	e02c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b2:	461a      	mov	r2, r3
 80053b4:	f000 f8ee 	bl	8005594 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2160      	movs	r1, #96	@ 0x60
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f917 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 80053c4:	e01c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d2:	461a      	mov	r2, r3
 80053d4:	f000 f8b0 	bl	8005538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2140      	movs	r1, #64	@ 0x40
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f907 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 80053e4:	e00c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f000 f8fe 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 80053f6:	e003      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
      break;
 80053fc:	e000      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005410:	7bfb      	ldrb	r3, [r7, #15]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr

0800542c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr

0800543e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr

08005450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a29      	ldr	r2, [pc, #164]	@ (800552c <TIM_Base_SetConfig+0xb8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00b      	beq.n	80054a4 <TIM_Base_SetConfig+0x30>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005492:	d007      	beq.n	80054a4 <TIM_Base_SetConfig+0x30>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a26      	ldr	r2, [pc, #152]	@ (8005530 <TIM_Base_SetConfig+0xbc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <TIM_Base_SetConfig+0x30>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a25      	ldr	r2, [pc, #148]	@ (8005534 <TIM_Base_SetConfig+0xc0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d108      	bne.n	80054b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1c      	ldr	r2, [pc, #112]	@ (800552c <TIM_Base_SetConfig+0xb8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <TIM_Base_SetConfig+0x62>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c4:	d007      	beq.n	80054d6 <TIM_Base_SetConfig+0x62>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a19      	ldr	r2, [pc, #100]	@ (8005530 <TIM_Base_SetConfig+0xbc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_Base_SetConfig+0x62>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a18      	ldr	r2, [pc, #96]	@ (8005534 <TIM_Base_SetConfig+0xc0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d108      	bne.n	80054e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a07      	ldr	r2, [pc, #28]	@ (800552c <TIM_Base_SetConfig+0xb8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d103      	bne.n	800551c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	615a      	str	r2, [r3, #20]
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr
 800552c:	40012c00 	.word	0x40012c00
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800

08005538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f023 030a 	bic.w	r3, r3, #10
 8005574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr

08005594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f023 0210 	bic.w	r2, r3, #16
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	031b      	lsls	r3, r3, #12
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	621a      	str	r2, [r3, #32]
}
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr

080055f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	f043 0307 	orr.w	r3, r3, #7
 8005614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	609a      	str	r2, [r3, #8]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr

08005626 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005626:	b480      	push	{r7}
 8005628:	b087      	sub	sp, #28
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005640:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	021a      	lsls	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	431a      	orrs	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4313      	orrs	r3, r2
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	609a      	str	r2, [r3, #8]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005678:	2302      	movs	r3, #2
 800567a:	e046      	b.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a16      	ldr	r2, [pc, #88]	@ (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00e      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c8:	d009      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a12      	ldr	r2, [pc, #72]	@ (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a10      	ldr	r2, [pc, #64]	@ (800571c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d10c      	bne.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800

08005720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005744:	b084      	sub	sp, #16
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	f107 0014 	add.w	r0, r7, #20
 8005752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	b004      	add	sp, #16
 8005762:	4770      	bx	lr

08005764 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005774:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005778:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	b29a      	uxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005798:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800579c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	4013      	ands	r3, r2
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	460b      	mov	r3, r1
 80057ce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057dc:	b084      	sub	sp, #16
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	f107 0014 	add.w	r0, r7, #20
 80057ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	b004      	add	sp, #16
 800581a:	4770      	bx	lr

0800581c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800581c:	b480      	push	{r7}
 800581e:	b09d      	sub	sp, #116	@ 0x74
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	b29b      	uxth	r3, r3
 800583a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800583e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005842:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	78db      	ldrb	r3, [r3, #3]
 800584a:	2b03      	cmp	r3, #3
 800584c:	d81f      	bhi.n	800588e <USB_ActivateEndpoint+0x72>
 800584e:	a201      	add	r2, pc, #4	@ (adr r2, 8005854 <USB_ActivateEndpoint+0x38>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	08005865 	.word	0x08005865
 8005858:	08005881 	.word	0x08005881
 800585c:	08005897 	.word	0x08005897
 8005860:	08005873 	.word	0x08005873
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005864:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005868:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800586c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005870:	e012      	b.n	8005898 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005872:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005876:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800587a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800587e:	e00b      	b.n	8005898 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005880:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005888:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800588c:	e004      	b.n	8005898 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005894:	e000      	b.n	8005898 <USB_ActivateEndpoint+0x7c>
      break;
 8005896:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	441a      	add	r2, r3
 80058a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80058a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	7812      	ldrb	r2, [r2, #0]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	441a      	add	r2, r3
 80058e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80058ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	7b1b      	ldrb	r3, [r3, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 8178 	bne.w	8005bf8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8084 	beq.w	8005a1a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800591c:	b29b      	uxth	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	4413      	add	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	011a      	lsls	r2, r3, #4
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	88db      	ldrh	r3, [r3, #6]
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	b29b      	uxth	r3, r3
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	827b      	strh	r3, [r7, #18]
 8005954:	8a7b      	ldrh	r3, [r7, #18]
 8005956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01b      	beq.n	8005996 <USB_ActivateEndpoint+0x17a>
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005974:	823b      	strh	r3, [r7, #16]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	8a3b      	ldrh	r3, [r7, #16]
 8005982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800598a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800598e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005992:	b29b      	uxth	r3, r3
 8005994:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	78db      	ldrb	r3, [r3, #3]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d020      	beq.n	80059e0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b4:	81bb      	strh	r3, [r7, #12]
 80059b6:	89bb      	ldrh	r3, [r7, #12]
 80059b8:	f083 0320 	eor.w	r3, r3, #32
 80059bc:	81bb      	strh	r3, [r7, #12]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	441a      	add	r2, r3
 80059c8:	89bb      	ldrh	r3, [r7, #12]
 80059ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059da:	b29b      	uxth	r3, r3
 80059dc:	8013      	strh	r3, [r2, #0]
 80059de:	e2d5      	b.n	8005f8c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059f6:	81fb      	strh	r3, [r7, #14]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	441a      	add	r2, r3
 8005a02:	89fb      	ldrh	r3, [r7, #14]
 8005a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	8013      	strh	r3, [r2, #0]
 8005a18:	e2b8      	b.n	8005f8c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	4413      	add	r3, r2
 8005a2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	011a      	lsls	r2, r3, #4
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	88db      	ldrh	r3, [r3, #6]
 8005a42:	085b      	lsrs	r3, r3, #1
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	4413      	add	r3, r2
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	011a      	lsls	r2, r3, #4
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a88:	d91d      	bls.n	8005ac6 <USB_ActivateEndpoint+0x2aa>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <USB_ActivateEndpoint+0x288>
 8005a9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	029b      	lsls	r3, r3, #10
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	801a      	strh	r2, [r3, #0]
 8005ac4:	e026      	b.n	8005b14 <USB_ActivateEndpoint+0x2f8>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <USB_ActivateEndpoint+0x2c8>
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	e017      	b.n	8005b14 <USB_ActivateEndpoint+0x2f8>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <USB_ActivateEndpoint+0x2e2>
 8005af8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005afa:	3301      	adds	r3, #1
 8005afc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	029b      	lsls	r3, r3, #10
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01b      	beq.n	8005b64 <USB_ActivateEndpoint+0x348>
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b42:	843b      	strh	r3, [r7, #32]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	441a      	add	r2, r3
 8005b4e:	8c3b      	ldrh	r3, [r7, #32]
 8005b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d124      	bne.n	8005bb6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b82:	83bb      	strh	r3, [r7, #28]
 8005b84:	8bbb      	ldrh	r3, [r7, #28]
 8005b86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b8a:	83bb      	strh	r3, [r7, #28]
 8005b8c:	8bbb      	ldrh	r3, [r7, #28]
 8005b8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b92:	83bb      	strh	r3, [r7, #28]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	441a      	add	r2, r3
 8005b9e:	8bbb      	ldrh	r3, [r7, #28]
 8005ba0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ba4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	8013      	strh	r3, [r2, #0]
 8005bb4:	e1ea      	b.n	8005f8c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bcc:	83fb      	strh	r3, [r7, #30]
 8005bce:	8bfb      	ldrh	r3, [r7, #30]
 8005bd0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005bd4:	83fb      	strh	r3, [r7, #30]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	8bfb      	ldrh	r3, [r7, #30]
 8005be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	8013      	strh	r3, [r2, #0]
 8005bf6:	e1c9      	b.n	8005f8c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	78db      	ldrb	r3, [r3, #3]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d11e      	bne.n	8005c3e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c16:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005c28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c30:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	8013      	strh	r3, [r2, #0]
 8005c3c:	e01d      	b.n	8005c7a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c54:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c8a:	4413      	add	r3, r2
 8005c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	011a      	lsls	r2, r3, #4
 8005c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	891b      	ldrh	r3, [r3, #8]
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cbe:	4413      	add	r3, r2
 8005cc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	011a      	lsls	r2, r3, #4
 8005cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005cd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	895b      	ldrh	r3, [r3, #10]
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ce0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 8093 	bne.w	8005e12 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005cfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01b      	beq.n	8005d40 <USB_ActivateEndpoint+0x524>
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	441a      	add	r2, r3
 8005d2a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005d2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005d4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01b      	beq.n	8005d90 <USB_ActivateEndpoint+0x574>
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005da8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005daa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005dae:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005db0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005db2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005db6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	441a      	add	r2, r3
 8005dc2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dee:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005dfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	8013      	strh	r3, [r2, #0]
 8005e10:	e0bc      	b.n	8005f8c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01d      	beq.n	8005e6a <USB_ActivateEndpoint+0x64e>
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e44:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005e7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01d      	beq.n	8005ec2 <USB_ActivateEndpoint+0x6a6>
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	78db      	ldrb	r3, [r3, #3]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d024      	beq.n	8005f14 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005edc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005ee4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005ee8:	f083 0320 	eor.w	r3, r3, #32
 8005eec:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	8013      	strh	r3, [r2, #0]
 8005f12:	e01d      	b.n	8005f50 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005f8c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3774      	adds	r7, #116	@ 0x74
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc80      	pop	{r7}
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop

08005f9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b08d      	sub	sp, #52	@ 0x34
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	7b1b      	ldrb	r3, [r3, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 808e 	bne.w	80060cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d044      	beq.n	8006042 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	81bb      	strh	r3, [r7, #12]
 8005fc6:	89bb      	ldrh	r3, [r7, #12]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <USB_DeactivateEndpoint+0x6c>
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe6:	817b      	strh	r3, [r7, #10]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	441a      	add	r2, r3
 8005ff2:	897b      	ldrh	r3, [r7, #10]
 8005ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006000:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006004:	b29b      	uxth	r3, r3
 8006006:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800601e:	813b      	strh	r3, [r7, #8]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	441a      	add	r2, r3
 800602a:	893b      	ldrh	r3, [r7, #8]
 800602c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603c:	b29b      	uxth	r3, r3
 800603e:	8013      	strh	r3, [r2, #0]
 8006040:	e192      	b.n	8006368 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	827b      	strh	r3, [r7, #18]
 8006050:	8a7b      	ldrh	r3, [r7, #18]
 8006052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01b      	beq.n	8006092 <USB_DeactivateEndpoint+0xf6>
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006070:	823b      	strh	r3, [r7, #16]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	8a3b      	ldrh	r3, [r7, #16]
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006086:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800608a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a8:	81fb      	strh	r3, [r7, #14]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	441a      	add	r2, r3
 80060b4:	89fb      	ldrh	r3, [r7, #14]
 80060b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	8013      	strh	r3, [r2, #0]
 80060ca:	e14d      	b.n	8006368 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 80a5 	bne.w	8006220 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	843b      	strh	r3, [r7, #32]
 80060e4:	8c3b      	ldrh	r3, [r7, #32]
 80060e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01b      	beq.n	8006126 <USB_DeactivateEndpoint+0x18a>
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006104:	83fb      	strh	r3, [r7, #30]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8bfb      	ldrh	r3, [r7, #30]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800611a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800611e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	83bb      	strh	r3, [r7, #28]
 8006134:	8bbb      	ldrh	r3, [r7, #28]
 8006136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01b      	beq.n	8006176 <USB_DeactivateEndpoint+0x1da>
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006154:	837b      	strh	r3, [r7, #26]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	8b7b      	ldrh	r3, [r7, #26]
 8006162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800616a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800616e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006172:	b29b      	uxth	r3, r3
 8006174:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618c:	833b      	strh	r3, [r7, #24]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	441a      	add	r2, r3
 8006198:	8b3b      	ldrh	r3, [r7, #24]
 800619a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800619e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c4:	82fb      	strh	r3, [r7, #22]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	441a      	add	r2, r3
 80061d0:	8afb      	ldrh	r3, [r7, #22]
 80061d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061fc:	82bb      	strh	r3, [r7, #20]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	8abb      	ldrh	r3, [r7, #20]
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]
 800621e:	e0a3      	b.n	8006368 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800622e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01b      	beq.n	8006270 <USB_DeactivateEndpoint+0x2d4>
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800624a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800624e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006264:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800627e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01b      	beq.n	80062c0 <USB_DeactivateEndpoint+0x324>
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800629a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	441a      	add	r2, r3
 80062aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80062ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062bc:	b29b      	uxth	r3, r3
 80062be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	441a      	add	r2, r3
 80062e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800630a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800630e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800631c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006320:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006324:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006346:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	441a      	add	r2, r3
 8006352:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800635c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3734      	adds	r7, #52	@ 0x34
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b0c2      	sub	sp, #264	@ 0x108
 8006378:	af00      	add	r7, sp, #0
 800637a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006382:	6018      	str	r0, [r3, #0]
 8006384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800638e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	2b01      	cmp	r3, #1
 800639c:	f040 86b7 	bne.w	800710e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80063a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699a      	ldr	r2, [r3, #24]
 80063ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d908      	bls.n	80063ce <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80063bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80063cc:	e007      	b.n	80063de <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80063ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	7b1b      	ldrb	r3, [r3, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d13a      	bne.n	8006464 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6959      	ldr	r1, [r3, #20]
 80063fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	88da      	ldrh	r2, [r3, #6]
 8006406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640a:	b29b      	uxth	r3, r3
 800640c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006410:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006414:	6800      	ldr	r0, [r0, #0]
 8006416:	f001 fc9c 	bl	8007d52 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800641a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006434:	b29b      	uxth	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	011a      	lsls	r2, r3, #4
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	f000 be1f 	b.w	80070a2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	78db      	ldrb	r3, [r3, #3]
 8006470:	2b02      	cmp	r3, #2
 8006472:	f040 8462 	bne.w	8006d3a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	429a      	cmp	r2, r3
 8006490:	f240 83df 	bls.w	8006c52 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80064be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	441a      	add	r2, r3
 80064d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80064e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80064f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6a1a      	ldr	r2, [r3, #32]
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006500:	1ad2      	subs	r2, r2, r3
 8006502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800650e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 81c7 	beq.w	80068c4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	633b      	str	r3, [r7, #48]	@ 0x30
 8006542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d177      	bne.n	8006642 <USB_EPStartXfer+0x2ce>
 8006552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006556:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800655e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800656c:	b29b      	uxth	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006572:	4413      	add	r3, r2
 8006574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	011a      	lsls	r2, r3, #4
 8006584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006586:	4413      	add	r3, r2
 8006588:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006598:	b29a      	uxth	r2, r3
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80065a4:	d921      	bls.n	80065ea <USB_EPStartXfer+0x276>
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <USB_EPStartXfer+0x252>
 80065bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80065c0:	3b01      	subs	r3, #1
 80065c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	029b      	lsls	r3, r3, #10
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	4313      	orrs	r3, r2
 80065d8:	b29b      	uxth	r3, r3
 80065da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	e050      	b.n	800668c <USB_EPStartXfer+0x318>
 80065ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <USB_EPStartXfer+0x294>
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006600:	b29a      	uxth	r2, r3
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	801a      	strh	r2, [r3, #0]
 8006606:	e041      	b.n	800668c <USB_EPStartXfer+0x318>
 8006608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660c:	085b      	lsrs	r3, r3, #1
 800660e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <USB_EPStartXfer+0x2b4>
 800661e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006622:	3301      	adds	r3, #1
 8006624:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29a      	uxth	r2, r3
 800662e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006632:	b29b      	uxth	r3, r3
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	b29b      	uxth	r3, r3
 8006638:	4313      	orrs	r3, r2
 800663a:	b29a      	uxth	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	e024      	b.n	800668c <USB_EPStartXfer+0x318>
 8006642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	785b      	ldrb	r3, [r3, #1]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d11c      	bne.n	800668c <USB_EPStartXfer+0x318>
 8006652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006660:	b29b      	uxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006666:	4413      	add	r3, r2
 8006668:	633b      	str	r3, [r7, #48]	@ 0x30
 800666a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	011a      	lsls	r2, r3, #4
 8006678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667a:	4413      	add	r3, r2
 800667c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006686:	b29a      	uxth	r2, r3
 8006688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800668c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	895b      	ldrh	r3, [r3, #10]
 8006698:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800669c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6959      	ldr	r1, [r3, #20]
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066b2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066b6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066ba:	6800      	ldr	r0, [r0, #0]
 80066bc:	f001 fb49 	bl	8007d52 <USB_WritePMA>
            ep->xfer_buff += len;
 80066c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695a      	ldr	r2, [r3, #20]
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	441a      	add	r2, r3
 80066d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6a1a      	ldr	r2, [r3, #32]
 80066ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d90f      	bls.n	800671a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80066fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6a1a      	ldr	r2, [r3, #32]
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670a:	1ad2      	subs	r2, r2, r3
 800670c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	621a      	str	r2, [r3, #32]
 8006718:	e00e      	b.n	8006738 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800672a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2200      	movs	r2, #0
 8006736:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d177      	bne.n	8006838 <USB_EPStartXfer+0x4c4>
 8006748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006762:	b29b      	uxth	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	4413      	add	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	011a      	lsls	r2, r3, #4
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	4413      	add	r3, r2
 800677e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800678e:	b29a      	uxth	r2, r3
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006798:	2b3e      	cmp	r3, #62	@ 0x3e
 800679a:	d921      	bls.n	80067e0 <USB_EPStartXfer+0x46c>
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d104      	bne.n	80067bc <USB_EPStartXfer+0x448>
 80067b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b6:	3b01      	subs	r3, #1
 80067b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	029b      	lsls	r3, r3, #10
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	4313      	orrs	r3, r2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d8:	b29a      	uxth	r2, r3
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	e056      	b.n	800688e <USB_EPStartXfer+0x51a>
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <USB_EPStartXfer+0x48a>
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	e047      	b.n	800688e <USB_EPStartXfer+0x51a>
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <USB_EPStartXfer+0x4aa>
 8006814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006818:	3301      	adds	r3, #1
 800681a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006828:	b29b      	uxth	r3, r3
 800682a:	029b      	lsls	r3, r3, #10
 800682c:	b29b      	uxth	r3, r3
 800682e:	4313      	orrs	r3, r2
 8006830:	b29a      	uxth	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	801a      	strh	r2, [r3, #0]
 8006836:	e02a      	b.n	800688e <USB_EPStartXfer+0x51a>
 8006838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d122      	bne.n	800688e <USB_EPStartXfer+0x51a>
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	623b      	str	r3, [r7, #32]
 8006854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006862:	b29b      	uxth	r3, r3
 8006864:	461a      	mov	r2, r3
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	4413      	add	r3, r2
 800686a:	623b      	str	r3, [r7, #32]
 800686c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	011a      	lsls	r2, r3, #4
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	4413      	add	r3, r2
 800687e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006888:	b29a      	uxth	r2, r3
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800688e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	891b      	ldrh	r3, [r3, #8]
 800689a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800689e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6959      	ldr	r1, [r3, #20]
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068bc:	6800      	ldr	r0, [r0, #0]
 80068be:	f001 fa48 	bl	8007d52 <USB_WritePMA>
 80068c2:	e3ee      	b.n	80070a2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d177      	bne.n	80069c4 <USB_EPStartXfer+0x650>
 80068d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068f4:	4413      	add	r3, r2
 80068f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	011a      	lsls	r2, r3, #4
 8006906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006908:	4413      	add	r3, r2
 800690a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800690e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800691a:	b29a      	uxth	r2, r3
 800691c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691e:	801a      	strh	r2, [r3, #0]
 8006920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006924:	2b3e      	cmp	r3, #62	@ 0x3e
 8006926:	d921      	bls.n	800696c <USB_EPStartXfer+0x5f8>
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <USB_EPStartXfer+0x5d4>
 800693e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006942:	3b01      	subs	r3, #1
 8006944:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29a      	uxth	r2, r3
 800694e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006952:	b29b      	uxth	r3, r3
 8006954:	029b      	lsls	r3, r3, #10
 8006956:	b29b      	uxth	r3, r3
 8006958:	4313      	orrs	r3, r2
 800695a:	b29b      	uxth	r3, r3
 800695c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006964:	b29a      	uxth	r2, r3
 8006966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	e056      	b.n	8006a1a <USB_EPStartXfer+0x6a6>
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <USB_EPStartXfer+0x616>
 8006974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800697e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006982:	b29a      	uxth	r2, r3
 8006984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	e047      	b.n	8006a1a <USB_EPStartXfer+0x6a6>
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <USB_EPStartXfer+0x636>
 80069a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069a4:	3301      	adds	r3, #1
 80069a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80069aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	029b      	lsls	r3, r3, #10
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	4313      	orrs	r3, r2
 80069bc:	b29a      	uxth	r2, r3
 80069be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	e02a      	b.n	8006a1a <USB_EPStartXfer+0x6a6>
 80069c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d122      	bne.n	8006a1a <USB_EPStartXfer+0x6a6>
 80069d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	653b      	str	r3, [r7, #80]	@ 0x50
 80069e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069f4:	4413      	add	r3, r2
 80069f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	011a      	lsls	r2, r3, #4
 8006a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a08:	4413      	add	r3, r2
 8006a0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	891b      	ldrh	r3, [r3, #8]
 8006a26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6959      	ldr	r1, [r3, #20]
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a40:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a44:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a48:	6800      	ldr	r0, [r0, #0]
 8006a4a:	f001 f982 	bl	8007d52 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695a      	ldr	r2, [r3, #20]
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5e:	441a      	add	r2, r3
 8006a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a1a      	ldr	r2, [r3, #32]
 8006a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d90f      	bls.n	8006aa8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6a1a      	ldr	r2, [r3, #32]
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a98:	1ad2      	subs	r2, r2, r3
 8006a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	621a      	str	r2, [r3, #32]
 8006aa6:	e00e      	b.n	8006ac6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d177      	bne.n	8006bd2 <USB_EPStartXfer+0x85e>
 8006ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	4413      	add	r3, r2
 8006b04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	011a      	lsls	r2, r3, #4
 8006b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b16:	4413      	add	r3, r2
 8006b18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b32:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b34:	d921      	bls.n	8006b7a <USB_EPStartXfer+0x806>
 8006b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <USB_EPStartXfer+0x7e2>
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b50:	3b01      	subs	r3, #1
 8006b52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	029b      	lsls	r3, r3, #10
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	e050      	b.n	8006c1c <USB_EPStartXfer+0x8a8>
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <USB_EPStartXfer+0x824>
 8006b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b94:	801a      	strh	r2, [r3, #0]
 8006b96:	e041      	b.n	8006c1c <USB_EPStartXfer+0x8a8>
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9c:	085b      	lsrs	r3, r3, #1
 8006b9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <USB_EPStartXfer+0x844>
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	029b      	lsls	r3, r3, #10
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e024      	b.n	8006c1c <USB_EPStartXfer+0x8a8>
 8006bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d11c      	bne.n	8006c1c <USB_EPStartXfer+0x8a8>
 8006be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf6:	4413      	add	r3, r2
 8006bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	011a      	lsls	r2, r3, #4
 8006c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	895b      	ldrh	r3, [r3, #10]
 8006c28:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6959      	ldr	r1, [r3, #20]
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c42:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c46:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c4a:	6800      	ldr	r0, [r0, #0]
 8006c4c:	f001 f881 	bl	8007d52 <USB_WritePMA>
 8006c50:	e227      	b.n	80070a2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c88:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cde:	4413      	add	r3, r2
 8006ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	011a      	lsls	r2, r3, #4
 8006cf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	891b      	ldrh	r3, [r3, #8]
 8006d10:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6959      	ldr	r1, [r3, #20]
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d2a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d2e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d32:	6800      	ldr	r0, [r0, #0]
 8006d34:	f001 f80d 	bl	8007d52 <USB_WritePMA>
 8006d38:	e1b3      	b.n	80070a2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6a1a      	ldr	r2, [r3, #32]
 8006d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4a:	1ad2      	subs	r2, r2, r3
 8006d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 80c6 	beq.w	8006f0c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d177      	bne.n	8006e8c <USB_EPStartXfer+0xb18>
 8006d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dbc:	4413      	add	r3, r2
 8006dbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	011a      	lsls	r2, r3, #4
 8006dce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006de6:	801a      	strh	r2, [r3, #0]
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dec:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dee:	d921      	bls.n	8006e34 <USB_EPStartXfer+0xac0>
 8006df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfe:	f003 031f 	and.w	r3, r3, #31
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d104      	bne.n	8006e10 <USB_EPStartXfer+0xa9c>
 8006e06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	029b      	lsls	r3, r3, #10
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4313      	orrs	r3, r2
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	e050      	b.n	8006ed6 <USB_EPStartXfer+0xb62>
 8006e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <USB_EPStartXfer+0xade>
 8006e3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e041      	b.n	8006ed6 <USB_EPStartXfer+0xb62>
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e56:	085b      	lsrs	r3, r3, #1
 8006e58:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <USB_EPStartXfer+0xafe>
 8006e68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	029b      	lsls	r3, r3, #10
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4313      	orrs	r3, r2
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	e024      	b.n	8006ed6 <USB_EPStartXfer+0xb62>
 8006e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d11c      	bne.n	8006ed6 <USB_EPStartXfer+0xb62>
 8006e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006eb0:	4413      	add	r3, r2
 8006eb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	011a      	lsls	r2, r3, #4
 8006ec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ed4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	895b      	ldrh	r3, [r3, #10]
 8006ee2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6959      	ldr	r1, [r3, #20]
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006efc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f04:	6800      	ldr	r0, [r0, #0]
 8006f06:	f000 ff24 	bl	8007d52 <USB_WritePMA>
 8006f0a:	e0ca      	b.n	80070a2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	785b      	ldrb	r3, [r3, #1]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d177      	bne.n	800700c <USB_EPStartXfer+0xc98>
 8006f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f3c:	4413      	add	r3, r2
 8006f3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	011a      	lsls	r2, r3, #4
 8006f4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f50:	4413      	add	r3, r2
 8006f52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f6e:	d921      	bls.n	8006fb4 <USB_EPStartXfer+0xc40>
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f74:	095b      	lsrs	r3, r3, #5
 8006f76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d104      	bne.n	8006f90 <USB_EPStartXfer+0xc1c>
 8006f86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	029b      	lsls	r3, r3, #10
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fb0:	801a      	strh	r2, [r3, #0]
 8006fb2:	e05c      	b.n	800706e <USB_EPStartXfer+0xcfa>
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <USB_EPStartXfer+0xc5e>
 8006fbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e04d      	b.n	800706e <USB_EPStartXfer+0xcfa>
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd6:	085b      	lsrs	r3, r3, #1
 8006fd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <USB_EPStartXfer+0xc7e>
 8006fe8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006fec:	3301      	adds	r3, #1
 8006fee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ff2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	029b      	lsls	r3, r3, #10
 8007000:	b29b      	uxth	r3, r3
 8007002:	4313      	orrs	r3, r2
 8007004:	b29a      	uxth	r2, r3
 8007006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	e030      	b.n	800706e <USB_EPStartXfer+0xcfa>
 800700c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d128      	bne.n	800706e <USB_EPStartXfer+0xcfa>
 800701c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800702a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007038:	b29b      	uxth	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007040:	4413      	add	r3, r2
 8007042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	011a      	lsls	r2, r3, #4
 8007054:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007058:	4413      	add	r3, r2
 800705a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800705e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007066:	b29a      	uxth	r2, r3
 8007068:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800706c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	891b      	ldrh	r3, [r3, #8]
 800707a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800707e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6959      	ldr	r1, [r3, #20]
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708e:	b29b      	uxth	r3, r3
 8007090:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007094:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007098:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f000 fe58 	bl	8007d52 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c8:	817b      	strh	r3, [r7, #10]
 80070ca:	897b      	ldrh	r3, [r7, #10]
 80070cc:	f083 0310 	eor.w	r3, r3, #16
 80070d0:	817b      	strh	r3, [r7, #10]
 80070d2:	897b      	ldrh	r3, [r7, #10]
 80070d4:	f083 0320 	eor.w	r3, r3, #32
 80070d8:	817b      	strh	r3, [r7, #10]
 80070da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	897b      	ldrh	r3, [r7, #10]
 80070f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007106:	b29b      	uxth	r3, r3
 8007108:	8013      	strh	r3, [r2, #0]
 800710a:	f000 bcde 	b.w	8007aca <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800710e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	7b1b      	ldrb	r3, [r3, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f040 80bb 	bne.w	8007296 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	429a      	cmp	r2, r3
 800713a:	d917      	bls.n	800716c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800714c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	699a      	ldr	r2, [r3, #24]
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715c:	1ad2      	subs	r2, r2, r3
 800715e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	619a      	str	r2, [r3, #24]
 800716a:	e00e      	b.n	800718a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800716c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800717c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2200      	movs	r2, #0
 8007188:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800718a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80071ae:	4413      	add	r3, r2
 80071b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	011a      	lsls	r2, r3, #4
 80071c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80071c6:	4413      	add	r3, r2
 80071c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80071d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071dc:	b29a      	uxth	r2, r3
 80071de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071e2:	801a      	strh	r2, [r3, #0]
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80071ea:	d924      	bls.n	8007236 <USB_EPStartXfer+0xec2>
 80071ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <USB_EPStartXfer+0xe98>
 8007202:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007206:	3b01      	subs	r3, #1
 8007208:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800720c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29a      	uxth	r2, r3
 8007214:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007218:	b29b      	uxth	r3, r3
 800721a:	029b      	lsls	r3, r3, #10
 800721c:	b29b      	uxth	r3, r3
 800721e:	4313      	orrs	r3, r2
 8007220:	b29b      	uxth	r3, r3
 8007222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722a:	b29a      	uxth	r2, r3
 800722c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007230:	801a      	strh	r2, [r3, #0]
 8007232:	f000 bc10 	b.w	8007a56 <USB_EPStartXfer+0x16e2>
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10c      	bne.n	8007258 <USB_EPStartXfer+0xee4>
 800723e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724e:	b29a      	uxth	r2, r3
 8007250:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007254:	801a      	strh	r2, [r3, #0]
 8007256:	e3fe      	b.n	8007a56 <USB_EPStartXfer+0x16e2>
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725c:	085b      	lsrs	r3, r3, #1
 800725e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <USB_EPStartXfer+0xf04>
 800726e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007272:	3301      	adds	r3, #1
 8007274:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29a      	uxth	r2, r3
 8007280:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007284:	b29b      	uxth	r3, r3
 8007286:	029b      	lsls	r3, r3, #10
 8007288:	b29b      	uxth	r3, r3
 800728a:	4313      	orrs	r3, r2
 800728c:	b29a      	uxth	r2, r3
 800728e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	e3df      	b.n	8007a56 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	78db      	ldrb	r3, [r3, #3]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	f040 8218 	bne.w	80076d8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80072a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f040 809d 	bne.w	80073f4 <USB_EPStartXfer+0x1080>
 80072ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	461a      	mov	r2, r3
 80072da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072de:	4413      	add	r3, r2
 80072e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	011a      	lsls	r2, r3, #4
 80072f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072f6:	4413      	add	r3, r2
 80072f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29b      	uxth	r3, r3
 8007308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800730c:	b29a      	uxth	r2, r3
 800730e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	2b3e      	cmp	r3, #62	@ 0x3e
 8007322:	d92b      	bls.n	800737c <USB_EPStartXfer+0x1008>
 8007324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <USB_EPStartXfer+0xfe0>
 800734a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800734e:	3b01      	subs	r3, #1
 8007350:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29a      	uxth	r2, r3
 800735c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007360:	b29b      	uxth	r3, r3
 8007362:	029b      	lsls	r3, r3, #10
 8007364:	b29b      	uxth	r3, r3
 8007366:	4313      	orrs	r3, r2
 8007368:	b29b      	uxth	r3, r3
 800736a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007372:	b29a      	uxth	r2, r3
 8007374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007378:	801a      	strh	r2, [r3, #0]
 800737a:	e070      	b.n	800745e <USB_EPStartXfer+0x10ea>
 800737c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10c      	bne.n	80073a6 <USB_EPStartXfer+0x1032>
 800738c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073a2:	801a      	strh	r2, [r3, #0]
 80073a4:	e05b      	b.n	800745e <USB_EPStartXfer+0x10ea>
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <USB_EPStartXfer+0x1062>
 80073cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d0:	3301      	adds	r3, #1
 80073d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	029b      	lsls	r3, r3, #10
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4313      	orrs	r3, r2
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073f0:	801a      	strh	r2, [r3, #0]
 80073f2:	e034      	b.n	800745e <USB_EPStartXfer+0x10ea>
 80073f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	785b      	ldrb	r3, [r3, #1]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d12c      	bne.n	800745e <USB_EPStartXfer+0x10ea>
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007420:	b29b      	uxth	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007428:	4413      	add	r3, r2
 800742a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800742e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	011a      	lsls	r2, r3, #4
 800743c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007440:	4413      	add	r3, r2
 8007442:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007446:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800744a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	b29a      	uxth	r2, r3
 8007458:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800745c:	801a      	strh	r2, [r3, #0]
 800745e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800746c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	785b      	ldrb	r3, [r3, #1]
 8007478:	2b00      	cmp	r3, #0
 800747a:	f040 809d 	bne.w	80075b8 <USB_EPStartXfer+0x1244>
 800747e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800748c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007490:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800749a:	b29b      	uxth	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074a2:	4413      	add	r3, r2
 80074a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	011a      	lsls	r2, r3, #4
 80074b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074ba:	4413      	add	r3, r2
 80074bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074d6:	801a      	strh	r2, [r3, #0]
 80074d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80074e6:	d92b      	bls.n	8007540 <USB_EPStartXfer+0x11cc>
 80074e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	095b      	lsrs	r3, r3, #5
 80074f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f003 031f 	and.w	r3, r3, #31
 800750a:	2b00      	cmp	r3, #0
 800750c:	d104      	bne.n	8007518 <USB_EPStartXfer+0x11a4>
 800750e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007512:	3b01      	subs	r3, #1
 8007514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007518:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29a      	uxth	r2, r3
 8007520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007524:	b29b      	uxth	r3, r3
 8007526:	029b      	lsls	r3, r3, #10
 8007528:	b29b      	uxth	r3, r3
 800752a:	4313      	orrs	r3, r2
 800752c:	b29b      	uxth	r3, r3
 800752e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007536:	b29a      	uxth	r2, r3
 8007538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800753c:	801a      	strh	r2, [r3, #0]
 800753e:	e069      	b.n	8007614 <USB_EPStartXfer+0x12a0>
 8007540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10c      	bne.n	800756a <USB_EPStartXfer+0x11f6>
 8007550:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007560:	b29a      	uxth	r2, r3
 8007562:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	e054      	b.n	8007614 <USB_EPStartXfer+0x12a0>
 800756a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	085b      	lsrs	r3, r3, #1
 8007578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <USB_EPStartXfer+0x1226>
 8007590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007594:	3301      	adds	r3, #1
 8007596:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800759a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	029b      	lsls	r3, r3, #10
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	4313      	orrs	r3, r2
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	e02d      	b.n	8007614 <USB_EPStartXfer+0x12a0>
 80075b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d125      	bne.n	8007614 <USB_EPStartXfer+0x12a0>
 80075c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075de:	4413      	add	r3, r2
 80075e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	011a      	lsls	r2, r3, #4
 80075f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075f6:	4413      	add	r3, r2
 80075f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	b29a      	uxth	r2, r3
 800760e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007612:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8218 	beq.w	8007a56 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007646:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800764a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d005      	beq.n	800765e <USB_EPStartXfer+0x12ea>
 8007652:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10d      	bne.n	800767a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800765e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007666:	2b00      	cmp	r3, #0
 8007668:	f040 81f5 	bne.w	8007a56 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800766c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	f040 81ee 	bne.w	8007a56 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800767a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	b29b      	uxth	r3, r3
 8007698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800769c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80076a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	441a      	add	r2, r3
 80076be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80076c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	8013      	strh	r3, [r2, #0]
 80076d6:	e1be      	b.n	8007a56 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80076d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	78db      	ldrb	r3, [r3, #3]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	f040 81b4 	bne.w	8007a52 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80076ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	429a      	cmp	r2, r3
 8007704:	d917      	bls.n	8007736 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007726:	1ad2      	subs	r2, r2, r3
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	619a      	str	r2, [r3, #24]
 8007734:	e00e      	b.n	8007754 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2200      	movs	r2, #0
 8007752:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f040 8085 	bne.w	8007870 <USB_EPStartXfer+0x14fc>
 8007766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007782:	b29b      	uxth	r3, r3
 8007784:	461a      	mov	r2, r3
 8007786:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800778a:	4413      	add	r3, r2
 800778c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	011a      	lsls	r2, r3, #4
 800779e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077a2:	4413      	add	r3, r2
 80077a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80077c6:	d923      	bls.n	8007810 <USB_EPStartXfer+0x149c>
 80077c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077cc:	095b      	lsrs	r3, r3, #5
 80077ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d104      	bne.n	80077e8 <USB_EPStartXfer+0x1474>
 80077de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077e2:	3b01      	subs	r3, #1
 80077e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	029b      	lsls	r3, r3, #10
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	4313      	orrs	r3, r2
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007806:	b29a      	uxth	r2, r3
 8007808:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800780c:	801a      	strh	r2, [r3, #0]
 800780e:	e060      	b.n	80078d2 <USB_EPStartXfer+0x155e>
 8007810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10c      	bne.n	8007832 <USB_EPStartXfer+0x14be>
 8007818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007828:	b29a      	uxth	r2, r3
 800782a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800782e:	801a      	strh	r2, [r3, #0]
 8007830:	e04f      	b.n	80078d2 <USB_EPStartXfer+0x155e>
 8007832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007836:	085b      	lsrs	r3, r3, #1
 8007838:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800783c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <USB_EPStartXfer+0x14de>
 8007848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800784c:	3301      	adds	r3, #1
 800784e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	b29a      	uxth	r2, r3
 800785a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800785e:	b29b      	uxth	r3, r3
 8007860:	029b      	lsls	r3, r3, #10
 8007862:	b29b      	uxth	r3, r3
 8007864:	4313      	orrs	r3, r2
 8007866:	b29a      	uxth	r2, r3
 8007868:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	e030      	b.n	80078d2 <USB_EPStartXfer+0x155e>
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d128      	bne.n	80078d2 <USB_EPStartXfer+0x155e>
 8007880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007884:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800788e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800789c:	b29b      	uxth	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078a4:	4413      	add	r3, r2
 80078a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	011a      	lsls	r2, r3, #4
 80078b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078bc:	4413      	add	r3, r2
 80078be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80078d0:	801a      	strh	r2, [r3, #0]
 80078d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 8085 	bne.w	80079fc <USB_EPStartXfer+0x1688>
 80078f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800790e:	b29b      	uxth	r3, r3
 8007910:	461a      	mov	r2, r3
 8007912:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007916:	4413      	add	r3, r2
 8007918:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	011a      	lsls	r2, r3, #4
 800792a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800792e:	4413      	add	r3, r2
 8007930:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007938:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007944:	b29a      	uxth	r2, r3
 8007946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800794a:	801a      	strh	r2, [r3, #0]
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007950:	2b3e      	cmp	r3, #62	@ 0x3e
 8007952:	d923      	bls.n	800799c <USB_EPStartXfer+0x1628>
 8007954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007958:	095b      	lsrs	r3, r3, #5
 800795a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <USB_EPStartXfer+0x1600>
 800796a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800796e:	3b01      	subs	r3, #1
 8007970:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	b29a      	uxth	r2, r3
 800797c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007980:	b29b      	uxth	r3, r3
 8007982:	029b      	lsls	r3, r3, #10
 8007984:	b29b      	uxth	r3, r3
 8007986:	4313      	orrs	r3, r2
 8007988:	b29b      	uxth	r3, r3
 800798a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800798e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007992:	b29a      	uxth	r2, r3
 8007994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007998:	801a      	strh	r2, [r3, #0]
 800799a:	e05c      	b.n	8007a56 <USB_EPStartXfer+0x16e2>
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10c      	bne.n	80079be <USB_EPStartXfer+0x164a>
 80079a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079ba:	801a      	strh	r2, [r3, #0]
 80079bc:	e04b      	b.n	8007a56 <USB_EPStartXfer+0x16e2>
 80079be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c2:	085b      	lsrs	r3, r3, #1
 80079c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d004      	beq.n	80079de <USB_EPStartXfer+0x166a>
 80079d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079d8:	3301      	adds	r3, #1
 80079da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	029b      	lsls	r3, r3, #10
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	4313      	orrs	r3, r2
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079f8:	801a      	strh	r2, [r3, #0]
 80079fa:	e02c      	b.n	8007a56 <USB_EPStartXfer+0x16e2>
 80079fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	785b      	ldrb	r3, [r3, #1]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d124      	bne.n	8007a56 <USB_EPStartXfer+0x16e2>
 8007a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a22:	4413      	add	r3, r2
 8007a24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	011a      	lsls	r2, r3, #4
 8007a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a4e:	801a      	strh	r2, [r3, #0]
 8007a50:	e001      	b.n	8007a56 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e03a      	b.n	8007acc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a84:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a94:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	441a      	add	r2, r3
 8007ab2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	785b      	ldrb	r3, [r3, #1]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d020      	beq.n	8007b2a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007afe:	81bb      	strh	r3, [r7, #12]
 8007b00:	89bb      	ldrh	r3, [r7, #12]
 8007b02:	f083 0310 	eor.w	r3, r3, #16
 8007b06:	81bb      	strh	r3, [r7, #12]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	441a      	add	r2, r3
 8007b12:	89bb      	ldrh	r3, [r7, #12]
 8007b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	8013      	strh	r3, [r2, #0]
 8007b28:	e01f      	b.n	8007b6a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b40:	81fb      	strh	r3, [r7, #14]
 8007b42:	89fb      	ldrh	r3, [r7, #14]
 8007b44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b48:	81fb      	strh	r3, [r7, #14]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	441a      	add	r2, r3
 8007b54:	89fb      	ldrh	r3, [r7, #14]
 8007b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr

08007b76 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b087      	sub	sp, #28
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	7b1b      	ldrb	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f040 809d 	bne.w	8007cc4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	785b      	ldrb	r3, [r3, #1]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d04c      	beq.n	8007c2c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	823b      	strh	r3, [r7, #16]
 8007ba0:	8a3b      	ldrh	r3, [r7, #16]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01b      	beq.n	8007be2 <USB_EPClearStall+0x6c>
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc0:	81fb      	strh	r3, [r7, #14]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	441a      	add	r2, r3
 8007bcc:	89fb      	ldrh	r3, [r7, #14]
 8007bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	78db      	ldrb	r3, [r3, #3]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d06c      	beq.n	8007cc4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c00:	81bb      	strh	r3, [r7, #12]
 8007c02:	89bb      	ldrh	r3, [r7, #12]
 8007c04:	f083 0320 	eor.w	r3, r3, #32
 8007c08:	81bb      	strh	r3, [r7, #12]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	441a      	add	r2, r3
 8007c14:	89bb      	ldrh	r3, [r7, #12]
 8007c16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8013      	strh	r3, [r2, #0]
 8007c2a:	e04b      	b.n	8007cc4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	82fb      	strh	r3, [r7, #22]
 8007c3a:	8afb      	ldrh	r3, [r7, #22]
 8007c3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01b      	beq.n	8007c7c <USB_EPClearStall+0x106>
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5a:	82bb      	strh	r3, [r7, #20]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	441a      	add	r2, r3
 8007c66:	8abb      	ldrh	r3, [r7, #20]
 8007c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c92:	827b      	strh	r3, [r7, #18]
 8007c94:	8a7b      	ldrh	r3, [r7, #18]
 8007c96:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c9a:	827b      	strh	r3, [r7, #18]
 8007c9c:	8a7b      	ldrh	r3, [r7, #18]
 8007c9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ca2:	827b      	strh	r3, [r7, #18]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	441a      	add	r2, r3
 8007cae:	8a7b      	ldrh	r3, [r7, #18]
 8007cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bc80      	pop	{r7}
 8007cce:	4770      	bx	lr

08007cd0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007cdc:	78fb      	ldrb	r3, [r7, #3]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d103      	bne.n	8007cea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2280      	movs	r2, #128	@ 0x80
 8007ce6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr

08007cf6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc80      	pop	{r7}
 8007d08:	4770      	bx	lr

08007d0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr

08007d1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b085      	sub	sp, #20
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d30:	68fb      	ldr	r3, [r7, #12]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr

08007d3c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr

08007d52 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b08b      	sub	sp, #44	@ 0x2c
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	461a      	mov	r2, r3
 8007d60:	460b      	mov	r3, r1
 8007d62:	80fb      	strh	r3, [r7, #6]
 8007d64:	4613      	mov	r3, r2
 8007d66:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d68:	88bb      	ldrh	r3, [r7, #4]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	085b      	lsrs	r3, r3, #1
 8007d6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	005a      	lsls	r2, r3, #1
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d84:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d8a:	e01e      	b.n	8007dca <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	3301      	adds	r3, #1
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	b21a      	sxth	r2, r3
 8007d9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	b21b      	sxth	r3, r3
 8007da4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	8a7a      	ldrh	r2, [r7, #18]
 8007daa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	3302      	adds	r3, #2
 8007db0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	3302      	adds	r3, #2
 8007db6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1dd      	bne.n	8007d8c <USB_WritePMA+0x3a>
  }
}
 8007dd0:	bf00      	nop
 8007dd2:	bf00      	nop
 8007dd4:	372c      	adds	r7, #44	@ 0x2c
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr

08007ddc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b08b      	sub	sp, #44	@ 0x2c
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4611      	mov	r1, r2
 8007de8:	461a      	mov	r2, r3
 8007dea:	460b      	mov	r3, r1
 8007dec:	80fb      	strh	r3, [r7, #6]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007df2:	88bb      	ldrh	r3, [r7, #4]
 8007df4:	085b      	lsrs	r3, r3, #1
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	005a      	lsls	r2, r3, #1
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e0e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e14:	e01b      	b.n	8007e4e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	3302      	adds	r3, #2
 8007e22:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	0a1b      	lsrs	r3, r3, #8
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	3302      	adds	r3, #2
 8007e46:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e0      	bne.n	8007e16 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007e54:	88bb      	ldrh	r3, [r7, #4]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	701a      	strb	r2, [r3, #0]
  }
}
 8007e70:	bf00      	nop
 8007e72:	372c      	adds	r7, #44	@ 0x2c
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr

08007e7a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7c1b      	ldrb	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d115      	bne.n	8007ebe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e96:	2202      	movs	r2, #2
 8007e98:	2181      	movs	r1, #129	@ 0x81
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 fe81 	bl	8009ba2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ea6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007eaa:	2202      	movs	r2, #2
 8007eac:	2101      	movs	r1, #1
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 fe77 	bl	8009ba2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007ebc:	e012      	b.n	8007ee4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ebe:	2340      	movs	r3, #64	@ 0x40
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	2181      	movs	r1, #129	@ 0x81
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 fe6c 	bl	8009ba2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ed0:	2340      	movs	r3, #64	@ 0x40
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 fe63 	bl	8009ba2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ee4:	2308      	movs	r3, #8
 8007ee6:	2203      	movs	r2, #3
 8007ee8:	2182      	movs	r1, #130	@ 0x82
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f001 fe59 	bl	8009ba2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ef6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007efa:	f001 ff79 	bl	8009df0 <USBD_static_malloc>
 8007efe:	4602      	mov	r2, r0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007f10:	2301      	movs	r3, #1
 8007f12:	73fb      	strb	r3, [r7, #15]
 8007f14:	e026      	b.n	8007f64 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f1c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	7c1b      	ldrb	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d109      	bne.n	8007f54 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 ff19 	bl	8009d84 <USBD_LL_PrepareReceive>
 8007f52:	e007      	b.n	8007f64 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f5a:	2340      	movs	r3, #64	@ 0x40
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 ff10 	bl	8009d84 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f7e:	2181      	movs	r1, #129	@ 0x81
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fe34 	bl	8009bee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 fe2d 	bl	8009bee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f9c:	2182      	movs	r1, #130	@ 0x82
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fe25 	bl	8009bee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00e      	beq.n	8007fd2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 ff1f 	bl	8009e08 <USBD_static_free>
    pdev->pClassData = NULL;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008002:	2b00      	cmp	r3, #0
 8008004:	d039      	beq.n	800807a <USBD_CDC_Setup+0x9e>
 8008006:	2b20      	cmp	r3, #32
 8008008:	d17f      	bne.n	800810a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	88db      	ldrh	r3, [r3, #6]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d029      	beq.n	8008066 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	b25b      	sxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	da11      	bge.n	8008040 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008028:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	88d2      	ldrh	r2, [r2, #6]
 800802e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008030:	6939      	ldr	r1, [r7, #16]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	88db      	ldrh	r3, [r3, #6]
 8008036:	461a      	mov	r2, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 fa05 	bl	8009448 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800803e:	e06b      	b.n	8008118 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	785a      	ldrb	r2, [r3, #1]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	88db      	ldrh	r3, [r3, #6]
 800804e:	b2da      	uxtb	r2, r3
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008056:	6939      	ldr	r1, [r7, #16]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	88db      	ldrh	r3, [r3, #6]
 800805c:	461a      	mov	r2, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f001 fa20 	bl	80094a4 <USBD_CtlPrepareRx>
      break;
 8008064:	e058      	b.n	8008118 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	7850      	ldrb	r0, [r2, #1]
 8008072:	2200      	movs	r2, #0
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	4798      	blx	r3
      break;
 8008078:	e04e      	b.n	8008118 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	2b0b      	cmp	r3, #11
 8008080:	d02e      	beq.n	80080e0 <USBD_CDC_Setup+0x104>
 8008082:	2b0b      	cmp	r3, #11
 8008084:	dc38      	bgt.n	80080f8 <USBD_CDC_Setup+0x11c>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <USBD_CDC_Setup+0xb4>
 800808a:	2b0a      	cmp	r3, #10
 800808c:	d014      	beq.n	80080b8 <USBD_CDC_Setup+0xdc>
 800808e:	e033      	b.n	80080f8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008096:	2b03      	cmp	r3, #3
 8008098:	d107      	bne.n	80080aa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800809a:	f107 030c 	add.w	r3, r7, #12
 800809e:	2202      	movs	r2, #2
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 f9d0 	bl	8009448 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080a8:	e02e      	b.n	8008108 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 f961 	bl	8009374 <USBD_CtlError>
            ret = USBD_FAIL;
 80080b2:	2302      	movs	r3, #2
 80080b4:	75fb      	strb	r3, [r7, #23]
          break;
 80080b6:	e027      	b.n	8008108 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d107      	bne.n	80080d2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80080c2:	f107 030f 	add.w	r3, r7, #15
 80080c6:	2201      	movs	r2, #1
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 f9bc 	bl	8009448 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080d0:	e01a      	b.n	8008108 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 f94d 	bl	8009374 <USBD_CtlError>
            ret = USBD_FAIL;
 80080da:	2302      	movs	r3, #2
 80080dc:	75fb      	strb	r3, [r7, #23]
          break;
 80080de:	e013      	b.n	8008108 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d00d      	beq.n	8008106 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 f941 	bl	8009374 <USBD_CtlError>
            ret = USBD_FAIL;
 80080f2:	2302      	movs	r3, #2
 80080f4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080f6:	e006      	b.n	8008106 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 f93a 	bl	8009374 <USBD_CtlError>
          ret = USBD_FAIL;
 8008100:	2302      	movs	r3, #2
 8008102:	75fb      	strb	r3, [r7, #23]
          break;
 8008104:	e000      	b.n	8008108 <USBD_CDC_Setup+0x12c>
          break;
 8008106:	bf00      	nop
      }
      break;
 8008108:	e006      	b.n	8008118 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 f931 	bl	8009374 <USBD_CtlError>
      ret = USBD_FAIL;
 8008112:	2302      	movs	r3, #2
 8008114:	75fb      	strb	r3, [r7, #23]
      break;
 8008116:	bf00      	nop
  }

  return ret;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008134:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800813c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008144:	2b00      	cmp	r3, #0
 8008146:	d03a      	beq.n	80081be <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	331c      	adds	r3, #28
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d029      	beq.n	80081b2 <USBD_CDC_DataIn+0x90>
 800815e:	78fa      	ldrb	r2, [r7, #3]
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	331c      	adds	r3, #28
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	78f9      	ldrb	r1, [r7, #3]
 8008172:	68b8      	ldr	r0, [r7, #8]
 8008174:	460b      	mov	r3, r1
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	4403      	add	r3, r0
 800817e:	3338      	adds	r3, #56	@ 0x38
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	fbb2 f1f3 	udiv	r1, r2, r3
 8008186:	fb01 f303 	mul.w	r3, r1, r3
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	d110      	bne.n	80081b2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008190:	78fa      	ldrb	r2, [r7, #3]
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	440b      	add	r3, r1
 800819e:	331c      	adds	r3, #28
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081a4:	78f9      	ldrb	r1, [r7, #3]
 80081a6:	2300      	movs	r3, #0
 80081a8:	2200      	movs	r2, #0
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 fdc7 	bl	8009d3e <USBD_LL_Transmit>
 80081b0:	e003      	b.n	80081ba <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	e000      	b.n	80081c0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80081be:	2302      	movs	r3, #2
  }
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081da:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 fdf2 	bl	8009dca <USBD_LL_GetRxDataSize>
 80081e6:	4602      	mov	r2, r0
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00d      	beq.n	8008214 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800820c:	4611      	mov	r1, r2
 800820e:	4798      	blx	r3

    return USBD_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	e000      	b.n	8008216 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008214:	2302      	movs	r3, #2
  }
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800822c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008234:	2b00      	cmp	r3, #0
 8008236:	d014      	beq.n	8008262 <USBD_CDC_EP0_RxReady+0x44>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800823e:	2bff      	cmp	r3, #255	@ 0xff
 8008240:	d00f      	beq.n	8008262 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008250:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008258:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	22ff      	movs	r2, #255	@ 0xff
 800825e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2243      	movs	r2, #67	@ 0x43
 8008278:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800827a:	4b03      	ldr	r3, [pc, #12]	@ (8008288 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	200000b4 	.word	0x200000b4

0800828c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2243      	movs	r2, #67	@ 0x43
 8008298:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800829a:	4b03      	ldr	r3, [pc, #12]	@ (80082a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bc80      	pop	{r7}
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	20000070 	.word	0x20000070

080082ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2243      	movs	r2, #67	@ 0x43
 80082b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80082ba:	4b03      	ldr	r3, [pc, #12]	@ (80082c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bc80      	pop	{r7}
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	200000f8 	.word	0x200000f8

080082cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	220a      	movs	r2, #10
 80082d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80082da:	4b03      	ldr	r3, [pc, #12]	@ (80082e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	2000002c 	.word	0x2000002c

080082ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80082f6:	2302      	movs	r3, #2
 80082f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	bc80      	pop	{r7}
 8008316:	4770      	bx	lr

08008318 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800832c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008336:	88fa      	ldrh	r2, [r7, #6]
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	371c      	adds	r7, #28
 8008344:	46bd      	mov	sp, r7
 8008346:	bc80      	pop	{r7}
 8008348:	4770      	bx	lr

0800834a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800834a:	b480      	push	{r7}
 800834c:	b085      	sub	sp, #20
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800835a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr

08008370 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800837e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008386:	2b00      	cmp	r3, #0
 8008388:	d01c      	beq.n	80083c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008390:	2b00      	cmp	r3, #0
 8008392:	d115      	bne.n	80083c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2181      	movs	r1, #129	@ 0x81
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fcc1 	bl	8009d3e <USBD_LL_Transmit>

      return USBD_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	e002      	b.n	80083c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e000      	b.n	80083c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80083c4:	2302      	movs	r3, #2
  }
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d017      	beq.n	8008418 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	7c1b      	ldrb	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083fa:	2101      	movs	r1, #1
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 fcc1 	bl	8009d84 <USBD_LL_PrepareReceive>
 8008402:	e007      	b.n	8008414 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800840a:	2340      	movs	r3, #64	@ 0x40
 800840c:	2101      	movs	r1, #1
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f001 fcb8 	bl	8009d84 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	e000      	b.n	800841a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008418:	2302      	movs	r3, #2
  }
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	4613      	mov	r3, r2
 800842e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008436:	2302      	movs	r3, #2
 8008438:	e01a      	b.n	8008470 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	79fa      	ldrb	r2, [r7, #7]
 8008466:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f001 fb25 	bl	8009ab8 <USBD_LL_Init>

  return USBD_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d006      	beq.n	800849a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
 8008498:	e001      	b.n	800849e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800849a:	2302      	movs	r3, #2
 800849c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800849e:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bc80      	pop	{r7}
 80084a8:	4770      	bx	lr

080084aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 fb5a 	bl	8009b6c <USBD_LL_Start>

  return USBD_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b083      	sub	sp, #12
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr

080084d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084e2:	2302      	movs	r3, #2
 80084e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00c      	beq.n	800850a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	78fa      	ldrb	r2, [r7, #3]
 80084fa:	4611      	mov	r1, r2
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	4798      	blx	r3
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800850a:	7bfb      	ldrb	r3, [r7, #15]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	78fa      	ldrb	r2, [r7, #3]
 800852a:	4611      	mov	r1, r2
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fed8 	bl	8009302 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008560:	461a      	mov	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800856e:	f003 031f 	and.w	r3, r3, #31
 8008572:	2b02      	cmp	r3, #2
 8008574:	d016      	beq.n	80085a4 <USBD_LL_SetupStage+0x6a>
 8008576:	2b02      	cmp	r3, #2
 8008578:	d81c      	bhi.n	80085b4 <USBD_LL_SetupStage+0x7a>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <USBD_LL_SetupStage+0x4a>
 800857e:	2b01      	cmp	r3, #1
 8008580:	d008      	beq.n	8008594 <USBD_LL_SetupStage+0x5a>
 8008582:	e017      	b.n	80085b4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f9cb 	bl	8008928 <USBD_StdDevReq>
      break;
 8008592:	e01a      	b.n	80085ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fa2d 	bl	80089fc <USBD_StdItfReq>
      break;
 80085a2:	e012      	b.n	80085ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fa6d 	bl	8008a8c <USBD_StdEPReq>
      break;
 80085b2:	e00a      	b.n	80085ca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80085ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 fb32 	bl	8009c2c <USBD_LL_StallEP>
      break;
 80085c8:	bf00      	nop
  }

  return USBD_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	460b      	mov	r3, r1
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085e2:	7afb      	ldrb	r3, [r7, #11]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d14b      	bne.n	8008680 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80085ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d134      	bne.n	8008664 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	429a      	cmp	r2, r3
 8008604:	d919      	bls.n	800863a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800861c:	429a      	cmp	r2, r3
 800861e:	d203      	bcs.n	8008628 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008624:	b29b      	uxth	r3, r3
 8008626:	e002      	b.n	800862e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800862c:	b29b      	uxth	r3, r3
 800862e:	461a      	mov	r2, r3
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 ff54 	bl	80094e0 <USBD_CtlContinueRx>
 8008638:	e038      	b.n	80086ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800864c:	2b03      	cmp	r3, #3
 800864e:	d105      	bne.n	800865c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 ff51 	bl	8009504 <USBD_CtlSendStatus>
 8008662:	e023      	b.n	80086ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800866a:	2b05      	cmp	r3, #5
 800866c:	d11e      	bne.n	80086ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008676:	2100      	movs	r1, #0
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f001 fad7 	bl	8009c2c <USBD_LL_StallEP>
 800867e:	e015      	b.n	80086ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00d      	beq.n	80086a8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008692:	2b03      	cmp	r3, #3
 8008694:	d108      	bne.n	80086a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	7afa      	ldrb	r2, [r7, #11]
 80086a0:	4611      	mov	r1, r2
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	4798      	blx	r3
 80086a6:	e001      	b.n	80086ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086a8:	2302      	movs	r3, #2
 80086aa:	e000      	b.n	80086ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b086      	sub	sp, #24
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	460b      	mov	r3, r1
 80086c0:	607a      	str	r2, [r7, #4]
 80086c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d17f      	bne.n	80087ca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3314      	adds	r3, #20
 80086ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d15c      	bne.n	8008794 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d915      	bls.n	8008712 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	1ad2      	subs	r2, r2, r3
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 febe 	bl	8009480 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008704:	2300      	movs	r3, #0
 8008706:	2200      	movs	r2, #0
 8008708:	2100      	movs	r1, #0
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f001 fb3a 	bl	8009d84 <USBD_LL_PrepareReceive>
 8008710:	e04e      	b.n	80087b0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	6912      	ldr	r2, [r2, #16]
 800871a:	fbb3 f1f2 	udiv	r1, r3, r2
 800871e:	fb01 f202 	mul.w	r2, r1, r2
 8008722:	1a9b      	subs	r3, r3, r2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d11c      	bne.n	8008762 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008730:	429a      	cmp	r2, r3
 8008732:	d316      	bcc.n	8008762 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	689a      	ldr	r2, [r3, #8]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800873e:	429a      	cmp	r2, r3
 8008740:	d20f      	bcs.n	8008762 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fe9a 	bl	8009480 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008754:	2300      	movs	r3, #0
 8008756:	2200      	movs	r2, #0
 8008758:	2100      	movs	r1, #0
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f001 fb12 	bl	8009d84 <USBD_LL_PrepareReceive>
 8008760:	e026      	b.n	80087b0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008774:	2b03      	cmp	r3, #3
 8008776:	d105      	bne.n	8008784 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008784:	2180      	movs	r1, #128	@ 0x80
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f001 fa50 	bl	8009c2c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 fecc 	bl	800952a <USBD_CtlReceiveStatus>
 8008792:	e00d      	b.n	80087b0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800879a:	2b04      	cmp	r3, #4
 800879c:	d004      	beq.n	80087a8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d103      	bne.n	80087b0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80087a8:	2180      	movs	r1, #128	@ 0x80
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f001 fa3e 	bl	8009c2c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d11d      	bne.n	80087f6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7ff fe81 	bl	80084c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80087c8:	e015      	b.n	80087f6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00d      	beq.n	80087f2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d108      	bne.n	80087f2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	7afa      	ldrb	r2, [r7, #11]
 80087ea:	4611      	mov	r1, r2
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	4798      	blx	r3
 80087f0:	e001      	b.n	80087f6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087f2:	2302      	movs	r3, #2
 80087f4:	e000      	b.n	80087f8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008808:	2340      	movs	r3, #64	@ 0x40
 800880a:	2200      	movs	r2, #0
 800880c:	2100      	movs	r1, #0
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 f9c7 	bl	8009ba2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2240      	movs	r2, #64	@ 0x40
 8008820:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008824:	2340      	movs	r3, #64	@ 0x40
 8008826:	2200      	movs	r2, #0
 8008828:	2180      	movs	r1, #128	@ 0x80
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 f9b9 	bl	8009ba2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2240      	movs	r2, #64	@ 0x40
 800883a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008860:	2b00      	cmp	r3, #0
 8008862:	d009      	beq.n	8008878 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6852      	ldr	r2, [r2, #4]
 8008870:	b2d2      	uxtb	r2, r2
 8008872:	4611      	mov	r1, r2
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	4798      	blx	r3
  }

  return USBD_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	bc80      	pop	{r7}
 800889e:	4770      	bx	lr

080088a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2204      	movs	r2, #4
 80088b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr

080088c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d105      	bne.n	80088e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bc80      	pop	{r7}
 80088f0:	4770      	bx	lr

080088f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008900:	2b03      	cmp	r3, #3
 8008902:	d10b      	bne.n	800891c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800893e:	2b40      	cmp	r3, #64	@ 0x40
 8008940:	d005      	beq.n	800894e <USBD_StdDevReq+0x26>
 8008942:	2b40      	cmp	r3, #64	@ 0x40
 8008944:	d84f      	bhi.n	80089e6 <USBD_StdDevReq+0xbe>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d009      	beq.n	800895e <USBD_StdDevReq+0x36>
 800894a:	2b20      	cmp	r3, #32
 800894c:	d14b      	bne.n	80089e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	4798      	blx	r3
      break;
 800895c:	e048      	b.n	80089f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	2b09      	cmp	r3, #9
 8008964:	d839      	bhi.n	80089da <USBD_StdDevReq+0xb2>
 8008966:	a201      	add	r2, pc, #4	@ (adr r2, 800896c <USBD_StdDevReq+0x44>)
 8008968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896c:	080089bd 	.word	0x080089bd
 8008970:	080089d1 	.word	0x080089d1
 8008974:	080089db 	.word	0x080089db
 8008978:	080089c7 	.word	0x080089c7
 800897c:	080089db 	.word	0x080089db
 8008980:	0800899f 	.word	0x0800899f
 8008984:	08008995 	.word	0x08008995
 8008988:	080089db 	.word	0x080089db
 800898c:	080089b3 	.word	0x080089b3
 8008990:	080089a9 	.word	0x080089a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f9dc 	bl	8008d54 <USBD_GetDescriptor>
          break;
 800899c:	e022      	b.n	80089e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fb3f 	bl	8009024 <USBD_SetAddress>
          break;
 80089a6:	e01d      	b.n	80089e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fb7e 	bl	80090ac <USBD_SetConfig>
          break;
 80089b0:	e018      	b.n	80089e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fc07 	bl	80091c8 <USBD_GetConfig>
          break;
 80089ba:	e013      	b.n	80089e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fc37 	bl	8009232 <USBD_GetStatus>
          break;
 80089c4:	e00e      	b.n	80089e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc65 	bl	8009298 <USBD_SetFeature>
          break;
 80089ce:	e009      	b.n	80089e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fc74 	bl	80092c0 <USBD_ClrFeature>
          break;
 80089d8:	e004      	b.n	80089e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fcc9 	bl	8009374 <USBD_CtlError>
          break;
 80089e2:	bf00      	nop
      }
      break;
 80089e4:	e004      	b.n	80089f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fcc3 	bl	8009374 <USBD_CtlError>
      break;
 80089ee:	bf00      	nop
  }

  return ret;
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop

080089fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a12:	2b40      	cmp	r3, #64	@ 0x40
 8008a14:	d005      	beq.n	8008a22 <USBD_StdItfReq+0x26>
 8008a16:	2b40      	cmp	r3, #64	@ 0x40
 8008a18:	d82e      	bhi.n	8008a78 <USBD_StdItfReq+0x7c>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <USBD_StdItfReq+0x26>
 8008a1e:	2b20      	cmp	r3, #32
 8008a20:	d12a      	bne.n	8008a78 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d81d      	bhi.n	8008a6a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	889b      	ldrh	r3, [r3, #4]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d813      	bhi.n	8008a60 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	88db      	ldrh	r3, [r3, #6]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d110      	bne.n	8008a74 <USBD_StdItfReq+0x78>
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10d      	bne.n	8008a74 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fd53 	bl	8009504 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a5e:	e009      	b.n	8008a74 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fc86 	bl	8009374 <USBD_CtlError>
          break;
 8008a68:	e004      	b.n	8008a74 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fc81 	bl	8009374 <USBD_CtlError>
          break;
 8008a72:	e000      	b.n	8008a76 <USBD_StdItfReq+0x7a>
          break;
 8008a74:	bf00      	nop
      }
      break;
 8008a76:	e004      	b.n	8008a82 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fc7a 	bl	8009374 <USBD_CtlError>
      break;
 8008a80:	bf00      	nop
  }

  return USBD_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	889b      	ldrh	r3, [r3, #4]
 8008a9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008aa8:	2b40      	cmp	r3, #64	@ 0x40
 8008aaa:	d007      	beq.n	8008abc <USBD_StdEPReq+0x30>
 8008aac:	2b40      	cmp	r3, #64	@ 0x40
 8008aae:	f200 8146 	bhi.w	8008d3e <USBD_StdEPReq+0x2b2>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <USBD_StdEPReq+0x40>
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	f040 8141 	bne.w	8008d3e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	4798      	blx	r3
      break;
 8008aca:	e13d      	b.n	8008d48 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	d10a      	bne.n	8008aee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	4798      	blx	r3
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	e12d      	b.n	8008d4a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	785b      	ldrb	r3, [r3, #1]
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d007      	beq.n	8008b06 <USBD_StdEPReq+0x7a>
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	f300 811b 	bgt.w	8008d32 <USBD_StdEPReq+0x2a6>
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d072      	beq.n	8008be6 <USBD_StdEPReq+0x15a>
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d03a      	beq.n	8008b7a <USBD_StdEPReq+0xee>
 8008b04:	e115      	b.n	8008d32 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d002      	beq.n	8008b16 <USBD_StdEPReq+0x8a>
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d015      	beq.n	8008b40 <USBD_StdEPReq+0xb4>
 8008b14:	e02b      	b.n	8008b6e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00c      	beq.n	8008b36 <USBD_StdEPReq+0xaa>
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	2b80      	cmp	r3, #128	@ 0x80
 8008b20:	d009      	beq.n	8008b36 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 f880 	bl	8009c2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b2c:	2180      	movs	r1, #128	@ 0x80
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 f87c 	bl	8009c2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b34:	e020      	b.n	8008b78 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fc1b 	bl	8009374 <USBD_CtlError>
              break;
 8008b3e:	e01b      	b.n	8008b78 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	885b      	ldrh	r3, [r3, #2]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10e      	bne.n	8008b66 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b48:	7bbb      	ldrb	r3, [r7, #14]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <USBD_StdEPReq+0xda>
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	2b80      	cmp	r3, #128	@ 0x80
 8008b52:	d008      	beq.n	8008b66 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	88db      	ldrh	r3, [r3, #6]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d104      	bne.n	8008b66 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 f863 	bl	8009c2c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fccc 	bl	8009504 <USBD_CtlSendStatus>

              break;
 8008b6c:	e004      	b.n	8008b78 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fbff 	bl	8009374 <USBD_CtlError>
              break;
 8008b76:	bf00      	nop
          }
          break;
 8008b78:	e0e0      	b.n	8008d3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d002      	beq.n	8008b8a <USBD_StdEPReq+0xfe>
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d015      	beq.n	8008bb4 <USBD_StdEPReq+0x128>
 8008b88:	e026      	b.n	8008bd8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00c      	beq.n	8008baa <USBD_StdEPReq+0x11e>
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b80      	cmp	r3, #128	@ 0x80
 8008b94:	d009      	beq.n	8008baa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 f846 	bl	8009c2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ba0:	2180      	movs	r1, #128	@ 0x80
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 f842 	bl	8009c2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ba8:	e01c      	b.n	8008be4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fbe1 	bl	8009374 <USBD_CtlError>
              break;
 8008bb2:	e017      	b.n	8008be4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	885b      	ldrh	r3, [r3, #2]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d112      	bne.n	8008be2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f001 f84d 	bl	8009c6a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc97 	bl	8009504 <USBD_CtlSendStatus>
              }
              break;
 8008bd6:	e004      	b.n	8008be2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fbca 	bl	8009374 <USBD_CtlError>
              break;
 8008be0:	e000      	b.n	8008be4 <USBD_StdEPReq+0x158>
              break;
 8008be2:	bf00      	nop
          }
          break;
 8008be4:	e0aa      	b.n	8008d3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d002      	beq.n	8008bf6 <USBD_StdEPReq+0x16a>
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d032      	beq.n	8008c5a <USBD_StdEPReq+0x1ce>
 8008bf4:	e097      	b.n	8008d26 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d007      	beq.n	8008c0c <USBD_StdEPReq+0x180>
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	2b80      	cmp	r3, #128	@ 0x80
 8008c00:	d004      	beq.n	8008c0c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fbb5 	bl	8009374 <USBD_CtlError>
                break;
 8008c0a:	e091      	b.n	8008d30 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	da0b      	bge.n	8008c2c <USBD_StdEPReq+0x1a0>
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	3310      	adds	r3, #16
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	4413      	add	r3, r2
 8008c28:	3304      	adds	r3, #4
 8008c2a:	e00b      	b.n	8008c44 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	4413      	add	r3, r2
 8008c42:	3304      	adds	r3, #4
 8008c44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	4619      	mov	r1, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fbf8 	bl	8009448 <USBD_CtlSendData>
              break;
 8008c58:	e06a      	b.n	8008d30 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	da11      	bge.n	8008c86 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	f003 020f 	and.w	r2, r3, #15
 8008c68:	6879      	ldr	r1, [r7, #4]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	440b      	add	r3, r1
 8008c74:	3318      	adds	r3, #24
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d117      	bne.n	8008cac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fb78 	bl	8009374 <USBD_CtlError>
                  break;
 8008c84:	e054      	b.n	8008d30 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	f003 020f 	and.w	r2, r3, #15
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d104      	bne.n	8008cac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fb65 	bl	8009374 <USBD_CtlError>
                  break;
 8008caa:	e041      	b.n	8008d30 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	da0b      	bge.n	8008ccc <USBD_StdEPReq+0x240>
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cba:	4613      	mov	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	3310      	adds	r3, #16
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3304      	adds	r3, #4
 8008cca:	e00b      	b.n	8008ce4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ccc:	7bbb      	ldrb	r3, [r7, #14]
 8008cce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <USBD_StdEPReq+0x266>
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	2b80      	cmp	r3, #128	@ 0x80
 8008cf0:	d103      	bne.n	8008cfa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	e00e      	b.n	8008d18 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 ffd2 	bl	8009ca8 <USBD_LL_IsStallEP>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	e002      	b.n	8008d18 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fb92 	bl	8009448 <USBD_CtlSendData>
              break;
 8008d24:	e004      	b.n	8008d30 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fb23 	bl	8009374 <USBD_CtlError>
              break;
 8008d2e:	bf00      	nop
          }
          break;
 8008d30:	e004      	b.n	8008d3c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fb1d 	bl	8009374 <USBD_CtlError>
          break;
 8008d3a:	bf00      	nop
      }
      break;
 8008d3c:	e004      	b.n	8008d48 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fb17 	bl	8009374 <USBD_CtlError>
      break;
 8008d46:	bf00      	nop
  }

  return ret;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	0a1b      	lsrs	r3, r3, #8
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	3b01      	subs	r3, #1
 8008d74:	2b06      	cmp	r3, #6
 8008d76:	f200 8128 	bhi.w	8008fca <USBD_GetDescriptor+0x276>
 8008d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d80 <USBD_GetDescriptor+0x2c>)
 8008d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d80:	08008d9d 	.word	0x08008d9d
 8008d84:	08008db5 	.word	0x08008db5
 8008d88:	08008df5 	.word	0x08008df5
 8008d8c:	08008fcb 	.word	0x08008fcb
 8008d90:	08008fcb 	.word	0x08008fcb
 8008d94:	08008f6b 	.word	0x08008f6b
 8008d98:	08008f97 	.word	0x08008f97
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	7c12      	ldrb	r2, [r2, #16]
 8008da8:	f107 0108 	add.w	r1, r7, #8
 8008dac:	4610      	mov	r0, r2
 8008dae:	4798      	blx	r3
 8008db0:	60f8      	str	r0, [r7, #12]
      break;
 8008db2:	e112      	b.n	8008fda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	7c1b      	ldrb	r3, [r3, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10d      	bne.n	8008dd8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc4:	f107 0208 	add.w	r2, r7, #8
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4798      	blx	r3
 8008dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dd6:	e100      	b.n	8008fda <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de0:	f107 0208 	add.w	r2, r7, #8
 8008de4:	4610      	mov	r0, r2
 8008de6:	4798      	blx	r3
 8008de8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3301      	adds	r3, #1
 8008dee:	2202      	movs	r2, #2
 8008df0:	701a      	strb	r2, [r3, #0]
      break;
 8008df2:	e0f2      	b.n	8008fda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	885b      	ldrh	r3, [r3, #2]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b05      	cmp	r3, #5
 8008dfc:	f200 80ac 	bhi.w	8008f58 <USBD_GetDescriptor+0x204>
 8008e00:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <USBD_GetDescriptor+0xb4>)
 8008e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e06:	bf00      	nop
 8008e08:	08008e21 	.word	0x08008e21
 8008e0c:	08008e55 	.word	0x08008e55
 8008e10:	08008e89 	.word	0x08008e89
 8008e14:	08008ebd 	.word	0x08008ebd
 8008e18:	08008ef1 	.word	0x08008ef1
 8008e1c:	08008f25 	.word	0x08008f25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	7c12      	ldrb	r2, [r2, #16]
 8008e38:	f107 0108 	add.w	r1, r7, #8
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	4798      	blx	r3
 8008e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e42:	e091      	b.n	8008f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa94 	bl	8009374 <USBD_CtlError>
            err++;
 8008e4c:	7afb      	ldrb	r3, [r7, #11]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	72fb      	strb	r3, [r7, #11]
          break;
 8008e52:	e089      	b.n	8008f68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00b      	beq.n	8008e78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	7c12      	ldrb	r2, [r2, #16]
 8008e6c:	f107 0108 	add.w	r1, r7, #8
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
 8008e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e76:	e077      	b.n	8008f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fa7a 	bl	8009374 <USBD_CtlError>
            err++;
 8008e80:	7afb      	ldrb	r3, [r7, #11]
 8008e82:	3301      	adds	r3, #1
 8008e84:	72fb      	strb	r3, [r7, #11]
          break;
 8008e86:	e06f      	b.n	8008f68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00b      	beq.n	8008eac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	7c12      	ldrb	r2, [r2, #16]
 8008ea0:	f107 0108 	add.w	r1, r7, #8
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4798      	blx	r3
 8008ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eaa:	e05d      	b.n	8008f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa60 	bl	8009374 <USBD_CtlError>
            err++;
 8008eb4:	7afb      	ldrb	r3, [r7, #11]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eba:	e055      	b.n	8008f68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00b      	beq.n	8008ee0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	7c12      	ldrb	r2, [r2, #16]
 8008ed4:	f107 0108 	add.w	r1, r7, #8
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4798      	blx	r3
 8008edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ede:	e043      	b.n	8008f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fa46 	bl	8009374 <USBD_CtlError>
            err++;
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	3301      	adds	r3, #1
 8008eec:	72fb      	strb	r3, [r7, #11]
          break;
 8008eee:	e03b      	b.n	8008f68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	7c12      	ldrb	r2, [r2, #16]
 8008f08:	f107 0108 	add.w	r1, r7, #8
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4798      	blx	r3
 8008f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f12:	e029      	b.n	8008f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fa2c 	bl	8009374 <USBD_CtlError>
            err++;
 8008f1c:	7afb      	ldrb	r3, [r7, #11]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	72fb      	strb	r3, [r7, #11]
          break;
 8008f22:	e021      	b.n	8008f68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	7c12      	ldrb	r2, [r2, #16]
 8008f3c:	f107 0108 	add.w	r1, r7, #8
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
 8008f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f46:	e00f      	b.n	8008f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa12 	bl	8009374 <USBD_CtlError>
            err++;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	3301      	adds	r3, #1
 8008f54:	72fb      	strb	r3, [r7, #11]
          break;
 8008f56:	e007      	b.n	8008f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fa0a 	bl	8009374 <USBD_CtlError>
          err++;
 8008f60:	7afb      	ldrb	r3, [r7, #11]
 8008f62:	3301      	adds	r3, #1
 8008f64:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f66:	e038      	b.n	8008fda <USBD_GetDescriptor+0x286>
 8008f68:	e037      	b.n	8008fda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7c1b      	ldrb	r3, [r3, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d109      	bne.n	8008f86 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f7a:	f107 0208 	add.w	r2, r7, #8
 8008f7e:	4610      	mov	r0, r2
 8008f80:	4798      	blx	r3
 8008f82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f84:	e029      	b.n	8008fda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f9f3 	bl	8009374 <USBD_CtlError>
        err++;
 8008f8e:	7afb      	ldrb	r3, [r7, #11]
 8008f90:	3301      	adds	r3, #1
 8008f92:	72fb      	strb	r3, [r7, #11]
      break;
 8008f94:	e021      	b.n	8008fda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	7c1b      	ldrb	r3, [r3, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10d      	bne.n	8008fba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa6:	f107 0208 	add.w	r2, r7, #8
 8008faa:	4610      	mov	r0, r2
 8008fac:	4798      	blx	r3
 8008fae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	2207      	movs	r2, #7
 8008fb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fb8:	e00f      	b.n	8008fda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9d9 	bl	8009374 <USBD_CtlError>
        err++;
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc8:	e007      	b.n	8008fda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f9d1 	bl	8009374 <USBD_CtlError>
      err++;
 8008fd2:	7afb      	ldrb	r3, [r7, #11]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fd8:	bf00      	nop
  }

  if (err != 0U)
 8008fda:	7afb      	ldrb	r3, [r7, #11]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d11c      	bne.n	800901a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008fe0:	893b      	ldrh	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d011      	beq.n	800900a <USBD_GetDescriptor+0x2b6>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	88db      	ldrh	r3, [r3, #6]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00d      	beq.n	800900a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	88da      	ldrh	r2, [r3, #6]
 8008ff2:	893b      	ldrh	r3, [r7, #8]
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	bf28      	it	cs
 8008ff8:	4613      	movcs	r3, r2
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ffe:	893b      	ldrh	r3, [r7, #8]
 8009000:	461a      	mov	r2, r3
 8009002:	68f9      	ldr	r1, [r7, #12]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fa1f 	bl	8009448 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	88db      	ldrh	r3, [r3, #6]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d104      	bne.n	800901c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fa76 	bl	8009504 <USBD_CtlSendStatus>
 8009018:	e000      	b.n	800901c <USBD_GetDescriptor+0x2c8>
    return;
 800901a:	bf00      	nop
    }
  }
}
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop

08009024 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	889b      	ldrh	r3, [r3, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d130      	bne.n	8009098 <USBD_SetAddress+0x74>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	88db      	ldrh	r3, [r3, #6]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d12c      	bne.n	8009098 <USBD_SetAddress+0x74>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	885b      	ldrh	r3, [r3, #2]
 8009042:	2b7f      	cmp	r3, #127	@ 0x7f
 8009044:	d828      	bhi.n	8009098 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	885b      	ldrh	r3, [r3, #2]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009050:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009058:	2b03      	cmp	r3, #3
 800905a:	d104      	bne.n	8009066 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f988 	bl	8009374 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009064:	e01d      	b.n	80090a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	7bfa      	ldrb	r2, [r7, #15]
 800906a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fe44 	bl	8009d00 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fa43 	bl	8009504 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800907e:	7bfb      	ldrb	r3, [r7, #15]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d004      	beq.n	800908e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908c:	e009      	b.n	80090a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009096:	e004      	b.n	80090a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f96a 	bl	8009374 <USBD_CtlError>
  }
}
 80090a0:	bf00      	nop
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	885b      	ldrh	r3, [r3, #2]
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	4b41      	ldr	r3, [pc, #260]	@ (80091c4 <USBD_SetConfig+0x118>)
 80090be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090c0:	4b40      	ldr	r3, [pc, #256]	@ (80091c4 <USBD_SetConfig+0x118>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d904      	bls.n	80090d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f952 	bl	8009374 <USBD_CtlError>
 80090d0:	e075      	b.n	80091be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d002      	beq.n	80090e2 <USBD_SetConfig+0x36>
 80090dc:	2b03      	cmp	r3, #3
 80090de:	d023      	beq.n	8009128 <USBD_SetConfig+0x7c>
 80090e0:	e062      	b.n	80091a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80090e2:	4b38      	ldr	r3, [pc, #224]	@ (80091c4 <USBD_SetConfig+0x118>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d01a      	beq.n	8009120 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80090ea:	4b36      	ldr	r3, [pc, #216]	@ (80091c4 <USBD_SetConfig+0x118>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2203      	movs	r2, #3
 80090f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090fc:	4b31      	ldr	r3, [pc, #196]	@ (80091c4 <USBD_SetConfig+0x118>)
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff f9e7 	bl	80084d6 <USBD_SetClassConfig>
 8009108:	4603      	mov	r3, r0
 800910a:	2b02      	cmp	r3, #2
 800910c:	d104      	bne.n	8009118 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f92f 	bl	8009374 <USBD_CtlError>
            return;
 8009116:	e052      	b.n	80091be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f9f3 	bl	8009504 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800911e:	e04e      	b.n	80091be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f9ef 	bl	8009504 <USBD_CtlSendStatus>
        break;
 8009126:	e04a      	b.n	80091be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009128:	4b26      	ldr	r3, [pc, #152]	@ (80091c4 <USBD_SetConfig+0x118>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d112      	bne.n	8009156 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009138:	4b22      	ldr	r3, [pc, #136]	@ (80091c4 <USBD_SetConfig+0x118>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009142:	4b20      	ldr	r3, [pc, #128]	@ (80091c4 <USBD_SetConfig+0x118>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff f9e3 	bl	8008514 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9d8 	bl	8009504 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009154:	e033      	b.n	80091be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009156:	4b1b      	ldr	r3, [pc, #108]	@ (80091c4 <USBD_SetConfig+0x118>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d01d      	beq.n	80091a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff f9d1 	bl	8008514 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009172:	4b14      	ldr	r3, [pc, #80]	@ (80091c4 <USBD_SetConfig+0x118>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800917c:	4b11      	ldr	r3, [pc, #68]	@ (80091c4 <USBD_SetConfig+0x118>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff f9a7 	bl	80084d6 <USBD_SetClassConfig>
 8009188:	4603      	mov	r3, r0
 800918a:	2b02      	cmp	r3, #2
 800918c:	d104      	bne.n	8009198 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f8ef 	bl	8009374 <USBD_CtlError>
            return;
 8009196:	e012      	b.n	80091be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f9b3 	bl	8009504 <USBD_CtlSendStatus>
        break;
 800919e:	e00e      	b.n	80091be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f9af 	bl	8009504 <USBD_CtlSendStatus>
        break;
 80091a6:	e00a      	b.n	80091be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f8e2 	bl	8009374 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091b0:	4b04      	ldr	r3, [pc, #16]	@ (80091c4 <USBD_SetConfig+0x118>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff f9ac 	bl	8008514 <USBD_ClrClassConfig>
        break;
 80091bc:	bf00      	nop
    }
  }
}
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20000704 	.word	0x20000704

080091c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	88db      	ldrh	r3, [r3, #6]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d004      	beq.n	80091e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f8c9 	bl	8009374 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091e2:	e022      	b.n	800922a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	dc02      	bgt.n	80091f4 <USBD_GetConfig+0x2c>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	dc03      	bgt.n	80091fa <USBD_GetConfig+0x32>
 80091f2:	e015      	b.n	8009220 <USBD_GetConfig+0x58>
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	d00b      	beq.n	8009210 <USBD_GetConfig+0x48>
 80091f8:	e012      	b.n	8009220 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3308      	adds	r3, #8
 8009204:	2201      	movs	r2, #1
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f91d 	bl	8009448 <USBD_CtlSendData>
        break;
 800920e:	e00c      	b.n	800922a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3304      	adds	r3, #4
 8009214:	2201      	movs	r2, #1
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f915 	bl	8009448 <USBD_CtlSendData>
        break;
 800921e:	e004      	b.n	800922a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f8a6 	bl	8009374 <USBD_CtlError>
        break;
 8009228:	bf00      	nop
}
 800922a:	bf00      	nop
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009242:	3b01      	subs	r3, #1
 8009244:	2b02      	cmp	r3, #2
 8009246:	d81e      	bhi.n	8009286 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	88db      	ldrh	r3, [r3, #6]
 800924c:	2b02      	cmp	r3, #2
 800924e:	d004      	beq.n	800925a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f88e 	bl	8009374 <USBD_CtlError>
        break;
 8009258:	e01a      	b.n	8009290 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009266:	2b00      	cmp	r3, #0
 8009268:	d005      	beq.n	8009276 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f043 0202 	orr.w	r2, r3, #2
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	330c      	adds	r3, #12
 800927a:	2202      	movs	r2, #2
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f8e2 	bl	8009448 <USBD_CtlSendData>
      break;
 8009284:	e004      	b.n	8009290 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f873 	bl	8009374 <USBD_CtlError>
      break;
 800928e:	bf00      	nop
  }
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d106      	bne.n	80092b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f926 	bl	8009504 <USBD_CtlSendStatus>
  }
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d0:	3b01      	subs	r3, #1
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d80b      	bhi.n	80092ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	885b      	ldrh	r3, [r3, #2]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d10c      	bne.n	80092f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f90c 	bl	8009504 <USBD_CtlSendStatus>
      }
      break;
 80092ec:	e004      	b.n	80092f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f83f 	bl	8009374 <USBD_CtlError>
      break;
 80092f6:	e000      	b.n	80092fa <USBD_ClrFeature+0x3a>
      break;
 80092f8:	bf00      	nop
  }
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781a      	ldrb	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	785a      	ldrb	r2, [r3, #1]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	3302      	adds	r3, #2
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	3303      	adds	r3, #3
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	021b      	lsls	r3, r3, #8
 800932c:	b29b      	uxth	r3, r3
 800932e:	4413      	add	r3, r2
 8009330:	b29a      	uxth	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	3304      	adds	r3, #4
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	3305      	adds	r3, #5
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	021b      	lsls	r3, r3, #8
 8009346:	b29b      	uxth	r3, r3
 8009348:	4413      	add	r3, r2
 800934a:	b29a      	uxth	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	3306      	adds	r3, #6
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	3307      	adds	r3, #7
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	021b      	lsls	r3, r3, #8
 8009360:	b29b      	uxth	r3, r3
 8009362:	4413      	add	r3, r2
 8009364:	b29a      	uxth	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	80da      	strh	r2, [r3, #6]

}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	bc80      	pop	{r7}
 8009372:	4770      	bx	lr

08009374 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800937e:	2180      	movs	r1, #128	@ 0x80
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fc53 	bl	8009c2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009386:	2100      	movs	r1, #0
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fc4f 	bl	8009c2c <USBD_LL_StallEP>
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b086      	sub	sp, #24
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d032      	beq.n	8009412 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f834 	bl	800941a <USBD_GetLen>
 80093b2:	4603      	mov	r3, r0
 80093b4:	3301      	adds	r3, #1
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	75fa      	strb	r2, [r7, #23]
 80093c6:	461a      	mov	r2, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	4413      	add	r3, r2
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	7812      	ldrb	r2, [r2, #0]
 80093d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	75fa      	strb	r2, [r7, #23]
 80093d8:	461a      	mov	r2, r3
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	2203      	movs	r2, #3
 80093e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80093e2:	e012      	b.n	800940a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	60fa      	str	r2, [r7, #12]
 80093ea:	7dfa      	ldrb	r2, [r7, #23]
 80093ec:	1c51      	adds	r1, r2, #1
 80093ee:	75f9      	strb	r1, [r7, #23]
 80093f0:	4611      	mov	r1, r2
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	440a      	add	r2, r1
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	75fa      	strb	r2, [r7, #23]
 8009400:	461a      	mov	r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	4413      	add	r3, r2
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1e8      	bne.n	80093e4 <USBD_GetString+0x4e>
    }
  }
}
 8009412:	bf00      	nop
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800941a:	b480      	push	{r7}
 800941c:	b085      	sub	sp, #20
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009426:	e005      	b.n	8009434 <USBD_GetLen+0x1a>
  {
    len++;
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	3301      	adds	r3, #1
 800942c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	3301      	adds	r3, #1
 8009432:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1f5      	bne.n	8009428 <USBD_GetLen+0xe>
  }

  return len;
 800943c:	7bfb      	ldrb	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	bc80      	pop	{r7}
 8009446:	4770      	bx	lr

08009448 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2202      	movs	r2, #2
 800945a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800945e:	88fa      	ldrh	r2, [r7, #6]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009464:	88fa      	ldrh	r2, [r7, #6]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800946a:	88fb      	ldrh	r3, [r7, #6]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	2100      	movs	r1, #0
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fc64 	bl	8009d3e <USBD_LL_Transmit>

  return USBD_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	2100      	movs	r1, #0
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 fc52 	bl	8009d3e <USBD_LL_Transmit>

  return USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2203      	movs	r2, #3
 80094b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80094ba:	88fa      	ldrh	r2, [r7, #6]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80094c2:	88fa      	ldrh	r2, [r7, #6]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	2100      	movs	r1, #0
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 fc57 	bl	8009d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	4613      	mov	r3, r2
 80094ec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094ee:	88fb      	ldrh	r3, [r7, #6]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	2100      	movs	r1, #0
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 fc45 	bl	8009d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2204      	movs	r2, #4
 8009510:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009514:	2300      	movs	r3, #0
 8009516:	2200      	movs	r2, #0
 8009518:	2100      	movs	r1, #0
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fc0f 	bl	8009d3e <USBD_LL_Transmit>

  return USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2205      	movs	r2, #5
 8009536:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800953a:	2300      	movs	r3, #0
 800953c:	2200      	movs	r2, #0
 800953e:	2100      	movs	r1, #0
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fc1f 	bl	8009d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009554:	2200      	movs	r2, #0
 8009556:	4912      	ldr	r1, [pc, #72]	@ (80095a0 <MX_USB_DEVICE_Init+0x50>)
 8009558:	4812      	ldr	r0, [pc, #72]	@ (80095a4 <MX_USB_DEVICE_Init+0x54>)
 800955a:	f7fe ff62 	bl	8008422 <USBD_Init>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009564:	f7f7 fbbe 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009568:	490f      	ldr	r1, [pc, #60]	@ (80095a8 <MX_USB_DEVICE_Init+0x58>)
 800956a:	480e      	ldr	r0, [pc, #56]	@ (80095a4 <MX_USB_DEVICE_Init+0x54>)
 800956c:	f7fe ff84 	bl	8008478 <USBD_RegisterClass>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009576:	f7f7 fbb5 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800957a:	490c      	ldr	r1, [pc, #48]	@ (80095ac <MX_USB_DEVICE_Init+0x5c>)
 800957c:	4809      	ldr	r0, [pc, #36]	@ (80095a4 <MX_USB_DEVICE_Init+0x54>)
 800957e:	f7fe feb5 	bl	80082ec <USBD_CDC_RegisterInterface>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009588:	f7f7 fbac 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800958c:	4805      	ldr	r0, [pc, #20]	@ (80095a4 <MX_USB_DEVICE_Init+0x54>)
 800958e:	f7fe ff8c 	bl	80084aa <USBD_Start>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009598:	f7f7 fba4 	bl	8000ce4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800959c:	bf00      	nop
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	2000014c 	.word	0x2000014c
 80095a4:	20000708 	.word	0x20000708
 80095a8:	20000038 	.word	0x20000038
 80095ac:	2000013c 	.word	0x2000013c

080095b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095b4:	2200      	movs	r2, #0
 80095b6:	4905      	ldr	r1, [pc, #20]	@ (80095cc <CDC_Init_FS+0x1c>)
 80095b8:	4805      	ldr	r0, [pc, #20]	@ (80095d0 <CDC_Init_FS+0x20>)
 80095ba:	f7fe fead 	bl	8008318 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095be:	4905      	ldr	r1, [pc, #20]	@ (80095d4 <CDC_Init_FS+0x24>)
 80095c0:	4803      	ldr	r0, [pc, #12]	@ (80095d0 <CDC_Init_FS+0x20>)
 80095c2:	f7fe fec2 	bl	800834a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	20000dcc 	.word	0x20000dcc
 80095d0:	20000708 	.word	0x20000708
 80095d4:	200009cc 	.word	0x200009cc

080095d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095d8:	b480      	push	{r7}
 80095da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095de:	4618      	mov	r0, r3
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bc80      	pop	{r7}
 80095e4:	4770      	bx	lr
	...

080095e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	71fb      	strb	r3, [r7, #7]
 80095f4:	4613      	mov	r3, r2
 80095f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	2b23      	cmp	r3, #35	@ 0x23
 80095fc:	d84a      	bhi.n	8009694 <CDC_Control_FS+0xac>
 80095fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009604 <CDC_Control_FS+0x1c>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009695 	.word	0x08009695
 8009608:	08009695 	.word	0x08009695
 800960c:	08009695 	.word	0x08009695
 8009610:	08009695 	.word	0x08009695
 8009614:	08009695 	.word	0x08009695
 8009618:	08009695 	.word	0x08009695
 800961c:	08009695 	.word	0x08009695
 8009620:	08009695 	.word	0x08009695
 8009624:	08009695 	.word	0x08009695
 8009628:	08009695 	.word	0x08009695
 800962c:	08009695 	.word	0x08009695
 8009630:	08009695 	.word	0x08009695
 8009634:	08009695 	.word	0x08009695
 8009638:	08009695 	.word	0x08009695
 800963c:	08009695 	.word	0x08009695
 8009640:	08009695 	.word	0x08009695
 8009644:	08009695 	.word	0x08009695
 8009648:	08009695 	.word	0x08009695
 800964c:	08009695 	.word	0x08009695
 8009650:	08009695 	.word	0x08009695
 8009654:	08009695 	.word	0x08009695
 8009658:	08009695 	.word	0x08009695
 800965c:	08009695 	.word	0x08009695
 8009660:	08009695 	.word	0x08009695
 8009664:	08009695 	.word	0x08009695
 8009668:	08009695 	.word	0x08009695
 800966c:	08009695 	.word	0x08009695
 8009670:	08009695 	.word	0x08009695
 8009674:	08009695 	.word	0x08009695
 8009678:	08009695 	.word	0x08009695
 800967c:	08009695 	.word	0x08009695
 8009680:	08009695 	.word	0x08009695
 8009684:	08009695 	.word	0x08009695
 8009688:	08009695 	.word	0x08009695
 800968c:	08009695 	.word	0x08009695
 8009690:	08009695 	.word	0x08009695
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009694:	bf00      	nop
  }

  return (USBD_OK);
 8009696:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	bc80      	pop	{r7}
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop

080096a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	4805      	ldr	r0, [pc, #20]	@ (80096c8 <CDC_Receive_FS+0x24>)
 80096b2:	f7fe fe4a 	bl	800834a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096b6:	4804      	ldr	r0, [pc, #16]	@ (80096c8 <CDC_Receive_FS+0x24>)
 80096b8:	f7fe fe89 	bl	80083ce <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20000708 	.word	0x20000708

080096cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009714 <CDC_Transmit_FS+0x48>)
 80096de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e00b      	b.n	800970a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096f2:	887b      	ldrh	r3, [r7, #2]
 80096f4:	461a      	mov	r2, r3
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	4806      	ldr	r0, [pc, #24]	@ (8009714 <CDC_Transmit_FS+0x48>)
 80096fa:	f7fe fe0d 	bl	8008318 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096fe:	4805      	ldr	r0, [pc, #20]	@ (8009714 <CDC_Transmit_FS+0x48>)
 8009700:	f7fe fe36 	bl	8008370 <USBD_CDC_TransmitPacket>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009708:	7bfb      	ldrb	r3, [r7, #15]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20000708 	.word	0x20000708

08009718 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	6039      	str	r1, [r7, #0]
 8009722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2212      	movs	r2, #18
 8009728:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800972a:	4b03      	ldr	r3, [pc, #12]	@ (8009738 <USBD_FS_DeviceDescriptor+0x20>)
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20000168 	.word	0x20000168

0800973c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	6039      	str	r1, [r7, #0]
 8009746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2204      	movs	r2, #4
 800974c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800974e:	4b03      	ldr	r3, [pc, #12]	@ (800975c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	2000017c 	.word	0x2000017c

08009760 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	6039      	str	r1, [r7, #0]
 800976a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d105      	bne.n	800977e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	4907      	ldr	r1, [pc, #28]	@ (8009794 <USBD_FS_ProductStrDescriptor+0x34>)
 8009776:	4808      	ldr	r0, [pc, #32]	@ (8009798 <USBD_FS_ProductStrDescriptor+0x38>)
 8009778:	f7ff fe0d 	bl	8009396 <USBD_GetString>
 800977c:	e004      	b.n	8009788 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	4904      	ldr	r1, [pc, #16]	@ (8009794 <USBD_FS_ProductStrDescriptor+0x34>)
 8009782:	4805      	ldr	r0, [pc, #20]	@ (8009798 <USBD_FS_ProductStrDescriptor+0x38>)
 8009784:	f7ff fe07 	bl	8009396 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009788:	4b02      	ldr	r3, [pc, #8]	@ (8009794 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200011cc 	.word	0x200011cc
 8009798:	0800a898 	.word	0x0800a898

0800979c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	6039      	str	r1, [r7, #0]
 80097a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	4904      	ldr	r1, [pc, #16]	@ (80097bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097ac:	4804      	ldr	r0, [pc, #16]	@ (80097c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097ae:	f7ff fdf2 	bl	8009396 <USBD_GetString>
  return USBD_StrDesc;
 80097b2:	4b02      	ldr	r3, [pc, #8]	@ (80097bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	200011cc 	.word	0x200011cc
 80097c0:	0800a8b0 	.word	0x0800a8b0

080097c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	221a      	movs	r2, #26
 80097d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097d6:	f000 f843 	bl	8009860 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097da:	4b02      	ldr	r3, [pc, #8]	@ (80097e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000180 	.word	0x20000180

080097e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	6039      	str	r1, [r7, #0]
 80097f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d105      	bne.n	8009806 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	4907      	ldr	r1, [pc, #28]	@ (800981c <USBD_FS_ConfigStrDescriptor+0x34>)
 80097fe:	4808      	ldr	r0, [pc, #32]	@ (8009820 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009800:	f7ff fdc9 	bl	8009396 <USBD_GetString>
 8009804:	e004      	b.n	8009810 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	4904      	ldr	r1, [pc, #16]	@ (800981c <USBD_FS_ConfigStrDescriptor+0x34>)
 800980a:	4805      	ldr	r0, [pc, #20]	@ (8009820 <USBD_FS_ConfigStrDescriptor+0x38>)
 800980c:	f7ff fdc3 	bl	8009396 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009810:	4b02      	ldr	r3, [pc, #8]	@ (800981c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	200011cc 	.word	0x200011cc
 8009820:	0800a8c4 	.word	0x0800a8c4

08009824 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	6039      	str	r1, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4907      	ldr	r1, [pc, #28]	@ (8009858 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800983a:	4808      	ldr	r0, [pc, #32]	@ (800985c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800983c:	f7ff fdab 	bl	8009396 <USBD_GetString>
 8009840:	e004      	b.n	800984c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4904      	ldr	r1, [pc, #16]	@ (8009858 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009846:	4805      	ldr	r0, [pc, #20]	@ (800985c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009848:	f7ff fda5 	bl	8009396 <USBD_GetString>
  }
  return USBD_StrDesc;
 800984c:	4b02      	ldr	r3, [pc, #8]	@ (8009858 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	200011cc 	.word	0x200011cc
 800985c:	0800a8d0 	.word	0x0800a8d0

08009860 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009866:	4b0f      	ldr	r3, [pc, #60]	@ (80098a4 <Get_SerialNum+0x44>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800986c:	4b0e      	ldr	r3, [pc, #56]	@ (80098a8 <Get_SerialNum+0x48>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009872:	4b0e      	ldr	r3, [pc, #56]	@ (80098ac <Get_SerialNum+0x4c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4413      	add	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d009      	beq.n	800989a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009886:	2208      	movs	r2, #8
 8009888:	4909      	ldr	r1, [pc, #36]	@ (80098b0 <Get_SerialNum+0x50>)
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f000 f814 	bl	80098b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009890:	2204      	movs	r2, #4
 8009892:	4908      	ldr	r1, [pc, #32]	@ (80098b4 <Get_SerialNum+0x54>)
 8009894:	68b8      	ldr	r0, [r7, #8]
 8009896:	f000 f80f 	bl	80098b8 <IntToUnicode>
  }
}
 800989a:	bf00      	nop
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	1ffff7e8 	.word	0x1ffff7e8
 80098a8:	1ffff7ec 	.word	0x1ffff7ec
 80098ac:	1ffff7f0 	.word	0x1ffff7f0
 80098b0:	20000182 	.word	0x20000182
 80098b4:	20000192 	.word	0x20000192

080098b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	4613      	mov	r3, r2
 80098c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098ca:	2300      	movs	r3, #0
 80098cc:	75fb      	strb	r3, [r7, #23]
 80098ce:	e027      	b.n	8009920 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	0f1b      	lsrs	r3, r3, #28
 80098d4:	2b09      	cmp	r3, #9
 80098d6:	d80b      	bhi.n	80098f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	0f1b      	lsrs	r3, r3, #28
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	005b      	lsls	r3, r3, #1
 80098e2:	4619      	mov	r1, r3
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	440b      	add	r3, r1
 80098e8:	3230      	adds	r2, #48	@ 0x30
 80098ea:	b2d2      	uxtb	r2, r2
 80098ec:	701a      	strb	r2, [r3, #0]
 80098ee:	e00a      	b.n	8009906 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	0f1b      	lsrs	r3, r3, #28
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	4619      	mov	r1, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	440b      	add	r3, r1
 8009900:	3237      	adds	r2, #55	@ 0x37
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	011b      	lsls	r3, r3, #4
 800990a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	005b      	lsls	r3, r3, #1
 8009910:	3301      	adds	r3, #1
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	4413      	add	r3, r2
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	3301      	adds	r3, #1
 800991e:	75fb      	strb	r3, [r7, #23]
 8009920:	7dfa      	ldrb	r2, [r7, #23]
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	429a      	cmp	r2, r3
 8009926:	d3d3      	bcc.n	80098d0 <IntToUnicode+0x18>
  }
}
 8009928:	bf00      	nop
 800992a:	bf00      	nop
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr

08009934 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a0d      	ldr	r2, [pc, #52]	@ (8009978 <HAL_PCD_MspInit+0x44>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d113      	bne.n	800996e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009946:	4b0d      	ldr	r3, [pc, #52]	@ (800997c <HAL_PCD_MspInit+0x48>)
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	4a0c      	ldr	r2, [pc, #48]	@ (800997c <HAL_PCD_MspInit+0x48>)
 800994c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009950:	61d3      	str	r3, [r2, #28]
 8009952:	4b0a      	ldr	r3, [pc, #40]	@ (800997c <HAL_PCD_MspInit+0x48>)
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800995e:	2200      	movs	r2, #0
 8009960:	2100      	movs	r1, #0
 8009962:	2014      	movs	r0, #20
 8009964:	f7f8 fa19 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009968:	2014      	movs	r0, #20
 800996a:	f7f8 fa32 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	40005c00 	.word	0x40005c00
 800997c:	40021000 	.word	0x40021000

08009980 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8009994:	4619      	mov	r1, r3
 8009996:	4610      	mov	r0, r2
 8009998:	f7fe fdcf 	bl	800853a <USBD_LL_SetupStage>
}
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 80099b6:	78fa      	ldrb	r2, [r7, #3]
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	4613      	mov	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	00db      	lsls	r3, r3, #3
 80099c2:	440b      	add	r3, r1
 80099c4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	78fb      	ldrb	r3, [r7, #3]
 80099cc:	4619      	mov	r1, r3
 80099ce:	f7fe fe01 	bl	80085d4 <USBD_LL_DataOutStage>
}
 80099d2:	bf00      	nop
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b082      	sub	sp, #8
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	460b      	mov	r3, r1
 80099e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 80099ec:	78fa      	ldrb	r2, [r7, #3]
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	4613      	mov	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	00db      	lsls	r3, r3, #3
 80099f8:	440b      	add	r3, r1
 80099fa:	333c      	adds	r3, #60	@ 0x3c
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	78fb      	ldrb	r3, [r7, #3]
 8009a00:	4619      	mov	r1, r3
 8009a02:	f7fe fe58 	bl	80086b6 <USBD_LL_DataInStage>
}
 8009a06:	bf00      	nop
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b082      	sub	sp, #8
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe ff68 	bl	80088f2 <USBD_LL_SOF>
}
 8009a22:	bf00      	nop
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a32:	2301      	movs	r3, #1
 8009a34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d001      	beq.n	8009a42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a3e:	f7f7 f951 	bl	8000ce4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009a48:	7bfa      	ldrb	r2, [r7, #15]
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe ff18 	bl	8008882 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fed1 	bl	8008800 <USBD_LL_Reset>
}
 8009a5e:	bf00      	nop
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe ff12 	bl	80088a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d005      	beq.n	8009a90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a84:	4b04      	ldr	r3, [pc, #16]	@ (8009a98 <HAL_PCD_SuspendCallback+0x30>)
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	4a03      	ldr	r2, [pc, #12]	@ (8009a98 <HAL_PCD_SuspendCallback+0x30>)
 8009a8a:	f043 0306 	orr.w	r3, r3, #6
 8009a8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	e000ed00 	.word	0xe000ed00

08009a9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe ff0c 	bl	80088c8 <USBD_LL_Resume>
}
 8009ab0:	bf00      	nop
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009ac0:	4a28      	ldr	r2, [pc, #160]	@ (8009b64 <USBD_LL_Init+0xac>)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a26      	ldr	r2, [pc, #152]	@ (8009b64 <USBD_LL_Init+0xac>)
 8009acc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ad0:	4b24      	ldr	r3, [pc, #144]	@ (8009b64 <USBD_LL_Init+0xac>)
 8009ad2:	4a25      	ldr	r2, [pc, #148]	@ (8009b68 <USBD_LL_Init+0xb0>)
 8009ad4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ad6:	4b23      	ldr	r3, [pc, #140]	@ (8009b64 <USBD_LL_Init+0xac>)
 8009ad8:	2208      	movs	r2, #8
 8009ada:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009adc:	4b21      	ldr	r3, [pc, #132]	@ (8009b64 <USBD_LL_Init+0xac>)
 8009ade:	2202      	movs	r2, #2
 8009ae0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009ae2:	4b20      	ldr	r3, [pc, #128]	@ (8009b64 <USBD_LL_Init+0xac>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8009b64 <USBD_LL_Init+0xac>)
 8009aea:	2200      	movs	r2, #0
 8009aec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009aee:	4b1d      	ldr	r3, [pc, #116]	@ (8009b64 <USBD_LL_Init+0xac>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009af4:	481b      	ldr	r0, [pc, #108]	@ (8009b64 <USBD_LL_Init+0xac>)
 8009af6:	f7f8 ffff 	bl	8002af8 <HAL_PCD_Init>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b00:	f7f7 f8f0 	bl	8000ce4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b0a:	2318      	movs	r3, #24
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	2100      	movs	r1, #0
 8009b10:	f7fa fd1d 	bl	800454e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b1a:	2358      	movs	r3, #88	@ 0x58
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2180      	movs	r1, #128	@ 0x80
 8009b20:	f7fa fd15 	bl	800454e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b2a:	23c0      	movs	r3, #192	@ 0xc0
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2181      	movs	r1, #129	@ 0x81
 8009b30:	f7fa fd0d 	bl	800454e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b3a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2101      	movs	r1, #1
 8009b42:	f7fa fd04 	bl	800454e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b50:	2200      	movs	r2, #0
 8009b52:	2182      	movs	r1, #130	@ 0x82
 8009b54:	f7fa fcfb 	bl	800454e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	200013cc 	.word	0x200013cc
 8009b68:	40005c00 	.word	0x40005c00

08009b6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7f9 f8b7 	bl	8002cf6 <HAL_PCD_Start>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 f94e 	bl	8009e30 <USBD_Get_USB_Status>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	4608      	mov	r0, r1
 8009bac:	4611      	mov	r1, r2
 8009bae:	461a      	mov	r2, r3
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	70fb      	strb	r3, [r7, #3]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70bb      	strb	r3, [r7, #2]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bca:	78bb      	ldrb	r3, [r7, #2]
 8009bcc:	883a      	ldrh	r2, [r7, #0]
 8009bce:	78f9      	ldrb	r1, [r7, #3]
 8009bd0:	f7f9 fa0c 	bl	8002fec <HAL_PCD_EP_Open>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f928 	bl	8009e30 <USBD_Get_USB_Status>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7f9 fa4a 	bl	80030a6 <HAL_PCD_EP_Close>
 8009c12:	4603      	mov	r3, r0
 8009c14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 f909 	bl	8009e30 <USBD_Get_USB_Status>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c46:	78fa      	ldrb	r2, [r7, #3]
 8009c48:	4611      	mov	r1, r2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7f9 faf2 	bl	8003234 <HAL_PCD_EP_SetStall>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 f8ea 	bl	8009e30 <USBD_Get_USB_Status>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c84:	78fa      	ldrb	r2, [r7, #3]
 8009c86:	4611      	mov	r1, r2
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7f9 fb33 	bl	80032f4 <HAL_PCD_EP_ClrStall>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 f8cb 	bl	8009e30 <USBD_Get_USB_Status>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	da0c      	bge.n	8009cde <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cca:	68f9      	ldr	r1, [r7, #12]
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	4613      	mov	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	440b      	add	r3, r1
 8009cd8:	3302      	adds	r3, #2
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	e00b      	b.n	8009cf6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ce4:	68f9      	ldr	r1, [r7, #12]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	440b      	add	r3, r1
 8009cf0:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8009cf4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr

08009d00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d1a:	78fa      	ldrb	r2, [r7, #3]
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7f9 f93f 	bl	8002fa2 <HAL_PCD_SetAddress>
 8009d24:	4603      	mov	r3, r0
 8009d26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 f880 	bl	8009e30 <USBD_Get_USB_Status>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b086      	sub	sp, #24
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	72fb      	strb	r3, [r7, #11]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d60:	893b      	ldrh	r3, [r7, #8]
 8009d62:	7af9      	ldrb	r1, [r7, #11]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	f7f9 fa2e 	bl	80031c6 <HAL_PCD_EP_Transmit>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 f85d 	bl	8009e30 <USBD_Get_USB_Status>
 8009d76:	4603      	mov	r3, r0
 8009d78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	607a      	str	r2, [r7, #4]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	460b      	mov	r3, r1
 8009d92:	72fb      	strb	r3, [r7, #11]
 8009d94:	4613      	mov	r3, r2
 8009d96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009da6:	893b      	ldrh	r3, [r7, #8]
 8009da8:	7af9      	ldrb	r1, [r7, #11]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	f7f9 f9c3 	bl	8003136 <HAL_PCD_EP_Receive>
 8009db0:	4603      	mov	r3, r0
 8009db2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 f83a 	bl	8009e30 <USBD_Get_USB_Status>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ddc:	78fa      	ldrb	r2, [r7, #3]
 8009dde:	4611      	mov	r1, r2
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7f9 f9d9 	bl	8003198 <HAL_PCD_EP_GetRxCount>
 8009de6:	4603      	mov	r3, r0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009df8:	4b02      	ldr	r3, [pc, #8]	@ (8009e04 <USBD_static_malloc+0x14>)
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bc80      	pop	{r7}
 8009e02:	4770      	bx	lr
 8009e04:	200016bc 	.word	0x200016bc

08009e08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]

}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bc80      	pop	{r7}
 8009e18:	4770      	bx	lr

08009e1a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	460b      	mov	r3, r1
 8009e24:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e26:	bf00      	nop
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bc80      	pop	{r7}
 8009e2e:	4770      	bx	lr

08009e30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	4603      	mov	r3, r0
 8009e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e3e:	79fb      	ldrb	r3, [r7, #7]
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	d817      	bhi.n	8009e74 <USBD_Get_USB_Status+0x44>
 8009e44:	a201      	add	r2, pc, #4	@ (adr r2, 8009e4c <USBD_Get_USB_Status+0x1c>)
 8009e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4a:	bf00      	nop
 8009e4c:	08009e5d 	.word	0x08009e5d
 8009e50:	08009e63 	.word	0x08009e63
 8009e54:	08009e69 	.word	0x08009e69
 8009e58:	08009e6f 	.word	0x08009e6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e60:	e00b      	b.n	8009e7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e62:	2302      	movs	r3, #2
 8009e64:	73fb      	strb	r3, [r7, #15]
    break;
 8009e66:	e008      	b.n	8009e7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e6c:	e005      	b.n	8009e7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e6e:	2302      	movs	r3, #2
 8009e70:	73fb      	strb	r3, [r7, #15]
    break;
 8009e72:	e002      	b.n	8009e7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e74:	2302      	movs	r3, #2
 8009e76:	73fb      	strb	r3, [r7, #15]
    break;
 8009e78:	bf00      	nop
  }
  return usb_status;
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bc80      	pop	{r7}
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop

08009e88 <siprintf>:
 8009e88:	b40e      	push	{r1, r2, r3}
 8009e8a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e8e:	b500      	push	{lr}
 8009e90:	b09c      	sub	sp, #112	@ 0x70
 8009e92:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e94:	9002      	str	r0, [sp, #8]
 8009e96:	9006      	str	r0, [sp, #24]
 8009e98:	9107      	str	r1, [sp, #28]
 8009e9a:	9104      	str	r1, [sp, #16]
 8009e9c:	4808      	ldr	r0, [pc, #32]	@ (8009ec0 <siprintf+0x38>)
 8009e9e:	4909      	ldr	r1, [pc, #36]	@ (8009ec4 <siprintf+0x3c>)
 8009ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea4:	9105      	str	r1, [sp, #20]
 8009ea6:	6800      	ldr	r0, [r0, #0]
 8009ea8:	a902      	add	r1, sp, #8
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	f000 f9ac 	bl	800a208 <_svfiprintf_r>
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	9b02      	ldr	r3, [sp, #8]
 8009eb4:	701a      	strb	r2, [r3, #0]
 8009eb6:	b01c      	add	sp, #112	@ 0x70
 8009eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ebc:	b003      	add	sp, #12
 8009ebe:	4770      	bx	lr
 8009ec0:	2000019c 	.word	0x2000019c
 8009ec4:	ffff0208 	.word	0xffff0208

08009ec8 <memmove>:
 8009ec8:	4288      	cmp	r0, r1
 8009eca:	b510      	push	{r4, lr}
 8009ecc:	eb01 0402 	add.w	r4, r1, r2
 8009ed0:	d902      	bls.n	8009ed8 <memmove+0x10>
 8009ed2:	4284      	cmp	r4, r0
 8009ed4:	4623      	mov	r3, r4
 8009ed6:	d807      	bhi.n	8009ee8 <memmove+0x20>
 8009ed8:	1e43      	subs	r3, r0, #1
 8009eda:	42a1      	cmp	r1, r4
 8009edc:	d008      	beq.n	8009ef0 <memmove+0x28>
 8009ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ee6:	e7f8      	b.n	8009eda <memmove+0x12>
 8009ee8:	4601      	mov	r1, r0
 8009eea:	4402      	add	r2, r0
 8009eec:	428a      	cmp	r2, r1
 8009eee:	d100      	bne.n	8009ef2 <memmove+0x2a>
 8009ef0:	bd10      	pop	{r4, pc}
 8009ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009efa:	e7f7      	b.n	8009eec <memmove+0x24>

08009efc <memset>:
 8009efc:	4603      	mov	r3, r0
 8009efe:	4402      	add	r2, r0
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d100      	bne.n	8009f06 <memset+0xa>
 8009f04:	4770      	bx	lr
 8009f06:	f803 1b01 	strb.w	r1, [r3], #1
 8009f0a:	e7f9      	b.n	8009f00 <memset+0x4>

08009f0c <__errno>:
 8009f0c:	4b01      	ldr	r3, [pc, #4]	@ (8009f14 <__errno+0x8>)
 8009f0e:	6818      	ldr	r0, [r3, #0]
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	2000019c 	.word	0x2000019c

08009f18 <__libc_init_array>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	2600      	movs	r6, #0
 8009f1c:	4d0c      	ldr	r5, [pc, #48]	@ (8009f50 <__libc_init_array+0x38>)
 8009f1e:	4c0d      	ldr	r4, [pc, #52]	@ (8009f54 <__libc_init_array+0x3c>)
 8009f20:	1b64      	subs	r4, r4, r5
 8009f22:	10a4      	asrs	r4, r4, #2
 8009f24:	42a6      	cmp	r6, r4
 8009f26:	d109      	bne.n	8009f3c <__libc_init_array+0x24>
 8009f28:	f000 fc5e 	bl	800a7e8 <_init>
 8009f2c:	2600      	movs	r6, #0
 8009f2e:	4d0a      	ldr	r5, [pc, #40]	@ (8009f58 <__libc_init_array+0x40>)
 8009f30:	4c0a      	ldr	r4, [pc, #40]	@ (8009f5c <__libc_init_array+0x44>)
 8009f32:	1b64      	subs	r4, r4, r5
 8009f34:	10a4      	asrs	r4, r4, #2
 8009f36:	42a6      	cmp	r6, r4
 8009f38:	d105      	bne.n	8009f46 <__libc_init_array+0x2e>
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
 8009f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f40:	4798      	blx	r3
 8009f42:	3601      	adds	r6, #1
 8009f44:	e7ee      	b.n	8009f24 <__libc_init_array+0xc>
 8009f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f4a:	4798      	blx	r3
 8009f4c:	3601      	adds	r6, #1
 8009f4e:	e7f2      	b.n	8009f36 <__libc_init_array+0x1e>
 8009f50:	0800d74c 	.word	0x0800d74c
 8009f54:	0800d74c 	.word	0x0800d74c
 8009f58:	0800d74c 	.word	0x0800d74c
 8009f5c:	0800d750 	.word	0x0800d750

08009f60 <__retarget_lock_acquire_recursive>:
 8009f60:	4770      	bx	lr

08009f62 <__retarget_lock_release_recursive>:
 8009f62:	4770      	bx	lr

08009f64 <_free_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4605      	mov	r5, r0
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	d040      	beq.n	8009fee <_free_r+0x8a>
 8009f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f70:	1f0c      	subs	r4, r1, #4
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bfb8      	it	lt
 8009f76:	18e4      	addlt	r4, r4, r3
 8009f78:	f000 f8de 	bl	800a138 <__malloc_lock>
 8009f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ff0 <_free_r+0x8c>)
 8009f7e:	6813      	ldr	r3, [r2, #0]
 8009f80:	b933      	cbnz	r3, 8009f90 <_free_r+0x2c>
 8009f82:	6063      	str	r3, [r4, #4]
 8009f84:	6014      	str	r4, [r2, #0]
 8009f86:	4628      	mov	r0, r5
 8009f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f8c:	f000 b8da 	b.w	800a144 <__malloc_unlock>
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	d908      	bls.n	8009fa6 <_free_r+0x42>
 8009f94:	6820      	ldr	r0, [r4, #0]
 8009f96:	1821      	adds	r1, r4, r0
 8009f98:	428b      	cmp	r3, r1
 8009f9a:	bf01      	itttt	eq
 8009f9c:	6819      	ldreq	r1, [r3, #0]
 8009f9e:	685b      	ldreq	r3, [r3, #4]
 8009fa0:	1809      	addeq	r1, r1, r0
 8009fa2:	6021      	streq	r1, [r4, #0]
 8009fa4:	e7ed      	b.n	8009f82 <_free_r+0x1e>
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	b10b      	cbz	r3, 8009fb0 <_free_r+0x4c>
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	d9fa      	bls.n	8009fa6 <_free_r+0x42>
 8009fb0:	6811      	ldr	r1, [r2, #0]
 8009fb2:	1850      	adds	r0, r2, r1
 8009fb4:	42a0      	cmp	r0, r4
 8009fb6:	d10b      	bne.n	8009fd0 <_free_r+0x6c>
 8009fb8:	6820      	ldr	r0, [r4, #0]
 8009fba:	4401      	add	r1, r0
 8009fbc:	1850      	adds	r0, r2, r1
 8009fbe:	4283      	cmp	r3, r0
 8009fc0:	6011      	str	r1, [r2, #0]
 8009fc2:	d1e0      	bne.n	8009f86 <_free_r+0x22>
 8009fc4:	6818      	ldr	r0, [r3, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	4408      	add	r0, r1
 8009fca:	6010      	str	r0, [r2, #0]
 8009fcc:	6053      	str	r3, [r2, #4]
 8009fce:	e7da      	b.n	8009f86 <_free_r+0x22>
 8009fd0:	d902      	bls.n	8009fd8 <_free_r+0x74>
 8009fd2:	230c      	movs	r3, #12
 8009fd4:	602b      	str	r3, [r5, #0]
 8009fd6:	e7d6      	b.n	8009f86 <_free_r+0x22>
 8009fd8:	6820      	ldr	r0, [r4, #0]
 8009fda:	1821      	adds	r1, r4, r0
 8009fdc:	428b      	cmp	r3, r1
 8009fde:	bf01      	itttt	eq
 8009fe0:	6819      	ldreq	r1, [r3, #0]
 8009fe2:	685b      	ldreq	r3, [r3, #4]
 8009fe4:	1809      	addeq	r1, r1, r0
 8009fe6:	6021      	streq	r1, [r4, #0]
 8009fe8:	6063      	str	r3, [r4, #4]
 8009fea:	6054      	str	r4, [r2, #4]
 8009fec:	e7cb      	b.n	8009f86 <_free_r+0x22>
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	20001a20 	.word	0x20001a20

08009ff4 <sbrk_aligned>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	4e0f      	ldr	r6, [pc, #60]	@ (800a034 <sbrk_aligned+0x40>)
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	6831      	ldr	r1, [r6, #0]
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	b911      	cbnz	r1, 800a006 <sbrk_aligned+0x12>
 800a000:	f000 fb90 	bl	800a724 <_sbrk_r>
 800a004:	6030      	str	r0, [r6, #0]
 800a006:	4621      	mov	r1, r4
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 fb8b 	bl	800a724 <_sbrk_r>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	d103      	bne.n	800a01a <sbrk_aligned+0x26>
 800a012:	f04f 34ff 	mov.w	r4, #4294967295
 800a016:	4620      	mov	r0, r4
 800a018:	bd70      	pop	{r4, r5, r6, pc}
 800a01a:	1cc4      	adds	r4, r0, #3
 800a01c:	f024 0403 	bic.w	r4, r4, #3
 800a020:	42a0      	cmp	r0, r4
 800a022:	d0f8      	beq.n	800a016 <sbrk_aligned+0x22>
 800a024:	1a21      	subs	r1, r4, r0
 800a026:	4628      	mov	r0, r5
 800a028:	f000 fb7c 	bl	800a724 <_sbrk_r>
 800a02c:	3001      	adds	r0, #1
 800a02e:	d1f2      	bne.n	800a016 <sbrk_aligned+0x22>
 800a030:	e7ef      	b.n	800a012 <sbrk_aligned+0x1e>
 800a032:	bf00      	nop
 800a034:	20001a1c 	.word	0x20001a1c

0800a038 <_malloc_r>:
 800a038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a03c:	1ccd      	adds	r5, r1, #3
 800a03e:	f025 0503 	bic.w	r5, r5, #3
 800a042:	3508      	adds	r5, #8
 800a044:	2d0c      	cmp	r5, #12
 800a046:	bf38      	it	cc
 800a048:	250c      	movcc	r5, #12
 800a04a:	2d00      	cmp	r5, #0
 800a04c:	4606      	mov	r6, r0
 800a04e:	db01      	blt.n	800a054 <_malloc_r+0x1c>
 800a050:	42a9      	cmp	r1, r5
 800a052:	d904      	bls.n	800a05e <_malloc_r+0x26>
 800a054:	230c      	movs	r3, #12
 800a056:	6033      	str	r3, [r6, #0]
 800a058:	2000      	movs	r0, #0
 800a05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a05e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a134 <_malloc_r+0xfc>
 800a062:	f000 f869 	bl	800a138 <__malloc_lock>
 800a066:	f8d8 3000 	ldr.w	r3, [r8]
 800a06a:	461c      	mov	r4, r3
 800a06c:	bb44      	cbnz	r4, 800a0c0 <_malloc_r+0x88>
 800a06e:	4629      	mov	r1, r5
 800a070:	4630      	mov	r0, r6
 800a072:	f7ff ffbf 	bl	8009ff4 <sbrk_aligned>
 800a076:	1c43      	adds	r3, r0, #1
 800a078:	4604      	mov	r4, r0
 800a07a:	d158      	bne.n	800a12e <_malloc_r+0xf6>
 800a07c:	f8d8 4000 	ldr.w	r4, [r8]
 800a080:	4627      	mov	r7, r4
 800a082:	2f00      	cmp	r7, #0
 800a084:	d143      	bne.n	800a10e <_malloc_r+0xd6>
 800a086:	2c00      	cmp	r4, #0
 800a088:	d04b      	beq.n	800a122 <_malloc_r+0xea>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	4639      	mov	r1, r7
 800a08e:	4630      	mov	r0, r6
 800a090:	eb04 0903 	add.w	r9, r4, r3
 800a094:	f000 fb46 	bl	800a724 <_sbrk_r>
 800a098:	4581      	cmp	r9, r0
 800a09a:	d142      	bne.n	800a122 <_malloc_r+0xea>
 800a09c:	6821      	ldr	r1, [r4, #0]
 800a09e:	4630      	mov	r0, r6
 800a0a0:	1a6d      	subs	r5, r5, r1
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	f7ff ffa6 	bl	8009ff4 <sbrk_aligned>
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d03a      	beq.n	800a122 <_malloc_r+0xea>
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	442b      	add	r3, r5
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	bb62      	cbnz	r2, 800a114 <_malloc_r+0xdc>
 800a0ba:	f8c8 7000 	str.w	r7, [r8]
 800a0be:	e00f      	b.n	800a0e0 <_malloc_r+0xa8>
 800a0c0:	6822      	ldr	r2, [r4, #0]
 800a0c2:	1b52      	subs	r2, r2, r5
 800a0c4:	d420      	bmi.n	800a108 <_malloc_r+0xd0>
 800a0c6:	2a0b      	cmp	r2, #11
 800a0c8:	d917      	bls.n	800a0fa <_malloc_r+0xc2>
 800a0ca:	1961      	adds	r1, r4, r5
 800a0cc:	42a3      	cmp	r3, r4
 800a0ce:	6025      	str	r5, [r4, #0]
 800a0d0:	bf18      	it	ne
 800a0d2:	6059      	strne	r1, [r3, #4]
 800a0d4:	6863      	ldr	r3, [r4, #4]
 800a0d6:	bf08      	it	eq
 800a0d8:	f8c8 1000 	streq.w	r1, [r8]
 800a0dc:	5162      	str	r2, [r4, r5]
 800a0de:	604b      	str	r3, [r1, #4]
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f000 f82f 	bl	800a144 <__malloc_unlock>
 800a0e6:	f104 000b 	add.w	r0, r4, #11
 800a0ea:	1d23      	adds	r3, r4, #4
 800a0ec:	f020 0007 	bic.w	r0, r0, #7
 800a0f0:	1ac2      	subs	r2, r0, r3
 800a0f2:	bf1c      	itt	ne
 800a0f4:	1a1b      	subne	r3, r3, r0
 800a0f6:	50a3      	strne	r3, [r4, r2]
 800a0f8:	e7af      	b.n	800a05a <_malloc_r+0x22>
 800a0fa:	6862      	ldr	r2, [r4, #4]
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	bf0c      	ite	eq
 800a100:	f8c8 2000 	streq.w	r2, [r8]
 800a104:	605a      	strne	r2, [r3, #4]
 800a106:	e7eb      	b.n	800a0e0 <_malloc_r+0xa8>
 800a108:	4623      	mov	r3, r4
 800a10a:	6864      	ldr	r4, [r4, #4]
 800a10c:	e7ae      	b.n	800a06c <_malloc_r+0x34>
 800a10e:	463c      	mov	r4, r7
 800a110:	687f      	ldr	r7, [r7, #4]
 800a112:	e7b6      	b.n	800a082 <_malloc_r+0x4a>
 800a114:	461a      	mov	r2, r3
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	42a3      	cmp	r3, r4
 800a11a:	d1fb      	bne.n	800a114 <_malloc_r+0xdc>
 800a11c:	2300      	movs	r3, #0
 800a11e:	6053      	str	r3, [r2, #4]
 800a120:	e7de      	b.n	800a0e0 <_malloc_r+0xa8>
 800a122:	230c      	movs	r3, #12
 800a124:	4630      	mov	r0, r6
 800a126:	6033      	str	r3, [r6, #0]
 800a128:	f000 f80c 	bl	800a144 <__malloc_unlock>
 800a12c:	e794      	b.n	800a058 <_malloc_r+0x20>
 800a12e:	6005      	str	r5, [r0, #0]
 800a130:	e7d6      	b.n	800a0e0 <_malloc_r+0xa8>
 800a132:	bf00      	nop
 800a134:	20001a20 	.word	0x20001a20

0800a138 <__malloc_lock>:
 800a138:	4801      	ldr	r0, [pc, #4]	@ (800a140 <__malloc_lock+0x8>)
 800a13a:	f7ff bf11 	b.w	8009f60 <__retarget_lock_acquire_recursive>
 800a13e:	bf00      	nop
 800a140:	20001a18 	.word	0x20001a18

0800a144 <__malloc_unlock>:
 800a144:	4801      	ldr	r0, [pc, #4]	@ (800a14c <__malloc_unlock+0x8>)
 800a146:	f7ff bf0c 	b.w	8009f62 <__retarget_lock_release_recursive>
 800a14a:	bf00      	nop
 800a14c:	20001a18 	.word	0x20001a18

0800a150 <__ssputs_r>:
 800a150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a154:	461f      	mov	r7, r3
 800a156:	688e      	ldr	r6, [r1, #8]
 800a158:	4682      	mov	sl, r0
 800a15a:	42be      	cmp	r6, r7
 800a15c:	460c      	mov	r4, r1
 800a15e:	4690      	mov	r8, r2
 800a160:	680b      	ldr	r3, [r1, #0]
 800a162:	d82d      	bhi.n	800a1c0 <__ssputs_r+0x70>
 800a164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a168:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a16c:	d026      	beq.n	800a1bc <__ssputs_r+0x6c>
 800a16e:	6965      	ldr	r5, [r4, #20]
 800a170:	6909      	ldr	r1, [r1, #16]
 800a172:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a176:	eba3 0901 	sub.w	r9, r3, r1
 800a17a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a17e:	1c7b      	adds	r3, r7, #1
 800a180:	444b      	add	r3, r9
 800a182:	106d      	asrs	r5, r5, #1
 800a184:	429d      	cmp	r5, r3
 800a186:	bf38      	it	cc
 800a188:	461d      	movcc	r5, r3
 800a18a:	0553      	lsls	r3, r2, #21
 800a18c:	d527      	bpl.n	800a1de <__ssputs_r+0x8e>
 800a18e:	4629      	mov	r1, r5
 800a190:	f7ff ff52 	bl	800a038 <_malloc_r>
 800a194:	4606      	mov	r6, r0
 800a196:	b360      	cbz	r0, 800a1f2 <__ssputs_r+0xa2>
 800a198:	464a      	mov	r2, r9
 800a19a:	6921      	ldr	r1, [r4, #16]
 800a19c:	f000 fae0 	bl	800a760 <memcpy>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	6126      	str	r6, [r4, #16]
 800a1ae:	444e      	add	r6, r9
 800a1b0:	6026      	str	r6, [r4, #0]
 800a1b2:	463e      	mov	r6, r7
 800a1b4:	6165      	str	r5, [r4, #20]
 800a1b6:	eba5 0509 	sub.w	r5, r5, r9
 800a1ba:	60a5      	str	r5, [r4, #8]
 800a1bc:	42be      	cmp	r6, r7
 800a1be:	d900      	bls.n	800a1c2 <__ssputs_r+0x72>
 800a1c0:	463e      	mov	r6, r7
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	4641      	mov	r1, r8
 800a1c6:	6820      	ldr	r0, [r4, #0]
 800a1c8:	f7ff fe7e 	bl	8009ec8 <memmove>
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	68a3      	ldr	r3, [r4, #8]
 800a1d0:	1b9b      	subs	r3, r3, r6
 800a1d2:	60a3      	str	r3, [r4, #8]
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	4433      	add	r3, r6
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1de:	462a      	mov	r2, r5
 800a1e0:	f000 facc 	bl	800a77c <_realloc_r>
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d1e0      	bne.n	800a1ac <__ssputs_r+0x5c>
 800a1ea:	4650      	mov	r0, sl
 800a1ec:	6921      	ldr	r1, [r4, #16]
 800a1ee:	f7ff feb9 	bl	8009f64 <_free_r>
 800a1f2:	230c      	movs	r3, #12
 800a1f4:	f8ca 3000 	str.w	r3, [sl]
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a202:	81a3      	strh	r3, [r4, #12]
 800a204:	e7e9      	b.n	800a1da <__ssputs_r+0x8a>
	...

0800a208 <_svfiprintf_r>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	4698      	mov	r8, r3
 800a20e:	898b      	ldrh	r3, [r1, #12]
 800a210:	4607      	mov	r7, r0
 800a212:	061b      	lsls	r3, r3, #24
 800a214:	460d      	mov	r5, r1
 800a216:	4614      	mov	r4, r2
 800a218:	b09d      	sub	sp, #116	@ 0x74
 800a21a:	d510      	bpl.n	800a23e <_svfiprintf_r+0x36>
 800a21c:	690b      	ldr	r3, [r1, #16]
 800a21e:	b973      	cbnz	r3, 800a23e <_svfiprintf_r+0x36>
 800a220:	2140      	movs	r1, #64	@ 0x40
 800a222:	f7ff ff09 	bl	800a038 <_malloc_r>
 800a226:	6028      	str	r0, [r5, #0]
 800a228:	6128      	str	r0, [r5, #16]
 800a22a:	b930      	cbnz	r0, 800a23a <_svfiprintf_r+0x32>
 800a22c:	230c      	movs	r3, #12
 800a22e:	603b      	str	r3, [r7, #0]
 800a230:	f04f 30ff 	mov.w	r0, #4294967295
 800a234:	b01d      	add	sp, #116	@ 0x74
 800a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23a:	2340      	movs	r3, #64	@ 0x40
 800a23c:	616b      	str	r3, [r5, #20]
 800a23e:	2300      	movs	r3, #0
 800a240:	9309      	str	r3, [sp, #36]	@ 0x24
 800a242:	2320      	movs	r3, #32
 800a244:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a248:	2330      	movs	r3, #48	@ 0x30
 800a24a:	f04f 0901 	mov.w	r9, #1
 800a24e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a252:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a3ec <_svfiprintf_r+0x1e4>
 800a256:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a25a:	4623      	mov	r3, r4
 800a25c:	469a      	mov	sl, r3
 800a25e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a262:	b10a      	cbz	r2, 800a268 <_svfiprintf_r+0x60>
 800a264:	2a25      	cmp	r2, #37	@ 0x25
 800a266:	d1f9      	bne.n	800a25c <_svfiprintf_r+0x54>
 800a268:	ebba 0b04 	subs.w	fp, sl, r4
 800a26c:	d00b      	beq.n	800a286 <_svfiprintf_r+0x7e>
 800a26e:	465b      	mov	r3, fp
 800a270:	4622      	mov	r2, r4
 800a272:	4629      	mov	r1, r5
 800a274:	4638      	mov	r0, r7
 800a276:	f7ff ff6b 	bl	800a150 <__ssputs_r>
 800a27a:	3001      	adds	r0, #1
 800a27c:	f000 80a7 	beq.w	800a3ce <_svfiprintf_r+0x1c6>
 800a280:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a282:	445a      	add	r2, fp
 800a284:	9209      	str	r2, [sp, #36]	@ 0x24
 800a286:	f89a 3000 	ldrb.w	r3, [sl]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 809f 	beq.w	800a3ce <_svfiprintf_r+0x1c6>
 800a290:	2300      	movs	r3, #0
 800a292:	f04f 32ff 	mov.w	r2, #4294967295
 800a296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a29a:	f10a 0a01 	add.w	sl, sl, #1
 800a29e:	9304      	str	r3, [sp, #16]
 800a2a0:	9307      	str	r3, [sp, #28]
 800a2a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2a8:	4654      	mov	r4, sl
 800a2aa:	2205      	movs	r2, #5
 800a2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b0:	484e      	ldr	r0, [pc, #312]	@ (800a3ec <_svfiprintf_r+0x1e4>)
 800a2b2:	f000 fa47 	bl	800a744 <memchr>
 800a2b6:	9a04      	ldr	r2, [sp, #16]
 800a2b8:	b9d8      	cbnz	r0, 800a2f2 <_svfiprintf_r+0xea>
 800a2ba:	06d0      	lsls	r0, r2, #27
 800a2bc:	bf44      	itt	mi
 800a2be:	2320      	movmi	r3, #32
 800a2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2c4:	0711      	lsls	r1, r2, #28
 800a2c6:	bf44      	itt	mi
 800a2c8:	232b      	movmi	r3, #43	@ 0x2b
 800a2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a2d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2d4:	d015      	beq.n	800a302 <_svfiprintf_r+0xfa>
 800a2d6:	4654      	mov	r4, sl
 800a2d8:	2000      	movs	r0, #0
 800a2da:	f04f 0c0a 	mov.w	ip, #10
 800a2de:	9a07      	ldr	r2, [sp, #28]
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2e6:	3b30      	subs	r3, #48	@ 0x30
 800a2e8:	2b09      	cmp	r3, #9
 800a2ea:	d94b      	bls.n	800a384 <_svfiprintf_r+0x17c>
 800a2ec:	b1b0      	cbz	r0, 800a31c <_svfiprintf_r+0x114>
 800a2ee:	9207      	str	r2, [sp, #28]
 800a2f0:	e014      	b.n	800a31c <_svfiprintf_r+0x114>
 800a2f2:	eba0 0308 	sub.w	r3, r0, r8
 800a2f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	46a2      	mov	sl, r4
 800a2fe:	9304      	str	r3, [sp, #16]
 800a300:	e7d2      	b.n	800a2a8 <_svfiprintf_r+0xa0>
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	1d19      	adds	r1, r3, #4
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	9103      	str	r1, [sp, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	bfbb      	ittet	lt
 800a30e:	425b      	neglt	r3, r3
 800a310:	f042 0202 	orrlt.w	r2, r2, #2
 800a314:	9307      	strge	r3, [sp, #28]
 800a316:	9307      	strlt	r3, [sp, #28]
 800a318:	bfb8      	it	lt
 800a31a:	9204      	strlt	r2, [sp, #16]
 800a31c:	7823      	ldrb	r3, [r4, #0]
 800a31e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a320:	d10a      	bne.n	800a338 <_svfiprintf_r+0x130>
 800a322:	7863      	ldrb	r3, [r4, #1]
 800a324:	2b2a      	cmp	r3, #42	@ 0x2a
 800a326:	d132      	bne.n	800a38e <_svfiprintf_r+0x186>
 800a328:	9b03      	ldr	r3, [sp, #12]
 800a32a:	3402      	adds	r4, #2
 800a32c:	1d1a      	adds	r2, r3, #4
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	9203      	str	r2, [sp, #12]
 800a332:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a336:	9305      	str	r3, [sp, #20]
 800a338:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a3f0 <_svfiprintf_r+0x1e8>
 800a33c:	2203      	movs	r2, #3
 800a33e:	4650      	mov	r0, sl
 800a340:	7821      	ldrb	r1, [r4, #0]
 800a342:	f000 f9ff 	bl	800a744 <memchr>
 800a346:	b138      	cbz	r0, 800a358 <_svfiprintf_r+0x150>
 800a348:	2240      	movs	r2, #64	@ 0x40
 800a34a:	9b04      	ldr	r3, [sp, #16]
 800a34c:	eba0 000a 	sub.w	r0, r0, sl
 800a350:	4082      	lsls	r2, r0
 800a352:	4313      	orrs	r3, r2
 800a354:	3401      	adds	r4, #1
 800a356:	9304      	str	r3, [sp, #16]
 800a358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a35c:	2206      	movs	r2, #6
 800a35e:	4825      	ldr	r0, [pc, #148]	@ (800a3f4 <_svfiprintf_r+0x1ec>)
 800a360:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a364:	f000 f9ee 	bl	800a744 <memchr>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d036      	beq.n	800a3da <_svfiprintf_r+0x1d2>
 800a36c:	4b22      	ldr	r3, [pc, #136]	@ (800a3f8 <_svfiprintf_r+0x1f0>)
 800a36e:	bb1b      	cbnz	r3, 800a3b8 <_svfiprintf_r+0x1b0>
 800a370:	9b03      	ldr	r3, [sp, #12]
 800a372:	3307      	adds	r3, #7
 800a374:	f023 0307 	bic.w	r3, r3, #7
 800a378:	3308      	adds	r3, #8
 800a37a:	9303      	str	r3, [sp, #12]
 800a37c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a37e:	4433      	add	r3, r6
 800a380:	9309      	str	r3, [sp, #36]	@ 0x24
 800a382:	e76a      	b.n	800a25a <_svfiprintf_r+0x52>
 800a384:	460c      	mov	r4, r1
 800a386:	2001      	movs	r0, #1
 800a388:	fb0c 3202 	mla	r2, ip, r2, r3
 800a38c:	e7a8      	b.n	800a2e0 <_svfiprintf_r+0xd8>
 800a38e:	2300      	movs	r3, #0
 800a390:	f04f 0c0a 	mov.w	ip, #10
 800a394:	4619      	mov	r1, r3
 800a396:	3401      	adds	r4, #1
 800a398:	9305      	str	r3, [sp, #20]
 800a39a:	4620      	mov	r0, r4
 800a39c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3a0:	3a30      	subs	r2, #48	@ 0x30
 800a3a2:	2a09      	cmp	r2, #9
 800a3a4:	d903      	bls.n	800a3ae <_svfiprintf_r+0x1a6>
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0c6      	beq.n	800a338 <_svfiprintf_r+0x130>
 800a3aa:	9105      	str	r1, [sp, #20]
 800a3ac:	e7c4      	b.n	800a338 <_svfiprintf_r+0x130>
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3b6:	e7f0      	b.n	800a39a <_svfiprintf_r+0x192>
 800a3b8:	ab03      	add	r3, sp, #12
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	462a      	mov	r2, r5
 800a3be:	4638      	mov	r0, r7
 800a3c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a3fc <_svfiprintf_r+0x1f4>)
 800a3c2:	a904      	add	r1, sp, #16
 800a3c4:	f3af 8000 	nop.w
 800a3c8:	1c42      	adds	r2, r0, #1
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	d1d6      	bne.n	800a37c <_svfiprintf_r+0x174>
 800a3ce:	89ab      	ldrh	r3, [r5, #12]
 800a3d0:	065b      	lsls	r3, r3, #25
 800a3d2:	f53f af2d 	bmi.w	800a230 <_svfiprintf_r+0x28>
 800a3d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3d8:	e72c      	b.n	800a234 <_svfiprintf_r+0x2c>
 800a3da:	ab03      	add	r3, sp, #12
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	462a      	mov	r2, r5
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	4b06      	ldr	r3, [pc, #24]	@ (800a3fc <_svfiprintf_r+0x1f4>)
 800a3e4:	a904      	add	r1, sp, #16
 800a3e6:	f000 f87d 	bl	800a4e4 <_printf_i>
 800a3ea:	e7ed      	b.n	800a3c8 <_svfiprintf_r+0x1c0>
 800a3ec:	0800d70e 	.word	0x0800d70e
 800a3f0:	0800d714 	.word	0x0800d714
 800a3f4:	0800d718 	.word	0x0800d718
 800a3f8:	00000000 	.word	0x00000000
 800a3fc:	0800a151 	.word	0x0800a151

0800a400 <_printf_common>:
 800a400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a404:	4616      	mov	r6, r2
 800a406:	4698      	mov	r8, r3
 800a408:	688a      	ldr	r2, [r1, #8]
 800a40a:	690b      	ldr	r3, [r1, #16]
 800a40c:	4607      	mov	r7, r0
 800a40e:	4293      	cmp	r3, r2
 800a410:	bfb8      	it	lt
 800a412:	4613      	movlt	r3, r2
 800a414:	6033      	str	r3, [r6, #0]
 800a416:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a41a:	460c      	mov	r4, r1
 800a41c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a420:	b10a      	cbz	r2, 800a426 <_printf_common+0x26>
 800a422:	3301      	adds	r3, #1
 800a424:	6033      	str	r3, [r6, #0]
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	0699      	lsls	r1, r3, #26
 800a42a:	bf42      	ittt	mi
 800a42c:	6833      	ldrmi	r3, [r6, #0]
 800a42e:	3302      	addmi	r3, #2
 800a430:	6033      	strmi	r3, [r6, #0]
 800a432:	6825      	ldr	r5, [r4, #0]
 800a434:	f015 0506 	ands.w	r5, r5, #6
 800a438:	d106      	bne.n	800a448 <_printf_common+0x48>
 800a43a:	f104 0a19 	add.w	sl, r4, #25
 800a43e:	68e3      	ldr	r3, [r4, #12]
 800a440:	6832      	ldr	r2, [r6, #0]
 800a442:	1a9b      	subs	r3, r3, r2
 800a444:	42ab      	cmp	r3, r5
 800a446:	dc2b      	bgt.n	800a4a0 <_printf_common+0xa0>
 800a448:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a44c:	6822      	ldr	r2, [r4, #0]
 800a44e:	3b00      	subs	r3, #0
 800a450:	bf18      	it	ne
 800a452:	2301      	movne	r3, #1
 800a454:	0692      	lsls	r2, r2, #26
 800a456:	d430      	bmi.n	800a4ba <_printf_common+0xba>
 800a458:	4641      	mov	r1, r8
 800a45a:	4638      	mov	r0, r7
 800a45c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a460:	47c8      	blx	r9
 800a462:	3001      	adds	r0, #1
 800a464:	d023      	beq.n	800a4ae <_printf_common+0xae>
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	6922      	ldr	r2, [r4, #16]
 800a46a:	f003 0306 	and.w	r3, r3, #6
 800a46e:	2b04      	cmp	r3, #4
 800a470:	bf14      	ite	ne
 800a472:	2500      	movne	r5, #0
 800a474:	6833      	ldreq	r3, [r6, #0]
 800a476:	f04f 0600 	mov.w	r6, #0
 800a47a:	bf08      	it	eq
 800a47c:	68e5      	ldreq	r5, [r4, #12]
 800a47e:	f104 041a 	add.w	r4, r4, #26
 800a482:	bf08      	it	eq
 800a484:	1aed      	subeq	r5, r5, r3
 800a486:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a48a:	bf08      	it	eq
 800a48c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a490:	4293      	cmp	r3, r2
 800a492:	bfc4      	itt	gt
 800a494:	1a9b      	subgt	r3, r3, r2
 800a496:	18ed      	addgt	r5, r5, r3
 800a498:	42b5      	cmp	r5, r6
 800a49a:	d11a      	bne.n	800a4d2 <_printf_common+0xd2>
 800a49c:	2000      	movs	r0, #0
 800a49e:	e008      	b.n	800a4b2 <_printf_common+0xb2>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	4652      	mov	r2, sl
 800a4a4:	4641      	mov	r1, r8
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	47c8      	blx	r9
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	d103      	bne.n	800a4b6 <_printf_common+0xb6>
 800a4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b6:	3501      	adds	r5, #1
 800a4b8:	e7c1      	b.n	800a43e <_printf_common+0x3e>
 800a4ba:	2030      	movs	r0, #48	@ 0x30
 800a4bc:	18e1      	adds	r1, r4, r3
 800a4be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4c8:	4422      	add	r2, r4
 800a4ca:	3302      	adds	r3, #2
 800a4cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4d0:	e7c2      	b.n	800a458 <_printf_common+0x58>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	4641      	mov	r1, r8
 800a4d8:	4638      	mov	r0, r7
 800a4da:	47c8      	blx	r9
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d0e6      	beq.n	800a4ae <_printf_common+0xae>
 800a4e0:	3601      	adds	r6, #1
 800a4e2:	e7d9      	b.n	800a498 <_printf_common+0x98>

0800a4e4 <_printf_i>:
 800a4e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e8:	7e0f      	ldrb	r7, [r1, #24]
 800a4ea:	4691      	mov	r9, r2
 800a4ec:	2f78      	cmp	r7, #120	@ 0x78
 800a4ee:	4680      	mov	r8, r0
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	469a      	mov	sl, r3
 800a4f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4fa:	d807      	bhi.n	800a50c <_printf_i+0x28>
 800a4fc:	2f62      	cmp	r7, #98	@ 0x62
 800a4fe:	d80a      	bhi.n	800a516 <_printf_i+0x32>
 800a500:	2f00      	cmp	r7, #0
 800a502:	f000 80d3 	beq.w	800a6ac <_printf_i+0x1c8>
 800a506:	2f58      	cmp	r7, #88	@ 0x58
 800a508:	f000 80ba 	beq.w	800a680 <_printf_i+0x19c>
 800a50c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a510:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a514:	e03a      	b.n	800a58c <_printf_i+0xa8>
 800a516:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a51a:	2b15      	cmp	r3, #21
 800a51c:	d8f6      	bhi.n	800a50c <_printf_i+0x28>
 800a51e:	a101      	add	r1, pc, #4	@ (adr r1, 800a524 <_printf_i+0x40>)
 800a520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a524:	0800a57d 	.word	0x0800a57d
 800a528:	0800a591 	.word	0x0800a591
 800a52c:	0800a50d 	.word	0x0800a50d
 800a530:	0800a50d 	.word	0x0800a50d
 800a534:	0800a50d 	.word	0x0800a50d
 800a538:	0800a50d 	.word	0x0800a50d
 800a53c:	0800a591 	.word	0x0800a591
 800a540:	0800a50d 	.word	0x0800a50d
 800a544:	0800a50d 	.word	0x0800a50d
 800a548:	0800a50d 	.word	0x0800a50d
 800a54c:	0800a50d 	.word	0x0800a50d
 800a550:	0800a693 	.word	0x0800a693
 800a554:	0800a5bb 	.word	0x0800a5bb
 800a558:	0800a64d 	.word	0x0800a64d
 800a55c:	0800a50d 	.word	0x0800a50d
 800a560:	0800a50d 	.word	0x0800a50d
 800a564:	0800a6b5 	.word	0x0800a6b5
 800a568:	0800a50d 	.word	0x0800a50d
 800a56c:	0800a5bb 	.word	0x0800a5bb
 800a570:	0800a50d 	.word	0x0800a50d
 800a574:	0800a50d 	.word	0x0800a50d
 800a578:	0800a655 	.word	0x0800a655
 800a57c:	6833      	ldr	r3, [r6, #0]
 800a57e:	1d1a      	adds	r2, r3, #4
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6032      	str	r2, [r6, #0]
 800a584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a588:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a58c:	2301      	movs	r3, #1
 800a58e:	e09e      	b.n	800a6ce <_printf_i+0x1ea>
 800a590:	6833      	ldr	r3, [r6, #0]
 800a592:	6820      	ldr	r0, [r4, #0]
 800a594:	1d19      	adds	r1, r3, #4
 800a596:	6031      	str	r1, [r6, #0]
 800a598:	0606      	lsls	r6, r0, #24
 800a59a:	d501      	bpl.n	800a5a0 <_printf_i+0xbc>
 800a59c:	681d      	ldr	r5, [r3, #0]
 800a59e:	e003      	b.n	800a5a8 <_printf_i+0xc4>
 800a5a0:	0645      	lsls	r5, r0, #25
 800a5a2:	d5fb      	bpl.n	800a59c <_printf_i+0xb8>
 800a5a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	da03      	bge.n	800a5b4 <_printf_i+0xd0>
 800a5ac:	232d      	movs	r3, #45	@ 0x2d
 800a5ae:	426d      	negs	r5, r5
 800a5b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5b4:	230a      	movs	r3, #10
 800a5b6:	4859      	ldr	r0, [pc, #356]	@ (800a71c <_printf_i+0x238>)
 800a5b8:	e011      	b.n	800a5de <_printf_i+0xfa>
 800a5ba:	6821      	ldr	r1, [r4, #0]
 800a5bc:	6833      	ldr	r3, [r6, #0]
 800a5be:	0608      	lsls	r0, r1, #24
 800a5c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5c4:	d402      	bmi.n	800a5cc <_printf_i+0xe8>
 800a5c6:	0649      	lsls	r1, r1, #25
 800a5c8:	bf48      	it	mi
 800a5ca:	b2ad      	uxthmi	r5, r5
 800a5cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5ce:	6033      	str	r3, [r6, #0]
 800a5d0:	bf14      	ite	ne
 800a5d2:	230a      	movne	r3, #10
 800a5d4:	2308      	moveq	r3, #8
 800a5d6:	4851      	ldr	r0, [pc, #324]	@ (800a71c <_printf_i+0x238>)
 800a5d8:	2100      	movs	r1, #0
 800a5da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5de:	6866      	ldr	r6, [r4, #4]
 800a5e0:	2e00      	cmp	r6, #0
 800a5e2:	bfa8      	it	ge
 800a5e4:	6821      	ldrge	r1, [r4, #0]
 800a5e6:	60a6      	str	r6, [r4, #8]
 800a5e8:	bfa4      	itt	ge
 800a5ea:	f021 0104 	bicge.w	r1, r1, #4
 800a5ee:	6021      	strge	r1, [r4, #0]
 800a5f0:	b90d      	cbnz	r5, 800a5f6 <_printf_i+0x112>
 800a5f2:	2e00      	cmp	r6, #0
 800a5f4:	d04b      	beq.n	800a68e <_printf_i+0x1aa>
 800a5f6:	4616      	mov	r6, r2
 800a5f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5fc:	fb03 5711 	mls	r7, r3, r1, r5
 800a600:	5dc7      	ldrb	r7, [r0, r7]
 800a602:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a606:	462f      	mov	r7, r5
 800a608:	42bb      	cmp	r3, r7
 800a60a:	460d      	mov	r5, r1
 800a60c:	d9f4      	bls.n	800a5f8 <_printf_i+0x114>
 800a60e:	2b08      	cmp	r3, #8
 800a610:	d10b      	bne.n	800a62a <_printf_i+0x146>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	07df      	lsls	r7, r3, #31
 800a616:	d508      	bpl.n	800a62a <_printf_i+0x146>
 800a618:	6923      	ldr	r3, [r4, #16]
 800a61a:	6861      	ldr	r1, [r4, #4]
 800a61c:	4299      	cmp	r1, r3
 800a61e:	bfde      	ittt	le
 800a620:	2330      	movle	r3, #48	@ 0x30
 800a622:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a626:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a62a:	1b92      	subs	r2, r2, r6
 800a62c:	6122      	str	r2, [r4, #16]
 800a62e:	464b      	mov	r3, r9
 800a630:	4621      	mov	r1, r4
 800a632:	4640      	mov	r0, r8
 800a634:	f8cd a000 	str.w	sl, [sp]
 800a638:	aa03      	add	r2, sp, #12
 800a63a:	f7ff fee1 	bl	800a400 <_printf_common>
 800a63e:	3001      	adds	r0, #1
 800a640:	d14a      	bne.n	800a6d8 <_printf_i+0x1f4>
 800a642:	f04f 30ff 	mov.w	r0, #4294967295
 800a646:	b004      	add	sp, #16
 800a648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	f043 0320 	orr.w	r3, r3, #32
 800a652:	6023      	str	r3, [r4, #0]
 800a654:	2778      	movs	r7, #120	@ 0x78
 800a656:	4832      	ldr	r0, [pc, #200]	@ (800a720 <_printf_i+0x23c>)
 800a658:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	6831      	ldr	r1, [r6, #0]
 800a660:	061f      	lsls	r7, r3, #24
 800a662:	f851 5b04 	ldr.w	r5, [r1], #4
 800a666:	d402      	bmi.n	800a66e <_printf_i+0x18a>
 800a668:	065f      	lsls	r7, r3, #25
 800a66a:	bf48      	it	mi
 800a66c:	b2ad      	uxthmi	r5, r5
 800a66e:	6031      	str	r1, [r6, #0]
 800a670:	07d9      	lsls	r1, r3, #31
 800a672:	bf44      	itt	mi
 800a674:	f043 0320 	orrmi.w	r3, r3, #32
 800a678:	6023      	strmi	r3, [r4, #0]
 800a67a:	b11d      	cbz	r5, 800a684 <_printf_i+0x1a0>
 800a67c:	2310      	movs	r3, #16
 800a67e:	e7ab      	b.n	800a5d8 <_printf_i+0xf4>
 800a680:	4826      	ldr	r0, [pc, #152]	@ (800a71c <_printf_i+0x238>)
 800a682:	e7e9      	b.n	800a658 <_printf_i+0x174>
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	f023 0320 	bic.w	r3, r3, #32
 800a68a:	6023      	str	r3, [r4, #0]
 800a68c:	e7f6      	b.n	800a67c <_printf_i+0x198>
 800a68e:	4616      	mov	r6, r2
 800a690:	e7bd      	b.n	800a60e <_printf_i+0x12a>
 800a692:	6833      	ldr	r3, [r6, #0]
 800a694:	6825      	ldr	r5, [r4, #0]
 800a696:	1d18      	adds	r0, r3, #4
 800a698:	6961      	ldr	r1, [r4, #20]
 800a69a:	6030      	str	r0, [r6, #0]
 800a69c:	062e      	lsls	r6, r5, #24
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	d501      	bpl.n	800a6a6 <_printf_i+0x1c2>
 800a6a2:	6019      	str	r1, [r3, #0]
 800a6a4:	e002      	b.n	800a6ac <_printf_i+0x1c8>
 800a6a6:	0668      	lsls	r0, r5, #25
 800a6a8:	d5fb      	bpl.n	800a6a2 <_printf_i+0x1be>
 800a6aa:	8019      	strh	r1, [r3, #0]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4616      	mov	r6, r2
 800a6b0:	6123      	str	r3, [r4, #16]
 800a6b2:	e7bc      	b.n	800a62e <_printf_i+0x14a>
 800a6b4:	6833      	ldr	r3, [r6, #0]
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	1d1a      	adds	r2, r3, #4
 800a6ba:	6032      	str	r2, [r6, #0]
 800a6bc:	681e      	ldr	r6, [r3, #0]
 800a6be:	6862      	ldr	r2, [r4, #4]
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f000 f83f 	bl	800a744 <memchr>
 800a6c6:	b108      	cbz	r0, 800a6cc <_printf_i+0x1e8>
 800a6c8:	1b80      	subs	r0, r0, r6
 800a6ca:	6060      	str	r0, [r4, #4]
 800a6cc:	6863      	ldr	r3, [r4, #4]
 800a6ce:	6123      	str	r3, [r4, #16]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6d6:	e7aa      	b.n	800a62e <_printf_i+0x14a>
 800a6d8:	4632      	mov	r2, r6
 800a6da:	4649      	mov	r1, r9
 800a6dc:	4640      	mov	r0, r8
 800a6de:	6923      	ldr	r3, [r4, #16]
 800a6e0:	47d0      	blx	sl
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	d0ad      	beq.n	800a642 <_printf_i+0x15e>
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	079b      	lsls	r3, r3, #30
 800a6ea:	d413      	bmi.n	800a714 <_printf_i+0x230>
 800a6ec:	68e0      	ldr	r0, [r4, #12]
 800a6ee:	9b03      	ldr	r3, [sp, #12]
 800a6f0:	4298      	cmp	r0, r3
 800a6f2:	bfb8      	it	lt
 800a6f4:	4618      	movlt	r0, r3
 800a6f6:	e7a6      	b.n	800a646 <_printf_i+0x162>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	4632      	mov	r2, r6
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	4640      	mov	r0, r8
 800a700:	47d0      	blx	sl
 800a702:	3001      	adds	r0, #1
 800a704:	d09d      	beq.n	800a642 <_printf_i+0x15e>
 800a706:	3501      	adds	r5, #1
 800a708:	68e3      	ldr	r3, [r4, #12]
 800a70a:	9903      	ldr	r1, [sp, #12]
 800a70c:	1a5b      	subs	r3, r3, r1
 800a70e:	42ab      	cmp	r3, r5
 800a710:	dcf2      	bgt.n	800a6f8 <_printf_i+0x214>
 800a712:	e7eb      	b.n	800a6ec <_printf_i+0x208>
 800a714:	2500      	movs	r5, #0
 800a716:	f104 0619 	add.w	r6, r4, #25
 800a71a:	e7f5      	b.n	800a708 <_printf_i+0x224>
 800a71c:	0800d71f 	.word	0x0800d71f
 800a720:	0800d730 	.word	0x0800d730

0800a724 <_sbrk_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	2300      	movs	r3, #0
 800a728:	4d05      	ldr	r5, [pc, #20]	@ (800a740 <_sbrk_r+0x1c>)
 800a72a:	4604      	mov	r4, r0
 800a72c:	4608      	mov	r0, r1
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	f7f6 fe4e 	bl	80013d0 <_sbrk>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d102      	bne.n	800a73e <_sbrk_r+0x1a>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	b103      	cbz	r3, 800a73e <_sbrk_r+0x1a>
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	20001a14 	.word	0x20001a14

0800a744 <memchr>:
 800a744:	4603      	mov	r3, r0
 800a746:	b510      	push	{r4, lr}
 800a748:	b2c9      	uxtb	r1, r1
 800a74a:	4402      	add	r2, r0
 800a74c:	4293      	cmp	r3, r2
 800a74e:	4618      	mov	r0, r3
 800a750:	d101      	bne.n	800a756 <memchr+0x12>
 800a752:	2000      	movs	r0, #0
 800a754:	e003      	b.n	800a75e <memchr+0x1a>
 800a756:	7804      	ldrb	r4, [r0, #0]
 800a758:	3301      	adds	r3, #1
 800a75a:	428c      	cmp	r4, r1
 800a75c:	d1f6      	bne.n	800a74c <memchr+0x8>
 800a75e:	bd10      	pop	{r4, pc}

0800a760 <memcpy>:
 800a760:	440a      	add	r2, r1
 800a762:	4291      	cmp	r1, r2
 800a764:	f100 33ff 	add.w	r3, r0, #4294967295
 800a768:	d100      	bne.n	800a76c <memcpy+0xc>
 800a76a:	4770      	bx	lr
 800a76c:	b510      	push	{r4, lr}
 800a76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a772:	4291      	cmp	r1, r2
 800a774:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a778:	d1f9      	bne.n	800a76e <memcpy+0xe>
 800a77a:	bd10      	pop	{r4, pc}

0800a77c <_realloc_r>:
 800a77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a780:	4680      	mov	r8, r0
 800a782:	4615      	mov	r5, r2
 800a784:	460c      	mov	r4, r1
 800a786:	b921      	cbnz	r1, 800a792 <_realloc_r+0x16>
 800a788:	4611      	mov	r1, r2
 800a78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a78e:	f7ff bc53 	b.w	800a038 <_malloc_r>
 800a792:	b92a      	cbnz	r2, 800a7a0 <_realloc_r+0x24>
 800a794:	f7ff fbe6 	bl	8009f64 <_free_r>
 800a798:	2400      	movs	r4, #0
 800a79a:	4620      	mov	r0, r4
 800a79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a0:	f000 f81a 	bl	800a7d8 <_malloc_usable_size_r>
 800a7a4:	4285      	cmp	r5, r0
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	d802      	bhi.n	800a7b0 <_realloc_r+0x34>
 800a7aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a7ae:	d8f4      	bhi.n	800a79a <_realloc_r+0x1e>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	f7ff fc40 	bl	800a038 <_malloc_r>
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d0ec      	beq.n	800a798 <_realloc_r+0x1c>
 800a7be:	42b5      	cmp	r5, r6
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	bf28      	it	cs
 800a7c6:	4632      	movcs	r2, r6
 800a7c8:	f7ff ffca 	bl	800a760 <memcpy>
 800a7cc:	4621      	mov	r1, r4
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	f7ff fbc8 	bl	8009f64 <_free_r>
 800a7d4:	463c      	mov	r4, r7
 800a7d6:	e7e0      	b.n	800a79a <_realloc_r+0x1e>

0800a7d8 <_malloc_usable_size_r>:
 800a7d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7dc:	1f18      	subs	r0, r3, #4
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bfbc      	itt	lt
 800a7e2:	580b      	ldrlt	r3, [r1, r0]
 800a7e4:	18c0      	addlt	r0, r0, r3
 800a7e6:	4770      	bx	lr

0800a7e8 <_init>:
 800a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ea:	bf00      	nop
 800a7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ee:	bc08      	pop	{r3}
 800a7f0:	469e      	mov	lr, r3
 800a7f2:	4770      	bx	lr

0800a7f4 <_fini>:
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	bf00      	nop
 800a7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fa:	bc08      	pop	{r3}
 800a7fc:	469e      	mov	lr, r3
 800a7fe:	4770      	bx	lr
