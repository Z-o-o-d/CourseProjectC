
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b360  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003458  0800b470  0800b470  0000c470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8c8  0800e8c8  000101f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8c8  0800e8c8  0000f8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8d0  0800e8d0  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8d0  0800e8d0  0000f8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8d4  0800e8d4  0000f8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800e8d8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  200001f8  0800ead0  000101f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a50  0800ead0  00010a50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014213  00000000  00000000  00010221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315d  00000000  00000000  00024434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00027598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec7  00000000  00000000  00028820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af88  00000000  00000000  000296e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001812b  00000000  00000000  0004466f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094438  00000000  00000000  0005c79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0bd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006338  00000000  00000000  000f0c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000002c  00000000  00000000  000f6f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000f6f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b458 	.word	0x0800b458

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800b458 	.word	0x0800b458

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2uiz>:
 8000eec:	0042      	lsls	r2, r0, #1
 8000eee:	d20e      	bcs.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef4:	d30b      	bcc.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d409      	bmi.n	8000f14 <__aeabi_f2uiz+0x28>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f08:	fa23 f002 	lsr.w	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2uiz+0x32>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d102      	bne.n	8000f24 <__aeabi_f2uiz+0x38>
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	4770      	bx	lr
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_d2lz>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2300      	movs	r3, #0
 8000f32:	4604      	mov	r4, r0
 8000f34:	460d      	mov	r5, r1
 8000f36:	f7ff fdf5 	bl	8000b24 <__aeabi_dcmplt>
 8000f3a:	b928      	cbnz	r0, 8000f48 <__aeabi_d2lz+0x1c>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	4629      	mov	r1, r5
 8000f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f44:	f000 b80a 	b.w	8000f5c <__aeabi_d2ulz>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f4e:	f000 f805 	bl	8000f5c <__aeabi_d2ulz>
 8000f52:	4240      	negs	r0, r0
 8000f54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f58:	bd38      	pop	{r3, r4, r5, pc}
 8000f5a:	bf00      	nop

08000f5c <__aeabi_d2ulz>:
 8000f5c:	b5d0      	push	{r4, r6, r7, lr}
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <__aeabi_d2ulz+0x34>)
 8000f62:	4606      	mov	r6, r0
 8000f64:	460f      	mov	r7, r1
 8000f66:	f7ff fb6b 	bl	8000640 <__aeabi_dmul>
 8000f6a:	f7ff fe41 	bl	8000bf0 <__aeabi_d2uiz>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	f7ff faec 	bl	800054c <__aeabi_ui2d>
 8000f74:	2200      	movs	r2, #0
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <__aeabi_d2ulz+0x38>)
 8000f78:	f7ff fb62 	bl	8000640 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4630      	mov	r0, r6
 8000f82:	4639      	mov	r1, r7
 8000f84:	f7ff f9a4 	bl	80002d0 <__aeabi_dsub>
 8000f88:	f7ff fe32 	bl	8000bf0 <__aeabi_d2uiz>
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000f90:	3df00000 	.word	0x3df00000
 8000f94:	41f00000 	.word	0x41f00000

08000f98 <ESP_SendCommand>:
// Default UART handle
UART_HandleTypeDef *AT_huart;
extern UART_HandleTypeDef huart3;


void ESP_SendCommand(const char *command) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    // Transmit the command using the default UART
    HAL_UART_Transmit(AT_huart, (uint8_t*)command, strlen(command), 1000);
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <ESP_SendCommand+0x2c>)
 8000fa2:	681c      	ldr	r4, [r3, #0]
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff f8d3 	bl	8000150 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f005 f81c 	bl	8005ff2 <HAL_UART_Transmit>
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd90      	pop	{r4, r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000214 	.word	0x20000214

08000fc8 <ESP_SendTCP>:

void ESP_SendTCP(uint8_t con_num, char *data) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b091      	sub	sp, #68	@ 0x44
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
    // Calculate the total length
    uint8_t cmd[50];
    sprintf((char*)cmd, "AT+CIPSEND=%d,%d\r\n", con_num, strlen(data));
 8000fd4:	79fc      	ldrb	r4, [r7, #7]
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f7ff f8ba 	bl	8000150 <strlen>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f107 000c 	add.w	r0, r7, #12
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	4912      	ldr	r1, [pc, #72]	@ (8001030 <ESP_SendTCP+0x68>)
 8000fe6:	f006 fe21 	bl	8007c2c <siprintf>
    HAL_UART_Transmit(AT_huart, cmd, strlen((char*)cmd), 100);
 8000fea:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <ESP_SendTCP+0x6c>)
 8000fec:	681c      	ldr	r4, [r3, #0]
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8ac 	bl	8000150 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f107 010c 	add.w	r1, r7, #12
 8001000:	2364      	movs	r3, #100	@ 0x64
 8001002:	4620      	mov	r0, r4
 8001004:	f004 fff5 	bl	8005ff2 <HAL_UART_Transmit>
    HAL_Delay(1); // Adjust this delay as needed
 8001008:	2001      	movs	r0, #1
 800100a:	f001 fce1 	bl	80029d0 <HAL_Delay>
    HAL_UART_Transmit(AT_huart, (uint8_t *)data, strlen(data), 1000);
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <ESP_SendTCP+0x6c>)
 8001010:	681c      	ldr	r4, [r3, #0]
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f7ff f89c 	bl	8000150 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	4620      	mov	r0, r4
 8001024:	f004 ffe5 	bl	8005ff2 <HAL_UART_Transmit>
}
 8001028:	bf00      	nop
 800102a:	3744      	adds	r7, #68	@ 0x44
 800102c:	46bd      	mov	sp, r7
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	0800b470 	.word	0x0800b470
 8001034:	20000214 	.word	0x20000214

08001038 <ESP_UART_Init>:

void ESP_UART_Init(UART_HandleTypeDef *huart){
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    AT_huart = huart;
 8001040:	4a03      	ldr	r2, [pc, #12]	@ (8001050 <ESP_UART_Init+0x18>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000214 	.word	0x20000214

08001054 <ESP_CheckWiFi>:
    char cmd[100];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
    ESP_SendCommand(cmd);
}

WiFiInfoTypeDef ESP_CheckWiFi(void) {
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	b0ab      	sub	sp, #172	@ 0xac
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	WiFiInfoTypeDef info={0};
 800105c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001060:	2235      	movs	r2, #53	@ 0x35
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f006 fe5e 	bl	8007d26 <memset>
    char response[100]={0};
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2260      	movs	r2, #96	@ 0x60
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f006 fe55 	bl	8007d26 <memset>
    char *token;

    huart3.RxXferCount = 0;
 800107c:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <ESP_CheckWiFi+0x118>)
 800107e:	2200      	movs	r2, #0
 8001080:	85da      	strh	r2, [r3, #46]	@ 0x2e

    ESP_SendCommand("AT+CWJAP?\r\n");
 8001082:	483b      	ldr	r0, [pc, #236]	@ (8001170 <ESP_CheckWiFi+0x11c>)
 8001084:	f7ff ff88 	bl	8000f98 <ESP_SendCommand>
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);
 8001088:	4b3a      	ldr	r3, [pc, #232]	@ (8001174 <ESP_CheckWiFi+0x120>)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	f107 0108 	add.w	r1, r7, #8
 8001090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001094:	2264      	movs	r2, #100	@ 0x64
 8001096:	f005 f82f 	bl	80060f8 <HAL_UART_Receive>

//    // Parse the response and populate the WiFiInfo struct
    token = strtok(response, ":,\"");
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	4936      	ldr	r1, [pc, #216]	@ (8001178 <ESP_CheckWiFi+0x124>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 fe49 	bl	8007d38 <strtok>
 80010a6:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

    token = strtok(NULL, "\",\""); // Get SSID
 80010aa:	4934      	ldr	r1, [pc, #208]	@ (800117c <ESP_CheckWiFi+0x128>)
 80010ac:	2000      	movs	r0, #0
 80010ae:	f006 fe43 	bl	8007d38 <strtok>
 80010b2:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    strcpy(info.ssid, token);
 80010b6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 ff0d 	bl	8007ede <strcpy>

    token = strtok(NULL, "\","); // Get MAC address
 80010c4:	492e      	ldr	r1, [pc, #184]	@ (8001180 <ESP_CheckWiFi+0x12c>)
 80010c6:	2000      	movs	r0, #0
 80010c8:	f006 fe36 	bl	8007d38 <strtok>
 80010cc:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    strcpy(info.bssid, token);
 80010d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010d4:	3320      	adds	r3, #32
 80010d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80010da:	4618      	mov	r0, r3
 80010dc:	f006 feff 	bl	8007ede <strcpy>

    token = strtok(NULL, ","); // Get security mode
 80010e0:	4928      	ldr	r1, [pc, #160]	@ (8001184 <ESP_CheckWiFi+0x130>)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f006 fe28 	bl	8007d38 <strtok>
 80010e8:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    info.channel = atoi(token);
 80010ec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80010f0:	f005 fde4 	bl	8006cbc <atoi>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

    token = strtok(NULL, ","); // Get RSSI
 80010fc:	4921      	ldr	r1, [pc, #132]	@ (8001184 <ESP_CheckWiFi+0x130>)
 80010fe:	2000      	movs	r0, #0
 8001100:	f006 fe1a 	bl	8007d38 <strtok>
 8001104:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    info.rssi = atoi(token);
 8001108:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800110c:	f005 fdd6 	bl	8006cbc <atoi>
 8001110:	4603      	mov	r3, r0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    token = strtok(NULL, "\r\n"); // Get connected status
 8001118:	491b      	ldr	r1, [pc, #108]	@ (8001188 <ESP_CheckWiFi+0x134>)
 800111a:	2000      	movs	r0, #0
 800111c:	f006 fe0c 	bl	8007d38 <strtok>
 8001120:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    info.encryption = atoi(token);
 8001124:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001128:	f005 fdc8 	bl	8006cbc <atoi>
 800112c:	4603      	mov	r3, r0
 800112e:	b25b      	sxtb	r3, r3
 8001130:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0

    return info;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 800113a:	469c      	mov	ip, r3
 800113c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001140:	4665      	mov	r5, ip
 8001142:	4626      	mov	r6, r4
 8001144:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001146:	6028      	str	r0, [r5, #0]
 8001148:	6069      	str	r1, [r5, #4]
 800114a:	60aa      	str	r2, [r5, #8]
 800114c:	60eb      	str	r3, [r5, #12]
 800114e:	3410      	adds	r4, #16
 8001150:	f10c 0c10 	add.w	ip, ip, #16
 8001154:	4574      	cmp	r4, lr
 8001156:	d1f3      	bne.n	8001140 <ESP_CheckWiFi+0xec>
 8001158:	4663      	mov	r3, ip
 800115a:	4622      	mov	r2, r4
 800115c:	6810      	ldr	r0, [r2, #0]
 800115e:	6018      	str	r0, [r3, #0]
 8001160:	7912      	ldrb	r2, [r2, #4]
 8001162:	711a      	strb	r2, [r3, #4]
//        }
//    }


    return info;
}
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	37ac      	adds	r7, #172	@ 0xac
 8001168:	46bd      	mov	sp, r7
 800116a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116c:	200002dc 	.word	0x200002dc
 8001170:	0800b4f4 	.word	0x0800b4f4
 8001174:	20000214 	.word	0x20000214
 8001178:	0800b500 	.word	0x0800b500
 800117c:	0800b504 	.word	0x0800b504
 8001180:	0800b508 	.word	0x0800b508
 8001184:	0800b50c 	.word	0x0800b50c
 8001188:	0800b510 	.word	0x0800b510

0800118c <ESP_EnableMUX>:

void ESP_GetIP() {
    ESP_SendCommand("AT+CIFSR\r\n");
}

void ESP_EnableMUX() {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    ESP_SendCommand("AT+CIPMUX=1\r\n");
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <ESP_EnableMUX+0x10>)
 8001192:	f7ff ff01 	bl	8000f98 <ESP_SendCommand>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	0800b520 	.word	0x0800b520

080011a0 <ESP_StartServer>:

void ESP_StartServer(uint16_t port) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b090      	sub	sp, #64	@ 0x40
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
    char cmd[50];
    sprintf(cmd, "AT+CIPSERVER=1,%d\r\n", port);
 80011aa:	88fa      	ldrh	r2, [r7, #6]
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4906      	ldr	r1, [pc, #24]	@ (80011cc <ESP_StartServer+0x2c>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f006 fd3a 	bl	8007c2c <siprintf>
    ESP_SendCommand(cmd);
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff feeb 	bl	8000f98 <ESP_SendCommand>
}
 80011c2:	bf00      	nop
 80011c4:	3740      	adds	r7, #64	@ 0x40
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	0800b530 	.word	0x0800b530

080011d0 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	889b      	ldrh	r3, [r3, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4619      	mov	r1, r3
 80011f2:	f002 feb2 	bl	8003f5a <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80011fc:	2311      	movs	r3, #17
 80011fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	79db      	ldrb	r3, [r3, #7]
 8001204:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8001206:	2303      	movs	r3, #3
 8001208:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f107 0208 	add.w	r2, r7, #8
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fd05 	bl	8003c24 <HAL_GPIO_Init>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	79db      	ldrb	r3, [r3, #7]
 8001246:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f107 0208 	add.w	r2, r7, #8
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f002 fce6 	bl	8003c24 <HAL_GPIO_Init>
}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 800126a:	4a76      	ldr	r2, [pc, #472]	@ (8001444 <DHT_getData+0x1e4>)
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001274:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	799b      	ldrb	r3, [r3, #6]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d103      	bne.n	8001288 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8001280:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001284:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001286:	e002      	b.n	800128e <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8001288:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 800128e:	f001 fb95 	bl	80029bc <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	1ad2      	subs	r2, r2, r3
 800129a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800129c:	429a      	cmp	r2, r3
 800129e:	d212      	bcs.n	80012c6 <DHT_getData+0x66>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00e      	beq.n	80012c6 <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	61bb      	str	r3, [r7, #24]
		return data;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	461a      	mov	r2, r3
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80012c4:	e166      	b.n	8001594 <DHT_getData+0x334>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 80012c6:	f001 fb79 	bl	80029bc <HAL_GetTick>
 80012ca:	4603      	mov	r3, r0
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff ff7c 	bl	80011d0 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	f002 fe39 	bl	8003f5a <HAL_GPIO_WritePin>
	Delay(18);
 80012e8:	2012      	movs	r0, #18
 80012ea:	f001 fb71 	bl	80029d0 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	4619      	mov	r1, r3
 80012fa:	f002 fe2e 	bl	8003f5a <HAL_GPIO_WritePin>
	goToInput(sensor);
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f7ff ff8f 	bl	8001222 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 800130c:	e01a      	b.n	8001344 <DHT_getData+0xe4>
		timeout++;
 800130e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001310:	3301      	adds	r3, #1
 8001312:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8001314:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001316:	f242 7210 	movw	r2, #10000	@ 0x2710
 800131a:	4293      	cmp	r3, r2
 800131c:	d912      	bls.n	8001344 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 800131e:	b662      	cpsie	i
}
 8001320:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001328:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001330:	60da      	str	r2, [r3, #12]

			return data;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	461a      	mov	r2, r3
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800133e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001342:	e127      	b.n	8001594 <DHT_getData+0x334>
	while(getLine()) {
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	889b      	ldrh	r3, [r3, #4]
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f002 fdec 	bl	8003f2c <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d0d9      	beq.n	800130e <DHT_getData+0xae>
		}
	}
	timeout = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание подъёма
	while(!getLine()) {
 800135e:	e01a      	b.n	8001396 <DHT_getData+0x136>
		timeout++;
 8001360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001362:	3301      	adds	r3, #1
 8001364:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8001366:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001368:	f242 7210 	movw	r2, #10000	@ 0x2710
 800136c:	4293      	cmp	r3, r2
 800136e:	d912      	bls.n	8001396 <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 8001370:	b662      	cpsie	i
}
 8001372:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 800137a:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001382:	60da      	str	r2, [r3, #12]

			return data;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	461a      	mov	r2, r3
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001390:	e882 0003 	stmia.w	r2, {r0, r1}
 8001394:	e0fe      	b.n	8001594 <DHT_getData+0x334>
	while(!getLine()) {
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	889b      	ldrh	r3, [r3, #4]
 800139e:	4619      	mov	r1, r3
 80013a0:	4610      	mov	r0, r2
 80013a2:	f002 fdc3 	bl	8003f2c <HAL_GPIO_ReadPin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d1d9      	bne.n	8001360 <DHT_getData+0x100>
		}
	}
	timeout = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 80013b0:	e012      	b.n	80013d8 <DHT_getData+0x178>
		timeout++;
 80013b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013b4:	3301      	adds	r3, #1
 80013b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 80013b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80013be:	4293      	cmp	r3, r2
 80013c0:	d90a      	bls.n	80013d8 <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 80013c2:	b662      	cpsie	i
}
 80013c4:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	461a      	mov	r2, r3
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80013d6:	e0dd      	b.n	8001594 <DHT_getData+0x334>
	while(getLine()) {
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4610      	mov	r0, r2
 80013e4:	f002 fda2 	bl	8003f2c <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d0e1      	beq.n	80013b2 <DHT_getData+0x152>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 80013ee:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <DHT_getData+0x1e8>)
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f8:	6018      	str	r0, [r3, #0]
 80013fa:	3304      	adds	r3, #4
 80013fc:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001404:	e05d      	b.n	80014c2 <DHT_getData+0x262>
		for(uint8_t b = 7; b != 255; b--) {
 8001406:	2307      	movs	r3, #7
 8001408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800140c:	e050      	b.n	80014b0 <DHT_getData+0x250>
			uint16_t hT = 0, lT = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	843b      	strh	r3, [r7, #32]
 8001412:	2300      	movs	r3, #0
 8001414:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8001416:	e002      	b.n	800141e <DHT_getData+0x1be>
 8001418:	8bfb      	ldrh	r3, [r7, #30]
 800141a:	3301      	adds	r3, #1
 800141c:	83fb      	strh	r3, [r7, #30]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	889b      	ldrh	r3, [r3, #4]
 8001426:	4619      	mov	r1, r3
 8001428:	4610      	mov	r0, r2
 800142a:	f002 fd7f 	bl	8003f2c <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d004      	beq.n	800143e <DHT_getData+0x1de>
 8001434:	8bfb      	ldrh	r3, [r7, #30]
 8001436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143a:	4293      	cmp	r3, r2
 800143c:	d1ec      	bne.n	8001418 <DHT_getData+0x1b8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	84bb      	strh	r3, [r7, #36]	@ 0x24
			while(getLine()&& hT != 65535) hT++;
 8001442:	e006      	b.n	8001452 <DHT_getData+0x1f2>
 8001444:	0800b574 	.word	0x0800b574
 8001448:	0800b57c 	.word	0x0800b57c
 800144c:	8c3b      	ldrh	r3, [r7, #32]
 800144e:	3301      	adds	r3, #1
 8001450:	843b      	strh	r3, [r7, #32]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	889b      	ldrh	r3, [r3, #4]
 800145a:	4619      	mov	r1, r3
 800145c:	4610      	mov	r0, r2
 800145e:	f002 fd65 	bl	8003f2c <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	d104      	bne.n	8001472 <DHT_getData+0x212>
 8001468:	8c3b      	ldrh	r3, [r7, #32]
 800146a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800146e:	4293      	cmp	r3, r2
 8001470:	d1ec      	bne.n	800144c <DHT_getData+0x1ec>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 8001472:	8c3a      	ldrh	r2, [r7, #32]
 8001474:	8bfb      	ldrh	r3, [r7, #30]
 8001476:	429a      	cmp	r2, r3
 8001478:	d915      	bls.n	80014a6 <DHT_getData+0x246>
 800147a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800147e:	3328      	adds	r3, #40	@ 0x28
 8001480:	443b      	add	r3, r7
 8001482:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001486:	b25a      	sxtb	r2, r3
 8001488:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800148c:	2101      	movs	r1, #1
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	b25b      	sxtb	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b25a      	sxtb	r2, r3
 8001498:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	3328      	adds	r3, #40	@ 0x28
 80014a0:	443b      	add	r3, r7
 80014a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 80014a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80014b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014b4:	2bff      	cmp	r3, #255	@ 0xff
 80014b6:	d1aa      	bne.n	800140e <DHT_getData+0x1ae>
	for(uint8_t a = 0; a < 5; a++) {
 80014b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014bc:	3301      	adds	r3, #1
 80014be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d99d      	bls.n	8001406 <DHT_getData+0x1a6>
  __ASM volatile ("cpsie i" : : : "memory");
 80014ca:	b662      	cpsie	i
}
 80014cc:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80014ce:	7b3a      	ldrb	r2, [r7, #12]
 80014d0:	7b7b      	ldrb	r3, [r7, #13]
 80014d2:	4413      	add	r3, r2
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	4413      	add	r3, r2
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	4413      	add	r3, r2
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	7c3b      	ldrb	r3, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d147      	bne.n	8001578 <DHT_getData+0x318>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	799b      	ldrb	r3, [r3, #6]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d133      	bne.n	8001558 <DHT_getData+0x2f8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 80014f0:	7b3b      	ldrb	r3, [r7, #12]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	7b7a      	ldrb	r2, [r7, #13]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fca3 	bl	8000e44 <__aeabi_i2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4926      	ldr	r1, [pc, #152]	@ (800159c <DHT_getData+0x33c>)
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe fe2c 	bl	8000160 <__aeabi_fmul>
 8001508:	4603      	mov	r3, r0
 800150a:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0e      	blt.n	8001532 <DHT_getData+0x2d2>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001514:	7bbb      	ldrb	r3, [r7, #14]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	4313      	orrs	r3, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc91 	bl	8000e44 <__aeabi_i2f>
 8001522:	4603      	mov	r3, r0
 8001524:	491d      	ldr	r1, [pc, #116]	@ (800159c <DHT_getData+0x33c>)
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe fe1a 	bl	8000160 <__aeabi_fmul>
 800152c:	4603      	mov	r3, r0
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	e012      	b.n	8001558 <DHT_getData+0x2f8>
			}	else {
				rawData[2] &= ~(1<<7);
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001538:	b2db      	uxtb	r3, r3
 800153a:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	4313      	orrs	r3, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fc7d 	bl	8000e44 <__aeabi_i2f>
 800154a:	4603      	mov	r3, r0
 800154c:	4914      	ldr	r1, [pc, #80]	@ (80015a0 <DHT_getData+0x340>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fe06 	bl	8000160 <__aeabi_fmul>
 8001554:	4603      	mov	r3, r0
 8001556:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	799b      	ldrb	r3, [r3, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10b      	bne.n	8001578 <DHT_getData+0x318>
			data.hum = (float)rawData[0];
 8001560:	7b3b      	ldrb	r3, [r7, #12]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fc6a 	bl	8000e3c <__aeabi_ui2f>
 8001568:	4603      	mov	r3, r0
 800156a:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fc64 	bl	8000e3c <__aeabi_ui2f>
 8001574:	4603      	mov	r3, r0
 8001576:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	461a      	mov	r2, r3
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001590:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	3728      	adds	r7, #40	@ 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	3dcccccd 	.word	0x3dcccccd
 80015a0:	bdcccccd 	.word	0xbdcccccd

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b510      	push	{r4, lr}
 80015a6:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a8:	2214      	movs	r2, #20
 80015aa:	2100      	movs	r1, #0
 80015ac:	a80c      	add	r0, sp, #48	@ 0x30
 80015ae:	f006 fbba 	bl	8007d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b2:	2214      	movs	r2, #20
 80015b4:	2100      	movs	r1, #0
 80015b6:	eb0d 0002 	add.w	r0, sp, r2
 80015ba:	f006 fbb4 	bl	8007d26 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015be:	2210      	movs	r2, #16
 80015c0:	2100      	movs	r1, #0
 80015c2:	a801      	add	r0, sp, #4
 80015c4:	f006 fbaf 	bl	8007d26 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ce:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d0:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015d8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015de:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015e0:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e2:	f003 f97f 	bl	80048e4 <HAL_RCC_OscConfig>
 80015e6:	b108      	cbz	r0, 80015ec <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ea:	e7fe      	b.n	80015ea <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ec:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ee:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f6:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f8:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fc:	4621      	mov	r1, r4
 80015fe:	a805      	add	r0, sp, #20
 8001600:	f003 fbf2 	bl	8004de8 <HAL_RCC_ClockConfig>
 8001604:	b108      	cbz	r0, 800160a <SystemClock_Config+0x66>
 8001606:	b672      	cpsid	i
  while (1)
 8001608:	e7fe      	b.n	8001608 <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800160a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001610:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001612:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	f003 fd76 	bl	8005104 <HAL_RCCEx_PeriphCLKConfig>
 8001618:	b108      	cbz	r0, 800161e <SystemClock_Config+0x7a>
 800161a:	b672      	cpsid	i
  while (1)
 800161c:	e7fe      	b.n	800161c <SystemClock_Config+0x78>
}
 800161e:	b014      	add	sp, #80	@ 0x50
 8001620:	bd10      	pop	{r4, pc}
	...

08001624 <main>:
{
 8001624:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001628:	4ca1      	ldr	r4, [pc, #644]	@ (80018b0 <main+0x28c>)
{
 800162a:	b0c1      	sub	sp, #260	@ 0x104
  HAL_Init();
 800162c:	f001 f96e 	bl	800290c <HAL_Init>
  SystemClock_Config();
 8001630:	f7ff ffb8 	bl	80015a4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	2210      	movs	r2, #16
 8001636:	2100      	movs	r1, #0
 8001638:	a827      	add	r0, sp, #156	@ 0x9c
 800163a:	f006 fb74 	bl	8007d26 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001640:	2500      	movs	r5, #0
 8001642:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	f043 0310 	orr.w	r3, r3, #16
  GPIO_InitStruct.Pin = RST_8266_Pin;
 800164a:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	61a3      	str	r3, [r4, #24]
 8001650:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	9316      	str	r3, [sp, #88]	@ 0x58
 800165a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_RESET);
 800165e:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001660:	f043 0320 	orr.w	r3, r3, #32
 8001664:	61a3      	str	r3, [r4, #24]
 8001666:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_RESET);
 8001668:	4892      	ldr	r0, [pc, #584]	@ (80018b4 <main+0x290>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8001670:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	69a3      	ldr	r3, [r4, #24]
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	61a3      	str	r3, [r4, #24]
 800167a:	69a3      	ldr	r3, [r4, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	9318      	str	r3, [sp, #96]	@ 0x60
 8001682:	9b18      	ldr	r3, [sp, #96]	@ 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	69a3      	ldr	r3, [r4, #24]
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	61a3      	str	r3, [r4, #24]
 800168c:	69a3      	ldr	r3, [r4, #24]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	9319      	str	r3, [sp, #100]	@ 0x64
 8001694:	9b19      	ldr	r3, [sp, #100]	@ 0x64
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_RESET);
 8001696:	f002 fc60 	bl	8003f5a <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800169a:	4886      	ldr	r0, [pc, #536]	@ (80018b4 <main+0x290>)
 800169c:	a927      	add	r1, sp, #156	@ 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169e:	e9cd 6527 	strd	r6, r5, [sp, #156]	@ 0x9c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a2:	9629      	str	r6, [sp, #164]	@ 0xa4
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f002 fabe 	bl	8003c24 <HAL_GPIO_Init>
  HAL_GPIO_Init(RST_8266_GPIO_Port, &GPIO_InitStruct);
 80016a8:	4882      	ldr	r0, [pc, #520]	@ (80018b4 <main+0x290>)
 80016aa:	a927      	add	r1, sp, #156	@ 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	e9cd 8627 	strd	r8, r6, [sp, #156]	@ 0x9c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	9529      	str	r5, [sp, #164]	@ 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	972a      	str	r7, [sp, #168]	@ 0xa8
  HAL_GPIO_Init(RST_8266_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f002 fab6 	bl	8003c24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin|KEY_2_Pin|KEY_3_Pin;
 80016b8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	487d      	ldr	r0, [pc, #500]	@ (80018b4 <main+0x290>)
 80016be:	a927      	add	r1, sp, #156	@ 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016c4:	9729      	str	r7, [sp, #164]	@ 0xa4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f002 faad 	bl	8003c24 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ca:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016cc:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ce:	4333      	orrs	r3, r6
 80016d0:	6163      	str	r3, [r4, #20]
 80016d2:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016d4:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016d8:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016da:	9315      	str	r3, [sp, #84]	@ 0x54
 80016dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016de:	f001 ffc8 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e2:	200b      	movs	r0, #11
 80016e4:	f001 ffe1 	bl	80036aa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016e8:	462a      	mov	r2, r5
 80016ea:	4629      	mov	r1, r5
 80016ec:	200c      	movs	r0, #12
 80016ee:	f001 ffc0 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016f2:	200c      	movs	r0, #12
 80016f4:	f001 ffd9 	bl	80036aa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016f8:	462a      	mov	r2, r5
 80016fa:	4629      	mov	r1, r5
 80016fc:	200d      	movs	r0, #13
 80016fe:	f001 ffb8 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001702:	200d      	movs	r0, #13
 8001704:	f001 ffd1 	bl	80036aa <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8001708:	4c6b      	ldr	r4, [pc, #428]	@ (80018b8 <main+0x294>)
 800170a:	4b6c      	ldr	r3, [pc, #432]	@ (80018bc <main+0x298>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800170c:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 800170e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001710:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001714:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001716:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800171a:	e9cd 5527 	strd	r5, r5, [sp, #156]	@ 0x9c
 800171e:	9529      	str	r5, [sp, #164]	@ 0xa4
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001720:	7326      	strb	r6, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001722:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001724:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001726:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001728:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800172a:	f001 f975 	bl	8002a18 <HAL_ADC_Init>
 800172e:	b108      	cbz	r0, 8001734 <main+0x110>
 8001730:	b672      	cpsid	i
  while (1)
 8001732:	e7fe      	b.n	8001732 <main+0x10e>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001734:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001736:	4620      	mov	r0, r4
 8001738:	a927      	add	r1, sp, #156	@ 0x9c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800173a:	e9cd 8627 	strd	r8, r6, [sp, #156]	@ 0x9c
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800173e:	9329      	str	r3, [sp, #164]	@ 0xa4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001740:	f001 fcbe 	bl	80030c0 <HAL_ADC_ConfigChannel>
 8001744:	b108      	cbz	r0, 800174a <main+0x126>
 8001746:	b672      	cpsid	i
  while (1)
 8001748:	e7fe      	b.n	8001748 <main+0x124>
  sConfig.Channel = ADC_CHANNEL_5;
 800174a:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174c:	4620      	mov	r0, r4
 800174e:	a927      	add	r1, sp, #156	@ 0x9c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001750:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001754:	f001 fcb4 	bl	80030c0 <HAL_ADC_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	b108      	cbz	r0, 8001760 <main+0x13c>
 800175c:	b672      	cpsid	i
  while (1)
 800175e:	e7fe      	b.n	800175e <main+0x13a>
  hi2c1.Instance = I2C1;
 8001760:	4857      	ldr	r0, [pc, #348]	@ (80018c0 <main+0x29c>)
  hi2c1.Init.ClockSpeed = 100000;
 8001762:	4a58      	ldr	r2, [pc, #352]	@ (80018c4 <main+0x2a0>)
 8001764:	4c58      	ldr	r4, [pc, #352]	@ (80018c8 <main+0x2a4>)
  hi2c1.Init.OwnAddress1 = 0;
 8001766:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800176a:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001772:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001776:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800177c:	f002 fc06 	bl	8003f8c <HAL_I2C_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	b108      	cbz	r0, 8001788 <main+0x164>
 8001784:	b672      	cpsid	i
  while (1)
 8001786:	e7fe      	b.n	8001786 <main+0x162>
  huart1.Init.BaudRate = 115200;
 8001788:	f44f 35e1 	mov.w	r5, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800178c:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 800178e:	484f      	ldr	r0, [pc, #316]	@ (80018cc <main+0x2a8>)
  huart1.Init.BaudRate = 115200;
 8001790:	4a4f      	ldr	r2, [pc, #316]	@ (80018d0 <main+0x2ac>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001792:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800179a:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	61c3      	str	r3, [r0, #28]
  huart1.Init.BaudRate = 115200;
 800179e:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a2:	f004 fbd6 	bl	8005f52 <HAL_UART_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b108      	cbz	r0, 80017ae <main+0x18a>
 80017aa:	b672      	cpsid	i
  while (1)
 80017ac:	e7fe      	b.n	80017ac <main+0x188>
  huart3.Instance = USART3;
 80017ae:	4849      	ldr	r0, [pc, #292]	@ (80018d4 <main+0x2b0>)
 80017b0:	4a49      	ldr	r2, [pc, #292]	@ (80018d8 <main+0x2b4>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017b2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80017b6:	e9c0 2500 	strd	r2, r5, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017ba:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017be:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017c2:	f004 fbc6 	bl	8005f52 <HAL_UART_Init>
 80017c6:	4605      	mov	r5, r0
 80017c8:	b108      	cbz	r0, 80017ce <main+0x1aa>
 80017ca:	b672      	cpsid	i
  while (1)
 80017cc:	e7fe      	b.n	80017cc <main+0x1a8>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	4601      	mov	r1, r0
 80017d0:	2210      	movs	r2, #16
 80017d2:	a81c      	add	r0, sp, #112	@ 0x70
 80017d4:	f006 faa7 	bl	8007d26 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d8:	221c      	movs	r2, #28
 80017da:	4629      	mov	r1, r5
 80017dc:	a820      	add	r0, sp, #128	@ 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017de:	e9cd 551a 	strd	r5, r5, [sp, #104]	@ 0x68
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e2:	f006 faa0 	bl	8007d26 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e6:	4629      	mov	r1, r5
 80017e8:	2220      	movs	r2, #32
 80017ea:	a827      	add	r0, sp, #156	@ 0x9c
 80017ec:	f006 fa9b 	bl	8007d26 <memset>
  htim1.Init.Prescaler = 72;
 80017f0:	2348      	movs	r3, #72	@ 0x48
  htim1.Instance = TIM1;
 80017f2:	4c3a      	ldr	r4, [pc, #232]	@ (80018dc <main+0x2b8>)
  htim1.Init.Prescaler = 72;
 80017f4:	493a      	ldr	r1, [pc, #232]	@ (80018e0 <main+0x2bc>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017f6:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 72;
 80017f8:	e9c4 1300 	strd	r1, r3, [r4]
  htim1.Init.Period = 100-1;
 80017fc:	2363      	movs	r3, #99	@ 0x63
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	e9c4 5505 	strd	r5, r5, [r4, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001806:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001808:	f003 fd32 	bl	8005270 <HAL_TIM_Base_Init>
 800180c:	b108      	cbz	r0, 8001812 <main+0x1ee>
 800180e:	b672      	cpsid	i
  while (1)
 8001810:	e7fe      	b.n	8001810 <main+0x1ec>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001816:	4620      	mov	r0, r4
 8001818:	a91c      	add	r1, sp, #112	@ 0x70
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181a:	931c      	str	r3, [sp, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800181c:	f003 ff7e 	bl	800571c <HAL_TIM_ConfigClockSource>
 8001820:	b108      	cbz	r0, 8001826 <main+0x202>
 8001822:	b672      	cpsid	i
  while (1)
 8001824:	e7fe      	b.n	8001824 <main+0x200>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001826:	4620      	mov	r0, r4
 8001828:	f003 fdbc 	bl	80053a4 <HAL_TIM_PWM_Init>
 800182c:	b108      	cbz	r0, 8001832 <main+0x20e>
 800182e:	b672      	cpsid	i
  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0x20c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	e9cd 001a 	strd	r0, r0, [sp, #104]	@ 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001836:	a91a      	add	r1, sp, #104	@ 0x68
 8001838:	4620      	mov	r0, r4
 800183a:	f004 fadb 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 800183e:	b108      	cbz	r0, 8001844 <main+0x220>
 8001840:	b672      	cpsid	i
  while (1)
 8001842:	e7fe      	b.n	8001842 <main+0x21e>
  sConfigOC.Pulse = 36;
 8001844:	2260      	movs	r2, #96	@ 0x60
 8001846:	2324      	movs	r3, #36	@ 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001848:	f44f 7780 	mov.w	r7, #256	@ 0x100
  sConfigOC.Pulse = 36;
 800184c:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001850:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001852:	4822      	ldr	r0, [pc, #136]	@ (80018dc <main+0x2b8>)
 8001854:	a920      	add	r1, sp, #128	@ 0x80
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001856:	e9cd 2222 	strd	r2, r2, [sp, #136]	@ 0x88
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800185a:	e9cd 7225 	strd	r7, r2, [sp, #148]	@ 0x94
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185e:	9224      	str	r2, [sp, #144]	@ 0x90
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001860:	f003 fe9a 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 8001864:	b108      	cbz	r0, 800186a <main+0x246>
 8001866:	b672      	cpsid	i
  while (1)
 8001868:	e7fe      	b.n	8001868 <main+0x244>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800186a:	2204      	movs	r2, #4
 800186c:	481b      	ldr	r0, [pc, #108]	@ (80018dc <main+0x2b8>)
 800186e:	a920      	add	r1, sp, #128	@ 0x80
 8001870:	f003 fe92 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 8001874:	b108      	cbz	r0, 800187a <main+0x256>
 8001876:	b672      	cpsid	i
  while (1)
 8001878:	e7fe      	b.n	8001878 <main+0x254>
  sConfigOC.Pulse = 0;
 800187a:	9021      	str	r0, [sp, #132]	@ 0x84
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800187c:	9025      	str	r0, [sp, #148]	@ 0x94
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800187e:	2208      	movs	r2, #8
 8001880:	4816      	ldr	r0, [pc, #88]	@ (80018dc <main+0x2b8>)
 8001882:	a920      	add	r1, sp, #128	@ 0x80
 8001884:	f003 fe88 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 8001888:	b108      	cbz	r0, 800188e <main+0x26a>
 800188a:	b672      	cpsid	i
  while (1)
 800188c:	e7fe      	b.n	800188c <main+0x268>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800188e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001892:	e9cd 0027 	strd	r0, r0, [sp, #156]	@ 0x9c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001896:	e9cd 0029 	strd	r0, r0, [sp, #164]	@ 0xa4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800189a:	902b      	str	r0, [sp, #172]	@ 0xac
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800189c:	902e      	str	r0, [sp, #184]	@ 0xb8
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800189e:	a927      	add	r1, sp, #156	@ 0x9c
 80018a0:	480e      	ldr	r0, [pc, #56]	@ (80018dc <main+0x2b8>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018a2:	932c      	str	r3, [sp, #176]	@ 0xb0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a4:	f004 fb04 	bl	8005eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018a8:	4606      	mov	r6, r0
 80018aa:	b1d8      	cbz	r0, 80018e4 <main+0x2c0>
 80018ac:	b672      	cpsid	i
  while (1)
 80018ae:	e7fe      	b.n	80018ae <main+0x28a>
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010c00 	.word	0x40010c00
 80018b8:	200004c4 	.word	0x200004c4
 80018bc:	40012400 	.word	0x40012400
 80018c0:	200003fc 	.word	0x200003fc
 80018c4:	000186a0 	.word	0x000186a0
 80018c8:	40005400 	.word	0x40005400
 80018cc:	20000324 	.word	0x20000324
 80018d0:	40013800 	.word	0x40013800
 80018d4:	200002dc 	.word	0x200002dc
 80018d8:	40004800 	.word	0x40004800
 80018dc:	200003b4 	.word	0x200003b4
 80018e0:	40012c00 	.word	0x40012c00
  HAL_TIM_MspPostInit(&htim1);
 80018e4:	483c      	ldr	r0, [pc, #240]	@ (80019d8 <main+0x3b4>)
 80018e6:	f000 fd7b 	bl	80023e0 <HAL_TIM_MspPostInit>
  hadc2.Instance = ADC2;
 80018ea:	4d3c      	ldr	r5, [pc, #240]	@ (80019dc <main+0x3b8>)
 80018ec:	4b3c      	ldr	r3, [pc, #240]	@ (80019e0 <main+0x3bc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80018ee:	e9cd 6627 	strd	r6, r6, [sp, #156]	@ 0x9c
 80018f2:	9629      	str	r6, [sp, #164]	@ 0xa4
  hadc2.Instance = ADC2;
 80018f4:	602b      	str	r3, [r5, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018f6:	60af      	str	r7, [r5, #8]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f8:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  hadc2.Init.ContinuousConvMode = ENABLE;
 80018fc:	2701      	movs	r7, #1
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018fe:	752e      	strb	r6, [r5, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001900:	606e      	str	r6, [r5, #4]
  hadc2.Init.NbrOfConversion = 3;
 8001902:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001904:	4628      	mov	r0, r5
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001906:	732f      	strb	r7, [r5, #12]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001908:	61eb      	str	r3, [r5, #28]
  hadc2.Init.NbrOfConversion = 3;
 800190a:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800190c:	f001 f884 	bl	8002a18 <HAL_ADC_Init>
 8001910:	b108      	cbz	r0, 8001916 <main+0x2f2>
 8001912:	b672      	cpsid	i
  while (1)
 8001914:	e7fe      	b.n	8001914 <main+0x2f0>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001916:	9029      	str	r0, [sp, #164]	@ 0xa4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001918:	a927      	add	r1, sp, #156	@ 0x9c
 800191a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800191c:	e9cd 7727 	strd	r7, r7, [sp, #156]	@ 0x9c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001920:	f001 fbce 	bl	80030c0 <HAL_ADC_ConfigChannel>
 8001924:	b108      	cbz	r0, 800192a <main+0x306>
 8001926:	b672      	cpsid	i
  while (1)
 8001928:	e7fe      	b.n	8001928 <main+0x304>
  sConfig.Channel = ADC_CHANNEL_2;
 800192a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800192c:	4628      	mov	r0, r5
 800192e:	a927      	add	r1, sp, #156	@ 0x9c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001930:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001934:	f001 fbc4 	bl	80030c0 <HAL_ADC_ConfigChannel>
 8001938:	b108      	cbz	r0, 800193e <main+0x31a>
 800193a:	b672      	cpsid	i
  while (1)
 800193c:	e7fe      	b.n	800193c <main+0x318>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800193e:	4628      	mov	r0, r5
 8001940:	a927      	add	r1, sp, #156	@ 0x9c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001942:	e9cd 6627 	strd	r6, r6, [sp, #156]	@ 0x9c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001946:	f001 fbbb 	bl	80030c0 <HAL_ADC_ConfigChannel>
 800194a:	4605      	mov	r5, r0
 800194c:	b108      	cbz	r0, 8001952 <main+0x32e>
 800194e:	b672      	cpsid	i
  while (1)
 8001950:	e7fe      	b.n	8001950 <main+0x32c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001952:	4601      	mov	r1, r0
 8001954:	2210      	movs	r2, #16
 8001956:	a820      	add	r0, sp, #128	@ 0x80
 8001958:	f006 f9e5 	bl	8007d26 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800195c:	221c      	movs	r2, #28
 800195e:	4629      	mov	r1, r5
 8001960:	a827      	add	r0, sp, #156	@ 0x9c
  htim3.Instance = TIM3;
 8001962:	4e20      	ldr	r6, [pc, #128]	@ (80019e4 <main+0x3c0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	e9cd 551c 	strd	r5, r5, [sp, #112]	@ 0x70
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001968:	f006 f9dd 	bl	8007d26 <memset>
  htim3.Instance = TIM3;
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <main+0x3c4>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800196e:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 0;
 8001970:	e9c6 3500 	strd	r3, r5, [r6]
  htim3.Init.Period = 720;
 8001974:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	60b5      	str	r5, [r6, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197a:	e9c6 3503 	strd	r3, r5, [r6, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197e:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001980:	f003 fc76 	bl	8005270 <HAL_TIM_Base_Init>
 8001984:	b108      	cbz	r0, 800198a <main+0x366>
 8001986:	b672      	cpsid	i
  while (1)
 8001988:	e7fe      	b.n	8001988 <main+0x364>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800198e:	4630      	mov	r0, r6
 8001990:	a920      	add	r1, sp, #128	@ 0x80
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001992:	9320      	str	r3, [sp, #128]	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001994:	f003 fec2 	bl	800571c <HAL_TIM_ConfigClockSource>
 8001998:	b108      	cbz	r0, 800199e <main+0x37a>
 800199a:	b672      	cpsid	i
  while (1)
 800199c:	e7fe      	b.n	800199c <main+0x378>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800199e:	4811      	ldr	r0, [pc, #68]	@ (80019e4 <main+0x3c0>)
 80019a0:	f003 fd00 	bl	80053a4 <HAL_TIM_PWM_Init>
 80019a4:	b108      	cbz	r0, 80019aa <main+0x386>
 80019a6:	b672      	cpsid	i
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <main+0x384>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	e9cd 001c 	strd	r0, r0, [sp, #112]	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ae:	a91c      	add	r1, sp, #112	@ 0x70
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <main+0x3c0>)
 80019b2:	f004 fa1f 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4602      	mov	r2, r0
 80019b8:	b108      	cbz	r0, 80019be <main+0x39a>
 80019ba:	b672      	cpsid	i
  while (1)
 80019bc:	e7fe      	b.n	80019bc <main+0x398>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019be:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c0:	9029      	str	r0, [sp, #164]	@ 0xa4
  sConfigOC.Pulse = 0;
 80019c2:	e9cd 3027 	strd	r3, r0, [sp, #156]	@ 0x9c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c6:	902b      	str	r0, [sp, #172]	@ 0xac
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c8:	a927      	add	r1, sp, #156	@ 0x9c
 80019ca:	4806      	ldr	r0, [pc, #24]	@ (80019e4 <main+0x3c0>)
 80019cc:	f003 fde4 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 80019d0:	4606      	mov	r6, r0
 80019d2:	b158      	cbz	r0, 80019ec <main+0x3c8>
 80019d4:	b672      	cpsid	i
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <main+0x3b2>
 80019d8:	200003b4 	.word	0x200003b4
 80019dc:	20000494 	.word	0x20000494
 80019e0:	40012800 	.word	0x40012800
 80019e4:	2000036c 	.word	0x2000036c
 80019e8:	40000400 	.word	0x40000400
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_SET);
 80019ec:	4d94      	ldr	r5, [pc, #592]	@ (8001c40 <main+0x61c>)
  HAL_TIM_MspPostInit(&htim3);
 80019ee:	4895      	ldr	r0, [pc, #596]	@ (8001c44 <main+0x620>)
 80019f0:	f000 fcf6 	bl	80023e0 <HAL_TIM_MspPostInit>
  HAL_GPIO_WritePin(RST_8266_GPIO_Port, RST_8266_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2104      	movs	r1, #4
 80019f8:	4628      	mov	r0, r5
 80019fa:	f002 faae 	bl	8003f5a <HAL_GPIO_WritePin>
  HAL_ADC_Start(&hadc1);
 80019fe:	4892      	ldr	r0, [pc, #584]	@ (8001c48 <main+0x624>)
 8001a00:	f001 f8e2 	bl	8002bc8 <HAL_ADC_Start>
  ssd1306_Init();
 8001a04:	f000 f976 	bl	8001cf4 <ssd1306_Init>
  ssd1306_TestFonts();
 8001a08:	f000 fb52 	bl	80020b0 <ssd1306_TestFonts>
  HAL_TIM_Base_Start(&htim1);
 8001a0c:	488f      	ldr	r0, [pc, #572]	@ (8001c4c <main+0x628>)
 8001a0e:	f003 fc7f 	bl	8005310 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a12:	4631      	mov	r1, r6
 8001a14:	488d      	ldr	r0, [pc, #564]	@ (8001c4c <main+0x628>)
 8001a16:	f003 fd1d 	bl	8005454 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	488b      	ldr	r0, [pc, #556]	@ (8001c4c <main+0x628>)
 8001a1e:	f003 fd19 	bl	8005454 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a22:	2108      	movs	r1, #8
 8001a24:	4889      	ldr	r0, [pc, #548]	@ (8001c4c <main+0x628>)
 8001a26:	f003 fd15 	bl	8005454 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8001a2a:	4886      	ldr	r0, [pc, #536]	@ (8001c44 <main+0x620>)
 8001a2c:	f003 fc70 	bl	8005310 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a30:	4631      	mov	r1, r6
 8001a32:	4884      	ldr	r0, [pc, #528]	@ (8001c44 <main+0x620>)
 8001a34:	f003 fd0e 	bl	8005454 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)PUMP, 2);
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4985      	ldr	r1, [pc, #532]	@ (8001c50 <main+0x62c>)
 8001a3c:	4882      	ldr	r0, [pc, #520]	@ (8001c48 <main+0x624>)
 8001a3e:	f001 f971 	bl	8002d24 <HAL_ADC_Start_DMA>
  DHT_sensor livingRoom = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8001a42:	220e      	movs	r2, #14
 8001a44:	4631      	mov	r1, r6
 8001a46:	f10d 0086 	add.w	r0, sp, #134	@ 0x86
 8001a4a:	f006 f96c 	bl	8007d26 <memset>
 8001a4e:	2301      	movs	r3, #1
  ESP_UART_Init(&huart3);
 8001a50:	4880      	ldr	r0, [pc, #512]	@ (8001c54 <main+0x630>)
  DHT_sensor livingRoom = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8001a52:	f8ad 3084 	strh.w	r3, [sp, #132]	@ 0x84
 8001a56:	9520      	str	r5, [sp, #128]	@ 0x80
  ESP_UART_Init(&huart3);
 8001a58:	f7ff faee 	bl	8001038 <ESP_UART_Init>
  HAL_Delay(1000);
 8001a5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a60:	f000 ffb6 	bl	80029d0 <HAL_Delay>
  ESP_EnableMUX();
 8001a64:	f7ff fb92 	bl	800118c <ESP_EnableMUX>
  HAL_Delay(100);
 8001a68:	2064      	movs	r0, #100	@ 0x64
 8001a6a:	f000 ffb1 	bl	80029d0 <HAL_Delay>
  ESP_StartServer(9999);
 8001a6e:	f242 700f 	movw	r0, #9999	@ 0x270f
 8001a72:	f7ff fb95 	bl	80011a0 <ESP_StartServer>
  HAL_Delay(100);
 8001a76:	2064      	movs	r0, #100	@ 0x64
 8001a78:	f000 ffaa 	bl	80029d0 <HAL_Delay>
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001a7c:	4872      	ldr	r0, [pc, #456]	@ (8001c48 <main+0x624>)
 8001a7e:	f001 fa2f 	bl	8002ee0 <HAL_ADC_GetValue>
 8001a82:	4b75      	ldr	r3, [pc, #468]	@ (8001c58 <main+0x634>)
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001a84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001a88:	8018      	strh	r0, [r3, #0]
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	f002 fa4e 	bl	8003f2c <HAL_GPIO_ReadPin>
 8001a90:	4f72      	ldr	r7, [pc, #456]	@ (8001c5c <main+0x638>)
 8001a92:	b140      	cbz	r0, 8001aa6 <main+0x482>
	    	if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001a94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f002 fa47 	bl	8003f2c <HAL_GPIO_ReadPin>
 8001a9e:	b110      	cbz	r0, 8001aa6 <main+0x482>
	    	Period_-=10;
 8001aa0:	883b      	ldrh	r3, [r7, #0]
 8001aa2:	3b0a      	subs	r3, #10
 8001aa4:	803b      	strh	r3, [r7, #0]
	    if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001aa6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aaa:	4628      	mov	r0, r5
 8001aac:	f002 fa3e 	bl	8003f2c <HAL_GPIO_ReadPin>
 8001ab0:	b150      	cbz	r0, 8001ac8 <main+0x4a4>
	        if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001ab2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f002 fa38 	bl	8003f2c <HAL_GPIO_ReadPin>
 8001abc:	b120      	cbz	r0, 8001ac8 <main+0x4a4>
	    	    	Period_--;
 8001abe:	883b      	ldrh	r3, [r7, #0]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	803b      	strh	r3, [r7, #0]
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	63de      	str	r6, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001ac8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001acc:	4628      	mov	r0, r5
 8001ace:	f002 fa2d 	bl	8003f2c <HAL_GPIO_ReadPin>
 8001ad2:	b158      	cbz	r0, 8001aec <main+0x4c8>
	    	 if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001ad4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ad8:	4628      	mov	r0, r5
 8001ada:	f002 fa27 	bl	8003f2c <HAL_GPIO_ReadPin>
 8001ade:	b128      	cbz	r0, 8001aec <main+0x4c8>
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001ae0:	220a      	movs	r2, #10
	    		    	Period_++;
 8001ae2:	883b      	ldrh	r3, [r7, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	803b      	strh	r3, [r7, #0]
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	63da      	str	r2, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001aec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001af0:	4628      	mov	r0, r5
 8001af2:	f002 fa1b 	bl	8003f2c <HAL_GPIO_ReadPin>
 8001af6:	b140      	cbz	r0, 8001b0a <main+0x4e6>
		    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001af8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001afc:	4628      	mov	r0, r5
 8001afe:	f002 fa15 	bl	8003f2c <HAL_GPIO_ReadPin>
 8001b02:	b110      	cbz	r0, 8001b0a <main+0x4e6>
		    	Period_+=10;
 8001b04:	883b      	ldrh	r3, [r7, #0]
 8001b06:	330a      	adds	r3, #10
 8001b08:	803b      	strh	r3, [r7, #0]
		    __HAL_TIM_SET_PRESCALER(&htim1, Period_);
 8001b0a:	f8df a150 	ldr.w	sl, [pc, #336]	@ 8001c5c <main+0x638>
	    DHT_data d = DHT_getData(&livingRoom);
 8001b0e:	a920      	add	r1, sp, #128	@ 0x80
 8001b10:	a81c      	add	r0, sp, #112	@ 0x70
 8001b12:	f7ff fba5 	bl	8001260 <DHT_getData>
		    __HAL_TIM_SET_PRESCALER(&htim1, Period_);
 8001b16:	f8ba 3000 	ldrh.w	r3, [sl]
 8001b1a:	6822      	ldr	r2, [r4, #0]
	    DHT_data d = DHT_getData(&livingRoom);
 8001b1c:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 8001b20:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
		    __HAL_TIM_SET_PRESCALER(&htim1, Period_);
 8001b24:	6293      	str	r3, [r2, #40]	@ 0x28
		  __HAL_TIM_SET_COMPARE(&htim3, 1, Period_);
 8001b26:	4a47      	ldr	r2, [pc, #284]	@ (8001c44 <main+0x620>)
	    ssd1306_Fill(Black);
 8001b28:	2000      	movs	r0, #0
		  __HAL_TIM_SET_COMPARE(&htim3, 1, Period_);
 8001b2a:	6812      	ldr	r2, [r2, #0]
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001b2c:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8001c60 <main+0x63c>
		  __HAL_TIM_SET_COMPARE(&htim3, 1, Period_);
 8001b30:	6413      	str	r3, [r2, #64]	@ 0x40
	    ssd1306_Fill(Black);
 8001b32:	f000 f94d 	bl	8001dd0 <ssd1306_Fill>
	    ssd1306_SetCursor(0, 0);
 8001b36:	2100      	movs	r1, #0
 8001b38:	4608      	mov	r0, r1
 8001b3a:	f000 faa1 	bl	8002080 <ssd1306_SetCursor>
	    sprintf(msg, "T:%dC",(uint8_t)d.temp);
 8001b3e:	4648      	mov	r0, r9
 8001b40:	f7ff f9d4 	bl	8000eec <__aeabi_f2uiz>
 8001b44:	4947      	ldr	r1, [pc, #284]	@ (8001c64 <main+0x640>)
 8001b46:	b2c2      	uxtb	r2, r0
 8001b48:	a827      	add	r0, sp, #156	@ 0x9c
 8001b4a:	f006 f86f 	bl	8007c2c <siprintf>
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001b4e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001b52:	2301      	movs	r3, #1
 8001b54:	a827      	add	r0, sp, #156	@ 0x9c
 8001b56:	f000 fa6d 	bl	8002034 <ssd1306_WriteString>
	    ssd1306_SetCursor(64, 0);
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2040      	movs	r0, #64	@ 0x40
 8001b5e:	f000 fa8f 	bl	8002080 <ssd1306_SetCursor>
	    sprintf(msg, "H:%d%%",(uint8_t)d.hum);
 8001b62:	4658      	mov	r0, fp
 8001b64:	f7ff f9c2 	bl	8000eec <__aeabi_f2uiz>
 8001b68:	493f      	ldr	r1, [pc, #252]	@ (8001c68 <main+0x644>)
 8001b6a:	b2c2      	uxtb	r2, r0
 8001b6c:	a827      	add	r0, sp, #156	@ 0x9c
 8001b6e:	f006 f85d 	bl	8007c2c <siprintf>
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001b72:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001b76:	2301      	movs	r3, #1
 8001b78:	a827      	add	r0, sp, #156	@ 0x9c
 8001b7a:	f000 fa5b 	bl	8002034 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 18);
 8001b7e:	2112      	movs	r1, #18
 8001b80:	2000      	movs	r0, #0
 8001b82:	f000 fa7d 	bl	8002080 <ssd1306_SetCursor>
	    sprintf(msg, "Duty:%d", Period_);
 8001b86:	f8ba 2000 	ldrh.w	r2, [sl]
 8001b8a:	4938      	ldr	r1, [pc, #224]	@ (8001c6c <main+0x648>)
 8001b8c:	a827      	add	r0, sp, #156	@ 0x9c
 8001b8e:	f006 f84d 	bl	8007c2c <siprintf>
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001b92:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001b96:	2301      	movs	r3, #1
	    sprintf(msg, "U:%d\r\n", PUMP[0]);
 8001b98:	4f2d      	ldr	r7, [pc, #180]	@ (8001c50 <main+0x62c>)
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001b9a:	a827      	add	r0, sp, #156	@ 0x9c
 8001b9c:	f000 fa4a 	bl	8002034 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 36);
 8001ba0:	2124      	movs	r1, #36	@ 0x24
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 fa6c 	bl	8002080 <ssd1306_SetCursor>
	    sprintf(msg, "U:%d\r\n", PUMP[0]);
 8001ba8:	883a      	ldrh	r2, [r7, #0]
 8001baa:	4931      	ldr	r1, [pc, #196]	@ (8001c70 <main+0x64c>)
 8001bac:	a827      	add	r0, sp, #156	@ 0x9c
 8001bae:	f006 f83d 	bl	8007c2c <siprintf>
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001bb2:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	a827      	add	r0, sp, #156	@ 0x9c
 8001bba:	f000 fa3b 	bl	8002034 <ssd1306_WriteString>
	    ssd1306_SetCursor(64, 36);
 8001bbe:	2124      	movs	r1, #36	@ 0x24
 8001bc0:	2040      	movs	r0, #64	@ 0x40
 8001bc2:	f000 fa5d 	bl	8002080 <ssd1306_SetCursor>
	    sprintf(msg, "I:%d\r\n", PUMP[1]);
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	492a      	ldr	r1, [pc, #168]	@ (8001c74 <main+0x650>)
 8001bca:	a827      	add	r0, sp, #156	@ 0x9c
 8001bcc:	f006 f82e 	bl	8007c2c <siprintf>
	    ssd1306_WriteString(msg, Font_11x18, White);
 8001bd0:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	a827      	add	r0, sp, #156	@ 0x9c
 8001bd8:	f000 fa2c 	bl	8002034 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8001bdc:	f000 f91a 	bl	8001e14 <ssd1306_UpdateScreen>
	    sprintf(msg, "DATA:T:%dC,H:%d%,Duty:%d,U:%d,I:%d\r\n", d.temp,d.hum,Period_,PUMP[0],PUMP[1]);
 8001be0:	4648      	mov	r0, r9
 8001be2:	f7fe fcd5 	bl	8000590 <__aeabi_f2d>
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	4680      	mov	r8, r0
 8001bea:	9304      	str	r3, [sp, #16]
 8001bec:	883b      	ldrh	r3, [r7, #0]
 8001bee:	4658      	mov	r0, fp
 8001bf0:	9303      	str	r3, [sp, #12]
 8001bf2:	f8ba 3000 	ldrh.w	r3, [sl]
 8001bf6:	4689      	mov	r9, r1
 8001bf8:	9302      	str	r3, [sp, #8]
 8001bfa:	f7fe fcc9 	bl	8000590 <__aeabi_f2d>
 8001bfe:	4642      	mov	r2, r8
 8001c00:	464b      	mov	r3, r9
 8001c02:	e9cd 0100 	strd	r0, r1, [sp]
 8001c06:	491c      	ldr	r1, [pc, #112]	@ (8001c78 <main+0x654>)
 8001c08:	a827      	add	r0, sp, #156	@ 0x9c
 8001c0a:	f006 f80f 	bl	8007c2c <siprintf>
	    ESP_SendTCP(0,msg);
 8001c0e:	a927      	add	r1, sp, #156	@ 0x9c
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff f9d9 	bl	8000fc8 <ESP_SendTCP>
	    HAL_Delay(1000);
 8001c16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c1a:	f000 fed9 	bl	80029d0 <HAL_Delay>
	    WiFiInfo=ESP_CheckWiFi();
 8001c1e:	a806      	add	r0, sp, #24
 8001c20:	f7ff fa18 	bl	8001054 <ESP_CheckWiFi>
 8001c24:	4a15      	ldr	r2, [pc, #84]	@ (8001c7c <main+0x658>)
 8001c26:	ab06      	add	r3, sp, #24
 8001c28:	a913      	add	r1, sp, #76	@ 0x4c
 8001c2a:	f853 0b04 	ldr.w	r0, [r3], #4
 8001c2e:	428b      	cmp	r3, r1
 8001c30:	f842 0b04 	str.w	r0, [r2], #4
 8001c34:	d1f9      	bne.n	8001c2a <main+0x606>
 8001c36:	781b      	ldrb	r3, [r3, #0]
	    HAL_Delay(1000);
 8001c38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
	    WiFiInfo=ESP_CheckWiFi();
 8001c3c:	7013      	strb	r3, [r2, #0]
	    HAL_Delay(1000);
 8001c3e:	e71b      	b.n	8001a78 <main+0x454>
 8001c40:	40010c00 	.word	0x40010c00
 8001c44:	2000036c 	.word	0x2000036c
 8001c48:	200004c4 	.word	0x200004c4
 8001c4c:	200003b4 	.word	0x200003b4
 8001c50:	2000024e 	.word	0x2000024e
 8001c54:	200002dc 	.word	0x200002dc
 8001c58:	20000252 	.word	0x20000252
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000014 	.word	0x20000014
 8001c64:	0800b5d4 	.word	0x0800b5d4
 8001c68:	0800b5da 	.word	0x0800b5da
 8001c6c:	0800b5e1 	.word	0x0800b5e1
 8001c70:	0800b5e9 	.word	0x0800b5e9
 8001c74:	0800b60e 	.word	0x0800b60e
 8001c78:	0800b5f0 	.word	0x0800b5f0
 8001c7c:	20000218 	.word	0x20000218

08001c80 <Error_Handler>:
 8001c80:	b672      	cpsid	i
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <Error_Handler+0x2>

08001c84 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af04      	add	r7, sp, #16
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	1dfb      	adds	r3, r7, #7
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	2200      	movs	r2, #0
 8001cac:	2178      	movs	r1, #120	@ 0x78
 8001cae:	4803      	ldr	r0, [pc, #12]	@ (8001cbc <ssd1306_WriteCommand+0x2c>)
 8001cb0:	f002 fab0 	bl	8004214 <HAL_I2C_Mem_Write>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200003fc 	.word	0x200003fc

08001cc0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	2240      	movs	r2, #64	@ 0x40
 8001cde:	2178      	movs	r1, #120	@ 0x78
 8001ce0:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <ssd1306_WriteData+0x30>)
 8001ce2:	f002 fa97 	bl	8004214 <HAL_I2C_Mem_Write>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200003fc 	.word	0x200003fc

08001cf4 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001cf8:	f7ff ffc4 	bl	8001c84 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001cfc:	2064      	movs	r0, #100	@ 0x64
 8001cfe:	f000 fe67 	bl	80029d0 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001d02:	20ae      	movs	r0, #174	@ 0xae
 8001d04:	f7ff ffc4 	bl	8001c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001d08:	2020      	movs	r0, #32
 8001d0a:	f7ff ffc1 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff ffbe 	bl	8001c90 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d14:	20b0      	movs	r0, #176	@ 0xb0
 8001d16:	f7ff ffbb 	bl	8001c90 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d1a:	20c8      	movs	r0, #200	@ 0xc8
 8001d1c:	f7ff ffb8 	bl	8001c90 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff ffb5 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d26:	2010      	movs	r0, #16
 8001d28:	f7ff ffb2 	bl	8001c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d2c:	2040      	movs	r0, #64	@ 0x40
 8001d2e:	f7ff ffaf 	bl	8001c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001d32:	2081      	movs	r0, #129	@ 0x81
 8001d34:	f7ff ffac 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001d38:	20ff      	movs	r0, #255	@ 0xff
 8001d3a:	f7ff ffa9 	bl	8001c90 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d3e:	20a1      	movs	r0, #161	@ 0xa1
 8001d40:	f7ff ffa6 	bl	8001c90 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d44:	20a6      	movs	r0, #166	@ 0xa6
 8001d46:	f7ff ffa3 	bl	8001c90 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d4a:	20a8      	movs	r0, #168	@ 0xa8
 8001d4c:	f7ff ffa0 	bl	8001c90 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d50:	203f      	movs	r0, #63	@ 0x3f
 8001d52:	f7ff ff9d 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d56:	20a4      	movs	r0, #164	@ 0xa4
 8001d58:	f7ff ff9a 	bl	8001c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d5c:	20d3      	movs	r0, #211	@ 0xd3
 8001d5e:	f7ff ff97 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff ff94 	bl	8001c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d68:	20d5      	movs	r0, #213	@ 0xd5
 8001d6a:	f7ff ff91 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d6e:	20f0      	movs	r0, #240	@ 0xf0
 8001d70:	f7ff ff8e 	bl	8001c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d74:	20d9      	movs	r0, #217	@ 0xd9
 8001d76:	f7ff ff8b 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d7a:	2022      	movs	r0, #34	@ 0x22
 8001d7c:	f7ff ff88 	bl	8001c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d80:	20da      	movs	r0, #218	@ 0xda
 8001d82:	f7ff ff85 	bl	8001c90 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001d86:	2012      	movs	r0, #18
 8001d88:	f7ff ff82 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001d8c:	20db      	movs	r0, #219	@ 0xdb
 8001d8e:	f7ff ff7f 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d92:	2020      	movs	r0, #32
 8001d94:	f7ff ff7c 	bl	8001c90 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001d98:	208d      	movs	r0, #141	@ 0x8d
 8001d9a:	f7ff ff79 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001d9e:	2014      	movs	r0, #20
 8001da0:	f7ff ff76 	bl	8001c90 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001da4:	20af      	movs	r0, #175	@ 0xaf
 8001da6:	f7ff ff73 	bl	8001c90 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f000 f810 	bl	8001dd0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001db0:	f000 f830 	bl	8001e14 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <ssd1306_Init+0xd8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dba:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <ssd1306_Init+0xd8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001dc0:	4b02      	ldr	r3, [pc, #8]	@ (8001dcc <ssd1306_Init+0xd8>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	715a      	strb	r2, [r3, #5]
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200008f4 	.word	0x200008f4

08001dd0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e00d      	b.n	8001dfc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <ssd1306_Fill+0x1a>
 8001de6:	2100      	movs	r1, #0
 8001de8:	e000      	b.n	8001dec <ssd1306_Fill+0x1c>
 8001dea:	21ff      	movs	r1, #255	@ 0xff
 8001dec:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <ssd1306_Fill+0x40>)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	460a      	mov	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e02:	d3ed      	bcc.n	8001de0 <ssd1306_Fill+0x10>
    }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	200004f4 	.word	0x200004f4

08001e14 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	71fb      	strb	r3, [r7, #7]
 8001e1e:	e016      	b.n	8001e4e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	3b50      	subs	r3, #80	@ 0x50
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff32 	bl	8001c90 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff ff2f 	bl	8001c90 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001e32:	2010      	movs	r0, #16
 8001e34:	f7ff ff2c 	bl	8001c90 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	01db      	lsls	r3, r3, #7
 8001e3c:	4a08      	ldr	r2, [pc, #32]	@ (8001e60 <ssd1306_UpdateScreen+0x4c>)
 8001e3e:	4413      	add	r3, r2
 8001e40:	2180      	movs	r1, #128	@ 0x80
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff3c 	bl	8001cc0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	2b07      	cmp	r3, #7
 8001e52:	d9e5      	bls.n	8001e20 <ssd1306_UpdateScreen+0xc>
    }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200004f4 	.word	0x200004f4

08001e64 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	71bb      	strb	r3, [r7, #6]
 8001e72:	4613      	mov	r3, r2
 8001e74:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db48      	blt.n	8001f10 <ssd1306_DrawPixel+0xac>
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e82:	d845      	bhi.n	8001f10 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001e84:	4b25      	ldr	r3, [pc, #148]	@ (8001f1c <ssd1306_DrawPixel+0xb8>)
 8001e86:	791b      	ldrb	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001e8c:	797b      	ldrb	r3, [r7, #5]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001e9a:	797b      	ldrb	r3, [r7, #5]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d11a      	bne.n	8001ed6 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ea0:	79fa      	ldrb	r2, [r7, #7]
 8001ea2:	79bb      	ldrb	r3, [r7, #6]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	b2d8      	uxtb	r0, r3
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	01db      	lsls	r3, r3, #7
 8001eac:	4413      	add	r3, r2
 8001eae:	4a1c      	ldr	r2, [pc, #112]	@ (8001f20 <ssd1306_DrawPixel+0xbc>)
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	b25a      	sxtb	r2, r3
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	b259      	sxtb	r1, r3
 8001ec6:	79fa      	ldrb	r2, [r7, #7]
 8001ec8:	4603      	mov	r3, r0
 8001eca:	01db      	lsls	r3, r3, #7
 8001ecc:	4413      	add	r3, r2
 8001ece:	b2c9      	uxtb	r1, r1
 8001ed0:	4a13      	ldr	r2, [pc, #76]	@ (8001f20 <ssd1306_DrawPixel+0xbc>)
 8001ed2:	54d1      	strb	r1, [r2, r3]
 8001ed4:	e01d      	b.n	8001f12 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ed6:	79fa      	ldrb	r2, [r7, #7]
 8001ed8:	79bb      	ldrb	r3, [r7, #6]
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	b2d8      	uxtb	r0, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	01db      	lsls	r3, r3, #7
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f20 <ssd1306_DrawPixel+0xbc>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	b25a      	sxtb	r2, r3
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	b25b      	sxtb	r3, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	b25b      	sxtb	r3, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	b259      	sxtb	r1, r3
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	4603      	mov	r3, r0
 8001f04:	01db      	lsls	r3, r3, #7
 8001f06:	4413      	add	r3, r2
 8001f08:	b2c9      	uxtb	r1, r1
 8001f0a:	4a05      	ldr	r2, [pc, #20]	@ (8001f20 <ssd1306_DrawPixel+0xbc>)
 8001f0c:	54d1      	strb	r1, [r2, r3]
 8001f0e:	e000      	b.n	8001f12 <ssd1306_DrawPixel+0xae>
        return;
 8001f10:	bf00      	nop
    }
}
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	200008f4 	.word	0x200008f4
 8001f20:	200004f4 	.word	0x200004f4

08001f24 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b089      	sub	sp, #36	@ 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	1d38      	adds	r0, r7, #4
 8001f2e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f32:	461a      	mov	r2, r3
 8001f34:	4623      	mov	r3, r4
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	2b1f      	cmp	r3, #31
 8001f40:	d902      	bls.n	8001f48 <ssd1306_WriteChar+0x24>
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f46:	d901      	bls.n	8001f4c <ssd1306_WriteChar+0x28>
        return 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e06c      	b.n	8002026 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f4c:	4b38      	ldr	r3, [pc, #224]	@ (8002030 <ssd1306_WriteChar+0x10c>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	793b      	ldrb	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	2b80      	cmp	r3, #128	@ 0x80
 8001f58:	dc06      	bgt.n	8001f68 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001f5a:	4b35      	ldr	r3, [pc, #212]	@ (8002030 <ssd1306_WriteChar+0x10c>)
 8001f5c:	885b      	ldrh	r3, [r3, #2]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	797b      	ldrb	r3, [r7, #5]
 8001f62:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f64:	2b40      	cmp	r3, #64	@ 0x40
 8001f66:	dd01      	ble.n	8001f6c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e05c      	b.n	8002026 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	e04c      	b.n	800200c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3b20      	subs	r3, #32
 8001f78:	7979      	ldrb	r1, [r7, #5]
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	4619      	mov	r1, r3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	440b      	add	r3, r1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	e034      	b.n	8001ffc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d012      	beq.n	8001fc8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001fa2:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <ssd1306_WriteChar+0x10c>)
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	b2d8      	uxtb	r0, r3
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <ssd1306_WriteChar+0x10c>)
 8001fb2:	885b      	ldrh	r3, [r3, #2]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	7bba      	ldrb	r2, [r7, #14]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7ff ff4f 	bl	8001e64 <ssd1306_DrawPixel>
 8001fc6:	e016      	b.n	8001ff6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <ssd1306_WriteChar+0x10c>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b2d8      	uxtb	r0, r3
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <ssd1306_WriteChar+0x10c>)
 8001fd8:	885b      	ldrh	r3, [r3, #2]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b2d9      	uxtb	r1, r3
 8001fe4:	7bbb      	ldrb	r3, [r7, #14]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf0c      	ite	eq
 8001fea:	2301      	moveq	r3, #1
 8001fec:	2300      	movne	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f7ff ff37 	bl	8001e64 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	793b      	ldrb	r3, [r7, #4]
 8001ffe:	461a      	mov	r2, r3
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	4293      	cmp	r3, r2
 8002004:	d3c5      	bcc.n	8001f92 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	797b      	ldrb	r3, [r7, #5]
 800200e:	461a      	mov	r2, r3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4293      	cmp	r3, r2
 8002014:	d3ad      	bcc.n	8001f72 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <ssd1306_WriteChar+0x10c>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	793a      	ldrb	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <ssd1306_WriteChar+0x10c>)
 8002022:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop
 8002030:	200008f4 	.word	0x200008f4

08002034 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	1d38      	adds	r0, r7, #4
 800203e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002042:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002044:	e012      	b.n	800206c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	7818      	ldrb	r0, [r3, #0]
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	1d3a      	adds	r2, r7, #4
 800204e:	ca06      	ldmia	r2, {r1, r2}
 8002050:	f7ff ff68 	bl	8001f24 <ssd1306_WriteChar>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d002      	beq.n	8002066 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	e008      	b.n	8002078 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3301      	adds	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e8      	bne.n	8002046 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	781b      	ldrb	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b05      	ldr	r3, [pc, #20]	@ (80020ac <ssd1306_SetCursor+0x2c>)
 8002096:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b03      	ldr	r3, [pc, #12]	@ (80020ac <ssd1306_SetCursor+0x2c>)
 800209e:	805a      	strh	r2, [r3, #2]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200008f4 	.word	0x200008f4

080020b0 <ssd1306_TestFonts>:
    } while((end - start) < 8000);
   
    HAL_Delay(1000);
}

void ssd1306_TestFonts() {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80020b4:	2000      	movs	r0, #0
 80020b6:	f7ff fe8b 	bl	8001dd0 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 80020ba:	2100      	movs	r1, #0
 80020bc:	2002      	movs	r0, #2
 80020be:	f7ff ffdf 	bl	8002080 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 80020c2:	4a14      	ldr	r2, [pc, #80]	@ (8002114 <ssd1306_TestFonts+0x64>)
 80020c4:	2301      	movs	r3, #1
 80020c6:	ca06      	ldmia	r2, {r1, r2}
 80020c8:	4813      	ldr	r0, [pc, #76]	@ (8002118 <ssd1306_TestFonts+0x68>)
 80020ca:	f7ff ffb3 	bl	8002034 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 80020ce:	211a      	movs	r1, #26
 80020d0:	2002      	movs	r0, #2
 80020d2:	f7ff ffd5 	bl	8002080 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80020d6:	4a11      	ldr	r2, [pc, #68]	@ (800211c <ssd1306_TestFonts+0x6c>)
 80020d8:	2301      	movs	r3, #1
 80020da:	ca06      	ldmia	r2, {r1, r2}
 80020dc:	4810      	ldr	r0, [pc, #64]	@ (8002120 <ssd1306_TestFonts+0x70>)
 80020de:	f7ff ffa9 	bl	8002034 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 80020e2:	212c      	movs	r1, #44	@ 0x2c
 80020e4:	2002      	movs	r0, #2
 80020e6:	f7ff ffcb 	bl	8002080 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80020ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002124 <ssd1306_TestFonts+0x74>)
 80020ec:	2301      	movs	r3, #1
 80020ee:	ca06      	ldmia	r2, {r1, r2}
 80020f0:	480d      	ldr	r0, [pc, #52]	@ (8002128 <ssd1306_TestFonts+0x78>)
 80020f2:	f7ff ff9f 	bl	8002034 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 80020f6:	2136      	movs	r1, #54	@ 0x36
 80020f8:	2002      	movs	r0, #2
 80020fa:	f7ff ffc1 	bl	8002080 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80020fe:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <ssd1306_TestFonts+0x7c>)
 8002100:	2301      	movs	r3, #1
 8002102:	ca06      	ldmia	r2, {r1, r2}
 8002104:	480a      	ldr	r0, [pc, #40]	@ (8002130 <ssd1306_TestFonts+0x80>)
 8002106:	f7ff ff95 	bl	8002034 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800210a:	f7ff fe83 	bl	8001e14 <ssd1306_UpdateScreen>
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2000001c 	.word	0x2000001c
 8002118:	0800b584 	.word	0x0800b584
 800211c:	20000014 	.word	0x20000014
 8002120:	0800b590 	.word	0x0800b590
 8002124:	2000000c 	.word	0x2000000c
 8002128:	0800b59c 	.word	0x0800b59c
 800212c:	20000004 	.word	0x20000004
 8002130:	0800b5a8 	.word	0x0800b5a8

08002134 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_MspInit+0x5c>)
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	4a14      	ldr	r2, [pc, #80]	@ (8002190 <HAL_MspInit+0x5c>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6193      	str	r3, [r2, #24]
 8002146:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_MspInit+0x5c>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <HAL_MspInit+0x5c>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a0e      	ldr	r2, [pc, #56]	@ (8002190 <HAL_MspInit+0x5c>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <HAL_MspInit+0x5c>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_MspInit+0x60>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <HAL_MspInit+0x60>)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000
 8002194:	40010000 	.word	0x40010000

08002198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0318 	add.w	r3, r7, #24
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a44      	ldr	r2, [pc, #272]	@ (80022c4 <HAL_ADC_MspInit+0x12c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d152      	bne.n	800225e <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021b8:	4b43      	ldr	r3, [pc, #268]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a42      	ldr	r2, [pc, #264]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 80021be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b40      	ldr	r3, [pc, #256]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d0:	4b3d      	ldr	r3, [pc, #244]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a3c      	ldr	r2, [pc, #240]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b3a      	ldr	r3, [pc, #232]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021e8:	2330      	movs	r3, #48	@ 0x30
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ec:	2303      	movs	r3, #3
 80021ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f107 0318 	add.w	r3, r7, #24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4835      	ldr	r0, [pc, #212]	@ (80022cc <HAL_ADC_MspInit+0x134>)
 80021f8:	f001 fd14 	bl	8003c24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80021fc:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 80021fe:	4a35      	ldr	r2, [pc, #212]	@ (80022d4 <HAL_ADC_MspInit+0x13c>)
 8002200:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002202:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002208:	4b31      	ldr	r3, [pc, #196]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800220e:	4b30      	ldr	r3, [pc, #192]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 8002210:	2280      	movs	r2, #128	@ 0x80
 8002212:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002214:	4b2e      	ldr	r3, [pc, #184]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 8002216:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800221a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800221c:	4b2c      	ldr	r3, [pc, #176]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 800221e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002222:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002224:	4b2a      	ldr	r3, [pc, #168]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 8002226:	2220      	movs	r2, #32
 8002228:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800222a:	4b29      	ldr	r3, [pc, #164]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 800222c:	2200      	movs	r2, #0
 800222e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002230:	4827      	ldr	r0, [pc, #156]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 8002232:	f001 fa55 	bl	80036e0 <HAL_DMA_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800223c:	f7ff fd20 	bl	8001c80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a23      	ldr	r2, [pc, #140]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 8002244:	621a      	str	r2, [r3, #32]
 8002246:	4a22      	ldr	r2, [pc, #136]	@ (80022d0 <HAL_ADC_MspInit+0x138>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	2012      	movs	r0, #18
 8002252:	f001 fa0e 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002256:	2012      	movs	r0, #18
 8002258:	f001 fa27 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800225c:	e02e      	b.n	80022bc <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1d      	ldr	r2, [pc, #116]	@ (80022d8 <HAL_ADC_MspInit+0x140>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d129      	bne.n	80022bc <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a16      	ldr	r2, [pc, #88]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 800226e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a10      	ldr	r2, [pc, #64]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <HAL_ADC_MspInit+0x130>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002298:	230e      	movs	r3, #14
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800229c:	2303      	movs	r3, #3
 800229e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	4619      	mov	r1, r3
 80022a6:	4809      	ldr	r0, [pc, #36]	@ (80022cc <HAL_ADC_MspInit+0x134>)
 80022a8:	f001 fcbc 	bl	8003c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2012      	movs	r0, #18
 80022b2:	f001 f9de 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80022b6:	2012      	movs	r0, #18
 80022b8:	f001 f9f7 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 80022bc:	bf00      	nop
 80022be:	3728      	adds	r7, #40	@ 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40012400 	.word	0x40012400
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010800 	.word	0x40010800
 80022d0:	20000450 	.word	0x20000450
 80022d4:	40020008 	.word	0x40020008
 80022d8:	40012800 	.word	0x40012800

080022dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	@ 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1d      	ldr	r2, [pc, #116]	@ (800236c <HAL_I2C_MspInit+0x90>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d132      	bne.n	8002362 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <HAL_I2C_MspInit+0x94>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a1b      	ldr	r2, [pc, #108]	@ (8002370 <HAL_I2C_MspInit+0x94>)
 8002302:	f043 0308 	orr.w	r3, r3, #8
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_I2C_MspInit+0x94>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002314:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231a:	2312      	movs	r3, #18
 800231c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4619      	mov	r1, r3
 8002328:	4812      	ldr	r0, [pc, #72]	@ (8002374 <HAL_I2C_MspInit+0x98>)
 800232a:	f001 fc7b 	bl	8003c24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_I2C_MspInit+0x9c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
 8002334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002336:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
 8002344:	4a0c      	ldr	r2, [pc, #48]	@ (8002378 <HAL_I2C_MspInit+0x9c>)
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800234a:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <HAL_I2C_MspInit+0x94>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a08      	ldr	r2, [pc, #32]	@ (8002370 <HAL_I2C_MspInit+0x94>)
 8002350:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002354:	61d3      	str	r3, [r2, #28]
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_I2C_MspInit+0x94>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	@ 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40005400 	.word	0x40005400
 8002370:	40021000 	.word	0x40021000
 8002374:	40010c00 	.word	0x40010c00
 8002378:	40010000 	.word	0x40010000

0800237c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <HAL_TIM_Base_MspInit+0x58>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d10c      	bne.n	80023a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238e:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <HAL_TIM_Base_MspInit+0x5c>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	4a11      	ldr	r2, [pc, #68]	@ (80023d8 <HAL_TIM_Base_MspInit+0x5c>)
 8002394:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002398:	6193      	str	r3, [r2, #24]
 800239a:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <HAL_TIM_Base_MspInit+0x5c>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023a6:	e010      	b.n	80023ca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0b      	ldr	r2, [pc, #44]	@ (80023dc <HAL_TIM_Base_MspInit+0x60>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10b      	bne.n	80023ca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_TIM_Base_MspInit+0x5c>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <HAL_TIM_Base_MspInit+0x5c>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	61d3      	str	r3, [r2, #28]
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_TIM_Base_MspInit+0x5c>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40000400 	.word	0x40000400

080023e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002478 <HAL_TIM_MspPostInit+0x98>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d119      	bne.n	8002434 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <HAL_TIM_MspPostInit+0x9c>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a1d      	ldr	r2, [pc, #116]	@ (800247c <HAL_TIM_MspPostInit+0x9c>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <HAL_TIM_MspPostInit+0x9c>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|BEEP_Pin;
 8002418:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800241c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2302      	movs	r3, #2
 8002424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4619      	mov	r1, r3
 800242c:	4814      	ldr	r0, [pc, #80]	@ (8002480 <HAL_TIM_MspPostInit+0xa0>)
 800242e:	f001 fbf9 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002432:	e01c      	b.n	800246e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <HAL_TIM_MspPostInit+0xa4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d117      	bne.n	800246e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <HAL_TIM_MspPostInit+0x9c>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	4a0e      	ldr	r2, [pc, #56]	@ (800247c <HAL_TIM_MspPostInit+0x9c>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6193      	str	r3, [r2, #24]
 800244a:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <HAL_TIM_MspPostInit+0x9c>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 8002456:	2340      	movs	r3, #64	@ 0x40
 8002458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2302      	movs	r3, #2
 8002460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	@ (8002480 <HAL_TIM_MspPostInit+0xa0>)
 800246a:	f001 fbdb 	bl	8003c24 <HAL_GPIO_Init>
}
 800246e:	bf00      	nop
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40021000 	.word	0x40021000
 8002480:	40010800 	.word	0x40010800
 8002484:	40000400 	.word	0x40000400

08002488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	@ 0x30
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a69      	ldr	r2, [pc, #420]	@ (8002648 <HAL_UART_MspInit+0x1c0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d13e      	bne.n	8002526 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a8:	4b68      	ldr	r3, [pc, #416]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a67      	ldr	r2, [pc, #412]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 80024ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b65      	ldr	r3, [pc, #404]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c0:	4b62      	ldr	r3, [pc, #392]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a61      	ldr	r2, [pc, #388]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b5f      	ldr	r3, [pc, #380]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024d8:	2340      	movs	r3, #64	@ 0x40
 80024da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e0:	2303      	movs	r3, #3
 80024e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 031c 	add.w	r3, r7, #28
 80024e8:	4619      	mov	r1, r3
 80024ea:	4859      	ldr	r0, [pc, #356]	@ (8002650 <HAL_UART_MspInit+0x1c8>)
 80024ec:	f001 fb9a 	bl	8003c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	4619      	mov	r1, r3
 8002502:	4853      	ldr	r0, [pc, #332]	@ (8002650 <HAL_UART_MspInit+0x1c8>)
 8002504:	f001 fb8e 	bl	8003c24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002508:	4b52      	ldr	r3, [pc, #328]	@ (8002654 <HAL_UART_MspInit+0x1cc>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800250e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002510:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800251e:	4a4d      	ldr	r2, [pc, #308]	@ (8002654 <HAL_UART_MspInit+0x1cc>)
 8002520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002522:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002524:	e08b      	b.n	800263e <HAL_UART_MspInit+0x1b6>
  else if(huart->Instance==USART3)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4b      	ldr	r2, [pc, #300]	@ (8002658 <HAL_UART_MspInit+0x1d0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	f040 8086 	bne.w	800263e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002532:	4b46      	ldr	r3, [pc, #280]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a45      	ldr	r2, [pc, #276]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 8002538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800253c:	61d3      	str	r3, [r2, #28]
 800253e:	4b43      	ldr	r3, [pc, #268]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	4b40      	ldr	r3, [pc, #256]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4a3f      	ldr	r2, [pc, #252]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 8002550:	f043 0308 	orr.w	r3, r3, #8
 8002554:	6193      	str	r3, [r2, #24]
 8002556:	4b3d      	ldr	r3, [pc, #244]	@ (800264c <HAL_UART_MspInit+0x1c4>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4619      	mov	r1, r3
 8002576:	4836      	ldr	r0, [pc, #216]	@ (8002650 <HAL_UART_MspInit+0x1c8>)
 8002578:	f001 fb54 	bl	8003c24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800257c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	4619      	mov	r1, r3
 8002590:	482f      	ldr	r0, [pc, #188]	@ (8002650 <HAL_UART_MspInit+0x1c8>)
 8002592:	f001 fb47 	bl	8003c24 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002596:	4b31      	ldr	r3, [pc, #196]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 8002598:	4a31      	ldr	r2, [pc, #196]	@ (8002660 <HAL_UART_MspInit+0x1d8>)
 800259a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800259c:	4b2f      	ldr	r3, [pc, #188]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 800259e:	2210      	movs	r2, #16
 80025a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a2:	4b2e      	ldr	r3, [pc, #184]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025a8:	4b2c      	ldr	r3, [pc, #176]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 80025aa:	2280      	movs	r2, #128	@ 0x80
 80025ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025ae:	4b2b      	ldr	r3, [pc, #172]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025b4:	4b29      	ldr	r3, [pc, #164]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80025ba:	4b28      	ldr	r3, [pc, #160]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025c0:	4b26      	ldr	r3, [pc, #152]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80025c6:	4825      	ldr	r0, [pc, #148]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 80025c8:	f001 f88a 	bl	80036e0 <HAL_DMA_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 80025d2:	f7ff fb55 	bl	8001c80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a20      	ldr	r2, [pc, #128]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 80025da:	639a      	str	r2, [r3, #56]	@ 0x38
 80025dc:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <HAL_UART_MspInit+0x1d4>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 80025e4:	4a20      	ldr	r2, [pc, #128]	@ (8002668 <HAL_UART_MspInit+0x1e0>)
 80025e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 80025f6:	2280      	movs	r2, #128	@ 0x80
 80025f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002600:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002606:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 8002608:	2220      	movs	r2, #32
 800260a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800260c:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002612:	4814      	ldr	r0, [pc, #80]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 8002614:	f001 f864 	bl	80036e0 <HAL_DMA_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 800261e:	f7ff fb2f 	bl	8001c80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 8002626:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002628:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <HAL_UART_MspInit+0x1dc>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	2027      	movs	r0, #39	@ 0x27
 8002634:	f001 f81d 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002638:	2027      	movs	r0, #39	@ 0x27
 800263a:	f001 f836 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3730      	adds	r7, #48	@ 0x30
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40013800 	.word	0x40013800
 800264c:	40021000 	.word	0x40021000
 8002650:	40010c00 	.word	0x40010c00
 8002654:	40010000 	.word	0x40010000
 8002658:	40004800 	.word	0x40004800
 800265c:	20000298 	.word	0x20000298
 8002660:	4002001c 	.word	0x4002001c
 8002664:	20000254 	.word	0x20000254
 8002668:	40020030 	.word	0x40020030

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <NMI_Handler+0x4>

08002674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <HardFault_Handler+0x4>

0800267c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <MemManage_Handler+0x4>

08002684 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <BusFault_Handler+0x4>

0800268c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <UsageFault_Handler+0x4>

08002694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026bc:	f000 f96c 	bl	8002998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026c8:	4802      	ldr	r0, [pc, #8]	@ (80026d4 <DMA1_Channel1_IRQHandler+0x10>)
 80026ca:	f001 f977 	bl	80039bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000450 	.word	0x20000450

080026d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <DMA1_Channel2_IRQHandler+0x10>)
 80026de:	f001 f96d 	bl	80039bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000298 	.word	0x20000298

080026ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80026f0:	4802      	ldr	r0, [pc, #8]	@ (80026fc <DMA1_Channel3_IRQHandler+0x10>)
 80026f2:	f001 f963 	bl	80039bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000254 	.word	0x20000254

08002700 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002704:	4803      	ldr	r0, [pc, #12]	@ (8002714 <ADC1_2_IRQHandler+0x14>)
 8002706:	f000 fbf7 	bl	8002ef8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800270a:	4803      	ldr	r0, [pc, #12]	@ (8002718 <ADC1_2_IRQHandler+0x18>)
 800270c:	f000 fbf4 	bl	8002ef8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200004c4 	.word	0x200004c4
 8002718:	20000494 	.word	0x20000494

0800271c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <USART3_IRQHandler+0x10>)
 8002722:	f003 fd7b 	bl	800621c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200002dc 	.word	0x200002dc

08002730 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return 1;
 8002734:	2301      	movs	r3, #1
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <_kill>:

int _kill(int pid, int sig)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002748:	f005 fb9c 	bl	8007e84 <__errno>
 800274c:	4603      	mov	r3, r0
 800274e:	2216      	movs	r2, #22
 8002750:	601a      	str	r2, [r3, #0]
  return -1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_exit>:

void _exit (int status)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002766:	f04f 31ff 	mov.w	r1, #4294967295
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffe7 	bl	800273e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <_exit+0x12>

08002774 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e00a      	b.n	800279c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002786:	f3af 8000 	nop.w
 800278a:	4601      	mov	r1, r0
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	60ba      	str	r2, [r7, #8]
 8002792:	b2ca      	uxtb	r2, r1
 8002794:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	dbf0      	blt.n	8002786 <_read+0x12>
  }

  return len;
 80027a4:	687b      	ldr	r3, [r7, #4]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e009      	b.n	80027d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	60ba      	str	r2, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	3301      	adds	r3, #1
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	dbf1      	blt.n	80027c0 <_write+0x12>
  }
  return len;
 80027dc:	687b      	ldr	r3, [r7, #4]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_close>:

int _close(int file)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800280c:	605a      	str	r2, [r3, #4]
  return 0;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <_isatty>:

int _isatty(int file)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002822:	2301      	movs	r3, #1
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
	...

08002848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002850:	4a14      	ldr	r2, [pc, #80]	@ (80028a4 <_sbrk+0x5c>)
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <_sbrk+0x60>)
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800285c:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <_sbrk+0x64>)
 8002866:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <_sbrk+0x68>)
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	429a      	cmp	r2, r3
 8002876:	d207      	bcs.n	8002888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002878:	f005 fb04 	bl	8007e84 <__errno>
 800287c:	4603      	mov	r3, r0
 800287e:	220c      	movs	r2, #12
 8002880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	e009      	b.n	800289c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002888:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288e:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <_sbrk+0x64>)
 8002898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20005000 	.word	0x20005000
 80028a8:	00000400 	.word	0x00000400
 80028ac:	200008fc 	.word	0x200008fc
 80028b0:	20000a50 	.word	0x20000a50

080028b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028c0:	f7ff fff8 	bl	80028b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c4:	480b      	ldr	r0, [pc, #44]	@ (80028f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028c6:	490c      	ldr	r1, [pc, #48]	@ (80028f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028c8:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028cc:	e002      	b.n	80028d4 <LoopCopyDataInit>

080028ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d2:	3304      	adds	r3, #4

080028d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d8:	d3f9      	bcc.n	80028ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028da:	4a09      	ldr	r2, [pc, #36]	@ (8002900 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028dc:	4c09      	ldr	r4, [pc, #36]	@ (8002904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e0:	e001      	b.n	80028e6 <LoopFillZerobss>

080028e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e4:	3204      	adds	r2, #4

080028e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e8:	d3fb      	bcc.n	80028e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ea:	f005 fad1 	bl	8007e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ee:	f7fe fe99 	bl	8001624 <main>
  bx lr
 80028f2:	4770      	bx	lr
  ldr r0, =_sdata
 80028f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80028fc:	0800e8d8 	.word	0x0800e8d8
  ldr r2, =_sbss
 8002900:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002904:	20000a50 	.word	0x20000a50

08002908 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002908:	e7fe      	b.n	8002908 <CAN1_RX1_IRQHandler>
	...

0800290c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002910:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <HAL_Init+0x28>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a07      	ldr	r2, [pc, #28]	@ (8002934 <HAL_Init+0x28>)
 8002916:	f043 0310 	orr.w	r3, r3, #16
 800291a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291c:	2003      	movs	r0, #3
 800291e:	f000 fe9d 	bl	800365c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002922:	200f      	movs	r0, #15
 8002924:	f000 f808 	bl	8002938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002928:	f7ff fc04 	bl	8002134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40022000 	.word	0x40022000

08002938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_InitTick+0x54>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b12      	ldr	r3, [pc, #72]	@ (8002990 <HAL_InitTick+0x58>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f000 feb5 	bl	80036c6 <HAL_SYSTICK_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e00e      	b.n	8002984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d80a      	bhi.n	8002982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800296c:	2200      	movs	r2, #0
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f000 fe7d 	bl	8003672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002978:	4a06      	ldr	r2, [pc, #24]	@ (8002994 <HAL_InitTick+0x5c>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000024 	.word	0x20000024
 8002990:	2000002c 	.word	0x2000002c
 8002994:	20000028 	.word	0x20000028

08002998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_IncTick+0x1c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <HAL_IncTick+0x20>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	4a03      	ldr	r2, [pc, #12]	@ (80029b8 <HAL_IncTick+0x20>)
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	2000002c 	.word	0x2000002c
 80029b8:	20000900 	.word	0x20000900

080029bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b02      	ldr	r3, [pc, #8]	@ (80029cc <HAL_GetTick+0x10>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000900 	.word	0x20000900

080029d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff fff0 	bl	80029bc <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d005      	beq.n	80029f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_Delay+0x44>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f6:	bf00      	nop
 80029f8:	f7ff ffe0 	bl	80029bc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f7      	bhi.n	80029f8 <HAL_Delay+0x28>
  {
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	2000002c 	.word	0x2000002c

08002a18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0be      	b.n	8002bb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d109      	bne.n	8002a5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fb9e 	bl	8002198 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fc81 	bl	8003364 <ADC_ConversionStop_Disable>
 8002a62:	4603      	mov	r3, r0
 8002a64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 8099 	bne.w	8002ba6 <HAL_ADC_Init+0x18e>
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 8095 	bne.w	8002ba6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a84:	f023 0302 	bic.w	r3, r3, #2
 8002a88:	f043 0202 	orr.w	r2, r3, #2
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7b1b      	ldrb	r3, [r3, #12]
 8002a9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002aa0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ab0:	d003      	beq.n	8002aba <HAL_ADC_Init+0xa2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d102      	bne.n	8002ac0 <HAL_ADC_Init+0xa8>
 8002aba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002abe:	e000      	b.n	8002ac2 <HAL_ADC_Init+0xaa>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7d1b      	ldrb	r3, [r3, #20]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d119      	bne.n	8002b04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7b1b      	ldrb	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	035a      	lsls	r2, r3, #13
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	e00b      	b.n	8002b04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	4b28      	ldr	r3, [pc, #160]	@ (8002bc0 <HAL_ADC_Init+0x1a8>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b34:	d003      	beq.n	8002b3e <HAL_ADC_Init+0x126>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d104      	bne.n	8002b48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	051b      	lsls	r3, r3, #20
 8002b46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <HAL_ADC_Init+0x1ac>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10b      	bne.n	8002b84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b82:	e018      	b.n	8002bb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	f023 0312 	bic.w	r3, r3, #18
 8002b8c:	f043 0210 	orr.w	r2, r3, #16
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ba4:	e007      	b.n	8002bb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	f043 0210 	orr.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	ffe1f7fd 	.word	0xffe1f7fd
 8002bc4:	ff1f0efe 	.word	0xff1f0efe

08002bc8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_Start+0x1a>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e098      	b.n	8002d14 <HAL_ADC_Start+0x14c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fb60 	bl	80032b0 <ADC_Enable>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 8087 	bne.w	8002d0a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a41      	ldr	r2, [pc, #260]	@ (8002d1c <HAL_ADC_Start+0x154>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d105      	bne.n	8002c26 <HAL_ADC_Start+0x5e>
 8002c1a:	4b41      	ldr	r3, [pc, #260]	@ (8002d20 <HAL_ADC_Start+0x158>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d115      	bne.n	8002c52 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d026      	beq.n	8002c8e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c50:	e01d      	b.n	8002c8e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2f      	ldr	r2, [pc, #188]	@ (8002d20 <HAL_ADC_Start+0x158>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_ADC_Start+0xaa>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d1c <HAL_ADC_Start+0x154>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10d      	bne.n	8002c8e <HAL_ADC_Start+0xc6>
 8002c72:	4b2b      	ldr	r3, [pc, #172]	@ (8002d20 <HAL_ADC_Start+0x158>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c82:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c86:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9e:	f023 0206 	bic.w	r2, r3, #6
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ca6:	e002      	b.n	8002cae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f06f 0202 	mvn.w	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002cce:	d113      	bne.n	8002cf8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cd4:	4a11      	ldr	r2, [pc, #68]	@ (8002d1c <HAL_ADC_Start+0x154>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d105      	bne.n	8002ce6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002cda:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <HAL_ADC_Start+0x158>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d108      	bne.n	8002cf8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	e00c      	b.n	8002d12 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	e003      	b.n	8002d12 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40012800 	.word	0x40012800
 8002d20:	40012400 	.word	0x40012400

08002d24 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a64      	ldr	r2, [pc, #400]	@ (8002ecc <HAL_ADC_Start_DMA+0x1a8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_ADC_Start_DMA+0x24>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a63      	ldr	r2, [pc, #396]	@ (8002ed0 <HAL_ADC_Start_DMA+0x1ac>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d106      	bne.n	8002d56 <HAL_ADC_Start_DMA+0x32>
 8002d48:	4b60      	ldr	r3, [pc, #384]	@ (8002ecc <HAL_ADC_Start_DMA+0x1a8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 80b3 	bne.w	8002ebc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_Start_DMA+0x40>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0ae      	b.n	8002ec2 <HAL_ADC_Start_DMA+0x19e>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fa9f 	bl	80032b0 <ADC_Enable>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d76:	7dfb      	ldrb	r3, [r7, #23]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 809a 	bne.w	8002eb2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a4e      	ldr	r2, [pc, #312]	@ (8002ed0 <HAL_ADC_Start_DMA+0x1ac>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d105      	bne.n	8002da8 <HAL_ADC_Start_DMA+0x84>
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ecc <HAL_ADC_Start_DMA+0x1a8>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d115      	bne.n	8002dd4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d026      	beq.n	8002e10 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dd2:	e01d      	b.n	8002e10 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a39      	ldr	r2, [pc, #228]	@ (8002ecc <HAL_ADC_Start_DMA+0x1a8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_ADC_Start_DMA+0xd0>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a38      	ldr	r2, [pc, #224]	@ (8002ed0 <HAL_ADC_Start_DMA+0x1ac>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10d      	bne.n	8002e10 <HAL_ADC_Start_DMA+0xec>
 8002df4:	4b35      	ldr	r3, [pc, #212]	@ (8002ecc <HAL_ADC_Start_DMA+0x1a8>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e08:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d006      	beq.n	8002e2a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	f023 0206 	bic.w	r2, r3, #6
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e28:	e002      	b.n	8002e30 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	4a25      	ldr	r2, [pc, #148]	@ (8002ed4 <HAL_ADC_Start_DMA+0x1b0>)
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a24      	ldr	r2, [pc, #144]	@ (8002ed8 <HAL_ADC_Start_DMA+0x1b4>)
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4a23      	ldr	r2, [pc, #140]	@ (8002edc <HAL_ADC_Start_DMA+0x1b8>)
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0202 	mvn.w	r2, #2
 8002e58:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e68:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a18      	ldr	r0, [r3, #32]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	334c      	adds	r3, #76	@ 0x4c
 8002e74:	4619      	mov	r1, r3
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f000 fc8b 	bl	8003794 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002e88:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e8c:	d108      	bne.n	8002ea0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002e9c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e9e:	e00f      	b.n	8002ec0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002eae:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002eb0:	e006      	b.n	8002ec0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002eba:	e001      	b.n	8002ec0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40012400 	.word	0x40012400
 8002ed0:	40012800 	.word	0x40012800
 8002ed4:	080033e7 	.word	0x080033e7
 8002ed8:	08003463 	.word	0x08003463
 8002edc:	0800347f 	.word	0x0800347f

08002ee0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d03e      	beq.n	8002f98 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d039      	beq.n	8002f98 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f46:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002f4a:	d11d      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d119      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0220 	bic.w	r2, r2, #32
 8002f62:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f874 	bl	8003076 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f06f 0212 	mvn.w	r2, #18
 8002f96:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d04d      	beq.n	800303e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d048      	beq.n	800303e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002fce:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002fd2:	d012      	beq.n	8002ffa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d125      	bne.n	800302e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002fec:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002ff0:	d11d      	bne.n	800302e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d119      	bne.n	800302e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003008:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d105      	bne.n	800302e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	f043 0201 	orr.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa3f 	bl	80034b2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 020c 	mvn.w	r2, #12
 800303c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d012      	beq.n	800306e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f81b 	bl	800309a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0201 	mvn.w	r2, #1
 800306c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
	...

080030c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x20>
 80030dc:	2302      	movs	r3, #2
 80030de:	e0dc      	b.n	800329a <HAL_ADC_ConfigChannel+0x1da>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b06      	cmp	r3, #6
 80030ee:	d81c      	bhi.n	800312a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	3b05      	subs	r3, #5
 8003102:	221f      	movs	r2, #31
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	4019      	ands	r1, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	3b05      	subs	r3, #5
 800311c:	fa00 f203 	lsl.w	r2, r0, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	635a      	str	r2, [r3, #52]	@ 0x34
 8003128:	e03c      	b.n	80031a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b0c      	cmp	r3, #12
 8003130:	d81c      	bhi.n	800316c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	3b23      	subs	r3, #35	@ 0x23
 8003144:	221f      	movs	r2, #31
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	4019      	ands	r1, r3
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b23      	subs	r3, #35	@ 0x23
 800315e:	fa00 f203 	lsl.w	r2, r0, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	631a      	str	r2, [r3, #48]	@ 0x30
 800316a:	e01b      	b.n	80031a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	3b41      	subs	r3, #65	@ 0x41
 800317e:	221f      	movs	r2, #31
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	4019      	ands	r1, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	3b41      	subs	r3, #65	@ 0x41
 8003198:	fa00 f203 	lsl.w	r2, r0, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b09      	cmp	r3, #9
 80031aa:	d91c      	bls.n	80031e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68d9      	ldr	r1, [r3, #12]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	3b1e      	subs	r3, #30
 80031be:	2207      	movs	r2, #7
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	4019      	ands	r1, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6898      	ldr	r0, [r3, #8]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	3b1e      	subs	r3, #30
 80031d8:	fa00 f203 	lsl.w	r2, r0, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	60da      	str	r2, [r3, #12]
 80031e4:	e019      	b.n	800321a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6919      	ldr	r1, [r3, #16]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	2207      	movs	r2, #7
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	4019      	ands	r1, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6898      	ldr	r0, [r3, #8]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	fa00 f203 	lsl.w	r2, r0, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b10      	cmp	r3, #16
 8003220:	d003      	beq.n	800322a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003226:	2b11      	cmp	r3, #17
 8003228:	d132      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1d      	ldr	r2, [pc, #116]	@ (80032a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d125      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d126      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003250:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b10      	cmp	r3, #16
 8003258:	d11a      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800325a:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a13      	ldr	r2, [pc, #76]	@ (80032ac <HAL_ADC_ConfigChannel+0x1ec>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	0c9a      	lsrs	r2, r3, #18
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003270:	e002      	b.n	8003278 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3b01      	subs	r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f9      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x1b2>
 800327e:	e007      	b.n	8003290 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	40012400 	.word	0x40012400
 80032a8:	20000024 	.word	0x20000024
 80032ac:	431bde83 	.word	0x431bde83

080032b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d040      	beq.n	8003350 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032de:	4b1f      	ldr	r3, [pc, #124]	@ (800335c <ADC_Enable+0xac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003360 <ADC_Enable+0xb0>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	0c9b      	lsrs	r3, r3, #18
 80032ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032ec:	e002      	b.n	80032f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f9      	bne.n	80032ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032fa:	f7ff fb5f 	bl	80029bc <HAL_GetTick>
 80032fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003300:	e01f      	b.n	8003342 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003302:	f7ff fb5b 	bl	80029bc <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d918      	bls.n	8003342 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d011      	beq.n	8003342 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003322:	f043 0210 	orr.w	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e007      	b.n	8003352 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d1d8      	bne.n	8003302 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000024 	.word	0x20000024
 8003360:	431bde83 	.word	0x431bde83

08003364 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d12e      	bne.n	80033dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800338e:	f7ff fb15 	bl	80029bc <HAL_GetTick>
 8003392:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003394:	e01b      	b.n	80033ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003396:	f7ff fb11 	bl	80029bc <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d914      	bls.n	80033ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10d      	bne.n	80033ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b6:	f043 0210 	orr.w	r2, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	f043 0201 	orr.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e007      	b.n	80033de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d0dc      	beq.n	8003396 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d127      	bne.n	8003450 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003404:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003416:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800341a:	d115      	bne.n	8003448 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003420:	2b00      	cmp	r3, #0
 8003422:	d111      	bne.n	8003448 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003428:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff fe14 	bl	8003076 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800344e:	e004      	b.n	800345a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff fe09 	bl	8003088 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	f043 0204 	orr.w	r2, r3, #4
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff fe01 	bl	80030ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003508 <__NVIC_SetPriorityGrouping+0x44>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034e0:	4013      	ands	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034f6:	4a04      	ldr	r2, [pc, #16]	@ (8003508 <__NVIC_SetPriorityGrouping+0x44>)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	60d3      	str	r3, [r2, #12]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003510:	4b04      	ldr	r3, [pc, #16]	@ (8003524 <__NVIC_GetPriorityGrouping+0x18>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 0307 	and.w	r3, r3, #7
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	db0b      	blt.n	8003552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	f003 021f 	and.w	r2, r3, #31
 8003540:	4906      	ldr	r1, [pc, #24]	@ (800355c <__NVIC_EnableIRQ+0x34>)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	2001      	movs	r0, #1
 800354a:	fa00 f202 	lsl.w	r2, r0, r2
 800354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	e000e100 	.word	0xe000e100

08003560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	2b00      	cmp	r3, #0
 8003572:	db0a      	blt.n	800358a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	490c      	ldr	r1, [pc, #48]	@ (80035ac <__NVIC_SetPriority+0x4c>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	440b      	add	r3, r1
 8003584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003588:	e00a      	b.n	80035a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4908      	ldr	r1, [pc, #32]	@ (80035b0 <__NVIC_SetPriority+0x50>)
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	3b04      	subs	r3, #4
 8003598:	0112      	lsls	r2, r2, #4
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	440b      	add	r3, r1
 800359e:	761a      	strb	r2, [r3, #24]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000e100 	.word	0xe000e100
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	@ 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f1c3 0307 	rsb	r3, r3, #7
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	bf28      	it	cs
 80035d2:	2304      	movcs	r3, #4
 80035d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3304      	adds	r3, #4
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d902      	bls.n	80035e4 <NVIC_EncodePriority+0x30>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3b03      	subs	r3, #3
 80035e2:	e000      	b.n	80035e6 <NVIC_EncodePriority+0x32>
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43da      	mvns	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	401a      	ands	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fa01 f303 	lsl.w	r3, r1, r3
 8003606:	43d9      	mvns	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	4313      	orrs	r3, r2
         );
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	@ 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003628:	d301      	bcc.n	800362e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362a:	2301      	movs	r3, #1
 800362c:	e00f      	b.n	800364e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362e:	4a0a      	ldr	r2, [pc, #40]	@ (8003658 <SysTick_Config+0x40>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003636:	210f      	movs	r1, #15
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	f7ff ff90 	bl	8003560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <SysTick_Config+0x40>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003646:	4b04      	ldr	r3, [pc, #16]	@ (8003658 <SysTick_Config+0x40>)
 8003648:	2207      	movs	r2, #7
 800364a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff2d 	bl	80034c4 <__NVIC_SetPriorityGrouping>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003684:	f7ff ff42 	bl	800350c <__NVIC_GetPriorityGrouping>
 8003688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff ff90 	bl	80035b4 <NVIC_EncodePriority>
 8003694:	4602      	mov	r2, r0
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff5f 	bl	8003560 <__NVIC_SetPriority>
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff35 	bl	8003528 <__NVIC_EnableIRQ>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ffa2 	bl	8003618 <SysTick_Config>
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e043      	b.n	800377e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <HAL_DMA_Init+0xa8>)
 80036fe:	4413      	add	r3, r2
 8003700:	4a22      	ldr	r2, [pc, #136]	@ (800378c <HAL_DMA_Init+0xac>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	009a      	lsls	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1f      	ldr	r2, [pc, #124]	@ (8003790 <HAL_DMA_Init+0xb0>)
 8003712:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800372a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800372e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	bffdfff8 	.word	0xbffdfff8
 800378c:	cccccccd 	.word	0xcccccccd
 8003790:	40020000 	.word	0x40020000

08003794 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Start_IT+0x20>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e04b      	b.n	800384c <HAL_DMA_Start_IT+0xb8>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d13a      	bne.n	800383e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f9eb 	bl	8003bc8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 020e 	orr.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00f      	b.n	800382c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 020a 	orr.w	r2, r2, #10
 800382a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e005      	b.n	800384a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003846:	2302      	movs	r3, #2
 8003848:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d008      	beq.n	800387e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2204      	movs	r2, #4
 8003870:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e020      	b.n	80038c0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 020e 	bic.w	r2, r2, #14
 800388c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038be:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d005      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2204      	movs	r2, #4
 80038e8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e051      	b.n	8003994 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 020e 	bic.w	r2, r2, #14
 80038fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a22      	ldr	r2, [pc, #136]	@ (80039a0 <HAL_DMA_Abort_IT+0xd4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d029      	beq.n	800396e <HAL_DMA_Abort_IT+0xa2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a21      	ldr	r2, [pc, #132]	@ (80039a4 <HAL_DMA_Abort_IT+0xd8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_DMA_Abort_IT+0x9e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1f      	ldr	r2, [pc, #124]	@ (80039a8 <HAL_DMA_Abort_IT+0xdc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01a      	beq.n	8003964 <HAL_DMA_Abort_IT+0x98>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1e      	ldr	r2, [pc, #120]	@ (80039ac <HAL_DMA_Abort_IT+0xe0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d012      	beq.n	800395e <HAL_DMA_Abort_IT+0x92>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1c      	ldr	r2, [pc, #112]	@ (80039b0 <HAL_DMA_Abort_IT+0xe4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00a      	beq.n	8003958 <HAL_DMA_Abort_IT+0x8c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1b      	ldr	r2, [pc, #108]	@ (80039b4 <HAL_DMA_Abort_IT+0xe8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d102      	bne.n	8003952 <HAL_DMA_Abort_IT+0x86>
 800394c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003950:	e00e      	b.n	8003970 <HAL_DMA_Abort_IT+0xa4>
 8003952:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003956:	e00b      	b.n	8003970 <HAL_DMA_Abort_IT+0xa4>
 8003958:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800395c:	e008      	b.n	8003970 <HAL_DMA_Abort_IT+0xa4>
 800395e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003962:	e005      	b.n	8003970 <HAL_DMA_Abort_IT+0xa4>
 8003964:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003968:	e002      	b.n	8003970 <HAL_DMA_Abort_IT+0xa4>
 800396a:	2310      	movs	r3, #16
 800396c:	e000      	b.n	8003970 <HAL_DMA_Abort_IT+0xa4>
 800396e:	2301      	movs	r3, #1
 8003970:	4a11      	ldr	r2, [pc, #68]	@ (80039b8 <HAL_DMA_Abort_IT+0xec>)
 8003972:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
    } 
  }
  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40020008 	.word	0x40020008
 80039a4:	4002001c 	.word	0x4002001c
 80039a8:	40020030 	.word	0x40020030
 80039ac:	40020044 	.word	0x40020044
 80039b0:	40020058 	.word	0x40020058
 80039b4:	4002006c 	.word	0x4002006c
 80039b8:	40020000 	.word	0x40020000

080039bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	2204      	movs	r2, #4
 80039da:	409a      	lsls	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d04f      	beq.n	8003a84 <HAL_DMA_IRQHandler+0xc8>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d04a      	beq.n	8003a84 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0204 	bic.w	r2, r2, #4
 8003a0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a66      	ldr	r2, [pc, #408]	@ (8003bac <HAL_DMA_IRQHandler+0x1f0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d029      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xae>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a65      	ldr	r2, [pc, #404]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1f4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xaa>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a63      	ldr	r2, [pc, #396]	@ (8003bb4 <HAL_DMA_IRQHandler+0x1f8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01a      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xa4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a62      	ldr	r2, [pc, #392]	@ (8003bb8 <HAL_DMA_IRQHandler+0x1fc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d012      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x9e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a60      	ldr	r2, [pc, #384]	@ (8003bbc <HAL_DMA_IRQHandler+0x200>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00a      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x98>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc0 <HAL_DMA_IRQHandler+0x204>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d102      	bne.n	8003a4e <HAL_DMA_IRQHandler+0x92>
 8003a48:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a4c:	e00e      	b.n	8003a6c <HAL_DMA_IRQHandler+0xb0>
 8003a4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a52:	e00b      	b.n	8003a6c <HAL_DMA_IRQHandler+0xb0>
 8003a54:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a58:	e008      	b.n	8003a6c <HAL_DMA_IRQHandler+0xb0>
 8003a5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a5e:	e005      	b.n	8003a6c <HAL_DMA_IRQHandler+0xb0>
 8003a60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a64:	e002      	b.n	8003a6c <HAL_DMA_IRQHandler+0xb0>
 8003a66:	2340      	movs	r3, #64	@ 0x40
 8003a68:	e000      	b.n	8003a6c <HAL_DMA_IRQHandler+0xb0>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	4a55      	ldr	r2, [pc, #340]	@ (8003bc4 <HAL_DMA_IRQHandler+0x208>)
 8003a6e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8094 	beq.w	8003ba2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a82:	e08e      	b.n	8003ba2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	2202      	movs	r2, #2
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d056      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x186>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d051      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 020a 	bic.w	r2, r2, #10
 8003aba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a38      	ldr	r2, [pc, #224]	@ (8003bac <HAL_DMA_IRQHandler+0x1f0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d029      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x166>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a37      	ldr	r2, [pc, #220]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1f4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x162>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a35      	ldr	r2, [pc, #212]	@ (8003bb4 <HAL_DMA_IRQHandler+0x1f8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01a      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x15c>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a34      	ldr	r2, [pc, #208]	@ (8003bb8 <HAL_DMA_IRQHandler+0x1fc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d012      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x156>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a32      	ldr	r2, [pc, #200]	@ (8003bbc <HAL_DMA_IRQHandler+0x200>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00a      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x150>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a31      	ldr	r2, [pc, #196]	@ (8003bc0 <HAL_DMA_IRQHandler+0x204>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d102      	bne.n	8003b06 <HAL_DMA_IRQHandler+0x14a>
 8003b00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b04:	e00e      	b.n	8003b24 <HAL_DMA_IRQHandler+0x168>
 8003b06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b0a:	e00b      	b.n	8003b24 <HAL_DMA_IRQHandler+0x168>
 8003b0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b10:	e008      	b.n	8003b24 <HAL_DMA_IRQHandler+0x168>
 8003b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b16:	e005      	b.n	8003b24 <HAL_DMA_IRQHandler+0x168>
 8003b18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b1c:	e002      	b.n	8003b24 <HAL_DMA_IRQHandler+0x168>
 8003b1e:	2320      	movs	r3, #32
 8003b20:	e000      	b.n	8003b24 <HAL_DMA_IRQHandler+0x168>
 8003b22:	2302      	movs	r3, #2
 8003b24:	4a27      	ldr	r2, [pc, #156]	@ (8003bc4 <HAL_DMA_IRQHandler+0x208>)
 8003b26:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d034      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b40:	e02f      	b.n	8003ba2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	2208      	movs	r2, #8
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d028      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x1e8>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d023      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 020e 	bic.w	r2, r2, #14
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b74:	2101      	movs	r1, #1
 8003b76:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    }
  }
  return;
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
}
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40020008 	.word	0x40020008
 8003bb0:	4002001c 	.word	0x4002001c
 8003bb4:	40020030 	.word	0x40020030
 8003bb8:	40020044 	.word	0x40020044
 8003bbc:	40020058 	.word	0x40020058
 8003bc0:	4002006c 	.word	0x4002006c
 8003bc4:	40020000 	.word	0x40020000

08003bc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d108      	bne.n	8003c08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c06:	e007      	b.n	8003c18 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b08b      	sub	sp, #44	@ 0x2c
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c36:	e169      	b.n	8003f0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c38:	2201      	movs	r2, #1
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	f040 8158 	bne.w	8003f06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4a9a      	ldr	r2, [pc, #616]	@ (8003ec4 <HAL_GPIO_Init+0x2a0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d05e      	beq.n	8003d1e <HAL_GPIO_Init+0xfa>
 8003c60:	4a98      	ldr	r2, [pc, #608]	@ (8003ec4 <HAL_GPIO_Init+0x2a0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d875      	bhi.n	8003d52 <HAL_GPIO_Init+0x12e>
 8003c66:	4a98      	ldr	r2, [pc, #608]	@ (8003ec8 <HAL_GPIO_Init+0x2a4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d058      	beq.n	8003d1e <HAL_GPIO_Init+0xfa>
 8003c6c:	4a96      	ldr	r2, [pc, #600]	@ (8003ec8 <HAL_GPIO_Init+0x2a4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d86f      	bhi.n	8003d52 <HAL_GPIO_Init+0x12e>
 8003c72:	4a96      	ldr	r2, [pc, #600]	@ (8003ecc <HAL_GPIO_Init+0x2a8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d052      	beq.n	8003d1e <HAL_GPIO_Init+0xfa>
 8003c78:	4a94      	ldr	r2, [pc, #592]	@ (8003ecc <HAL_GPIO_Init+0x2a8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d869      	bhi.n	8003d52 <HAL_GPIO_Init+0x12e>
 8003c7e:	4a94      	ldr	r2, [pc, #592]	@ (8003ed0 <HAL_GPIO_Init+0x2ac>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d04c      	beq.n	8003d1e <HAL_GPIO_Init+0xfa>
 8003c84:	4a92      	ldr	r2, [pc, #584]	@ (8003ed0 <HAL_GPIO_Init+0x2ac>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d863      	bhi.n	8003d52 <HAL_GPIO_Init+0x12e>
 8003c8a:	4a92      	ldr	r2, [pc, #584]	@ (8003ed4 <HAL_GPIO_Init+0x2b0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d046      	beq.n	8003d1e <HAL_GPIO_Init+0xfa>
 8003c90:	4a90      	ldr	r2, [pc, #576]	@ (8003ed4 <HAL_GPIO_Init+0x2b0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d85d      	bhi.n	8003d52 <HAL_GPIO_Init+0x12e>
 8003c96:	2b12      	cmp	r3, #18
 8003c98:	d82a      	bhi.n	8003cf0 <HAL_GPIO_Init+0xcc>
 8003c9a:	2b12      	cmp	r3, #18
 8003c9c:	d859      	bhi.n	8003d52 <HAL_GPIO_Init+0x12e>
 8003c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca4 <HAL_GPIO_Init+0x80>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003d1f 	.word	0x08003d1f
 8003ca8:	08003cf9 	.word	0x08003cf9
 8003cac:	08003d0b 	.word	0x08003d0b
 8003cb0:	08003d4d 	.word	0x08003d4d
 8003cb4:	08003d53 	.word	0x08003d53
 8003cb8:	08003d53 	.word	0x08003d53
 8003cbc:	08003d53 	.word	0x08003d53
 8003cc0:	08003d53 	.word	0x08003d53
 8003cc4:	08003d53 	.word	0x08003d53
 8003cc8:	08003d53 	.word	0x08003d53
 8003ccc:	08003d53 	.word	0x08003d53
 8003cd0:	08003d53 	.word	0x08003d53
 8003cd4:	08003d53 	.word	0x08003d53
 8003cd8:	08003d53 	.word	0x08003d53
 8003cdc:	08003d53 	.word	0x08003d53
 8003ce0:	08003d53 	.word	0x08003d53
 8003ce4:	08003d53 	.word	0x08003d53
 8003ce8:	08003d01 	.word	0x08003d01
 8003cec:	08003d15 	.word	0x08003d15
 8003cf0:	4a79      	ldr	r2, [pc, #484]	@ (8003ed8 <HAL_GPIO_Init+0x2b4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cf6:	e02c      	b.n	8003d52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	623b      	str	r3, [r7, #32]
          break;
 8003cfe:	e029      	b.n	8003d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	3304      	adds	r3, #4
 8003d06:	623b      	str	r3, [r7, #32]
          break;
 8003d08:	e024      	b.n	8003d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	623b      	str	r3, [r7, #32]
          break;
 8003d12:	e01f      	b.n	8003d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	623b      	str	r3, [r7, #32]
          break;
 8003d1c:	e01a      	b.n	8003d54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d26:	2304      	movs	r3, #4
 8003d28:	623b      	str	r3, [r7, #32]
          break;
 8003d2a:	e013      	b.n	8003d54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d105      	bne.n	8003d40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d34:	2308      	movs	r3, #8
 8003d36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	611a      	str	r2, [r3, #16]
          break;
 8003d3e:	e009      	b.n	8003d54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d40:	2308      	movs	r3, #8
 8003d42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	615a      	str	r2, [r3, #20]
          break;
 8003d4a:	e003      	b.n	8003d54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	623b      	str	r3, [r7, #32]
          break;
 8003d50:	e000      	b.n	8003d54 <HAL_GPIO_Init+0x130>
          break;
 8003d52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2bff      	cmp	r3, #255	@ 0xff
 8003d58:	d801      	bhi.n	8003d5e <HAL_GPIO_Init+0x13a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	e001      	b.n	8003d62 <HAL_GPIO_Init+0x13e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2bff      	cmp	r3, #255	@ 0xff
 8003d68:	d802      	bhi.n	8003d70 <HAL_GPIO_Init+0x14c>
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	e002      	b.n	8003d76 <HAL_GPIO_Init+0x152>
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	3b08      	subs	r3, #8
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	210f      	movs	r1, #15
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	401a      	ands	r2, r3
 8003d88:	6a39      	ldr	r1, [r7, #32]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80b1 	beq.w	8003f06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003da4:	4b4d      	ldr	r3, [pc, #308]	@ (8003edc <HAL_GPIO_Init+0x2b8>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	4a4c      	ldr	r2, [pc, #304]	@ (8003edc <HAL_GPIO_Init+0x2b8>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6193      	str	r3, [r2, #24]
 8003db0:	4b4a      	ldr	r3, [pc, #296]	@ (8003edc <HAL_GPIO_Init+0x2b8>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dbc:	4a48      	ldr	r2, [pc, #288]	@ (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	220f      	movs	r2, #15
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a40      	ldr	r2, [pc, #256]	@ (8003ee4 <HAL_GPIO_Init+0x2c0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <HAL_GPIO_Init+0x1ec>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3f      	ldr	r2, [pc, #252]	@ (8003ee8 <HAL_GPIO_Init+0x2c4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00d      	beq.n	8003e0c <HAL_GPIO_Init+0x1e8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a3e      	ldr	r2, [pc, #248]	@ (8003eec <HAL_GPIO_Init+0x2c8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <HAL_GPIO_Init+0x1e4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a3d      	ldr	r2, [pc, #244]	@ (8003ef0 <HAL_GPIO_Init+0x2cc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d101      	bne.n	8003e04 <HAL_GPIO_Init+0x1e0>
 8003e00:	2303      	movs	r3, #3
 8003e02:	e006      	b.n	8003e12 <HAL_GPIO_Init+0x1ee>
 8003e04:	2304      	movs	r3, #4
 8003e06:	e004      	b.n	8003e12 <HAL_GPIO_Init+0x1ee>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e002      	b.n	8003e12 <HAL_GPIO_Init+0x1ee>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_GPIO_Init+0x1ee>
 8003e10:	2300      	movs	r3, #0
 8003e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e14:	f002 0203 	and.w	r2, r2, #3
 8003e18:	0092      	lsls	r2, r2, #2
 8003e1a:	4093      	lsls	r3, r2
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e22:	492f      	ldr	r1, [pc, #188]	@ (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	089b      	lsrs	r3, r3, #2
 8003e28:	3302      	adds	r3, #2
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d006      	beq.n	8003e4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	492c      	ldr	r1, [pc, #176]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]
 8003e48:	e006      	b.n	8003e58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	4928      	ldr	r1, [pc, #160]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d006      	beq.n	8003e72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e64:	4b23      	ldr	r3, [pc, #140]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	4922      	ldr	r1, [pc, #136]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e72:	4b20      	ldr	r3, [pc, #128]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	491e      	ldr	r1, [pc, #120]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4918      	ldr	r1, [pc, #96]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]
 8003e98:	e006      	b.n	8003ea8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e9a:	4b16      	ldr	r3, [pc, #88]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	4914      	ldr	r1, [pc, #80]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d021      	beq.n	8003ef8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	490e      	ldr	r1, [pc, #56]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]
 8003ec0:	e021      	b.n	8003f06 <HAL_GPIO_Init+0x2e2>
 8003ec2:	bf00      	nop
 8003ec4:	10320000 	.word	0x10320000
 8003ec8:	10310000 	.word	0x10310000
 8003ecc:	10220000 	.word	0x10220000
 8003ed0:	10210000 	.word	0x10210000
 8003ed4:	10120000 	.word	0x10120000
 8003ed8:	10110000 	.word	0x10110000
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40010800 	.word	0x40010800
 8003ee8:	40010c00 	.word	0x40010c00
 8003eec:	40011000 	.word	0x40011000
 8003ef0:	40011400 	.word	0x40011400
 8003ef4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <HAL_GPIO_Init+0x304>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	4909      	ldr	r1, [pc, #36]	@ (8003f28 <HAL_GPIO_Init+0x304>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	3301      	adds	r3, #1
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	fa22 f303 	lsr.w	r3, r2, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f47f ae8e 	bne.w	8003c38 <HAL_GPIO_Init+0x14>
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	372c      	adds	r7, #44	@ 0x2c
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	40010400 	.word	0x40010400

08003f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	887b      	ldrh	r3, [r7, #2]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	e001      	b.n	8003f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	807b      	strh	r3, [r7, #2]
 8003f66:	4613      	mov	r3, r2
 8003f68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f6a:	787b      	ldrb	r3, [r7, #1]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f70:	887a      	ldrh	r2, [r7, #2]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f76:	e003      	b.n	8003f80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	041a      	lsls	r2, r3, #16
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	611a      	str	r2, [r3, #16]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e12b      	b.n	80041f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe f992 	bl	80022dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	@ 0x24
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f001 f842 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4a81      	ldr	r2, [pc, #516]	@ (8004200 <HAL_I2C_Init+0x274>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d807      	bhi.n	8004010 <HAL_I2C_Init+0x84>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a80      	ldr	r2, [pc, #512]	@ (8004204 <HAL_I2C_Init+0x278>)
 8004004:	4293      	cmp	r3, r2
 8004006:	bf94      	ite	ls
 8004008:	2301      	movls	r3, #1
 800400a:	2300      	movhi	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e006      	b.n	800401e <HAL_I2C_Init+0x92>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a7d      	ldr	r2, [pc, #500]	@ (8004208 <HAL_I2C_Init+0x27c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	bf94      	ite	ls
 8004018:	2301      	movls	r3, #1
 800401a:	2300      	movhi	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0e7      	b.n	80041f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a78      	ldr	r2, [pc, #480]	@ (800420c <HAL_I2C_Init+0x280>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0c9b      	lsrs	r3, r3, #18
 8004030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a6a      	ldr	r2, [pc, #424]	@ (8004200 <HAL_I2C_Init+0x274>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d802      	bhi.n	8004060 <HAL_I2C_Init+0xd4>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3301      	adds	r3, #1
 800405e:	e009      	b.n	8004074 <HAL_I2C_Init+0xe8>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	4a69      	ldr	r2, [pc, #420]	@ (8004210 <HAL_I2C_Init+0x284>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	3301      	adds	r3, #1
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	430b      	orrs	r3, r1
 800407a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004086:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	495c      	ldr	r1, [pc, #368]	@ (8004200 <HAL_I2C_Init+0x274>)
 8004090:	428b      	cmp	r3, r1
 8004092:	d819      	bhi.n	80040c8 <HAL_I2C_Init+0x13c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e59      	subs	r1, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040a8:	400b      	ands	r3, r1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_I2C_Init+0x138>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1e59      	subs	r1, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040bc:	3301      	adds	r3, #1
 80040be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c2:	e051      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 80040c4:	2304      	movs	r3, #4
 80040c6:	e04f      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d111      	bne.n	80040f4 <HAL_I2C_Init+0x168>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1e58      	subs	r0, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	440b      	add	r3, r1
 80040de:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e2:	3301      	adds	r3, #1
 80040e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e012      	b.n	800411a <HAL_I2C_Init+0x18e>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1e58      	subs	r0, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	0099      	lsls	r1, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	fbb0 f3f3 	udiv	r3, r0, r3
 800410a:	3301      	adds	r3, #1
 800410c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Init+0x196>
 800411e:	2301      	movs	r3, #1
 8004120:	e022      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10e      	bne.n	8004148 <HAL_I2C_Init+0x1bc>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e58      	subs	r0, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	440b      	add	r3, r1
 8004138:	fbb0 f3f3 	udiv	r3, r0, r3
 800413c:	3301      	adds	r3, #1
 800413e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004146:	e00f      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1e58      	subs	r0, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	0099      	lsls	r1, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	6809      	ldr	r1, [r1, #0]
 800416c:	4313      	orrs	r3, r2
 800416e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004196:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6911      	ldr	r1, [r2, #16]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68d2      	ldr	r2, [r2, #12]
 80041a2:	4311      	orrs	r1, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	000186a0 	.word	0x000186a0
 8004204:	001e847f 	.word	0x001e847f
 8004208:	003d08ff 	.word	0x003d08ff
 800420c:	431bde83 	.word	0x431bde83
 8004210:	10624dd3 	.word	0x10624dd3

08004214 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4603      	mov	r3, r0
 8004224:	817b      	strh	r3, [r7, #10]
 8004226:	460b      	mov	r3, r1
 8004228:	813b      	strh	r3, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800422e:	f7fe fbc5 	bl	80029bc <HAL_GetTick>
 8004232:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b20      	cmp	r3, #32
 800423e:	f040 80d9 	bne.w	80043f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2319      	movs	r3, #25
 8004248:	2201      	movs	r2, #1
 800424a:	496d      	ldr	r1, [pc, #436]	@ (8004400 <HAL_I2C_Mem_Write+0x1ec>)
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f971 	bl	8004534 <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
 800425a:	e0cc      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_I2C_Mem_Write+0x56>
 8004266:	2302      	movs	r3, #2
 8004268:	e0c5      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d007      	beq.n	8004290 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800429e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2221      	movs	r2, #33	@ 0x21
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2240      	movs	r2, #64	@ 0x40
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004404 <HAL_I2C_Mem_Write+0x1f0>)
 80042d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042d2:	88f8      	ldrh	r0, [r7, #6]
 80042d4:	893a      	ldrh	r2, [r7, #8]
 80042d6:	8979      	ldrh	r1, [r7, #10]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	4603      	mov	r3, r0
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f890 	bl	8004408 <I2C_RequestMemoryWrite>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d052      	beq.n	8004394 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e081      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fa36 	bl	8004768 <I2C_WaitOnTXEFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	2b04      	cmp	r3, #4
 8004308:	d107      	bne.n	800431a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e06b      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	781a      	ldrb	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d11b      	bne.n	8004394 <HAL_I2C_Mem_Write+0x180>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	d017      	beq.n	8004394 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1aa      	bne.n	80042f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fa29 	bl	80047f8 <I2C_WaitOnBTFFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d107      	bne.n	80043c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e016      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	00100002 	.word	0x00100002
 8004404:	ffff0000 	.word	0xffff0000

08004408 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4603      	mov	r3, r0
 8004418:	817b      	strh	r3, [r7, #10]
 800441a:	460b      	mov	r3, r1
 800441c:	813b      	strh	r3, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004430:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	2200      	movs	r2, #0
 800443a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f878 	bl	8004534 <I2C_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00d      	beq.n	8004466 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004458:	d103      	bne.n	8004462 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004460:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e05f      	b.n	8004526 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004466:	897b      	ldrh	r3, [r7, #10]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004474:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	6a3a      	ldr	r2, [r7, #32]
 800447a:	492d      	ldr	r1, [pc, #180]	@ (8004530 <I2C_RequestMemoryWrite+0x128>)
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f8d3 	bl	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e04c      	b.n	8004526 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a4:	6a39      	ldr	r1, [r7, #32]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f95e 	bl	8004768 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d107      	bne.n	80044ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e02b      	b.n	8004526 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d105      	bne.n	80044e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044d4:	893b      	ldrh	r3, [r7, #8]
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	611a      	str	r2, [r3, #16]
 80044de:	e021      	b.n	8004524 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044e0:	893b      	ldrh	r3, [r7, #8]
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f0:	6a39      	ldr	r1, [r7, #32]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f938 	bl	8004768 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00d      	beq.n	800451a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	2b04      	cmp	r3, #4
 8004504:	d107      	bne.n	8004516 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004514:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e005      	b.n	8004526 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800451a:	893b      	ldrh	r3, [r7, #8]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	00010002 	.word	0x00010002

08004534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004544:	e048      	b.n	80045d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d044      	beq.n	80045d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454e:	f7fe fa35 	bl	80029bc <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d302      	bcc.n	8004564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d139      	bne.n	80045d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	0c1b      	lsrs	r3, r3, #16
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	d10d      	bne.n	800458a <I2C_WaitOnFlagUntilTimeout+0x56>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	43da      	mvns	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4013      	ands	r3, r2
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	e00c      	b.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	43da      	mvns	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4013      	ands	r3, r2
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d116      	bne.n	80045d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e023      	b.n	8004620 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d10d      	bne.n	80045fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	43da      	mvns	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4013      	ands	r3, r2
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	e00c      	b.n	8004618 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	43da      	mvns	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	429a      	cmp	r2, r3
 800461c:	d093      	beq.n	8004546 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004636:	e071      	b.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004646:	d123      	bne.n	8004690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004656:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004660:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f043 0204 	orr.w	r2, r3, #4
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e067      	b.n	8004760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d041      	beq.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004698:	f7fe f990 	bl	80029bc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d302      	bcc.n	80046ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d136      	bne.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d10c      	bne.n	80046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	43da      	mvns	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4013      	ands	r3, r2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bf14      	ite	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	2300      	moveq	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	e00b      	b.n	80046ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	43da      	mvns	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4013      	ands	r3, r2
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d016      	beq.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	f043 0220 	orr.w	r2, r3, #32
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e021      	b.n	8004760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d10c      	bne.n	8004740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	43da      	mvns	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4013      	ands	r3, r2
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	e00b      	b.n	8004758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4013      	ands	r3, r2
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	bf14      	ite	ne
 8004752:	2301      	movne	r3, #1
 8004754:	2300      	moveq	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f af6d 	bne.w	8004638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004774:	e034      	b.n	80047e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f886 	bl	8004888 <I2C_IsAcknowledgeFailed>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e034      	b.n	80047f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478c:	d028      	beq.n	80047e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478e:	f7fe f915 	bl	80029bc <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	429a      	cmp	r2, r3
 800479c:	d302      	bcc.n	80047a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d11d      	bne.n	80047e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ae:	2b80      	cmp	r3, #128	@ 0x80
 80047b0:	d016      	beq.n	80047e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	f043 0220 	orr.w	r2, r3, #32
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e007      	b.n	80047f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ea:	2b80      	cmp	r3, #128	@ 0x80
 80047ec:	d1c3      	bne.n	8004776 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004804:	e034      	b.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f83e 	bl	8004888 <I2C_IsAcknowledgeFailed>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e034      	b.n	8004880 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d028      	beq.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7fe f8cd 	bl	80029bc <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11d      	bne.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d016      	beq.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e007      	b.n	8004880 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b04      	cmp	r3, #4
 800487c:	d1c3      	bne.n	8004806 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489e:	d11b      	bne.n	80048d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c4:	f043 0204 	orr.w	r2, r3, #4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e272      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8087 	beq.w	8004a12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004904:	4b92      	ldr	r3, [pc, #584]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b04      	cmp	r3, #4
 800490e:	d00c      	beq.n	800492a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004910:	4b8f      	ldr	r3, [pc, #572]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	2b08      	cmp	r3, #8
 800491a:	d112      	bne.n	8004942 <HAL_RCC_OscConfig+0x5e>
 800491c:	4b8c      	ldr	r3, [pc, #560]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004928:	d10b      	bne.n	8004942 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492a:	4b89      	ldr	r3, [pc, #548]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d06c      	beq.n	8004a10 <HAL_RCC_OscConfig+0x12c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d168      	bne.n	8004a10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e24c      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x76>
 800494c:	4b80      	ldr	r3, [pc, #512]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a7f      	ldr	r2, [pc, #508]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e02e      	b.n	80049b8 <HAL_RCC_OscConfig+0xd4>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10c      	bne.n	800497c <HAL_RCC_OscConfig+0x98>
 8004962:	4b7b      	ldr	r3, [pc, #492]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a7a      	ldr	r2, [pc, #488]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	4b78      	ldr	r3, [pc, #480]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a77      	ldr	r2, [pc, #476]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004974:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e01d      	b.n	80049b8 <HAL_RCC_OscConfig+0xd4>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0xbc>
 8004986:	4b72      	ldr	r3, [pc, #456]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a71      	ldr	r2, [pc, #452]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 800498c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b6f      	ldr	r3, [pc, #444]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a6e      	ldr	r2, [pc, #440]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e00b      	b.n	80049b8 <HAL_RCC_OscConfig+0xd4>
 80049a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 80049a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	4b68      	ldr	r3, [pc, #416]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a67      	ldr	r2, [pc, #412]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 80049b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d013      	beq.n	80049e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fd fffc 	bl	80029bc <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c8:	f7fd fff8 	bl	80029bc <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	@ 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e200      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049da:	4b5d      	ldr	r3, [pc, #372]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0xe4>
 80049e6:	e014      	b.n	8004a12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7fd ffe8 	bl	80029bc <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fd ffe4 	bl	80029bc <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1ec      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a02:	4b53      	ldr	r3, [pc, #332]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x10c>
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d063      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a2a:	4b49      	ldr	r3, [pc, #292]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d11c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x18c>
 8004a36:	4b46      	ldr	r3, [pc, #280]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d116      	bne.n	8004a70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a42:	4b43      	ldr	r3, [pc, #268]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_RCC_OscConfig+0x176>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e1c0      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4939      	ldr	r1, [pc, #228]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6e:	e03a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d020      	beq.n	8004aba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a78:	4b36      	ldr	r3, [pc, #216]	@ (8004b54 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7e:	f7fd ff9d 	bl	80029bc <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a86:	f7fd ff99 	bl	80029bc <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e1a1      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a98:	4b2d      	ldr	r3, [pc, #180]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4927      	ldr	r1, [pc, #156]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]
 8004ab8:	e015      	b.n	8004ae6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aba:	4b26      	ldr	r3, [pc, #152]	@ (8004b54 <HAL_RCC_OscConfig+0x270>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fd ff7c 	bl	80029bc <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac8:	f7fd ff78 	bl	80029bc <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e180      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ada:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d03a      	beq.n	8004b68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d019      	beq.n	8004b2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afa:	4b17      	ldr	r3, [pc, #92]	@ (8004b58 <HAL_RCC_OscConfig+0x274>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b00:	f7fd ff5c 	bl	80029bc <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b08:	f7fd ff58 	bl	80029bc <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e160      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b50 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b26:	2001      	movs	r0, #1
 8004b28:	f000 face 	bl	80050c8 <RCC_Delay>
 8004b2c:	e01c      	b.n	8004b68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b58 <HAL_RCC_OscConfig+0x274>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b34:	f7fd ff42 	bl	80029bc <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3a:	e00f      	b.n	8004b5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fd ff3e 	bl	80029bc <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d908      	bls.n	8004b5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e146      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	42420000 	.word	0x42420000
 8004b58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5c:	4b92      	ldr	r3, [pc, #584]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e9      	bne.n	8004b3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80a6 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b7a:	4b8b      	ldr	r3, [pc, #556]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10d      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b86:	4b88      	ldr	r3, [pc, #544]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	4a87      	ldr	r2, [pc, #540]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b90:	61d3      	str	r3, [r2, #28]
 8004b92:	4b85      	ldr	r3, [pc, #532]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba2:	4b82      	ldr	r3, [pc, #520]	@ (8004dac <HAL_RCC_OscConfig+0x4c8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d118      	bne.n	8004be0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bae:	4b7f      	ldr	r3, [pc, #508]	@ (8004dac <HAL_RCC_OscConfig+0x4c8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a7e      	ldr	r2, [pc, #504]	@ (8004dac <HAL_RCC_OscConfig+0x4c8>)
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bba:	f7fd feff 	bl	80029bc <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc2:	f7fd fefb 	bl	80029bc <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b64      	cmp	r3, #100	@ 0x64
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e103      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd4:	4b75      	ldr	r3, [pc, #468]	@ (8004dac <HAL_RCC_OscConfig+0x4c8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d106      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x312>
 8004be8:	4b6f      	ldr	r3, [pc, #444]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	4a6e      	ldr	r2, [pc, #440]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	6213      	str	r3, [r2, #32]
 8004bf4:	e02d      	b.n	8004c52 <HAL_RCC_OscConfig+0x36e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x334>
 8004bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	4a69      	ldr	r2, [pc, #420]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	6213      	str	r3, [r2, #32]
 8004c0a:	4b67      	ldr	r3, [pc, #412]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	4a66      	ldr	r2, [pc, #408]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	6213      	str	r3, [r2, #32]
 8004c16:	e01c      	b.n	8004c52 <HAL_RCC_OscConfig+0x36e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b05      	cmp	r3, #5
 8004c1e:	d10c      	bne.n	8004c3a <HAL_RCC_OscConfig+0x356>
 8004c20:	4b61      	ldr	r3, [pc, #388]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	4a60      	ldr	r2, [pc, #384]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c26:	f043 0304 	orr.w	r3, r3, #4
 8004c2a:	6213      	str	r3, [r2, #32]
 8004c2c:	4b5e      	ldr	r3, [pc, #376]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	4a5d      	ldr	r2, [pc, #372]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6213      	str	r3, [r2, #32]
 8004c38:	e00b      	b.n	8004c52 <HAL_RCC_OscConfig+0x36e>
 8004c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	4a5a      	ldr	r2, [pc, #360]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	6213      	str	r3, [r2, #32]
 8004c46:	4b58      	ldr	r3, [pc, #352]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	4a57      	ldr	r2, [pc, #348]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c4c:	f023 0304 	bic.w	r3, r3, #4
 8004c50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d015      	beq.n	8004c86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5a:	f7fd feaf 	bl	80029bc <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd feab 	bl	80029bc <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0b1      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c78:	4b4b      	ldr	r3, [pc, #300]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0ee      	beq.n	8004c62 <HAL_RCC_OscConfig+0x37e>
 8004c84:	e014      	b.n	8004cb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c86:	f7fd fe99 	bl	80029bc <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8c:	e00a      	b.n	8004ca4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8e:	f7fd fe95 	bl	80029bc <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e09b      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca4:	4b40      	ldr	r3, [pc, #256]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ee      	bne.n	8004c8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb6:	4b3c      	ldr	r3, [pc, #240]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	4a3b      	ldr	r2, [pc, #236]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004cbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8087 	beq.w	8004dda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ccc:	4b36      	ldr	r3, [pc, #216]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d061      	beq.n	8004d9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d146      	bne.n	8004d6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce0:	4b33      	ldr	r3, [pc, #204]	@ (8004db0 <HAL_RCC_OscConfig+0x4cc>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fe69 	bl	80029bc <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cee:	f7fd fe65 	bl	80029bc <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e06d      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d00:	4b29      	ldr	r3, [pc, #164]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d14:	d108      	bne.n	8004d28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d16:	4b24      	ldr	r3, [pc, #144]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	4921      	ldr	r1, [pc, #132]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d28:	4b1f      	ldr	r3, [pc, #124]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a19      	ldr	r1, [r3, #32]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	491b      	ldr	r1, [pc, #108]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d40:	4b1b      	ldr	r3, [pc, #108]	@ (8004db0 <HAL_RCC_OscConfig+0x4cc>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d46:	f7fd fe39 	bl	80029bc <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4e:	f7fd fe35 	bl	80029bc <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e03d      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d60:	4b11      	ldr	r3, [pc, #68]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x46a>
 8004d6c:	e035      	b.n	8004dda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6e:	4b10      	ldr	r3, [pc, #64]	@ (8004db0 <HAL_RCC_OscConfig+0x4cc>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d74:	f7fd fe22 	bl	80029bc <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fd fe1e 	bl	80029bc <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e026      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d8e:	4b06      	ldr	r3, [pc, #24]	@ (8004da8 <HAL_RCC_OscConfig+0x4c4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x498>
 8004d9a:	e01e      	b.n	8004dda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d107      	bne.n	8004db4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e019      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40007000 	.word	0x40007000
 8004db0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004db4:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <HAL_RCC_OscConfig+0x500>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d106      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000

08004de8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0d0      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d910      	bls.n	8004e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0a:	4b67      	ldr	r3, [pc, #412]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 0207 	bic.w	r2, r3, #7
 8004e12:	4965      	ldr	r1, [pc, #404]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b63      	ldr	r3, [pc, #396]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0b8      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d020      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e44:	4b59      	ldr	r3, [pc, #356]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4a58      	ldr	r2, [pc, #352]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e5c:	4b53      	ldr	r3, [pc, #332]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a52      	ldr	r2, [pc, #328]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e62:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e68:	4b50      	ldr	r3, [pc, #320]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	494d      	ldr	r1, [pc, #308]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d040      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8e:	4b47      	ldr	r3, [pc, #284]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d115      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e07f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea6:	4b41      	ldr	r3, [pc, #260]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e073      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e06b      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ec6:	4b39      	ldr	r3, [pc, #228]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f023 0203 	bic.w	r2, r3, #3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4936      	ldr	r1, [pc, #216]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ed8:	f7fd fd70 	bl	80029bc <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee0:	f7fd fd6c 	bl	80029bc <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e053      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f003 020c 	and.w	r2, r3, #12
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d1eb      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f08:	4b27      	ldr	r3, [pc, #156]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d210      	bcs.n	8004f38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b24      	ldr	r3, [pc, #144]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 0207 	bic.w	r2, r3, #7
 8004f1e:	4922      	ldr	r1, [pc, #136]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b20      	ldr	r3, [pc, #128]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e032      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f44:	4b19      	ldr	r3, [pc, #100]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4916      	ldr	r1, [pc, #88]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f62:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	490e      	ldr	r1, [pc, #56]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f76:	f000 f821 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	490a      	ldr	r1, [pc, #40]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f88:	5ccb      	ldrb	r3, [r1, r3]
 8004f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8e:	4a09      	ldr	r2, [pc, #36]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1cc>)
 8004f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f92:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1d0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd fcce 	bl	8002938 <HAL_InitTick>

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40022000 	.word	0x40022000
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	0800e41c 	.word	0x0800e41c
 8004fb4:	20000024 	.word	0x20000024
 8004fb8:	20000028 	.word	0x20000028

08004fbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005050 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d002      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0x30>
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x36>
 8004fea:	e027      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fec:	4b19      	ldr	r3, [pc, #100]	@ (8005054 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fee:	613b      	str	r3, [r7, #16]
      break;
 8004ff0:	e027      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	0c9b      	lsrs	r3, r3, #18
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ffc:	5cd3      	ldrb	r3, [r2, r3]
 8004ffe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800500a:	4b11      	ldr	r3, [pc, #68]	@ (8005050 <HAL_RCC_GetSysClockFreq+0x94>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	0c5b      	lsrs	r3, r3, #17
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	4a11      	ldr	r2, [pc, #68]	@ (800505c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005016:	5cd3      	ldrb	r3, [r2, r3]
 8005018:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a0d      	ldr	r2, [pc, #52]	@ (8005054 <HAL_RCC_GetSysClockFreq+0x98>)
 800501e:	fb03 f202 	mul.w	r2, r3, r2
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	e004      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a0c      	ldr	r2, [pc, #48]	@ (8005060 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005030:	fb02 f303 	mul.w	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	613b      	str	r3, [r7, #16]
      break;
 800503a:	e002      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800503c:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <HAL_RCC_GetSysClockFreq+0x98>)
 800503e:	613b      	str	r3, [r7, #16]
      break;
 8005040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005042:	693b      	ldr	r3, [r7, #16]
}
 8005044:	4618      	mov	r0, r3
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	007a1200 	.word	0x007a1200
 8005058:	0800e434 	.word	0x0800e434
 800505c:	0800e444 	.word	0x0800e444
 8005060:	003d0900 	.word	0x003d0900

08005064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b02      	ldr	r3, [pc, #8]	@ (8005074 <HAL_RCC_GetHCLKFreq+0x10>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	20000024 	.word	0x20000024

08005078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800507c:	f7ff fff2 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005080:	4602      	mov	r2, r0
 8005082:	4b05      	ldr	r3, [pc, #20]	@ (8005098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	4903      	ldr	r1, [pc, #12]	@ (800509c <HAL_RCC_GetPCLK1Freq+0x24>)
 800508e:	5ccb      	ldrb	r3, [r1, r3]
 8005090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000
 800509c:	0800e42c 	.word	0x0800e42c

080050a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050a4:	f7ff ffde 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	0adb      	lsrs	r3, r3, #11
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	4903      	ldr	r1, [pc, #12]	@ (80050c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050b6:	5ccb      	ldrb	r3, [r1, r3]
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050bc:	4618      	mov	r0, r3
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40021000 	.word	0x40021000
 80050c4:	0800e42c 	.word	0x0800e42c

080050c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050d0:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <RCC_Delay+0x34>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005100 <RCC_Delay+0x38>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0a5b      	lsrs	r3, r3, #9
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050e4:	bf00      	nop
  }
  while (Delay --);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1e5a      	subs	r2, r3, #1
 80050ea:	60fa      	str	r2, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f9      	bne.n	80050e4 <RCC_Delay+0x1c>
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	20000024 	.word	0x20000024
 8005100:	10624dd3 	.word	0x10624dd3

08005104 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d07d      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005120:	2300      	movs	r3, #0
 8005122:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005124:	4b4f      	ldr	r3, [pc, #316]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10d      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005130:	4b4c      	ldr	r3, [pc, #304]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	4a4b      	ldr	r2, [pc, #300]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800513a:	61d3      	str	r3, [r2, #28]
 800513c:	4b49      	ldr	r3, [pc, #292]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	4b46      	ldr	r3, [pc, #280]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d118      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005158:	4b43      	ldr	r3, [pc, #268]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a42      	ldr	r2, [pc, #264]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800515e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005162:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005164:	f7fd fc2a 	bl	80029bc <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516a:	e008      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800516c:	f7fd fc26 	bl	80029bc <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	@ 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e06d      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800517e:	4b3a      	ldr	r3, [pc, #232]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800518a:	4b36      	ldr	r3, [pc, #216]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005192:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d02e      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d027      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051b2:	4b2e      	ldr	r3, [pc, #184]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051b8:	4b2c      	ldr	r3, [pc, #176]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051be:	4a29      	ldr	r2, [pc, #164]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d014      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fd fbf5 	bl	80029bc <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d4:	e00a      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d6:	f7fd fbf1 	bl	80029bc <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d901      	bls.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e036      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0ee      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4917      	ldr	r1, [pc, #92]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005206:	4313      	orrs	r3, r2
 8005208:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d105      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005210:	4b14      	ldr	r3, [pc, #80]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	4a13      	ldr	r2, [pc, #76]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800521a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005228:	4b0e      	ldr	r3, [pc, #56]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	490b      	ldr	r1, [pc, #44]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005236:	4313      	orrs	r3, r2
 8005238:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b00      	cmp	r3, #0
 8005244:	d008      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005246:	4b07      	ldr	r3, [pc, #28]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	4904      	ldr	r1, [pc, #16]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005254:	4313      	orrs	r3, r2
 8005256:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40021000 	.word	0x40021000
 8005268:	40007000 	.word	0x40007000
 800526c:	42420440 	.word	0x42420440

08005270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e041      	b.n	8005306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fd f870 	bl	800237c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f000 fafc 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	d001      	beq.n	8005328 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e032      	b.n	800538e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <HAL_TIM_Base_Start+0x88>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <HAL_TIM_Base_Start+0x48>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005342:	d009      	beq.n	8005358 <HAL_TIM_Base_Start+0x48>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a14      	ldr	r2, [pc, #80]	@ (800539c <HAL_TIM_Base_Start+0x8c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <HAL_TIM_Base_Start+0x48>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a13      	ldr	r2, [pc, #76]	@ (80053a0 <HAL_TIM_Base_Start+0x90>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d111      	bne.n	800537c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b06      	cmp	r3, #6
 8005368:	d010      	beq.n	800538c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	e007      	b.n	800538c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800

080053a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e041      	b.n	800543a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f839 	bl	8005442 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f000 fa62 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <HAL_TIM_PWM_Start+0x24>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	e022      	b.n	80054be <HAL_TIM_PWM_Start+0x6a>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b04      	cmp	r3, #4
 800547c:	d109      	bne.n	8005492 <HAL_TIM_PWM_Start+0x3e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b01      	cmp	r3, #1
 8005488:	bf14      	ite	ne
 800548a:	2301      	movne	r3, #1
 800548c:	2300      	moveq	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	e015      	b.n	80054be <HAL_TIM_PWM_Start+0x6a>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b08      	cmp	r3, #8
 8005496:	d109      	bne.n	80054ac <HAL_TIM_PWM_Start+0x58>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	e008      	b.n	80054be <HAL_TIM_PWM_Start+0x6a>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e05e      	b.n	8005584 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_PWM_Start+0x82>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054d4:	e013      	b.n	80054fe <HAL_TIM_PWM_Start+0xaa>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d104      	bne.n	80054e6 <HAL_TIM_PWM_Start+0x92>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054e4:	e00b      	b.n	80054fe <HAL_TIM_PWM_Start+0xaa>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d104      	bne.n	80054f6 <HAL_TIM_PWM_Start+0xa2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f4:	e003      	b.n	80054fe <HAL_TIM_PWM_Start+0xaa>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2201      	movs	r2, #1
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fc50 	bl	8005dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1e      	ldr	r2, [pc, #120]	@ (800558c <HAL_TIM_PWM_Start+0x138>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d107      	bne.n	8005526 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a18      	ldr	r2, [pc, #96]	@ (800558c <HAL_TIM_PWM_Start+0x138>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00e      	beq.n	800554e <HAL_TIM_PWM_Start+0xfa>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005538:	d009      	beq.n	800554e <HAL_TIM_PWM_Start+0xfa>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a14      	ldr	r2, [pc, #80]	@ (8005590 <HAL_TIM_PWM_Start+0x13c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d004      	beq.n	800554e <HAL_TIM_PWM_Start+0xfa>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a12      	ldr	r2, [pc, #72]	@ (8005594 <HAL_TIM_PWM_Start+0x140>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d111      	bne.n	8005572 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b06      	cmp	r3, #6
 800555e:	d010      	beq.n	8005582 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005570:	e007      	b.n	8005582 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40012c00 	.word	0x40012c00
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800

08005598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e0ae      	b.n	8005714 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	f200 809f 	bhi.w	8005704 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055c6:	a201      	add	r2, pc, #4	@ (adr r2, 80055cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	08005601 	.word	0x08005601
 80055d0:	08005705 	.word	0x08005705
 80055d4:	08005705 	.word	0x08005705
 80055d8:	08005705 	.word	0x08005705
 80055dc:	08005641 	.word	0x08005641
 80055e0:	08005705 	.word	0x08005705
 80055e4:	08005705 	.word	0x08005705
 80055e8:	08005705 	.word	0x08005705
 80055ec:	08005683 	.word	0x08005683
 80055f0:	08005705 	.word	0x08005705
 80055f4:	08005705 	.word	0x08005705
 80055f8:	08005705 	.word	0x08005705
 80055fc:	080056c3 	.word	0x080056c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f9b2 	bl	8005970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0208 	orr.w	r2, r2, #8
 800561a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0204 	bic.w	r2, r2, #4
 800562a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6999      	ldr	r1, [r3, #24]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	619a      	str	r2, [r3, #24]
      break;
 800563e:	e064      	b.n	800570a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	4618      	mov	r0, r3
 8005648:	f000 f9f8 	bl	8005a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800565a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800566a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6999      	ldr	r1, [r3, #24]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	021a      	lsls	r2, r3, #8
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	619a      	str	r2, [r3, #24]
      break;
 8005680:	e043      	b.n	800570a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fa41 	bl	8005b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0208 	orr.w	r2, r2, #8
 800569c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0204 	bic.w	r2, r2, #4
 80056ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69d9      	ldr	r1, [r3, #28]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	61da      	str	r2, [r3, #28]
      break;
 80056c0:	e023      	b.n	800570a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fa8b 	bl	8005be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69d9      	ldr	r1, [r3, #28]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	021a      	lsls	r2, r3, #8
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	61da      	str	r2, [r3, #28]
      break;
 8005702:	e002      	b.n	800570a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	75fb      	strb	r3, [r7, #23]
      break;
 8005708:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005712:	7dfb      	ldrb	r3, [r7, #23]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_TIM_ConfigClockSource+0x1c>
 8005734:	2302      	movs	r3, #2
 8005736:	e0b4      	b.n	80058a2 <HAL_TIM_ConfigClockSource+0x186>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800575e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005770:	d03e      	beq.n	80057f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005776:	f200 8087 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x16c>
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800577e:	f000 8086 	beq.w	800588e <HAL_TIM_ConfigClockSource+0x172>
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005786:	d87f      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x16c>
 8005788:	2b70      	cmp	r3, #112	@ 0x70
 800578a:	d01a      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0xa6>
 800578c:	2b70      	cmp	r3, #112	@ 0x70
 800578e:	d87b      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x16c>
 8005790:	2b60      	cmp	r3, #96	@ 0x60
 8005792:	d050      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x11a>
 8005794:	2b60      	cmp	r3, #96	@ 0x60
 8005796:	d877      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x16c>
 8005798:	2b50      	cmp	r3, #80	@ 0x50
 800579a:	d03c      	beq.n	8005816 <HAL_TIM_ConfigClockSource+0xfa>
 800579c:	2b50      	cmp	r3, #80	@ 0x50
 800579e:	d873      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x16c>
 80057a0:	2b40      	cmp	r3, #64	@ 0x40
 80057a2:	d058      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x13a>
 80057a4:	2b40      	cmp	r3, #64	@ 0x40
 80057a6:	d86f      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x16c>
 80057a8:	2b30      	cmp	r3, #48	@ 0x30
 80057aa:	d064      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x15a>
 80057ac:	2b30      	cmp	r3, #48	@ 0x30
 80057ae:	d86b      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d060      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x15a>
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d867      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d05c      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x15a>
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d05a      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x15a>
 80057c0:	e062      	b.n	8005888 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057d2:	f000 facc 	bl	8005d6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	609a      	str	r2, [r3, #8]
      break;
 80057ee:	e04f      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005800:	f000 fab5 	bl	8005d6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005812:	609a      	str	r2, [r3, #8]
      break;
 8005814:	e03c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005822:	461a      	mov	r2, r3
 8005824:	f000 fa2c 	bl	8005c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2150      	movs	r1, #80	@ 0x50
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fa83 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005834:	e02c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005842:	461a      	mov	r2, r3
 8005844:	f000 fa4a 	bl	8005cdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2160      	movs	r1, #96	@ 0x60
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fa73 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005854:	e01c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005862:	461a      	mov	r2, r3
 8005864:	f000 fa0c 	bl	8005c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2140      	movs	r1, #64	@ 0x40
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fa63 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005874:	e00c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f000 fa5a 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005886:	e003      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	73fb      	strb	r3, [r7, #15]
      break;
 800588c:	e000      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800588e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a29      	ldr	r2, [pc, #164]	@ (8005964 <TIM_Base_SetConfig+0xb8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00b      	beq.n	80058dc <TIM_Base_SetConfig+0x30>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ca:	d007      	beq.n	80058dc <TIM_Base_SetConfig+0x30>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a26      	ldr	r2, [pc, #152]	@ (8005968 <TIM_Base_SetConfig+0xbc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0x30>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a25      	ldr	r2, [pc, #148]	@ (800596c <TIM_Base_SetConfig+0xc0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d108      	bne.n	80058ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005964 <TIM_Base_SetConfig+0xb8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00b      	beq.n	800590e <TIM_Base_SetConfig+0x62>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058fc:	d007      	beq.n	800590e <TIM_Base_SetConfig+0x62>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a19      	ldr	r2, [pc, #100]	@ (8005968 <TIM_Base_SetConfig+0xbc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_Base_SetConfig+0x62>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a18      	ldr	r2, [pc, #96]	@ (800596c <TIM_Base_SetConfig+0xc0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d108      	bne.n	8005920 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a07      	ldr	r2, [pc, #28]	@ (8005964 <TIM_Base_SetConfig+0xb8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d103      	bne.n	8005954 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	615a      	str	r2, [r3, #20]
}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr
 8005964:	40012c00 	.word	0x40012c00
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800

08005970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f023 0201 	bic.w	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0303 	bic.w	r3, r3, #3
 80059a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 0302 	bic.w	r3, r3, #2
 80059b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a38 <TIM_OC1_SetConfig+0xc8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d10c      	bne.n	80059e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0308 	bic.w	r3, r3, #8
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 0304 	bic.w	r3, r3, #4
 80059e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a13      	ldr	r2, [pc, #76]	@ (8005a38 <TIM_OC1_SetConfig+0xc8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d111      	bne.n	8005a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00

08005a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f023 0210 	bic.w	r2, r3, #16
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0320 	bic.w	r3, r3, #32
 8005a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1d      	ldr	r2, [pc, #116]	@ (8005b0c <TIM_OC2_SetConfig+0xd0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d10d      	bne.n	8005ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a14      	ldr	r2, [pc, #80]	@ (8005b0c <TIM_OC2_SetConfig+0xd0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d113      	bne.n	8005ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00

08005b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	@ (8005be0 <TIM_OC3_SetConfig+0xd0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d10d      	bne.n	8005b8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a14      	ldr	r2, [pc, #80]	@ (8005be0 <TIM_OC3_SetConfig+0xd0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d113      	bne.n	8005bba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	621a      	str	r2, [r3, #32]
}
 8005bd4:	bf00      	nop
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40012c00 	.word	0x40012c00

08005be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	031b      	lsls	r3, r3, #12
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8005c7c <TIM_OC4_SetConfig+0x98>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d109      	bne.n	8005c58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	019b      	lsls	r3, r3, #6
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr
 8005c7c:	40012c00 	.word	0x40012c00

08005c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f023 0201 	bic.w	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f023 030a 	bic.w	r3, r3, #10
 8005cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0210 	bic.w	r2, r3, #16
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	031b      	lsls	r3, r3, #12
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	621a      	str	r2, [r3, #32]
}
 8005d30:	bf00      	nop
 8005d32:	371c      	adds	r7, #28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f043 0307 	orr.w	r3, r3, #7
 8005d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	609a      	str	r2, [r3, #8]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	021a      	lsls	r2, r3, #8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	609a      	str	r2, [r3, #8]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr

08005dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	401a      	ands	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1a      	ldr	r2, [r3, #32]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	431a      	orrs	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e046      	b.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a16      	ldr	r2, [pc, #88]	@ (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00e      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e58:	d009      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a12      	ldr	r2, [pc, #72]	@ (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a10      	ldr	r2, [pc, #64]	@ (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d10c      	bne.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800

08005eb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e03d      	b.n	8005f48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e042      	b.n	8005fea <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d106      	bne.n	8005f7e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7fc fa85 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2224      	movs	r2, #36	@ 0x24
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f94:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fe02 	bl	8006ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005faa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b08a      	sub	sp, #40	@ 0x28
 8005ff6:	af02      	add	r7, sp, #8
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	603b      	str	r3, [r7, #0]
 8005ffe:	4613      	mov	r3, r2
 8006000:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b20      	cmp	r3, #32
 8006010:	d16d      	bne.n	80060ee <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_UART_Transmit+0x2c>
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e066      	b.n	80060f0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2221      	movs	r2, #33	@ 0x21
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006030:	f7fc fcc4 	bl	80029bc <HAL_GetTick>
 8006034:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	88fa      	ldrh	r2, [r7, #6]
 800603a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	88fa      	ldrh	r2, [r7, #6]
 8006040:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800604a:	d108      	bne.n	800605e <HAL_UART_Transmit+0x6c>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006054:	2300      	movs	r3, #0
 8006056:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e003      	b.n	8006066 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006066:	e02a      	b.n	80060be <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	2180      	movs	r1, #128	@ 0x80
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fb8a 	bl	800678c <UART_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e036      	b.n	80060f0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006096:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	3302      	adds	r3, #2
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	e007      	b.n	80060b0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	781a      	ldrb	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	3301      	adds	r3, #1
 80060ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1cf      	bne.n	8006068 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	2140      	movs	r1, #64	@ 0x40
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fb5a 	bl	800678c <UART_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e006      	b.n	80060f0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	e000      	b.n	80060f0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80060ee:	2302      	movs	r3, #2
  }
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	@ 0x28
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	4613      	mov	r3, r2
 8006106:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b20      	cmp	r3, #32
 8006116:	d17c      	bne.n	8006212 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_UART_Receive+0x2c>
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e075      	b.n	8006214 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2222      	movs	r2, #34	@ 0x22
 8006132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800613c:	f7fc fc3e 	bl	80029bc <HAL_GetTick>
 8006140:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006156:	d108      	bne.n	800616a <HAL_UART_Receive+0x72>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e003      	b.n	8006172 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006172:	e043      	b.n	80061fc <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2200      	movs	r2, #0
 800617c:	2120      	movs	r1, #32
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 fb04 	bl	800678c <UART_WaitOnFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e042      	b.n	8006214 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10c      	bne.n	80061ae <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	3302      	adds	r3, #2
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	e01f      	b.n	80061ee <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b6:	d007      	beq.n	80061c8 <HAL_UART_Receive+0xd0>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <HAL_UART_Receive+0xde>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e008      	b.n	80061e8 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	3301      	adds	r3, #1
 80061ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1b6      	bne.n	8006174 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b0ba      	sub	sp, #232	@ 0xe8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006242:	2300      	movs	r3, #0
 8006244:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006248:	2300      	movs	r3, #0
 800624a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800625a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10f      	bne.n	8006282 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <HAL_UART_IRQHandler+0x66>
 800626e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fbd1 	bl	8006a22 <UART_Receive_IT>
      return;
 8006280:	e25b      	b.n	800673a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80de 	beq.w	8006448 <HAL_UART_IRQHandler+0x22c>
 800628c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800629c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80d1 	beq.w	8006448 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_UART_IRQHandler+0xae>
 80062b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c2:	f043 0201 	orr.w	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <HAL_UART_IRQHandler+0xd2>
 80062d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e6:	f043 0202 	orr.w	r2, r3, #2
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <HAL_UART_IRQHandler+0xf6>
 80062fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630a:	f043 0204 	orr.w	r2, r3, #4
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d011      	beq.n	8006342 <HAL_UART_IRQHandler+0x126>
 800631e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d105      	bne.n	8006336 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800632a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633a:	f043 0208 	orr.w	r2, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 81f2 	beq.w	8006730 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b00      	cmp	r3, #0
 8006356:	d008      	beq.n	800636a <HAL_UART_IRQHandler+0x14e>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fb5c 	bl	8006a22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <HAL_UART_IRQHandler+0x17a>
 800638e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d04f      	beq.n	8006436 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa66 	bl	8006868 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d041      	beq.n	800642e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3314      	adds	r3, #20
 80063b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3314      	adds	r3, #20
 80063d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1d9      	bne.n	80063aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d013      	beq.n	8006426 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006402:	4a7e      	ldr	r2, [pc, #504]	@ (80065fc <HAL_UART_IRQHandler+0x3e0>)
 8006404:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640a:	4618      	mov	r0, r3
 800640c:	f7fd fa5e 	bl	80038cc <HAL_DMA_Abort_IT>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d016      	beq.n	8006444 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006420:	4610      	mov	r0, r2
 8006422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006424:	e00e      	b.n	8006444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f99c 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642c:	e00a      	b.n	8006444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f998 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006434:	e006      	b.n	8006444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f994 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006442:	e175      	b.n	8006730 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006444:	bf00      	nop
    return;
 8006446:	e173      	b.n	8006730 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644c:	2b01      	cmp	r3, #1
 800644e:	f040 814f 	bne.w	80066f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 8148 	beq.w	80066f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8141 	beq.w	80066f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80b6 	beq.w	8006600 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8145 	beq.w	8006734 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064b2:	429a      	cmp	r2, r3
 80064b4:	f080 813e 	bcs.w	8006734 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	f000 8088 	beq.w	80065dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80064f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006504:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006510:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1d9      	bne.n	80064cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3314      	adds	r3, #20
 800651e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006528:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3314      	adds	r3, #20
 8006538:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800653c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006540:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006544:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800654e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e1      	bne.n	8006518 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3314      	adds	r3, #20
 800655a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006564:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800656a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3314      	adds	r3, #20
 8006574:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006578:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800657a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800657e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e3      	bne.n	8006554 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	330c      	adds	r3, #12
 80065a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ac:	f023 0310 	bic.w	r3, r3, #16
 80065b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065c0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e3      	bne.n	800659a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fd f93c 	bl	8003854 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f8bf 	bl	8006776 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065f8:	e09c      	b.n	8006734 <HAL_UART_IRQHandler+0x518>
 80065fa:	bf00      	nop
 80065fc:	0800692d 	.word	0x0800692d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006608:	b29b      	uxth	r3, r3
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 808e 	beq.w	8006738 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800661c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 8089 	beq.w	8006738 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800663c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	330c      	adds	r3, #12
 8006646:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800664a:	647a      	str	r2, [r7, #68]	@ 0x44
 800664c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e3      	bne.n	8006626 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3314      	adds	r3, #20
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	623b      	str	r3, [r7, #32]
   return(result);
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3314      	adds	r3, #20
 800667e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006682:	633a      	str	r2, [r7, #48]	@ 0x30
 8006684:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e3      	bne.n	800665e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	330c      	adds	r3, #12
 80066aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0310 	bic.w	r3, r3, #16
 80066ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	330c      	adds	r3, #12
 80066c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066c8:	61fa      	str	r2, [r7, #28]
 80066ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	69b9      	ldr	r1, [r7, #24]
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	617b      	str	r3, [r7, #20]
   return(result);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e3      	bne.n	80066a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f844 	bl	8006776 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066ee:	e023      	b.n	8006738 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d009      	beq.n	8006710 <HAL_UART_IRQHandler+0x4f4>
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f923 	bl	8006954 <UART_Transmit_IT>
    return;
 800670e:	e014      	b.n	800673a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00e      	beq.n	800673a <HAL_UART_IRQHandler+0x51e>
 800671c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f962 	bl	80069f2 <UART_EndTransmit_IT>
    return;
 800672e:	e004      	b.n	800673a <HAL_UART_IRQHandler+0x51e>
    return;
 8006730:	bf00      	nop
 8006732:	e002      	b.n	800673a <HAL_UART_IRQHandler+0x51e>
      return;
 8006734:	bf00      	nop
 8006736:	e000      	b.n	800673a <HAL_UART_IRQHandler+0x51e>
      return;
 8006738:	bf00      	nop
  }
}
 800673a:	37e8      	adds	r7, #232	@ 0xe8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr

08006752 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	460b      	mov	r3, r1
 8006780:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b090      	sub	sp, #64	@ 0x40
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679c:	e050      	b.n	8006840 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d04c      	beq.n	8006840 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <UART_WaitOnFlagUntilTimeout+0x30>
 80067ac:	f7fc f906 	bl	80029bc <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d241      	bcs.n	8006840 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ce:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80067d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80067de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80067ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e5      	bne.n	80067bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3314      	adds	r3, #20
 80067f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f023 0301 	bic.w	r3, r3, #1
 8006806:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3314      	adds	r3, #20
 800680e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006810:	623a      	str	r2, [r7, #32]
 8006812:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	69f9      	ldr	r1, [r7, #28]
 8006816:	6a3a      	ldr	r2, [r7, #32]
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	61bb      	str	r3, [r7, #24]
   return(result);
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e5      	bne.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e00f      	b.n	8006860 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	4013      	ands	r3, r2
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	429a      	cmp	r2, r3
 800684e:	bf0c      	ite	eq
 8006850:	2301      	moveq	r3, #1
 8006852:	2300      	movne	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	429a      	cmp	r2, r3
 800685c:	d09f      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3740      	adds	r7, #64	@ 0x40
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b095      	sub	sp, #84	@ 0x54
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	330c      	adds	r3, #12
 800688e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006890:	643a      	str	r2, [r7, #64]	@ 0x40
 8006892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006896:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3314      	adds	r3, #20
 80068aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f023 0301 	bic.w	r3, r3, #1
 80068ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3314      	adds	r3, #20
 80068c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e5      	bne.n	80068a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d119      	bne.n	8006914 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	330c      	adds	r3, #12
 80068e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f023 0310 	bic.w	r3, r3, #16
 80068f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006900:	61ba      	str	r2, [r7, #24]
 8006902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6979      	ldr	r1, [r7, #20]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	613b      	str	r3, [r7, #16]
   return(result);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e5      	bne.n	80068e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006922:	bf00      	nop
 8006924:	3754      	adds	r7, #84	@ 0x54
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f7ff ff0c 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800694c:	bf00      	nop
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b21      	cmp	r3, #33	@ 0x21
 8006966:	d13e      	bne.n	80069e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006970:	d114      	bne.n	800699c <UART_Transmit_IT+0x48>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d110      	bne.n	800699c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800698e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	1c9a      	adds	r2, r3, #2
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	621a      	str	r2, [r3, #32]
 800699a:	e008      	b.n	80069ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6211      	str	r1, [r2, #32]
 80069a6:	781a      	ldrb	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	4619      	mov	r1, r3
 80069bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10f      	bne.n	80069e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	e000      	b.n	80069e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069e6:	2302      	movs	r3, #2
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr

080069f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7ff fe94 	bl	8006740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b08c      	sub	sp, #48	@ 0x30
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b22      	cmp	r3, #34	@ 0x22
 8006a34:	f040 80ae 	bne.w	8006b94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a40:	d117      	bne.n	8006a72 <UART_Receive_IT+0x50>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d113      	bne.n	8006a72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a52:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6a:	1c9a      	adds	r2, r3, #2
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a70:	e026      	b.n	8006ac0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a84:	d007      	beq.n	8006a96 <UART_Receive_IT+0x74>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <UART_Receive_IT+0x82>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	e008      	b.n	8006ab6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	4619      	mov	r1, r3
 8006ace:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d15d      	bne.n	8006b90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0220 	bic.w	r2, r2, #32
 8006ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695a      	ldr	r2, [r3, #20]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0201 	bic.w	r2, r2, #1
 8006b02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d135      	bne.n	8006b86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	330c      	adds	r3, #12
 8006b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f023 0310 	bic.w	r3, r3, #16
 8006b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b40:	623a      	str	r2, [r7, #32]
 8006b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	69f9      	ldr	r1, [r7, #28]
 8006b46:	6a3a      	ldr	r2, [r7, #32]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e5      	bne.n	8006b20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d10a      	bne.n	8006b78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff fdf9 	bl	8006776 <HAL_UARTEx_RxEventCallback>
 8006b84:	e002      	b.n	8006b8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff fde3 	bl	8006752 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e002      	b.n	8006b96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3730      	adds	r7, #48	@ 0x30
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006bda:	f023 030c 	bic.w	r3, r3, #12
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	430b      	orrs	r3, r1
 8006be6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a2c      	ldr	r2, [pc, #176]	@ (8006cb4 <UART_SetConfig+0x114>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d103      	bne.n	8006c10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c08:	f7fe fa4a 	bl	80050a0 <HAL_RCC_GetPCLK2Freq>
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	e002      	b.n	8006c16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c10:	f7fe fa32 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8006c14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009a      	lsls	r2, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2c:	4a22      	ldr	r2, [pc, #136]	@ (8006cb8 <UART_SetConfig+0x118>)
 8006c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	0119      	lsls	r1, r3, #4
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009a      	lsls	r2, r3, #2
 8006c40:	441a      	add	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb8 <UART_SetConfig+0x118>)
 8006c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	2064      	movs	r0, #100	@ 0x64
 8006c56:	fb00 f303 	mul.w	r3, r0, r3
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	3332      	adds	r3, #50	@ 0x32
 8006c60:	4a15      	ldr	r2, [pc, #84]	@ (8006cb8 <UART_SetConfig+0x118>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c6c:	4419      	add	r1, r3
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009a      	lsls	r2, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c84:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb8 <UART_SetConfig+0x118>)
 8006c86:	fba3 0302 	umull	r0, r3, r3, r2
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	2064      	movs	r0, #100	@ 0x64
 8006c8e:	fb00 f303 	mul.w	r3, r0, r3
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	3332      	adds	r3, #50	@ 0x32
 8006c98:	4a07      	ldr	r2, [pc, #28]	@ (8006cb8 <UART_SetConfig+0x118>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	f003 020f 	and.w	r2, r3, #15
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	440a      	add	r2, r1
 8006caa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40013800 	.word	0x40013800
 8006cb8:	51eb851f 	.word	0x51eb851f

08006cbc <atoi>:
 8006cbc:	220a      	movs	r2, #10
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	f000 b87c 	b.w	8006dbc <strtol>

08006cc4 <_strtol_l.constprop.0>:
 8006cc4:	2b24      	cmp	r3, #36	@ 0x24
 8006cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cca:	4686      	mov	lr, r0
 8006ccc:	4690      	mov	r8, r2
 8006cce:	d801      	bhi.n	8006cd4 <_strtol_l.constprop.0+0x10>
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d106      	bne.n	8006ce2 <_strtol_l.constprop.0+0x1e>
 8006cd4:	f001 f8d6 	bl	8007e84 <__errno>
 8006cd8:	2316      	movs	r3, #22
 8006cda:	6003      	str	r3, [r0, #0]
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	4833      	ldr	r0, [pc, #204]	@ (8006db4 <_strtol_l.constprop.0+0xf0>)
 8006ce6:	462a      	mov	r2, r5
 8006ce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cec:	5d06      	ldrb	r6, [r0, r4]
 8006cee:	f016 0608 	ands.w	r6, r6, #8
 8006cf2:	d1f8      	bne.n	8006ce6 <_strtol_l.constprop.0+0x22>
 8006cf4:	2c2d      	cmp	r4, #45	@ 0x2d
 8006cf6:	d12d      	bne.n	8006d54 <_strtol_l.constprop.0+0x90>
 8006cf8:	2601      	movs	r6, #1
 8006cfa:	782c      	ldrb	r4, [r5, #0]
 8006cfc:	1c95      	adds	r5, r2, #2
 8006cfe:	f033 0210 	bics.w	r2, r3, #16
 8006d02:	d109      	bne.n	8006d18 <_strtol_l.constprop.0+0x54>
 8006d04:	2c30      	cmp	r4, #48	@ 0x30
 8006d06:	d12a      	bne.n	8006d5e <_strtol_l.constprop.0+0x9a>
 8006d08:	782a      	ldrb	r2, [r5, #0]
 8006d0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d0e:	2a58      	cmp	r2, #88	@ 0x58
 8006d10:	d125      	bne.n	8006d5e <_strtol_l.constprop.0+0x9a>
 8006d12:	2310      	movs	r3, #16
 8006d14:	786c      	ldrb	r4, [r5, #1]
 8006d16:	3502      	adds	r5, #2
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006d1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006d22:	fbbc f9f3 	udiv	r9, ip, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	fb03 ca19 	mls	sl, r3, r9, ip
 8006d2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006d30:	2f09      	cmp	r7, #9
 8006d32:	d81b      	bhi.n	8006d6c <_strtol_l.constprop.0+0xa8>
 8006d34:	463c      	mov	r4, r7
 8006d36:	42a3      	cmp	r3, r4
 8006d38:	dd27      	ble.n	8006d8a <_strtol_l.constprop.0+0xc6>
 8006d3a:	1c57      	adds	r7, r2, #1
 8006d3c:	d007      	beq.n	8006d4e <_strtol_l.constprop.0+0x8a>
 8006d3e:	4581      	cmp	r9, r0
 8006d40:	d320      	bcc.n	8006d84 <_strtol_l.constprop.0+0xc0>
 8006d42:	d101      	bne.n	8006d48 <_strtol_l.constprop.0+0x84>
 8006d44:	45a2      	cmp	sl, r4
 8006d46:	db1d      	blt.n	8006d84 <_strtol_l.constprop.0+0xc0>
 8006d48:	2201      	movs	r2, #1
 8006d4a:	fb00 4003 	mla	r0, r0, r3, r4
 8006d4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d52:	e7eb      	b.n	8006d2c <_strtol_l.constprop.0+0x68>
 8006d54:	2c2b      	cmp	r4, #43	@ 0x2b
 8006d56:	bf04      	itt	eq
 8006d58:	782c      	ldrbeq	r4, [r5, #0]
 8006d5a:	1c95      	addeq	r5, r2, #2
 8006d5c:	e7cf      	b.n	8006cfe <_strtol_l.constprop.0+0x3a>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1da      	bne.n	8006d18 <_strtol_l.constprop.0+0x54>
 8006d62:	2c30      	cmp	r4, #48	@ 0x30
 8006d64:	bf0c      	ite	eq
 8006d66:	2308      	moveq	r3, #8
 8006d68:	230a      	movne	r3, #10
 8006d6a:	e7d5      	b.n	8006d18 <_strtol_l.constprop.0+0x54>
 8006d6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006d70:	2f19      	cmp	r7, #25
 8006d72:	d801      	bhi.n	8006d78 <_strtol_l.constprop.0+0xb4>
 8006d74:	3c37      	subs	r4, #55	@ 0x37
 8006d76:	e7de      	b.n	8006d36 <_strtol_l.constprop.0+0x72>
 8006d78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006d7c:	2f19      	cmp	r7, #25
 8006d7e:	d804      	bhi.n	8006d8a <_strtol_l.constprop.0+0xc6>
 8006d80:	3c57      	subs	r4, #87	@ 0x57
 8006d82:	e7d8      	b.n	8006d36 <_strtol_l.constprop.0+0x72>
 8006d84:	f04f 32ff 	mov.w	r2, #4294967295
 8006d88:	e7e1      	b.n	8006d4e <_strtol_l.constprop.0+0x8a>
 8006d8a:	1c53      	adds	r3, r2, #1
 8006d8c:	d108      	bne.n	8006da0 <_strtol_l.constprop.0+0xdc>
 8006d8e:	2322      	movs	r3, #34	@ 0x22
 8006d90:	4660      	mov	r0, ip
 8006d92:	f8ce 3000 	str.w	r3, [lr]
 8006d96:	f1b8 0f00 	cmp.w	r8, #0
 8006d9a:	d0a0      	beq.n	8006cde <_strtol_l.constprop.0+0x1a>
 8006d9c:	1e69      	subs	r1, r5, #1
 8006d9e:	e006      	b.n	8006dae <_strtol_l.constprop.0+0xea>
 8006da0:	b106      	cbz	r6, 8006da4 <_strtol_l.constprop.0+0xe0>
 8006da2:	4240      	negs	r0, r0
 8006da4:	f1b8 0f00 	cmp.w	r8, #0
 8006da8:	d099      	beq.n	8006cde <_strtol_l.constprop.0+0x1a>
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	d1f6      	bne.n	8006d9c <_strtol_l.constprop.0+0xd8>
 8006dae:	f8c8 1000 	str.w	r1, [r8]
 8006db2:	e794      	b.n	8006cde <_strtol_l.constprop.0+0x1a>
 8006db4:	0800e447 	.word	0x0800e447

08006db8 <_strtol_r>:
 8006db8:	f7ff bf84 	b.w	8006cc4 <_strtol_l.constprop.0>

08006dbc <strtol>:
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	4601      	mov	r1, r0
 8006dc2:	4802      	ldr	r0, [pc, #8]	@ (8006dcc <strtol+0x10>)
 8006dc4:	6800      	ldr	r0, [r0, #0]
 8006dc6:	f7ff bf7d 	b.w	8006cc4 <_strtol_l.constprop.0>
 8006dca:	bf00      	nop
 8006dcc:	2000003c 	.word	0x2000003c

08006dd0 <__cvt>:
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd6:	461d      	mov	r5, r3
 8006dd8:	bfbb      	ittet	lt
 8006dda:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006dde:	461d      	movlt	r5, r3
 8006de0:	2300      	movge	r3, #0
 8006de2:	232d      	movlt	r3, #45	@ 0x2d
 8006de4:	b088      	sub	sp, #32
 8006de6:	4614      	mov	r4, r2
 8006de8:	bfb8      	it	lt
 8006dea:	4614      	movlt	r4, r2
 8006dec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006dee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006df0:	7013      	strb	r3, [r2, #0]
 8006df2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006df4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006df8:	f023 0820 	bic.w	r8, r3, #32
 8006dfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e00:	d005      	beq.n	8006e0e <__cvt+0x3e>
 8006e02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e06:	d100      	bne.n	8006e0a <__cvt+0x3a>
 8006e08:	3601      	adds	r6, #1
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e000      	b.n	8006e10 <__cvt+0x40>
 8006e0e:	2303      	movs	r3, #3
 8006e10:	aa07      	add	r2, sp, #28
 8006e12:	9204      	str	r2, [sp, #16]
 8006e14:	aa06      	add	r2, sp, #24
 8006e16:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006e1a:	e9cd 3600 	strd	r3, r6, [sp]
 8006e1e:	4622      	mov	r2, r4
 8006e20:	462b      	mov	r3, r5
 8006e22:	f001 f91d 	bl	8008060 <_dtoa_r>
 8006e26:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	d119      	bne.n	8006e62 <__cvt+0x92>
 8006e2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e30:	07db      	lsls	r3, r3, #31
 8006e32:	d50e      	bpl.n	8006e52 <__cvt+0x82>
 8006e34:	eb00 0906 	add.w	r9, r0, r6
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4629      	mov	r1, r5
 8006e40:	f7f9 fe66 	bl	8000b10 <__aeabi_dcmpeq>
 8006e44:	b108      	cbz	r0, 8006e4a <__cvt+0x7a>
 8006e46:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e4a:	2230      	movs	r2, #48	@ 0x30
 8006e4c:	9b07      	ldr	r3, [sp, #28]
 8006e4e:	454b      	cmp	r3, r9
 8006e50:	d31e      	bcc.n	8006e90 <__cvt+0xc0>
 8006e52:	4638      	mov	r0, r7
 8006e54:	9b07      	ldr	r3, [sp, #28]
 8006e56:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006e58:	1bdb      	subs	r3, r3, r7
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	b008      	add	sp, #32
 8006e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e62:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e66:	eb00 0906 	add.w	r9, r0, r6
 8006e6a:	d1e5      	bne.n	8006e38 <__cvt+0x68>
 8006e6c:	7803      	ldrb	r3, [r0, #0]
 8006e6e:	2b30      	cmp	r3, #48	@ 0x30
 8006e70:	d10a      	bne.n	8006e88 <__cvt+0xb8>
 8006e72:	2200      	movs	r2, #0
 8006e74:	2300      	movs	r3, #0
 8006e76:	4620      	mov	r0, r4
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7f9 fe49 	bl	8000b10 <__aeabi_dcmpeq>
 8006e7e:	b918      	cbnz	r0, 8006e88 <__cvt+0xb8>
 8006e80:	f1c6 0601 	rsb	r6, r6, #1
 8006e84:	f8ca 6000 	str.w	r6, [sl]
 8006e88:	f8da 3000 	ldr.w	r3, [sl]
 8006e8c:	4499      	add	r9, r3
 8006e8e:	e7d3      	b.n	8006e38 <__cvt+0x68>
 8006e90:	1c59      	adds	r1, r3, #1
 8006e92:	9107      	str	r1, [sp, #28]
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	e7d9      	b.n	8006e4c <__cvt+0x7c>

08006e98 <__exponent>:
 8006e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e9a:	2900      	cmp	r1, #0
 8006e9c:	bfb6      	itet	lt
 8006e9e:	232d      	movlt	r3, #45	@ 0x2d
 8006ea0:	232b      	movge	r3, #43	@ 0x2b
 8006ea2:	4249      	neglt	r1, r1
 8006ea4:	2909      	cmp	r1, #9
 8006ea6:	7002      	strb	r2, [r0, #0]
 8006ea8:	7043      	strb	r3, [r0, #1]
 8006eaa:	dd29      	ble.n	8006f00 <__exponent+0x68>
 8006eac:	f10d 0307 	add.w	r3, sp, #7
 8006eb0:	461d      	mov	r5, r3
 8006eb2:	270a      	movs	r7, #10
 8006eb4:	fbb1 f6f7 	udiv	r6, r1, r7
 8006eb8:	461a      	mov	r2, r3
 8006eba:	fb07 1416 	mls	r4, r7, r6, r1
 8006ebe:	3430      	adds	r4, #48	@ 0x30
 8006ec0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	2c63      	cmp	r4, #99	@ 0x63
 8006ec8:	4631      	mov	r1, r6
 8006eca:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ece:	dcf1      	bgt.n	8006eb4 <__exponent+0x1c>
 8006ed0:	3130      	adds	r1, #48	@ 0x30
 8006ed2:	1e94      	subs	r4, r2, #2
 8006ed4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ed8:	4623      	mov	r3, r4
 8006eda:	1c41      	adds	r1, r0, #1
 8006edc:	42ab      	cmp	r3, r5
 8006ede:	d30a      	bcc.n	8006ef6 <__exponent+0x5e>
 8006ee0:	f10d 0309 	add.w	r3, sp, #9
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	42ac      	cmp	r4, r5
 8006ee8:	bf88      	it	hi
 8006eea:	2300      	movhi	r3, #0
 8006eec:	3302      	adds	r3, #2
 8006eee:	4403      	add	r3, r0
 8006ef0:	1a18      	subs	r0, r3, r0
 8006ef2:	b003      	add	sp, #12
 8006ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006efa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006efe:	e7ed      	b.n	8006edc <__exponent+0x44>
 8006f00:	2330      	movs	r3, #48	@ 0x30
 8006f02:	3130      	adds	r1, #48	@ 0x30
 8006f04:	7083      	strb	r3, [r0, #2]
 8006f06:	70c1      	strb	r1, [r0, #3]
 8006f08:	1d03      	adds	r3, r0, #4
 8006f0a:	e7f1      	b.n	8006ef0 <__exponent+0x58>

08006f0c <_printf_float>:
 8006f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	b091      	sub	sp, #68	@ 0x44
 8006f12:	460c      	mov	r4, r1
 8006f14:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006f18:	4616      	mov	r6, r2
 8006f1a:	461f      	mov	r7, r3
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	f000 ff67 	bl	8007df0 <_localeconv_r>
 8006f22:	6803      	ldr	r3, [r0, #0]
 8006f24:	4618      	mov	r0, r3
 8006f26:	9308      	str	r3, [sp, #32]
 8006f28:	f7f9 f912 	bl	8000150 <strlen>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f30:	f8d8 3000 	ldr.w	r3, [r8]
 8006f34:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f36:	3307      	adds	r3, #7
 8006f38:	f023 0307 	bic.w	r3, r3, #7
 8006f3c:	f103 0208 	add.w	r2, r3, #8
 8006f40:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f44:	f8d4 b000 	ldr.w	fp, [r4]
 8006f48:	f8c8 2000 	str.w	r2, [r8]
 8006f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f56:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f66:	4b9c      	ldr	r3, [pc, #624]	@ (80071d8 <_printf_float+0x2cc>)
 8006f68:	f7f9 fe04 	bl	8000b74 <__aeabi_dcmpun>
 8006f6c:	bb70      	cbnz	r0, 8006fcc <_printf_float+0xc0>
 8006f6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f72:	f04f 32ff 	mov.w	r2, #4294967295
 8006f76:	4b98      	ldr	r3, [pc, #608]	@ (80071d8 <_printf_float+0x2cc>)
 8006f78:	f7f9 fdde 	bl	8000b38 <__aeabi_dcmple>
 8006f7c:	bb30      	cbnz	r0, 8006fcc <_printf_float+0xc0>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2300      	movs	r3, #0
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 fdcd 	bl	8000b24 <__aeabi_dcmplt>
 8006f8a:	b110      	cbz	r0, 8006f92 <_printf_float+0x86>
 8006f8c:	232d      	movs	r3, #45	@ 0x2d
 8006f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f92:	4a92      	ldr	r2, [pc, #584]	@ (80071dc <_printf_float+0x2d0>)
 8006f94:	4b92      	ldr	r3, [pc, #584]	@ (80071e0 <_printf_float+0x2d4>)
 8006f96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f9a:	bf94      	ite	ls
 8006f9c:	4690      	movls	r8, r2
 8006f9e:	4698      	movhi	r8, r3
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	f04f 0900 	mov.w	r9, #0
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	f02b 0304 	bic.w	r3, fp, #4
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	4633      	mov	r3, r6
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	9700      	str	r7, [sp, #0]
 8006fb6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006fb8:	f000 f9d4 	bl	8007364 <_printf_common>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	f040 8090 	bne.w	80070e2 <_printf_float+0x1d6>
 8006fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc6:	b011      	add	sp, #68	@ 0x44
 8006fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	f7f9 fdce 	bl	8000b74 <__aeabi_dcmpun>
 8006fd8:	b148      	cbz	r0, 8006fee <_printf_float+0xe2>
 8006fda:	464b      	mov	r3, r9
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bfb8      	it	lt
 8006fe0:	232d      	movlt	r3, #45	@ 0x2d
 8006fe2:	4a80      	ldr	r2, [pc, #512]	@ (80071e4 <_printf_float+0x2d8>)
 8006fe4:	bfb8      	it	lt
 8006fe6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006fea:	4b7f      	ldr	r3, [pc, #508]	@ (80071e8 <_printf_float+0x2dc>)
 8006fec:	e7d3      	b.n	8006f96 <_printf_float+0x8a>
 8006fee:	6863      	ldr	r3, [r4, #4]
 8006ff0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	d13f      	bne.n	8007078 <_printf_float+0x16c>
 8006ff8:	2306      	movs	r3, #6
 8006ffa:	6063      	str	r3, [r4, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	9206      	str	r2, [sp, #24]
 8007006:	aa0e      	add	r2, sp, #56	@ 0x38
 8007008:	e9cd a204 	strd	sl, r2, [sp, #16]
 800700c:	aa0d      	add	r2, sp, #52	@ 0x34
 800700e:	9203      	str	r2, [sp, #12]
 8007010:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007014:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	4642      	mov	r2, r8
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	4628      	mov	r0, r5
 8007020:	464b      	mov	r3, r9
 8007022:	910a      	str	r1, [sp, #40]	@ 0x28
 8007024:	f7ff fed4 	bl	8006dd0 <__cvt>
 8007028:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800702a:	4680      	mov	r8, r0
 800702c:	2947      	cmp	r1, #71	@ 0x47
 800702e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007030:	d128      	bne.n	8007084 <_printf_float+0x178>
 8007032:	1cc8      	adds	r0, r1, #3
 8007034:	db02      	blt.n	800703c <_printf_float+0x130>
 8007036:	6863      	ldr	r3, [r4, #4]
 8007038:	4299      	cmp	r1, r3
 800703a:	dd40      	ble.n	80070be <_printf_float+0x1b2>
 800703c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007040:	fa5f fa8a 	uxtb.w	sl, sl
 8007044:	4652      	mov	r2, sl
 8007046:	3901      	subs	r1, #1
 8007048:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800704c:	910d      	str	r1, [sp, #52]	@ 0x34
 800704e:	f7ff ff23 	bl	8006e98 <__exponent>
 8007052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007054:	4681      	mov	r9, r0
 8007056:	1813      	adds	r3, r2, r0
 8007058:	2a01      	cmp	r2, #1
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	dc02      	bgt.n	8007064 <_printf_float+0x158>
 800705e:	6822      	ldr	r2, [r4, #0]
 8007060:	07d2      	lsls	r2, r2, #31
 8007062:	d501      	bpl.n	8007068 <_printf_float+0x15c>
 8007064:	3301      	adds	r3, #1
 8007066:	6123      	str	r3, [r4, #16]
 8007068:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800706c:	2b00      	cmp	r3, #0
 800706e:	d09e      	beq.n	8006fae <_printf_float+0xa2>
 8007070:	232d      	movs	r3, #45	@ 0x2d
 8007072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007076:	e79a      	b.n	8006fae <_printf_float+0xa2>
 8007078:	2947      	cmp	r1, #71	@ 0x47
 800707a:	d1bf      	bne.n	8006ffc <_printf_float+0xf0>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1bd      	bne.n	8006ffc <_printf_float+0xf0>
 8007080:	2301      	movs	r3, #1
 8007082:	e7ba      	b.n	8006ffa <_printf_float+0xee>
 8007084:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007088:	d9dc      	bls.n	8007044 <_printf_float+0x138>
 800708a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800708e:	d118      	bne.n	80070c2 <_printf_float+0x1b6>
 8007090:	2900      	cmp	r1, #0
 8007092:	6863      	ldr	r3, [r4, #4]
 8007094:	dd0b      	ble.n	80070ae <_printf_float+0x1a2>
 8007096:	6121      	str	r1, [r4, #16]
 8007098:	b913      	cbnz	r3, 80070a0 <_printf_float+0x194>
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	07d0      	lsls	r0, r2, #31
 800709e:	d502      	bpl.n	80070a6 <_printf_float+0x19a>
 80070a0:	3301      	adds	r3, #1
 80070a2:	440b      	add	r3, r1
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	f04f 0900 	mov.w	r9, #0
 80070aa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070ac:	e7dc      	b.n	8007068 <_printf_float+0x15c>
 80070ae:	b913      	cbnz	r3, 80070b6 <_printf_float+0x1aa>
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	07d2      	lsls	r2, r2, #31
 80070b4:	d501      	bpl.n	80070ba <_printf_float+0x1ae>
 80070b6:	3302      	adds	r3, #2
 80070b8:	e7f4      	b.n	80070a4 <_printf_float+0x198>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e7f2      	b.n	80070a4 <_printf_float+0x198>
 80070be:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070c4:	4299      	cmp	r1, r3
 80070c6:	db05      	blt.n	80070d4 <_printf_float+0x1c8>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	6121      	str	r1, [r4, #16]
 80070cc:	07d8      	lsls	r0, r3, #31
 80070ce:	d5ea      	bpl.n	80070a6 <_printf_float+0x19a>
 80070d0:	1c4b      	adds	r3, r1, #1
 80070d2:	e7e7      	b.n	80070a4 <_printf_float+0x198>
 80070d4:	2900      	cmp	r1, #0
 80070d6:	bfcc      	ite	gt
 80070d8:	2201      	movgt	r2, #1
 80070da:	f1c1 0202 	rsble	r2, r1, #2
 80070de:	4413      	add	r3, r2
 80070e0:	e7e0      	b.n	80070a4 <_printf_float+0x198>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	055a      	lsls	r2, r3, #21
 80070e6:	d407      	bmi.n	80070f8 <_printf_float+0x1ec>
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	4642      	mov	r2, r8
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	d12b      	bne.n	800714e <_printf_float+0x242>
 80070f6:	e764      	b.n	8006fc2 <_printf_float+0xb6>
 80070f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070fc:	f240 80dc 	bls.w	80072b8 <_printf_float+0x3ac>
 8007100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	f7f9 fd02 	bl	8000b10 <__aeabi_dcmpeq>
 800710c:	2800      	cmp	r0, #0
 800710e:	d033      	beq.n	8007178 <_printf_float+0x26c>
 8007110:	2301      	movs	r3, #1
 8007112:	4631      	mov	r1, r6
 8007114:	4628      	mov	r0, r5
 8007116:	4a35      	ldr	r2, [pc, #212]	@ (80071ec <_printf_float+0x2e0>)
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f af51 	beq.w	8006fc2 <_printf_float+0xb6>
 8007120:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007124:	4543      	cmp	r3, r8
 8007126:	db02      	blt.n	800712e <_printf_float+0x222>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	07d8      	lsls	r0, r3, #31
 800712c:	d50f      	bpl.n	800714e <_printf_float+0x242>
 800712e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	f43f af42 	beq.w	8006fc2 <_printf_float+0xb6>
 800713e:	f04f 0900 	mov.w	r9, #0
 8007142:	f108 38ff 	add.w	r8, r8, #4294967295
 8007146:	f104 0a1a 	add.w	sl, r4, #26
 800714a:	45c8      	cmp	r8, r9
 800714c:	dc09      	bgt.n	8007162 <_printf_float+0x256>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	079b      	lsls	r3, r3, #30
 8007152:	f100 8102 	bmi.w	800735a <_printf_float+0x44e>
 8007156:	68e0      	ldr	r0, [r4, #12]
 8007158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800715a:	4298      	cmp	r0, r3
 800715c:	bfb8      	it	lt
 800715e:	4618      	movlt	r0, r3
 8007160:	e731      	b.n	8006fc6 <_printf_float+0xba>
 8007162:	2301      	movs	r3, #1
 8007164:	4652      	mov	r2, sl
 8007166:	4631      	mov	r1, r6
 8007168:	4628      	mov	r0, r5
 800716a:	47b8      	blx	r7
 800716c:	3001      	adds	r0, #1
 800716e:	f43f af28 	beq.w	8006fc2 <_printf_float+0xb6>
 8007172:	f109 0901 	add.w	r9, r9, #1
 8007176:	e7e8      	b.n	800714a <_printf_float+0x23e>
 8007178:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800717a:	2b00      	cmp	r3, #0
 800717c:	dc38      	bgt.n	80071f0 <_printf_float+0x2e4>
 800717e:	2301      	movs	r3, #1
 8007180:	4631      	mov	r1, r6
 8007182:	4628      	mov	r0, r5
 8007184:	4a19      	ldr	r2, [pc, #100]	@ (80071ec <_printf_float+0x2e0>)
 8007186:	47b8      	blx	r7
 8007188:	3001      	adds	r0, #1
 800718a:	f43f af1a 	beq.w	8006fc2 <_printf_float+0xb6>
 800718e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007192:	ea59 0303 	orrs.w	r3, r9, r3
 8007196:	d102      	bne.n	800719e <_printf_float+0x292>
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	07d9      	lsls	r1, r3, #31
 800719c:	d5d7      	bpl.n	800714e <_printf_float+0x242>
 800719e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80071a2:	4631      	mov	r1, r6
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b8      	blx	r7
 80071a8:	3001      	adds	r0, #1
 80071aa:	f43f af0a 	beq.w	8006fc2 <_printf_float+0xb6>
 80071ae:	f04f 0a00 	mov.w	sl, #0
 80071b2:	f104 0b1a 	add.w	fp, r4, #26
 80071b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071b8:	425b      	negs	r3, r3
 80071ba:	4553      	cmp	r3, sl
 80071bc:	dc01      	bgt.n	80071c2 <_printf_float+0x2b6>
 80071be:	464b      	mov	r3, r9
 80071c0:	e793      	b.n	80070ea <_printf_float+0x1de>
 80071c2:	2301      	movs	r3, #1
 80071c4:	465a      	mov	r2, fp
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b8      	blx	r7
 80071cc:	3001      	adds	r0, #1
 80071ce:	f43f aef8 	beq.w	8006fc2 <_printf_float+0xb6>
 80071d2:	f10a 0a01 	add.w	sl, sl, #1
 80071d6:	e7ee      	b.n	80071b6 <_printf_float+0x2aa>
 80071d8:	7fefffff 	.word	0x7fefffff
 80071dc:	0800e547 	.word	0x0800e547
 80071e0:	0800e54b 	.word	0x0800e54b
 80071e4:	0800e54f 	.word	0x0800e54f
 80071e8:	0800e553 	.word	0x0800e553
 80071ec:	0800e557 	.word	0x0800e557
 80071f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071f2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80071f6:	4553      	cmp	r3, sl
 80071f8:	bfa8      	it	ge
 80071fa:	4653      	movge	r3, sl
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	4699      	mov	r9, r3
 8007200:	dc36      	bgt.n	8007270 <_printf_float+0x364>
 8007202:	f04f 0b00 	mov.w	fp, #0
 8007206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800720a:	f104 021a 	add.w	r2, r4, #26
 800720e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007210:	930a      	str	r3, [sp, #40]	@ 0x28
 8007212:	eba3 0309 	sub.w	r3, r3, r9
 8007216:	455b      	cmp	r3, fp
 8007218:	dc31      	bgt.n	800727e <_printf_float+0x372>
 800721a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800721c:	459a      	cmp	sl, r3
 800721e:	dc3a      	bgt.n	8007296 <_printf_float+0x38a>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	07da      	lsls	r2, r3, #31
 8007224:	d437      	bmi.n	8007296 <_printf_float+0x38a>
 8007226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007228:	ebaa 0903 	sub.w	r9, sl, r3
 800722c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800722e:	ebaa 0303 	sub.w	r3, sl, r3
 8007232:	4599      	cmp	r9, r3
 8007234:	bfa8      	it	ge
 8007236:	4699      	movge	r9, r3
 8007238:	f1b9 0f00 	cmp.w	r9, #0
 800723c:	dc33      	bgt.n	80072a6 <_printf_float+0x39a>
 800723e:	f04f 0800 	mov.w	r8, #0
 8007242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007246:	f104 0b1a 	add.w	fp, r4, #26
 800724a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800724c:	ebaa 0303 	sub.w	r3, sl, r3
 8007250:	eba3 0309 	sub.w	r3, r3, r9
 8007254:	4543      	cmp	r3, r8
 8007256:	f77f af7a 	ble.w	800714e <_printf_float+0x242>
 800725a:	2301      	movs	r3, #1
 800725c:	465a      	mov	r2, fp
 800725e:	4631      	mov	r1, r6
 8007260:	4628      	mov	r0, r5
 8007262:	47b8      	blx	r7
 8007264:	3001      	adds	r0, #1
 8007266:	f43f aeac 	beq.w	8006fc2 <_printf_float+0xb6>
 800726a:	f108 0801 	add.w	r8, r8, #1
 800726e:	e7ec      	b.n	800724a <_printf_float+0x33e>
 8007270:	4642      	mov	r2, r8
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	d1c2      	bne.n	8007202 <_printf_float+0x2f6>
 800727c:	e6a1      	b.n	8006fc2 <_printf_float+0xb6>
 800727e:	2301      	movs	r3, #1
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	920a      	str	r2, [sp, #40]	@ 0x28
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	f43f ae9a 	beq.w	8006fc2 <_printf_float+0xb6>
 800728e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007290:	f10b 0b01 	add.w	fp, fp, #1
 8007294:	e7bb      	b.n	800720e <_printf_float+0x302>
 8007296:	4631      	mov	r1, r6
 8007298:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800729c:	4628      	mov	r0, r5
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	d1c0      	bne.n	8007226 <_printf_float+0x31a>
 80072a4:	e68d      	b.n	8006fc2 <_printf_float+0xb6>
 80072a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072a8:	464b      	mov	r3, r9
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	4442      	add	r2, r8
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	d1c3      	bne.n	800723e <_printf_float+0x332>
 80072b6:	e684      	b.n	8006fc2 <_printf_float+0xb6>
 80072b8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80072bc:	f1ba 0f01 	cmp.w	sl, #1
 80072c0:	dc01      	bgt.n	80072c6 <_printf_float+0x3ba>
 80072c2:	07db      	lsls	r3, r3, #31
 80072c4:	d536      	bpl.n	8007334 <_printf_float+0x428>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4642      	mov	r2, r8
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	47b8      	blx	r7
 80072d0:	3001      	adds	r0, #1
 80072d2:	f43f ae76 	beq.w	8006fc2 <_printf_float+0xb6>
 80072d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	47b8      	blx	r7
 80072e0:	3001      	adds	r0, #1
 80072e2:	f43f ae6e 	beq.w	8006fc2 <_printf_float+0xb6>
 80072e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072ea:	2200      	movs	r2, #0
 80072ec:	2300      	movs	r3, #0
 80072ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072f2:	f7f9 fc0d 	bl	8000b10 <__aeabi_dcmpeq>
 80072f6:	b9c0      	cbnz	r0, 800732a <_printf_float+0x41e>
 80072f8:	4653      	mov	r3, sl
 80072fa:	f108 0201 	add.w	r2, r8, #1
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	47b8      	blx	r7
 8007304:	3001      	adds	r0, #1
 8007306:	d10c      	bne.n	8007322 <_printf_float+0x416>
 8007308:	e65b      	b.n	8006fc2 <_printf_float+0xb6>
 800730a:	2301      	movs	r3, #1
 800730c:	465a      	mov	r2, fp
 800730e:	4631      	mov	r1, r6
 8007310:	4628      	mov	r0, r5
 8007312:	47b8      	blx	r7
 8007314:	3001      	adds	r0, #1
 8007316:	f43f ae54 	beq.w	8006fc2 <_printf_float+0xb6>
 800731a:	f108 0801 	add.w	r8, r8, #1
 800731e:	45d0      	cmp	r8, sl
 8007320:	dbf3      	blt.n	800730a <_printf_float+0x3fe>
 8007322:	464b      	mov	r3, r9
 8007324:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007328:	e6e0      	b.n	80070ec <_printf_float+0x1e0>
 800732a:	f04f 0800 	mov.w	r8, #0
 800732e:	f104 0b1a 	add.w	fp, r4, #26
 8007332:	e7f4      	b.n	800731e <_printf_float+0x412>
 8007334:	2301      	movs	r3, #1
 8007336:	4642      	mov	r2, r8
 8007338:	e7e1      	b.n	80072fe <_printf_float+0x3f2>
 800733a:	2301      	movs	r3, #1
 800733c:	464a      	mov	r2, r9
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	f43f ae3c 	beq.w	8006fc2 <_printf_float+0xb6>
 800734a:	f108 0801 	add.w	r8, r8, #1
 800734e:	68e3      	ldr	r3, [r4, #12]
 8007350:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007352:	1a5b      	subs	r3, r3, r1
 8007354:	4543      	cmp	r3, r8
 8007356:	dcf0      	bgt.n	800733a <_printf_float+0x42e>
 8007358:	e6fd      	b.n	8007156 <_printf_float+0x24a>
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	f104 0919 	add.w	r9, r4, #25
 8007362:	e7f4      	b.n	800734e <_printf_float+0x442>

08007364 <_printf_common>:
 8007364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007368:	4616      	mov	r6, r2
 800736a:	4698      	mov	r8, r3
 800736c:	688a      	ldr	r2, [r1, #8]
 800736e:	690b      	ldr	r3, [r1, #16]
 8007370:	4607      	mov	r7, r0
 8007372:	4293      	cmp	r3, r2
 8007374:	bfb8      	it	lt
 8007376:	4613      	movlt	r3, r2
 8007378:	6033      	str	r3, [r6, #0]
 800737a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800737e:	460c      	mov	r4, r1
 8007380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007384:	b10a      	cbz	r2, 800738a <_printf_common+0x26>
 8007386:	3301      	adds	r3, #1
 8007388:	6033      	str	r3, [r6, #0]
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	0699      	lsls	r1, r3, #26
 800738e:	bf42      	ittt	mi
 8007390:	6833      	ldrmi	r3, [r6, #0]
 8007392:	3302      	addmi	r3, #2
 8007394:	6033      	strmi	r3, [r6, #0]
 8007396:	6825      	ldr	r5, [r4, #0]
 8007398:	f015 0506 	ands.w	r5, r5, #6
 800739c:	d106      	bne.n	80073ac <_printf_common+0x48>
 800739e:	f104 0a19 	add.w	sl, r4, #25
 80073a2:	68e3      	ldr	r3, [r4, #12]
 80073a4:	6832      	ldr	r2, [r6, #0]
 80073a6:	1a9b      	subs	r3, r3, r2
 80073a8:	42ab      	cmp	r3, r5
 80073aa:	dc2b      	bgt.n	8007404 <_printf_common+0xa0>
 80073ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073b0:	6822      	ldr	r2, [r4, #0]
 80073b2:	3b00      	subs	r3, #0
 80073b4:	bf18      	it	ne
 80073b6:	2301      	movne	r3, #1
 80073b8:	0692      	lsls	r2, r2, #26
 80073ba:	d430      	bmi.n	800741e <_printf_common+0xba>
 80073bc:	4641      	mov	r1, r8
 80073be:	4638      	mov	r0, r7
 80073c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073c4:	47c8      	blx	r9
 80073c6:	3001      	adds	r0, #1
 80073c8:	d023      	beq.n	8007412 <_printf_common+0xae>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	6922      	ldr	r2, [r4, #16]
 80073ce:	f003 0306 	and.w	r3, r3, #6
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	bf14      	ite	ne
 80073d6:	2500      	movne	r5, #0
 80073d8:	6833      	ldreq	r3, [r6, #0]
 80073da:	f04f 0600 	mov.w	r6, #0
 80073de:	bf08      	it	eq
 80073e0:	68e5      	ldreq	r5, [r4, #12]
 80073e2:	f104 041a 	add.w	r4, r4, #26
 80073e6:	bf08      	it	eq
 80073e8:	1aed      	subeq	r5, r5, r3
 80073ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80073ee:	bf08      	it	eq
 80073f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f4:	4293      	cmp	r3, r2
 80073f6:	bfc4      	itt	gt
 80073f8:	1a9b      	subgt	r3, r3, r2
 80073fa:	18ed      	addgt	r5, r5, r3
 80073fc:	42b5      	cmp	r5, r6
 80073fe:	d11a      	bne.n	8007436 <_printf_common+0xd2>
 8007400:	2000      	movs	r0, #0
 8007402:	e008      	b.n	8007416 <_printf_common+0xb2>
 8007404:	2301      	movs	r3, #1
 8007406:	4652      	mov	r2, sl
 8007408:	4641      	mov	r1, r8
 800740a:	4638      	mov	r0, r7
 800740c:	47c8      	blx	r9
 800740e:	3001      	adds	r0, #1
 8007410:	d103      	bne.n	800741a <_printf_common+0xb6>
 8007412:	f04f 30ff 	mov.w	r0, #4294967295
 8007416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741a:	3501      	adds	r5, #1
 800741c:	e7c1      	b.n	80073a2 <_printf_common+0x3e>
 800741e:	2030      	movs	r0, #48	@ 0x30
 8007420:	18e1      	adds	r1, r4, r3
 8007422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800742c:	4422      	add	r2, r4
 800742e:	3302      	adds	r3, #2
 8007430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007434:	e7c2      	b.n	80073bc <_printf_common+0x58>
 8007436:	2301      	movs	r3, #1
 8007438:	4622      	mov	r2, r4
 800743a:	4641      	mov	r1, r8
 800743c:	4638      	mov	r0, r7
 800743e:	47c8      	blx	r9
 8007440:	3001      	adds	r0, #1
 8007442:	d0e6      	beq.n	8007412 <_printf_common+0xae>
 8007444:	3601      	adds	r6, #1
 8007446:	e7d9      	b.n	80073fc <_printf_common+0x98>

08007448 <_printf_i>:
 8007448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	7e0f      	ldrb	r7, [r1, #24]
 800744e:	4691      	mov	r9, r2
 8007450:	2f78      	cmp	r7, #120	@ 0x78
 8007452:	4680      	mov	r8, r0
 8007454:	460c      	mov	r4, r1
 8007456:	469a      	mov	sl, r3
 8007458:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800745a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800745e:	d807      	bhi.n	8007470 <_printf_i+0x28>
 8007460:	2f62      	cmp	r7, #98	@ 0x62
 8007462:	d80a      	bhi.n	800747a <_printf_i+0x32>
 8007464:	2f00      	cmp	r7, #0
 8007466:	f000 80d3 	beq.w	8007610 <_printf_i+0x1c8>
 800746a:	2f58      	cmp	r7, #88	@ 0x58
 800746c:	f000 80ba 	beq.w	80075e4 <_printf_i+0x19c>
 8007470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007478:	e03a      	b.n	80074f0 <_printf_i+0xa8>
 800747a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800747e:	2b15      	cmp	r3, #21
 8007480:	d8f6      	bhi.n	8007470 <_printf_i+0x28>
 8007482:	a101      	add	r1, pc, #4	@ (adr r1, 8007488 <_printf_i+0x40>)
 8007484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007488:	080074e1 	.word	0x080074e1
 800748c:	080074f5 	.word	0x080074f5
 8007490:	08007471 	.word	0x08007471
 8007494:	08007471 	.word	0x08007471
 8007498:	08007471 	.word	0x08007471
 800749c:	08007471 	.word	0x08007471
 80074a0:	080074f5 	.word	0x080074f5
 80074a4:	08007471 	.word	0x08007471
 80074a8:	08007471 	.word	0x08007471
 80074ac:	08007471 	.word	0x08007471
 80074b0:	08007471 	.word	0x08007471
 80074b4:	080075f7 	.word	0x080075f7
 80074b8:	0800751f 	.word	0x0800751f
 80074bc:	080075b1 	.word	0x080075b1
 80074c0:	08007471 	.word	0x08007471
 80074c4:	08007471 	.word	0x08007471
 80074c8:	08007619 	.word	0x08007619
 80074cc:	08007471 	.word	0x08007471
 80074d0:	0800751f 	.word	0x0800751f
 80074d4:	08007471 	.word	0x08007471
 80074d8:	08007471 	.word	0x08007471
 80074dc:	080075b9 	.word	0x080075b9
 80074e0:	6833      	ldr	r3, [r6, #0]
 80074e2:	1d1a      	adds	r2, r3, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6032      	str	r2, [r6, #0]
 80074e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074f0:	2301      	movs	r3, #1
 80074f2:	e09e      	b.n	8007632 <_printf_i+0x1ea>
 80074f4:	6833      	ldr	r3, [r6, #0]
 80074f6:	6820      	ldr	r0, [r4, #0]
 80074f8:	1d19      	adds	r1, r3, #4
 80074fa:	6031      	str	r1, [r6, #0]
 80074fc:	0606      	lsls	r6, r0, #24
 80074fe:	d501      	bpl.n	8007504 <_printf_i+0xbc>
 8007500:	681d      	ldr	r5, [r3, #0]
 8007502:	e003      	b.n	800750c <_printf_i+0xc4>
 8007504:	0645      	lsls	r5, r0, #25
 8007506:	d5fb      	bpl.n	8007500 <_printf_i+0xb8>
 8007508:	f9b3 5000 	ldrsh.w	r5, [r3]
 800750c:	2d00      	cmp	r5, #0
 800750e:	da03      	bge.n	8007518 <_printf_i+0xd0>
 8007510:	232d      	movs	r3, #45	@ 0x2d
 8007512:	426d      	negs	r5, r5
 8007514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007518:	230a      	movs	r3, #10
 800751a:	4859      	ldr	r0, [pc, #356]	@ (8007680 <_printf_i+0x238>)
 800751c:	e011      	b.n	8007542 <_printf_i+0xfa>
 800751e:	6821      	ldr	r1, [r4, #0]
 8007520:	6833      	ldr	r3, [r6, #0]
 8007522:	0608      	lsls	r0, r1, #24
 8007524:	f853 5b04 	ldr.w	r5, [r3], #4
 8007528:	d402      	bmi.n	8007530 <_printf_i+0xe8>
 800752a:	0649      	lsls	r1, r1, #25
 800752c:	bf48      	it	mi
 800752e:	b2ad      	uxthmi	r5, r5
 8007530:	2f6f      	cmp	r7, #111	@ 0x6f
 8007532:	6033      	str	r3, [r6, #0]
 8007534:	bf14      	ite	ne
 8007536:	230a      	movne	r3, #10
 8007538:	2308      	moveq	r3, #8
 800753a:	4851      	ldr	r0, [pc, #324]	@ (8007680 <_printf_i+0x238>)
 800753c:	2100      	movs	r1, #0
 800753e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007542:	6866      	ldr	r6, [r4, #4]
 8007544:	2e00      	cmp	r6, #0
 8007546:	bfa8      	it	ge
 8007548:	6821      	ldrge	r1, [r4, #0]
 800754a:	60a6      	str	r6, [r4, #8]
 800754c:	bfa4      	itt	ge
 800754e:	f021 0104 	bicge.w	r1, r1, #4
 8007552:	6021      	strge	r1, [r4, #0]
 8007554:	b90d      	cbnz	r5, 800755a <_printf_i+0x112>
 8007556:	2e00      	cmp	r6, #0
 8007558:	d04b      	beq.n	80075f2 <_printf_i+0x1aa>
 800755a:	4616      	mov	r6, r2
 800755c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007560:	fb03 5711 	mls	r7, r3, r1, r5
 8007564:	5dc7      	ldrb	r7, [r0, r7]
 8007566:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800756a:	462f      	mov	r7, r5
 800756c:	42bb      	cmp	r3, r7
 800756e:	460d      	mov	r5, r1
 8007570:	d9f4      	bls.n	800755c <_printf_i+0x114>
 8007572:	2b08      	cmp	r3, #8
 8007574:	d10b      	bne.n	800758e <_printf_i+0x146>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	07df      	lsls	r7, r3, #31
 800757a:	d508      	bpl.n	800758e <_printf_i+0x146>
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	6861      	ldr	r1, [r4, #4]
 8007580:	4299      	cmp	r1, r3
 8007582:	bfde      	ittt	le
 8007584:	2330      	movle	r3, #48	@ 0x30
 8007586:	f806 3c01 	strble.w	r3, [r6, #-1]
 800758a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800758e:	1b92      	subs	r2, r2, r6
 8007590:	6122      	str	r2, [r4, #16]
 8007592:	464b      	mov	r3, r9
 8007594:	4621      	mov	r1, r4
 8007596:	4640      	mov	r0, r8
 8007598:	f8cd a000 	str.w	sl, [sp]
 800759c:	aa03      	add	r2, sp, #12
 800759e:	f7ff fee1 	bl	8007364 <_printf_common>
 80075a2:	3001      	adds	r0, #1
 80075a4:	d14a      	bne.n	800763c <_printf_i+0x1f4>
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295
 80075aa:	b004      	add	sp, #16
 80075ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	f043 0320 	orr.w	r3, r3, #32
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	2778      	movs	r7, #120	@ 0x78
 80075ba:	4832      	ldr	r0, [pc, #200]	@ (8007684 <_printf_i+0x23c>)
 80075bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	6831      	ldr	r1, [r6, #0]
 80075c4:	061f      	lsls	r7, r3, #24
 80075c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80075ca:	d402      	bmi.n	80075d2 <_printf_i+0x18a>
 80075cc:	065f      	lsls	r7, r3, #25
 80075ce:	bf48      	it	mi
 80075d0:	b2ad      	uxthmi	r5, r5
 80075d2:	6031      	str	r1, [r6, #0]
 80075d4:	07d9      	lsls	r1, r3, #31
 80075d6:	bf44      	itt	mi
 80075d8:	f043 0320 	orrmi.w	r3, r3, #32
 80075dc:	6023      	strmi	r3, [r4, #0]
 80075de:	b11d      	cbz	r5, 80075e8 <_printf_i+0x1a0>
 80075e0:	2310      	movs	r3, #16
 80075e2:	e7ab      	b.n	800753c <_printf_i+0xf4>
 80075e4:	4826      	ldr	r0, [pc, #152]	@ (8007680 <_printf_i+0x238>)
 80075e6:	e7e9      	b.n	80075bc <_printf_i+0x174>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	f023 0320 	bic.w	r3, r3, #32
 80075ee:	6023      	str	r3, [r4, #0]
 80075f0:	e7f6      	b.n	80075e0 <_printf_i+0x198>
 80075f2:	4616      	mov	r6, r2
 80075f4:	e7bd      	b.n	8007572 <_printf_i+0x12a>
 80075f6:	6833      	ldr	r3, [r6, #0]
 80075f8:	6825      	ldr	r5, [r4, #0]
 80075fa:	1d18      	adds	r0, r3, #4
 80075fc:	6961      	ldr	r1, [r4, #20]
 80075fe:	6030      	str	r0, [r6, #0]
 8007600:	062e      	lsls	r6, r5, #24
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	d501      	bpl.n	800760a <_printf_i+0x1c2>
 8007606:	6019      	str	r1, [r3, #0]
 8007608:	e002      	b.n	8007610 <_printf_i+0x1c8>
 800760a:	0668      	lsls	r0, r5, #25
 800760c:	d5fb      	bpl.n	8007606 <_printf_i+0x1be>
 800760e:	8019      	strh	r1, [r3, #0]
 8007610:	2300      	movs	r3, #0
 8007612:	4616      	mov	r6, r2
 8007614:	6123      	str	r3, [r4, #16]
 8007616:	e7bc      	b.n	8007592 <_printf_i+0x14a>
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	2100      	movs	r1, #0
 800761c:	1d1a      	adds	r2, r3, #4
 800761e:	6032      	str	r2, [r6, #0]
 8007620:	681e      	ldr	r6, [r3, #0]
 8007622:	6862      	ldr	r2, [r4, #4]
 8007624:	4630      	mov	r0, r6
 8007626:	f000 fc62 	bl	8007eee <memchr>
 800762a:	b108      	cbz	r0, 8007630 <_printf_i+0x1e8>
 800762c:	1b80      	subs	r0, r0, r6
 800762e:	6060      	str	r0, [r4, #4]
 8007630:	6863      	ldr	r3, [r4, #4]
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	2300      	movs	r3, #0
 8007636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800763a:	e7aa      	b.n	8007592 <_printf_i+0x14a>
 800763c:	4632      	mov	r2, r6
 800763e:	4649      	mov	r1, r9
 8007640:	4640      	mov	r0, r8
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	47d0      	blx	sl
 8007646:	3001      	adds	r0, #1
 8007648:	d0ad      	beq.n	80075a6 <_printf_i+0x15e>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	079b      	lsls	r3, r3, #30
 800764e:	d413      	bmi.n	8007678 <_printf_i+0x230>
 8007650:	68e0      	ldr	r0, [r4, #12]
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	4298      	cmp	r0, r3
 8007656:	bfb8      	it	lt
 8007658:	4618      	movlt	r0, r3
 800765a:	e7a6      	b.n	80075aa <_printf_i+0x162>
 800765c:	2301      	movs	r3, #1
 800765e:	4632      	mov	r2, r6
 8007660:	4649      	mov	r1, r9
 8007662:	4640      	mov	r0, r8
 8007664:	47d0      	blx	sl
 8007666:	3001      	adds	r0, #1
 8007668:	d09d      	beq.n	80075a6 <_printf_i+0x15e>
 800766a:	3501      	adds	r5, #1
 800766c:	68e3      	ldr	r3, [r4, #12]
 800766e:	9903      	ldr	r1, [sp, #12]
 8007670:	1a5b      	subs	r3, r3, r1
 8007672:	42ab      	cmp	r3, r5
 8007674:	dcf2      	bgt.n	800765c <_printf_i+0x214>
 8007676:	e7eb      	b.n	8007650 <_printf_i+0x208>
 8007678:	2500      	movs	r5, #0
 800767a:	f104 0619 	add.w	r6, r4, #25
 800767e:	e7f5      	b.n	800766c <_printf_i+0x224>
 8007680:	0800e559 	.word	0x0800e559
 8007684:	0800e56a 	.word	0x0800e56a

08007688 <_scanf_float>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	b087      	sub	sp, #28
 800768e:	9303      	str	r3, [sp, #12]
 8007690:	688b      	ldr	r3, [r1, #8]
 8007692:	4617      	mov	r7, r2
 8007694:	1e5a      	subs	r2, r3, #1
 8007696:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800769a:	bf82      	ittt	hi
 800769c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80076a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80076a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80076a8:	460a      	mov	r2, r1
 80076aa:	f04f 0500 	mov.w	r5, #0
 80076ae:	bf88      	it	hi
 80076b0:	608b      	strhi	r3, [r1, #8]
 80076b2:	680b      	ldr	r3, [r1, #0]
 80076b4:	4680      	mov	r8, r0
 80076b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80076ba:	f842 3b1c 	str.w	r3, [r2], #28
 80076be:	460c      	mov	r4, r1
 80076c0:	bf98      	it	ls
 80076c2:	f04f 0b00 	movls.w	fp, #0
 80076c6:	4616      	mov	r6, r2
 80076c8:	46aa      	mov	sl, r5
 80076ca:	46a9      	mov	r9, r5
 80076cc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80076d0:	9201      	str	r2, [sp, #4]
 80076d2:	9502      	str	r5, [sp, #8]
 80076d4:	68a2      	ldr	r2, [r4, #8]
 80076d6:	b152      	cbz	r2, 80076ee <_scanf_float+0x66>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b4e      	cmp	r3, #78	@ 0x4e
 80076de:	d865      	bhi.n	80077ac <_scanf_float+0x124>
 80076e0:	2b40      	cmp	r3, #64	@ 0x40
 80076e2:	d83d      	bhi.n	8007760 <_scanf_float+0xd8>
 80076e4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80076e8:	b2c8      	uxtb	r0, r1
 80076ea:	280e      	cmp	r0, #14
 80076ec:	d93b      	bls.n	8007766 <_scanf_float+0xde>
 80076ee:	f1b9 0f00 	cmp.w	r9, #0
 80076f2:	d003      	beq.n	80076fc <_scanf_float+0x74>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007700:	f1ba 0f01 	cmp.w	sl, #1
 8007704:	f200 8118 	bhi.w	8007938 <_scanf_float+0x2b0>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	429e      	cmp	r6, r3
 800770c:	f200 8109 	bhi.w	8007922 <_scanf_float+0x29a>
 8007710:	2001      	movs	r0, #1
 8007712:	b007      	add	sp, #28
 8007714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007718:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800771c:	2a0d      	cmp	r2, #13
 800771e:	d8e6      	bhi.n	80076ee <_scanf_float+0x66>
 8007720:	a101      	add	r1, pc, #4	@ (adr r1, 8007728 <_scanf_float+0xa0>)
 8007722:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007726:	bf00      	nop
 8007728:	0800786f 	.word	0x0800786f
 800772c:	080076ef 	.word	0x080076ef
 8007730:	080076ef 	.word	0x080076ef
 8007734:	080076ef 	.word	0x080076ef
 8007738:	080078cf 	.word	0x080078cf
 800773c:	080078a7 	.word	0x080078a7
 8007740:	080076ef 	.word	0x080076ef
 8007744:	080076ef 	.word	0x080076ef
 8007748:	0800787d 	.word	0x0800787d
 800774c:	080076ef 	.word	0x080076ef
 8007750:	080076ef 	.word	0x080076ef
 8007754:	080076ef 	.word	0x080076ef
 8007758:	080076ef 	.word	0x080076ef
 800775c:	08007835 	.word	0x08007835
 8007760:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007764:	e7da      	b.n	800771c <_scanf_float+0x94>
 8007766:	290e      	cmp	r1, #14
 8007768:	d8c1      	bhi.n	80076ee <_scanf_float+0x66>
 800776a:	a001      	add	r0, pc, #4	@ (adr r0, 8007770 <_scanf_float+0xe8>)
 800776c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007770:	08007825 	.word	0x08007825
 8007774:	080076ef 	.word	0x080076ef
 8007778:	08007825 	.word	0x08007825
 800777c:	080078bb 	.word	0x080078bb
 8007780:	080076ef 	.word	0x080076ef
 8007784:	080077cd 	.word	0x080077cd
 8007788:	0800780b 	.word	0x0800780b
 800778c:	0800780b 	.word	0x0800780b
 8007790:	0800780b 	.word	0x0800780b
 8007794:	0800780b 	.word	0x0800780b
 8007798:	0800780b 	.word	0x0800780b
 800779c:	0800780b 	.word	0x0800780b
 80077a0:	0800780b 	.word	0x0800780b
 80077a4:	0800780b 	.word	0x0800780b
 80077a8:	0800780b 	.word	0x0800780b
 80077ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80077ae:	d809      	bhi.n	80077c4 <_scanf_float+0x13c>
 80077b0:	2b60      	cmp	r3, #96	@ 0x60
 80077b2:	d8b1      	bhi.n	8007718 <_scanf_float+0x90>
 80077b4:	2b54      	cmp	r3, #84	@ 0x54
 80077b6:	d07b      	beq.n	80078b0 <_scanf_float+0x228>
 80077b8:	2b59      	cmp	r3, #89	@ 0x59
 80077ba:	d198      	bne.n	80076ee <_scanf_float+0x66>
 80077bc:	2d07      	cmp	r5, #7
 80077be:	d196      	bne.n	80076ee <_scanf_float+0x66>
 80077c0:	2508      	movs	r5, #8
 80077c2:	e02c      	b.n	800781e <_scanf_float+0x196>
 80077c4:	2b74      	cmp	r3, #116	@ 0x74
 80077c6:	d073      	beq.n	80078b0 <_scanf_float+0x228>
 80077c8:	2b79      	cmp	r3, #121	@ 0x79
 80077ca:	e7f6      	b.n	80077ba <_scanf_float+0x132>
 80077cc:	6821      	ldr	r1, [r4, #0]
 80077ce:	05c8      	lsls	r0, r1, #23
 80077d0:	d51b      	bpl.n	800780a <_scanf_float+0x182>
 80077d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80077d6:	6021      	str	r1, [r4, #0]
 80077d8:	f109 0901 	add.w	r9, r9, #1
 80077dc:	f1bb 0f00 	cmp.w	fp, #0
 80077e0:	d003      	beq.n	80077ea <_scanf_float+0x162>
 80077e2:	3201      	adds	r2, #1
 80077e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077e8:	60a2      	str	r2, [r4, #8]
 80077ea:	68a3      	ldr	r3, [r4, #8]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	60a3      	str	r3, [r4, #8]
 80077f0:	6923      	ldr	r3, [r4, #16]
 80077f2:	3301      	adds	r3, #1
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
 80077fe:	f340 8087 	ble.w	8007910 <_scanf_float+0x288>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	3301      	adds	r3, #1
 8007806:	603b      	str	r3, [r7, #0]
 8007808:	e764      	b.n	80076d4 <_scanf_float+0x4c>
 800780a:	eb1a 0105 	adds.w	r1, sl, r5
 800780e:	f47f af6e 	bne.w	80076ee <_scanf_float+0x66>
 8007812:	460d      	mov	r5, r1
 8007814:	468a      	mov	sl, r1
 8007816:	6822      	ldr	r2, [r4, #0]
 8007818:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800781c:	6022      	str	r2, [r4, #0]
 800781e:	f806 3b01 	strb.w	r3, [r6], #1
 8007822:	e7e2      	b.n	80077ea <_scanf_float+0x162>
 8007824:	6822      	ldr	r2, [r4, #0]
 8007826:	0610      	lsls	r0, r2, #24
 8007828:	f57f af61 	bpl.w	80076ee <_scanf_float+0x66>
 800782c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007830:	6022      	str	r2, [r4, #0]
 8007832:	e7f4      	b.n	800781e <_scanf_float+0x196>
 8007834:	f1ba 0f00 	cmp.w	sl, #0
 8007838:	d10e      	bne.n	8007858 <_scanf_float+0x1d0>
 800783a:	f1b9 0f00 	cmp.w	r9, #0
 800783e:	d10e      	bne.n	800785e <_scanf_float+0x1d6>
 8007840:	6822      	ldr	r2, [r4, #0]
 8007842:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007846:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800784a:	d108      	bne.n	800785e <_scanf_float+0x1d6>
 800784c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007850:	f04f 0a01 	mov.w	sl, #1
 8007854:	6022      	str	r2, [r4, #0]
 8007856:	e7e2      	b.n	800781e <_scanf_float+0x196>
 8007858:	f1ba 0f02 	cmp.w	sl, #2
 800785c:	d055      	beq.n	800790a <_scanf_float+0x282>
 800785e:	2d01      	cmp	r5, #1
 8007860:	d002      	beq.n	8007868 <_scanf_float+0x1e0>
 8007862:	2d04      	cmp	r5, #4
 8007864:	f47f af43 	bne.w	80076ee <_scanf_float+0x66>
 8007868:	3501      	adds	r5, #1
 800786a:	b2ed      	uxtb	r5, r5
 800786c:	e7d7      	b.n	800781e <_scanf_float+0x196>
 800786e:	f1ba 0f01 	cmp.w	sl, #1
 8007872:	f47f af3c 	bne.w	80076ee <_scanf_float+0x66>
 8007876:	f04f 0a02 	mov.w	sl, #2
 800787a:	e7d0      	b.n	800781e <_scanf_float+0x196>
 800787c:	b97d      	cbnz	r5, 800789e <_scanf_float+0x216>
 800787e:	f1b9 0f00 	cmp.w	r9, #0
 8007882:	f47f af37 	bne.w	80076f4 <_scanf_float+0x6c>
 8007886:	6822      	ldr	r2, [r4, #0]
 8007888:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800788c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007890:	f040 8103 	bne.w	8007a9a <_scanf_float+0x412>
 8007894:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007898:	2501      	movs	r5, #1
 800789a:	6022      	str	r2, [r4, #0]
 800789c:	e7bf      	b.n	800781e <_scanf_float+0x196>
 800789e:	2d03      	cmp	r5, #3
 80078a0:	d0e2      	beq.n	8007868 <_scanf_float+0x1e0>
 80078a2:	2d05      	cmp	r5, #5
 80078a4:	e7de      	b.n	8007864 <_scanf_float+0x1dc>
 80078a6:	2d02      	cmp	r5, #2
 80078a8:	f47f af21 	bne.w	80076ee <_scanf_float+0x66>
 80078ac:	2503      	movs	r5, #3
 80078ae:	e7b6      	b.n	800781e <_scanf_float+0x196>
 80078b0:	2d06      	cmp	r5, #6
 80078b2:	f47f af1c 	bne.w	80076ee <_scanf_float+0x66>
 80078b6:	2507      	movs	r5, #7
 80078b8:	e7b1      	b.n	800781e <_scanf_float+0x196>
 80078ba:	6822      	ldr	r2, [r4, #0]
 80078bc:	0591      	lsls	r1, r2, #22
 80078be:	f57f af16 	bpl.w	80076ee <_scanf_float+0x66>
 80078c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80078c6:	6022      	str	r2, [r4, #0]
 80078c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80078cc:	e7a7      	b.n	800781e <_scanf_float+0x196>
 80078ce:	6822      	ldr	r2, [r4, #0]
 80078d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80078d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80078d8:	d006      	beq.n	80078e8 <_scanf_float+0x260>
 80078da:	0550      	lsls	r0, r2, #21
 80078dc:	f57f af07 	bpl.w	80076ee <_scanf_float+0x66>
 80078e0:	f1b9 0f00 	cmp.w	r9, #0
 80078e4:	f000 80d9 	beq.w	8007a9a <_scanf_float+0x412>
 80078e8:	0591      	lsls	r1, r2, #22
 80078ea:	bf58      	it	pl
 80078ec:	9902      	ldrpl	r1, [sp, #8]
 80078ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80078f2:	bf58      	it	pl
 80078f4:	eba9 0101 	subpl.w	r1, r9, r1
 80078f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80078fc:	f04f 0900 	mov.w	r9, #0
 8007900:	bf58      	it	pl
 8007902:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007906:	6022      	str	r2, [r4, #0]
 8007908:	e789      	b.n	800781e <_scanf_float+0x196>
 800790a:	f04f 0a03 	mov.w	sl, #3
 800790e:	e786      	b.n	800781e <_scanf_float+0x196>
 8007910:	4639      	mov	r1, r7
 8007912:	4640      	mov	r0, r8
 8007914:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007918:	4798      	blx	r3
 800791a:	2800      	cmp	r0, #0
 800791c:	f43f aeda 	beq.w	80076d4 <_scanf_float+0x4c>
 8007920:	e6e5      	b.n	80076ee <_scanf_float+0x66>
 8007922:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007926:	463a      	mov	r2, r7
 8007928:	4640      	mov	r0, r8
 800792a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800792e:	4798      	blx	r3
 8007930:	6923      	ldr	r3, [r4, #16]
 8007932:	3b01      	subs	r3, #1
 8007934:	6123      	str	r3, [r4, #16]
 8007936:	e6e7      	b.n	8007708 <_scanf_float+0x80>
 8007938:	1e6b      	subs	r3, r5, #1
 800793a:	2b06      	cmp	r3, #6
 800793c:	d824      	bhi.n	8007988 <_scanf_float+0x300>
 800793e:	2d02      	cmp	r5, #2
 8007940:	d836      	bhi.n	80079b0 <_scanf_float+0x328>
 8007942:	9b01      	ldr	r3, [sp, #4]
 8007944:	429e      	cmp	r6, r3
 8007946:	f67f aee3 	bls.w	8007710 <_scanf_float+0x88>
 800794a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800794e:	463a      	mov	r2, r7
 8007950:	4640      	mov	r0, r8
 8007952:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007956:	4798      	blx	r3
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	3b01      	subs	r3, #1
 800795c:	6123      	str	r3, [r4, #16]
 800795e:	e7f0      	b.n	8007942 <_scanf_float+0x2ba>
 8007960:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007964:	463a      	mov	r2, r7
 8007966:	4640      	mov	r0, r8
 8007968:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800796c:	4798      	blx	r3
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	3b01      	subs	r3, #1
 8007972:	6123      	str	r3, [r4, #16]
 8007974:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007978:	fa5f fa8a 	uxtb.w	sl, sl
 800797c:	f1ba 0f02 	cmp.w	sl, #2
 8007980:	d1ee      	bne.n	8007960 <_scanf_float+0x2d8>
 8007982:	3d03      	subs	r5, #3
 8007984:	b2ed      	uxtb	r5, r5
 8007986:	1b76      	subs	r6, r6, r5
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	05da      	lsls	r2, r3, #23
 800798c:	d530      	bpl.n	80079f0 <_scanf_float+0x368>
 800798e:	055b      	lsls	r3, r3, #21
 8007990:	d511      	bpl.n	80079b6 <_scanf_float+0x32e>
 8007992:	9b01      	ldr	r3, [sp, #4]
 8007994:	429e      	cmp	r6, r3
 8007996:	f67f aebb 	bls.w	8007710 <_scanf_float+0x88>
 800799a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800799e:	463a      	mov	r2, r7
 80079a0:	4640      	mov	r0, r8
 80079a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079a6:	4798      	blx	r3
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	6123      	str	r3, [r4, #16]
 80079ae:	e7f0      	b.n	8007992 <_scanf_float+0x30a>
 80079b0:	46aa      	mov	sl, r5
 80079b2:	46b3      	mov	fp, r6
 80079b4:	e7de      	b.n	8007974 <_scanf_float+0x2ec>
 80079b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	2965      	cmp	r1, #101	@ 0x65
 80079be:	f103 33ff 	add.w	r3, r3, #4294967295
 80079c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	d00c      	beq.n	80079e4 <_scanf_float+0x35c>
 80079ca:	2945      	cmp	r1, #69	@ 0x45
 80079cc:	d00a      	beq.n	80079e4 <_scanf_float+0x35c>
 80079ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079d2:	463a      	mov	r2, r7
 80079d4:	4640      	mov	r0, r8
 80079d6:	4798      	blx	r3
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80079de:	3b01      	subs	r3, #1
 80079e0:	1eb5      	subs	r5, r6, #2
 80079e2:	6123      	str	r3, [r4, #16]
 80079e4:	463a      	mov	r2, r7
 80079e6:	4640      	mov	r0, r8
 80079e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079ec:	4798      	blx	r3
 80079ee:	462e      	mov	r6, r5
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	f012 0210 	ands.w	r2, r2, #16
 80079f6:	d001      	beq.n	80079fc <_scanf_float+0x374>
 80079f8:	2000      	movs	r0, #0
 80079fa:	e68a      	b.n	8007712 <_scanf_float+0x8a>
 80079fc:	7032      	strb	r2, [r6, #0]
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a08:	d11c      	bne.n	8007a44 <_scanf_float+0x3bc>
 8007a0a:	9b02      	ldr	r3, [sp, #8]
 8007a0c:	454b      	cmp	r3, r9
 8007a0e:	eba3 0209 	sub.w	r2, r3, r9
 8007a12:	d123      	bne.n	8007a5c <_scanf_float+0x3d4>
 8007a14:	2200      	movs	r2, #0
 8007a16:	4640      	mov	r0, r8
 8007a18:	9901      	ldr	r1, [sp, #4]
 8007a1a:	f002 fc89 	bl	800a330 <_strtod_r>
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	6825      	ldr	r5, [r4, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f015 0f02 	tst.w	r5, #2
 8007a28:	4606      	mov	r6, r0
 8007a2a:	460f      	mov	r7, r1
 8007a2c:	f103 0204 	add.w	r2, r3, #4
 8007a30:	d01f      	beq.n	8007a72 <_scanf_float+0x3ea>
 8007a32:	9903      	ldr	r1, [sp, #12]
 8007a34:	600a      	str	r2, [r1, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	e9c3 6700 	strd	r6, r7, [r3]
 8007a3c:	68e3      	ldr	r3, [r4, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60e3      	str	r3, [r4, #12]
 8007a42:	e7d9      	b.n	80079f8 <_scanf_float+0x370>
 8007a44:	9b04      	ldr	r3, [sp, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0e4      	beq.n	8007a14 <_scanf_float+0x38c>
 8007a4a:	9905      	ldr	r1, [sp, #20]
 8007a4c:	230a      	movs	r3, #10
 8007a4e:	4640      	mov	r0, r8
 8007a50:	3101      	adds	r1, #1
 8007a52:	f7ff f9b1 	bl	8006db8 <_strtol_r>
 8007a56:	9b04      	ldr	r3, [sp, #16]
 8007a58:	9e05      	ldr	r6, [sp, #20]
 8007a5a:	1ac2      	subs	r2, r0, r3
 8007a5c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007a60:	429e      	cmp	r6, r3
 8007a62:	bf28      	it	cs
 8007a64:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007a68:	4630      	mov	r0, r6
 8007a6a:	490d      	ldr	r1, [pc, #52]	@ (8007aa0 <_scanf_float+0x418>)
 8007a6c:	f000 f8de 	bl	8007c2c <siprintf>
 8007a70:	e7d0      	b.n	8007a14 <_scanf_float+0x38c>
 8007a72:	076d      	lsls	r5, r5, #29
 8007a74:	d4dd      	bmi.n	8007a32 <_scanf_float+0x3aa>
 8007a76:	9d03      	ldr	r5, [sp, #12]
 8007a78:	602a      	str	r2, [r5, #0]
 8007a7a:	681d      	ldr	r5, [r3, #0]
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	f7f9 f878 	bl	8000b74 <__aeabi_dcmpun>
 8007a84:	b120      	cbz	r0, 8007a90 <_scanf_float+0x408>
 8007a86:	4807      	ldr	r0, [pc, #28]	@ (8007aa4 <_scanf_float+0x41c>)
 8007a88:	f000 fa40 	bl	8007f0c <nanf>
 8007a8c:	6028      	str	r0, [r5, #0]
 8007a8e:	e7d5      	b.n	8007a3c <_scanf_float+0x3b4>
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f9 f8cc 	bl	8000c30 <__aeabi_d2f>
 8007a98:	e7f8      	b.n	8007a8c <_scanf_float+0x404>
 8007a9a:	f04f 0900 	mov.w	r9, #0
 8007a9e:	e62d      	b.n	80076fc <_scanf_float+0x74>
 8007aa0:	0800e57b 	.word	0x0800e57b
 8007aa4:	0800b614 	.word	0x0800b614

08007aa8 <std>:
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	b510      	push	{r4, lr}
 8007aac:	4604      	mov	r4, r0
 8007aae:	e9c0 3300 	strd	r3, r3, [r0]
 8007ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ab6:	6083      	str	r3, [r0, #8]
 8007ab8:	8181      	strh	r1, [r0, #12]
 8007aba:	6643      	str	r3, [r0, #100]	@ 0x64
 8007abc:	81c2      	strh	r2, [r0, #14]
 8007abe:	6183      	str	r3, [r0, #24]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	2208      	movs	r2, #8
 8007ac4:	305c      	adds	r0, #92	@ 0x5c
 8007ac6:	f000 f92e 	bl	8007d26 <memset>
 8007aca:	4b0d      	ldr	r3, [pc, #52]	@ (8007b00 <std+0x58>)
 8007acc:	6224      	str	r4, [r4, #32]
 8007ace:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8007b04 <std+0x5c>)
 8007ad2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b08 <std+0x60>)
 8007ad6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8007b0c <std+0x64>)
 8007ada:	6323      	str	r3, [r4, #48]	@ 0x30
 8007adc:	4b0c      	ldr	r3, [pc, #48]	@ (8007b10 <std+0x68>)
 8007ade:	429c      	cmp	r4, r3
 8007ae0:	d006      	beq.n	8007af0 <std+0x48>
 8007ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ae6:	4294      	cmp	r4, r2
 8007ae8:	d002      	beq.n	8007af0 <std+0x48>
 8007aea:	33d0      	adds	r3, #208	@ 0xd0
 8007aec:	429c      	cmp	r4, r3
 8007aee:	d105      	bne.n	8007afc <std+0x54>
 8007af0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af8:	f000 b9ee 	b.w	8007ed8 <__retarget_lock_init_recursive>
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	bf00      	nop
 8007b00:	08007c6d 	.word	0x08007c6d
 8007b04:	08007c8f 	.word	0x08007c8f
 8007b08:	08007cc7 	.word	0x08007cc7
 8007b0c:	08007ceb 	.word	0x08007ceb
 8007b10:	20000904 	.word	0x20000904

08007b14 <stdio_exit_handler>:
 8007b14:	4a02      	ldr	r2, [pc, #8]	@ (8007b20 <stdio_exit_handler+0xc>)
 8007b16:	4903      	ldr	r1, [pc, #12]	@ (8007b24 <stdio_exit_handler+0x10>)
 8007b18:	4803      	ldr	r0, [pc, #12]	@ (8007b28 <stdio_exit_handler+0x14>)
 8007b1a:	f000 b869 	b.w	8007bf0 <_fwalk_sglue>
 8007b1e:	bf00      	nop
 8007b20:	20000030 	.word	0x20000030
 8007b24:	0800a6ed 	.word	0x0800a6ed
 8007b28:	20000040 	.word	0x20000040

08007b2c <cleanup_stdio>:
 8007b2c:	6841      	ldr	r1, [r0, #4]
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b60 <cleanup_stdio+0x34>)
 8007b30:	b510      	push	{r4, lr}
 8007b32:	4299      	cmp	r1, r3
 8007b34:	4604      	mov	r4, r0
 8007b36:	d001      	beq.n	8007b3c <cleanup_stdio+0x10>
 8007b38:	f002 fdd8 	bl	800a6ec <_fflush_r>
 8007b3c:	68a1      	ldr	r1, [r4, #8]
 8007b3e:	4b09      	ldr	r3, [pc, #36]	@ (8007b64 <cleanup_stdio+0x38>)
 8007b40:	4299      	cmp	r1, r3
 8007b42:	d002      	beq.n	8007b4a <cleanup_stdio+0x1e>
 8007b44:	4620      	mov	r0, r4
 8007b46:	f002 fdd1 	bl	800a6ec <_fflush_r>
 8007b4a:	68e1      	ldr	r1, [r4, #12]
 8007b4c:	4b06      	ldr	r3, [pc, #24]	@ (8007b68 <cleanup_stdio+0x3c>)
 8007b4e:	4299      	cmp	r1, r3
 8007b50:	d004      	beq.n	8007b5c <cleanup_stdio+0x30>
 8007b52:	4620      	mov	r0, r4
 8007b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b58:	f002 bdc8 	b.w	800a6ec <_fflush_r>
 8007b5c:	bd10      	pop	{r4, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000904 	.word	0x20000904
 8007b64:	2000096c 	.word	0x2000096c
 8007b68:	200009d4 	.word	0x200009d4

08007b6c <global_stdio_init.part.0>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b9c <global_stdio_init.part.0+0x30>)
 8007b70:	4c0b      	ldr	r4, [pc, #44]	@ (8007ba0 <global_stdio_init.part.0+0x34>)
 8007b72:	4a0c      	ldr	r2, [pc, #48]	@ (8007ba4 <global_stdio_init.part.0+0x38>)
 8007b74:	4620      	mov	r0, r4
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	2104      	movs	r1, #4
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f7ff ff94 	bl	8007aa8 <std>
 8007b80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b84:	2201      	movs	r2, #1
 8007b86:	2109      	movs	r1, #9
 8007b88:	f7ff ff8e 	bl	8007aa8 <std>
 8007b8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b90:	2202      	movs	r2, #2
 8007b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b96:	2112      	movs	r1, #18
 8007b98:	f7ff bf86 	b.w	8007aa8 <std>
 8007b9c:	20000a3c 	.word	0x20000a3c
 8007ba0:	20000904 	.word	0x20000904
 8007ba4:	08007b15 	.word	0x08007b15

08007ba8 <__sfp_lock_acquire>:
 8007ba8:	4801      	ldr	r0, [pc, #4]	@ (8007bb0 <__sfp_lock_acquire+0x8>)
 8007baa:	f000 b996 	b.w	8007eda <__retarget_lock_acquire_recursive>
 8007bae:	bf00      	nop
 8007bb0:	20000a45 	.word	0x20000a45

08007bb4 <__sfp_lock_release>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	@ (8007bbc <__sfp_lock_release+0x8>)
 8007bb6:	f000 b991 	b.w	8007edc <__retarget_lock_release_recursive>
 8007bba:	bf00      	nop
 8007bbc:	20000a45 	.word	0x20000a45

08007bc0 <__sinit>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	f7ff fff0 	bl	8007ba8 <__sfp_lock_acquire>
 8007bc8:	6a23      	ldr	r3, [r4, #32]
 8007bca:	b11b      	cbz	r3, 8007bd4 <__sinit+0x14>
 8007bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd0:	f7ff bff0 	b.w	8007bb4 <__sfp_lock_release>
 8007bd4:	4b04      	ldr	r3, [pc, #16]	@ (8007be8 <__sinit+0x28>)
 8007bd6:	6223      	str	r3, [r4, #32]
 8007bd8:	4b04      	ldr	r3, [pc, #16]	@ (8007bec <__sinit+0x2c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1f5      	bne.n	8007bcc <__sinit+0xc>
 8007be0:	f7ff ffc4 	bl	8007b6c <global_stdio_init.part.0>
 8007be4:	e7f2      	b.n	8007bcc <__sinit+0xc>
 8007be6:	bf00      	nop
 8007be8:	08007b2d 	.word	0x08007b2d
 8007bec:	20000a3c 	.word	0x20000a3c

08007bf0 <_fwalk_sglue>:
 8007bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	4688      	mov	r8, r1
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	2600      	movs	r6, #0
 8007bfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c00:	f1b9 0901 	subs.w	r9, r9, #1
 8007c04:	d505      	bpl.n	8007c12 <_fwalk_sglue+0x22>
 8007c06:	6824      	ldr	r4, [r4, #0]
 8007c08:	2c00      	cmp	r4, #0
 8007c0a:	d1f7      	bne.n	8007bfc <_fwalk_sglue+0xc>
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c12:	89ab      	ldrh	r3, [r5, #12]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d907      	bls.n	8007c28 <_fwalk_sglue+0x38>
 8007c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	d003      	beq.n	8007c28 <_fwalk_sglue+0x38>
 8007c20:	4629      	mov	r1, r5
 8007c22:	4638      	mov	r0, r7
 8007c24:	47c0      	blx	r8
 8007c26:	4306      	orrs	r6, r0
 8007c28:	3568      	adds	r5, #104	@ 0x68
 8007c2a:	e7e9      	b.n	8007c00 <_fwalk_sglue+0x10>

08007c2c <siprintf>:
 8007c2c:	b40e      	push	{r1, r2, r3}
 8007c2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c32:	b500      	push	{lr}
 8007c34:	b09c      	sub	sp, #112	@ 0x70
 8007c36:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c38:	9002      	str	r0, [sp, #8]
 8007c3a:	9006      	str	r0, [sp, #24]
 8007c3c:	9107      	str	r1, [sp, #28]
 8007c3e:	9104      	str	r1, [sp, #16]
 8007c40:	4808      	ldr	r0, [pc, #32]	@ (8007c64 <siprintf+0x38>)
 8007c42:	4909      	ldr	r1, [pc, #36]	@ (8007c68 <siprintf+0x3c>)
 8007c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c48:	9105      	str	r1, [sp, #20]
 8007c4a:	6800      	ldr	r0, [r0, #0]
 8007c4c:	a902      	add	r1, sp, #8
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	f002 fbd0 	bl	800a3f4 <_svfiprintf_r>
 8007c54:	2200      	movs	r2, #0
 8007c56:	9b02      	ldr	r3, [sp, #8]
 8007c58:	701a      	strb	r2, [r3, #0]
 8007c5a:	b01c      	add	sp, #112	@ 0x70
 8007c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c60:	b003      	add	sp, #12
 8007c62:	4770      	bx	lr
 8007c64:	2000003c 	.word	0x2000003c
 8007c68:	ffff0208 	.word	0xffff0208

08007c6c <__sread>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	460c      	mov	r4, r1
 8007c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c74:	f000 f8e2 	bl	8007e3c <_read_r>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	bfab      	itete	ge
 8007c7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c80:	181b      	addge	r3, r3, r0
 8007c82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c86:	bfac      	ite	ge
 8007c88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c8a:	81a3      	strhlt	r3, [r4, #12]
 8007c8c:	bd10      	pop	{r4, pc}

08007c8e <__swrite>:
 8007c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c92:	461f      	mov	r7, r3
 8007c94:	898b      	ldrh	r3, [r1, #12]
 8007c96:	4605      	mov	r5, r0
 8007c98:	05db      	lsls	r3, r3, #23
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	4616      	mov	r6, r2
 8007c9e:	d505      	bpl.n	8007cac <__swrite+0x1e>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca8:	f000 f8b6 	bl	8007e18 <_lseek_r>
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	4632      	mov	r2, r6
 8007cb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	463b      	mov	r3, r7
 8007cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc2:	f000 b8cd 	b.w	8007e60 <_write_r>

08007cc6 <__sseek>:
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	460c      	mov	r4, r1
 8007cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cce:	f000 f8a3 	bl	8007e18 <_lseek_r>
 8007cd2:	1c43      	adds	r3, r0, #1
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	bf15      	itete	ne
 8007cd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ce2:	81a3      	strheq	r3, [r4, #12]
 8007ce4:	bf18      	it	ne
 8007ce6:	81a3      	strhne	r3, [r4, #12]
 8007ce8:	bd10      	pop	{r4, pc}

08007cea <__sclose>:
 8007cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cee:	f000 b883 	b.w	8007df8 <_close_r>

08007cf2 <memmove>:
 8007cf2:	4288      	cmp	r0, r1
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	eb01 0402 	add.w	r4, r1, r2
 8007cfa:	d902      	bls.n	8007d02 <memmove+0x10>
 8007cfc:	4284      	cmp	r4, r0
 8007cfe:	4623      	mov	r3, r4
 8007d00:	d807      	bhi.n	8007d12 <memmove+0x20>
 8007d02:	1e43      	subs	r3, r0, #1
 8007d04:	42a1      	cmp	r1, r4
 8007d06:	d008      	beq.n	8007d1a <memmove+0x28>
 8007d08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d10:	e7f8      	b.n	8007d04 <memmove+0x12>
 8007d12:	4601      	mov	r1, r0
 8007d14:	4402      	add	r2, r0
 8007d16:	428a      	cmp	r2, r1
 8007d18:	d100      	bne.n	8007d1c <memmove+0x2a>
 8007d1a:	bd10      	pop	{r4, pc}
 8007d1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d24:	e7f7      	b.n	8007d16 <memmove+0x24>

08007d26 <memset>:
 8007d26:	4603      	mov	r3, r0
 8007d28:	4402      	add	r2, r0
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d100      	bne.n	8007d30 <memset+0xa>
 8007d2e:	4770      	bx	lr
 8007d30:	f803 1b01 	strb.w	r1, [r3], #1
 8007d34:	e7f9      	b.n	8007d2a <memset+0x4>
	...

08007d38 <strtok>:
 8007d38:	4b16      	ldr	r3, [pc, #88]	@ (8007d94 <strtok+0x5c>)
 8007d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3e:	681f      	ldr	r7, [r3, #0]
 8007d40:	4605      	mov	r5, r0
 8007d42:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007d44:	460e      	mov	r6, r1
 8007d46:	b9ec      	cbnz	r4, 8007d84 <strtok+0x4c>
 8007d48:	2050      	movs	r0, #80	@ 0x50
 8007d4a:	f000 ff99 	bl	8008c80 <malloc>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	6478      	str	r0, [r7, #68]	@ 0x44
 8007d52:	b920      	cbnz	r0, 8007d5e <strtok+0x26>
 8007d54:	215b      	movs	r1, #91	@ 0x5b
 8007d56:	4b10      	ldr	r3, [pc, #64]	@ (8007d98 <strtok+0x60>)
 8007d58:	4810      	ldr	r0, [pc, #64]	@ (8007d9c <strtok+0x64>)
 8007d5a:	f000 f8db 	bl	8007f14 <__assert_func>
 8007d5e:	e9c0 4400 	strd	r4, r4, [r0]
 8007d62:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007d66:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007d6a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007d6e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007d72:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007d76:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007d7a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007d7e:	6184      	str	r4, [r0, #24]
 8007d80:	7704      	strb	r4, [r0, #28]
 8007d82:	6244      	str	r4, [r0, #36]	@ 0x24
 8007d84:	4631      	mov	r1, r6
 8007d86:	4628      	mov	r0, r5
 8007d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d90:	f000 b806 	b.w	8007da0 <__strtok_r>
 8007d94:	2000003c 	.word	0x2000003c
 8007d98:	0800e580 	.word	0x0800e580
 8007d9c:	0800e597 	.word	0x0800e597

08007da0 <__strtok_r>:
 8007da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007da2:	4604      	mov	r4, r0
 8007da4:	b908      	cbnz	r0, 8007daa <__strtok_r+0xa>
 8007da6:	6814      	ldr	r4, [r2, #0]
 8007da8:	b144      	cbz	r4, 8007dbc <__strtok_r+0x1c>
 8007daa:	460f      	mov	r7, r1
 8007dac:	4620      	mov	r0, r4
 8007dae:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007db2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007db6:	b91e      	cbnz	r6, 8007dc0 <__strtok_r+0x20>
 8007db8:	b965      	cbnz	r5, 8007dd4 <__strtok_r+0x34>
 8007dba:	6015      	str	r5, [r2, #0]
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	e005      	b.n	8007dcc <__strtok_r+0x2c>
 8007dc0:	42b5      	cmp	r5, r6
 8007dc2:	d1f6      	bne.n	8007db2 <__strtok_r+0x12>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1f0      	bne.n	8007daa <__strtok_r+0xa>
 8007dc8:	6014      	str	r4, [r2, #0]
 8007dca:	7003      	strb	r3, [r0, #0]
 8007dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dce:	461c      	mov	r4, r3
 8007dd0:	e00c      	b.n	8007dec <__strtok_r+0x4c>
 8007dd2:	b915      	cbnz	r5, 8007dda <__strtok_r+0x3a>
 8007dd4:	460e      	mov	r6, r1
 8007dd6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007dda:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007dde:	42ab      	cmp	r3, r5
 8007de0:	d1f7      	bne.n	8007dd2 <__strtok_r+0x32>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0f3      	beq.n	8007dce <__strtok_r+0x2e>
 8007de6:	2300      	movs	r3, #0
 8007de8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007dec:	6014      	str	r4, [r2, #0]
 8007dee:	e7ed      	b.n	8007dcc <__strtok_r+0x2c>

08007df0 <_localeconv_r>:
 8007df0:	4800      	ldr	r0, [pc, #0]	@ (8007df4 <_localeconv_r+0x4>)
 8007df2:	4770      	bx	lr
 8007df4:	2000017c 	.word	0x2000017c

08007df8 <_close_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4d05      	ldr	r5, [pc, #20]	@ (8007e14 <_close_r+0x1c>)
 8007dfe:	4604      	mov	r4, r0
 8007e00:	4608      	mov	r0, r1
 8007e02:	602b      	str	r3, [r5, #0]
 8007e04:	f7fa fcef 	bl	80027e6 <_close>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_close_r+0x1a>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_close_r+0x1a>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	20000a40 	.word	0x20000a40

08007e18 <_lseek_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	4611      	mov	r1, r2
 8007e20:	2200      	movs	r2, #0
 8007e22:	4d05      	ldr	r5, [pc, #20]	@ (8007e38 <_lseek_r+0x20>)
 8007e24:	602a      	str	r2, [r5, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f7fa fd01 	bl	800282e <_lseek>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_lseek_r+0x1e>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_lseek_r+0x1e>
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	20000a40 	.word	0x20000a40

08007e3c <_read_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	4611      	mov	r1, r2
 8007e44:	2200      	movs	r2, #0
 8007e46:	4d05      	ldr	r5, [pc, #20]	@ (8007e5c <_read_r+0x20>)
 8007e48:	602a      	str	r2, [r5, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f7fa fc92 	bl	8002774 <_read>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_read_r+0x1e>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_read_r+0x1e>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	20000a40 	.word	0x20000a40

08007e60 <_write_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	4611      	mov	r1, r2
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4d05      	ldr	r5, [pc, #20]	@ (8007e80 <_write_r+0x20>)
 8007e6c:	602a      	str	r2, [r5, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f7fa fc9d 	bl	80027ae <_write>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d102      	bne.n	8007e7e <_write_r+0x1e>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	b103      	cbz	r3, 8007e7e <_write_r+0x1e>
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	20000a40 	.word	0x20000a40

08007e84 <__errno>:
 8007e84:	4b01      	ldr	r3, [pc, #4]	@ (8007e8c <__errno+0x8>)
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	2000003c 	.word	0x2000003c

08007e90 <__libc_init_array>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	2600      	movs	r6, #0
 8007e94:	4d0c      	ldr	r5, [pc, #48]	@ (8007ec8 <__libc_init_array+0x38>)
 8007e96:	4c0d      	ldr	r4, [pc, #52]	@ (8007ecc <__libc_init_array+0x3c>)
 8007e98:	1b64      	subs	r4, r4, r5
 8007e9a:	10a4      	asrs	r4, r4, #2
 8007e9c:	42a6      	cmp	r6, r4
 8007e9e:	d109      	bne.n	8007eb4 <__libc_init_array+0x24>
 8007ea0:	f003 fada 	bl	800b458 <_init>
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	4d0a      	ldr	r5, [pc, #40]	@ (8007ed0 <__libc_init_array+0x40>)
 8007ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8007ed4 <__libc_init_array+0x44>)
 8007eaa:	1b64      	subs	r4, r4, r5
 8007eac:	10a4      	asrs	r4, r4, #2
 8007eae:	42a6      	cmp	r6, r4
 8007eb0:	d105      	bne.n	8007ebe <__libc_init_array+0x2e>
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}
 8007eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb8:	4798      	blx	r3
 8007eba:	3601      	adds	r6, #1
 8007ebc:	e7ee      	b.n	8007e9c <__libc_init_array+0xc>
 8007ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec2:	4798      	blx	r3
 8007ec4:	3601      	adds	r6, #1
 8007ec6:	e7f2      	b.n	8007eae <__libc_init_array+0x1e>
 8007ec8:	0800e8d0 	.word	0x0800e8d0
 8007ecc:	0800e8d0 	.word	0x0800e8d0
 8007ed0:	0800e8d0 	.word	0x0800e8d0
 8007ed4:	0800e8d4 	.word	0x0800e8d4

08007ed8 <__retarget_lock_init_recursive>:
 8007ed8:	4770      	bx	lr

08007eda <__retarget_lock_acquire_recursive>:
 8007eda:	4770      	bx	lr

08007edc <__retarget_lock_release_recursive>:
 8007edc:	4770      	bx	lr

08007ede <strcpy>:
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ee4:	f803 2b01 	strb.w	r2, [r3], #1
 8007ee8:	2a00      	cmp	r2, #0
 8007eea:	d1f9      	bne.n	8007ee0 <strcpy+0x2>
 8007eec:	4770      	bx	lr

08007eee <memchr>:
 8007eee:	4603      	mov	r3, r0
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	b2c9      	uxtb	r1, r1
 8007ef4:	4402      	add	r2, r0
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	d101      	bne.n	8007f00 <memchr+0x12>
 8007efc:	2000      	movs	r0, #0
 8007efe:	e003      	b.n	8007f08 <memchr+0x1a>
 8007f00:	7804      	ldrb	r4, [r0, #0]
 8007f02:	3301      	adds	r3, #1
 8007f04:	428c      	cmp	r4, r1
 8007f06:	d1f6      	bne.n	8007ef6 <memchr+0x8>
 8007f08:	bd10      	pop	{r4, pc}
	...

08007f0c <nanf>:
 8007f0c:	4800      	ldr	r0, [pc, #0]	@ (8007f10 <nanf+0x4>)
 8007f0e:	4770      	bx	lr
 8007f10:	7fc00000 	.word	0x7fc00000

08007f14 <__assert_func>:
 8007f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f16:	4614      	mov	r4, r2
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4b09      	ldr	r3, [pc, #36]	@ (8007f40 <__assert_func+0x2c>)
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68d8      	ldr	r0, [r3, #12]
 8007f22:	b954      	cbnz	r4, 8007f3a <__assert_func+0x26>
 8007f24:	4b07      	ldr	r3, [pc, #28]	@ (8007f44 <__assert_func+0x30>)
 8007f26:	461c      	mov	r4, r3
 8007f28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f2c:	9100      	str	r1, [sp, #0]
 8007f2e:	462b      	mov	r3, r5
 8007f30:	4905      	ldr	r1, [pc, #20]	@ (8007f48 <__assert_func+0x34>)
 8007f32:	f002 fc03 	bl	800a73c <fiprintf>
 8007f36:	f002 fc49 	bl	800a7cc <abort>
 8007f3a:	4b04      	ldr	r3, [pc, #16]	@ (8007f4c <__assert_func+0x38>)
 8007f3c:	e7f4      	b.n	8007f28 <__assert_func+0x14>
 8007f3e:	bf00      	nop
 8007f40:	2000003c 	.word	0x2000003c
 8007f44:	0800b614 	.word	0x0800b614
 8007f48:	0800e5fe 	.word	0x0800e5fe
 8007f4c:	0800e5f1 	.word	0x0800e5f1

08007f50 <quorem>:
 8007f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	6903      	ldr	r3, [r0, #16]
 8007f56:	690c      	ldr	r4, [r1, #16]
 8007f58:	4607      	mov	r7, r0
 8007f5a:	42a3      	cmp	r3, r4
 8007f5c:	db7e      	blt.n	800805c <quorem+0x10c>
 8007f5e:	3c01      	subs	r4, #1
 8007f60:	00a3      	lsls	r3, r4, #2
 8007f62:	f100 0514 	add.w	r5, r0, #20
 8007f66:	f101 0814 	add.w	r8, r1, #20
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f70:	9301      	str	r3, [sp, #4]
 8007f72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f86:	d32e      	bcc.n	8007fe6 <quorem+0x96>
 8007f88:	f04f 0a00 	mov.w	sl, #0
 8007f8c:	46c4      	mov	ip, r8
 8007f8e:	46ae      	mov	lr, r5
 8007f90:	46d3      	mov	fp, sl
 8007f92:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f96:	b298      	uxth	r0, r3
 8007f98:	fb06 a000 	mla	r0, r6, r0, sl
 8007f9c:	0c1b      	lsrs	r3, r3, #16
 8007f9e:	0c02      	lsrs	r2, r0, #16
 8007fa0:	fb06 2303 	mla	r3, r6, r3, r2
 8007fa4:	f8de 2000 	ldr.w	r2, [lr]
 8007fa8:	b280      	uxth	r0, r0
 8007faa:	b292      	uxth	r2, r2
 8007fac:	1a12      	subs	r2, r2, r0
 8007fae:	445a      	add	r2, fp
 8007fb0:	f8de 0000 	ldr.w	r0, [lr]
 8007fb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007fbe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007fc2:	b292      	uxth	r2, r2
 8007fc4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fc8:	45e1      	cmp	r9, ip
 8007fca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fce:	f84e 2b04 	str.w	r2, [lr], #4
 8007fd2:	d2de      	bcs.n	8007f92 <quorem+0x42>
 8007fd4:	9b00      	ldr	r3, [sp, #0]
 8007fd6:	58eb      	ldr	r3, [r5, r3]
 8007fd8:	b92b      	cbnz	r3, 8007fe6 <quorem+0x96>
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	3b04      	subs	r3, #4
 8007fde:	429d      	cmp	r5, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	d32f      	bcc.n	8008044 <quorem+0xf4>
 8007fe4:	613c      	str	r4, [r7, #16]
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	f001 f9c2 	bl	8009370 <__mcmp>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	db25      	blt.n	800803c <quorem+0xec>
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ff8:	f8d1 c000 	ldr.w	ip, [r1]
 8007ffc:	fa1f fe82 	uxth.w	lr, r2
 8008000:	fa1f f38c 	uxth.w	r3, ip
 8008004:	eba3 030e 	sub.w	r3, r3, lr
 8008008:	4403      	add	r3, r0
 800800a:	0c12      	lsrs	r2, r2, #16
 800800c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008010:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008014:	b29b      	uxth	r3, r3
 8008016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800801a:	45c1      	cmp	r9, r8
 800801c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008020:	f841 3b04 	str.w	r3, [r1], #4
 8008024:	d2e6      	bcs.n	8007ff4 <quorem+0xa4>
 8008026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800802a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800802e:	b922      	cbnz	r2, 800803a <quorem+0xea>
 8008030:	3b04      	subs	r3, #4
 8008032:	429d      	cmp	r5, r3
 8008034:	461a      	mov	r2, r3
 8008036:	d30b      	bcc.n	8008050 <quorem+0x100>
 8008038:	613c      	str	r4, [r7, #16]
 800803a:	3601      	adds	r6, #1
 800803c:	4630      	mov	r0, r6
 800803e:	b003      	add	sp, #12
 8008040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008044:	6812      	ldr	r2, [r2, #0]
 8008046:	3b04      	subs	r3, #4
 8008048:	2a00      	cmp	r2, #0
 800804a:	d1cb      	bne.n	8007fe4 <quorem+0x94>
 800804c:	3c01      	subs	r4, #1
 800804e:	e7c6      	b.n	8007fde <quorem+0x8e>
 8008050:	6812      	ldr	r2, [r2, #0]
 8008052:	3b04      	subs	r3, #4
 8008054:	2a00      	cmp	r2, #0
 8008056:	d1ef      	bne.n	8008038 <quorem+0xe8>
 8008058:	3c01      	subs	r4, #1
 800805a:	e7ea      	b.n	8008032 <quorem+0xe2>
 800805c:	2000      	movs	r0, #0
 800805e:	e7ee      	b.n	800803e <quorem+0xee>

08008060 <_dtoa_r>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	4614      	mov	r4, r2
 8008066:	461d      	mov	r5, r3
 8008068:	69c7      	ldr	r7, [r0, #28]
 800806a:	b097      	sub	sp, #92	@ 0x5c
 800806c:	4683      	mov	fp, r0
 800806e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008072:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008074:	b97f      	cbnz	r7, 8008096 <_dtoa_r+0x36>
 8008076:	2010      	movs	r0, #16
 8008078:	f000 fe02 	bl	8008c80 <malloc>
 800807c:	4602      	mov	r2, r0
 800807e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008082:	b920      	cbnz	r0, 800808e <_dtoa_r+0x2e>
 8008084:	21ef      	movs	r1, #239	@ 0xef
 8008086:	4ba8      	ldr	r3, [pc, #672]	@ (8008328 <_dtoa_r+0x2c8>)
 8008088:	48a8      	ldr	r0, [pc, #672]	@ (800832c <_dtoa_r+0x2cc>)
 800808a:	f7ff ff43 	bl	8007f14 <__assert_func>
 800808e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008092:	6007      	str	r7, [r0, #0]
 8008094:	60c7      	str	r7, [r0, #12]
 8008096:	f8db 301c 	ldr.w	r3, [fp, #28]
 800809a:	6819      	ldr	r1, [r3, #0]
 800809c:	b159      	cbz	r1, 80080b6 <_dtoa_r+0x56>
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	2301      	movs	r3, #1
 80080a2:	4093      	lsls	r3, r2
 80080a4:	604a      	str	r2, [r1, #4]
 80080a6:	608b      	str	r3, [r1, #8]
 80080a8:	4658      	mov	r0, fp
 80080aa:	f000 fedf 	bl	8008e6c <_Bfree>
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	1e2b      	subs	r3, r5, #0
 80080b8:	bfaf      	iteee	ge
 80080ba:	2300      	movge	r3, #0
 80080bc:	2201      	movlt	r2, #1
 80080be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80080c2:	9303      	strlt	r3, [sp, #12]
 80080c4:	bfa8      	it	ge
 80080c6:	6033      	strge	r3, [r6, #0]
 80080c8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80080cc:	4b98      	ldr	r3, [pc, #608]	@ (8008330 <_dtoa_r+0x2d0>)
 80080ce:	bfb8      	it	lt
 80080d0:	6032      	strlt	r2, [r6, #0]
 80080d2:	ea33 0308 	bics.w	r3, r3, r8
 80080d6:	d112      	bne.n	80080fe <_dtoa_r+0x9e>
 80080d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80080e4:	4323      	orrs	r3, r4
 80080e6:	f000 8550 	beq.w	8008b8a <_dtoa_r+0xb2a>
 80080ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80080ec:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008334 <_dtoa_r+0x2d4>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 8552 	beq.w	8008b9a <_dtoa_r+0xb3a>
 80080f6:	f10a 0303 	add.w	r3, sl, #3
 80080fa:	f000 bd4c 	b.w	8008b96 <_dtoa_r+0xb36>
 80080fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008102:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800810a:	2200      	movs	r2, #0
 800810c:	2300      	movs	r3, #0
 800810e:	f7f8 fcff 	bl	8000b10 <__aeabi_dcmpeq>
 8008112:	4607      	mov	r7, r0
 8008114:	b158      	cbz	r0, 800812e <_dtoa_r+0xce>
 8008116:	2301      	movs	r3, #1
 8008118:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800811e:	b113      	cbz	r3, 8008126 <_dtoa_r+0xc6>
 8008120:	4b85      	ldr	r3, [pc, #532]	@ (8008338 <_dtoa_r+0x2d8>)
 8008122:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800833c <_dtoa_r+0x2dc>
 800812a:	f000 bd36 	b.w	8008b9a <_dtoa_r+0xb3a>
 800812e:	ab14      	add	r3, sp, #80	@ 0x50
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	ab15      	add	r3, sp, #84	@ 0x54
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	4658      	mov	r0, fp
 8008138:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800813c:	f001 fa30 	bl	80095a0 <__d2b>
 8008140:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008144:	4681      	mov	r9, r0
 8008146:	2e00      	cmp	r6, #0
 8008148:	d077      	beq.n	800823a <_dtoa_r+0x1da>
 800814a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800814e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008150:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008158:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800815c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008160:	9712      	str	r7, [sp, #72]	@ 0x48
 8008162:	4619      	mov	r1, r3
 8008164:	2200      	movs	r2, #0
 8008166:	4b76      	ldr	r3, [pc, #472]	@ (8008340 <_dtoa_r+0x2e0>)
 8008168:	f7f8 f8b2 	bl	80002d0 <__aeabi_dsub>
 800816c:	a368      	add	r3, pc, #416	@ (adr r3, 8008310 <_dtoa_r+0x2b0>)
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f7f8 fa65 	bl	8000640 <__aeabi_dmul>
 8008176:	a368      	add	r3, pc, #416	@ (adr r3, 8008318 <_dtoa_r+0x2b8>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	f7f8 f8aa 	bl	80002d4 <__adddf3>
 8008180:	4604      	mov	r4, r0
 8008182:	4630      	mov	r0, r6
 8008184:	460d      	mov	r5, r1
 8008186:	f7f8 f9f1 	bl	800056c <__aeabi_i2d>
 800818a:	a365      	add	r3, pc, #404	@ (adr r3, 8008320 <_dtoa_r+0x2c0>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f8 fa56 	bl	8000640 <__aeabi_dmul>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4620      	mov	r0, r4
 800819a:	4629      	mov	r1, r5
 800819c:	f7f8 f89a 	bl	80002d4 <__adddf3>
 80081a0:	4604      	mov	r4, r0
 80081a2:	460d      	mov	r5, r1
 80081a4:	f7f8 fcfc 	bl	8000ba0 <__aeabi_d2iz>
 80081a8:	2200      	movs	r2, #0
 80081aa:	4607      	mov	r7, r0
 80081ac:	2300      	movs	r3, #0
 80081ae:	4620      	mov	r0, r4
 80081b0:	4629      	mov	r1, r5
 80081b2:	f7f8 fcb7 	bl	8000b24 <__aeabi_dcmplt>
 80081b6:	b140      	cbz	r0, 80081ca <_dtoa_r+0x16a>
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7f8 f9d7 	bl	800056c <__aeabi_i2d>
 80081be:	4622      	mov	r2, r4
 80081c0:	462b      	mov	r3, r5
 80081c2:	f7f8 fca5 	bl	8000b10 <__aeabi_dcmpeq>
 80081c6:	b900      	cbnz	r0, 80081ca <_dtoa_r+0x16a>
 80081c8:	3f01      	subs	r7, #1
 80081ca:	2f16      	cmp	r7, #22
 80081cc:	d853      	bhi.n	8008276 <_dtoa_r+0x216>
 80081ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081d2:	4b5c      	ldr	r3, [pc, #368]	@ (8008344 <_dtoa_r+0x2e4>)
 80081d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	f7f8 fca2 	bl	8000b24 <__aeabi_dcmplt>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d04a      	beq.n	800827a <_dtoa_r+0x21a>
 80081e4:	2300      	movs	r3, #0
 80081e6:	3f01      	subs	r7, #1
 80081e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081ec:	1b9b      	subs	r3, r3, r6
 80081ee:	1e5a      	subs	r2, r3, #1
 80081f0:	bf46      	itte	mi
 80081f2:	f1c3 0801 	rsbmi	r8, r3, #1
 80081f6:	2300      	movmi	r3, #0
 80081f8:	f04f 0800 	movpl.w	r8, #0
 80081fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80081fe:	bf48      	it	mi
 8008200:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008202:	2f00      	cmp	r7, #0
 8008204:	db3b      	blt.n	800827e <_dtoa_r+0x21e>
 8008206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008208:	970e      	str	r7, [sp, #56]	@ 0x38
 800820a:	443b      	add	r3, r7
 800820c:	9309      	str	r3, [sp, #36]	@ 0x24
 800820e:	2300      	movs	r3, #0
 8008210:	930a      	str	r3, [sp, #40]	@ 0x28
 8008212:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008214:	2b09      	cmp	r3, #9
 8008216:	d866      	bhi.n	80082e6 <_dtoa_r+0x286>
 8008218:	2b05      	cmp	r3, #5
 800821a:	bfc4      	itt	gt
 800821c:	3b04      	subgt	r3, #4
 800821e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008220:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008222:	bfc8      	it	gt
 8008224:	2400      	movgt	r4, #0
 8008226:	f1a3 0302 	sub.w	r3, r3, #2
 800822a:	bfd8      	it	le
 800822c:	2401      	movle	r4, #1
 800822e:	2b03      	cmp	r3, #3
 8008230:	d864      	bhi.n	80082fc <_dtoa_r+0x29c>
 8008232:	e8df f003 	tbb	[pc, r3]
 8008236:	382b      	.short	0x382b
 8008238:	5636      	.short	0x5636
 800823a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800823e:	441e      	add	r6, r3
 8008240:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008244:	2b20      	cmp	r3, #32
 8008246:	bfc1      	itttt	gt
 8008248:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800824c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008250:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008254:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008258:	bfd6      	itet	le
 800825a:	f1c3 0320 	rsble	r3, r3, #32
 800825e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008262:	fa04 f003 	lslle.w	r0, r4, r3
 8008266:	f7f8 f971 	bl	800054c <__aeabi_ui2d>
 800826a:	2201      	movs	r2, #1
 800826c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008270:	3e01      	subs	r6, #1
 8008272:	9212      	str	r2, [sp, #72]	@ 0x48
 8008274:	e775      	b.n	8008162 <_dtoa_r+0x102>
 8008276:	2301      	movs	r3, #1
 8008278:	e7b6      	b.n	80081e8 <_dtoa_r+0x188>
 800827a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800827c:	e7b5      	b.n	80081ea <_dtoa_r+0x18a>
 800827e:	427b      	negs	r3, r7
 8008280:	930a      	str	r3, [sp, #40]	@ 0x28
 8008282:	2300      	movs	r3, #0
 8008284:	eba8 0807 	sub.w	r8, r8, r7
 8008288:	930e      	str	r3, [sp, #56]	@ 0x38
 800828a:	e7c2      	b.n	8008212 <_dtoa_r+0x1b2>
 800828c:	2300      	movs	r3, #0
 800828e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008290:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008292:	2b00      	cmp	r3, #0
 8008294:	dc35      	bgt.n	8008302 <_dtoa_r+0x2a2>
 8008296:	2301      	movs	r3, #1
 8008298:	461a      	mov	r2, r3
 800829a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800829e:	9221      	str	r2, [sp, #132]	@ 0x84
 80082a0:	e00b      	b.n	80082ba <_dtoa_r+0x25a>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e7f3      	b.n	800828e <_dtoa_r+0x22e>
 80082a6:	2300      	movs	r3, #0
 80082a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082ac:	18fb      	adds	r3, r7, r3
 80082ae:	9308      	str	r3, [sp, #32]
 80082b0:	3301      	adds	r3, #1
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	9307      	str	r3, [sp, #28]
 80082b6:	bfb8      	it	lt
 80082b8:	2301      	movlt	r3, #1
 80082ba:	2100      	movs	r1, #0
 80082bc:	2204      	movs	r2, #4
 80082be:	f8db 001c 	ldr.w	r0, [fp, #28]
 80082c2:	f102 0514 	add.w	r5, r2, #20
 80082c6:	429d      	cmp	r5, r3
 80082c8:	d91f      	bls.n	800830a <_dtoa_r+0x2aa>
 80082ca:	6041      	str	r1, [r0, #4]
 80082cc:	4658      	mov	r0, fp
 80082ce:	f000 fd8d 	bl	8008dec <_Balloc>
 80082d2:	4682      	mov	sl, r0
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d139      	bne.n	800834c <_dtoa_r+0x2ec>
 80082d8:	4602      	mov	r2, r0
 80082da:	f240 11af 	movw	r1, #431	@ 0x1af
 80082de:	4b1a      	ldr	r3, [pc, #104]	@ (8008348 <_dtoa_r+0x2e8>)
 80082e0:	e6d2      	b.n	8008088 <_dtoa_r+0x28>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e7e0      	b.n	80082a8 <_dtoa_r+0x248>
 80082e6:	2401      	movs	r4, #1
 80082e8:	2300      	movs	r3, #0
 80082ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80082ec:	9320      	str	r3, [sp, #128]	@ 0x80
 80082ee:	f04f 33ff 	mov.w	r3, #4294967295
 80082f2:	2200      	movs	r2, #0
 80082f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80082f8:	2312      	movs	r3, #18
 80082fa:	e7d0      	b.n	800829e <_dtoa_r+0x23e>
 80082fc:	2301      	movs	r3, #1
 80082fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008300:	e7f5      	b.n	80082ee <_dtoa_r+0x28e>
 8008302:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008304:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008308:	e7d7      	b.n	80082ba <_dtoa_r+0x25a>
 800830a:	3101      	adds	r1, #1
 800830c:	0052      	lsls	r2, r2, #1
 800830e:	e7d8      	b.n	80082c2 <_dtoa_r+0x262>
 8008310:	636f4361 	.word	0x636f4361
 8008314:	3fd287a7 	.word	0x3fd287a7
 8008318:	8b60c8b3 	.word	0x8b60c8b3
 800831c:	3fc68a28 	.word	0x3fc68a28
 8008320:	509f79fb 	.word	0x509f79fb
 8008324:	3fd34413 	.word	0x3fd34413
 8008328:	0800e580 	.word	0x0800e580
 800832c:	0800e63a 	.word	0x0800e63a
 8008330:	7ff00000 	.word	0x7ff00000
 8008334:	0800e636 	.word	0x0800e636
 8008338:	0800e558 	.word	0x0800e558
 800833c:	0800e557 	.word	0x0800e557
 8008340:	3ff80000 	.word	0x3ff80000
 8008344:	0800e730 	.word	0x0800e730
 8008348:	0800e692 	.word	0x0800e692
 800834c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008350:	6018      	str	r0, [r3, #0]
 8008352:	9b07      	ldr	r3, [sp, #28]
 8008354:	2b0e      	cmp	r3, #14
 8008356:	f200 80a4 	bhi.w	80084a2 <_dtoa_r+0x442>
 800835a:	2c00      	cmp	r4, #0
 800835c:	f000 80a1 	beq.w	80084a2 <_dtoa_r+0x442>
 8008360:	2f00      	cmp	r7, #0
 8008362:	dd33      	ble.n	80083cc <_dtoa_r+0x36c>
 8008364:	4b86      	ldr	r3, [pc, #536]	@ (8008580 <_dtoa_r+0x520>)
 8008366:	f007 020f 	and.w	r2, r7, #15
 800836a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800836e:	05f8      	lsls	r0, r7, #23
 8008370:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008374:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008378:	ea4f 1427 	mov.w	r4, r7, asr #4
 800837c:	d516      	bpl.n	80083ac <_dtoa_r+0x34c>
 800837e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008382:	4b80      	ldr	r3, [pc, #512]	@ (8008584 <_dtoa_r+0x524>)
 8008384:	2603      	movs	r6, #3
 8008386:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800838a:	f7f8 fa83 	bl	8000894 <__aeabi_ddiv>
 800838e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008392:	f004 040f 	and.w	r4, r4, #15
 8008396:	4d7b      	ldr	r5, [pc, #492]	@ (8008584 <_dtoa_r+0x524>)
 8008398:	b954      	cbnz	r4, 80083b0 <_dtoa_r+0x350>
 800839a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800839e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083a2:	f7f8 fa77 	bl	8000894 <__aeabi_ddiv>
 80083a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083aa:	e028      	b.n	80083fe <_dtoa_r+0x39e>
 80083ac:	2602      	movs	r6, #2
 80083ae:	e7f2      	b.n	8008396 <_dtoa_r+0x336>
 80083b0:	07e1      	lsls	r1, r4, #31
 80083b2:	d508      	bpl.n	80083c6 <_dtoa_r+0x366>
 80083b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083bc:	f7f8 f940 	bl	8000640 <__aeabi_dmul>
 80083c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083c4:	3601      	adds	r6, #1
 80083c6:	1064      	asrs	r4, r4, #1
 80083c8:	3508      	adds	r5, #8
 80083ca:	e7e5      	b.n	8008398 <_dtoa_r+0x338>
 80083cc:	f000 80d2 	beq.w	8008574 <_dtoa_r+0x514>
 80083d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083d4:	427c      	negs	r4, r7
 80083d6:	4b6a      	ldr	r3, [pc, #424]	@ (8008580 <_dtoa_r+0x520>)
 80083d8:	f004 020f 	and.w	r2, r4, #15
 80083dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	f7f8 f92c 	bl	8000640 <__aeabi_dmul>
 80083e8:	2602      	movs	r6, #2
 80083ea:	2300      	movs	r3, #0
 80083ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083f0:	4d64      	ldr	r5, [pc, #400]	@ (8008584 <_dtoa_r+0x524>)
 80083f2:	1124      	asrs	r4, r4, #4
 80083f4:	2c00      	cmp	r4, #0
 80083f6:	f040 80b2 	bne.w	800855e <_dtoa_r+0x4fe>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1d3      	bne.n	80083a6 <_dtoa_r+0x346>
 80083fe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008402:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 80b7 	beq.w	8008578 <_dtoa_r+0x518>
 800840a:	2200      	movs	r2, #0
 800840c:	4620      	mov	r0, r4
 800840e:	4629      	mov	r1, r5
 8008410:	4b5d      	ldr	r3, [pc, #372]	@ (8008588 <_dtoa_r+0x528>)
 8008412:	f7f8 fb87 	bl	8000b24 <__aeabi_dcmplt>
 8008416:	2800      	cmp	r0, #0
 8008418:	f000 80ae 	beq.w	8008578 <_dtoa_r+0x518>
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 80aa 	beq.w	8008578 <_dtoa_r+0x518>
 8008424:	9b08      	ldr	r3, [sp, #32]
 8008426:	2b00      	cmp	r3, #0
 8008428:	dd37      	ble.n	800849a <_dtoa_r+0x43a>
 800842a:	1e7b      	subs	r3, r7, #1
 800842c:	4620      	mov	r0, r4
 800842e:	9304      	str	r3, [sp, #16]
 8008430:	2200      	movs	r2, #0
 8008432:	4629      	mov	r1, r5
 8008434:	4b55      	ldr	r3, [pc, #340]	@ (800858c <_dtoa_r+0x52c>)
 8008436:	f7f8 f903 	bl	8000640 <__aeabi_dmul>
 800843a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800843e:	9c08      	ldr	r4, [sp, #32]
 8008440:	3601      	adds	r6, #1
 8008442:	4630      	mov	r0, r6
 8008444:	f7f8 f892 	bl	800056c <__aeabi_i2d>
 8008448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800844c:	f7f8 f8f8 	bl	8000640 <__aeabi_dmul>
 8008450:	2200      	movs	r2, #0
 8008452:	4b4f      	ldr	r3, [pc, #316]	@ (8008590 <_dtoa_r+0x530>)
 8008454:	f7f7 ff3e 	bl	80002d4 <__adddf3>
 8008458:	4605      	mov	r5, r0
 800845a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800845e:	2c00      	cmp	r4, #0
 8008460:	f040 809a 	bne.w	8008598 <_dtoa_r+0x538>
 8008464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008468:	2200      	movs	r2, #0
 800846a:	4b4a      	ldr	r3, [pc, #296]	@ (8008594 <_dtoa_r+0x534>)
 800846c:	f7f7 ff30 	bl	80002d0 <__aeabi_dsub>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008478:	462a      	mov	r2, r5
 800847a:	4633      	mov	r3, r6
 800847c:	f7f8 fb70 	bl	8000b60 <__aeabi_dcmpgt>
 8008480:	2800      	cmp	r0, #0
 8008482:	f040 828e 	bne.w	80089a2 <_dtoa_r+0x942>
 8008486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800848a:	462a      	mov	r2, r5
 800848c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008490:	f7f8 fb48 	bl	8000b24 <__aeabi_dcmplt>
 8008494:	2800      	cmp	r0, #0
 8008496:	f040 8127 	bne.w	80086e8 <_dtoa_r+0x688>
 800849a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800849e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80084a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f2c0 8163 	blt.w	8008770 <_dtoa_r+0x710>
 80084aa:	2f0e      	cmp	r7, #14
 80084ac:	f300 8160 	bgt.w	8008770 <_dtoa_r+0x710>
 80084b0:	4b33      	ldr	r3, [pc, #204]	@ (8008580 <_dtoa_r+0x520>)
 80084b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	da03      	bge.n	80084cc <_dtoa_r+0x46c>
 80084c4:	9b07      	ldr	r3, [sp, #28]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f340 8100 	ble.w	80086cc <_dtoa_r+0x66c>
 80084cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084d0:	4656      	mov	r6, sl
 80084d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084d6:	4620      	mov	r0, r4
 80084d8:	4629      	mov	r1, r5
 80084da:	f7f8 f9db 	bl	8000894 <__aeabi_ddiv>
 80084de:	f7f8 fb5f 	bl	8000ba0 <__aeabi_d2iz>
 80084e2:	4680      	mov	r8, r0
 80084e4:	f7f8 f842 	bl	800056c <__aeabi_i2d>
 80084e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ec:	f7f8 f8a8 	bl	8000640 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4620      	mov	r0, r4
 80084f6:	4629      	mov	r1, r5
 80084f8:	f7f7 feea 	bl	80002d0 <__aeabi_dsub>
 80084fc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008500:	9d07      	ldr	r5, [sp, #28]
 8008502:	f806 4b01 	strb.w	r4, [r6], #1
 8008506:	eba6 040a 	sub.w	r4, r6, sl
 800850a:	42a5      	cmp	r5, r4
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	f040 8116 	bne.w	8008740 <_dtoa_r+0x6e0>
 8008514:	f7f7 fede 	bl	80002d4 <__adddf3>
 8008518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800851c:	4604      	mov	r4, r0
 800851e:	460d      	mov	r5, r1
 8008520:	f7f8 fb1e 	bl	8000b60 <__aeabi_dcmpgt>
 8008524:	2800      	cmp	r0, #0
 8008526:	f040 80f8 	bne.w	800871a <_dtoa_r+0x6ba>
 800852a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800852e:	4620      	mov	r0, r4
 8008530:	4629      	mov	r1, r5
 8008532:	f7f8 faed 	bl	8000b10 <__aeabi_dcmpeq>
 8008536:	b118      	cbz	r0, 8008540 <_dtoa_r+0x4e0>
 8008538:	f018 0f01 	tst.w	r8, #1
 800853c:	f040 80ed 	bne.w	800871a <_dtoa_r+0x6ba>
 8008540:	4649      	mov	r1, r9
 8008542:	4658      	mov	r0, fp
 8008544:	f000 fc92 	bl	8008e6c <_Bfree>
 8008548:	2300      	movs	r3, #0
 800854a:	7033      	strb	r3, [r6, #0]
 800854c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800854e:	3701      	adds	r7, #1
 8008550:	601f      	str	r7, [r3, #0]
 8008552:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8320 	beq.w	8008b9a <_dtoa_r+0xb3a>
 800855a:	601e      	str	r6, [r3, #0]
 800855c:	e31d      	b.n	8008b9a <_dtoa_r+0xb3a>
 800855e:	07e2      	lsls	r2, r4, #31
 8008560:	d505      	bpl.n	800856e <_dtoa_r+0x50e>
 8008562:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008566:	f7f8 f86b 	bl	8000640 <__aeabi_dmul>
 800856a:	2301      	movs	r3, #1
 800856c:	3601      	adds	r6, #1
 800856e:	1064      	asrs	r4, r4, #1
 8008570:	3508      	adds	r5, #8
 8008572:	e73f      	b.n	80083f4 <_dtoa_r+0x394>
 8008574:	2602      	movs	r6, #2
 8008576:	e742      	b.n	80083fe <_dtoa_r+0x39e>
 8008578:	9c07      	ldr	r4, [sp, #28]
 800857a:	9704      	str	r7, [sp, #16]
 800857c:	e761      	b.n	8008442 <_dtoa_r+0x3e2>
 800857e:	bf00      	nop
 8008580:	0800e730 	.word	0x0800e730
 8008584:	0800e708 	.word	0x0800e708
 8008588:	3ff00000 	.word	0x3ff00000
 800858c:	40240000 	.word	0x40240000
 8008590:	401c0000 	.word	0x401c0000
 8008594:	40140000 	.word	0x40140000
 8008598:	4b70      	ldr	r3, [pc, #448]	@ (800875c <_dtoa_r+0x6fc>)
 800859a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800859c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085a4:	4454      	add	r4, sl
 80085a6:	2900      	cmp	r1, #0
 80085a8:	d045      	beq.n	8008636 <_dtoa_r+0x5d6>
 80085aa:	2000      	movs	r0, #0
 80085ac:	496c      	ldr	r1, [pc, #432]	@ (8008760 <_dtoa_r+0x700>)
 80085ae:	f7f8 f971 	bl	8000894 <__aeabi_ddiv>
 80085b2:	4633      	mov	r3, r6
 80085b4:	462a      	mov	r2, r5
 80085b6:	f7f7 fe8b 	bl	80002d0 <__aeabi_dsub>
 80085ba:	4656      	mov	r6, sl
 80085bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c4:	f7f8 faec 	bl	8000ba0 <__aeabi_d2iz>
 80085c8:	4605      	mov	r5, r0
 80085ca:	f7f7 ffcf 	bl	800056c <__aeabi_i2d>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085d6:	f7f7 fe7b 	bl	80002d0 <__aeabi_dsub>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	3530      	adds	r5, #48	@ 0x30
 80085e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085e8:	f806 5b01 	strb.w	r5, [r6], #1
 80085ec:	f7f8 fa9a 	bl	8000b24 <__aeabi_dcmplt>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d163      	bne.n	80086bc <_dtoa_r+0x65c>
 80085f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085f8:	2000      	movs	r0, #0
 80085fa:	495a      	ldr	r1, [pc, #360]	@ (8008764 <_dtoa_r+0x704>)
 80085fc:	f7f7 fe68 	bl	80002d0 <__aeabi_dsub>
 8008600:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008604:	f7f8 fa8e 	bl	8000b24 <__aeabi_dcmplt>
 8008608:	2800      	cmp	r0, #0
 800860a:	f040 8087 	bne.w	800871c <_dtoa_r+0x6bc>
 800860e:	42a6      	cmp	r6, r4
 8008610:	f43f af43 	beq.w	800849a <_dtoa_r+0x43a>
 8008614:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008618:	2200      	movs	r2, #0
 800861a:	4b53      	ldr	r3, [pc, #332]	@ (8008768 <_dtoa_r+0x708>)
 800861c:	f7f8 f810 	bl	8000640 <__aeabi_dmul>
 8008620:	2200      	movs	r2, #0
 8008622:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800862a:	4b4f      	ldr	r3, [pc, #316]	@ (8008768 <_dtoa_r+0x708>)
 800862c:	f7f8 f808 	bl	8000640 <__aeabi_dmul>
 8008630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008634:	e7c4      	b.n	80085c0 <_dtoa_r+0x560>
 8008636:	4631      	mov	r1, r6
 8008638:	4628      	mov	r0, r5
 800863a:	f7f8 f801 	bl	8000640 <__aeabi_dmul>
 800863e:	4656      	mov	r6, sl
 8008640:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008644:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800864a:	f7f8 faa9 	bl	8000ba0 <__aeabi_d2iz>
 800864e:	4605      	mov	r5, r0
 8008650:	f7f7 ff8c 	bl	800056c <__aeabi_i2d>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800865c:	f7f7 fe38 	bl	80002d0 <__aeabi_dsub>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	3530      	adds	r5, #48	@ 0x30
 8008666:	f806 5b01 	strb.w	r5, [r6], #1
 800866a:	42a6      	cmp	r6, r4
 800866c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008670:	f04f 0200 	mov.w	r2, #0
 8008674:	d124      	bne.n	80086c0 <_dtoa_r+0x660>
 8008676:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800867a:	4b39      	ldr	r3, [pc, #228]	@ (8008760 <_dtoa_r+0x700>)
 800867c:	f7f7 fe2a 	bl	80002d4 <__adddf3>
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008688:	f7f8 fa6a 	bl	8000b60 <__aeabi_dcmpgt>
 800868c:	2800      	cmp	r0, #0
 800868e:	d145      	bne.n	800871c <_dtoa_r+0x6bc>
 8008690:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008694:	2000      	movs	r0, #0
 8008696:	4932      	ldr	r1, [pc, #200]	@ (8008760 <_dtoa_r+0x700>)
 8008698:	f7f7 fe1a 	bl	80002d0 <__aeabi_dsub>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086a4:	f7f8 fa3e 	bl	8000b24 <__aeabi_dcmplt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	f43f aef6 	beq.w	800849a <_dtoa_r+0x43a>
 80086ae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80086b0:	1e73      	subs	r3, r6, #1
 80086b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80086b8:	2b30      	cmp	r3, #48	@ 0x30
 80086ba:	d0f8      	beq.n	80086ae <_dtoa_r+0x64e>
 80086bc:	9f04      	ldr	r7, [sp, #16]
 80086be:	e73f      	b.n	8008540 <_dtoa_r+0x4e0>
 80086c0:	4b29      	ldr	r3, [pc, #164]	@ (8008768 <_dtoa_r+0x708>)
 80086c2:	f7f7 ffbd 	bl	8000640 <__aeabi_dmul>
 80086c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ca:	e7bc      	b.n	8008646 <_dtoa_r+0x5e6>
 80086cc:	d10c      	bne.n	80086e8 <_dtoa_r+0x688>
 80086ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086d2:	2200      	movs	r2, #0
 80086d4:	4b25      	ldr	r3, [pc, #148]	@ (800876c <_dtoa_r+0x70c>)
 80086d6:	f7f7 ffb3 	bl	8000640 <__aeabi_dmul>
 80086da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086de:	f7f8 fa35 	bl	8000b4c <__aeabi_dcmpge>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	f000 815b 	beq.w	800899e <_dtoa_r+0x93e>
 80086e8:	2400      	movs	r4, #0
 80086ea:	4625      	mov	r5, r4
 80086ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086ee:	4656      	mov	r6, sl
 80086f0:	43db      	mvns	r3, r3
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	2700      	movs	r7, #0
 80086f6:	4621      	mov	r1, r4
 80086f8:	4658      	mov	r0, fp
 80086fa:	f000 fbb7 	bl	8008e6c <_Bfree>
 80086fe:	2d00      	cmp	r5, #0
 8008700:	d0dc      	beq.n	80086bc <_dtoa_r+0x65c>
 8008702:	b12f      	cbz	r7, 8008710 <_dtoa_r+0x6b0>
 8008704:	42af      	cmp	r7, r5
 8008706:	d003      	beq.n	8008710 <_dtoa_r+0x6b0>
 8008708:	4639      	mov	r1, r7
 800870a:	4658      	mov	r0, fp
 800870c:	f000 fbae 	bl	8008e6c <_Bfree>
 8008710:	4629      	mov	r1, r5
 8008712:	4658      	mov	r0, fp
 8008714:	f000 fbaa 	bl	8008e6c <_Bfree>
 8008718:	e7d0      	b.n	80086bc <_dtoa_r+0x65c>
 800871a:	9704      	str	r7, [sp, #16]
 800871c:	4633      	mov	r3, r6
 800871e:	461e      	mov	r6, r3
 8008720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008724:	2a39      	cmp	r2, #57	@ 0x39
 8008726:	d107      	bne.n	8008738 <_dtoa_r+0x6d8>
 8008728:	459a      	cmp	sl, r3
 800872a:	d1f8      	bne.n	800871e <_dtoa_r+0x6be>
 800872c:	9a04      	ldr	r2, [sp, #16]
 800872e:	3201      	adds	r2, #1
 8008730:	9204      	str	r2, [sp, #16]
 8008732:	2230      	movs	r2, #48	@ 0x30
 8008734:	f88a 2000 	strb.w	r2, [sl]
 8008738:	781a      	ldrb	r2, [r3, #0]
 800873a:	3201      	adds	r2, #1
 800873c:	701a      	strb	r2, [r3, #0]
 800873e:	e7bd      	b.n	80086bc <_dtoa_r+0x65c>
 8008740:	2200      	movs	r2, #0
 8008742:	4b09      	ldr	r3, [pc, #36]	@ (8008768 <_dtoa_r+0x708>)
 8008744:	f7f7 ff7c 	bl	8000640 <__aeabi_dmul>
 8008748:	2200      	movs	r2, #0
 800874a:	2300      	movs	r3, #0
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
 8008750:	f7f8 f9de 	bl	8000b10 <__aeabi_dcmpeq>
 8008754:	2800      	cmp	r0, #0
 8008756:	f43f aebc 	beq.w	80084d2 <_dtoa_r+0x472>
 800875a:	e6f1      	b.n	8008540 <_dtoa_r+0x4e0>
 800875c:	0800e730 	.word	0x0800e730
 8008760:	3fe00000 	.word	0x3fe00000
 8008764:	3ff00000 	.word	0x3ff00000
 8008768:	40240000 	.word	0x40240000
 800876c:	40140000 	.word	0x40140000
 8008770:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008772:	2a00      	cmp	r2, #0
 8008774:	f000 80db 	beq.w	800892e <_dtoa_r+0x8ce>
 8008778:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800877a:	2a01      	cmp	r2, #1
 800877c:	f300 80bf 	bgt.w	80088fe <_dtoa_r+0x89e>
 8008780:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008782:	2a00      	cmp	r2, #0
 8008784:	f000 80b7 	beq.w	80088f6 <_dtoa_r+0x896>
 8008788:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800878c:	4646      	mov	r6, r8
 800878e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008792:	2101      	movs	r1, #1
 8008794:	441a      	add	r2, r3
 8008796:	4658      	mov	r0, fp
 8008798:	4498      	add	r8, r3
 800879a:	9209      	str	r2, [sp, #36]	@ 0x24
 800879c:	f000 fc64 	bl	8009068 <__i2b>
 80087a0:	4605      	mov	r5, r0
 80087a2:	b15e      	cbz	r6, 80087bc <_dtoa_r+0x75c>
 80087a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	dd08      	ble.n	80087bc <_dtoa_r+0x75c>
 80087aa:	42b3      	cmp	r3, r6
 80087ac:	bfa8      	it	ge
 80087ae:	4633      	movge	r3, r6
 80087b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087b2:	eba8 0803 	sub.w	r8, r8, r3
 80087b6:	1af6      	subs	r6, r6, r3
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80087bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087be:	b1f3      	cbz	r3, 80087fe <_dtoa_r+0x79e>
 80087c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 80b7 	beq.w	8008936 <_dtoa_r+0x8d6>
 80087c8:	b18c      	cbz	r4, 80087ee <_dtoa_r+0x78e>
 80087ca:	4629      	mov	r1, r5
 80087cc:	4622      	mov	r2, r4
 80087ce:	4658      	mov	r0, fp
 80087d0:	f000 fd08 	bl	80091e4 <__pow5mult>
 80087d4:	464a      	mov	r2, r9
 80087d6:	4601      	mov	r1, r0
 80087d8:	4605      	mov	r5, r0
 80087da:	4658      	mov	r0, fp
 80087dc:	f000 fc5a 	bl	8009094 <__multiply>
 80087e0:	4649      	mov	r1, r9
 80087e2:	9004      	str	r0, [sp, #16]
 80087e4:	4658      	mov	r0, fp
 80087e6:	f000 fb41 	bl	8008e6c <_Bfree>
 80087ea:	9b04      	ldr	r3, [sp, #16]
 80087ec:	4699      	mov	r9, r3
 80087ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f0:	1b1a      	subs	r2, r3, r4
 80087f2:	d004      	beq.n	80087fe <_dtoa_r+0x79e>
 80087f4:	4649      	mov	r1, r9
 80087f6:	4658      	mov	r0, fp
 80087f8:	f000 fcf4 	bl	80091e4 <__pow5mult>
 80087fc:	4681      	mov	r9, r0
 80087fe:	2101      	movs	r1, #1
 8008800:	4658      	mov	r0, fp
 8008802:	f000 fc31 	bl	8009068 <__i2b>
 8008806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008808:	4604      	mov	r4, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 81c9 	beq.w	8008ba2 <_dtoa_r+0xb42>
 8008810:	461a      	mov	r2, r3
 8008812:	4601      	mov	r1, r0
 8008814:	4658      	mov	r0, fp
 8008816:	f000 fce5 	bl	80091e4 <__pow5mult>
 800881a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800881c:	4604      	mov	r4, r0
 800881e:	2b01      	cmp	r3, #1
 8008820:	f300 808f 	bgt.w	8008942 <_dtoa_r+0x8e2>
 8008824:	9b02      	ldr	r3, [sp, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	f040 8087 	bne.w	800893a <_dtoa_r+0x8da>
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008832:	2b00      	cmp	r3, #0
 8008834:	f040 8083 	bne.w	800893e <_dtoa_r+0x8de>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800883e:	0d1b      	lsrs	r3, r3, #20
 8008840:	051b      	lsls	r3, r3, #20
 8008842:	b12b      	cbz	r3, 8008850 <_dtoa_r+0x7f0>
 8008844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008846:	f108 0801 	add.w	r8, r8, #1
 800884a:	3301      	adds	r3, #1
 800884c:	9309      	str	r3, [sp, #36]	@ 0x24
 800884e:	2301      	movs	r3, #1
 8008850:	930a      	str	r3, [sp, #40]	@ 0x28
 8008852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 81aa 	beq.w	8008bae <_dtoa_r+0xb4e>
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008860:	6918      	ldr	r0, [r3, #16]
 8008862:	f000 fbb5 	bl	8008fd0 <__hi0bits>
 8008866:	f1c0 0020 	rsb	r0, r0, #32
 800886a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800886c:	4418      	add	r0, r3
 800886e:	f010 001f 	ands.w	r0, r0, #31
 8008872:	d071      	beq.n	8008958 <_dtoa_r+0x8f8>
 8008874:	f1c0 0320 	rsb	r3, r0, #32
 8008878:	2b04      	cmp	r3, #4
 800887a:	dd65      	ble.n	8008948 <_dtoa_r+0x8e8>
 800887c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800887e:	f1c0 001c 	rsb	r0, r0, #28
 8008882:	4403      	add	r3, r0
 8008884:	4480      	add	r8, r0
 8008886:	4406      	add	r6, r0
 8008888:	9309      	str	r3, [sp, #36]	@ 0x24
 800888a:	f1b8 0f00 	cmp.w	r8, #0
 800888e:	dd05      	ble.n	800889c <_dtoa_r+0x83c>
 8008890:	4649      	mov	r1, r9
 8008892:	4642      	mov	r2, r8
 8008894:	4658      	mov	r0, fp
 8008896:	f000 fcff 	bl	8009298 <__lshift>
 800889a:	4681      	mov	r9, r0
 800889c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dd05      	ble.n	80088ae <_dtoa_r+0x84e>
 80088a2:	4621      	mov	r1, r4
 80088a4:	461a      	mov	r2, r3
 80088a6:	4658      	mov	r0, fp
 80088a8:	f000 fcf6 	bl	8009298 <__lshift>
 80088ac:	4604      	mov	r4, r0
 80088ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d053      	beq.n	800895c <_dtoa_r+0x8fc>
 80088b4:	4621      	mov	r1, r4
 80088b6:	4648      	mov	r0, r9
 80088b8:	f000 fd5a 	bl	8009370 <__mcmp>
 80088bc:	2800      	cmp	r0, #0
 80088be:	da4d      	bge.n	800895c <_dtoa_r+0x8fc>
 80088c0:	1e7b      	subs	r3, r7, #1
 80088c2:	4649      	mov	r1, r9
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	220a      	movs	r2, #10
 80088c8:	2300      	movs	r3, #0
 80088ca:	4658      	mov	r0, fp
 80088cc:	f000 faf0 	bl	8008eb0 <__multadd>
 80088d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088d2:	4681      	mov	r9, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 816c 	beq.w	8008bb2 <_dtoa_r+0xb52>
 80088da:	2300      	movs	r3, #0
 80088dc:	4629      	mov	r1, r5
 80088de:	220a      	movs	r2, #10
 80088e0:	4658      	mov	r0, fp
 80088e2:	f000 fae5 	bl	8008eb0 <__multadd>
 80088e6:	9b08      	ldr	r3, [sp, #32]
 80088e8:	4605      	mov	r5, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	dc61      	bgt.n	80089b2 <_dtoa_r+0x952>
 80088ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	dc3b      	bgt.n	800896c <_dtoa_r+0x90c>
 80088f4:	e05d      	b.n	80089b2 <_dtoa_r+0x952>
 80088f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088f8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80088fc:	e746      	b.n	800878c <_dtoa_r+0x72c>
 80088fe:	9b07      	ldr	r3, [sp, #28]
 8008900:	1e5c      	subs	r4, r3, #1
 8008902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008904:	42a3      	cmp	r3, r4
 8008906:	bfbf      	itttt	lt
 8008908:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800890a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800890c:	1ae3      	sublt	r3, r4, r3
 800890e:	18d2      	addlt	r2, r2, r3
 8008910:	bfa8      	it	ge
 8008912:	1b1c      	subge	r4, r3, r4
 8008914:	9b07      	ldr	r3, [sp, #28]
 8008916:	bfbe      	ittt	lt
 8008918:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800891a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800891c:	2400      	movlt	r4, #0
 800891e:	2b00      	cmp	r3, #0
 8008920:	bfb5      	itete	lt
 8008922:	eba8 0603 	sublt.w	r6, r8, r3
 8008926:	4646      	movge	r6, r8
 8008928:	2300      	movlt	r3, #0
 800892a:	9b07      	ldrge	r3, [sp, #28]
 800892c:	e730      	b.n	8008790 <_dtoa_r+0x730>
 800892e:	4646      	mov	r6, r8
 8008930:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008932:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008934:	e735      	b.n	80087a2 <_dtoa_r+0x742>
 8008936:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008938:	e75c      	b.n	80087f4 <_dtoa_r+0x794>
 800893a:	2300      	movs	r3, #0
 800893c:	e788      	b.n	8008850 <_dtoa_r+0x7f0>
 800893e:	9b02      	ldr	r3, [sp, #8]
 8008940:	e786      	b.n	8008850 <_dtoa_r+0x7f0>
 8008942:	2300      	movs	r3, #0
 8008944:	930a      	str	r3, [sp, #40]	@ 0x28
 8008946:	e788      	b.n	800885a <_dtoa_r+0x7fa>
 8008948:	d09f      	beq.n	800888a <_dtoa_r+0x82a>
 800894a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800894c:	331c      	adds	r3, #28
 800894e:	441a      	add	r2, r3
 8008950:	4498      	add	r8, r3
 8008952:	441e      	add	r6, r3
 8008954:	9209      	str	r2, [sp, #36]	@ 0x24
 8008956:	e798      	b.n	800888a <_dtoa_r+0x82a>
 8008958:	4603      	mov	r3, r0
 800895a:	e7f6      	b.n	800894a <_dtoa_r+0x8ea>
 800895c:	9b07      	ldr	r3, [sp, #28]
 800895e:	9704      	str	r7, [sp, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	dc20      	bgt.n	80089a6 <_dtoa_r+0x946>
 8008964:	9308      	str	r3, [sp, #32]
 8008966:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008968:	2b02      	cmp	r3, #2
 800896a:	dd1e      	ble.n	80089aa <_dtoa_r+0x94a>
 800896c:	9b08      	ldr	r3, [sp, #32]
 800896e:	2b00      	cmp	r3, #0
 8008970:	f47f aebc 	bne.w	80086ec <_dtoa_r+0x68c>
 8008974:	4621      	mov	r1, r4
 8008976:	2205      	movs	r2, #5
 8008978:	4658      	mov	r0, fp
 800897a:	f000 fa99 	bl	8008eb0 <__multadd>
 800897e:	4601      	mov	r1, r0
 8008980:	4604      	mov	r4, r0
 8008982:	4648      	mov	r0, r9
 8008984:	f000 fcf4 	bl	8009370 <__mcmp>
 8008988:	2800      	cmp	r0, #0
 800898a:	f77f aeaf 	ble.w	80086ec <_dtoa_r+0x68c>
 800898e:	2331      	movs	r3, #49	@ 0x31
 8008990:	4656      	mov	r6, sl
 8008992:	f806 3b01 	strb.w	r3, [r6], #1
 8008996:	9b04      	ldr	r3, [sp, #16]
 8008998:	3301      	adds	r3, #1
 800899a:	9304      	str	r3, [sp, #16]
 800899c:	e6aa      	b.n	80086f4 <_dtoa_r+0x694>
 800899e:	9c07      	ldr	r4, [sp, #28]
 80089a0:	9704      	str	r7, [sp, #16]
 80089a2:	4625      	mov	r5, r4
 80089a4:	e7f3      	b.n	800898e <_dtoa_r+0x92e>
 80089a6:	9b07      	ldr	r3, [sp, #28]
 80089a8:	9308      	str	r3, [sp, #32]
 80089aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8104 	beq.w	8008bba <_dtoa_r+0xb5a>
 80089b2:	2e00      	cmp	r6, #0
 80089b4:	dd05      	ble.n	80089c2 <_dtoa_r+0x962>
 80089b6:	4629      	mov	r1, r5
 80089b8:	4632      	mov	r2, r6
 80089ba:	4658      	mov	r0, fp
 80089bc:	f000 fc6c 	bl	8009298 <__lshift>
 80089c0:	4605      	mov	r5, r0
 80089c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d05a      	beq.n	8008a7e <_dtoa_r+0xa1e>
 80089c8:	4658      	mov	r0, fp
 80089ca:	6869      	ldr	r1, [r5, #4]
 80089cc:	f000 fa0e 	bl	8008dec <_Balloc>
 80089d0:	4606      	mov	r6, r0
 80089d2:	b928      	cbnz	r0, 80089e0 <_dtoa_r+0x980>
 80089d4:	4602      	mov	r2, r0
 80089d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089da:	4b83      	ldr	r3, [pc, #524]	@ (8008be8 <_dtoa_r+0xb88>)
 80089dc:	f7ff bb54 	b.w	8008088 <_dtoa_r+0x28>
 80089e0:	692a      	ldr	r2, [r5, #16]
 80089e2:	f105 010c 	add.w	r1, r5, #12
 80089e6:	3202      	adds	r2, #2
 80089e8:	0092      	lsls	r2, r2, #2
 80089ea:	300c      	adds	r0, #12
 80089ec:	f001 feda 	bl	800a7a4 <memcpy>
 80089f0:	2201      	movs	r2, #1
 80089f2:	4631      	mov	r1, r6
 80089f4:	4658      	mov	r0, fp
 80089f6:	f000 fc4f 	bl	8009298 <__lshift>
 80089fa:	462f      	mov	r7, r5
 80089fc:	4605      	mov	r5, r0
 80089fe:	f10a 0301 	add.w	r3, sl, #1
 8008a02:	9307      	str	r3, [sp, #28]
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	4453      	add	r3, sl
 8008a08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a0a:	9b02      	ldr	r3, [sp, #8]
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a12:	9b07      	ldr	r3, [sp, #28]
 8008a14:	4621      	mov	r1, r4
 8008a16:	3b01      	subs	r3, #1
 8008a18:	4648      	mov	r0, r9
 8008a1a:	9302      	str	r3, [sp, #8]
 8008a1c:	f7ff fa98 	bl	8007f50 <quorem>
 8008a20:	4639      	mov	r1, r7
 8008a22:	9008      	str	r0, [sp, #32]
 8008a24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a28:	4648      	mov	r0, r9
 8008a2a:	f000 fca1 	bl	8009370 <__mcmp>
 8008a2e:	462a      	mov	r2, r5
 8008a30:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a32:	4621      	mov	r1, r4
 8008a34:	4658      	mov	r0, fp
 8008a36:	f000 fcb7 	bl	80093a8 <__mdiff>
 8008a3a:	68c2      	ldr	r2, [r0, #12]
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	bb02      	cbnz	r2, 8008a82 <_dtoa_r+0xa22>
 8008a40:	4601      	mov	r1, r0
 8008a42:	4648      	mov	r0, r9
 8008a44:	f000 fc94 	bl	8009370 <__mcmp>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4658      	mov	r0, fp
 8008a4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a50:	f000 fa0c 	bl	8008e6c <_Bfree>
 8008a54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a58:	9e07      	ldr	r6, [sp, #28]
 8008a5a:	ea43 0102 	orr.w	r1, r3, r2
 8008a5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a60:	4319      	orrs	r1, r3
 8008a62:	d110      	bne.n	8008a86 <_dtoa_r+0xa26>
 8008a64:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a68:	d029      	beq.n	8008abe <_dtoa_r+0xa5e>
 8008a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd02      	ble.n	8008a76 <_dtoa_r+0xa16>
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a76:	9b02      	ldr	r3, [sp, #8]
 8008a78:	f883 8000 	strb.w	r8, [r3]
 8008a7c:	e63b      	b.n	80086f6 <_dtoa_r+0x696>
 8008a7e:	4628      	mov	r0, r5
 8008a80:	e7bb      	b.n	80089fa <_dtoa_r+0x99a>
 8008a82:	2201      	movs	r2, #1
 8008a84:	e7e1      	b.n	8008a4a <_dtoa_r+0x9ea>
 8008a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	db04      	blt.n	8008a96 <_dtoa_r+0xa36>
 8008a8c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a92:	430b      	orrs	r3, r1
 8008a94:	d120      	bne.n	8008ad8 <_dtoa_r+0xa78>
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	dded      	ble.n	8008a76 <_dtoa_r+0xa16>
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	4658      	mov	r0, fp
 8008aa0:	f000 fbfa 	bl	8009298 <__lshift>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4681      	mov	r9, r0
 8008aa8:	f000 fc62 	bl	8009370 <__mcmp>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	dc03      	bgt.n	8008ab8 <_dtoa_r+0xa58>
 8008ab0:	d1e1      	bne.n	8008a76 <_dtoa_r+0xa16>
 8008ab2:	f018 0f01 	tst.w	r8, #1
 8008ab6:	d0de      	beq.n	8008a76 <_dtoa_r+0xa16>
 8008ab8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008abc:	d1d8      	bne.n	8008a70 <_dtoa_r+0xa10>
 8008abe:	2339      	movs	r3, #57	@ 0x39
 8008ac0:	9a02      	ldr	r2, [sp, #8]
 8008ac2:	7013      	strb	r3, [r2, #0]
 8008ac4:	4633      	mov	r3, r6
 8008ac6:	461e      	mov	r6, r3
 8008ac8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	2a39      	cmp	r2, #57	@ 0x39
 8008ad0:	d052      	beq.n	8008b78 <_dtoa_r+0xb18>
 8008ad2:	3201      	adds	r2, #1
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	e60e      	b.n	80086f6 <_dtoa_r+0x696>
 8008ad8:	2a00      	cmp	r2, #0
 8008ada:	dd07      	ble.n	8008aec <_dtoa_r+0xa8c>
 8008adc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ae0:	d0ed      	beq.n	8008abe <_dtoa_r+0xa5e>
 8008ae2:	9a02      	ldr	r2, [sp, #8]
 8008ae4:	f108 0301 	add.w	r3, r8, #1
 8008ae8:	7013      	strb	r3, [r2, #0]
 8008aea:	e604      	b.n	80086f6 <_dtoa_r+0x696>
 8008aec:	9b07      	ldr	r3, [sp, #28]
 8008aee:	9a07      	ldr	r2, [sp, #28]
 8008af0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008af4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d028      	beq.n	8008b4c <_dtoa_r+0xaec>
 8008afa:	4649      	mov	r1, r9
 8008afc:	2300      	movs	r3, #0
 8008afe:	220a      	movs	r2, #10
 8008b00:	4658      	mov	r0, fp
 8008b02:	f000 f9d5 	bl	8008eb0 <__multadd>
 8008b06:	42af      	cmp	r7, r5
 8008b08:	4681      	mov	r9, r0
 8008b0a:	f04f 0300 	mov.w	r3, #0
 8008b0e:	f04f 020a 	mov.w	r2, #10
 8008b12:	4639      	mov	r1, r7
 8008b14:	4658      	mov	r0, fp
 8008b16:	d107      	bne.n	8008b28 <_dtoa_r+0xac8>
 8008b18:	f000 f9ca 	bl	8008eb0 <__multadd>
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	4605      	mov	r5, r0
 8008b20:	9b07      	ldr	r3, [sp, #28]
 8008b22:	3301      	adds	r3, #1
 8008b24:	9307      	str	r3, [sp, #28]
 8008b26:	e774      	b.n	8008a12 <_dtoa_r+0x9b2>
 8008b28:	f000 f9c2 	bl	8008eb0 <__multadd>
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4607      	mov	r7, r0
 8008b30:	2300      	movs	r3, #0
 8008b32:	220a      	movs	r2, #10
 8008b34:	4658      	mov	r0, fp
 8008b36:	f000 f9bb 	bl	8008eb0 <__multadd>
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	e7f0      	b.n	8008b20 <_dtoa_r+0xac0>
 8008b3e:	9b08      	ldr	r3, [sp, #32]
 8008b40:	2700      	movs	r7, #0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	bfcc      	ite	gt
 8008b46:	461e      	movgt	r6, r3
 8008b48:	2601      	movle	r6, #1
 8008b4a:	4456      	add	r6, sl
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	2201      	movs	r2, #1
 8008b50:	4658      	mov	r0, fp
 8008b52:	f000 fba1 	bl	8009298 <__lshift>
 8008b56:	4621      	mov	r1, r4
 8008b58:	4681      	mov	r9, r0
 8008b5a:	f000 fc09 	bl	8009370 <__mcmp>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	dcb0      	bgt.n	8008ac4 <_dtoa_r+0xa64>
 8008b62:	d102      	bne.n	8008b6a <_dtoa_r+0xb0a>
 8008b64:	f018 0f01 	tst.w	r8, #1
 8008b68:	d1ac      	bne.n	8008ac4 <_dtoa_r+0xa64>
 8008b6a:	4633      	mov	r3, r6
 8008b6c:	461e      	mov	r6, r3
 8008b6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b72:	2a30      	cmp	r2, #48	@ 0x30
 8008b74:	d0fa      	beq.n	8008b6c <_dtoa_r+0xb0c>
 8008b76:	e5be      	b.n	80086f6 <_dtoa_r+0x696>
 8008b78:	459a      	cmp	sl, r3
 8008b7a:	d1a4      	bne.n	8008ac6 <_dtoa_r+0xa66>
 8008b7c:	9b04      	ldr	r3, [sp, #16]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	2331      	movs	r3, #49	@ 0x31
 8008b84:	f88a 3000 	strb.w	r3, [sl]
 8008b88:	e5b5      	b.n	80086f6 <_dtoa_r+0x696>
 8008b8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b8c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008bec <_dtoa_r+0xb8c>
 8008b90:	b11b      	cbz	r3, 8008b9a <_dtoa_r+0xb3a>
 8008b92:	f10a 0308 	add.w	r3, sl, #8
 8008b96:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	b017      	add	sp, #92	@ 0x5c
 8008b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	f77f ae3d 	ble.w	8008824 <_dtoa_r+0x7c4>
 8008baa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bac:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bae:	2001      	movs	r0, #1
 8008bb0:	e65b      	b.n	800886a <_dtoa_r+0x80a>
 8008bb2:	9b08      	ldr	r3, [sp, #32]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f77f aed6 	ble.w	8008966 <_dtoa_r+0x906>
 8008bba:	4656      	mov	r6, sl
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	4648      	mov	r0, r9
 8008bc0:	f7ff f9c6 	bl	8007f50 <quorem>
 8008bc4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bc8:	9b08      	ldr	r3, [sp, #32]
 8008bca:	f806 8b01 	strb.w	r8, [r6], #1
 8008bce:	eba6 020a 	sub.w	r2, r6, sl
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	ddb3      	ble.n	8008b3e <_dtoa_r+0xade>
 8008bd6:	4649      	mov	r1, r9
 8008bd8:	2300      	movs	r3, #0
 8008bda:	220a      	movs	r2, #10
 8008bdc:	4658      	mov	r0, fp
 8008bde:	f000 f967 	bl	8008eb0 <__multadd>
 8008be2:	4681      	mov	r9, r0
 8008be4:	e7ea      	b.n	8008bbc <_dtoa_r+0xb5c>
 8008be6:	bf00      	nop
 8008be8:	0800e692 	.word	0x0800e692
 8008bec:	0800e62d 	.word	0x0800e62d

08008bf0 <_free_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d040      	beq.n	8008c7a <_free_r+0x8a>
 8008bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bfc:	1f0c      	subs	r4, r1, #4
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bfb8      	it	lt
 8008c02:	18e4      	addlt	r4, r4, r3
 8008c04:	f000 f8e6 	bl	8008dd4 <__malloc_lock>
 8008c08:	4a1c      	ldr	r2, [pc, #112]	@ (8008c7c <_free_r+0x8c>)
 8008c0a:	6813      	ldr	r3, [r2, #0]
 8008c0c:	b933      	cbnz	r3, 8008c1c <_free_r+0x2c>
 8008c0e:	6063      	str	r3, [r4, #4]
 8008c10:	6014      	str	r4, [r2, #0]
 8008c12:	4628      	mov	r0, r5
 8008c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c18:	f000 b8e2 	b.w	8008de0 <__malloc_unlock>
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	d908      	bls.n	8008c32 <_free_r+0x42>
 8008c20:	6820      	ldr	r0, [r4, #0]
 8008c22:	1821      	adds	r1, r4, r0
 8008c24:	428b      	cmp	r3, r1
 8008c26:	bf01      	itttt	eq
 8008c28:	6819      	ldreq	r1, [r3, #0]
 8008c2a:	685b      	ldreq	r3, [r3, #4]
 8008c2c:	1809      	addeq	r1, r1, r0
 8008c2e:	6021      	streq	r1, [r4, #0]
 8008c30:	e7ed      	b.n	8008c0e <_free_r+0x1e>
 8008c32:	461a      	mov	r2, r3
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	b10b      	cbz	r3, 8008c3c <_free_r+0x4c>
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d9fa      	bls.n	8008c32 <_free_r+0x42>
 8008c3c:	6811      	ldr	r1, [r2, #0]
 8008c3e:	1850      	adds	r0, r2, r1
 8008c40:	42a0      	cmp	r0, r4
 8008c42:	d10b      	bne.n	8008c5c <_free_r+0x6c>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	4401      	add	r1, r0
 8008c48:	1850      	adds	r0, r2, r1
 8008c4a:	4283      	cmp	r3, r0
 8008c4c:	6011      	str	r1, [r2, #0]
 8008c4e:	d1e0      	bne.n	8008c12 <_free_r+0x22>
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	4408      	add	r0, r1
 8008c56:	6010      	str	r0, [r2, #0]
 8008c58:	6053      	str	r3, [r2, #4]
 8008c5a:	e7da      	b.n	8008c12 <_free_r+0x22>
 8008c5c:	d902      	bls.n	8008c64 <_free_r+0x74>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	e7d6      	b.n	8008c12 <_free_r+0x22>
 8008c64:	6820      	ldr	r0, [r4, #0]
 8008c66:	1821      	adds	r1, r4, r0
 8008c68:	428b      	cmp	r3, r1
 8008c6a:	bf01      	itttt	eq
 8008c6c:	6819      	ldreq	r1, [r3, #0]
 8008c6e:	685b      	ldreq	r3, [r3, #4]
 8008c70:	1809      	addeq	r1, r1, r0
 8008c72:	6021      	streq	r1, [r4, #0]
 8008c74:	6063      	str	r3, [r4, #4]
 8008c76:	6054      	str	r4, [r2, #4]
 8008c78:	e7cb      	b.n	8008c12 <_free_r+0x22>
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	20000a4c 	.word	0x20000a4c

08008c80 <malloc>:
 8008c80:	4b02      	ldr	r3, [pc, #8]	@ (8008c8c <malloc+0xc>)
 8008c82:	4601      	mov	r1, r0
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	f000 b825 	b.w	8008cd4 <_malloc_r>
 8008c8a:	bf00      	nop
 8008c8c:	2000003c 	.word	0x2000003c

08008c90 <sbrk_aligned>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	4e0f      	ldr	r6, [pc, #60]	@ (8008cd0 <sbrk_aligned+0x40>)
 8008c94:	460c      	mov	r4, r1
 8008c96:	6831      	ldr	r1, [r6, #0]
 8008c98:	4605      	mov	r5, r0
 8008c9a:	b911      	cbnz	r1, 8008ca2 <sbrk_aligned+0x12>
 8008c9c:	f001 fd72 	bl	800a784 <_sbrk_r>
 8008ca0:	6030      	str	r0, [r6, #0]
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f001 fd6d 	bl	800a784 <_sbrk_r>
 8008caa:	1c43      	adds	r3, r0, #1
 8008cac:	d103      	bne.n	8008cb6 <sbrk_aligned+0x26>
 8008cae:	f04f 34ff 	mov.w	r4, #4294967295
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	bd70      	pop	{r4, r5, r6, pc}
 8008cb6:	1cc4      	adds	r4, r0, #3
 8008cb8:	f024 0403 	bic.w	r4, r4, #3
 8008cbc:	42a0      	cmp	r0, r4
 8008cbe:	d0f8      	beq.n	8008cb2 <sbrk_aligned+0x22>
 8008cc0:	1a21      	subs	r1, r4, r0
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f001 fd5e 	bl	800a784 <_sbrk_r>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d1f2      	bne.n	8008cb2 <sbrk_aligned+0x22>
 8008ccc:	e7ef      	b.n	8008cae <sbrk_aligned+0x1e>
 8008cce:	bf00      	nop
 8008cd0:	20000a48 	.word	0x20000a48

08008cd4 <_malloc_r>:
 8008cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd8:	1ccd      	adds	r5, r1, #3
 8008cda:	f025 0503 	bic.w	r5, r5, #3
 8008cde:	3508      	adds	r5, #8
 8008ce0:	2d0c      	cmp	r5, #12
 8008ce2:	bf38      	it	cc
 8008ce4:	250c      	movcc	r5, #12
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	4606      	mov	r6, r0
 8008cea:	db01      	blt.n	8008cf0 <_malloc_r+0x1c>
 8008cec:	42a9      	cmp	r1, r5
 8008cee:	d904      	bls.n	8008cfa <_malloc_r+0x26>
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	6033      	str	r3, [r6, #0]
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008dd0 <_malloc_r+0xfc>
 8008cfe:	f000 f869 	bl	8008dd4 <__malloc_lock>
 8008d02:	f8d8 3000 	ldr.w	r3, [r8]
 8008d06:	461c      	mov	r4, r3
 8008d08:	bb44      	cbnz	r4, 8008d5c <_malloc_r+0x88>
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f7ff ffbf 	bl	8008c90 <sbrk_aligned>
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	4604      	mov	r4, r0
 8008d16:	d158      	bne.n	8008dca <_malloc_r+0xf6>
 8008d18:	f8d8 4000 	ldr.w	r4, [r8]
 8008d1c:	4627      	mov	r7, r4
 8008d1e:	2f00      	cmp	r7, #0
 8008d20:	d143      	bne.n	8008daa <_malloc_r+0xd6>
 8008d22:	2c00      	cmp	r4, #0
 8008d24:	d04b      	beq.n	8008dbe <_malloc_r+0xea>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	4639      	mov	r1, r7
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	eb04 0903 	add.w	r9, r4, r3
 8008d30:	f001 fd28 	bl	800a784 <_sbrk_r>
 8008d34:	4581      	cmp	r9, r0
 8008d36:	d142      	bne.n	8008dbe <_malloc_r+0xea>
 8008d38:	6821      	ldr	r1, [r4, #0]
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	1a6d      	subs	r5, r5, r1
 8008d3e:	4629      	mov	r1, r5
 8008d40:	f7ff ffa6 	bl	8008c90 <sbrk_aligned>
 8008d44:	3001      	adds	r0, #1
 8008d46:	d03a      	beq.n	8008dbe <_malloc_r+0xea>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	442b      	add	r3, r5
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	bb62      	cbnz	r2, 8008db0 <_malloc_r+0xdc>
 8008d56:	f8c8 7000 	str.w	r7, [r8]
 8008d5a:	e00f      	b.n	8008d7c <_malloc_r+0xa8>
 8008d5c:	6822      	ldr	r2, [r4, #0]
 8008d5e:	1b52      	subs	r2, r2, r5
 8008d60:	d420      	bmi.n	8008da4 <_malloc_r+0xd0>
 8008d62:	2a0b      	cmp	r2, #11
 8008d64:	d917      	bls.n	8008d96 <_malloc_r+0xc2>
 8008d66:	1961      	adds	r1, r4, r5
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	6025      	str	r5, [r4, #0]
 8008d6c:	bf18      	it	ne
 8008d6e:	6059      	strne	r1, [r3, #4]
 8008d70:	6863      	ldr	r3, [r4, #4]
 8008d72:	bf08      	it	eq
 8008d74:	f8c8 1000 	streq.w	r1, [r8]
 8008d78:	5162      	str	r2, [r4, r5]
 8008d7a:	604b      	str	r3, [r1, #4]
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 f82f 	bl	8008de0 <__malloc_unlock>
 8008d82:	f104 000b 	add.w	r0, r4, #11
 8008d86:	1d23      	adds	r3, r4, #4
 8008d88:	f020 0007 	bic.w	r0, r0, #7
 8008d8c:	1ac2      	subs	r2, r0, r3
 8008d8e:	bf1c      	itt	ne
 8008d90:	1a1b      	subne	r3, r3, r0
 8008d92:	50a3      	strne	r3, [r4, r2]
 8008d94:	e7af      	b.n	8008cf6 <_malloc_r+0x22>
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	bf0c      	ite	eq
 8008d9c:	f8c8 2000 	streq.w	r2, [r8]
 8008da0:	605a      	strne	r2, [r3, #4]
 8008da2:	e7eb      	b.n	8008d7c <_malloc_r+0xa8>
 8008da4:	4623      	mov	r3, r4
 8008da6:	6864      	ldr	r4, [r4, #4]
 8008da8:	e7ae      	b.n	8008d08 <_malloc_r+0x34>
 8008daa:	463c      	mov	r4, r7
 8008dac:	687f      	ldr	r7, [r7, #4]
 8008dae:	e7b6      	b.n	8008d1e <_malloc_r+0x4a>
 8008db0:	461a      	mov	r2, r3
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	d1fb      	bne.n	8008db0 <_malloc_r+0xdc>
 8008db8:	2300      	movs	r3, #0
 8008dba:	6053      	str	r3, [r2, #4]
 8008dbc:	e7de      	b.n	8008d7c <_malloc_r+0xa8>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	6033      	str	r3, [r6, #0]
 8008dc4:	f000 f80c 	bl	8008de0 <__malloc_unlock>
 8008dc8:	e794      	b.n	8008cf4 <_malloc_r+0x20>
 8008dca:	6005      	str	r5, [r0, #0]
 8008dcc:	e7d6      	b.n	8008d7c <_malloc_r+0xa8>
 8008dce:	bf00      	nop
 8008dd0:	20000a4c 	.word	0x20000a4c

08008dd4 <__malloc_lock>:
 8008dd4:	4801      	ldr	r0, [pc, #4]	@ (8008ddc <__malloc_lock+0x8>)
 8008dd6:	f7ff b880 	b.w	8007eda <__retarget_lock_acquire_recursive>
 8008dda:	bf00      	nop
 8008ddc:	20000a44 	.word	0x20000a44

08008de0 <__malloc_unlock>:
 8008de0:	4801      	ldr	r0, [pc, #4]	@ (8008de8 <__malloc_unlock+0x8>)
 8008de2:	f7ff b87b 	b.w	8007edc <__retarget_lock_release_recursive>
 8008de6:	bf00      	nop
 8008de8:	20000a44 	.word	0x20000a44

08008dec <_Balloc>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	69c6      	ldr	r6, [r0, #28]
 8008df0:	4604      	mov	r4, r0
 8008df2:	460d      	mov	r5, r1
 8008df4:	b976      	cbnz	r6, 8008e14 <_Balloc+0x28>
 8008df6:	2010      	movs	r0, #16
 8008df8:	f7ff ff42 	bl	8008c80 <malloc>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	61e0      	str	r0, [r4, #28]
 8008e00:	b920      	cbnz	r0, 8008e0c <_Balloc+0x20>
 8008e02:	216b      	movs	r1, #107	@ 0x6b
 8008e04:	4b17      	ldr	r3, [pc, #92]	@ (8008e64 <_Balloc+0x78>)
 8008e06:	4818      	ldr	r0, [pc, #96]	@ (8008e68 <_Balloc+0x7c>)
 8008e08:	f7ff f884 	bl	8007f14 <__assert_func>
 8008e0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e10:	6006      	str	r6, [r0, #0]
 8008e12:	60c6      	str	r6, [r0, #12]
 8008e14:	69e6      	ldr	r6, [r4, #28]
 8008e16:	68f3      	ldr	r3, [r6, #12]
 8008e18:	b183      	cbz	r3, 8008e3c <_Balloc+0x50>
 8008e1a:	69e3      	ldr	r3, [r4, #28]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e22:	b9b8      	cbnz	r0, 8008e54 <_Balloc+0x68>
 8008e24:	2101      	movs	r1, #1
 8008e26:	fa01 f605 	lsl.w	r6, r1, r5
 8008e2a:	1d72      	adds	r2, r6, #5
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	0092      	lsls	r2, r2, #2
 8008e30:	f001 fcd3 	bl	800a7da <_calloc_r>
 8008e34:	b160      	cbz	r0, 8008e50 <_Balloc+0x64>
 8008e36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e3a:	e00e      	b.n	8008e5a <_Balloc+0x6e>
 8008e3c:	2221      	movs	r2, #33	@ 0x21
 8008e3e:	2104      	movs	r1, #4
 8008e40:	4620      	mov	r0, r4
 8008e42:	f001 fcca 	bl	800a7da <_calloc_r>
 8008e46:	69e3      	ldr	r3, [r4, #28]
 8008e48:	60f0      	str	r0, [r6, #12]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e4      	bne.n	8008e1a <_Balloc+0x2e>
 8008e50:	2000      	movs	r0, #0
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	6802      	ldr	r2, [r0, #0]
 8008e56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e60:	e7f7      	b.n	8008e52 <_Balloc+0x66>
 8008e62:	bf00      	nop
 8008e64:	0800e580 	.word	0x0800e580
 8008e68:	0800e6a3 	.word	0x0800e6a3

08008e6c <_Bfree>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	69c6      	ldr	r6, [r0, #28]
 8008e70:	4605      	mov	r5, r0
 8008e72:	460c      	mov	r4, r1
 8008e74:	b976      	cbnz	r6, 8008e94 <_Bfree+0x28>
 8008e76:	2010      	movs	r0, #16
 8008e78:	f7ff ff02 	bl	8008c80 <malloc>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	61e8      	str	r0, [r5, #28]
 8008e80:	b920      	cbnz	r0, 8008e8c <_Bfree+0x20>
 8008e82:	218f      	movs	r1, #143	@ 0x8f
 8008e84:	4b08      	ldr	r3, [pc, #32]	@ (8008ea8 <_Bfree+0x3c>)
 8008e86:	4809      	ldr	r0, [pc, #36]	@ (8008eac <_Bfree+0x40>)
 8008e88:	f7ff f844 	bl	8007f14 <__assert_func>
 8008e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e90:	6006      	str	r6, [r0, #0]
 8008e92:	60c6      	str	r6, [r0, #12]
 8008e94:	b13c      	cbz	r4, 8008ea6 <_Bfree+0x3a>
 8008e96:	69eb      	ldr	r3, [r5, #28]
 8008e98:	6862      	ldr	r2, [r4, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ea0:	6021      	str	r1, [r4, #0]
 8008ea2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
 8008ea8:	0800e580 	.word	0x0800e580
 8008eac:	0800e6a3 	.word	0x0800e6a3

08008eb0 <__multadd>:
 8008eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	461e      	mov	r6, r3
 8008eba:	2000      	movs	r0, #0
 8008ebc:	690d      	ldr	r5, [r1, #16]
 8008ebe:	f101 0c14 	add.w	ip, r1, #20
 8008ec2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	b299      	uxth	r1, r3
 8008eca:	fb02 6101 	mla	r1, r2, r1, r6
 8008ece:	0c1e      	lsrs	r6, r3, #16
 8008ed0:	0c0b      	lsrs	r3, r1, #16
 8008ed2:	fb02 3306 	mla	r3, r2, r6, r3
 8008ed6:	b289      	uxth	r1, r1
 8008ed8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008edc:	4285      	cmp	r5, r0
 8008ede:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ee2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ee6:	dcec      	bgt.n	8008ec2 <__multadd+0x12>
 8008ee8:	b30e      	cbz	r6, 8008f2e <__multadd+0x7e>
 8008eea:	68a3      	ldr	r3, [r4, #8]
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	dc19      	bgt.n	8008f24 <__multadd+0x74>
 8008ef0:	6861      	ldr	r1, [r4, #4]
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	3101      	adds	r1, #1
 8008ef6:	f7ff ff79 	bl	8008dec <_Balloc>
 8008efa:	4680      	mov	r8, r0
 8008efc:	b928      	cbnz	r0, 8008f0a <__multadd+0x5a>
 8008efe:	4602      	mov	r2, r0
 8008f00:	21ba      	movs	r1, #186	@ 0xba
 8008f02:	4b0c      	ldr	r3, [pc, #48]	@ (8008f34 <__multadd+0x84>)
 8008f04:	480c      	ldr	r0, [pc, #48]	@ (8008f38 <__multadd+0x88>)
 8008f06:	f7ff f805 	bl	8007f14 <__assert_func>
 8008f0a:	6922      	ldr	r2, [r4, #16]
 8008f0c:	f104 010c 	add.w	r1, r4, #12
 8008f10:	3202      	adds	r2, #2
 8008f12:	0092      	lsls	r2, r2, #2
 8008f14:	300c      	adds	r0, #12
 8008f16:	f001 fc45 	bl	800a7a4 <memcpy>
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f7ff ffa5 	bl	8008e6c <_Bfree>
 8008f22:	4644      	mov	r4, r8
 8008f24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f28:	3501      	adds	r5, #1
 8008f2a:	615e      	str	r6, [r3, #20]
 8008f2c:	6125      	str	r5, [r4, #16]
 8008f2e:	4620      	mov	r0, r4
 8008f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f34:	0800e692 	.word	0x0800e692
 8008f38:	0800e6a3 	.word	0x0800e6a3

08008f3c <__s2b>:
 8008f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f40:	4615      	mov	r5, r2
 8008f42:	2209      	movs	r2, #9
 8008f44:	461f      	mov	r7, r3
 8008f46:	3308      	adds	r3, #8
 8008f48:	460c      	mov	r4, r1
 8008f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f4e:	4606      	mov	r6, r0
 8008f50:	2201      	movs	r2, #1
 8008f52:	2100      	movs	r1, #0
 8008f54:	429a      	cmp	r2, r3
 8008f56:	db09      	blt.n	8008f6c <__s2b+0x30>
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f7ff ff47 	bl	8008dec <_Balloc>
 8008f5e:	b940      	cbnz	r0, 8008f72 <__s2b+0x36>
 8008f60:	4602      	mov	r2, r0
 8008f62:	21d3      	movs	r1, #211	@ 0xd3
 8008f64:	4b18      	ldr	r3, [pc, #96]	@ (8008fc8 <__s2b+0x8c>)
 8008f66:	4819      	ldr	r0, [pc, #100]	@ (8008fcc <__s2b+0x90>)
 8008f68:	f7fe ffd4 	bl	8007f14 <__assert_func>
 8008f6c:	0052      	lsls	r2, r2, #1
 8008f6e:	3101      	adds	r1, #1
 8008f70:	e7f0      	b.n	8008f54 <__s2b+0x18>
 8008f72:	9b08      	ldr	r3, [sp, #32]
 8008f74:	2d09      	cmp	r5, #9
 8008f76:	6143      	str	r3, [r0, #20]
 8008f78:	f04f 0301 	mov.w	r3, #1
 8008f7c:	6103      	str	r3, [r0, #16]
 8008f7e:	dd16      	ble.n	8008fae <__s2b+0x72>
 8008f80:	f104 0909 	add.w	r9, r4, #9
 8008f84:	46c8      	mov	r8, r9
 8008f86:	442c      	add	r4, r5
 8008f88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f8c:	4601      	mov	r1, r0
 8008f8e:	220a      	movs	r2, #10
 8008f90:	4630      	mov	r0, r6
 8008f92:	3b30      	subs	r3, #48	@ 0x30
 8008f94:	f7ff ff8c 	bl	8008eb0 <__multadd>
 8008f98:	45a0      	cmp	r8, r4
 8008f9a:	d1f5      	bne.n	8008f88 <__s2b+0x4c>
 8008f9c:	f1a5 0408 	sub.w	r4, r5, #8
 8008fa0:	444c      	add	r4, r9
 8008fa2:	1b2d      	subs	r5, r5, r4
 8008fa4:	1963      	adds	r3, r4, r5
 8008fa6:	42bb      	cmp	r3, r7
 8008fa8:	db04      	blt.n	8008fb4 <__s2b+0x78>
 8008faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fae:	2509      	movs	r5, #9
 8008fb0:	340a      	adds	r4, #10
 8008fb2:	e7f6      	b.n	8008fa2 <__s2b+0x66>
 8008fb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fb8:	4601      	mov	r1, r0
 8008fba:	220a      	movs	r2, #10
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	3b30      	subs	r3, #48	@ 0x30
 8008fc0:	f7ff ff76 	bl	8008eb0 <__multadd>
 8008fc4:	e7ee      	b.n	8008fa4 <__s2b+0x68>
 8008fc6:	bf00      	nop
 8008fc8:	0800e692 	.word	0x0800e692
 8008fcc:	0800e6a3 	.word	0x0800e6a3

08008fd0 <__hi0bits>:
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008fd6:	bf3a      	itte	cc
 8008fd8:	0403      	lslcc	r3, r0, #16
 8008fda:	2010      	movcc	r0, #16
 8008fdc:	2000      	movcs	r0, #0
 8008fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fe2:	bf3c      	itt	cc
 8008fe4:	021b      	lslcc	r3, r3, #8
 8008fe6:	3008      	addcc	r0, #8
 8008fe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fec:	bf3c      	itt	cc
 8008fee:	011b      	lslcc	r3, r3, #4
 8008ff0:	3004      	addcc	r0, #4
 8008ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ff6:	bf3c      	itt	cc
 8008ff8:	009b      	lslcc	r3, r3, #2
 8008ffa:	3002      	addcc	r0, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	db05      	blt.n	800900c <__hi0bits+0x3c>
 8009000:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009004:	f100 0001 	add.w	r0, r0, #1
 8009008:	bf08      	it	eq
 800900a:	2020      	moveq	r0, #32
 800900c:	4770      	bx	lr

0800900e <__lo0bits>:
 800900e:	6803      	ldr	r3, [r0, #0]
 8009010:	4602      	mov	r2, r0
 8009012:	f013 0007 	ands.w	r0, r3, #7
 8009016:	d00b      	beq.n	8009030 <__lo0bits+0x22>
 8009018:	07d9      	lsls	r1, r3, #31
 800901a:	d421      	bmi.n	8009060 <__lo0bits+0x52>
 800901c:	0798      	lsls	r0, r3, #30
 800901e:	bf49      	itett	mi
 8009020:	085b      	lsrmi	r3, r3, #1
 8009022:	089b      	lsrpl	r3, r3, #2
 8009024:	2001      	movmi	r0, #1
 8009026:	6013      	strmi	r3, [r2, #0]
 8009028:	bf5c      	itt	pl
 800902a:	2002      	movpl	r0, #2
 800902c:	6013      	strpl	r3, [r2, #0]
 800902e:	4770      	bx	lr
 8009030:	b299      	uxth	r1, r3
 8009032:	b909      	cbnz	r1, 8009038 <__lo0bits+0x2a>
 8009034:	2010      	movs	r0, #16
 8009036:	0c1b      	lsrs	r3, r3, #16
 8009038:	b2d9      	uxtb	r1, r3
 800903a:	b909      	cbnz	r1, 8009040 <__lo0bits+0x32>
 800903c:	3008      	adds	r0, #8
 800903e:	0a1b      	lsrs	r3, r3, #8
 8009040:	0719      	lsls	r1, r3, #28
 8009042:	bf04      	itt	eq
 8009044:	091b      	lsreq	r3, r3, #4
 8009046:	3004      	addeq	r0, #4
 8009048:	0799      	lsls	r1, r3, #30
 800904a:	bf04      	itt	eq
 800904c:	089b      	lsreq	r3, r3, #2
 800904e:	3002      	addeq	r0, #2
 8009050:	07d9      	lsls	r1, r3, #31
 8009052:	d403      	bmi.n	800905c <__lo0bits+0x4e>
 8009054:	085b      	lsrs	r3, r3, #1
 8009056:	f100 0001 	add.w	r0, r0, #1
 800905a:	d003      	beq.n	8009064 <__lo0bits+0x56>
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	4770      	bx	lr
 8009060:	2000      	movs	r0, #0
 8009062:	4770      	bx	lr
 8009064:	2020      	movs	r0, #32
 8009066:	4770      	bx	lr

08009068 <__i2b>:
 8009068:	b510      	push	{r4, lr}
 800906a:	460c      	mov	r4, r1
 800906c:	2101      	movs	r1, #1
 800906e:	f7ff febd 	bl	8008dec <_Balloc>
 8009072:	4602      	mov	r2, r0
 8009074:	b928      	cbnz	r0, 8009082 <__i2b+0x1a>
 8009076:	f240 1145 	movw	r1, #325	@ 0x145
 800907a:	4b04      	ldr	r3, [pc, #16]	@ (800908c <__i2b+0x24>)
 800907c:	4804      	ldr	r0, [pc, #16]	@ (8009090 <__i2b+0x28>)
 800907e:	f7fe ff49 	bl	8007f14 <__assert_func>
 8009082:	2301      	movs	r3, #1
 8009084:	6144      	str	r4, [r0, #20]
 8009086:	6103      	str	r3, [r0, #16]
 8009088:	bd10      	pop	{r4, pc}
 800908a:	bf00      	nop
 800908c:	0800e692 	.word	0x0800e692
 8009090:	0800e6a3 	.word	0x0800e6a3

08009094 <__multiply>:
 8009094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	4614      	mov	r4, r2
 800909a:	690a      	ldr	r2, [r1, #16]
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	460f      	mov	r7, r1
 80090a0:	429a      	cmp	r2, r3
 80090a2:	bfa2      	ittt	ge
 80090a4:	4623      	movge	r3, r4
 80090a6:	460c      	movge	r4, r1
 80090a8:	461f      	movge	r7, r3
 80090aa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80090ae:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80090b2:	68a3      	ldr	r3, [r4, #8]
 80090b4:	6861      	ldr	r1, [r4, #4]
 80090b6:	eb0a 0609 	add.w	r6, sl, r9
 80090ba:	42b3      	cmp	r3, r6
 80090bc:	b085      	sub	sp, #20
 80090be:	bfb8      	it	lt
 80090c0:	3101      	addlt	r1, #1
 80090c2:	f7ff fe93 	bl	8008dec <_Balloc>
 80090c6:	b930      	cbnz	r0, 80090d6 <__multiply+0x42>
 80090c8:	4602      	mov	r2, r0
 80090ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80090ce:	4b43      	ldr	r3, [pc, #268]	@ (80091dc <__multiply+0x148>)
 80090d0:	4843      	ldr	r0, [pc, #268]	@ (80091e0 <__multiply+0x14c>)
 80090d2:	f7fe ff1f 	bl	8007f14 <__assert_func>
 80090d6:	f100 0514 	add.w	r5, r0, #20
 80090da:	462b      	mov	r3, r5
 80090dc:	2200      	movs	r2, #0
 80090de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090e2:	4543      	cmp	r3, r8
 80090e4:	d321      	bcc.n	800912a <__multiply+0x96>
 80090e6:	f107 0114 	add.w	r1, r7, #20
 80090ea:	f104 0214 	add.w	r2, r4, #20
 80090ee:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80090f2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80090f6:	9302      	str	r3, [sp, #8]
 80090f8:	1b13      	subs	r3, r2, r4
 80090fa:	3b15      	subs	r3, #21
 80090fc:	f023 0303 	bic.w	r3, r3, #3
 8009100:	3304      	adds	r3, #4
 8009102:	f104 0715 	add.w	r7, r4, #21
 8009106:	42ba      	cmp	r2, r7
 8009108:	bf38      	it	cc
 800910a:	2304      	movcc	r3, #4
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	9b02      	ldr	r3, [sp, #8]
 8009110:	9103      	str	r1, [sp, #12]
 8009112:	428b      	cmp	r3, r1
 8009114:	d80c      	bhi.n	8009130 <__multiply+0x9c>
 8009116:	2e00      	cmp	r6, #0
 8009118:	dd03      	ble.n	8009122 <__multiply+0x8e>
 800911a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800911e:	2b00      	cmp	r3, #0
 8009120:	d05a      	beq.n	80091d8 <__multiply+0x144>
 8009122:	6106      	str	r6, [r0, #16]
 8009124:	b005      	add	sp, #20
 8009126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912a:	f843 2b04 	str.w	r2, [r3], #4
 800912e:	e7d8      	b.n	80090e2 <__multiply+0x4e>
 8009130:	f8b1 a000 	ldrh.w	sl, [r1]
 8009134:	f1ba 0f00 	cmp.w	sl, #0
 8009138:	d023      	beq.n	8009182 <__multiply+0xee>
 800913a:	46a9      	mov	r9, r5
 800913c:	f04f 0c00 	mov.w	ip, #0
 8009140:	f104 0e14 	add.w	lr, r4, #20
 8009144:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009148:	f8d9 3000 	ldr.w	r3, [r9]
 800914c:	fa1f fb87 	uxth.w	fp, r7
 8009150:	b29b      	uxth	r3, r3
 8009152:	fb0a 330b 	mla	r3, sl, fp, r3
 8009156:	4463      	add	r3, ip
 8009158:	f8d9 c000 	ldr.w	ip, [r9]
 800915c:	0c3f      	lsrs	r7, r7, #16
 800915e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009162:	fb0a c707 	mla	r7, sl, r7, ip
 8009166:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800916a:	b29b      	uxth	r3, r3
 800916c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009170:	4572      	cmp	r2, lr
 8009172:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009176:	f849 3b04 	str.w	r3, [r9], #4
 800917a:	d8e3      	bhi.n	8009144 <__multiply+0xb0>
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	f845 c003 	str.w	ip, [r5, r3]
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	3104      	adds	r1, #4
 8009186:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800918a:	f1b9 0f00 	cmp.w	r9, #0
 800918e:	d021      	beq.n	80091d4 <__multiply+0x140>
 8009190:	46ae      	mov	lr, r5
 8009192:	f04f 0a00 	mov.w	sl, #0
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	f104 0c14 	add.w	ip, r4, #20
 800919c:	f8bc b000 	ldrh.w	fp, [ip]
 80091a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	fb09 770b 	mla	r7, r9, fp, r7
 80091aa:	4457      	add	r7, sl
 80091ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091b0:	f84e 3b04 	str.w	r3, [lr], #4
 80091b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091bc:	f8be 3000 	ldrh.w	r3, [lr]
 80091c0:	4562      	cmp	r2, ip
 80091c2:	fb09 330a 	mla	r3, r9, sl, r3
 80091c6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80091ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091ce:	d8e5      	bhi.n	800919c <__multiply+0x108>
 80091d0:	9f01      	ldr	r7, [sp, #4]
 80091d2:	51eb      	str	r3, [r5, r7]
 80091d4:	3504      	adds	r5, #4
 80091d6:	e79a      	b.n	800910e <__multiply+0x7a>
 80091d8:	3e01      	subs	r6, #1
 80091da:	e79c      	b.n	8009116 <__multiply+0x82>
 80091dc:	0800e692 	.word	0x0800e692
 80091e0:	0800e6a3 	.word	0x0800e6a3

080091e4 <__pow5mult>:
 80091e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e8:	4615      	mov	r5, r2
 80091ea:	f012 0203 	ands.w	r2, r2, #3
 80091ee:	4607      	mov	r7, r0
 80091f0:	460e      	mov	r6, r1
 80091f2:	d007      	beq.n	8009204 <__pow5mult+0x20>
 80091f4:	4c25      	ldr	r4, [pc, #148]	@ (800928c <__pow5mult+0xa8>)
 80091f6:	3a01      	subs	r2, #1
 80091f8:	2300      	movs	r3, #0
 80091fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091fe:	f7ff fe57 	bl	8008eb0 <__multadd>
 8009202:	4606      	mov	r6, r0
 8009204:	10ad      	asrs	r5, r5, #2
 8009206:	d03d      	beq.n	8009284 <__pow5mult+0xa0>
 8009208:	69fc      	ldr	r4, [r7, #28]
 800920a:	b97c      	cbnz	r4, 800922c <__pow5mult+0x48>
 800920c:	2010      	movs	r0, #16
 800920e:	f7ff fd37 	bl	8008c80 <malloc>
 8009212:	4602      	mov	r2, r0
 8009214:	61f8      	str	r0, [r7, #28]
 8009216:	b928      	cbnz	r0, 8009224 <__pow5mult+0x40>
 8009218:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800921c:	4b1c      	ldr	r3, [pc, #112]	@ (8009290 <__pow5mult+0xac>)
 800921e:	481d      	ldr	r0, [pc, #116]	@ (8009294 <__pow5mult+0xb0>)
 8009220:	f7fe fe78 	bl	8007f14 <__assert_func>
 8009224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009228:	6004      	str	r4, [r0, #0]
 800922a:	60c4      	str	r4, [r0, #12]
 800922c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009234:	b94c      	cbnz	r4, 800924a <__pow5mult+0x66>
 8009236:	f240 2171 	movw	r1, #625	@ 0x271
 800923a:	4638      	mov	r0, r7
 800923c:	f7ff ff14 	bl	8009068 <__i2b>
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	f8c8 0008 	str.w	r0, [r8, #8]
 8009248:	6003      	str	r3, [r0, #0]
 800924a:	f04f 0900 	mov.w	r9, #0
 800924e:	07eb      	lsls	r3, r5, #31
 8009250:	d50a      	bpl.n	8009268 <__pow5mult+0x84>
 8009252:	4631      	mov	r1, r6
 8009254:	4622      	mov	r2, r4
 8009256:	4638      	mov	r0, r7
 8009258:	f7ff ff1c 	bl	8009094 <__multiply>
 800925c:	4680      	mov	r8, r0
 800925e:	4631      	mov	r1, r6
 8009260:	4638      	mov	r0, r7
 8009262:	f7ff fe03 	bl	8008e6c <_Bfree>
 8009266:	4646      	mov	r6, r8
 8009268:	106d      	asrs	r5, r5, #1
 800926a:	d00b      	beq.n	8009284 <__pow5mult+0xa0>
 800926c:	6820      	ldr	r0, [r4, #0]
 800926e:	b938      	cbnz	r0, 8009280 <__pow5mult+0x9c>
 8009270:	4622      	mov	r2, r4
 8009272:	4621      	mov	r1, r4
 8009274:	4638      	mov	r0, r7
 8009276:	f7ff ff0d 	bl	8009094 <__multiply>
 800927a:	6020      	str	r0, [r4, #0]
 800927c:	f8c0 9000 	str.w	r9, [r0]
 8009280:	4604      	mov	r4, r0
 8009282:	e7e4      	b.n	800924e <__pow5mult+0x6a>
 8009284:	4630      	mov	r0, r6
 8009286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800928a:	bf00      	nop
 800928c:	0800e6fc 	.word	0x0800e6fc
 8009290:	0800e580 	.word	0x0800e580
 8009294:	0800e6a3 	.word	0x0800e6a3

08009298 <__lshift>:
 8009298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800929c:	460c      	mov	r4, r1
 800929e:	4607      	mov	r7, r0
 80092a0:	4691      	mov	r9, r2
 80092a2:	6923      	ldr	r3, [r4, #16]
 80092a4:	6849      	ldr	r1, [r1, #4]
 80092a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092aa:	68a3      	ldr	r3, [r4, #8]
 80092ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092b0:	f108 0601 	add.w	r6, r8, #1
 80092b4:	42b3      	cmp	r3, r6
 80092b6:	db0b      	blt.n	80092d0 <__lshift+0x38>
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7ff fd97 	bl	8008dec <_Balloc>
 80092be:	4605      	mov	r5, r0
 80092c0:	b948      	cbnz	r0, 80092d6 <__lshift+0x3e>
 80092c2:	4602      	mov	r2, r0
 80092c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80092c8:	4b27      	ldr	r3, [pc, #156]	@ (8009368 <__lshift+0xd0>)
 80092ca:	4828      	ldr	r0, [pc, #160]	@ (800936c <__lshift+0xd4>)
 80092cc:	f7fe fe22 	bl	8007f14 <__assert_func>
 80092d0:	3101      	adds	r1, #1
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	e7ee      	b.n	80092b4 <__lshift+0x1c>
 80092d6:	2300      	movs	r3, #0
 80092d8:	f100 0114 	add.w	r1, r0, #20
 80092dc:	f100 0210 	add.w	r2, r0, #16
 80092e0:	4618      	mov	r0, r3
 80092e2:	4553      	cmp	r3, sl
 80092e4:	db33      	blt.n	800934e <__lshift+0xb6>
 80092e6:	6920      	ldr	r0, [r4, #16]
 80092e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092ec:	f104 0314 	add.w	r3, r4, #20
 80092f0:	f019 091f 	ands.w	r9, r9, #31
 80092f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092fc:	d02b      	beq.n	8009356 <__lshift+0xbe>
 80092fe:	468a      	mov	sl, r1
 8009300:	2200      	movs	r2, #0
 8009302:	f1c9 0e20 	rsb	lr, r9, #32
 8009306:	6818      	ldr	r0, [r3, #0]
 8009308:	fa00 f009 	lsl.w	r0, r0, r9
 800930c:	4310      	orrs	r0, r2
 800930e:	f84a 0b04 	str.w	r0, [sl], #4
 8009312:	f853 2b04 	ldr.w	r2, [r3], #4
 8009316:	459c      	cmp	ip, r3
 8009318:	fa22 f20e 	lsr.w	r2, r2, lr
 800931c:	d8f3      	bhi.n	8009306 <__lshift+0x6e>
 800931e:	ebac 0304 	sub.w	r3, ip, r4
 8009322:	3b15      	subs	r3, #21
 8009324:	f023 0303 	bic.w	r3, r3, #3
 8009328:	3304      	adds	r3, #4
 800932a:	f104 0015 	add.w	r0, r4, #21
 800932e:	4584      	cmp	ip, r0
 8009330:	bf38      	it	cc
 8009332:	2304      	movcc	r3, #4
 8009334:	50ca      	str	r2, [r1, r3]
 8009336:	b10a      	cbz	r2, 800933c <__lshift+0xa4>
 8009338:	f108 0602 	add.w	r6, r8, #2
 800933c:	3e01      	subs	r6, #1
 800933e:	4638      	mov	r0, r7
 8009340:	4621      	mov	r1, r4
 8009342:	612e      	str	r6, [r5, #16]
 8009344:	f7ff fd92 	bl	8008e6c <_Bfree>
 8009348:	4628      	mov	r0, r5
 800934a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009352:	3301      	adds	r3, #1
 8009354:	e7c5      	b.n	80092e2 <__lshift+0x4a>
 8009356:	3904      	subs	r1, #4
 8009358:	f853 2b04 	ldr.w	r2, [r3], #4
 800935c:	459c      	cmp	ip, r3
 800935e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009362:	d8f9      	bhi.n	8009358 <__lshift+0xc0>
 8009364:	e7ea      	b.n	800933c <__lshift+0xa4>
 8009366:	bf00      	nop
 8009368:	0800e692 	.word	0x0800e692
 800936c:	0800e6a3 	.word	0x0800e6a3

08009370 <__mcmp>:
 8009370:	4603      	mov	r3, r0
 8009372:	690a      	ldr	r2, [r1, #16]
 8009374:	6900      	ldr	r0, [r0, #16]
 8009376:	b530      	push	{r4, r5, lr}
 8009378:	1a80      	subs	r0, r0, r2
 800937a:	d10e      	bne.n	800939a <__mcmp+0x2a>
 800937c:	3314      	adds	r3, #20
 800937e:	3114      	adds	r1, #20
 8009380:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009384:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009388:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800938c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009390:	4295      	cmp	r5, r2
 8009392:	d003      	beq.n	800939c <__mcmp+0x2c>
 8009394:	d205      	bcs.n	80093a2 <__mcmp+0x32>
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	bd30      	pop	{r4, r5, pc}
 800939c:	42a3      	cmp	r3, r4
 800939e:	d3f3      	bcc.n	8009388 <__mcmp+0x18>
 80093a0:	e7fb      	b.n	800939a <__mcmp+0x2a>
 80093a2:	2001      	movs	r0, #1
 80093a4:	e7f9      	b.n	800939a <__mcmp+0x2a>
	...

080093a8 <__mdiff>:
 80093a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	4689      	mov	r9, r1
 80093ae:	4606      	mov	r6, r0
 80093b0:	4611      	mov	r1, r2
 80093b2:	4648      	mov	r0, r9
 80093b4:	4614      	mov	r4, r2
 80093b6:	f7ff ffdb 	bl	8009370 <__mcmp>
 80093ba:	1e05      	subs	r5, r0, #0
 80093bc:	d112      	bne.n	80093e4 <__mdiff+0x3c>
 80093be:	4629      	mov	r1, r5
 80093c0:	4630      	mov	r0, r6
 80093c2:	f7ff fd13 	bl	8008dec <_Balloc>
 80093c6:	4602      	mov	r2, r0
 80093c8:	b928      	cbnz	r0, 80093d6 <__mdiff+0x2e>
 80093ca:	f240 2137 	movw	r1, #567	@ 0x237
 80093ce:	4b3e      	ldr	r3, [pc, #248]	@ (80094c8 <__mdiff+0x120>)
 80093d0:	483e      	ldr	r0, [pc, #248]	@ (80094cc <__mdiff+0x124>)
 80093d2:	f7fe fd9f 	bl	8007f14 <__assert_func>
 80093d6:	2301      	movs	r3, #1
 80093d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093dc:	4610      	mov	r0, r2
 80093de:	b003      	add	sp, #12
 80093e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e4:	bfbc      	itt	lt
 80093e6:	464b      	movlt	r3, r9
 80093e8:	46a1      	movlt	r9, r4
 80093ea:	4630      	mov	r0, r6
 80093ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093f0:	bfba      	itte	lt
 80093f2:	461c      	movlt	r4, r3
 80093f4:	2501      	movlt	r5, #1
 80093f6:	2500      	movge	r5, #0
 80093f8:	f7ff fcf8 	bl	8008dec <_Balloc>
 80093fc:	4602      	mov	r2, r0
 80093fe:	b918      	cbnz	r0, 8009408 <__mdiff+0x60>
 8009400:	f240 2145 	movw	r1, #581	@ 0x245
 8009404:	4b30      	ldr	r3, [pc, #192]	@ (80094c8 <__mdiff+0x120>)
 8009406:	e7e3      	b.n	80093d0 <__mdiff+0x28>
 8009408:	f100 0b14 	add.w	fp, r0, #20
 800940c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009410:	f109 0310 	add.w	r3, r9, #16
 8009414:	60c5      	str	r5, [r0, #12]
 8009416:	f04f 0c00 	mov.w	ip, #0
 800941a:	f109 0514 	add.w	r5, r9, #20
 800941e:	46d9      	mov	r9, fp
 8009420:	6926      	ldr	r6, [r4, #16]
 8009422:	f104 0e14 	add.w	lr, r4, #20
 8009426:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800942a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800942e:	9301      	str	r3, [sp, #4]
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009436:	f853 af04 	ldr.w	sl, [r3, #4]!
 800943a:	b281      	uxth	r1, r0
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	fa1f f38a 	uxth.w	r3, sl
 8009442:	1a5b      	subs	r3, r3, r1
 8009444:	0c00      	lsrs	r0, r0, #16
 8009446:	4463      	add	r3, ip
 8009448:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800944c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009450:	b29b      	uxth	r3, r3
 8009452:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009456:	4576      	cmp	r6, lr
 8009458:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800945c:	f849 3b04 	str.w	r3, [r9], #4
 8009460:	d8e6      	bhi.n	8009430 <__mdiff+0x88>
 8009462:	1b33      	subs	r3, r6, r4
 8009464:	3b15      	subs	r3, #21
 8009466:	f023 0303 	bic.w	r3, r3, #3
 800946a:	3415      	adds	r4, #21
 800946c:	3304      	adds	r3, #4
 800946e:	42a6      	cmp	r6, r4
 8009470:	bf38      	it	cc
 8009472:	2304      	movcc	r3, #4
 8009474:	441d      	add	r5, r3
 8009476:	445b      	add	r3, fp
 8009478:	461e      	mov	r6, r3
 800947a:	462c      	mov	r4, r5
 800947c:	4544      	cmp	r4, r8
 800947e:	d30e      	bcc.n	800949e <__mdiff+0xf6>
 8009480:	f108 0103 	add.w	r1, r8, #3
 8009484:	1b49      	subs	r1, r1, r5
 8009486:	f021 0103 	bic.w	r1, r1, #3
 800948a:	3d03      	subs	r5, #3
 800948c:	45a8      	cmp	r8, r5
 800948e:	bf38      	it	cc
 8009490:	2100      	movcc	r1, #0
 8009492:	440b      	add	r3, r1
 8009494:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009498:	b199      	cbz	r1, 80094c2 <__mdiff+0x11a>
 800949a:	6117      	str	r7, [r2, #16]
 800949c:	e79e      	b.n	80093dc <__mdiff+0x34>
 800949e:	46e6      	mov	lr, ip
 80094a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80094a4:	fa1f fc81 	uxth.w	ip, r1
 80094a8:	44f4      	add	ip, lr
 80094aa:	0c08      	lsrs	r0, r1, #16
 80094ac:	4471      	add	r1, lr
 80094ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80094b2:	b289      	uxth	r1, r1
 80094b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80094b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094bc:	f846 1b04 	str.w	r1, [r6], #4
 80094c0:	e7dc      	b.n	800947c <__mdiff+0xd4>
 80094c2:	3f01      	subs	r7, #1
 80094c4:	e7e6      	b.n	8009494 <__mdiff+0xec>
 80094c6:	bf00      	nop
 80094c8:	0800e692 	.word	0x0800e692
 80094cc:	0800e6a3 	.word	0x0800e6a3

080094d0 <__ulp>:
 80094d0:	4b0e      	ldr	r3, [pc, #56]	@ (800950c <__ulp+0x3c>)
 80094d2:	400b      	ands	r3, r1
 80094d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dc08      	bgt.n	80094ee <__ulp+0x1e>
 80094dc:	425b      	negs	r3, r3
 80094de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80094e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094e6:	da04      	bge.n	80094f2 <__ulp+0x22>
 80094e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80094ec:	4113      	asrs	r3, r2
 80094ee:	2200      	movs	r2, #0
 80094f0:	e008      	b.n	8009504 <__ulp+0x34>
 80094f2:	f1a2 0314 	sub.w	r3, r2, #20
 80094f6:	2b1e      	cmp	r3, #30
 80094f8:	bfd6      	itet	le
 80094fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80094fe:	2201      	movgt	r2, #1
 8009500:	40da      	lsrle	r2, r3
 8009502:	2300      	movs	r3, #0
 8009504:	4619      	mov	r1, r3
 8009506:	4610      	mov	r0, r2
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	7ff00000 	.word	0x7ff00000

08009510 <__b2d>:
 8009510:	6902      	ldr	r2, [r0, #16]
 8009512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009514:	f100 0614 	add.w	r6, r0, #20
 8009518:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800951c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009520:	4f1e      	ldr	r7, [pc, #120]	@ (800959c <__b2d+0x8c>)
 8009522:	4620      	mov	r0, r4
 8009524:	f7ff fd54 	bl	8008fd0 <__hi0bits>
 8009528:	4603      	mov	r3, r0
 800952a:	f1c0 0020 	rsb	r0, r0, #32
 800952e:	2b0a      	cmp	r3, #10
 8009530:	f1a2 0504 	sub.w	r5, r2, #4
 8009534:	6008      	str	r0, [r1, #0]
 8009536:	dc12      	bgt.n	800955e <__b2d+0x4e>
 8009538:	42ae      	cmp	r6, r5
 800953a:	bf2c      	ite	cs
 800953c:	2200      	movcs	r2, #0
 800953e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009542:	f1c3 0c0b 	rsb	ip, r3, #11
 8009546:	3315      	adds	r3, #21
 8009548:	fa24 fe0c 	lsr.w	lr, r4, ip
 800954c:	fa04 f303 	lsl.w	r3, r4, r3
 8009550:	fa22 f20c 	lsr.w	r2, r2, ip
 8009554:	ea4e 0107 	orr.w	r1, lr, r7
 8009558:	431a      	orrs	r2, r3
 800955a:	4610      	mov	r0, r2
 800955c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800955e:	42ae      	cmp	r6, r5
 8009560:	bf36      	itet	cc
 8009562:	f1a2 0508 	subcc.w	r5, r2, #8
 8009566:	2200      	movcs	r2, #0
 8009568:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800956c:	3b0b      	subs	r3, #11
 800956e:	d012      	beq.n	8009596 <__b2d+0x86>
 8009570:	f1c3 0720 	rsb	r7, r3, #32
 8009574:	fa22 f107 	lsr.w	r1, r2, r7
 8009578:	409c      	lsls	r4, r3
 800957a:	430c      	orrs	r4, r1
 800957c:	42b5      	cmp	r5, r6
 800957e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009582:	bf94      	ite	ls
 8009584:	2400      	movls	r4, #0
 8009586:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800958a:	409a      	lsls	r2, r3
 800958c:	40fc      	lsrs	r4, r7
 800958e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009592:	4322      	orrs	r2, r4
 8009594:	e7e1      	b.n	800955a <__b2d+0x4a>
 8009596:	ea44 0107 	orr.w	r1, r4, r7
 800959a:	e7de      	b.n	800955a <__b2d+0x4a>
 800959c:	3ff00000 	.word	0x3ff00000

080095a0 <__d2b>:
 80095a0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80095a4:	2101      	movs	r1, #1
 80095a6:	4690      	mov	r8, r2
 80095a8:	4699      	mov	r9, r3
 80095aa:	9e08      	ldr	r6, [sp, #32]
 80095ac:	f7ff fc1e 	bl	8008dec <_Balloc>
 80095b0:	4604      	mov	r4, r0
 80095b2:	b930      	cbnz	r0, 80095c2 <__d2b+0x22>
 80095b4:	4602      	mov	r2, r0
 80095b6:	f240 310f 	movw	r1, #783	@ 0x30f
 80095ba:	4b23      	ldr	r3, [pc, #140]	@ (8009648 <__d2b+0xa8>)
 80095bc:	4823      	ldr	r0, [pc, #140]	@ (800964c <__d2b+0xac>)
 80095be:	f7fe fca9 	bl	8007f14 <__assert_func>
 80095c2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095ca:	b10d      	cbz	r5, 80095d0 <__d2b+0x30>
 80095cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	f1b8 0300 	subs.w	r3, r8, #0
 80095d6:	d024      	beq.n	8009622 <__d2b+0x82>
 80095d8:	4668      	mov	r0, sp
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	f7ff fd17 	bl	800900e <__lo0bits>
 80095e0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095e4:	b1d8      	cbz	r0, 800961e <__d2b+0x7e>
 80095e6:	f1c0 0320 	rsb	r3, r0, #32
 80095ea:	fa02 f303 	lsl.w	r3, r2, r3
 80095ee:	430b      	orrs	r3, r1
 80095f0:	40c2      	lsrs	r2, r0
 80095f2:	6163      	str	r3, [r4, #20]
 80095f4:	9201      	str	r2, [sp, #4]
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bf0c      	ite	eq
 80095fc:	2201      	moveq	r2, #1
 80095fe:	2202      	movne	r2, #2
 8009600:	61a3      	str	r3, [r4, #24]
 8009602:	6122      	str	r2, [r4, #16]
 8009604:	b1ad      	cbz	r5, 8009632 <__d2b+0x92>
 8009606:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800960a:	4405      	add	r5, r0
 800960c:	6035      	str	r5, [r6, #0]
 800960e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009614:	6018      	str	r0, [r3, #0]
 8009616:	4620      	mov	r0, r4
 8009618:	b002      	add	sp, #8
 800961a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800961e:	6161      	str	r1, [r4, #20]
 8009620:	e7e9      	b.n	80095f6 <__d2b+0x56>
 8009622:	a801      	add	r0, sp, #4
 8009624:	f7ff fcf3 	bl	800900e <__lo0bits>
 8009628:	9b01      	ldr	r3, [sp, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	6163      	str	r3, [r4, #20]
 800962e:	3020      	adds	r0, #32
 8009630:	e7e7      	b.n	8009602 <__d2b+0x62>
 8009632:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009636:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800963a:	6030      	str	r0, [r6, #0]
 800963c:	6918      	ldr	r0, [r3, #16]
 800963e:	f7ff fcc7 	bl	8008fd0 <__hi0bits>
 8009642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009646:	e7e4      	b.n	8009612 <__d2b+0x72>
 8009648:	0800e692 	.word	0x0800e692
 800964c:	0800e6a3 	.word	0x0800e6a3

08009650 <__ratio>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	b085      	sub	sp, #20
 8009656:	e9cd 1000 	strd	r1, r0, [sp]
 800965a:	a902      	add	r1, sp, #8
 800965c:	f7ff ff58 	bl	8009510 <__b2d>
 8009660:	468b      	mov	fp, r1
 8009662:	4606      	mov	r6, r0
 8009664:	460f      	mov	r7, r1
 8009666:	9800      	ldr	r0, [sp, #0]
 8009668:	a903      	add	r1, sp, #12
 800966a:	f7ff ff51 	bl	8009510 <__b2d>
 800966e:	460d      	mov	r5, r1
 8009670:	9b01      	ldr	r3, [sp, #4]
 8009672:	4689      	mov	r9, r1
 8009674:	6919      	ldr	r1, [r3, #16]
 8009676:	9b00      	ldr	r3, [sp, #0]
 8009678:	4604      	mov	r4, r0
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	4630      	mov	r0, r6
 800967e:	1ac9      	subs	r1, r1, r3
 8009680:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800968a:	2b00      	cmp	r3, #0
 800968c:	bfcd      	iteet	gt
 800968e:	463a      	movgt	r2, r7
 8009690:	462a      	movle	r2, r5
 8009692:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009696:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800969a:	bfd8      	it	le
 800969c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80096a0:	464b      	mov	r3, r9
 80096a2:	4622      	mov	r2, r4
 80096a4:	4659      	mov	r1, fp
 80096a6:	f7f7 f8f5 	bl	8000894 <__aeabi_ddiv>
 80096aa:	b005      	add	sp, #20
 80096ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096b0 <__copybits>:
 80096b0:	3901      	subs	r1, #1
 80096b2:	b570      	push	{r4, r5, r6, lr}
 80096b4:	1149      	asrs	r1, r1, #5
 80096b6:	6914      	ldr	r4, [r2, #16]
 80096b8:	3101      	adds	r1, #1
 80096ba:	f102 0314 	add.w	r3, r2, #20
 80096be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80096c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096c6:	1f05      	subs	r5, r0, #4
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	d30c      	bcc.n	80096e6 <__copybits+0x36>
 80096cc:	1aa3      	subs	r3, r4, r2
 80096ce:	3b11      	subs	r3, #17
 80096d0:	f023 0303 	bic.w	r3, r3, #3
 80096d4:	3211      	adds	r2, #17
 80096d6:	42a2      	cmp	r2, r4
 80096d8:	bf88      	it	hi
 80096da:	2300      	movhi	r3, #0
 80096dc:	4418      	add	r0, r3
 80096de:	2300      	movs	r3, #0
 80096e0:	4288      	cmp	r0, r1
 80096e2:	d305      	bcc.n	80096f0 <__copybits+0x40>
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80096ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80096ee:	e7eb      	b.n	80096c8 <__copybits+0x18>
 80096f0:	f840 3b04 	str.w	r3, [r0], #4
 80096f4:	e7f4      	b.n	80096e0 <__copybits+0x30>

080096f6 <__any_on>:
 80096f6:	f100 0214 	add.w	r2, r0, #20
 80096fa:	6900      	ldr	r0, [r0, #16]
 80096fc:	114b      	asrs	r3, r1, #5
 80096fe:	4298      	cmp	r0, r3
 8009700:	b510      	push	{r4, lr}
 8009702:	db11      	blt.n	8009728 <__any_on+0x32>
 8009704:	dd0a      	ble.n	800971c <__any_on+0x26>
 8009706:	f011 011f 	ands.w	r1, r1, #31
 800970a:	d007      	beq.n	800971c <__any_on+0x26>
 800970c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009710:	fa24 f001 	lsr.w	r0, r4, r1
 8009714:	fa00 f101 	lsl.w	r1, r0, r1
 8009718:	428c      	cmp	r4, r1
 800971a:	d10b      	bne.n	8009734 <__any_on+0x3e>
 800971c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009720:	4293      	cmp	r3, r2
 8009722:	d803      	bhi.n	800972c <__any_on+0x36>
 8009724:	2000      	movs	r0, #0
 8009726:	bd10      	pop	{r4, pc}
 8009728:	4603      	mov	r3, r0
 800972a:	e7f7      	b.n	800971c <__any_on+0x26>
 800972c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009730:	2900      	cmp	r1, #0
 8009732:	d0f5      	beq.n	8009720 <__any_on+0x2a>
 8009734:	2001      	movs	r0, #1
 8009736:	e7f6      	b.n	8009726 <__any_on+0x30>

08009738 <sulp>:
 8009738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973c:	460f      	mov	r7, r1
 800973e:	4690      	mov	r8, r2
 8009740:	f7ff fec6 	bl	80094d0 <__ulp>
 8009744:	4604      	mov	r4, r0
 8009746:	460d      	mov	r5, r1
 8009748:	f1b8 0f00 	cmp.w	r8, #0
 800974c:	d011      	beq.n	8009772 <sulp+0x3a>
 800974e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009752:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009756:	2b00      	cmp	r3, #0
 8009758:	dd0b      	ble.n	8009772 <sulp+0x3a>
 800975a:	2400      	movs	r4, #0
 800975c:	051b      	lsls	r3, r3, #20
 800975e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009762:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009766:	4622      	mov	r2, r4
 8009768:	462b      	mov	r3, r5
 800976a:	f7f6 ff69 	bl	8000640 <__aeabi_dmul>
 800976e:	4604      	mov	r4, r0
 8009770:	460d      	mov	r5, r1
 8009772:	4620      	mov	r0, r4
 8009774:	4629      	mov	r1, r5
 8009776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800977a:	0000      	movs	r0, r0
 800977c:	0000      	movs	r0, r0
	...

08009780 <_strtod_l>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	b09f      	sub	sp, #124	@ 0x7c
 8009786:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009788:	2200      	movs	r2, #0
 800978a:	460c      	mov	r4, r1
 800978c:	921a      	str	r2, [sp, #104]	@ 0x68
 800978e:	f04f 0a00 	mov.w	sl, #0
 8009792:	f04f 0b00 	mov.w	fp, #0
 8009796:	460a      	mov	r2, r1
 8009798:	9005      	str	r0, [sp, #20]
 800979a:	9219      	str	r2, [sp, #100]	@ 0x64
 800979c:	7811      	ldrb	r1, [r2, #0]
 800979e:	292b      	cmp	r1, #43	@ 0x2b
 80097a0:	d048      	beq.n	8009834 <_strtod_l+0xb4>
 80097a2:	d836      	bhi.n	8009812 <_strtod_l+0x92>
 80097a4:	290d      	cmp	r1, #13
 80097a6:	d830      	bhi.n	800980a <_strtod_l+0x8a>
 80097a8:	2908      	cmp	r1, #8
 80097aa:	d830      	bhi.n	800980e <_strtod_l+0x8e>
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d039      	beq.n	8009824 <_strtod_l+0xa4>
 80097b0:	2200      	movs	r2, #0
 80097b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80097b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80097b6:	782a      	ldrb	r2, [r5, #0]
 80097b8:	2a30      	cmp	r2, #48	@ 0x30
 80097ba:	f040 80b1 	bne.w	8009920 <_strtod_l+0x1a0>
 80097be:	786a      	ldrb	r2, [r5, #1]
 80097c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80097c4:	2a58      	cmp	r2, #88	@ 0x58
 80097c6:	d16c      	bne.n	80098a2 <_strtod_l+0x122>
 80097c8:	9302      	str	r3, [sp, #8]
 80097ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097cc:	4a8e      	ldr	r2, [pc, #568]	@ (8009a08 <_strtod_l+0x288>)
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	ab1a      	add	r3, sp, #104	@ 0x68
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	9805      	ldr	r0, [sp, #20]
 80097d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80097d8:	a919      	add	r1, sp, #100	@ 0x64
 80097da:	f001 f87b 	bl	800a8d4 <__gethex>
 80097de:	f010 060f 	ands.w	r6, r0, #15
 80097e2:	4604      	mov	r4, r0
 80097e4:	d005      	beq.n	80097f2 <_strtod_l+0x72>
 80097e6:	2e06      	cmp	r6, #6
 80097e8:	d126      	bne.n	8009838 <_strtod_l+0xb8>
 80097ea:	2300      	movs	r3, #0
 80097ec:	3501      	adds	r5, #1
 80097ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80097f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f040 8584 	bne.w	800a302 <_strtod_l+0xb82>
 80097fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097fc:	b1bb      	cbz	r3, 800982e <_strtod_l+0xae>
 80097fe:	4650      	mov	r0, sl
 8009800:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009804:	b01f      	add	sp, #124	@ 0x7c
 8009806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980a:	2920      	cmp	r1, #32
 800980c:	d1d0      	bne.n	80097b0 <_strtod_l+0x30>
 800980e:	3201      	adds	r2, #1
 8009810:	e7c3      	b.n	800979a <_strtod_l+0x1a>
 8009812:	292d      	cmp	r1, #45	@ 0x2d
 8009814:	d1cc      	bne.n	80097b0 <_strtod_l+0x30>
 8009816:	2101      	movs	r1, #1
 8009818:	910b      	str	r1, [sp, #44]	@ 0x2c
 800981a:	1c51      	adds	r1, r2, #1
 800981c:	9119      	str	r1, [sp, #100]	@ 0x64
 800981e:	7852      	ldrb	r2, [r2, #1]
 8009820:	2a00      	cmp	r2, #0
 8009822:	d1c7      	bne.n	80097b4 <_strtod_l+0x34>
 8009824:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009826:	9419      	str	r4, [sp, #100]	@ 0x64
 8009828:	2b00      	cmp	r3, #0
 800982a:	f040 8568 	bne.w	800a2fe <_strtod_l+0xb7e>
 800982e:	4650      	mov	r0, sl
 8009830:	4659      	mov	r1, fp
 8009832:	e7e7      	b.n	8009804 <_strtod_l+0x84>
 8009834:	2100      	movs	r1, #0
 8009836:	e7ef      	b.n	8009818 <_strtod_l+0x98>
 8009838:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800983a:	b13a      	cbz	r2, 800984c <_strtod_l+0xcc>
 800983c:	2135      	movs	r1, #53	@ 0x35
 800983e:	a81c      	add	r0, sp, #112	@ 0x70
 8009840:	f7ff ff36 	bl	80096b0 <__copybits>
 8009844:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009846:	9805      	ldr	r0, [sp, #20]
 8009848:	f7ff fb10 	bl	8008e6c <_Bfree>
 800984c:	3e01      	subs	r6, #1
 800984e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009850:	2e04      	cmp	r6, #4
 8009852:	d806      	bhi.n	8009862 <_strtod_l+0xe2>
 8009854:	e8df f006 	tbb	[pc, r6]
 8009858:	201d0314 	.word	0x201d0314
 800985c:	14          	.byte	0x14
 800985d:	00          	.byte	0x00
 800985e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009862:	05e1      	lsls	r1, r4, #23
 8009864:	bf48      	it	mi
 8009866:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800986a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800986e:	0d1b      	lsrs	r3, r3, #20
 8009870:	051b      	lsls	r3, r3, #20
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1bd      	bne.n	80097f2 <_strtod_l+0x72>
 8009876:	f7fe fb05 	bl	8007e84 <__errno>
 800987a:	2322      	movs	r3, #34	@ 0x22
 800987c:	6003      	str	r3, [r0, #0]
 800987e:	e7b8      	b.n	80097f2 <_strtod_l+0x72>
 8009880:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009884:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009888:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800988c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009890:	e7e7      	b.n	8009862 <_strtod_l+0xe2>
 8009892:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009a0c <_strtod_l+0x28c>
 8009896:	e7e4      	b.n	8009862 <_strtod_l+0xe2>
 8009898:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800989c:	f04f 3aff 	mov.w	sl, #4294967295
 80098a0:	e7df      	b.n	8009862 <_strtod_l+0xe2>
 80098a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80098a8:	785b      	ldrb	r3, [r3, #1]
 80098aa:	2b30      	cmp	r3, #48	@ 0x30
 80098ac:	d0f9      	beq.n	80098a2 <_strtod_l+0x122>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d09f      	beq.n	80097f2 <_strtod_l+0x72>
 80098b2:	2301      	movs	r3, #1
 80098b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098b8:	220a      	movs	r2, #10
 80098ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80098bc:	2300      	movs	r3, #0
 80098be:	461f      	mov	r7, r3
 80098c0:	9308      	str	r3, [sp, #32]
 80098c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80098c4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80098c6:	7805      	ldrb	r5, [r0, #0]
 80098c8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80098cc:	b2d9      	uxtb	r1, r3
 80098ce:	2909      	cmp	r1, #9
 80098d0:	d928      	bls.n	8009924 <_strtod_l+0x1a4>
 80098d2:	2201      	movs	r2, #1
 80098d4:	494e      	ldr	r1, [pc, #312]	@ (8009a10 <_strtod_l+0x290>)
 80098d6:	f000 ff43 	bl	800a760 <strncmp>
 80098da:	2800      	cmp	r0, #0
 80098dc:	d032      	beq.n	8009944 <_strtod_l+0x1c4>
 80098de:	2000      	movs	r0, #0
 80098e0:	462a      	mov	r2, r5
 80098e2:	4681      	mov	r9, r0
 80098e4:	463d      	mov	r5, r7
 80098e6:	4603      	mov	r3, r0
 80098e8:	2a65      	cmp	r2, #101	@ 0x65
 80098ea:	d001      	beq.n	80098f0 <_strtod_l+0x170>
 80098ec:	2a45      	cmp	r2, #69	@ 0x45
 80098ee:	d114      	bne.n	800991a <_strtod_l+0x19a>
 80098f0:	b91d      	cbnz	r5, 80098fa <_strtod_l+0x17a>
 80098f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098f4:	4302      	orrs	r2, r0
 80098f6:	d095      	beq.n	8009824 <_strtod_l+0xa4>
 80098f8:	2500      	movs	r5, #0
 80098fa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80098fc:	1c62      	adds	r2, r4, #1
 80098fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009900:	7862      	ldrb	r2, [r4, #1]
 8009902:	2a2b      	cmp	r2, #43	@ 0x2b
 8009904:	d077      	beq.n	80099f6 <_strtod_l+0x276>
 8009906:	2a2d      	cmp	r2, #45	@ 0x2d
 8009908:	d07b      	beq.n	8009a02 <_strtod_l+0x282>
 800990a:	f04f 0c00 	mov.w	ip, #0
 800990e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009912:	2909      	cmp	r1, #9
 8009914:	f240 8082 	bls.w	8009a1c <_strtod_l+0x29c>
 8009918:	9419      	str	r4, [sp, #100]	@ 0x64
 800991a:	f04f 0800 	mov.w	r8, #0
 800991e:	e0a2      	b.n	8009a66 <_strtod_l+0x2e6>
 8009920:	2300      	movs	r3, #0
 8009922:	e7c7      	b.n	80098b4 <_strtod_l+0x134>
 8009924:	2f08      	cmp	r7, #8
 8009926:	bfd5      	itete	le
 8009928:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800992a:	9908      	ldrgt	r1, [sp, #32]
 800992c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009930:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009934:	f100 0001 	add.w	r0, r0, #1
 8009938:	bfd4      	ite	le
 800993a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800993c:	9308      	strgt	r3, [sp, #32]
 800993e:	3701      	adds	r7, #1
 8009940:	9019      	str	r0, [sp, #100]	@ 0x64
 8009942:	e7bf      	b.n	80098c4 <_strtod_l+0x144>
 8009944:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	9219      	str	r2, [sp, #100]	@ 0x64
 800994a:	785a      	ldrb	r2, [r3, #1]
 800994c:	b37f      	cbz	r7, 80099ae <_strtod_l+0x22e>
 800994e:	4681      	mov	r9, r0
 8009950:	463d      	mov	r5, r7
 8009952:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009956:	2b09      	cmp	r3, #9
 8009958:	d912      	bls.n	8009980 <_strtod_l+0x200>
 800995a:	2301      	movs	r3, #1
 800995c:	e7c4      	b.n	80098e8 <_strtod_l+0x168>
 800995e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009960:	3001      	adds	r0, #1
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	9219      	str	r2, [sp, #100]	@ 0x64
 8009966:	785a      	ldrb	r2, [r3, #1]
 8009968:	2a30      	cmp	r2, #48	@ 0x30
 800996a:	d0f8      	beq.n	800995e <_strtod_l+0x1de>
 800996c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009970:	2b08      	cmp	r3, #8
 8009972:	f200 84cb 	bhi.w	800a30c <_strtod_l+0xb8c>
 8009976:	4681      	mov	r9, r0
 8009978:	2000      	movs	r0, #0
 800997a:	4605      	mov	r5, r0
 800997c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800997e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009980:	3a30      	subs	r2, #48	@ 0x30
 8009982:	f100 0301 	add.w	r3, r0, #1
 8009986:	d02a      	beq.n	80099de <_strtod_l+0x25e>
 8009988:	4499      	add	r9, r3
 800998a:	210a      	movs	r1, #10
 800998c:	462b      	mov	r3, r5
 800998e:	eb00 0c05 	add.w	ip, r0, r5
 8009992:	4563      	cmp	r3, ip
 8009994:	d10d      	bne.n	80099b2 <_strtod_l+0x232>
 8009996:	1c69      	adds	r1, r5, #1
 8009998:	4401      	add	r1, r0
 800999a:	4428      	add	r0, r5
 800999c:	2808      	cmp	r0, #8
 800999e:	dc16      	bgt.n	80099ce <_strtod_l+0x24e>
 80099a0:	230a      	movs	r3, #10
 80099a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099a4:	fb03 2300 	mla	r3, r3, r0, r2
 80099a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80099aa:	2300      	movs	r3, #0
 80099ac:	e018      	b.n	80099e0 <_strtod_l+0x260>
 80099ae:	4638      	mov	r0, r7
 80099b0:	e7da      	b.n	8009968 <_strtod_l+0x1e8>
 80099b2:	2b08      	cmp	r3, #8
 80099b4:	f103 0301 	add.w	r3, r3, #1
 80099b8:	dc03      	bgt.n	80099c2 <_strtod_l+0x242>
 80099ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80099bc:	434e      	muls	r6, r1
 80099be:	960a      	str	r6, [sp, #40]	@ 0x28
 80099c0:	e7e7      	b.n	8009992 <_strtod_l+0x212>
 80099c2:	2b10      	cmp	r3, #16
 80099c4:	bfde      	ittt	le
 80099c6:	9e08      	ldrle	r6, [sp, #32]
 80099c8:	434e      	mulle	r6, r1
 80099ca:	9608      	strle	r6, [sp, #32]
 80099cc:	e7e1      	b.n	8009992 <_strtod_l+0x212>
 80099ce:	280f      	cmp	r0, #15
 80099d0:	dceb      	bgt.n	80099aa <_strtod_l+0x22a>
 80099d2:	230a      	movs	r3, #10
 80099d4:	9808      	ldr	r0, [sp, #32]
 80099d6:	fb03 2300 	mla	r3, r3, r0, r2
 80099da:	9308      	str	r3, [sp, #32]
 80099dc:	e7e5      	b.n	80099aa <_strtod_l+0x22a>
 80099de:	4629      	mov	r1, r5
 80099e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099e2:	460d      	mov	r5, r1
 80099e4:	1c50      	adds	r0, r2, #1
 80099e6:	9019      	str	r0, [sp, #100]	@ 0x64
 80099e8:	7852      	ldrb	r2, [r2, #1]
 80099ea:	4618      	mov	r0, r3
 80099ec:	e7b1      	b.n	8009952 <_strtod_l+0x1d2>
 80099ee:	f04f 0900 	mov.w	r9, #0
 80099f2:	2301      	movs	r3, #1
 80099f4:	e77d      	b.n	80098f2 <_strtod_l+0x172>
 80099f6:	f04f 0c00 	mov.w	ip, #0
 80099fa:	1ca2      	adds	r2, r4, #2
 80099fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80099fe:	78a2      	ldrb	r2, [r4, #2]
 8009a00:	e785      	b.n	800990e <_strtod_l+0x18e>
 8009a02:	f04f 0c01 	mov.w	ip, #1
 8009a06:	e7f8      	b.n	80099fa <_strtod_l+0x27a>
 8009a08:	0800e810 	.word	0x0800e810
 8009a0c:	7ff00000 	.word	0x7ff00000
 8009a10:	0800e7f8 	.word	0x0800e7f8
 8009a14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a16:	1c51      	adds	r1, r2, #1
 8009a18:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a1a:	7852      	ldrb	r2, [r2, #1]
 8009a1c:	2a30      	cmp	r2, #48	@ 0x30
 8009a1e:	d0f9      	beq.n	8009a14 <_strtod_l+0x294>
 8009a20:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009a24:	2908      	cmp	r1, #8
 8009a26:	f63f af78 	bhi.w	800991a <_strtod_l+0x19a>
 8009a2a:	f04f 080a 	mov.w	r8, #10
 8009a2e:	3a30      	subs	r2, #48	@ 0x30
 8009a30:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a34:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009a36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a38:	1c56      	adds	r6, r2, #1
 8009a3a:	9619      	str	r6, [sp, #100]	@ 0x64
 8009a3c:	7852      	ldrb	r2, [r2, #1]
 8009a3e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009a42:	f1be 0f09 	cmp.w	lr, #9
 8009a46:	d939      	bls.n	8009abc <_strtod_l+0x33c>
 8009a48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009a4e:	1a76      	subs	r6, r6, r1
 8009a50:	2e08      	cmp	r6, #8
 8009a52:	dc03      	bgt.n	8009a5c <_strtod_l+0x2dc>
 8009a54:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a56:	4588      	cmp	r8, r1
 8009a58:	bfa8      	it	ge
 8009a5a:	4688      	movge	r8, r1
 8009a5c:	f1bc 0f00 	cmp.w	ip, #0
 8009a60:	d001      	beq.n	8009a66 <_strtod_l+0x2e6>
 8009a62:	f1c8 0800 	rsb	r8, r8, #0
 8009a66:	2d00      	cmp	r5, #0
 8009a68:	d14e      	bne.n	8009b08 <_strtod_l+0x388>
 8009a6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a6c:	4308      	orrs	r0, r1
 8009a6e:	f47f aec0 	bne.w	80097f2 <_strtod_l+0x72>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f47f aed6 	bne.w	8009824 <_strtod_l+0xa4>
 8009a78:	2a69      	cmp	r2, #105	@ 0x69
 8009a7a:	d028      	beq.n	8009ace <_strtod_l+0x34e>
 8009a7c:	dc25      	bgt.n	8009aca <_strtod_l+0x34a>
 8009a7e:	2a49      	cmp	r2, #73	@ 0x49
 8009a80:	d025      	beq.n	8009ace <_strtod_l+0x34e>
 8009a82:	2a4e      	cmp	r2, #78	@ 0x4e
 8009a84:	f47f aece 	bne.w	8009824 <_strtod_l+0xa4>
 8009a88:	499a      	ldr	r1, [pc, #616]	@ (8009cf4 <_strtod_l+0x574>)
 8009a8a:	a819      	add	r0, sp, #100	@ 0x64
 8009a8c:	f001 f944 	bl	800ad18 <__match>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	f43f aec7 	beq.w	8009824 <_strtod_l+0xa4>
 8009a96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	2b28      	cmp	r3, #40	@ 0x28
 8009a9c:	d12e      	bne.n	8009afc <_strtod_l+0x37c>
 8009a9e:	4996      	ldr	r1, [pc, #600]	@ (8009cf8 <_strtod_l+0x578>)
 8009aa0:	aa1c      	add	r2, sp, #112	@ 0x70
 8009aa2:	a819      	add	r0, sp, #100	@ 0x64
 8009aa4:	f001 f94c 	bl	800ad40 <__hexnan>
 8009aa8:	2805      	cmp	r0, #5
 8009aaa:	d127      	bne.n	8009afc <_strtod_l+0x37c>
 8009aac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009aae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009ab2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009ab6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009aba:	e69a      	b.n	80097f2 <_strtod_l+0x72>
 8009abc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009abe:	fb08 2101 	mla	r1, r8, r1, r2
 8009ac2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009ac6:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ac8:	e7b5      	b.n	8009a36 <_strtod_l+0x2b6>
 8009aca:	2a6e      	cmp	r2, #110	@ 0x6e
 8009acc:	e7da      	b.n	8009a84 <_strtod_l+0x304>
 8009ace:	498b      	ldr	r1, [pc, #556]	@ (8009cfc <_strtod_l+0x57c>)
 8009ad0:	a819      	add	r0, sp, #100	@ 0x64
 8009ad2:	f001 f921 	bl	800ad18 <__match>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f43f aea4 	beq.w	8009824 <_strtod_l+0xa4>
 8009adc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ade:	4988      	ldr	r1, [pc, #544]	@ (8009d00 <_strtod_l+0x580>)
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	a819      	add	r0, sp, #100	@ 0x64
 8009ae4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ae6:	f001 f917 	bl	800ad18 <__match>
 8009aea:	b910      	cbnz	r0, 8009af2 <_strtod_l+0x372>
 8009aec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009aee:	3301      	adds	r3, #1
 8009af0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009af2:	f04f 0a00 	mov.w	sl, #0
 8009af6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009d04 <_strtod_l+0x584>
 8009afa:	e67a      	b.n	80097f2 <_strtod_l+0x72>
 8009afc:	4882      	ldr	r0, [pc, #520]	@ (8009d08 <_strtod_l+0x588>)
 8009afe:	f000 fe5f 	bl	800a7c0 <nan>
 8009b02:	4682      	mov	sl, r0
 8009b04:	468b      	mov	fp, r1
 8009b06:	e674      	b.n	80097f2 <_strtod_l+0x72>
 8009b08:	eba8 0309 	sub.w	r3, r8, r9
 8009b0c:	2f00      	cmp	r7, #0
 8009b0e:	bf08      	it	eq
 8009b10:	462f      	moveq	r7, r5
 8009b12:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b14:	2d10      	cmp	r5, #16
 8009b16:	462c      	mov	r4, r5
 8009b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b1a:	bfa8      	it	ge
 8009b1c:	2410      	movge	r4, #16
 8009b1e:	f7f6 fd15 	bl	800054c <__aeabi_ui2d>
 8009b22:	2d09      	cmp	r5, #9
 8009b24:	4682      	mov	sl, r0
 8009b26:	468b      	mov	fp, r1
 8009b28:	dc11      	bgt.n	8009b4e <_strtod_l+0x3ce>
 8009b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f43f ae60 	beq.w	80097f2 <_strtod_l+0x72>
 8009b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b34:	dd76      	ble.n	8009c24 <_strtod_l+0x4a4>
 8009b36:	2b16      	cmp	r3, #22
 8009b38:	dc5d      	bgt.n	8009bf6 <_strtod_l+0x476>
 8009b3a:	4974      	ldr	r1, [pc, #464]	@ (8009d0c <_strtod_l+0x58c>)
 8009b3c:	4652      	mov	r2, sl
 8009b3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b42:	465b      	mov	r3, fp
 8009b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b48:	f7f6 fd7a 	bl	8000640 <__aeabi_dmul>
 8009b4c:	e7d9      	b.n	8009b02 <_strtod_l+0x382>
 8009b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8009d0c <_strtod_l+0x58c>)
 8009b50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009b58:	f7f6 fd72 	bl	8000640 <__aeabi_dmul>
 8009b5c:	4682      	mov	sl, r0
 8009b5e:	9808      	ldr	r0, [sp, #32]
 8009b60:	468b      	mov	fp, r1
 8009b62:	f7f6 fcf3 	bl	800054c <__aeabi_ui2d>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4650      	mov	r0, sl
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	f7f6 fbb1 	bl	80002d4 <__adddf3>
 8009b72:	2d0f      	cmp	r5, #15
 8009b74:	4682      	mov	sl, r0
 8009b76:	468b      	mov	fp, r1
 8009b78:	ddd7      	ble.n	8009b2a <_strtod_l+0x3aa>
 8009b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7c:	1b2c      	subs	r4, r5, r4
 8009b7e:	441c      	add	r4, r3
 8009b80:	2c00      	cmp	r4, #0
 8009b82:	f340 8096 	ble.w	8009cb2 <_strtod_l+0x532>
 8009b86:	f014 030f 	ands.w	r3, r4, #15
 8009b8a:	d00a      	beq.n	8009ba2 <_strtod_l+0x422>
 8009b8c:	495f      	ldr	r1, [pc, #380]	@ (8009d0c <_strtod_l+0x58c>)
 8009b8e:	4652      	mov	r2, sl
 8009b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b98:	465b      	mov	r3, fp
 8009b9a:	f7f6 fd51 	bl	8000640 <__aeabi_dmul>
 8009b9e:	4682      	mov	sl, r0
 8009ba0:	468b      	mov	fp, r1
 8009ba2:	f034 040f 	bics.w	r4, r4, #15
 8009ba6:	d073      	beq.n	8009c90 <_strtod_l+0x510>
 8009ba8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009bac:	dd48      	ble.n	8009c40 <_strtod_l+0x4c0>
 8009bae:	2400      	movs	r4, #0
 8009bb0:	46a0      	mov	r8, r4
 8009bb2:	46a1      	mov	r9, r4
 8009bb4:	940a      	str	r4, [sp, #40]	@ 0x28
 8009bb6:	2322      	movs	r3, #34	@ 0x22
 8009bb8:	f04f 0a00 	mov.w	sl, #0
 8009bbc:	9a05      	ldr	r2, [sp, #20]
 8009bbe:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009d04 <_strtod_l+0x584>
 8009bc2:	6013      	str	r3, [r2, #0]
 8009bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f43f ae13 	beq.w	80097f2 <_strtod_l+0x72>
 8009bcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bce:	9805      	ldr	r0, [sp, #20]
 8009bd0:	f7ff f94c 	bl	8008e6c <_Bfree>
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	9805      	ldr	r0, [sp, #20]
 8009bd8:	f7ff f948 	bl	8008e6c <_Bfree>
 8009bdc:	4641      	mov	r1, r8
 8009bde:	9805      	ldr	r0, [sp, #20]
 8009be0:	f7ff f944 	bl	8008e6c <_Bfree>
 8009be4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009be6:	9805      	ldr	r0, [sp, #20]
 8009be8:	f7ff f940 	bl	8008e6c <_Bfree>
 8009bec:	4621      	mov	r1, r4
 8009bee:	9805      	ldr	r0, [sp, #20]
 8009bf0:	f7ff f93c 	bl	8008e6c <_Bfree>
 8009bf4:	e5fd      	b.n	80097f2 <_strtod_l+0x72>
 8009bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bf8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	dbbc      	blt.n	8009b7a <_strtod_l+0x3fa>
 8009c00:	4c42      	ldr	r4, [pc, #264]	@ (8009d0c <_strtod_l+0x58c>)
 8009c02:	f1c5 050f 	rsb	r5, r5, #15
 8009c06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009c0a:	4652      	mov	r2, sl
 8009c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c10:	465b      	mov	r3, fp
 8009c12:	f7f6 fd15 	bl	8000640 <__aeabi_dmul>
 8009c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c18:	1b5d      	subs	r5, r3, r5
 8009c1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009c1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c22:	e791      	b.n	8009b48 <_strtod_l+0x3c8>
 8009c24:	3316      	adds	r3, #22
 8009c26:	dba8      	blt.n	8009b7a <_strtod_l+0x3fa>
 8009c28:	4b38      	ldr	r3, [pc, #224]	@ (8009d0c <_strtod_l+0x58c>)
 8009c2a:	eba9 0808 	sub.w	r8, r9, r8
 8009c2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009c32:	4650      	mov	r0, sl
 8009c34:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009c38:	4659      	mov	r1, fp
 8009c3a:	f7f6 fe2b 	bl	8000894 <__aeabi_ddiv>
 8009c3e:	e760      	b.n	8009b02 <_strtod_l+0x382>
 8009c40:	4b33      	ldr	r3, [pc, #204]	@ (8009d10 <_strtod_l+0x590>)
 8009c42:	4650      	mov	r0, sl
 8009c44:	9308      	str	r3, [sp, #32]
 8009c46:	2300      	movs	r3, #0
 8009c48:	4659      	mov	r1, fp
 8009c4a:	461e      	mov	r6, r3
 8009c4c:	1124      	asrs	r4, r4, #4
 8009c4e:	2c01      	cmp	r4, #1
 8009c50:	dc21      	bgt.n	8009c96 <_strtod_l+0x516>
 8009c52:	b10b      	cbz	r3, 8009c58 <_strtod_l+0x4d8>
 8009c54:	4682      	mov	sl, r0
 8009c56:	468b      	mov	fp, r1
 8009c58:	492d      	ldr	r1, [pc, #180]	@ (8009d10 <_strtod_l+0x590>)
 8009c5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009c5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009c62:	4652      	mov	r2, sl
 8009c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c68:	465b      	mov	r3, fp
 8009c6a:	f7f6 fce9 	bl	8000640 <__aeabi_dmul>
 8009c6e:	4b25      	ldr	r3, [pc, #148]	@ (8009d04 <_strtod_l+0x584>)
 8009c70:	460a      	mov	r2, r1
 8009c72:	400b      	ands	r3, r1
 8009c74:	4927      	ldr	r1, [pc, #156]	@ (8009d14 <_strtod_l+0x594>)
 8009c76:	4682      	mov	sl, r0
 8009c78:	428b      	cmp	r3, r1
 8009c7a:	d898      	bhi.n	8009bae <_strtod_l+0x42e>
 8009c7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009c80:	428b      	cmp	r3, r1
 8009c82:	bf86      	itte	hi
 8009c84:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c88:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009d18 <_strtod_l+0x598>
 8009c8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009c90:	2300      	movs	r3, #0
 8009c92:	9308      	str	r3, [sp, #32]
 8009c94:	e07a      	b.n	8009d8c <_strtod_l+0x60c>
 8009c96:	07e2      	lsls	r2, r4, #31
 8009c98:	d505      	bpl.n	8009ca6 <_strtod_l+0x526>
 8009c9a:	9b08      	ldr	r3, [sp, #32]
 8009c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca0:	f7f6 fcce 	bl	8000640 <__aeabi_dmul>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	9a08      	ldr	r2, [sp, #32]
 8009ca8:	3601      	adds	r6, #1
 8009caa:	3208      	adds	r2, #8
 8009cac:	1064      	asrs	r4, r4, #1
 8009cae:	9208      	str	r2, [sp, #32]
 8009cb0:	e7cd      	b.n	8009c4e <_strtod_l+0x4ce>
 8009cb2:	d0ed      	beq.n	8009c90 <_strtod_l+0x510>
 8009cb4:	4264      	negs	r4, r4
 8009cb6:	f014 020f 	ands.w	r2, r4, #15
 8009cba:	d00a      	beq.n	8009cd2 <_strtod_l+0x552>
 8009cbc:	4b13      	ldr	r3, [pc, #76]	@ (8009d0c <_strtod_l+0x58c>)
 8009cbe:	4650      	mov	r0, sl
 8009cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cc4:	4659      	mov	r1, fp
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 fde3 	bl	8000894 <__aeabi_ddiv>
 8009cce:	4682      	mov	sl, r0
 8009cd0:	468b      	mov	fp, r1
 8009cd2:	1124      	asrs	r4, r4, #4
 8009cd4:	d0dc      	beq.n	8009c90 <_strtod_l+0x510>
 8009cd6:	2c1f      	cmp	r4, #31
 8009cd8:	dd20      	ble.n	8009d1c <_strtod_l+0x59c>
 8009cda:	2400      	movs	r4, #0
 8009cdc:	46a0      	mov	r8, r4
 8009cde:	46a1      	mov	r9, r4
 8009ce0:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ce2:	2322      	movs	r3, #34	@ 0x22
 8009ce4:	9a05      	ldr	r2, [sp, #20]
 8009ce6:	f04f 0a00 	mov.w	sl, #0
 8009cea:	f04f 0b00 	mov.w	fp, #0
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	e768      	b.n	8009bc4 <_strtod_l+0x444>
 8009cf2:	bf00      	nop
 8009cf4:	0800e554 	.word	0x0800e554
 8009cf8:	0800e7fc 	.word	0x0800e7fc
 8009cfc:	0800e54c 	.word	0x0800e54c
 8009d00:	0800e630 	.word	0x0800e630
 8009d04:	7ff00000 	.word	0x7ff00000
 8009d08:	0800b614 	.word	0x0800b614
 8009d0c:	0800e730 	.word	0x0800e730
 8009d10:	0800e708 	.word	0x0800e708
 8009d14:	7ca00000 	.word	0x7ca00000
 8009d18:	7fefffff 	.word	0x7fefffff
 8009d1c:	f014 0310 	ands.w	r3, r4, #16
 8009d20:	bf18      	it	ne
 8009d22:	236a      	movne	r3, #106	@ 0x6a
 8009d24:	4650      	mov	r0, sl
 8009d26:	9308      	str	r3, [sp, #32]
 8009d28:	4659      	mov	r1, fp
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	4ea9      	ldr	r6, [pc, #676]	@ (8009fd4 <_strtod_l+0x854>)
 8009d2e:	07e2      	lsls	r2, r4, #31
 8009d30:	d504      	bpl.n	8009d3c <_strtod_l+0x5bc>
 8009d32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d36:	f7f6 fc83 	bl	8000640 <__aeabi_dmul>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	1064      	asrs	r4, r4, #1
 8009d3e:	f106 0608 	add.w	r6, r6, #8
 8009d42:	d1f4      	bne.n	8009d2e <_strtod_l+0x5ae>
 8009d44:	b10b      	cbz	r3, 8009d4a <_strtod_l+0x5ca>
 8009d46:	4682      	mov	sl, r0
 8009d48:	468b      	mov	fp, r1
 8009d4a:	9b08      	ldr	r3, [sp, #32]
 8009d4c:	b1b3      	cbz	r3, 8009d7c <_strtod_l+0x5fc>
 8009d4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	4659      	mov	r1, fp
 8009d5a:	dd0f      	ble.n	8009d7c <_strtod_l+0x5fc>
 8009d5c:	2b1f      	cmp	r3, #31
 8009d5e:	dd57      	ble.n	8009e10 <_strtod_l+0x690>
 8009d60:	2b34      	cmp	r3, #52	@ 0x34
 8009d62:	bfd8      	it	le
 8009d64:	f04f 33ff 	movle.w	r3, #4294967295
 8009d68:	f04f 0a00 	mov.w	sl, #0
 8009d6c:	bfcf      	iteee	gt
 8009d6e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009d72:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009d76:	4093      	lslle	r3, r2
 8009d78:	ea03 0b01 	andle.w	fp, r3, r1
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	4650      	mov	r0, sl
 8009d82:	4659      	mov	r1, fp
 8009d84:	f7f6 fec4 	bl	8000b10 <__aeabi_dcmpeq>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d1a6      	bne.n	8009cda <_strtod_l+0x55a>
 8009d8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d8e:	463a      	mov	r2, r7
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009d94:	462b      	mov	r3, r5
 8009d96:	9805      	ldr	r0, [sp, #20]
 8009d98:	f7ff f8d0 	bl	8008f3c <__s2b>
 8009d9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f43f af05 	beq.w	8009bae <_strtod_l+0x42e>
 8009da4:	2400      	movs	r4, #0
 8009da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009da8:	eba9 0308 	sub.w	r3, r9, r8
 8009dac:	2a00      	cmp	r2, #0
 8009dae:	bfa8      	it	ge
 8009db0:	2300      	movge	r3, #0
 8009db2:	46a0      	mov	r8, r4
 8009db4:	9312      	str	r3, [sp, #72]	@ 0x48
 8009db6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009dba:	9316      	str	r3, [sp, #88]	@ 0x58
 8009dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dbe:	9805      	ldr	r0, [sp, #20]
 8009dc0:	6859      	ldr	r1, [r3, #4]
 8009dc2:	f7ff f813 	bl	8008dec <_Balloc>
 8009dc6:	4681      	mov	r9, r0
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	f43f aef4 	beq.w	8009bb6 <_strtod_l+0x436>
 8009dce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dd0:	300c      	adds	r0, #12
 8009dd2:	691a      	ldr	r2, [r3, #16]
 8009dd4:	f103 010c 	add.w	r1, r3, #12
 8009dd8:	3202      	adds	r2, #2
 8009dda:	0092      	lsls	r2, r2, #2
 8009ddc:	f000 fce2 	bl	800a7a4 <memcpy>
 8009de0:	ab1c      	add	r3, sp, #112	@ 0x70
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	4652      	mov	r2, sl
 8009dea:	465b      	mov	r3, fp
 8009dec:	9805      	ldr	r0, [sp, #20]
 8009dee:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009df2:	f7ff fbd5 	bl	80095a0 <__d2b>
 8009df6:	901a      	str	r0, [sp, #104]	@ 0x68
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	f43f aedc 	beq.w	8009bb6 <_strtod_l+0x436>
 8009dfe:	2101      	movs	r1, #1
 8009e00:	9805      	ldr	r0, [sp, #20]
 8009e02:	f7ff f931 	bl	8009068 <__i2b>
 8009e06:	4680      	mov	r8, r0
 8009e08:	b948      	cbnz	r0, 8009e1e <_strtod_l+0x69e>
 8009e0a:	f04f 0800 	mov.w	r8, #0
 8009e0e:	e6d2      	b.n	8009bb6 <_strtod_l+0x436>
 8009e10:	f04f 32ff 	mov.w	r2, #4294967295
 8009e14:	fa02 f303 	lsl.w	r3, r2, r3
 8009e18:	ea03 0a0a 	and.w	sl, r3, sl
 8009e1c:	e7ae      	b.n	8009d7c <_strtod_l+0x5fc>
 8009e1e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009e20:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009e22:	2d00      	cmp	r5, #0
 8009e24:	bfab      	itete	ge
 8009e26:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009e28:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009e2a:	18ef      	addge	r7, r5, r3
 8009e2c:	1b5e      	sublt	r6, r3, r5
 8009e2e:	9b08      	ldr	r3, [sp, #32]
 8009e30:	bfa8      	it	ge
 8009e32:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009e34:	eba5 0503 	sub.w	r5, r5, r3
 8009e38:	4415      	add	r5, r2
 8009e3a:	4b67      	ldr	r3, [pc, #412]	@ (8009fd8 <_strtod_l+0x858>)
 8009e3c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009e40:	bfb8      	it	lt
 8009e42:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009e44:	429d      	cmp	r5, r3
 8009e46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009e4a:	da50      	bge.n	8009eee <_strtod_l+0x76e>
 8009e4c:	1b5b      	subs	r3, r3, r5
 8009e4e:	2b1f      	cmp	r3, #31
 8009e50:	f04f 0101 	mov.w	r1, #1
 8009e54:	eba2 0203 	sub.w	r2, r2, r3
 8009e58:	dc3d      	bgt.n	8009ed6 <_strtod_l+0x756>
 8009e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e60:	2300      	movs	r3, #0
 8009e62:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e64:	18bd      	adds	r5, r7, r2
 8009e66:	9b08      	ldr	r3, [sp, #32]
 8009e68:	42af      	cmp	r7, r5
 8009e6a:	4416      	add	r6, r2
 8009e6c:	441e      	add	r6, r3
 8009e6e:	463b      	mov	r3, r7
 8009e70:	bfa8      	it	ge
 8009e72:	462b      	movge	r3, r5
 8009e74:	42b3      	cmp	r3, r6
 8009e76:	bfa8      	it	ge
 8009e78:	4633      	movge	r3, r6
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	bfc2      	ittt	gt
 8009e7e:	1aed      	subgt	r5, r5, r3
 8009e80:	1af6      	subgt	r6, r6, r3
 8009e82:	1aff      	subgt	r7, r7, r3
 8009e84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dd16      	ble.n	8009eb8 <_strtod_l+0x738>
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	9805      	ldr	r0, [sp, #20]
 8009e90:	f7ff f9a8 	bl	80091e4 <__pow5mult>
 8009e94:	4680      	mov	r8, r0
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d0b7      	beq.n	8009e0a <_strtod_l+0x68a>
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e9e:	9805      	ldr	r0, [sp, #20]
 8009ea0:	f7ff f8f8 	bl	8009094 <__multiply>
 8009ea4:	900e      	str	r0, [sp, #56]	@ 0x38
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f43f ae85 	beq.w	8009bb6 <_strtod_l+0x436>
 8009eac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009eae:	9805      	ldr	r0, [sp, #20]
 8009eb0:	f7fe ffdc 	bl	8008e6c <_Bfree>
 8009eb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	dc1d      	bgt.n	8009ef8 <_strtod_l+0x778>
 8009ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dd23      	ble.n	8009f0a <_strtod_l+0x78a>
 8009ec2:	4649      	mov	r1, r9
 8009ec4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009ec6:	9805      	ldr	r0, [sp, #20]
 8009ec8:	f7ff f98c 	bl	80091e4 <__pow5mult>
 8009ecc:	4681      	mov	r9, r0
 8009ece:	b9e0      	cbnz	r0, 8009f0a <_strtod_l+0x78a>
 8009ed0:	f04f 0900 	mov.w	r9, #0
 8009ed4:	e66f      	b.n	8009bb6 <_strtod_l+0x436>
 8009ed6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009eda:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009ede:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009ee2:	35e2      	adds	r5, #226	@ 0xe2
 8009ee4:	fa01 f305 	lsl.w	r3, r1, r5
 8009ee8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009eea:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009eec:	e7ba      	b.n	8009e64 <_strtod_l+0x6e4>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ef6:	e7b5      	b.n	8009e64 <_strtod_l+0x6e4>
 8009ef8:	462a      	mov	r2, r5
 8009efa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009efc:	9805      	ldr	r0, [sp, #20]
 8009efe:	f7ff f9cb 	bl	8009298 <__lshift>
 8009f02:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d1d9      	bne.n	8009ebc <_strtod_l+0x73c>
 8009f08:	e655      	b.n	8009bb6 <_strtod_l+0x436>
 8009f0a:	2e00      	cmp	r6, #0
 8009f0c:	dd07      	ble.n	8009f1e <_strtod_l+0x79e>
 8009f0e:	4649      	mov	r1, r9
 8009f10:	4632      	mov	r2, r6
 8009f12:	9805      	ldr	r0, [sp, #20]
 8009f14:	f7ff f9c0 	bl	8009298 <__lshift>
 8009f18:	4681      	mov	r9, r0
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d0d8      	beq.n	8009ed0 <_strtod_l+0x750>
 8009f1e:	2f00      	cmp	r7, #0
 8009f20:	dd08      	ble.n	8009f34 <_strtod_l+0x7b4>
 8009f22:	4641      	mov	r1, r8
 8009f24:	463a      	mov	r2, r7
 8009f26:	9805      	ldr	r0, [sp, #20]
 8009f28:	f7ff f9b6 	bl	8009298 <__lshift>
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f43f ae41 	beq.w	8009bb6 <_strtod_l+0x436>
 8009f34:	464a      	mov	r2, r9
 8009f36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f38:	9805      	ldr	r0, [sp, #20]
 8009f3a:	f7ff fa35 	bl	80093a8 <__mdiff>
 8009f3e:	4604      	mov	r4, r0
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f43f ae38 	beq.w	8009bb6 <_strtod_l+0x436>
 8009f46:	68c3      	ldr	r3, [r0, #12]
 8009f48:	4641      	mov	r1, r8
 8009f4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60c3      	str	r3, [r0, #12]
 8009f50:	f7ff fa0e 	bl	8009370 <__mcmp>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	da45      	bge.n	8009fe4 <_strtod_l+0x864>
 8009f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f5a:	ea53 030a 	orrs.w	r3, r3, sl
 8009f5e:	d16b      	bne.n	800a038 <_strtod_l+0x8b8>
 8009f60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d167      	bne.n	800a038 <_strtod_l+0x8b8>
 8009f68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f6c:	0d1b      	lsrs	r3, r3, #20
 8009f6e:	051b      	lsls	r3, r3, #20
 8009f70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f74:	d960      	bls.n	800a038 <_strtod_l+0x8b8>
 8009f76:	6963      	ldr	r3, [r4, #20]
 8009f78:	b913      	cbnz	r3, 8009f80 <_strtod_l+0x800>
 8009f7a:	6923      	ldr	r3, [r4, #16]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	dd5b      	ble.n	800a038 <_strtod_l+0x8b8>
 8009f80:	4621      	mov	r1, r4
 8009f82:	2201      	movs	r2, #1
 8009f84:	9805      	ldr	r0, [sp, #20]
 8009f86:	f7ff f987 	bl	8009298 <__lshift>
 8009f8a:	4641      	mov	r1, r8
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	f7ff f9ef 	bl	8009370 <__mcmp>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	dd50      	ble.n	800a038 <_strtod_l+0x8b8>
 8009f96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f9a:	9a08      	ldr	r2, [sp, #32]
 8009f9c:	0d1b      	lsrs	r3, r3, #20
 8009f9e:	051b      	lsls	r3, r3, #20
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	d06a      	beq.n	800a07a <_strtod_l+0x8fa>
 8009fa4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009fa8:	d867      	bhi.n	800a07a <_strtod_l+0x8fa>
 8009faa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009fae:	f67f ae98 	bls.w	8009ce2 <_strtod_l+0x562>
 8009fb2:	4650      	mov	r0, sl
 8009fb4:	4659      	mov	r1, fp
 8009fb6:	4b09      	ldr	r3, [pc, #36]	@ (8009fdc <_strtod_l+0x85c>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f7f6 fb41 	bl	8000640 <__aeabi_dmul>
 8009fbe:	4b08      	ldr	r3, [pc, #32]	@ (8009fe0 <_strtod_l+0x860>)
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	400b      	ands	r3, r1
 8009fc4:	468b      	mov	fp, r1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f47f ae00 	bne.w	8009bcc <_strtod_l+0x44c>
 8009fcc:	2322      	movs	r3, #34	@ 0x22
 8009fce:	9a05      	ldr	r2, [sp, #20]
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	e5fb      	b.n	8009bcc <_strtod_l+0x44c>
 8009fd4:	0800e828 	.word	0x0800e828
 8009fd8:	fffffc02 	.word	0xfffffc02
 8009fdc:	39500000 	.word	0x39500000
 8009fe0:	7ff00000 	.word	0x7ff00000
 8009fe4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009fe8:	d165      	bne.n	800a0b6 <_strtod_l+0x936>
 8009fea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009fec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ff0:	b35a      	cbz	r2, 800a04a <_strtod_l+0x8ca>
 8009ff2:	4a99      	ldr	r2, [pc, #612]	@ (800a258 <_strtod_l+0xad8>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d12b      	bne.n	800a050 <_strtod_l+0x8d0>
 8009ff8:	9b08      	ldr	r3, [sp, #32]
 8009ffa:	4651      	mov	r1, sl
 8009ffc:	b303      	cbz	r3, 800a040 <_strtod_l+0x8c0>
 8009ffe:	465a      	mov	r2, fp
 800a000:	4b96      	ldr	r3, [pc, #600]	@ (800a25c <_strtod_l+0xadc>)
 800a002:	4013      	ands	r3, r2
 800a004:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a008:	f04f 32ff 	mov.w	r2, #4294967295
 800a00c:	d81b      	bhi.n	800a046 <_strtod_l+0x8c6>
 800a00e:	0d1b      	lsrs	r3, r3, #20
 800a010:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a014:	fa02 f303 	lsl.w	r3, r2, r3
 800a018:	4299      	cmp	r1, r3
 800a01a:	d119      	bne.n	800a050 <_strtod_l+0x8d0>
 800a01c:	4b90      	ldr	r3, [pc, #576]	@ (800a260 <_strtod_l+0xae0>)
 800a01e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a020:	429a      	cmp	r2, r3
 800a022:	d102      	bne.n	800a02a <_strtod_l+0x8aa>
 800a024:	3101      	adds	r1, #1
 800a026:	f43f adc6 	beq.w	8009bb6 <_strtod_l+0x436>
 800a02a:	f04f 0a00 	mov.w	sl, #0
 800a02e:	4b8b      	ldr	r3, [pc, #556]	@ (800a25c <_strtod_l+0xadc>)
 800a030:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a032:	401a      	ands	r2, r3
 800a034:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a038:	9b08      	ldr	r3, [sp, #32]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1b9      	bne.n	8009fb2 <_strtod_l+0x832>
 800a03e:	e5c5      	b.n	8009bcc <_strtod_l+0x44c>
 800a040:	f04f 33ff 	mov.w	r3, #4294967295
 800a044:	e7e8      	b.n	800a018 <_strtod_l+0x898>
 800a046:	4613      	mov	r3, r2
 800a048:	e7e6      	b.n	800a018 <_strtod_l+0x898>
 800a04a:	ea53 030a 	orrs.w	r3, r3, sl
 800a04e:	d0a2      	beq.n	8009f96 <_strtod_l+0x816>
 800a050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a052:	b1db      	cbz	r3, 800a08c <_strtod_l+0x90c>
 800a054:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a056:	4213      	tst	r3, r2
 800a058:	d0ee      	beq.n	800a038 <_strtod_l+0x8b8>
 800a05a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a05c:	4650      	mov	r0, sl
 800a05e:	4659      	mov	r1, fp
 800a060:	9a08      	ldr	r2, [sp, #32]
 800a062:	b1bb      	cbz	r3, 800a094 <_strtod_l+0x914>
 800a064:	f7ff fb68 	bl	8009738 <sulp>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a070:	f7f6 f930 	bl	80002d4 <__adddf3>
 800a074:	4682      	mov	sl, r0
 800a076:	468b      	mov	fp, r1
 800a078:	e7de      	b.n	800a038 <_strtod_l+0x8b8>
 800a07a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a07e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a082:	f04f 3aff 	mov.w	sl, #4294967295
 800a086:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a08a:	e7d5      	b.n	800a038 <_strtod_l+0x8b8>
 800a08c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a08e:	ea13 0f0a 	tst.w	r3, sl
 800a092:	e7e1      	b.n	800a058 <_strtod_l+0x8d8>
 800a094:	f7ff fb50 	bl	8009738 <sulp>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0a0:	f7f6 f916 	bl	80002d0 <__aeabi_dsub>
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	468b      	mov	fp, r1
 800a0ac:	f7f6 fd30 	bl	8000b10 <__aeabi_dcmpeq>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d0c1      	beq.n	800a038 <_strtod_l+0x8b8>
 800a0b4:	e615      	b.n	8009ce2 <_strtod_l+0x562>
 800a0b6:	4641      	mov	r1, r8
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f7ff fac9 	bl	8009650 <__ratio>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	460f      	mov	r7, r1
 800a0c8:	f7f6 fd36 	bl	8000b38 <__aeabi_dcmple>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d06d      	beq.n	800a1ac <_strtod_l+0xa2c>
 800a0d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d178      	bne.n	800a1c8 <_strtod_l+0xa48>
 800a0d6:	f1ba 0f00 	cmp.w	sl, #0
 800a0da:	d156      	bne.n	800a18a <_strtod_l+0xa0a>
 800a0dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d158      	bne.n	800a198 <_strtod_l+0xa18>
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	4b5d      	ldr	r3, [pc, #372]	@ (800a264 <_strtod_l+0xae4>)
 800a0ee:	f7f6 fd19 	bl	8000b24 <__aeabi_dcmplt>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d157      	bne.n	800a1a6 <_strtod_l+0xa26>
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	4b5a      	ldr	r3, [pc, #360]	@ (800a268 <_strtod_l+0xae8>)
 800a0fe:	f7f6 fa9f 	bl	8000640 <__aeabi_dmul>
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a10a:	9606      	str	r6, [sp, #24]
 800a10c:	9307      	str	r3, [sp, #28]
 800a10e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a112:	4d52      	ldr	r5, [pc, #328]	@ (800a25c <_strtod_l+0xadc>)
 800a114:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a118:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11a:	401d      	ands	r5, r3
 800a11c:	4b53      	ldr	r3, [pc, #332]	@ (800a26c <_strtod_l+0xaec>)
 800a11e:	429d      	cmp	r5, r3
 800a120:	f040 80aa 	bne.w	800a278 <_strtod_l+0xaf8>
 800a124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a126:	4650      	mov	r0, sl
 800a128:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a12c:	4659      	mov	r1, fp
 800a12e:	f7ff f9cf 	bl	80094d0 <__ulp>
 800a132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a136:	f7f6 fa83 	bl	8000640 <__aeabi_dmul>
 800a13a:	4652      	mov	r2, sl
 800a13c:	465b      	mov	r3, fp
 800a13e:	f7f6 f8c9 	bl	80002d4 <__adddf3>
 800a142:	460b      	mov	r3, r1
 800a144:	4945      	ldr	r1, [pc, #276]	@ (800a25c <_strtod_l+0xadc>)
 800a146:	4a4a      	ldr	r2, [pc, #296]	@ (800a270 <_strtod_l+0xaf0>)
 800a148:	4019      	ands	r1, r3
 800a14a:	4291      	cmp	r1, r2
 800a14c:	4682      	mov	sl, r0
 800a14e:	d942      	bls.n	800a1d6 <_strtod_l+0xa56>
 800a150:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a152:	4b43      	ldr	r3, [pc, #268]	@ (800a260 <_strtod_l+0xae0>)
 800a154:	429a      	cmp	r2, r3
 800a156:	d103      	bne.n	800a160 <_strtod_l+0x9e0>
 800a158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a15a:	3301      	adds	r3, #1
 800a15c:	f43f ad2b 	beq.w	8009bb6 <_strtod_l+0x436>
 800a160:	f04f 3aff 	mov.w	sl, #4294967295
 800a164:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a260 <_strtod_l+0xae0>
 800a168:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a16a:	9805      	ldr	r0, [sp, #20]
 800a16c:	f7fe fe7e 	bl	8008e6c <_Bfree>
 800a170:	4649      	mov	r1, r9
 800a172:	9805      	ldr	r0, [sp, #20]
 800a174:	f7fe fe7a 	bl	8008e6c <_Bfree>
 800a178:	4641      	mov	r1, r8
 800a17a:	9805      	ldr	r0, [sp, #20]
 800a17c:	f7fe fe76 	bl	8008e6c <_Bfree>
 800a180:	4621      	mov	r1, r4
 800a182:	9805      	ldr	r0, [sp, #20]
 800a184:	f7fe fe72 	bl	8008e6c <_Bfree>
 800a188:	e618      	b.n	8009dbc <_strtod_l+0x63c>
 800a18a:	f1ba 0f01 	cmp.w	sl, #1
 800a18e:	d103      	bne.n	800a198 <_strtod_l+0xa18>
 800a190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a192:	2b00      	cmp	r3, #0
 800a194:	f43f ada5 	beq.w	8009ce2 <_strtod_l+0x562>
 800a198:	2200      	movs	r2, #0
 800a19a:	4b36      	ldr	r3, [pc, #216]	@ (800a274 <_strtod_l+0xaf4>)
 800a19c:	2600      	movs	r6, #0
 800a19e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1a2:	4f30      	ldr	r7, [pc, #192]	@ (800a264 <_strtod_l+0xae4>)
 800a1a4:	e7b3      	b.n	800a10e <_strtod_l+0x98e>
 800a1a6:	2600      	movs	r6, #0
 800a1a8:	4f2f      	ldr	r7, [pc, #188]	@ (800a268 <_strtod_l+0xae8>)
 800a1aa:	e7ac      	b.n	800a106 <_strtod_l+0x986>
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	4b2d      	ldr	r3, [pc, #180]	@ (800a268 <_strtod_l+0xae8>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f7f6 fa44 	bl	8000640 <__aeabi_dmul>
 800a1b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	460f      	mov	r7, r1
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0a1      	beq.n	800a106 <_strtod_l+0x986>
 800a1c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a1c6:	e7a2      	b.n	800a10e <_strtod_l+0x98e>
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	4b26      	ldr	r3, [pc, #152]	@ (800a264 <_strtod_l+0xae4>)
 800a1cc:	4616      	mov	r6, r2
 800a1ce:	461f      	mov	r7, r3
 800a1d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1d4:	e79b      	b.n	800a10e <_strtod_l+0x98e>
 800a1d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a1da:	9b08      	ldr	r3, [sp, #32]
 800a1dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1c1      	bne.n	800a168 <_strtod_l+0x9e8>
 800a1e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1e8:	0d1b      	lsrs	r3, r3, #20
 800a1ea:	051b      	lsls	r3, r3, #20
 800a1ec:	429d      	cmp	r5, r3
 800a1ee:	d1bb      	bne.n	800a168 <_strtod_l+0x9e8>
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	f7f6 fe9a 	bl	8000f2c <__aeabi_d2lz>
 800a1f8:	f7f6 f9f4 	bl	80005e4 <__aeabi_l2d>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4630      	mov	r0, r6
 800a202:	4639      	mov	r1, r7
 800a204:	f7f6 f864 	bl	80002d0 <__aeabi_dsub>
 800a208:	460b      	mov	r3, r1
 800a20a:	4602      	mov	r2, r0
 800a20c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a210:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a216:	ea46 060a 	orr.w	r6, r6, sl
 800a21a:	431e      	orrs	r6, r3
 800a21c:	d069      	beq.n	800a2f2 <_strtod_l+0xb72>
 800a21e:	a30a      	add	r3, pc, #40	@ (adr r3, 800a248 <_strtod_l+0xac8>)
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f6 fc7e 	bl	8000b24 <__aeabi_dcmplt>
 800a228:	2800      	cmp	r0, #0
 800a22a:	f47f accf 	bne.w	8009bcc <_strtod_l+0x44c>
 800a22e:	a308      	add	r3, pc, #32	@ (adr r3, 800a250 <_strtod_l+0xad0>)
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a238:	f7f6 fc92 	bl	8000b60 <__aeabi_dcmpgt>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d093      	beq.n	800a168 <_strtod_l+0x9e8>
 800a240:	e4c4      	b.n	8009bcc <_strtod_l+0x44c>
 800a242:	bf00      	nop
 800a244:	f3af 8000 	nop.w
 800a248:	94a03595 	.word	0x94a03595
 800a24c:	3fdfffff 	.word	0x3fdfffff
 800a250:	35afe535 	.word	0x35afe535
 800a254:	3fe00000 	.word	0x3fe00000
 800a258:	000fffff 	.word	0x000fffff
 800a25c:	7ff00000 	.word	0x7ff00000
 800a260:	7fefffff 	.word	0x7fefffff
 800a264:	3ff00000 	.word	0x3ff00000
 800a268:	3fe00000 	.word	0x3fe00000
 800a26c:	7fe00000 	.word	0x7fe00000
 800a270:	7c9fffff 	.word	0x7c9fffff
 800a274:	bff00000 	.word	0xbff00000
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	b323      	cbz	r3, 800a2c6 <_strtod_l+0xb46>
 800a27c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a280:	d821      	bhi.n	800a2c6 <_strtod_l+0xb46>
 800a282:	a327      	add	r3, pc, #156	@ (adr r3, 800a320 <_strtod_l+0xba0>)
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	4630      	mov	r0, r6
 800a28a:	4639      	mov	r1, r7
 800a28c:	f7f6 fc54 	bl	8000b38 <__aeabi_dcmple>
 800a290:	b1a0      	cbz	r0, 800a2bc <_strtod_l+0xb3c>
 800a292:	4639      	mov	r1, r7
 800a294:	4630      	mov	r0, r6
 800a296:	f7f6 fcab 	bl	8000bf0 <__aeabi_d2uiz>
 800a29a:	2801      	cmp	r0, #1
 800a29c:	bf38      	it	cc
 800a29e:	2001      	movcc	r0, #1
 800a2a0:	f7f6 f954 	bl	800054c <__aeabi_ui2d>
 800a2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	460f      	mov	r7, r1
 800a2aa:	b9fb      	cbnz	r3, 800a2ec <_strtod_l+0xb6c>
 800a2ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a2b0:	9014      	str	r0, [sp, #80]	@ 0x50
 800a2b2:	9315      	str	r3, [sp, #84]	@ 0x54
 800a2b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a2b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a2bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a2be:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a2c2:	1b5b      	subs	r3, r3, r5
 800a2c4:	9311      	str	r3, [sp, #68]	@ 0x44
 800a2c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2ca:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a2ce:	f7ff f8ff 	bl	80094d0 <__ulp>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	4650      	mov	r0, sl
 800a2d8:	4659      	mov	r1, fp
 800a2da:	f7f6 f9b1 	bl	8000640 <__aeabi_dmul>
 800a2de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a2e2:	f7f5 fff7 	bl	80002d4 <__adddf3>
 800a2e6:	4682      	mov	sl, r0
 800a2e8:	468b      	mov	fp, r1
 800a2ea:	e776      	b.n	800a1da <_strtod_l+0xa5a>
 800a2ec:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a2f0:	e7e0      	b.n	800a2b4 <_strtod_l+0xb34>
 800a2f2:	a30d      	add	r3, pc, #52	@ (adr r3, 800a328 <_strtod_l+0xba8>)
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f7f6 fc14 	bl	8000b24 <__aeabi_dcmplt>
 800a2fc:	e79e      	b.n	800a23c <_strtod_l+0xabc>
 800a2fe:	2300      	movs	r3, #0
 800a300:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a302:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a304:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	f7ff ba77 	b.w	80097fa <_strtod_l+0x7a>
 800a30c:	2a65      	cmp	r2, #101	@ 0x65
 800a30e:	f43f ab6e 	beq.w	80099ee <_strtod_l+0x26e>
 800a312:	2a45      	cmp	r2, #69	@ 0x45
 800a314:	f43f ab6b 	beq.w	80099ee <_strtod_l+0x26e>
 800a318:	2301      	movs	r3, #1
 800a31a:	f7ff bba6 	b.w	8009a6a <_strtod_l+0x2ea>
 800a31e:	bf00      	nop
 800a320:	ffc00000 	.word	0xffc00000
 800a324:	41dfffff 	.word	0x41dfffff
 800a328:	94a03595 	.word	0x94a03595
 800a32c:	3fcfffff 	.word	0x3fcfffff

0800a330 <_strtod_r>:
 800a330:	4b01      	ldr	r3, [pc, #4]	@ (800a338 <_strtod_r+0x8>)
 800a332:	f7ff ba25 	b.w	8009780 <_strtod_l>
 800a336:	bf00      	nop
 800a338:	2000008c 	.word	0x2000008c

0800a33c <__ssputs_r>:
 800a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	461f      	mov	r7, r3
 800a342:	688e      	ldr	r6, [r1, #8]
 800a344:	4682      	mov	sl, r0
 800a346:	42be      	cmp	r6, r7
 800a348:	460c      	mov	r4, r1
 800a34a:	4690      	mov	r8, r2
 800a34c:	680b      	ldr	r3, [r1, #0]
 800a34e:	d82d      	bhi.n	800a3ac <__ssputs_r+0x70>
 800a350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a354:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a358:	d026      	beq.n	800a3a8 <__ssputs_r+0x6c>
 800a35a:	6965      	ldr	r5, [r4, #20]
 800a35c:	6909      	ldr	r1, [r1, #16]
 800a35e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a362:	eba3 0901 	sub.w	r9, r3, r1
 800a366:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a36a:	1c7b      	adds	r3, r7, #1
 800a36c:	444b      	add	r3, r9
 800a36e:	106d      	asrs	r5, r5, #1
 800a370:	429d      	cmp	r5, r3
 800a372:	bf38      	it	cc
 800a374:	461d      	movcc	r5, r3
 800a376:	0553      	lsls	r3, r2, #21
 800a378:	d527      	bpl.n	800a3ca <__ssputs_r+0x8e>
 800a37a:	4629      	mov	r1, r5
 800a37c:	f7fe fcaa 	bl	8008cd4 <_malloc_r>
 800a380:	4606      	mov	r6, r0
 800a382:	b360      	cbz	r0, 800a3de <__ssputs_r+0xa2>
 800a384:	464a      	mov	r2, r9
 800a386:	6921      	ldr	r1, [r4, #16]
 800a388:	f000 fa0c 	bl	800a7a4 <memcpy>
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	6126      	str	r6, [r4, #16]
 800a39a:	444e      	add	r6, r9
 800a39c:	6026      	str	r6, [r4, #0]
 800a39e:	463e      	mov	r6, r7
 800a3a0:	6165      	str	r5, [r4, #20]
 800a3a2:	eba5 0509 	sub.w	r5, r5, r9
 800a3a6:	60a5      	str	r5, [r4, #8]
 800a3a8:	42be      	cmp	r6, r7
 800a3aa:	d900      	bls.n	800a3ae <__ssputs_r+0x72>
 800a3ac:	463e      	mov	r6, r7
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	4641      	mov	r1, r8
 800a3b2:	6820      	ldr	r0, [r4, #0]
 800a3b4:	f7fd fc9d 	bl	8007cf2 <memmove>
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	1b9b      	subs	r3, r3, r6
 800a3be:	60a3      	str	r3, [r4, #8]
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	4433      	add	r3, r6
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	f000 fd65 	bl	800ae9a <_realloc_r>
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d1e0      	bne.n	800a398 <__ssputs_r+0x5c>
 800a3d6:	4650      	mov	r0, sl
 800a3d8:	6921      	ldr	r1, [r4, #16]
 800a3da:	f7fe fc09 	bl	8008bf0 <_free_r>
 800a3de:	230c      	movs	r3, #12
 800a3e0:	f8ca 3000 	str.w	r3, [sl]
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	e7e9      	b.n	800a3c6 <__ssputs_r+0x8a>
	...

0800a3f4 <_svfiprintf_r>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	4698      	mov	r8, r3
 800a3fa:	898b      	ldrh	r3, [r1, #12]
 800a3fc:	4607      	mov	r7, r0
 800a3fe:	061b      	lsls	r3, r3, #24
 800a400:	460d      	mov	r5, r1
 800a402:	4614      	mov	r4, r2
 800a404:	b09d      	sub	sp, #116	@ 0x74
 800a406:	d510      	bpl.n	800a42a <_svfiprintf_r+0x36>
 800a408:	690b      	ldr	r3, [r1, #16]
 800a40a:	b973      	cbnz	r3, 800a42a <_svfiprintf_r+0x36>
 800a40c:	2140      	movs	r1, #64	@ 0x40
 800a40e:	f7fe fc61 	bl	8008cd4 <_malloc_r>
 800a412:	6028      	str	r0, [r5, #0]
 800a414:	6128      	str	r0, [r5, #16]
 800a416:	b930      	cbnz	r0, 800a426 <_svfiprintf_r+0x32>
 800a418:	230c      	movs	r3, #12
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295
 800a420:	b01d      	add	sp, #116	@ 0x74
 800a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a426:	2340      	movs	r3, #64	@ 0x40
 800a428:	616b      	str	r3, [r5, #20]
 800a42a:	2300      	movs	r3, #0
 800a42c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a42e:	2320      	movs	r3, #32
 800a430:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a434:	2330      	movs	r3, #48	@ 0x30
 800a436:	f04f 0901 	mov.w	r9, #1
 800a43a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a43e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a5d8 <_svfiprintf_r+0x1e4>
 800a442:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a446:	4623      	mov	r3, r4
 800a448:	469a      	mov	sl, r3
 800a44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a44e:	b10a      	cbz	r2, 800a454 <_svfiprintf_r+0x60>
 800a450:	2a25      	cmp	r2, #37	@ 0x25
 800a452:	d1f9      	bne.n	800a448 <_svfiprintf_r+0x54>
 800a454:	ebba 0b04 	subs.w	fp, sl, r4
 800a458:	d00b      	beq.n	800a472 <_svfiprintf_r+0x7e>
 800a45a:	465b      	mov	r3, fp
 800a45c:	4622      	mov	r2, r4
 800a45e:	4629      	mov	r1, r5
 800a460:	4638      	mov	r0, r7
 800a462:	f7ff ff6b 	bl	800a33c <__ssputs_r>
 800a466:	3001      	adds	r0, #1
 800a468:	f000 80a7 	beq.w	800a5ba <_svfiprintf_r+0x1c6>
 800a46c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a46e:	445a      	add	r2, fp
 800a470:	9209      	str	r2, [sp, #36]	@ 0x24
 800a472:	f89a 3000 	ldrb.w	r3, [sl]
 800a476:	2b00      	cmp	r3, #0
 800a478:	f000 809f 	beq.w	800a5ba <_svfiprintf_r+0x1c6>
 800a47c:	2300      	movs	r3, #0
 800a47e:	f04f 32ff 	mov.w	r2, #4294967295
 800a482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a486:	f10a 0a01 	add.w	sl, sl, #1
 800a48a:	9304      	str	r3, [sp, #16]
 800a48c:	9307      	str	r3, [sp, #28]
 800a48e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a492:	931a      	str	r3, [sp, #104]	@ 0x68
 800a494:	4654      	mov	r4, sl
 800a496:	2205      	movs	r2, #5
 800a498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a49c:	484e      	ldr	r0, [pc, #312]	@ (800a5d8 <_svfiprintf_r+0x1e4>)
 800a49e:	f7fd fd26 	bl	8007eee <memchr>
 800a4a2:	9a04      	ldr	r2, [sp, #16]
 800a4a4:	b9d8      	cbnz	r0, 800a4de <_svfiprintf_r+0xea>
 800a4a6:	06d0      	lsls	r0, r2, #27
 800a4a8:	bf44      	itt	mi
 800a4aa:	2320      	movmi	r3, #32
 800a4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4b0:	0711      	lsls	r1, r2, #28
 800a4b2:	bf44      	itt	mi
 800a4b4:	232b      	movmi	r3, #43	@ 0x2b
 800a4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a4be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4c0:	d015      	beq.n	800a4ee <_svfiprintf_r+0xfa>
 800a4c2:	4654      	mov	r4, sl
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	f04f 0c0a 	mov.w	ip, #10
 800a4ca:	9a07      	ldr	r2, [sp, #28]
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d2:	3b30      	subs	r3, #48	@ 0x30
 800a4d4:	2b09      	cmp	r3, #9
 800a4d6:	d94b      	bls.n	800a570 <_svfiprintf_r+0x17c>
 800a4d8:	b1b0      	cbz	r0, 800a508 <_svfiprintf_r+0x114>
 800a4da:	9207      	str	r2, [sp, #28]
 800a4dc:	e014      	b.n	800a508 <_svfiprintf_r+0x114>
 800a4de:	eba0 0308 	sub.w	r3, r0, r8
 800a4e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	46a2      	mov	sl, r4
 800a4ea:	9304      	str	r3, [sp, #16]
 800a4ec:	e7d2      	b.n	800a494 <_svfiprintf_r+0xa0>
 800a4ee:	9b03      	ldr	r3, [sp, #12]
 800a4f0:	1d19      	adds	r1, r3, #4
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	9103      	str	r1, [sp, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bfbb      	ittet	lt
 800a4fa:	425b      	neglt	r3, r3
 800a4fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a500:	9307      	strge	r3, [sp, #28]
 800a502:	9307      	strlt	r3, [sp, #28]
 800a504:	bfb8      	it	lt
 800a506:	9204      	strlt	r2, [sp, #16]
 800a508:	7823      	ldrb	r3, [r4, #0]
 800a50a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a50c:	d10a      	bne.n	800a524 <_svfiprintf_r+0x130>
 800a50e:	7863      	ldrb	r3, [r4, #1]
 800a510:	2b2a      	cmp	r3, #42	@ 0x2a
 800a512:	d132      	bne.n	800a57a <_svfiprintf_r+0x186>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	3402      	adds	r4, #2
 800a518:	1d1a      	adds	r2, r3, #4
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	9203      	str	r2, [sp, #12]
 800a51e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a522:	9305      	str	r3, [sp, #20]
 800a524:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a5dc <_svfiprintf_r+0x1e8>
 800a528:	2203      	movs	r2, #3
 800a52a:	4650      	mov	r0, sl
 800a52c:	7821      	ldrb	r1, [r4, #0]
 800a52e:	f7fd fcde 	bl	8007eee <memchr>
 800a532:	b138      	cbz	r0, 800a544 <_svfiprintf_r+0x150>
 800a534:	2240      	movs	r2, #64	@ 0x40
 800a536:	9b04      	ldr	r3, [sp, #16]
 800a538:	eba0 000a 	sub.w	r0, r0, sl
 800a53c:	4082      	lsls	r2, r0
 800a53e:	4313      	orrs	r3, r2
 800a540:	3401      	adds	r4, #1
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a548:	2206      	movs	r2, #6
 800a54a:	4825      	ldr	r0, [pc, #148]	@ (800a5e0 <_svfiprintf_r+0x1ec>)
 800a54c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a550:	f7fd fccd 	bl	8007eee <memchr>
 800a554:	2800      	cmp	r0, #0
 800a556:	d036      	beq.n	800a5c6 <_svfiprintf_r+0x1d2>
 800a558:	4b22      	ldr	r3, [pc, #136]	@ (800a5e4 <_svfiprintf_r+0x1f0>)
 800a55a:	bb1b      	cbnz	r3, 800a5a4 <_svfiprintf_r+0x1b0>
 800a55c:	9b03      	ldr	r3, [sp, #12]
 800a55e:	3307      	adds	r3, #7
 800a560:	f023 0307 	bic.w	r3, r3, #7
 800a564:	3308      	adds	r3, #8
 800a566:	9303      	str	r3, [sp, #12]
 800a568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a56a:	4433      	add	r3, r6
 800a56c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56e:	e76a      	b.n	800a446 <_svfiprintf_r+0x52>
 800a570:	460c      	mov	r4, r1
 800a572:	2001      	movs	r0, #1
 800a574:	fb0c 3202 	mla	r2, ip, r2, r3
 800a578:	e7a8      	b.n	800a4cc <_svfiprintf_r+0xd8>
 800a57a:	2300      	movs	r3, #0
 800a57c:	f04f 0c0a 	mov.w	ip, #10
 800a580:	4619      	mov	r1, r3
 800a582:	3401      	adds	r4, #1
 800a584:	9305      	str	r3, [sp, #20]
 800a586:	4620      	mov	r0, r4
 800a588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a58c:	3a30      	subs	r2, #48	@ 0x30
 800a58e:	2a09      	cmp	r2, #9
 800a590:	d903      	bls.n	800a59a <_svfiprintf_r+0x1a6>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0c6      	beq.n	800a524 <_svfiprintf_r+0x130>
 800a596:	9105      	str	r1, [sp, #20]
 800a598:	e7c4      	b.n	800a524 <_svfiprintf_r+0x130>
 800a59a:	4604      	mov	r4, r0
 800a59c:	2301      	movs	r3, #1
 800a59e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5a2:	e7f0      	b.n	800a586 <_svfiprintf_r+0x192>
 800a5a4:	ab03      	add	r3, sp, #12
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	462a      	mov	r2, r5
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e8 <_svfiprintf_r+0x1f4>)
 800a5ae:	a904      	add	r1, sp, #16
 800a5b0:	f7fc fcac 	bl	8006f0c <_printf_float>
 800a5b4:	1c42      	adds	r2, r0, #1
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	d1d6      	bne.n	800a568 <_svfiprintf_r+0x174>
 800a5ba:	89ab      	ldrh	r3, [r5, #12]
 800a5bc:	065b      	lsls	r3, r3, #25
 800a5be:	f53f af2d 	bmi.w	800a41c <_svfiprintf_r+0x28>
 800a5c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5c4:	e72c      	b.n	800a420 <_svfiprintf_r+0x2c>
 800a5c6:	ab03      	add	r3, sp, #12
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	462a      	mov	r2, r5
 800a5cc:	4638      	mov	r0, r7
 800a5ce:	4b06      	ldr	r3, [pc, #24]	@ (800a5e8 <_svfiprintf_r+0x1f4>)
 800a5d0:	a904      	add	r1, sp, #16
 800a5d2:	f7fc ff39 	bl	8007448 <_printf_i>
 800a5d6:	e7ed      	b.n	800a5b4 <_svfiprintf_r+0x1c0>
 800a5d8:	0800e850 	.word	0x0800e850
 800a5dc:	0800e856 	.word	0x0800e856
 800a5e0:	0800e85a 	.word	0x0800e85a
 800a5e4:	08006f0d 	.word	0x08006f0d
 800a5e8:	0800a33d 	.word	0x0800a33d

0800a5ec <__sflush_r>:
 800a5ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	0716      	lsls	r6, r2, #28
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	d454      	bmi.n	800a6a4 <__sflush_r+0xb8>
 800a5fa:	684b      	ldr	r3, [r1, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	dc02      	bgt.n	800a606 <__sflush_r+0x1a>
 800a600:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a602:	2b00      	cmp	r3, #0
 800a604:	dd48      	ble.n	800a698 <__sflush_r+0xac>
 800a606:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a608:	2e00      	cmp	r6, #0
 800a60a:	d045      	beq.n	800a698 <__sflush_r+0xac>
 800a60c:	2300      	movs	r3, #0
 800a60e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a612:	682f      	ldr	r7, [r5, #0]
 800a614:	6a21      	ldr	r1, [r4, #32]
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	d030      	beq.n	800a67c <__sflush_r+0x90>
 800a61a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	0759      	lsls	r1, r3, #29
 800a620:	d505      	bpl.n	800a62e <__sflush_r+0x42>
 800a622:	6863      	ldr	r3, [r4, #4]
 800a624:	1ad2      	subs	r2, r2, r3
 800a626:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a628:	b10b      	cbz	r3, 800a62e <__sflush_r+0x42>
 800a62a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a62c:	1ad2      	subs	r2, r2, r3
 800a62e:	2300      	movs	r3, #0
 800a630:	4628      	mov	r0, r5
 800a632:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a634:	6a21      	ldr	r1, [r4, #32]
 800a636:	47b0      	blx	r6
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	d106      	bne.n	800a64c <__sflush_r+0x60>
 800a63e:	6829      	ldr	r1, [r5, #0]
 800a640:	291d      	cmp	r1, #29
 800a642:	d82b      	bhi.n	800a69c <__sflush_r+0xb0>
 800a644:	4a28      	ldr	r2, [pc, #160]	@ (800a6e8 <__sflush_r+0xfc>)
 800a646:	410a      	asrs	r2, r1
 800a648:	07d6      	lsls	r6, r2, #31
 800a64a:	d427      	bmi.n	800a69c <__sflush_r+0xb0>
 800a64c:	2200      	movs	r2, #0
 800a64e:	6062      	str	r2, [r4, #4]
 800a650:	6922      	ldr	r2, [r4, #16]
 800a652:	04d9      	lsls	r1, r3, #19
 800a654:	6022      	str	r2, [r4, #0]
 800a656:	d504      	bpl.n	800a662 <__sflush_r+0x76>
 800a658:	1c42      	adds	r2, r0, #1
 800a65a:	d101      	bne.n	800a660 <__sflush_r+0x74>
 800a65c:	682b      	ldr	r3, [r5, #0]
 800a65e:	b903      	cbnz	r3, 800a662 <__sflush_r+0x76>
 800a660:	6560      	str	r0, [r4, #84]	@ 0x54
 800a662:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a664:	602f      	str	r7, [r5, #0]
 800a666:	b1b9      	cbz	r1, 800a698 <__sflush_r+0xac>
 800a668:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a66c:	4299      	cmp	r1, r3
 800a66e:	d002      	beq.n	800a676 <__sflush_r+0x8a>
 800a670:	4628      	mov	r0, r5
 800a672:	f7fe fabd 	bl	8008bf0 <_free_r>
 800a676:	2300      	movs	r3, #0
 800a678:	6363      	str	r3, [r4, #52]	@ 0x34
 800a67a:	e00d      	b.n	800a698 <__sflush_r+0xac>
 800a67c:	2301      	movs	r3, #1
 800a67e:	4628      	mov	r0, r5
 800a680:	47b0      	blx	r6
 800a682:	4602      	mov	r2, r0
 800a684:	1c50      	adds	r0, r2, #1
 800a686:	d1c9      	bne.n	800a61c <__sflush_r+0x30>
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d0c6      	beq.n	800a61c <__sflush_r+0x30>
 800a68e:	2b1d      	cmp	r3, #29
 800a690:	d001      	beq.n	800a696 <__sflush_r+0xaa>
 800a692:	2b16      	cmp	r3, #22
 800a694:	d11d      	bne.n	800a6d2 <__sflush_r+0xe6>
 800a696:	602f      	str	r7, [r5, #0]
 800a698:	2000      	movs	r0, #0
 800a69a:	e021      	b.n	800a6e0 <__sflush_r+0xf4>
 800a69c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6a0:	b21b      	sxth	r3, r3
 800a6a2:	e01a      	b.n	800a6da <__sflush_r+0xee>
 800a6a4:	690f      	ldr	r7, [r1, #16]
 800a6a6:	2f00      	cmp	r7, #0
 800a6a8:	d0f6      	beq.n	800a698 <__sflush_r+0xac>
 800a6aa:	0793      	lsls	r3, r2, #30
 800a6ac:	bf18      	it	ne
 800a6ae:	2300      	movne	r3, #0
 800a6b0:	680e      	ldr	r6, [r1, #0]
 800a6b2:	bf08      	it	eq
 800a6b4:	694b      	ldreq	r3, [r1, #20]
 800a6b6:	1bf6      	subs	r6, r6, r7
 800a6b8:	600f      	str	r7, [r1, #0]
 800a6ba:	608b      	str	r3, [r1, #8]
 800a6bc:	2e00      	cmp	r6, #0
 800a6be:	ddeb      	ble.n	800a698 <__sflush_r+0xac>
 800a6c0:	4633      	mov	r3, r6
 800a6c2:	463a      	mov	r2, r7
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	6a21      	ldr	r1, [r4, #32]
 800a6c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a6cc:	47e0      	blx	ip
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	dc07      	bgt.n	800a6e2 <__sflush_r+0xf6>
 800a6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6da:	f04f 30ff 	mov.w	r0, #4294967295
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e2:	4407      	add	r7, r0
 800a6e4:	1a36      	subs	r6, r6, r0
 800a6e6:	e7e9      	b.n	800a6bc <__sflush_r+0xd0>
 800a6e8:	dfbffffe 	.word	0xdfbffffe

0800a6ec <_fflush_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	690b      	ldr	r3, [r1, #16]
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	b913      	cbnz	r3, 800a6fc <_fflush_r+0x10>
 800a6f6:	2500      	movs	r5, #0
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	b118      	cbz	r0, 800a706 <_fflush_r+0x1a>
 800a6fe:	6a03      	ldr	r3, [r0, #32]
 800a700:	b90b      	cbnz	r3, 800a706 <_fflush_r+0x1a>
 800a702:	f7fd fa5d 	bl	8007bc0 <__sinit>
 800a706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0f3      	beq.n	800a6f6 <_fflush_r+0xa>
 800a70e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a710:	07d0      	lsls	r0, r2, #31
 800a712:	d404      	bmi.n	800a71e <_fflush_r+0x32>
 800a714:	0599      	lsls	r1, r3, #22
 800a716:	d402      	bmi.n	800a71e <_fflush_r+0x32>
 800a718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a71a:	f7fd fbde 	bl	8007eda <__retarget_lock_acquire_recursive>
 800a71e:	4628      	mov	r0, r5
 800a720:	4621      	mov	r1, r4
 800a722:	f7ff ff63 	bl	800a5ec <__sflush_r>
 800a726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a728:	4605      	mov	r5, r0
 800a72a:	07da      	lsls	r2, r3, #31
 800a72c:	d4e4      	bmi.n	800a6f8 <_fflush_r+0xc>
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	059b      	lsls	r3, r3, #22
 800a732:	d4e1      	bmi.n	800a6f8 <_fflush_r+0xc>
 800a734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a736:	f7fd fbd1 	bl	8007edc <__retarget_lock_release_recursive>
 800a73a:	e7dd      	b.n	800a6f8 <_fflush_r+0xc>

0800a73c <fiprintf>:
 800a73c:	b40e      	push	{r1, r2, r3}
 800a73e:	b503      	push	{r0, r1, lr}
 800a740:	4601      	mov	r1, r0
 800a742:	ab03      	add	r3, sp, #12
 800a744:	4805      	ldr	r0, [pc, #20]	@ (800a75c <fiprintf+0x20>)
 800a746:	f853 2b04 	ldr.w	r2, [r3], #4
 800a74a:	6800      	ldr	r0, [r0, #0]
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	f000 fc07 	bl	800af60 <_vfiprintf_r>
 800a752:	b002      	add	sp, #8
 800a754:	f85d eb04 	ldr.w	lr, [sp], #4
 800a758:	b003      	add	sp, #12
 800a75a:	4770      	bx	lr
 800a75c:	2000003c 	.word	0x2000003c

0800a760 <strncmp>:
 800a760:	b510      	push	{r4, lr}
 800a762:	b16a      	cbz	r2, 800a780 <strncmp+0x20>
 800a764:	3901      	subs	r1, #1
 800a766:	1884      	adds	r4, r0, r2
 800a768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a76c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a770:	429a      	cmp	r2, r3
 800a772:	d103      	bne.n	800a77c <strncmp+0x1c>
 800a774:	42a0      	cmp	r0, r4
 800a776:	d001      	beq.n	800a77c <strncmp+0x1c>
 800a778:	2a00      	cmp	r2, #0
 800a77a:	d1f5      	bne.n	800a768 <strncmp+0x8>
 800a77c:	1ad0      	subs	r0, r2, r3
 800a77e:	bd10      	pop	{r4, pc}
 800a780:	4610      	mov	r0, r2
 800a782:	e7fc      	b.n	800a77e <strncmp+0x1e>

0800a784 <_sbrk_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	2300      	movs	r3, #0
 800a788:	4d05      	ldr	r5, [pc, #20]	@ (800a7a0 <_sbrk_r+0x1c>)
 800a78a:	4604      	mov	r4, r0
 800a78c:	4608      	mov	r0, r1
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	f7f8 f85a 	bl	8002848 <_sbrk>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d102      	bne.n	800a79e <_sbrk_r+0x1a>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	b103      	cbz	r3, 800a79e <_sbrk_r+0x1a>
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	bd38      	pop	{r3, r4, r5, pc}
 800a7a0:	20000a40 	.word	0x20000a40

0800a7a4 <memcpy>:
 800a7a4:	440a      	add	r2, r1
 800a7a6:	4291      	cmp	r1, r2
 800a7a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7ac:	d100      	bne.n	800a7b0 <memcpy+0xc>
 800a7ae:	4770      	bx	lr
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b6:	4291      	cmp	r1, r2
 800a7b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7bc:	d1f9      	bne.n	800a7b2 <memcpy+0xe>
 800a7be:	bd10      	pop	{r4, pc}

0800a7c0 <nan>:
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	4901      	ldr	r1, [pc, #4]	@ (800a7c8 <nan+0x8>)
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	7ff80000 	.word	0x7ff80000

0800a7cc <abort>:
 800a7cc:	2006      	movs	r0, #6
 800a7ce:	b508      	push	{r3, lr}
 800a7d0:	f000 fd9a 	bl	800b308 <raise>
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	f7f7 ffc2 	bl	800275e <_exit>

0800a7da <_calloc_r>:
 800a7da:	b570      	push	{r4, r5, r6, lr}
 800a7dc:	fba1 5402 	umull	r5, r4, r1, r2
 800a7e0:	b93c      	cbnz	r4, 800a7f2 <_calloc_r+0x18>
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f7fe fa76 	bl	8008cd4 <_malloc_r>
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	b928      	cbnz	r0, 800a7f8 <_calloc_r+0x1e>
 800a7ec:	2600      	movs	r6, #0
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	bd70      	pop	{r4, r5, r6, pc}
 800a7f2:	220c      	movs	r2, #12
 800a7f4:	6002      	str	r2, [r0, #0]
 800a7f6:	e7f9      	b.n	800a7ec <_calloc_r+0x12>
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	f7fd fa93 	bl	8007d26 <memset>
 800a800:	e7f5      	b.n	800a7ee <_calloc_r+0x14>

0800a802 <rshift>:
 800a802:	6903      	ldr	r3, [r0, #16]
 800a804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a808:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a80c:	f100 0414 	add.w	r4, r0, #20
 800a810:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a814:	dd46      	ble.n	800a8a4 <rshift+0xa2>
 800a816:	f011 011f 	ands.w	r1, r1, #31
 800a81a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a81e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a822:	d10c      	bne.n	800a83e <rshift+0x3c>
 800a824:	4629      	mov	r1, r5
 800a826:	f100 0710 	add.w	r7, r0, #16
 800a82a:	42b1      	cmp	r1, r6
 800a82c:	d335      	bcc.n	800a89a <rshift+0x98>
 800a82e:	1a9b      	subs	r3, r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	1eea      	subs	r2, r5, #3
 800a834:	4296      	cmp	r6, r2
 800a836:	bf38      	it	cc
 800a838:	2300      	movcc	r3, #0
 800a83a:	4423      	add	r3, r4
 800a83c:	e015      	b.n	800a86a <rshift+0x68>
 800a83e:	46a1      	mov	r9, r4
 800a840:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a844:	f1c1 0820 	rsb	r8, r1, #32
 800a848:	40cf      	lsrs	r7, r1
 800a84a:	f105 0e04 	add.w	lr, r5, #4
 800a84e:	4576      	cmp	r6, lr
 800a850:	46f4      	mov	ip, lr
 800a852:	d816      	bhi.n	800a882 <rshift+0x80>
 800a854:	1a9a      	subs	r2, r3, r2
 800a856:	0092      	lsls	r2, r2, #2
 800a858:	3a04      	subs	r2, #4
 800a85a:	3501      	adds	r5, #1
 800a85c:	42ae      	cmp	r6, r5
 800a85e:	bf38      	it	cc
 800a860:	2200      	movcc	r2, #0
 800a862:	18a3      	adds	r3, r4, r2
 800a864:	50a7      	str	r7, [r4, r2]
 800a866:	b107      	cbz	r7, 800a86a <rshift+0x68>
 800a868:	3304      	adds	r3, #4
 800a86a:	42a3      	cmp	r3, r4
 800a86c:	eba3 0204 	sub.w	r2, r3, r4
 800a870:	bf08      	it	eq
 800a872:	2300      	moveq	r3, #0
 800a874:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a878:	6102      	str	r2, [r0, #16]
 800a87a:	bf08      	it	eq
 800a87c:	6143      	streq	r3, [r0, #20]
 800a87e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a882:	f8dc c000 	ldr.w	ip, [ip]
 800a886:	fa0c fc08 	lsl.w	ip, ip, r8
 800a88a:	ea4c 0707 	orr.w	r7, ip, r7
 800a88e:	f849 7b04 	str.w	r7, [r9], #4
 800a892:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a896:	40cf      	lsrs	r7, r1
 800a898:	e7d9      	b.n	800a84e <rshift+0x4c>
 800a89a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a89e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8a2:	e7c2      	b.n	800a82a <rshift+0x28>
 800a8a4:	4623      	mov	r3, r4
 800a8a6:	e7e0      	b.n	800a86a <rshift+0x68>

0800a8a8 <__hexdig_fun>:
 800a8a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a8ac:	2b09      	cmp	r3, #9
 800a8ae:	d802      	bhi.n	800a8b6 <__hexdig_fun+0xe>
 800a8b0:	3820      	subs	r0, #32
 800a8b2:	b2c0      	uxtb	r0, r0
 800a8b4:	4770      	bx	lr
 800a8b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a8ba:	2b05      	cmp	r3, #5
 800a8bc:	d801      	bhi.n	800a8c2 <__hexdig_fun+0x1a>
 800a8be:	3847      	subs	r0, #71	@ 0x47
 800a8c0:	e7f7      	b.n	800a8b2 <__hexdig_fun+0xa>
 800a8c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a8c6:	2b05      	cmp	r3, #5
 800a8c8:	d801      	bhi.n	800a8ce <__hexdig_fun+0x26>
 800a8ca:	3827      	subs	r0, #39	@ 0x27
 800a8cc:	e7f1      	b.n	800a8b2 <__hexdig_fun+0xa>
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <__gethex>:
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	468a      	mov	sl, r1
 800a8da:	4690      	mov	r8, r2
 800a8dc:	b085      	sub	sp, #20
 800a8de:	9302      	str	r3, [sp, #8]
 800a8e0:	680b      	ldr	r3, [r1, #0]
 800a8e2:	9001      	str	r0, [sp, #4]
 800a8e4:	1c9c      	adds	r4, r3, #2
 800a8e6:	46a1      	mov	r9, r4
 800a8e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a8ec:	2830      	cmp	r0, #48	@ 0x30
 800a8ee:	d0fa      	beq.n	800a8e6 <__gethex+0x12>
 800a8f0:	eba9 0303 	sub.w	r3, r9, r3
 800a8f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a8f8:	f7ff ffd6 	bl	800a8a8 <__hexdig_fun>
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d168      	bne.n	800a9d4 <__gethex+0x100>
 800a902:	2201      	movs	r2, #1
 800a904:	4648      	mov	r0, r9
 800a906:	499f      	ldr	r1, [pc, #636]	@ (800ab84 <__gethex+0x2b0>)
 800a908:	f7ff ff2a 	bl	800a760 <strncmp>
 800a90c:	4607      	mov	r7, r0
 800a90e:	2800      	cmp	r0, #0
 800a910:	d167      	bne.n	800a9e2 <__gethex+0x10e>
 800a912:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a916:	4626      	mov	r6, r4
 800a918:	f7ff ffc6 	bl	800a8a8 <__hexdig_fun>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d062      	beq.n	800a9e6 <__gethex+0x112>
 800a920:	4623      	mov	r3, r4
 800a922:	7818      	ldrb	r0, [r3, #0]
 800a924:	4699      	mov	r9, r3
 800a926:	2830      	cmp	r0, #48	@ 0x30
 800a928:	f103 0301 	add.w	r3, r3, #1
 800a92c:	d0f9      	beq.n	800a922 <__gethex+0x4e>
 800a92e:	f7ff ffbb 	bl	800a8a8 <__hexdig_fun>
 800a932:	fab0 f580 	clz	r5, r0
 800a936:	f04f 0b01 	mov.w	fp, #1
 800a93a:	096d      	lsrs	r5, r5, #5
 800a93c:	464a      	mov	r2, r9
 800a93e:	4616      	mov	r6, r2
 800a940:	7830      	ldrb	r0, [r6, #0]
 800a942:	3201      	adds	r2, #1
 800a944:	f7ff ffb0 	bl	800a8a8 <__hexdig_fun>
 800a948:	2800      	cmp	r0, #0
 800a94a:	d1f8      	bne.n	800a93e <__gethex+0x6a>
 800a94c:	2201      	movs	r2, #1
 800a94e:	4630      	mov	r0, r6
 800a950:	498c      	ldr	r1, [pc, #560]	@ (800ab84 <__gethex+0x2b0>)
 800a952:	f7ff ff05 	bl	800a760 <strncmp>
 800a956:	2800      	cmp	r0, #0
 800a958:	d13f      	bne.n	800a9da <__gethex+0x106>
 800a95a:	b944      	cbnz	r4, 800a96e <__gethex+0x9a>
 800a95c:	1c74      	adds	r4, r6, #1
 800a95e:	4622      	mov	r2, r4
 800a960:	4616      	mov	r6, r2
 800a962:	7830      	ldrb	r0, [r6, #0]
 800a964:	3201      	adds	r2, #1
 800a966:	f7ff ff9f 	bl	800a8a8 <__hexdig_fun>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d1f8      	bne.n	800a960 <__gethex+0x8c>
 800a96e:	1ba4      	subs	r4, r4, r6
 800a970:	00a7      	lsls	r7, r4, #2
 800a972:	7833      	ldrb	r3, [r6, #0]
 800a974:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a978:	2b50      	cmp	r3, #80	@ 0x50
 800a97a:	d13e      	bne.n	800a9fa <__gethex+0x126>
 800a97c:	7873      	ldrb	r3, [r6, #1]
 800a97e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a980:	d033      	beq.n	800a9ea <__gethex+0x116>
 800a982:	2b2d      	cmp	r3, #45	@ 0x2d
 800a984:	d034      	beq.n	800a9f0 <__gethex+0x11c>
 800a986:	2400      	movs	r4, #0
 800a988:	1c71      	adds	r1, r6, #1
 800a98a:	7808      	ldrb	r0, [r1, #0]
 800a98c:	f7ff ff8c 	bl	800a8a8 <__hexdig_fun>
 800a990:	1e43      	subs	r3, r0, #1
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b18      	cmp	r3, #24
 800a996:	d830      	bhi.n	800a9fa <__gethex+0x126>
 800a998:	f1a0 0210 	sub.w	r2, r0, #16
 800a99c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9a0:	f7ff ff82 	bl	800a8a8 <__hexdig_fun>
 800a9a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a9a8:	fa5f fc8c 	uxtb.w	ip, ip
 800a9ac:	f1bc 0f18 	cmp.w	ip, #24
 800a9b0:	f04f 030a 	mov.w	r3, #10
 800a9b4:	d91e      	bls.n	800a9f4 <__gethex+0x120>
 800a9b6:	b104      	cbz	r4, 800a9ba <__gethex+0xe6>
 800a9b8:	4252      	negs	r2, r2
 800a9ba:	4417      	add	r7, r2
 800a9bc:	f8ca 1000 	str.w	r1, [sl]
 800a9c0:	b1ed      	cbz	r5, 800a9fe <__gethex+0x12a>
 800a9c2:	f1bb 0f00 	cmp.w	fp, #0
 800a9c6:	bf0c      	ite	eq
 800a9c8:	2506      	moveq	r5, #6
 800a9ca:	2500      	movne	r5, #0
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	b005      	add	sp, #20
 800a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d4:	2500      	movs	r5, #0
 800a9d6:	462c      	mov	r4, r5
 800a9d8:	e7b0      	b.n	800a93c <__gethex+0x68>
 800a9da:	2c00      	cmp	r4, #0
 800a9dc:	d1c7      	bne.n	800a96e <__gethex+0x9a>
 800a9de:	4627      	mov	r7, r4
 800a9e0:	e7c7      	b.n	800a972 <__gethex+0x9e>
 800a9e2:	464e      	mov	r6, r9
 800a9e4:	462f      	mov	r7, r5
 800a9e6:	2501      	movs	r5, #1
 800a9e8:	e7c3      	b.n	800a972 <__gethex+0x9e>
 800a9ea:	2400      	movs	r4, #0
 800a9ec:	1cb1      	adds	r1, r6, #2
 800a9ee:	e7cc      	b.n	800a98a <__gethex+0xb6>
 800a9f0:	2401      	movs	r4, #1
 800a9f2:	e7fb      	b.n	800a9ec <__gethex+0x118>
 800a9f4:	fb03 0002 	mla	r0, r3, r2, r0
 800a9f8:	e7ce      	b.n	800a998 <__gethex+0xc4>
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	e7de      	b.n	800a9bc <__gethex+0xe8>
 800a9fe:	4629      	mov	r1, r5
 800aa00:	eba6 0309 	sub.w	r3, r6, r9
 800aa04:	3b01      	subs	r3, #1
 800aa06:	2b07      	cmp	r3, #7
 800aa08:	dc0a      	bgt.n	800aa20 <__gethex+0x14c>
 800aa0a:	9801      	ldr	r0, [sp, #4]
 800aa0c:	f7fe f9ee 	bl	8008dec <_Balloc>
 800aa10:	4604      	mov	r4, r0
 800aa12:	b940      	cbnz	r0, 800aa26 <__gethex+0x152>
 800aa14:	4602      	mov	r2, r0
 800aa16:	21e4      	movs	r1, #228	@ 0xe4
 800aa18:	4b5b      	ldr	r3, [pc, #364]	@ (800ab88 <__gethex+0x2b4>)
 800aa1a:	485c      	ldr	r0, [pc, #368]	@ (800ab8c <__gethex+0x2b8>)
 800aa1c:	f7fd fa7a 	bl	8007f14 <__assert_func>
 800aa20:	3101      	adds	r1, #1
 800aa22:	105b      	asrs	r3, r3, #1
 800aa24:	e7ef      	b.n	800aa06 <__gethex+0x132>
 800aa26:	2300      	movs	r3, #0
 800aa28:	f100 0a14 	add.w	sl, r0, #20
 800aa2c:	4655      	mov	r5, sl
 800aa2e:	469b      	mov	fp, r3
 800aa30:	45b1      	cmp	r9, r6
 800aa32:	d337      	bcc.n	800aaa4 <__gethex+0x1d0>
 800aa34:	f845 bb04 	str.w	fp, [r5], #4
 800aa38:	eba5 050a 	sub.w	r5, r5, sl
 800aa3c:	10ad      	asrs	r5, r5, #2
 800aa3e:	6125      	str	r5, [r4, #16]
 800aa40:	4658      	mov	r0, fp
 800aa42:	f7fe fac5 	bl	8008fd0 <__hi0bits>
 800aa46:	016d      	lsls	r5, r5, #5
 800aa48:	f8d8 6000 	ldr.w	r6, [r8]
 800aa4c:	1a2d      	subs	r5, r5, r0
 800aa4e:	42b5      	cmp	r5, r6
 800aa50:	dd54      	ble.n	800aafc <__gethex+0x228>
 800aa52:	1bad      	subs	r5, r5, r6
 800aa54:	4629      	mov	r1, r5
 800aa56:	4620      	mov	r0, r4
 800aa58:	f7fe fe4d 	bl	80096f6 <__any_on>
 800aa5c:	4681      	mov	r9, r0
 800aa5e:	b178      	cbz	r0, 800aa80 <__gethex+0x1ac>
 800aa60:	f04f 0901 	mov.w	r9, #1
 800aa64:	1e6b      	subs	r3, r5, #1
 800aa66:	1159      	asrs	r1, r3, #5
 800aa68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aa6c:	f003 021f 	and.w	r2, r3, #31
 800aa70:	fa09 f202 	lsl.w	r2, r9, r2
 800aa74:	420a      	tst	r2, r1
 800aa76:	d003      	beq.n	800aa80 <__gethex+0x1ac>
 800aa78:	454b      	cmp	r3, r9
 800aa7a:	dc36      	bgt.n	800aaea <__gethex+0x216>
 800aa7c:	f04f 0902 	mov.w	r9, #2
 800aa80:	4629      	mov	r1, r5
 800aa82:	4620      	mov	r0, r4
 800aa84:	f7ff febd 	bl	800a802 <rshift>
 800aa88:	442f      	add	r7, r5
 800aa8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa8e:	42bb      	cmp	r3, r7
 800aa90:	da42      	bge.n	800ab18 <__gethex+0x244>
 800aa92:	4621      	mov	r1, r4
 800aa94:	9801      	ldr	r0, [sp, #4]
 800aa96:	f7fe f9e9 	bl	8008e6c <_Bfree>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa9e:	25a3      	movs	r5, #163	@ 0xa3
 800aaa0:	6013      	str	r3, [r2, #0]
 800aaa2:	e793      	b.n	800a9cc <__gethex+0xf8>
 800aaa4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aaa8:	2a2e      	cmp	r2, #46	@ 0x2e
 800aaaa:	d012      	beq.n	800aad2 <__gethex+0x1fe>
 800aaac:	2b20      	cmp	r3, #32
 800aaae:	d104      	bne.n	800aaba <__gethex+0x1e6>
 800aab0:	f845 bb04 	str.w	fp, [r5], #4
 800aab4:	f04f 0b00 	mov.w	fp, #0
 800aab8:	465b      	mov	r3, fp
 800aaba:	7830      	ldrb	r0, [r6, #0]
 800aabc:	9303      	str	r3, [sp, #12]
 800aabe:	f7ff fef3 	bl	800a8a8 <__hexdig_fun>
 800aac2:	9b03      	ldr	r3, [sp, #12]
 800aac4:	f000 000f 	and.w	r0, r0, #15
 800aac8:	4098      	lsls	r0, r3
 800aaca:	ea4b 0b00 	orr.w	fp, fp, r0
 800aace:	3304      	adds	r3, #4
 800aad0:	e7ae      	b.n	800aa30 <__gethex+0x15c>
 800aad2:	45b1      	cmp	r9, r6
 800aad4:	d8ea      	bhi.n	800aaac <__gethex+0x1d8>
 800aad6:	2201      	movs	r2, #1
 800aad8:	4630      	mov	r0, r6
 800aada:	492a      	ldr	r1, [pc, #168]	@ (800ab84 <__gethex+0x2b0>)
 800aadc:	9303      	str	r3, [sp, #12]
 800aade:	f7ff fe3f 	bl	800a760 <strncmp>
 800aae2:	9b03      	ldr	r3, [sp, #12]
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d1e1      	bne.n	800aaac <__gethex+0x1d8>
 800aae8:	e7a2      	b.n	800aa30 <__gethex+0x15c>
 800aaea:	4620      	mov	r0, r4
 800aaec:	1ea9      	subs	r1, r5, #2
 800aaee:	f7fe fe02 	bl	80096f6 <__any_on>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d0c2      	beq.n	800aa7c <__gethex+0x1a8>
 800aaf6:	f04f 0903 	mov.w	r9, #3
 800aafa:	e7c1      	b.n	800aa80 <__gethex+0x1ac>
 800aafc:	da09      	bge.n	800ab12 <__gethex+0x23e>
 800aafe:	1b75      	subs	r5, r6, r5
 800ab00:	4621      	mov	r1, r4
 800ab02:	462a      	mov	r2, r5
 800ab04:	9801      	ldr	r0, [sp, #4]
 800ab06:	f7fe fbc7 	bl	8009298 <__lshift>
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	1b7f      	subs	r7, r7, r5
 800ab0e:	f100 0a14 	add.w	sl, r0, #20
 800ab12:	f04f 0900 	mov.w	r9, #0
 800ab16:	e7b8      	b.n	800aa8a <__gethex+0x1b6>
 800ab18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab1c:	42bd      	cmp	r5, r7
 800ab1e:	dd6f      	ble.n	800ac00 <__gethex+0x32c>
 800ab20:	1bed      	subs	r5, r5, r7
 800ab22:	42ae      	cmp	r6, r5
 800ab24:	dc34      	bgt.n	800ab90 <__gethex+0x2bc>
 800ab26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d022      	beq.n	800ab74 <__gethex+0x2a0>
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d024      	beq.n	800ab7c <__gethex+0x2a8>
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d115      	bne.n	800ab62 <__gethex+0x28e>
 800ab36:	42ae      	cmp	r6, r5
 800ab38:	d113      	bne.n	800ab62 <__gethex+0x28e>
 800ab3a:	2e01      	cmp	r6, #1
 800ab3c:	d10b      	bne.n	800ab56 <__gethex+0x282>
 800ab3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab42:	9a02      	ldr	r2, [sp, #8]
 800ab44:	2562      	movs	r5, #98	@ 0x62
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	2301      	movs	r3, #1
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	f8ca 3000 	str.w	r3, [sl]
 800ab50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab52:	601c      	str	r4, [r3, #0]
 800ab54:	e73a      	b.n	800a9cc <__gethex+0xf8>
 800ab56:	4620      	mov	r0, r4
 800ab58:	1e71      	subs	r1, r6, #1
 800ab5a:	f7fe fdcc 	bl	80096f6 <__any_on>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d1ed      	bne.n	800ab3e <__gethex+0x26a>
 800ab62:	4621      	mov	r1, r4
 800ab64:	9801      	ldr	r0, [sp, #4]
 800ab66:	f7fe f981 	bl	8008e6c <_Bfree>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab6e:	2550      	movs	r5, #80	@ 0x50
 800ab70:	6013      	str	r3, [r2, #0]
 800ab72:	e72b      	b.n	800a9cc <__gethex+0xf8>
 800ab74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1f3      	bne.n	800ab62 <__gethex+0x28e>
 800ab7a:	e7e0      	b.n	800ab3e <__gethex+0x26a>
 800ab7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1dd      	bne.n	800ab3e <__gethex+0x26a>
 800ab82:	e7ee      	b.n	800ab62 <__gethex+0x28e>
 800ab84:	0800e7f8 	.word	0x0800e7f8
 800ab88:	0800e692 	.word	0x0800e692
 800ab8c:	0800e867 	.word	0x0800e867
 800ab90:	1e6f      	subs	r7, r5, #1
 800ab92:	f1b9 0f00 	cmp.w	r9, #0
 800ab96:	d130      	bne.n	800abfa <__gethex+0x326>
 800ab98:	b127      	cbz	r7, 800aba4 <__gethex+0x2d0>
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f7fe fdaa 	bl	80096f6 <__any_on>
 800aba2:	4681      	mov	r9, r0
 800aba4:	2301      	movs	r3, #1
 800aba6:	4629      	mov	r1, r5
 800aba8:	1b76      	subs	r6, r6, r5
 800abaa:	2502      	movs	r5, #2
 800abac:	117a      	asrs	r2, r7, #5
 800abae:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800abb2:	f007 071f 	and.w	r7, r7, #31
 800abb6:	40bb      	lsls	r3, r7
 800abb8:	4213      	tst	r3, r2
 800abba:	4620      	mov	r0, r4
 800abbc:	bf18      	it	ne
 800abbe:	f049 0902 	orrne.w	r9, r9, #2
 800abc2:	f7ff fe1e 	bl	800a802 <rshift>
 800abc6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800abca:	f1b9 0f00 	cmp.w	r9, #0
 800abce:	d047      	beq.n	800ac60 <__gethex+0x38c>
 800abd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	d015      	beq.n	800ac04 <__gethex+0x330>
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d017      	beq.n	800ac0c <__gethex+0x338>
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d109      	bne.n	800abf4 <__gethex+0x320>
 800abe0:	f019 0f02 	tst.w	r9, #2
 800abe4:	d006      	beq.n	800abf4 <__gethex+0x320>
 800abe6:	f8da 3000 	ldr.w	r3, [sl]
 800abea:	ea49 0903 	orr.w	r9, r9, r3
 800abee:	f019 0f01 	tst.w	r9, #1
 800abf2:	d10e      	bne.n	800ac12 <__gethex+0x33e>
 800abf4:	f045 0510 	orr.w	r5, r5, #16
 800abf8:	e032      	b.n	800ac60 <__gethex+0x38c>
 800abfa:	f04f 0901 	mov.w	r9, #1
 800abfe:	e7d1      	b.n	800aba4 <__gethex+0x2d0>
 800ac00:	2501      	movs	r5, #1
 800ac02:	e7e2      	b.n	800abca <__gethex+0x2f6>
 800ac04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac06:	f1c3 0301 	rsb	r3, r3, #1
 800ac0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0f0      	beq.n	800abf4 <__gethex+0x320>
 800ac12:	f04f 0c00 	mov.w	ip, #0
 800ac16:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac1a:	f104 0314 	add.w	r3, r4, #20
 800ac1e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac22:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac30:	d01b      	beq.n	800ac6a <__gethex+0x396>
 800ac32:	3201      	adds	r2, #1
 800ac34:	6002      	str	r2, [r0, #0]
 800ac36:	2d02      	cmp	r5, #2
 800ac38:	f104 0314 	add.w	r3, r4, #20
 800ac3c:	d13c      	bne.n	800acb8 <__gethex+0x3e4>
 800ac3e:	f8d8 2000 	ldr.w	r2, [r8]
 800ac42:	3a01      	subs	r2, #1
 800ac44:	42b2      	cmp	r2, r6
 800ac46:	d109      	bne.n	800ac5c <__gethex+0x388>
 800ac48:	2201      	movs	r2, #1
 800ac4a:	1171      	asrs	r1, r6, #5
 800ac4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac50:	f006 061f 	and.w	r6, r6, #31
 800ac54:	fa02 f606 	lsl.w	r6, r2, r6
 800ac58:	421e      	tst	r6, r3
 800ac5a:	d13a      	bne.n	800acd2 <__gethex+0x3fe>
 800ac5c:	f045 0520 	orr.w	r5, r5, #32
 800ac60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac62:	601c      	str	r4, [r3, #0]
 800ac64:	9b02      	ldr	r3, [sp, #8]
 800ac66:	601f      	str	r7, [r3, #0]
 800ac68:	e6b0      	b.n	800a9cc <__gethex+0xf8>
 800ac6a:	4299      	cmp	r1, r3
 800ac6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac70:	d8d9      	bhi.n	800ac26 <__gethex+0x352>
 800ac72:	68a3      	ldr	r3, [r4, #8]
 800ac74:	459b      	cmp	fp, r3
 800ac76:	db17      	blt.n	800aca8 <__gethex+0x3d4>
 800ac78:	6861      	ldr	r1, [r4, #4]
 800ac7a:	9801      	ldr	r0, [sp, #4]
 800ac7c:	3101      	adds	r1, #1
 800ac7e:	f7fe f8b5 	bl	8008dec <_Balloc>
 800ac82:	4681      	mov	r9, r0
 800ac84:	b918      	cbnz	r0, 800ac8e <__gethex+0x3ba>
 800ac86:	4602      	mov	r2, r0
 800ac88:	2184      	movs	r1, #132	@ 0x84
 800ac8a:	4b19      	ldr	r3, [pc, #100]	@ (800acf0 <__gethex+0x41c>)
 800ac8c:	e6c5      	b.n	800aa1a <__gethex+0x146>
 800ac8e:	6922      	ldr	r2, [r4, #16]
 800ac90:	f104 010c 	add.w	r1, r4, #12
 800ac94:	3202      	adds	r2, #2
 800ac96:	0092      	lsls	r2, r2, #2
 800ac98:	300c      	adds	r0, #12
 800ac9a:	f7ff fd83 	bl	800a7a4 <memcpy>
 800ac9e:	4621      	mov	r1, r4
 800aca0:	9801      	ldr	r0, [sp, #4]
 800aca2:	f7fe f8e3 	bl	8008e6c <_Bfree>
 800aca6:	464c      	mov	r4, r9
 800aca8:	6923      	ldr	r3, [r4, #16]
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	6122      	str	r2, [r4, #16]
 800acae:	2201      	movs	r2, #1
 800acb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acb4:	615a      	str	r2, [r3, #20]
 800acb6:	e7be      	b.n	800ac36 <__gethex+0x362>
 800acb8:	6922      	ldr	r2, [r4, #16]
 800acba:	455a      	cmp	r2, fp
 800acbc:	dd0b      	ble.n	800acd6 <__gethex+0x402>
 800acbe:	2101      	movs	r1, #1
 800acc0:	4620      	mov	r0, r4
 800acc2:	f7ff fd9e 	bl	800a802 <rshift>
 800acc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acca:	3701      	adds	r7, #1
 800accc:	42bb      	cmp	r3, r7
 800acce:	f6ff aee0 	blt.w	800aa92 <__gethex+0x1be>
 800acd2:	2501      	movs	r5, #1
 800acd4:	e7c2      	b.n	800ac5c <__gethex+0x388>
 800acd6:	f016 061f 	ands.w	r6, r6, #31
 800acda:	d0fa      	beq.n	800acd2 <__gethex+0x3fe>
 800acdc:	4453      	add	r3, sl
 800acde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ace2:	f7fe f975 	bl	8008fd0 <__hi0bits>
 800ace6:	f1c6 0620 	rsb	r6, r6, #32
 800acea:	42b0      	cmp	r0, r6
 800acec:	dbe7      	blt.n	800acbe <__gethex+0x3ea>
 800acee:	e7f0      	b.n	800acd2 <__gethex+0x3fe>
 800acf0:	0800e692 	.word	0x0800e692

0800acf4 <L_shift>:
 800acf4:	f1c2 0208 	rsb	r2, r2, #8
 800acf8:	0092      	lsls	r2, r2, #2
 800acfa:	b570      	push	{r4, r5, r6, lr}
 800acfc:	f1c2 0620 	rsb	r6, r2, #32
 800ad00:	6843      	ldr	r3, [r0, #4]
 800ad02:	6804      	ldr	r4, [r0, #0]
 800ad04:	fa03 f506 	lsl.w	r5, r3, r6
 800ad08:	432c      	orrs	r4, r5
 800ad0a:	40d3      	lsrs	r3, r2
 800ad0c:	6004      	str	r4, [r0, #0]
 800ad0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad12:	4288      	cmp	r0, r1
 800ad14:	d3f4      	bcc.n	800ad00 <L_shift+0xc>
 800ad16:	bd70      	pop	{r4, r5, r6, pc}

0800ad18 <__match>:
 800ad18:	b530      	push	{r4, r5, lr}
 800ad1a:	6803      	ldr	r3, [r0, #0]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad22:	b914      	cbnz	r4, 800ad2a <__match+0x12>
 800ad24:	6003      	str	r3, [r0, #0]
 800ad26:	2001      	movs	r0, #1
 800ad28:	bd30      	pop	{r4, r5, pc}
 800ad2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ad32:	2d19      	cmp	r5, #25
 800ad34:	bf98      	it	ls
 800ad36:	3220      	addls	r2, #32
 800ad38:	42a2      	cmp	r2, r4
 800ad3a:	d0f0      	beq.n	800ad1e <__match+0x6>
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e7f3      	b.n	800ad28 <__match+0x10>

0800ad40 <__hexnan>:
 800ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	2500      	movs	r5, #0
 800ad46:	680b      	ldr	r3, [r1, #0]
 800ad48:	4682      	mov	sl, r0
 800ad4a:	115e      	asrs	r6, r3, #5
 800ad4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad50:	f013 031f 	ands.w	r3, r3, #31
 800ad54:	bf18      	it	ne
 800ad56:	3604      	addne	r6, #4
 800ad58:	1f37      	subs	r7, r6, #4
 800ad5a:	4690      	mov	r8, r2
 800ad5c:	46b9      	mov	r9, r7
 800ad5e:	463c      	mov	r4, r7
 800ad60:	46ab      	mov	fp, r5
 800ad62:	b087      	sub	sp, #28
 800ad64:	6801      	ldr	r1, [r0, #0]
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad6c:	9502      	str	r5, [sp, #8]
 800ad6e:	784a      	ldrb	r2, [r1, #1]
 800ad70:	1c4b      	adds	r3, r1, #1
 800ad72:	9303      	str	r3, [sp, #12]
 800ad74:	b342      	cbz	r2, 800adc8 <__hexnan+0x88>
 800ad76:	4610      	mov	r0, r2
 800ad78:	9105      	str	r1, [sp, #20]
 800ad7a:	9204      	str	r2, [sp, #16]
 800ad7c:	f7ff fd94 	bl	800a8a8 <__hexdig_fun>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d151      	bne.n	800ae28 <__hexnan+0xe8>
 800ad84:	9a04      	ldr	r2, [sp, #16]
 800ad86:	9905      	ldr	r1, [sp, #20]
 800ad88:	2a20      	cmp	r2, #32
 800ad8a:	d818      	bhi.n	800adbe <__hexnan+0x7e>
 800ad8c:	9b02      	ldr	r3, [sp, #8]
 800ad8e:	459b      	cmp	fp, r3
 800ad90:	dd13      	ble.n	800adba <__hexnan+0x7a>
 800ad92:	454c      	cmp	r4, r9
 800ad94:	d206      	bcs.n	800ada4 <__hexnan+0x64>
 800ad96:	2d07      	cmp	r5, #7
 800ad98:	dc04      	bgt.n	800ada4 <__hexnan+0x64>
 800ad9a:	462a      	mov	r2, r5
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f7ff ffa8 	bl	800acf4 <L_shift>
 800ada4:	4544      	cmp	r4, r8
 800ada6:	d952      	bls.n	800ae4e <__hexnan+0x10e>
 800ada8:	2300      	movs	r3, #0
 800adaa:	f1a4 0904 	sub.w	r9, r4, #4
 800adae:	f844 3c04 	str.w	r3, [r4, #-4]
 800adb2:	461d      	mov	r5, r3
 800adb4:	464c      	mov	r4, r9
 800adb6:	f8cd b008 	str.w	fp, [sp, #8]
 800adba:	9903      	ldr	r1, [sp, #12]
 800adbc:	e7d7      	b.n	800ad6e <__hexnan+0x2e>
 800adbe:	2a29      	cmp	r2, #41	@ 0x29
 800adc0:	d157      	bne.n	800ae72 <__hexnan+0x132>
 800adc2:	3102      	adds	r1, #2
 800adc4:	f8ca 1000 	str.w	r1, [sl]
 800adc8:	f1bb 0f00 	cmp.w	fp, #0
 800adcc:	d051      	beq.n	800ae72 <__hexnan+0x132>
 800adce:	454c      	cmp	r4, r9
 800add0:	d206      	bcs.n	800ade0 <__hexnan+0xa0>
 800add2:	2d07      	cmp	r5, #7
 800add4:	dc04      	bgt.n	800ade0 <__hexnan+0xa0>
 800add6:	462a      	mov	r2, r5
 800add8:	4649      	mov	r1, r9
 800adda:	4620      	mov	r0, r4
 800addc:	f7ff ff8a 	bl	800acf4 <L_shift>
 800ade0:	4544      	cmp	r4, r8
 800ade2:	d936      	bls.n	800ae52 <__hexnan+0x112>
 800ade4:	4623      	mov	r3, r4
 800ade6:	f1a8 0204 	sub.w	r2, r8, #4
 800adea:	f853 1b04 	ldr.w	r1, [r3], #4
 800adee:	429f      	cmp	r7, r3
 800adf0:	f842 1f04 	str.w	r1, [r2, #4]!
 800adf4:	d2f9      	bcs.n	800adea <__hexnan+0xaa>
 800adf6:	1b3b      	subs	r3, r7, r4
 800adf8:	f023 0303 	bic.w	r3, r3, #3
 800adfc:	3304      	adds	r3, #4
 800adfe:	3401      	adds	r4, #1
 800ae00:	3e03      	subs	r6, #3
 800ae02:	42b4      	cmp	r4, r6
 800ae04:	bf88      	it	hi
 800ae06:	2304      	movhi	r3, #4
 800ae08:	2200      	movs	r2, #0
 800ae0a:	4443      	add	r3, r8
 800ae0c:	f843 2b04 	str.w	r2, [r3], #4
 800ae10:	429f      	cmp	r7, r3
 800ae12:	d2fb      	bcs.n	800ae0c <__hexnan+0xcc>
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	b91b      	cbnz	r3, 800ae20 <__hexnan+0xe0>
 800ae18:	4547      	cmp	r7, r8
 800ae1a:	d128      	bne.n	800ae6e <__hexnan+0x12e>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	603b      	str	r3, [r7, #0]
 800ae20:	2005      	movs	r0, #5
 800ae22:	b007      	add	sp, #28
 800ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae28:	3501      	adds	r5, #1
 800ae2a:	2d08      	cmp	r5, #8
 800ae2c:	f10b 0b01 	add.w	fp, fp, #1
 800ae30:	dd06      	ble.n	800ae40 <__hexnan+0x100>
 800ae32:	4544      	cmp	r4, r8
 800ae34:	d9c1      	bls.n	800adba <__hexnan+0x7a>
 800ae36:	2300      	movs	r3, #0
 800ae38:	2501      	movs	r5, #1
 800ae3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae3e:	3c04      	subs	r4, #4
 800ae40:	6822      	ldr	r2, [r4, #0]
 800ae42:	f000 000f 	and.w	r0, r0, #15
 800ae46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ae4a:	6020      	str	r0, [r4, #0]
 800ae4c:	e7b5      	b.n	800adba <__hexnan+0x7a>
 800ae4e:	2508      	movs	r5, #8
 800ae50:	e7b3      	b.n	800adba <__hexnan+0x7a>
 800ae52:	9b01      	ldr	r3, [sp, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0dd      	beq.n	800ae14 <__hexnan+0xd4>
 800ae58:	f04f 32ff 	mov.w	r2, #4294967295
 800ae5c:	f1c3 0320 	rsb	r3, r3, #32
 800ae60:	40da      	lsrs	r2, r3
 800ae62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae66:	4013      	ands	r3, r2
 800ae68:	f846 3c04 	str.w	r3, [r6, #-4]
 800ae6c:	e7d2      	b.n	800ae14 <__hexnan+0xd4>
 800ae6e:	3f04      	subs	r7, #4
 800ae70:	e7d0      	b.n	800ae14 <__hexnan+0xd4>
 800ae72:	2004      	movs	r0, #4
 800ae74:	e7d5      	b.n	800ae22 <__hexnan+0xe2>

0800ae76 <__ascii_mbtowc>:
 800ae76:	b082      	sub	sp, #8
 800ae78:	b901      	cbnz	r1, 800ae7c <__ascii_mbtowc+0x6>
 800ae7a:	a901      	add	r1, sp, #4
 800ae7c:	b142      	cbz	r2, 800ae90 <__ascii_mbtowc+0x1a>
 800ae7e:	b14b      	cbz	r3, 800ae94 <__ascii_mbtowc+0x1e>
 800ae80:	7813      	ldrb	r3, [r2, #0]
 800ae82:	600b      	str	r3, [r1, #0]
 800ae84:	7812      	ldrb	r2, [r2, #0]
 800ae86:	1e10      	subs	r0, r2, #0
 800ae88:	bf18      	it	ne
 800ae8a:	2001      	movne	r0, #1
 800ae8c:	b002      	add	sp, #8
 800ae8e:	4770      	bx	lr
 800ae90:	4610      	mov	r0, r2
 800ae92:	e7fb      	b.n	800ae8c <__ascii_mbtowc+0x16>
 800ae94:	f06f 0001 	mvn.w	r0, #1
 800ae98:	e7f8      	b.n	800ae8c <__ascii_mbtowc+0x16>

0800ae9a <_realloc_r>:
 800ae9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9e:	4680      	mov	r8, r0
 800aea0:	4615      	mov	r5, r2
 800aea2:	460c      	mov	r4, r1
 800aea4:	b921      	cbnz	r1, 800aeb0 <_realloc_r+0x16>
 800aea6:	4611      	mov	r1, r2
 800aea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeac:	f7fd bf12 	b.w	8008cd4 <_malloc_r>
 800aeb0:	b92a      	cbnz	r2, 800aebe <_realloc_r+0x24>
 800aeb2:	f7fd fe9d 	bl	8008bf0 <_free_r>
 800aeb6:	2400      	movs	r4, #0
 800aeb8:	4620      	mov	r0, r4
 800aeba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aebe:	f000 fa3f 	bl	800b340 <_malloc_usable_size_r>
 800aec2:	4285      	cmp	r5, r0
 800aec4:	4606      	mov	r6, r0
 800aec6:	d802      	bhi.n	800aece <_realloc_r+0x34>
 800aec8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aecc:	d8f4      	bhi.n	800aeb8 <_realloc_r+0x1e>
 800aece:	4629      	mov	r1, r5
 800aed0:	4640      	mov	r0, r8
 800aed2:	f7fd feff 	bl	8008cd4 <_malloc_r>
 800aed6:	4607      	mov	r7, r0
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d0ec      	beq.n	800aeb6 <_realloc_r+0x1c>
 800aedc:	42b5      	cmp	r5, r6
 800aede:	462a      	mov	r2, r5
 800aee0:	4621      	mov	r1, r4
 800aee2:	bf28      	it	cs
 800aee4:	4632      	movcs	r2, r6
 800aee6:	f7ff fc5d 	bl	800a7a4 <memcpy>
 800aeea:	4621      	mov	r1, r4
 800aeec:	4640      	mov	r0, r8
 800aeee:	f7fd fe7f 	bl	8008bf0 <_free_r>
 800aef2:	463c      	mov	r4, r7
 800aef4:	e7e0      	b.n	800aeb8 <_realloc_r+0x1e>

0800aef6 <__ascii_wctomb>:
 800aef6:	4603      	mov	r3, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	b141      	cbz	r1, 800af0e <__ascii_wctomb+0x18>
 800aefc:	2aff      	cmp	r2, #255	@ 0xff
 800aefe:	d904      	bls.n	800af0a <__ascii_wctomb+0x14>
 800af00:	228a      	movs	r2, #138	@ 0x8a
 800af02:	f04f 30ff 	mov.w	r0, #4294967295
 800af06:	601a      	str	r2, [r3, #0]
 800af08:	4770      	bx	lr
 800af0a:	2001      	movs	r0, #1
 800af0c:	700a      	strb	r2, [r1, #0]
 800af0e:	4770      	bx	lr

0800af10 <__sfputc_r>:
 800af10:	6893      	ldr	r3, [r2, #8]
 800af12:	b410      	push	{r4}
 800af14:	3b01      	subs	r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	6093      	str	r3, [r2, #8]
 800af1a:	da07      	bge.n	800af2c <__sfputc_r+0x1c>
 800af1c:	6994      	ldr	r4, [r2, #24]
 800af1e:	42a3      	cmp	r3, r4
 800af20:	db01      	blt.n	800af26 <__sfputc_r+0x16>
 800af22:	290a      	cmp	r1, #10
 800af24:	d102      	bne.n	800af2c <__sfputc_r+0x1c>
 800af26:	bc10      	pop	{r4}
 800af28:	f000 b932 	b.w	800b190 <__swbuf_r>
 800af2c:	6813      	ldr	r3, [r2, #0]
 800af2e:	1c58      	adds	r0, r3, #1
 800af30:	6010      	str	r0, [r2, #0]
 800af32:	7019      	strb	r1, [r3, #0]
 800af34:	4608      	mov	r0, r1
 800af36:	bc10      	pop	{r4}
 800af38:	4770      	bx	lr

0800af3a <__sfputs_r>:
 800af3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3c:	4606      	mov	r6, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	4614      	mov	r4, r2
 800af42:	18d5      	adds	r5, r2, r3
 800af44:	42ac      	cmp	r4, r5
 800af46:	d101      	bne.n	800af4c <__sfputs_r+0x12>
 800af48:	2000      	movs	r0, #0
 800af4a:	e007      	b.n	800af5c <__sfputs_r+0x22>
 800af4c:	463a      	mov	r2, r7
 800af4e:	4630      	mov	r0, r6
 800af50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af54:	f7ff ffdc 	bl	800af10 <__sfputc_r>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d1f3      	bne.n	800af44 <__sfputs_r+0xa>
 800af5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af60 <_vfiprintf_r>:
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	460d      	mov	r5, r1
 800af66:	4614      	mov	r4, r2
 800af68:	4698      	mov	r8, r3
 800af6a:	4606      	mov	r6, r0
 800af6c:	b09d      	sub	sp, #116	@ 0x74
 800af6e:	b118      	cbz	r0, 800af78 <_vfiprintf_r+0x18>
 800af70:	6a03      	ldr	r3, [r0, #32]
 800af72:	b90b      	cbnz	r3, 800af78 <_vfiprintf_r+0x18>
 800af74:	f7fc fe24 	bl	8007bc0 <__sinit>
 800af78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af7a:	07d9      	lsls	r1, r3, #31
 800af7c:	d405      	bmi.n	800af8a <_vfiprintf_r+0x2a>
 800af7e:	89ab      	ldrh	r3, [r5, #12]
 800af80:	059a      	lsls	r2, r3, #22
 800af82:	d402      	bmi.n	800af8a <_vfiprintf_r+0x2a>
 800af84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af86:	f7fc ffa8 	bl	8007eda <__retarget_lock_acquire_recursive>
 800af8a:	89ab      	ldrh	r3, [r5, #12]
 800af8c:	071b      	lsls	r3, r3, #28
 800af8e:	d501      	bpl.n	800af94 <_vfiprintf_r+0x34>
 800af90:	692b      	ldr	r3, [r5, #16]
 800af92:	b99b      	cbnz	r3, 800afbc <_vfiprintf_r+0x5c>
 800af94:	4629      	mov	r1, r5
 800af96:	4630      	mov	r0, r6
 800af98:	f000 f938 	bl	800b20c <__swsetup_r>
 800af9c:	b170      	cbz	r0, 800afbc <_vfiprintf_r+0x5c>
 800af9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afa0:	07dc      	lsls	r4, r3, #31
 800afa2:	d504      	bpl.n	800afae <_vfiprintf_r+0x4e>
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295
 800afa8:	b01d      	add	sp, #116	@ 0x74
 800afaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afae:	89ab      	ldrh	r3, [r5, #12]
 800afb0:	0598      	lsls	r0, r3, #22
 800afb2:	d4f7      	bmi.n	800afa4 <_vfiprintf_r+0x44>
 800afb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afb6:	f7fc ff91 	bl	8007edc <__retarget_lock_release_recursive>
 800afba:	e7f3      	b.n	800afa4 <_vfiprintf_r+0x44>
 800afbc:	2300      	movs	r3, #0
 800afbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800afc0:	2320      	movs	r3, #32
 800afc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afc6:	2330      	movs	r3, #48	@ 0x30
 800afc8:	f04f 0901 	mov.w	r9, #1
 800afcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800afd0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b17c <_vfiprintf_r+0x21c>
 800afd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afd8:	4623      	mov	r3, r4
 800afda:	469a      	mov	sl, r3
 800afdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afe0:	b10a      	cbz	r2, 800afe6 <_vfiprintf_r+0x86>
 800afe2:	2a25      	cmp	r2, #37	@ 0x25
 800afe4:	d1f9      	bne.n	800afda <_vfiprintf_r+0x7a>
 800afe6:	ebba 0b04 	subs.w	fp, sl, r4
 800afea:	d00b      	beq.n	800b004 <_vfiprintf_r+0xa4>
 800afec:	465b      	mov	r3, fp
 800afee:	4622      	mov	r2, r4
 800aff0:	4629      	mov	r1, r5
 800aff2:	4630      	mov	r0, r6
 800aff4:	f7ff ffa1 	bl	800af3a <__sfputs_r>
 800aff8:	3001      	adds	r0, #1
 800affa:	f000 80a7 	beq.w	800b14c <_vfiprintf_r+0x1ec>
 800affe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b000:	445a      	add	r2, fp
 800b002:	9209      	str	r2, [sp, #36]	@ 0x24
 800b004:	f89a 3000 	ldrb.w	r3, [sl]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 809f 	beq.w	800b14c <_vfiprintf_r+0x1ec>
 800b00e:	2300      	movs	r3, #0
 800b010:	f04f 32ff 	mov.w	r2, #4294967295
 800b014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b018:	f10a 0a01 	add.w	sl, sl, #1
 800b01c:	9304      	str	r3, [sp, #16]
 800b01e:	9307      	str	r3, [sp, #28]
 800b020:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b024:	931a      	str	r3, [sp, #104]	@ 0x68
 800b026:	4654      	mov	r4, sl
 800b028:	2205      	movs	r2, #5
 800b02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b02e:	4853      	ldr	r0, [pc, #332]	@ (800b17c <_vfiprintf_r+0x21c>)
 800b030:	f7fc ff5d 	bl	8007eee <memchr>
 800b034:	9a04      	ldr	r2, [sp, #16]
 800b036:	b9d8      	cbnz	r0, 800b070 <_vfiprintf_r+0x110>
 800b038:	06d1      	lsls	r1, r2, #27
 800b03a:	bf44      	itt	mi
 800b03c:	2320      	movmi	r3, #32
 800b03e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b042:	0713      	lsls	r3, r2, #28
 800b044:	bf44      	itt	mi
 800b046:	232b      	movmi	r3, #43	@ 0x2b
 800b048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b04c:	f89a 3000 	ldrb.w	r3, [sl]
 800b050:	2b2a      	cmp	r3, #42	@ 0x2a
 800b052:	d015      	beq.n	800b080 <_vfiprintf_r+0x120>
 800b054:	4654      	mov	r4, sl
 800b056:	2000      	movs	r0, #0
 800b058:	f04f 0c0a 	mov.w	ip, #10
 800b05c:	9a07      	ldr	r2, [sp, #28]
 800b05e:	4621      	mov	r1, r4
 800b060:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b064:	3b30      	subs	r3, #48	@ 0x30
 800b066:	2b09      	cmp	r3, #9
 800b068:	d94b      	bls.n	800b102 <_vfiprintf_r+0x1a2>
 800b06a:	b1b0      	cbz	r0, 800b09a <_vfiprintf_r+0x13a>
 800b06c:	9207      	str	r2, [sp, #28]
 800b06e:	e014      	b.n	800b09a <_vfiprintf_r+0x13a>
 800b070:	eba0 0308 	sub.w	r3, r0, r8
 800b074:	fa09 f303 	lsl.w	r3, r9, r3
 800b078:	4313      	orrs	r3, r2
 800b07a:	46a2      	mov	sl, r4
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	e7d2      	b.n	800b026 <_vfiprintf_r+0xc6>
 800b080:	9b03      	ldr	r3, [sp, #12]
 800b082:	1d19      	adds	r1, r3, #4
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	9103      	str	r1, [sp, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	bfbb      	ittet	lt
 800b08c:	425b      	neglt	r3, r3
 800b08e:	f042 0202 	orrlt.w	r2, r2, #2
 800b092:	9307      	strge	r3, [sp, #28]
 800b094:	9307      	strlt	r3, [sp, #28]
 800b096:	bfb8      	it	lt
 800b098:	9204      	strlt	r2, [sp, #16]
 800b09a:	7823      	ldrb	r3, [r4, #0]
 800b09c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b09e:	d10a      	bne.n	800b0b6 <_vfiprintf_r+0x156>
 800b0a0:	7863      	ldrb	r3, [r4, #1]
 800b0a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0a4:	d132      	bne.n	800b10c <_vfiprintf_r+0x1ac>
 800b0a6:	9b03      	ldr	r3, [sp, #12]
 800b0a8:	3402      	adds	r4, #2
 800b0aa:	1d1a      	adds	r2, r3, #4
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	9203      	str	r2, [sp, #12]
 800b0b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0b4:	9305      	str	r3, [sp, #20]
 800b0b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b180 <_vfiprintf_r+0x220>
 800b0ba:	2203      	movs	r2, #3
 800b0bc:	4650      	mov	r0, sl
 800b0be:	7821      	ldrb	r1, [r4, #0]
 800b0c0:	f7fc ff15 	bl	8007eee <memchr>
 800b0c4:	b138      	cbz	r0, 800b0d6 <_vfiprintf_r+0x176>
 800b0c6:	2240      	movs	r2, #64	@ 0x40
 800b0c8:	9b04      	ldr	r3, [sp, #16]
 800b0ca:	eba0 000a 	sub.w	r0, r0, sl
 800b0ce:	4082      	lsls	r2, r0
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	3401      	adds	r4, #1
 800b0d4:	9304      	str	r3, [sp, #16]
 800b0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0da:	2206      	movs	r2, #6
 800b0dc:	4829      	ldr	r0, [pc, #164]	@ (800b184 <_vfiprintf_r+0x224>)
 800b0de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0e2:	f7fc ff04 	bl	8007eee <memchr>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d03f      	beq.n	800b16a <_vfiprintf_r+0x20a>
 800b0ea:	4b27      	ldr	r3, [pc, #156]	@ (800b188 <_vfiprintf_r+0x228>)
 800b0ec:	bb1b      	cbnz	r3, 800b136 <_vfiprintf_r+0x1d6>
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	3307      	adds	r3, #7
 800b0f2:	f023 0307 	bic.w	r3, r3, #7
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	9303      	str	r3, [sp, #12]
 800b0fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0fc:	443b      	add	r3, r7
 800b0fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b100:	e76a      	b.n	800afd8 <_vfiprintf_r+0x78>
 800b102:	460c      	mov	r4, r1
 800b104:	2001      	movs	r0, #1
 800b106:	fb0c 3202 	mla	r2, ip, r2, r3
 800b10a:	e7a8      	b.n	800b05e <_vfiprintf_r+0xfe>
 800b10c:	2300      	movs	r3, #0
 800b10e:	f04f 0c0a 	mov.w	ip, #10
 800b112:	4619      	mov	r1, r3
 800b114:	3401      	adds	r4, #1
 800b116:	9305      	str	r3, [sp, #20]
 800b118:	4620      	mov	r0, r4
 800b11a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b11e:	3a30      	subs	r2, #48	@ 0x30
 800b120:	2a09      	cmp	r2, #9
 800b122:	d903      	bls.n	800b12c <_vfiprintf_r+0x1cc>
 800b124:	2b00      	cmp	r3, #0
 800b126:	d0c6      	beq.n	800b0b6 <_vfiprintf_r+0x156>
 800b128:	9105      	str	r1, [sp, #20]
 800b12a:	e7c4      	b.n	800b0b6 <_vfiprintf_r+0x156>
 800b12c:	4604      	mov	r4, r0
 800b12e:	2301      	movs	r3, #1
 800b130:	fb0c 2101 	mla	r1, ip, r1, r2
 800b134:	e7f0      	b.n	800b118 <_vfiprintf_r+0x1b8>
 800b136:	ab03      	add	r3, sp, #12
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	462a      	mov	r2, r5
 800b13c:	4630      	mov	r0, r6
 800b13e:	4b13      	ldr	r3, [pc, #76]	@ (800b18c <_vfiprintf_r+0x22c>)
 800b140:	a904      	add	r1, sp, #16
 800b142:	f7fb fee3 	bl	8006f0c <_printf_float>
 800b146:	4607      	mov	r7, r0
 800b148:	1c78      	adds	r0, r7, #1
 800b14a:	d1d6      	bne.n	800b0fa <_vfiprintf_r+0x19a>
 800b14c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b14e:	07d9      	lsls	r1, r3, #31
 800b150:	d405      	bmi.n	800b15e <_vfiprintf_r+0x1fe>
 800b152:	89ab      	ldrh	r3, [r5, #12]
 800b154:	059a      	lsls	r2, r3, #22
 800b156:	d402      	bmi.n	800b15e <_vfiprintf_r+0x1fe>
 800b158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b15a:	f7fc febf 	bl	8007edc <__retarget_lock_release_recursive>
 800b15e:	89ab      	ldrh	r3, [r5, #12]
 800b160:	065b      	lsls	r3, r3, #25
 800b162:	f53f af1f 	bmi.w	800afa4 <_vfiprintf_r+0x44>
 800b166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b168:	e71e      	b.n	800afa8 <_vfiprintf_r+0x48>
 800b16a:	ab03      	add	r3, sp, #12
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	462a      	mov	r2, r5
 800b170:	4630      	mov	r0, r6
 800b172:	4b06      	ldr	r3, [pc, #24]	@ (800b18c <_vfiprintf_r+0x22c>)
 800b174:	a904      	add	r1, sp, #16
 800b176:	f7fc f967 	bl	8007448 <_printf_i>
 800b17a:	e7e4      	b.n	800b146 <_vfiprintf_r+0x1e6>
 800b17c:	0800e850 	.word	0x0800e850
 800b180:	0800e856 	.word	0x0800e856
 800b184:	0800e85a 	.word	0x0800e85a
 800b188:	08006f0d 	.word	0x08006f0d
 800b18c:	0800af3b 	.word	0x0800af3b

0800b190 <__swbuf_r>:
 800b190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b192:	460e      	mov	r6, r1
 800b194:	4614      	mov	r4, r2
 800b196:	4605      	mov	r5, r0
 800b198:	b118      	cbz	r0, 800b1a2 <__swbuf_r+0x12>
 800b19a:	6a03      	ldr	r3, [r0, #32]
 800b19c:	b90b      	cbnz	r3, 800b1a2 <__swbuf_r+0x12>
 800b19e:	f7fc fd0f 	bl	8007bc0 <__sinit>
 800b1a2:	69a3      	ldr	r3, [r4, #24]
 800b1a4:	60a3      	str	r3, [r4, #8]
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	071a      	lsls	r2, r3, #28
 800b1aa:	d501      	bpl.n	800b1b0 <__swbuf_r+0x20>
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	b943      	cbnz	r3, 800b1c2 <__swbuf_r+0x32>
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f000 f82a 	bl	800b20c <__swsetup_r>
 800b1b8:	b118      	cbz	r0, 800b1c2 <__swbuf_r+0x32>
 800b1ba:	f04f 37ff 	mov.w	r7, #4294967295
 800b1be:	4638      	mov	r0, r7
 800b1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	6922      	ldr	r2, [r4, #16]
 800b1c6:	b2f6      	uxtb	r6, r6
 800b1c8:	1a98      	subs	r0, r3, r2
 800b1ca:	6963      	ldr	r3, [r4, #20]
 800b1cc:	4637      	mov	r7, r6
 800b1ce:	4283      	cmp	r3, r0
 800b1d0:	dc05      	bgt.n	800b1de <__swbuf_r+0x4e>
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	f7ff fa89 	bl	800a6ec <_fflush_r>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d1ed      	bne.n	800b1ba <__swbuf_r+0x2a>
 800b1de:	68a3      	ldr	r3, [r4, #8]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	60a3      	str	r3, [r4, #8]
 800b1e4:	6823      	ldr	r3, [r4, #0]
 800b1e6:	1c5a      	adds	r2, r3, #1
 800b1e8:	6022      	str	r2, [r4, #0]
 800b1ea:	701e      	strb	r6, [r3, #0]
 800b1ec:	6962      	ldr	r2, [r4, #20]
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d004      	beq.n	800b1fe <__swbuf_r+0x6e>
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	07db      	lsls	r3, r3, #31
 800b1f8:	d5e1      	bpl.n	800b1be <__swbuf_r+0x2e>
 800b1fa:	2e0a      	cmp	r6, #10
 800b1fc:	d1df      	bne.n	800b1be <__swbuf_r+0x2e>
 800b1fe:	4621      	mov	r1, r4
 800b200:	4628      	mov	r0, r5
 800b202:	f7ff fa73 	bl	800a6ec <_fflush_r>
 800b206:	2800      	cmp	r0, #0
 800b208:	d0d9      	beq.n	800b1be <__swbuf_r+0x2e>
 800b20a:	e7d6      	b.n	800b1ba <__swbuf_r+0x2a>

0800b20c <__swsetup_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4b29      	ldr	r3, [pc, #164]	@ (800b2b4 <__swsetup_r+0xa8>)
 800b210:	4605      	mov	r5, r0
 800b212:	6818      	ldr	r0, [r3, #0]
 800b214:	460c      	mov	r4, r1
 800b216:	b118      	cbz	r0, 800b220 <__swsetup_r+0x14>
 800b218:	6a03      	ldr	r3, [r0, #32]
 800b21a:	b90b      	cbnz	r3, 800b220 <__swsetup_r+0x14>
 800b21c:	f7fc fcd0 	bl	8007bc0 <__sinit>
 800b220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b224:	0719      	lsls	r1, r3, #28
 800b226:	d422      	bmi.n	800b26e <__swsetup_r+0x62>
 800b228:	06da      	lsls	r2, r3, #27
 800b22a:	d407      	bmi.n	800b23c <__swsetup_r+0x30>
 800b22c:	2209      	movs	r2, #9
 800b22e:	602a      	str	r2, [r5, #0]
 800b230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b234:	f04f 30ff 	mov.w	r0, #4294967295
 800b238:	81a3      	strh	r3, [r4, #12]
 800b23a:	e033      	b.n	800b2a4 <__swsetup_r+0x98>
 800b23c:	0758      	lsls	r0, r3, #29
 800b23e:	d512      	bpl.n	800b266 <__swsetup_r+0x5a>
 800b240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b242:	b141      	cbz	r1, 800b256 <__swsetup_r+0x4a>
 800b244:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b248:	4299      	cmp	r1, r3
 800b24a:	d002      	beq.n	800b252 <__swsetup_r+0x46>
 800b24c:	4628      	mov	r0, r5
 800b24e:	f7fd fccf 	bl	8008bf0 <_free_r>
 800b252:	2300      	movs	r3, #0
 800b254:	6363      	str	r3, [r4, #52]	@ 0x34
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b25c:	81a3      	strh	r3, [r4, #12]
 800b25e:	2300      	movs	r3, #0
 800b260:	6063      	str	r3, [r4, #4]
 800b262:	6923      	ldr	r3, [r4, #16]
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	89a3      	ldrh	r3, [r4, #12]
 800b268:	f043 0308 	orr.w	r3, r3, #8
 800b26c:	81a3      	strh	r3, [r4, #12]
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	b94b      	cbnz	r3, 800b286 <__swsetup_r+0x7a>
 800b272:	89a3      	ldrh	r3, [r4, #12]
 800b274:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b27c:	d003      	beq.n	800b286 <__swsetup_r+0x7a>
 800b27e:	4621      	mov	r1, r4
 800b280:	4628      	mov	r0, r5
 800b282:	f000 f88a 	bl	800b39a <__smakebuf_r>
 800b286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b28a:	f013 0201 	ands.w	r2, r3, #1
 800b28e:	d00a      	beq.n	800b2a6 <__swsetup_r+0x9a>
 800b290:	2200      	movs	r2, #0
 800b292:	60a2      	str	r2, [r4, #8]
 800b294:	6962      	ldr	r2, [r4, #20]
 800b296:	4252      	negs	r2, r2
 800b298:	61a2      	str	r2, [r4, #24]
 800b29a:	6922      	ldr	r2, [r4, #16]
 800b29c:	b942      	cbnz	r2, 800b2b0 <__swsetup_r+0xa4>
 800b29e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b2a2:	d1c5      	bne.n	800b230 <__swsetup_r+0x24>
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
 800b2a6:	0799      	lsls	r1, r3, #30
 800b2a8:	bf58      	it	pl
 800b2aa:	6962      	ldrpl	r2, [r4, #20]
 800b2ac:	60a2      	str	r2, [r4, #8]
 800b2ae:	e7f4      	b.n	800b29a <__swsetup_r+0x8e>
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	e7f7      	b.n	800b2a4 <__swsetup_r+0x98>
 800b2b4:	2000003c 	.word	0x2000003c

0800b2b8 <_raise_r>:
 800b2b8:	291f      	cmp	r1, #31
 800b2ba:	b538      	push	{r3, r4, r5, lr}
 800b2bc:	4605      	mov	r5, r0
 800b2be:	460c      	mov	r4, r1
 800b2c0:	d904      	bls.n	800b2cc <_raise_r+0x14>
 800b2c2:	2316      	movs	r3, #22
 800b2c4:	6003      	str	r3, [r0, #0]
 800b2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ca:	bd38      	pop	{r3, r4, r5, pc}
 800b2cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b2ce:	b112      	cbz	r2, 800b2d6 <_raise_r+0x1e>
 800b2d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2d4:	b94b      	cbnz	r3, 800b2ea <_raise_r+0x32>
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f000 f830 	bl	800b33c <_getpid_r>
 800b2dc:	4622      	mov	r2, r4
 800b2de:	4601      	mov	r1, r0
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2e6:	f000 b817 	b.w	800b318 <_kill_r>
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d00a      	beq.n	800b304 <_raise_r+0x4c>
 800b2ee:	1c59      	adds	r1, r3, #1
 800b2f0:	d103      	bne.n	800b2fa <_raise_r+0x42>
 800b2f2:	2316      	movs	r3, #22
 800b2f4:	6003      	str	r3, [r0, #0]
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	e7e7      	b.n	800b2ca <_raise_r+0x12>
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b302:	4798      	blx	r3
 800b304:	2000      	movs	r0, #0
 800b306:	e7e0      	b.n	800b2ca <_raise_r+0x12>

0800b308 <raise>:
 800b308:	4b02      	ldr	r3, [pc, #8]	@ (800b314 <raise+0xc>)
 800b30a:	4601      	mov	r1, r0
 800b30c:	6818      	ldr	r0, [r3, #0]
 800b30e:	f7ff bfd3 	b.w	800b2b8 <_raise_r>
 800b312:	bf00      	nop
 800b314:	2000003c 	.word	0x2000003c

0800b318 <_kill_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	2300      	movs	r3, #0
 800b31c:	4d06      	ldr	r5, [pc, #24]	@ (800b338 <_kill_r+0x20>)
 800b31e:	4604      	mov	r4, r0
 800b320:	4608      	mov	r0, r1
 800b322:	4611      	mov	r1, r2
 800b324:	602b      	str	r3, [r5, #0]
 800b326:	f7f7 fa0a 	bl	800273e <_kill>
 800b32a:	1c43      	adds	r3, r0, #1
 800b32c:	d102      	bne.n	800b334 <_kill_r+0x1c>
 800b32e:	682b      	ldr	r3, [r5, #0]
 800b330:	b103      	cbz	r3, 800b334 <_kill_r+0x1c>
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	bd38      	pop	{r3, r4, r5, pc}
 800b336:	bf00      	nop
 800b338:	20000a40 	.word	0x20000a40

0800b33c <_getpid_r>:
 800b33c:	f7f7 b9f8 	b.w	8002730 <_getpid>

0800b340 <_malloc_usable_size_r>:
 800b340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b344:	1f18      	subs	r0, r3, #4
 800b346:	2b00      	cmp	r3, #0
 800b348:	bfbc      	itt	lt
 800b34a:	580b      	ldrlt	r3, [r1, r0]
 800b34c:	18c0      	addlt	r0, r0, r3
 800b34e:	4770      	bx	lr

0800b350 <__swhatbuf_r>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	460c      	mov	r4, r1
 800b354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b358:	4615      	mov	r5, r2
 800b35a:	2900      	cmp	r1, #0
 800b35c:	461e      	mov	r6, r3
 800b35e:	b096      	sub	sp, #88	@ 0x58
 800b360:	da0c      	bge.n	800b37c <__swhatbuf_r+0x2c>
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	2100      	movs	r1, #0
 800b366:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b36a:	bf14      	ite	ne
 800b36c:	2340      	movne	r3, #64	@ 0x40
 800b36e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b372:	2000      	movs	r0, #0
 800b374:	6031      	str	r1, [r6, #0]
 800b376:	602b      	str	r3, [r5, #0]
 800b378:	b016      	add	sp, #88	@ 0x58
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	466a      	mov	r2, sp
 800b37e:	f000 f849 	bl	800b414 <_fstat_r>
 800b382:	2800      	cmp	r0, #0
 800b384:	dbed      	blt.n	800b362 <__swhatbuf_r+0x12>
 800b386:	9901      	ldr	r1, [sp, #4]
 800b388:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b38c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b390:	4259      	negs	r1, r3
 800b392:	4159      	adcs	r1, r3
 800b394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b398:	e7eb      	b.n	800b372 <__swhatbuf_r+0x22>

0800b39a <__smakebuf_r>:
 800b39a:	898b      	ldrh	r3, [r1, #12]
 800b39c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b39e:	079d      	lsls	r5, r3, #30
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	460c      	mov	r4, r1
 800b3a4:	d507      	bpl.n	800b3b6 <__smakebuf_r+0x1c>
 800b3a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	6123      	str	r3, [r4, #16]
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	6163      	str	r3, [r4, #20]
 800b3b2:	b003      	add	sp, #12
 800b3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3b6:	466a      	mov	r2, sp
 800b3b8:	ab01      	add	r3, sp, #4
 800b3ba:	f7ff ffc9 	bl	800b350 <__swhatbuf_r>
 800b3be:	9f00      	ldr	r7, [sp, #0]
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f7fd fc85 	bl	8008cd4 <_malloc_r>
 800b3ca:	b948      	cbnz	r0, 800b3e0 <__smakebuf_r+0x46>
 800b3cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d0:	059a      	lsls	r2, r3, #22
 800b3d2:	d4ee      	bmi.n	800b3b2 <__smakebuf_r+0x18>
 800b3d4:	f023 0303 	bic.w	r3, r3, #3
 800b3d8:	f043 0302 	orr.w	r3, r3, #2
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	e7e2      	b.n	800b3a6 <__smakebuf_r+0xc>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ea:	81a3      	strh	r3, [r4, #12]
 800b3ec:	9b01      	ldr	r3, [sp, #4]
 800b3ee:	6020      	str	r0, [r4, #0]
 800b3f0:	b15b      	cbz	r3, 800b40a <__smakebuf_r+0x70>
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3f8:	f000 f81e 	bl	800b438 <_isatty_r>
 800b3fc:	b128      	cbz	r0, 800b40a <__smakebuf_r+0x70>
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	f023 0303 	bic.w	r3, r3, #3
 800b404:	f043 0301 	orr.w	r3, r3, #1
 800b408:	81a3      	strh	r3, [r4, #12]
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	431d      	orrs	r5, r3
 800b40e:	81a5      	strh	r5, [r4, #12]
 800b410:	e7cf      	b.n	800b3b2 <__smakebuf_r+0x18>
	...

0800b414 <_fstat_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	2300      	movs	r3, #0
 800b418:	4d06      	ldr	r5, [pc, #24]	@ (800b434 <_fstat_r+0x20>)
 800b41a:	4604      	mov	r4, r0
 800b41c:	4608      	mov	r0, r1
 800b41e:	4611      	mov	r1, r2
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	f7f7 f9eb 	bl	80027fc <_fstat>
 800b426:	1c43      	adds	r3, r0, #1
 800b428:	d102      	bne.n	800b430 <_fstat_r+0x1c>
 800b42a:	682b      	ldr	r3, [r5, #0]
 800b42c:	b103      	cbz	r3, 800b430 <_fstat_r+0x1c>
 800b42e:	6023      	str	r3, [r4, #0]
 800b430:	bd38      	pop	{r3, r4, r5, pc}
 800b432:	bf00      	nop
 800b434:	20000a40 	.word	0x20000a40

0800b438 <_isatty_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	2300      	movs	r3, #0
 800b43c:	4d05      	ldr	r5, [pc, #20]	@ (800b454 <_isatty_r+0x1c>)
 800b43e:	4604      	mov	r4, r0
 800b440:	4608      	mov	r0, r1
 800b442:	602b      	str	r3, [r5, #0]
 800b444:	f7f7 f9e9 	bl	800281a <_isatty>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_isatty_r+0x1a>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_isatty_r+0x1a>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	20000a40 	.word	0x20000a40

0800b458 <_init>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	bf00      	nop
 800b45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45e:	bc08      	pop	{r3}
 800b460:	469e      	mov	lr, r3
 800b462:	4770      	bx	lr

0800b464 <_fini>:
 800b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b466:	bf00      	nop
 800b468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46a:	bc08      	pop	{r3}
 800b46c:	469e      	mov	lr, r3
 800b46e:	4770      	bx	lr
