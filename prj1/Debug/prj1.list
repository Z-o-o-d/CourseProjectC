
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4dc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000347c  0800b5f0  0800b5f0  0000c5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea6c  0800ea6c  000101fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea6c  0800ea6c  0000fa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea74  0800ea74  000101fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea74  0800ea74  0000fa74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ea78  0800ea78  0000fa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800ea7c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  200001fc  0800ec78  000101fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa0  0800ec78  00010aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014708  00000000  00000000  00010225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b8  00000000  00000000  0002492d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00027ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eea  00000000  00000000  00028da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af90  00000000  00000000  00029c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018252  00000000  00000000  00044c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094586  00000000  00000000  0005ce6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f13f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006458  00000000  00000000  000f1438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000f7890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b5d4 	.word	0x0800b5d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800b5d4 	.word	0x0800b5d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_d2lz>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	460d      	mov	r5, r1
 8000ef6:	f7ff fe15 	bl	8000b24 <__aeabi_dcmplt>
 8000efa:	b928      	cbnz	r0, 8000f08 <__aeabi_d2lz+0x1c>
 8000efc:	4620      	mov	r0, r4
 8000efe:	4629      	mov	r1, r5
 8000f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f04:	f000 b80a 	b.w	8000f1c <__aeabi_d2ulz>
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f0e:	f000 f805 	bl	8000f1c <__aeabi_d2ulz>
 8000f12:	4240      	negs	r0, r0
 8000f14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
 8000f1a:	bf00      	nop

08000f1c <__aeabi_d2ulz>:
 8000f1c:	b5d0      	push	{r4, r6, r7, lr}
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <__aeabi_d2ulz+0x34>)
 8000f22:	4606      	mov	r6, r0
 8000f24:	460f      	mov	r7, r1
 8000f26:	f7ff fb8b 	bl	8000640 <__aeabi_dmul>
 8000f2a:	f7ff fe61 	bl	8000bf0 <__aeabi_d2uiz>
 8000f2e:	4604      	mov	r4, r0
 8000f30:	f7ff fb0c 	bl	800054c <__aeabi_ui2d>
 8000f34:	2200      	movs	r2, #0
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <__aeabi_d2ulz+0x38>)
 8000f38:	f7ff fb82 	bl	8000640 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4630      	mov	r0, r6
 8000f42:	4639      	mov	r1, r7
 8000f44:	f7ff f9c4 	bl	80002d0 <__aeabi_dsub>
 8000f48:	f7ff fe52 	bl	8000bf0 <__aeabi_d2uiz>
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000f50:	3df00000 	.word	0x3df00000
 8000f54:	41f00000 	.word	0x41f00000

08000f58 <ESP_SendCommand>:
    strncpy(esp_config.ap_ssid, ap_ssid, sizeof(esp_config.ap_ssid));
    strncpy(esp_config.ap_pswd, ap_pswd, sizeof(esp_config.ap_pswd));
    strncpy(esp_config.ap_ip, ap_ip, sizeof(esp_config.ap_ip));
}

void ESP_SendCommand(const char *command) {
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    // Transmit the command using the default UART
    HAL_UART_Transmit(AT_huart, (uint8_t*)command, strlen(command), 1000);
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <ESP_SendCommand+0x2c>)
 8000f62:	681c      	ldr	r4, [r3, #0]
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff f8f3 	bl	8000150 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4620      	mov	r0, r4
 8000f76:	f005 f8be 	bl	80060f6 <HAL_UART_Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000218 	.word	0x20000218

08000f88 <ESP_UART_Init>:
    HAL_UART_Transmit(AT_huart, cmd, strlen((char*)cmd), 100);
    HAL_Delay(1); // Adjust this delay as needed
    HAL_UART_Transmit(AT_huart, (uint8_t *)data, strlen(data), 1000);
}

void ESP_UART_Init(UART_HandleTypeDef *huart){
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    AT_huart = huart;
 8000f90:	4a03      	ldr	r2, [pc, #12]	@ (8000fa0 <ESP_UART_Init+0x18>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000218 	.word	0x20000218

08000fa4 <ESP_Reset>:

// Function definitions for AT commands with modifiable parameters

void ESP_Reset() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
#ifdef ENABLE_GPIO_RESET_CONTROL
	ESP_Reset_GPIO();
 8000fa8:	f000 f99c 	bl	80012e4 <ESP_Reset_GPIO>
#else
    ESP_SendCommand("AT+RST\r\n");
#endif
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <ESP_CheckWiFi>:
    char cmd[100];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
    ESP_SendCommand(cmd);
}

WiFiInfoTypeDef ESP_CheckWiFi(void) {
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb2:	b0ab      	sub	sp, #172	@ 0xac
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    WiFiInfoTypeDef info = {0};
 8000fb8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fbc:	2235      	movs	r2, #53	@ 0x35
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 ff32 	bl	8007e2a <memset>
    char response[100] = {0};
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2260      	movs	r2, #96	@ 0x60
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 ff29 	bl	8007e2a <memset>
    char *token;
    huart3.RxXferCount = 0;
 8000fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <ESP_CheckWiFi+0x118>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    ESP_SendCommand("AT+CWJAP?\r\n");
 8000fde:	483b      	ldr	r0, [pc, #236]	@ (80010cc <ESP_CheckWiFi+0x11c>)
 8000fe0:	f7ff ffba 	bl	8000f58 <ESP_SendCommand>
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);
 8000fe4:	4b3a      	ldr	r3, [pc, #232]	@ (80010d0 <ESP_CheckWiFi+0x120>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	f107 0108 	add.w	r1, r7, #8
 8000fec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff0:	2264      	movs	r2, #100	@ 0x64
 8000ff2:	f005 f903 	bl	80061fc <HAL_UART_Receive>
    // Parse the response and populate the WiFiInfo struct

    // I don know why it can't be     token = strtok(response, "+CWJAP:,\"");
    // sscanf scanf ALSO can't used  so strange

    token = strtok(response, ":,\"");
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	4936      	ldr	r1, [pc, #216]	@ (80010d4 <ESP_CheckWiFi+0x124>)
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f006 ff41 	bl	8007e84 <strtok>
 8001002:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

    token = strtok(NULL, "\",\""); // Get SSID
 8001006:	4934      	ldr	r1, [pc, #208]	@ (80010d8 <ESP_CheckWiFi+0x128>)
 8001008:	2000      	movs	r0, #0
 800100a:	f006 ff3b 	bl	8007e84 <strtok>
 800100e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    strcpy(info.ssid, token);
 8001012:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800101a:	4618      	mov	r0, r3
 800101c:	f007 f81b 	bl	8008056 <strcpy>

    token = strtok(NULL, "\","); // Get MAC address
 8001020:	492e      	ldr	r1, [pc, #184]	@ (80010dc <ESP_CheckWiFi+0x12c>)
 8001022:	2000      	movs	r0, #0
 8001024:	f006 ff2e 	bl	8007e84 <strtok>
 8001028:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    strcpy(info.bssid, token);
 800102c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001030:	3320      	adds	r3, #32
 8001032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001036:	4618      	mov	r0, r3
 8001038:	f007 f80d 	bl	8008056 <strcpy>

    token = strtok(NULL, ","); // Get security mode
 800103c:	4928      	ldr	r1, [pc, #160]	@ (80010e0 <ESP_CheckWiFi+0x130>)
 800103e:	2000      	movs	r0, #0
 8001040:	f006 ff20 	bl	8007e84 <strtok>
 8001044:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    info.channel = atoi(token);
 8001048:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800104c:	f005 feb8 	bl	8006dc0 <atoi>
 8001050:	4603      	mov	r3, r0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

    token = strtok(NULL, ","); // Get RSSI
 8001058:	4921      	ldr	r1, [pc, #132]	@ (80010e0 <ESP_CheckWiFi+0x130>)
 800105a:	2000      	movs	r0, #0
 800105c:	f006 ff12 	bl	8007e84 <strtok>
 8001060:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    info.rssi = atoi(token);
 8001064:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001068:	f005 feaa 	bl	8006dc0 <atoi>
 800106c:	4603      	mov	r3, r0
 800106e:	b25b      	sxtb	r3, r3
 8001070:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    token = strtok(NULL, "\r\n"); // Get connected status
 8001074:	491b      	ldr	r1, [pc, #108]	@ (80010e4 <ESP_CheckWiFi+0x134>)
 8001076:	2000      	movs	r0, #0
 8001078:	f006 ff04 	bl	8007e84 <strtok>
 800107c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    info.encryption = atoi(token);
 8001080:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001084:	f005 fe9c 	bl	8006dc0 <atoi>
 8001088:	4603      	mov	r3, r0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0

    return info;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8001096:	469c      	mov	ip, r3
 8001098:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800109c:	4665      	mov	r5, ip
 800109e:	4626      	mov	r6, r4
 80010a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010a2:	6028      	str	r0, [r5, #0]
 80010a4:	6069      	str	r1, [r5, #4]
 80010a6:	60aa      	str	r2, [r5, #8]
 80010a8:	60eb      	str	r3, [r5, #12]
 80010aa:	3410      	adds	r4, #16
 80010ac:	f10c 0c10 	add.w	ip, ip, #16
 80010b0:	4574      	cmp	r4, lr
 80010b2:	d1f3      	bne.n	800109c <ESP_CheckWiFi+0xec>
 80010b4:	4663      	mov	r3, ip
 80010b6:	4622      	mov	r2, r4
 80010b8:	6810      	ldr	r0, [r2, #0]
 80010ba:	6018      	str	r0, [r3, #0]
 80010bc:	7912      	ldrb	r2, [r2, #4]
 80010be:	711a      	strb	r2, [r3, #4]
}
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	37ac      	adds	r7, #172	@ 0xac
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c8:	2000032c 	.word	0x2000032c
 80010cc:	0800b668 	.word	0x0800b668
 80010d0:	20000218 	.word	0x20000218
 80010d4:	0800b674 	.word	0x0800b674
 80010d8:	0800b678 	.word	0x0800b678
 80010dc:	0800b67c 	.word	0x0800b67c
 80010e0:	0800b680 	.word	0x0800b680
 80010e4:	0800b684 	.word	0x0800b684

080010e8 <ESP_GetIPInfo>:

IPInfoTypeDef ESP_GetIPInfo(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0c6      	sub	sp, #280	@ 0x118
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010f6:	6018      	str	r0, [r3, #0]
    IPInfoTypeDef ipInfo = {0};
 80010f8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80010fc:	2244      	movs	r2, #68	@ 0x44
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f006 fe92 	bl	8007e2a <memset>
    char response[200] = {0};
 8001106:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800110a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	3304      	adds	r3, #4
 8001114:	22c4      	movs	r2, #196	@ 0xc4
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f006 fe86 	bl	8007e2a <memset>
    char *token;

    ESP_SendCommand("AT+CIFSR\r\n");
 800111e:	484e      	ldr	r0, [pc, #312]	@ (8001258 <ESP_GetIPInfo+0x170>)
 8001120:	f7ff ff1a 	bl	8000f58 <ESP_SendCommand>
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);
 8001124:	4b4d      	ldr	r3, [pc, #308]	@ (800125c <ESP_GetIPInfo+0x174>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f107 0108 	add.w	r1, r7, #8
 800112c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001130:	22c8      	movs	r2, #200	@ 0xc8
 8001132:	f005 f863 	bl	80061fc <HAL_UART_Receive>

    // Parse AP IP
    token = strstr(response, "+CIFSR:APIP,\"");
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4949      	ldr	r1, [pc, #292]	@ (8001260 <ESP_GetIPInfo+0x178>)
 800113c:	4618      	mov	r0, r3
 800113e:	f006 fefd 	bl	8007f3c <strstr>
 8001142:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (token) {
 8001146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800114a:	2b00      	cmp	r3, #0
 800114c:	d011      	beq.n	8001172 <ESP_GetIPInfo+0x8a>
        token += strlen("+CIFSR:APIP,\"");
 800114e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001152:	330d      	adds	r3, #13
 8001154:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        strncpy(ipInfo.AP_IP, token, strcspn(token, "\""));
 8001158:	4942      	ldr	r1, [pc, #264]	@ (8001264 <ESP_GetIPInfo+0x17c>)
 800115a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800115e:	f006 fe6c 	bl	8007e3a <strcspn>
 8001162:	4602      	mov	r2, r0
 8001164:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001168:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800116c:	4618      	mov	r0, r3
 800116e:	f006 fe75 	bl	8007e5c <strncpy>
    }

    // Parse AP MAC
    token = strstr(response, "+CIFSR:APMAC,\"");
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	493c      	ldr	r1, [pc, #240]	@ (8001268 <ESP_GetIPInfo+0x180>)
 8001178:	4618      	mov	r0, r3
 800117a:	f006 fedf 	bl	8007f3c <strstr>
 800117e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (token) {
 8001182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001186:	2b00      	cmp	r3, #0
 8001188:	d012      	beq.n	80011b0 <ESP_GetIPInfo+0xc8>
        token += strlen("+CIFSR:APMAC,\"");
 800118a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800118e:	330e      	adds	r3, #14
 8001190:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        strncpy(ipInfo.AP_MAC, token, strcspn(token, "\""));
 8001194:	4933      	ldr	r1, [pc, #204]	@ (8001264 <ESP_GetIPInfo+0x17c>)
 8001196:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800119a:	f006 fe4e 	bl	8007e3a <strcspn>
 800119e:	4602      	mov	r2, r0
 80011a0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80011a4:	3310      	adds	r3, #16
 80011a6:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80011aa:	4618      	mov	r0, r3
 80011ac:	f006 fe56 	bl	8007e5c <strncpy>
    }

    // Parse STA IP
    token = strstr(response, "+CIFSR:STAIP,\"");
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	492d      	ldr	r1, [pc, #180]	@ (800126c <ESP_GetIPInfo+0x184>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f006 fec0 	bl	8007f3c <strstr>
 80011bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (token) {
 80011c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d012      	beq.n	80011ee <ESP_GetIPInfo+0x106>
        token += strlen("+CIFSR:STAIP,\"");
 80011c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011cc:	330e      	adds	r3, #14
 80011ce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        strncpy(ipInfo.STA_IP, token, strcspn(token, "\""));
 80011d2:	4924      	ldr	r1, [pc, #144]	@ (8001264 <ESP_GetIPInfo+0x17c>)
 80011d4:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80011d8:	f006 fe2f 	bl	8007e3a <strcspn>
 80011dc:	4602      	mov	r2, r0
 80011de:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80011e2:	3322      	adds	r3, #34	@ 0x22
 80011e4:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 fe37 	bl	8007e5c <strncpy>
    }

    // Parse STA MAC
    token = strstr(response, "+CIFSR:STAMAC,\"");
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	491f      	ldr	r1, [pc, #124]	@ (8001270 <ESP_GetIPInfo+0x188>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f006 fea1 	bl	8007f3c <strstr>
 80011fa:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (token) {
 80011fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001202:	2b00      	cmp	r3, #0
 8001204:	d012      	beq.n	800122c <ESP_GetIPInfo+0x144>
        token += strlen("+CIFSR:STAMAC,\"");
 8001206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800120a:	330f      	adds	r3, #15
 800120c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        strncpy(ipInfo.STA_MAC, token, strcspn(token, "\""));
 8001210:	4914      	ldr	r1, [pc, #80]	@ (8001264 <ESP_GetIPInfo+0x17c>)
 8001212:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001216:	f006 fe10 	bl	8007e3a <strcspn>
 800121a:	4602      	mov	r2, r0
 800121c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001220:	3332      	adds	r3, #50	@ 0x32
 8001222:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8001226:	4618      	mov	r0, r3
 8001228:	f006 fe18 	bl	8007e5c <strncpy>
    }
    return ipInfo;
 800122c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001230:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800123c:	2244      	movs	r2, #68	@ 0x44
 800123e:	4619      	mov	r1, r3
 8001240:	f006 ff1f 	bl	8008082 <memcpy>
}
 8001244:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001248:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	0800b688 	.word	0x0800b688
 800125c:	20000218 	.word	0x20000218
 8001260:	0800b694 	.word	0x0800b694
 8001264:	0800b6a4 	.word	0x0800b6a4
 8001268:	0800b6a8 	.word	0x0800b6a8
 800126c:	0800b6b8 	.word	0x0800b6b8
 8001270:	0800b6c8 	.word	0x0800b6c8

08001274 <ESP_EnableMUX>:

void ESP_EnableMUX() {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    ESP_SendCommand("AT+CIPMUX=1\r\n");
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <ESP_EnableMUX+0x10>)
 800127a:	f7ff fe6d 	bl	8000f58 <ESP_SendCommand>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	0800b6d8 	.word	0x0800b6d8

08001288 <ESP_StartServer>:

void ESP_StartServer(uint16_t port) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b090      	sub	sp, #64	@ 0x40
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
    char cmd[50];
    sprintf(cmd, "AT+CIPSERVER=1,%d\r\n", port);
 8001292:	88fa      	ldrh	r2, [r7, #6]
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4906      	ldr	r1, [pc, #24]	@ (80012b4 <ESP_StartServer+0x2c>)
 800129a:	4618      	mov	r0, r3
 800129c:	f006 fd48 	bl	8007d30 <siprintf>
    ESP_SendCommand(cmd);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe57 	bl	8000f58 <ESP_SendCommand>
}
 80012aa:	bf00      	nop
 80012ac:	3740      	adds	r7, #64	@ 0x40
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	0800b6e8 	.word	0x0800b6e8

080012b8 <ESP_INIT_BASE>:

void ESP_RestoreDefaults() {
    ESP_SendCommand("AT+RESTORE\r\n");
}

void ESP_INIT_BASE() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    ESP_Reset();
 80012bc:	f7ff fe72 	bl	8000fa4 <ESP_Reset>
    HAL_Delay(5000);
 80012c0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012c4:	f001 fc06 	bl	8002ad4 <HAL_Delay>
    ESP_EnableMUX();
 80012c8:	f7ff ffd4 	bl	8001274 <ESP_EnableMUX>
    HAL_Delay(100);
 80012cc:	2064      	movs	r0, #100	@ 0x64
 80012ce:	f001 fc01 	bl	8002ad4 <HAL_Delay>
    ESP_StartServer(9999);
 80012d2:	f242 700f 	movw	r0, #9999	@ 0x270f
 80012d6:	f7ff ffd7 	bl	8001288 <ESP_StartServer>
    HAL_Delay(100);
 80012da:	2064      	movs	r0, #100	@ 0x64
 80012dc:	f001 fbfa 	bl	8002ad4 <HAL_Delay>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <ESP_Reset_GPIO>:

#ifdef ENABLE_GPIO_RESET_CONTROL
static GPIO_TypeDef *ESP_Reset_GPIO_Port = ESP_RESET_GPIO_Port;
static uint16_t ESP_Reset_Pin = ESP_RESET_Pin;

void ESP_Reset_GPIO() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
    // Set the reset pin low to reset the ESP module
    HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_RESET);
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <ESP_Reset_GPIO+0x38>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001320 <ESP_Reset_GPIO+0x3c>)
 80012ee:	8811      	ldrh	r1, [r2, #0]
 80012f0:	2200      	movs	r2, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 feb3 	bl	800405e <HAL_GPIO_WritePin>
    HAL_Delay(100); // Hold low for 1000 ms
 80012f8:	2064      	movs	r0, #100	@ 0x64
 80012fa:	f001 fbeb 	bl	8002ad4 <HAL_Delay>
    // Set the reset pin high to bring the ESP module out of reset
    HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <ESP_Reset_GPIO+0x38>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <ESP_Reset_GPIO+0x3c>)
 8001304:	8811      	ldrh	r1, [r2, #0]
 8001306:	2201      	movs	r2, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fea8 	bl	800405e <HAL_GPIO_WritePin>
    HAL_Delay(1000); // Wait for the ESP module to initialize
 800130e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001312:	f001 fbdf 	bl	8002ad4 <HAL_Delay>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004

08001324 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	889b      	ldrh	r3, [r3, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	4619      	mov	r1, r3
 8001346:	f002 fe8a 	bl	800405e <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	889b      	ldrh	r3, [r3, #4]
 800134e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8001350:	2311      	movs	r3, #17
 8001352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	79db      	ldrb	r3, [r3, #7]
 8001358:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 800135a:	2303      	movs	r3, #3
 800135c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fcdd 	bl	8003d28 <HAL_GPIO_Init>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	79db      	ldrb	r3, [r3, #7]
 800139a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f107 0208 	add.w	r2, r7, #8
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fcbe 	bl	8003d28 <HAL_GPIO_Init>
}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80013be:	4a76      	ldr	r2, [pc, #472]	@ (8001598 <DHT_getData+0x1e4>)
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c8:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	799b      	ldrb	r3, [r3, #6]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d103      	bne.n	80013dc <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 80013d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80013da:	e002      	b.n	80013e2 <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 80013dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 80013e2:	f001 fb6d 	bl	8002ac0 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	1ad2      	subs	r2, r2, r3
 80013ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d212      	bcs.n	800141a <DHT_getData+0x66>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00e      	beq.n	800141a <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	61bb      	str	r3, [r7, #24]
		return data;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	461a      	mov	r2, r3
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001414:	e882 0003 	stmia.w	r2, {r0, r1}
 8001418:	e166      	b.n	80016e8 <DHT_getData+0x334>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 800141a:	f001 fb51 	bl	8002ac0 <HAL_GetTick>
 800141e:	4603      	mov	r3, r0
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8001426:	6838      	ldr	r0, [r7, #0]
 8001428:	f7ff ff7c 	bl	8001324 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	889b      	ldrh	r3, [r3, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	f002 fe11 	bl	800405e <HAL_GPIO_WritePin>
	Delay(18);
 800143c:	2012      	movs	r0, #18
 800143e:	f001 fb49 	bl	8002ad4 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	889b      	ldrh	r3, [r3, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	4619      	mov	r1, r3
 800144e:	f002 fe06 	bl	800405e <HAL_GPIO_WritePin>
	goToInput(sensor);
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f7ff ff8f 	bl	8001376 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 8001460:	e01a      	b.n	8001498 <DHT_getData+0xe4>
		timeout++;
 8001462:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001464:	3301      	adds	r3, #1
 8001466:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8001468:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800146a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800146e:	4293      	cmp	r3, r2
 8001470:	d912      	bls.n	8001498 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8001472:	b662      	cpsie	i
}
 8001474:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 800147c:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001484:	60da      	str	r2, [r3, #12]

			return data;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	461a      	mov	r2, r3
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001492:	e882 0003 	stmia.w	r2, {r0, r1}
 8001496:	e127      	b.n	80016e8 <DHT_getData+0x334>
	while(getLine()) {
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	889b      	ldrh	r3, [r3, #4]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4610      	mov	r0, r2
 80014a4:	f002 fdc4 	bl	8004030 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d0d9      	beq.n	8001462 <DHT_getData+0xae>
		}
	}
	timeout = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание подъёма
	while(!getLine()) {
 80014b2:	e01a      	b.n	80014ea <DHT_getData+0x136>
		timeout++;
 80014b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014b6:	3301      	adds	r3, #1
 80014b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 80014ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d912      	bls.n	80014ea <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 80014c4:	b662      	cpsie	i
}
 80014c6:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80014ce:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80014d6:	60da      	str	r2, [r3, #12]

			return data;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	461a      	mov	r2, r3
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80014e8:	e0fe      	b.n	80016e8 <DHT_getData+0x334>
	while(!getLine()) {
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	889b      	ldrh	r3, [r3, #4]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4610      	mov	r0, r2
 80014f6:	f002 fd9b 	bl	8004030 <HAL_GPIO_ReadPin>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d1d9      	bne.n	80014b4 <DHT_getData+0x100>
		}
	}
	timeout = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 8001504:	e012      	b.n	800152c <DHT_getData+0x178>
		timeout++;
 8001506:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001508:	3301      	adds	r3, #1
 800150a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 800150c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800150e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001512:	4293      	cmp	r3, r2
 8001514:	d90a      	bls.n	800152c <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 8001516:	b662      	cpsie	i
}
 8001518:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001526:	e882 0003 	stmia.w	r2, {r0, r1}
 800152a:	e0dd      	b.n	80016e8 <DHT_getData+0x334>
	while(getLine()) {
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	889b      	ldrh	r3, [r3, #4]
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f002 fd7a 	bl	8004030 <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d0e1      	beq.n	8001506 <DHT_getData+0x152>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001542:	4a16      	ldr	r2, [pc, #88]	@ (800159c <DHT_getData+0x1e8>)
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800154c:	6018      	str	r0, [r3, #0]
 800154e:	3304      	adds	r3, #4
 8001550:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001558:	e05d      	b.n	8001616 <DHT_getData+0x262>
		for(uint8_t b = 7; b != 255; b--) {
 800155a:	2307      	movs	r3, #7
 800155c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001560:	e050      	b.n	8001604 <DHT_getData+0x250>
			uint16_t hT = 0, lT = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	843b      	strh	r3, [r7, #32]
 8001566:	2300      	movs	r3, #0
 8001568:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 800156a:	e002      	b.n	8001572 <DHT_getData+0x1be>
 800156c:	8bfb      	ldrh	r3, [r7, #30]
 800156e:	3301      	adds	r3, #1
 8001570:	83fb      	strh	r3, [r7, #30]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	889b      	ldrh	r3, [r3, #4]
 800157a:	4619      	mov	r1, r3
 800157c:	4610      	mov	r0, r2
 800157e:	f002 fd57 	bl	8004030 <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	2b01      	cmp	r3, #1
 8001586:	d004      	beq.n	8001592 <DHT_getData+0x1de>
 8001588:	8bfb      	ldrh	r3, [r7, #30]
 800158a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800158e:	4293      	cmp	r3, r2
 8001590:	d1ec      	bne.n	800156c <DHT_getData+0x1b8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	84bb      	strh	r3, [r7, #36]	@ 0x24
			while(getLine()&& hT != 65535) hT++;
 8001596:	e006      	b.n	80015a6 <DHT_getData+0x1f2>
 8001598:	0800b72c 	.word	0x0800b72c
 800159c:	0800b734 	.word	0x0800b734
 80015a0:	8c3b      	ldrh	r3, [r7, #32]
 80015a2:	3301      	adds	r3, #1
 80015a4:	843b      	strh	r3, [r7, #32]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	889b      	ldrh	r3, [r3, #4]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4610      	mov	r0, r2
 80015b2:	f002 fd3d 	bl	8004030 <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d104      	bne.n	80015c6 <DHT_getData+0x212>
 80015bc:	8c3b      	ldrh	r3, [r7, #32]
 80015be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d1ec      	bne.n	80015a0 <DHT_getData+0x1ec>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80015c6:	8c3a      	ldrh	r2, [r7, #32]
 80015c8:	8bfb      	ldrh	r3, [r7, #30]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d915      	bls.n	80015fa <DHT_getData+0x246>
 80015ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015d2:	3328      	adds	r3, #40	@ 0x28
 80015d4:	443b      	add	r3, r7
 80015d6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	3328      	adds	r3, #40	@ 0x28
 80015f4:	443b      	add	r3, r7
 80015f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 80015fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015fe:	3b01      	subs	r3, #1
 8001600:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001604:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001608:	2bff      	cmp	r3, #255	@ 0xff
 800160a:	d1aa      	bne.n	8001562 <DHT_getData+0x1ae>
	for(uint8_t a = 0; a < 5; a++) {
 800160c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001610:	3301      	adds	r3, #1
 8001612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800161a:	2b04      	cmp	r3, #4
 800161c:	d99d      	bls.n	800155a <DHT_getData+0x1a6>
  __ASM volatile ("cpsie i" : : : "memory");
 800161e:	b662      	cpsie	i
}
 8001620:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8001622:	7b3a      	ldrb	r2, [r7, #12]
 8001624:	7b7b      	ldrb	r3, [r7, #13]
 8001626:	4413      	add	r3, r2
 8001628:	b2da      	uxtb	r2, r3
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	4413      	add	r3, r2
 800162e:	b2da      	uxtb	r2, r3
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	4413      	add	r3, r2
 8001634:	b2da      	uxtb	r2, r3
 8001636:	7c3b      	ldrb	r3, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d147      	bne.n	80016cc <DHT_getData+0x318>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	799b      	ldrb	r3, [r3, #6]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d133      	bne.n	80016ac <DHT_getData+0x2f8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001644:	7b3b      	ldrb	r3, [r7, #12]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	7b7a      	ldrb	r2, [r7, #13]
 800164a:	4313      	orrs	r3, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fbf9 	bl	8000e44 <__aeabi_i2f>
 8001652:	4603      	mov	r3, r0
 8001654:	4926      	ldr	r1, [pc, #152]	@ (80016f0 <DHT_getData+0x33c>)
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fd82 	bl	8000160 <__aeabi_fmul>
 800165c:	4603      	mov	r3, r0
 800165e:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	b25b      	sxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0e      	blt.n	8001686 <DHT_getData+0x2d2>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001668:	7bbb      	ldrb	r3, [r7, #14]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	4313      	orrs	r3, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fbe7 	bl	8000e44 <__aeabi_i2f>
 8001676:	4603      	mov	r3, r0
 8001678:	491d      	ldr	r1, [pc, #116]	@ (80016f0 <DHT_getData+0x33c>)
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fd70 	bl	8000160 <__aeabi_fmul>
 8001680:	4603      	mov	r3, r0
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	e012      	b.n	80016ac <DHT_getData+0x2f8>
			}	else {
				rawData[2] &= ~(1<<7);
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800168c:	b2db      	uxtb	r3, r3
 800168e:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8001690:	7bbb      	ldrb	r3, [r7, #14]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	4313      	orrs	r3, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fbd3 	bl	8000e44 <__aeabi_i2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	4914      	ldr	r1, [pc, #80]	@ (80016f4 <DHT_getData+0x340>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fd5c 	bl	8000160 <__aeabi_fmul>
 80016a8:	4603      	mov	r3, r0
 80016aa:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	799b      	ldrb	r3, [r3, #6]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10b      	bne.n	80016cc <DHT_getData+0x318>
			data.hum = (float)rawData[0];
 80016b4:	7b3b      	ldrb	r3, [r7, #12]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fbc0 	bl	8000e3c <__aeabi_ui2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80016c0:	7bbb      	ldrb	r3, [r7, #14]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fbba 	bl	8000e3c <__aeabi_ui2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	461a      	mov	r2, r3
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016e4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	3728      	adds	r7, #40	@ 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	3dcccccd 	.word	0x3dcccccd
 80016f4:	bdcccccd 	.word	0xbdcccccd

080016f8 <ssd1306_NetWorkView>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ssd1306_NetWorkView(){
 80016f8:	b510      	push	{r4, lr}
 80016fa:	b0ba      	sub	sp, #232	@ 0xe8
	uint8_t msg[100];
	WiFiInfo=ESP_CheckWiFi();
 80016fc:	a812      	add	r0, sp, #72	@ 0x48
 80016fe:	f7ff fc57 	bl	8000fb0 <ESP_CheckWiFi>
 8001702:	4a33      	ldr	r2, [pc, #204]	@ (80017d0 <ssd1306_NetWorkView+0xd8>)
 8001704:	ab12      	add	r3, sp, #72	@ 0x48
 8001706:	4614      	mov	r4, r2
 8001708:	a91f      	add	r1, sp, #124	@ 0x7c
 800170a:	f853 0b04 	ldr.w	r0, [r3], #4
 800170e:	428b      	cmp	r3, r1
 8001710:	f842 0b04 	str.w	r0, [r2], #4
 8001714:	d1f9      	bne.n	800170a <ssd1306_NetWorkView+0x12>
 8001716:	781b      	ldrb	r3, [r3, #0]
	IPInfo=ESP_GetIPInfo();
 8001718:	4668      	mov	r0, sp
	WiFiInfo=ESP_CheckWiFi();
 800171a:	7013      	strb	r3, [r2, #0]
	IPInfo=ESP_GetIPInfo();
 800171c:	f7ff fce4 	bl	80010e8 <ESP_GetIPInfo>
 8001720:	2244      	movs	r2, #68	@ 0x44
 8001722:	4669      	mov	r1, sp
 8001724:	482b      	ldr	r0, [pc, #172]	@ (80017d4 <ssd1306_NetWorkView+0xdc>)
 8001726:	f006 fcac 	bl	8008082 <memcpy>
	ssd1306_Fill(Black);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 fbd2 	bl	8001ed4 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001730:	2100      	movs	r1, #0
 8001732:	4608      	mov	r0, r1
 8001734:	f000 fd26 	bl	8002184 <ssd1306_SetCursor>
	sprintf(msg, "NetWork %d",WiFiInfo.rssi);
 8001738:	f994 2033 	ldrsb.w	r2, [r4, #51]	@ 0x33
 800173c:	4926      	ldr	r1, [pc, #152]	@ (80017d8 <ssd1306_NetWorkView+0xe0>)
 800173e:	a821      	add	r0, sp, #132	@ 0x84
 8001740:	f006 faf6 	bl	8007d30 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001744:	4a25      	ldr	r2, [pc, #148]	@ (80017dc <ssd1306_NetWorkView+0xe4>)
 8001746:	2301      	movs	r3, #1
 8001748:	ca06      	ldmia	r2, {r1, r2}
 800174a:	a821      	add	r0, sp, #132	@ 0x84
 800174c:	f000 fcf4 	bl	8002138 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
	sprintf(msg, "HarmonyNextIOT");
	ssd1306_WriteString(msg, Font_7x10, White);
 8001750:	4c23      	ldr	r4, [pc, #140]	@ (80017e0 <ssd1306_NetWorkView+0xe8>)
	ssd1306_SetCursor(0, 18);
 8001752:	2112      	movs	r1, #18
 8001754:	2000      	movs	r0, #0
 8001756:	f000 fd15 	bl	8002184 <ssd1306_SetCursor>
	sprintf(msg, "HarmonyNextIOT");
 800175a:	4922      	ldr	r1, [pc, #136]	@ (80017e4 <ssd1306_NetWorkView+0xec>)
 800175c:	a821      	add	r0, sp, #132	@ 0x84
 800175e:	f006 fc7a 	bl	8008056 <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001762:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001766:	2301      	movs	r3, #1
 8001768:	a821      	add	r0, sp, #132	@ 0x84
 800176a:	f000 fce5 	bl	8002138 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 31);
 800176e:	211f      	movs	r1, #31
 8001770:	2000      	movs	r0, #0
 8001772:	f000 fd07 	bl	8002184 <ssd1306_SetCursor>
	sprintf(msg, "AP :%s",IPInfo.AP_IP);
 8001776:	4a17      	ldr	r2, [pc, #92]	@ (80017d4 <ssd1306_NetWorkView+0xdc>)
 8001778:	491b      	ldr	r1, [pc, #108]	@ (80017e8 <ssd1306_NetWorkView+0xf0>)
 800177a:	a821      	add	r0, sp, #132	@ 0x84
 800177c:	f006 fad8 	bl	8007d30 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001780:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001784:	2301      	movs	r3, #1
 8001786:	a821      	add	r0, sp, #132	@ 0x84
 8001788:	f000 fcd6 	bl	8002138 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 43);
 800178c:	212b      	movs	r1, #43	@ 0x2b
 800178e:	2000      	movs	r0, #0
 8001790:	f000 fcf8 	bl	8002184 <ssd1306_SetCursor>
	sprintf(msg, "%s",WiFiInfo.ssid);
 8001794:	490e      	ldr	r1, [pc, #56]	@ (80017d0 <ssd1306_NetWorkView+0xd8>)
 8001796:	a821      	add	r0, sp, #132	@ 0x84
 8001798:	f006 fc5d 	bl	8008056 <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 800179c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017a0:	2301      	movs	r3, #1
 80017a2:	a821      	add	r0, sp, #132	@ 0x84
 80017a4:	f000 fcc8 	bl	8002138 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 54);
 80017a8:	2136      	movs	r1, #54	@ 0x36
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 fcea 	bl	8002184 <ssd1306_SetCursor>
	sprintf(msg, "STA:%s",IPInfo.STA_IP);
 80017b0:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <ssd1306_NetWorkView+0xf4>)
 80017b2:	490f      	ldr	r1, [pc, #60]	@ (80017f0 <ssd1306_NetWorkView+0xf8>)
 80017b4:	a821      	add	r0, sp, #132	@ 0x84
 80017b6:	f006 fabb 	bl	8007d30 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 80017ba:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017be:	2301      	movs	r3, #1
 80017c0:	a821      	add	r0, sp, #132	@ 0x84
 80017c2:	f000 fcb9 	bl	8002138 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80017c6:	f000 fba7 	bl	8001f18 <ssd1306_UpdateScreen>
}
 80017ca:	b03a      	add	sp, #232	@ 0xe8
 80017cc:	bd10      	pop	{r4, pc}
 80017ce:	bf00      	nop
 80017d0:	20000268 	.word	0x20000268
 80017d4:	20000224 	.word	0x20000224
 80017d8:	0800b78c 	.word	0x0800b78c
 80017dc:	20000018 	.word	0x20000018
 80017e0:	20000010 	.word	0x20000010
 80017e4:	0800b797 	.word	0x0800b797
 80017e8:	0800b7a6 	.word	0x0800b7a6
 80017ec:	20000246 	.word	0x20000246
 80017f0:	0800b7ad 	.word	0x0800b7ad

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b510      	push	{r4, lr}
 80017f6:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f8:	2214      	movs	r2, #20
 80017fa:	2100      	movs	r1, #0
 80017fc:	a80c      	add	r0, sp, #48	@ 0x30
 80017fe:	f006 fb14 	bl	8007e2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001802:	2214      	movs	r2, #20
 8001804:	2100      	movs	r1, #0
 8001806:	eb0d 0002 	add.w	r0, sp, r2
 800180a:	f006 fb0e 	bl	8007e2a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800180e:	2210      	movs	r2, #16
 8001810:	2100      	movs	r1, #0
 8001812:	a801      	add	r0, sp, #4
 8001814:	f006 fb09 	bl	8007e2a <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001818:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800181a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800181e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001820:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001824:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001828:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182c:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182e:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001830:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001832:	f003 f8d9 	bl	80049e8 <HAL_RCC_OscConfig>
 8001836:	b108      	cbz	r0, 800183c <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183a:	e7fe      	b.n	800183a <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001846:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001848:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800184c:	4621      	mov	r1, r4
 800184e:	a805      	add	r0, sp, #20
 8001850:	f003 fb4c 	bl	8004eec <HAL_RCC_ClockConfig>
 8001854:	b108      	cbz	r0, 800185a <SystemClock_Config+0x66>
 8001856:	b672      	cpsid	i
  while (1)
 8001858:	e7fe      	b.n	8001858 <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800185a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001860:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001862:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001864:	f003 fcd0 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 8001868:	b108      	cbz	r0, 800186e <SystemClock_Config+0x7a>
 800186a:	b672      	cpsid	i
  while (1)
 800186c:	e7fe      	b.n	800186c <SystemClock_Config+0x78>
}
 800186e:	b014      	add	sp, #80	@ 0x50
 8001870:	bd10      	pop	{r4, pc}
	...

08001874 <main>:
{
 8001874:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001878:	4ca2      	ldr	r4, [pc, #648]	@ (8001b04 <main+0x290>)
{
 800187a:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 800187c:	f001 f8c8 	bl	8002a10 <HAL_Init>
  SystemClock_Config();
 8001880:	f7ff ffb8 	bl	80017f4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	2210      	movs	r2, #16
 8001886:	2100      	movs	r1, #0
 8001888:	a814      	add	r0, sp, #80	@ 0x50
 800188a:	f006 face 	bl	8007e2a <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2500      	movs	r5, #0
 8001892:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001894:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	f043 0310 	orr.w	r3, r3, #16
 800189a:	61a3      	str	r3, [r4, #24]
 800189c:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	9303      	str	r3, [sp, #12]
 80018a6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a8:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018aa:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ac:	f043 0320 	orr.w	r3, r3, #32
 80018b0:	61a3      	str	r3, [r4, #24]
 80018b2:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018b4:	4894      	ldr	r0, [pc, #592]	@ (8001b08 <main+0x294>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b6:	f003 0320 	and.w	r3, r3, #32
 80018ba:	9304      	str	r3, [sp, #16]
 80018bc:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	69a3      	ldr	r3, [r4, #24]
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	61a3      	str	r3, [r4, #24]
 80018c6:	69a3      	ldr	r3, [r4, #24]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	9305      	str	r3, [sp, #20]
 80018ce:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	69a3      	ldr	r3, [r4, #24]
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	61a3      	str	r3, [r4, #24]
 80018d8:	69a3      	ldr	r3, [r4, #24]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	9306      	str	r3, [sp, #24]
 80018e0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018e2:	f002 fbbc 	bl	800405e <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80018e6:	4888      	ldr	r0, [pc, #544]	@ (8001b08 <main+0x294>)
 80018e8:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	e9cd 7514 	strd	r7, r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ee:	9716      	str	r7, [sp, #88]	@ 0x58
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f002 fa1a 	bl	8003d28 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	4884      	ldr	r0, [pc, #528]	@ (8001b08 <main+0x294>)
 80018f6:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	e9cd 5616 	strd	r5, r6, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f002 fa12 	bl	8003d28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin|KEY_2_Pin|KEY_3_Pin;
 8001904:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	487f      	ldr	r0, [pc, #508]	@ (8001b08 <main+0x294>)
 800190a:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190c:	e9cd 3514 	strd	r3, r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001910:	9616      	str	r6, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f002 fa09 	bl	8003d28 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001916:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001918:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800191a:	433b      	orrs	r3, r7
 800191c:	6163      	str	r3, [r4, #20]
 800191e:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001920:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001922:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001924:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800192a:	f001 ff24 	bl	8003776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800192e:	200b      	movs	r0, #11
 8001930:	f001 ff3d 	bl	80037ae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001934:	462a      	mov	r2, r5
 8001936:	4629      	mov	r1, r5
 8001938:	200c      	movs	r0, #12
 800193a:	f001 ff1c 	bl	8003776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800193e:	200c      	movs	r0, #12
 8001940:	f001 ff35 	bl	80037ae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001944:	462a      	mov	r2, r5
 8001946:	4629      	mov	r1, r5
 8001948:	200d      	movs	r0, #13
 800194a:	f001 ff14 	bl	8003776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800194e:	200d      	movs	r0, #13
 8001950:	f001 ff2d 	bl	80037ae <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8001954:	4c6d      	ldr	r4, [pc, #436]	@ (8001b0c <main+0x298>)
 8001956:	4b6e      	ldr	r3, [pc, #440]	@ (8001b10 <main+0x29c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001958:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 800195a:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800195c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001960:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001962:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001966:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
 800196a:	9516      	str	r5, [sp, #88]	@ 0x58
  hadc1.Init.ContinuousConvMode = ENABLE;
 800196c:	7327      	strb	r7, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800196e:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001970:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001972:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001974:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001976:	f001 f8d1 	bl	8002b1c <HAL_ADC_Init>
 800197a:	b108      	cbz	r0, 8001980 <main+0x10c>
 800197c:	b672      	cpsid	i
  while (1)
 800197e:	e7fe      	b.n	800197e <main+0x10a>
  sConfig.Channel = ADC_CHANNEL_4;
 8001980:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001982:	e9cd 3714 	strd	r3, r7, [sp, #80]	@ 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001986:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001988:	4620      	mov	r0, r4
 800198a:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800198c:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198e:	f001 fc19 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001992:	b108      	cbz	r0, 8001998 <main+0x124>
 8001994:	b672      	cpsid	i
  while (1)
 8001996:	e7fe      	b.n	8001996 <main+0x122>
  sConfig.Channel = ADC_CHANNEL_5;
 8001998:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199a:	4620      	mov	r0, r4
 800199c:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800199e:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a2:	f001 fc0f 	bl	80031c4 <HAL_ADC_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b108      	cbz	r0, 80019ae <main+0x13a>
 80019aa:	b672      	cpsid	i
  while (1)
 80019ac:	e7fe      	b.n	80019ac <main+0x138>
  hi2c1.Instance = I2C1;
 80019ae:	4859      	ldr	r0, [pc, #356]	@ (8001b14 <main+0x2a0>)
  hi2c1.Init.ClockSpeed = 100000;
 80019b0:	4959      	ldr	r1, [pc, #356]	@ (8001b18 <main+0x2a4>)
 80019b2:	4a5a      	ldr	r2, [pc, #360]	@ (8001b1c <main+0x2a8>)
  hi2c1.Init.OwnAddress1 = 0;
 80019b4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80019b8:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019c8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ca:	f002 fb61 	bl	8004090 <HAL_I2C_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b108      	cbz	r0, 80019d6 <main+0x162>
 80019d2:	b672      	cpsid	i
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <main+0x160>
  huart1.Init.BaudRate = 115200;
 80019d6:	f44f 35e1 	mov.w	r5, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019da:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 80019dc:	4850      	ldr	r0, [pc, #320]	@ (8001b20 <main+0x2ac>)
  huart1.Init.BaudRate = 115200;
 80019de:	4a51      	ldr	r2, [pc, #324]	@ (8001b24 <main+0x2b0>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e4:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019e8:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ea:	61c3      	str	r3, [r0, #28]
  huart1.Init.BaudRate = 115200;
 80019ec:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019f0:	f004 fb31 	bl	8006056 <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b108      	cbz	r0, 80019fc <main+0x188>
 80019f8:	b672      	cpsid	i
  while (1)
 80019fa:	e7fe      	b.n	80019fa <main+0x186>
  huart3.Instance = USART3;
 80019fc:	484a      	ldr	r0, [pc, #296]	@ (8001b28 <main+0x2b4>)
 80019fe:	4a4b      	ldr	r2, [pc, #300]	@ (8001b2c <main+0x2b8>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a00:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001a04:	e9c0 2500 	strd	r2, r5, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a08:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a10:	f004 fb21 	bl	8006056 <HAL_UART_Init>
 8001a14:	4605      	mov	r5, r0
 8001a16:	b108      	cbz	r0, 8001a1c <main+0x1a8>
 8001a18:	b672      	cpsid	i
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <main+0x1a6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	2210      	movs	r2, #16
 8001a20:	a809      	add	r0, sp, #36	@ 0x24
 8001a22:	f006 fa02 	bl	8007e2a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a26:	221c      	movs	r2, #28
 8001a28:	4629      	mov	r1, r5
 8001a2a:	a80d      	add	r0, sp, #52	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	e9cd 5507 	strd	r5, r5, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a30:	f006 f9fb 	bl	8007e2a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a34:	2220      	movs	r2, #32
 8001a36:	4629      	mov	r1, r5
 8001a38:	a814      	add	r0, sp, #80	@ 0x50
 8001a3a:	f006 f9f6 	bl	8007e2a <memset>
  htim1.Init.Prescaler = 72;
 8001a3e:	2348      	movs	r3, #72	@ 0x48
  htim1.Instance = TIM1;
 8001a40:	4c3b      	ldr	r4, [pc, #236]	@ (8001b30 <main+0x2bc>)
  htim1.Init.Prescaler = 72;
 8001a42:	4a3c      	ldr	r2, [pc, #240]	@ (8001b34 <main+0x2c0>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a44:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 72;
 8001a46:	e9c4 2300 	strd	r2, r3, [r4]
  htim1.Init.Period = 100-1;
 8001a4a:	2363      	movs	r3, #99	@ 0x63
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a50:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a54:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a56:	f003 fc8d 	bl	8005374 <HAL_TIM_Base_Init>
 8001a5a:	b108      	cbz	r0, 8001a60 <main+0x1ec>
 8001a5c:	b672      	cpsid	i
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <main+0x1ea>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a64:	4620      	mov	r0, r4
 8001a66:	a909      	add	r1, sp, #36	@ 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a68:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a6a:	f003 fed9 	bl	8005820 <HAL_TIM_ConfigClockSource>
 8001a6e:	b108      	cbz	r0, 8001a74 <main+0x200>
 8001a70:	b672      	cpsid	i
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <main+0x1fe>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a74:	4620      	mov	r0, r4
 8001a76:	f003 fd17 	bl	80054a8 <HAL_TIM_PWM_Init>
 8001a7a:	b108      	cbz	r0, 8001a80 <main+0x20c>
 8001a7c:	b672      	cpsid	i
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <main+0x20a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a80:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a84:	a907      	add	r1, sp, #28
 8001a86:	4620      	mov	r0, r4
 8001a88:	f004 fa36 	bl	8005ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	b108      	cbz	r0, 8001a92 <main+0x21e>
 8001a8e:	b672      	cpsid	i
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <main+0x21c>
  sConfigOC.Pulse = 0;
 8001a92:	2200      	movs	r2, #0
 8001a94:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a96:	4826      	ldr	r0, [pc, #152]	@ (8001b30 <main+0x2bc>)
 8001a98:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigOC.Pulse = 0;
 8001a9a:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a9e:	e9cd 220f 	strd	r2, r2, [sp, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aa2:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa6:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa8:	f003 fdf8 	bl	800569c <HAL_TIM_PWM_ConfigChannel>
 8001aac:	b108      	cbz	r0, 8001ab2 <main+0x23e>
 8001aae:	b672      	cpsid	i
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <main+0x23c>
  sConfigOC.Pulse = 36;
 8001ab2:	2324      	movs	r3, #36	@ 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001ab4:	f44f 7780 	mov.w	r7, #256	@ 0x100
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab8:	2204      	movs	r2, #4
 8001aba:	481d      	ldr	r0, [pc, #116]	@ (8001b30 <main+0x2bc>)
 8001abc:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigOC.Pulse = 36;
 8001abe:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001ac0:	9712      	str	r7, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac2:	f003 fdeb 	bl	800569c <HAL_TIM_PWM_ConfigChannel>
 8001ac6:	b108      	cbz	r0, 8001acc <main+0x258>
 8001ac8:	b672      	cpsid	i
  while (1)
 8001aca:	e7fe      	b.n	8001aca <main+0x256>
  sConfigOC.Pulse = 0;
 8001acc:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ace:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4817      	ldr	r0, [pc, #92]	@ (8001b30 <main+0x2bc>)
 8001ad4:	a90d      	add	r1, sp, #52	@ 0x34
 8001ad6:	f003 fde1 	bl	800569c <HAL_TIM_PWM_ConfigChannel>
 8001ada:	b108      	cbz	r0, 8001ae0 <main+0x26c>
 8001adc:	b672      	cpsid	i
  while (1)
 8001ade:	e7fe      	b.n	8001ade <main+0x26a>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ae4:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ae8:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aec:	9018      	str	r0, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aee:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001af0:	a914      	add	r1, sp, #80	@ 0x50
 8001af2:	480f      	ldr	r0, [pc, #60]	@ (8001b30 <main+0x2bc>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001af4:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001af6:	f004 fa5d 	bl	8005fb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001afa:	4606      	mov	r6, r0
 8001afc:	b1e0      	cbz	r0, 8001b38 <main+0x2c4>
 8001afe:	b672      	cpsid	i
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <main+0x28c>
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	20000514 	.word	0x20000514
 8001b10:	40012400 	.word	0x40012400
 8001b14:	2000044c 	.word	0x2000044c
 8001b18:	40005400 	.word	0x40005400
 8001b1c:	000186a0 	.word	0x000186a0
 8001b20:	20000374 	.word	0x20000374
 8001b24:	40013800 	.word	0x40013800
 8001b28:	2000032c 	.word	0x2000032c
 8001b2c:	40004800 	.word	0x40004800
 8001b30:	20000404 	.word	0x20000404
 8001b34:	40012c00 	.word	0x40012c00
  HAL_TIM_MspPostInit(&htim1);
 8001b38:	4886      	ldr	r0, [pc, #536]	@ (8001d54 <main+0x4e0>)
 8001b3a:	f000 fcd3 	bl	80024e4 <HAL_TIM_MspPostInit>
  hadc2.Instance = ADC2;
 8001b3e:	4d86      	ldr	r5, [pc, #536]	@ (8001d58 <main+0x4e4>)
 8001b40:	4b86      	ldr	r3, [pc, #536]	@ (8001d5c <main+0x4e8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b42:	e9cd 6614 	strd	r6, r6, [sp, #80]	@ 0x50
 8001b46:	9616      	str	r6, [sp, #88]	@ 0x58
  hadc2.Instance = ADC2;
 8001b48:	602b      	str	r3, [r5, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b4a:	60af      	str	r7, [r5, #8]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b4c:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001b50:	2701      	movs	r7, #1
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b52:	752e      	strb	r6, [r5, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b54:	606e      	str	r6, [r5, #4]
  hadc2.Init.NbrOfConversion = 3;
 8001b56:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b58:	4628      	mov	r0, r5
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001b5a:	732f      	strb	r7, [r5, #12]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b5c:	61eb      	str	r3, [r5, #28]
  hadc2.Init.NbrOfConversion = 3;
 8001b5e:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b60:	f000 ffdc 	bl	8002b1c <HAL_ADC_Init>
 8001b64:	b108      	cbz	r0, 8001b6a <main+0x2f6>
 8001b66:	b672      	cpsid	i
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <main+0x2f4>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b6a:	9016      	str	r0, [sp, #88]	@ 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b6c:	a914      	add	r1, sp, #80	@ 0x50
 8001b6e:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b70:	e9cd 7714 	strd	r7, r7, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b74:	f001 fb26 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001b78:	b108      	cbz	r0, 8001b7e <main+0x30a>
 8001b7a:	b672      	cpsid	i
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <main+0x308>
  sConfig.Channel = ADC_CHANNEL_2;
 8001b7e:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b80:	4628      	mov	r0, r5
 8001b82:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b84:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b88:	f001 fb1c 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001b8c:	b108      	cbz	r0, 8001b92 <main+0x31e>
 8001b8e:	b672      	cpsid	i
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <main+0x31c>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b92:	4628      	mov	r0, r5
 8001b94:	a914      	add	r1, sp, #80	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b96:	e9cd 6614 	strd	r6, r6, [sp, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b9a:	f001 fb13 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001b9e:	4605      	mov	r5, r0
 8001ba0:	b108      	cbz	r0, 8001ba6 <main+0x332>
 8001ba2:	b672      	cpsid	i
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <main+0x330>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	2210      	movs	r2, #16
 8001baa:	a80d      	add	r0, sp, #52	@ 0x34
 8001bac:	f006 f93d 	bl	8007e2a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb0:	221c      	movs	r2, #28
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	a814      	add	r0, sp, #80	@ 0x50
  htim3.Instance = TIM3;
 8001bb6:	4e6a      	ldr	r6, [pc, #424]	@ (8001d60 <main+0x4ec>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	e9cd 5509 	strd	r5, r5, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbc:	f006 f935 	bl	8007e2a <memset>
  htim3.Instance = TIM3;
 8001bc0:	4b68      	ldr	r3, [pc, #416]	@ (8001d64 <main+0x4f0>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bc2:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 0;
 8001bc4:	e9c6 3500 	strd	r3, r5, [r6]
  htim3.Init.Period = 720;
 8001bc8:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	60b5      	str	r5, [r6, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bce:	e9c6 3503 	strd	r3, r5, [r6, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bd4:	f003 fbce 	bl	8005374 <HAL_TIM_Base_Init>
 8001bd8:	b108      	cbz	r0, 8001bde <main+0x36a>
 8001bda:	b672      	cpsid	i
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <main+0x368>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be2:	4630      	mov	r0, r6
 8001be4:	a90d      	add	r1, sp, #52	@ 0x34
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be6:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be8:	f003 fe1a 	bl	8005820 <HAL_TIM_ConfigClockSource>
 8001bec:	b108      	cbz	r0, 8001bf2 <main+0x37e>
 8001bee:	b672      	cpsid	i
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <main+0x37c>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bf2:	485b      	ldr	r0, [pc, #364]	@ (8001d60 <main+0x4ec>)
 8001bf4:	f003 fc58 	bl	80054a8 <HAL_TIM_PWM_Init>
 8001bf8:	b108      	cbz	r0, 8001bfe <main+0x38a>
 8001bfa:	b672      	cpsid	i
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <main+0x388>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c02:	a909      	add	r1, sp, #36	@ 0x24
 8001c04:	4856      	ldr	r0, [pc, #344]	@ (8001d60 <main+0x4ec>)
 8001c06:	f004 f977 	bl	8005ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	b108      	cbz	r0, 8001c12 <main+0x39e>
 8001c0e:	b672      	cpsid	i
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <main+0x39c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c12:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c14:	9016      	str	r0, [sp, #88]	@ 0x58
  sConfigOC.Pulse = 0;
 8001c16:	e9cd 3014 	strd	r3, r0, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c1a:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1c:	a914      	add	r1, sp, #80	@ 0x50
 8001c1e:	4850      	ldr	r0, [pc, #320]	@ (8001d60 <main+0x4ec>)
 8001c20:	f003 fd3c 	bl	800569c <HAL_TIM_PWM_ConfigChannel>
 8001c24:	4605      	mov	r5, r0
 8001c26:	b108      	cbz	r0, 8001c2c <main+0x3b8>
 8001c28:	b672      	cpsid	i
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <main+0x3b6>
  HAL_TIM_MspPostInit(&htim3);
 8001c2c:	484c      	ldr	r0, [pc, #304]	@ (8001d60 <main+0x4ec>)
 8001c2e:	f000 fc59 	bl	80024e4 <HAL_TIM_MspPostInit>
  HAL_ADC_Start(&hadc1);
 8001c32:	484d      	ldr	r0, [pc, #308]	@ (8001d68 <main+0x4f4>)
 8001c34:	f001 f84a 	bl	8002ccc <HAL_ADC_Start>
  ssd1306_Init();
 8001c38:	f000 f8de 	bl	8001df8 <ssd1306_Init>
  ssd1306_TestFonts();
 8001c3c:	f000 faba 	bl	80021b4 <ssd1306_TestFonts>
  HAL_TIM_Base_Start(&htim1);
 8001c40:	4844      	ldr	r0, [pc, #272]	@ (8001d54 <main+0x4e0>)
 8001c42:	f003 fbe7 	bl	8005414 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c46:	4629      	mov	r1, r5
 8001c48:	4842      	ldr	r0, [pc, #264]	@ (8001d54 <main+0x4e0>)
 8001c4a:	f003 fc85 	bl	8005558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c4e:	2104      	movs	r1, #4
 8001c50:	4840      	ldr	r0, [pc, #256]	@ (8001d54 <main+0x4e0>)
 8001c52:	f003 fc81 	bl	8005558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c56:	2108      	movs	r1, #8
 8001c58:	483e      	ldr	r0, [pc, #248]	@ (8001d54 <main+0x4e0>)
 8001c5a:	f003 fc7d 	bl	8005558 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8001c5e:	4840      	ldr	r0, [pc, #256]	@ (8001d60 <main+0x4ec>)
 8001c60:	f003 fbd8 	bl	8005414 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c64:	4629      	mov	r1, r5
 8001c66:	483e      	ldr	r0, [pc, #248]	@ (8001d60 <main+0x4ec>)
 8001c68:	f003 fc76 	bl	8005558 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)PUMP, 2);
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	493f      	ldr	r1, [pc, #252]	@ (8001d6c <main+0x4f8>)
 8001c70:	483d      	ldr	r0, [pc, #244]	@ (8001d68 <main+0x4f4>)
 8001c72:	f001 f8d9 	bl	8002e28 <HAL_ADC_Start_DMA>
  DHT_sensor DHT11_Sensor = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8001c76:	220e      	movs	r2, #14
 8001c78:	4629      	mov	r1, r5
 8001c7a:	f10d 0056 	add.w	r0, sp, #86	@ 0x56
 8001c7e:	f006 f8d4 	bl	8007e2a <memset>
 8001c82:	2301      	movs	r3, #1
 8001c84:	4f3a      	ldr	r7, [pc, #232]	@ (8001d70 <main+0x4fc>)
  ESP_UART_Init(&huart3);
 8001c86:	483b      	ldr	r0, [pc, #236]	@ (8001d74 <main+0x500>)
  DHT_sensor DHT11_Sensor = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8001c88:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
 8001c8c:	9714      	str	r7, [sp, #80]	@ 0x50
  ESP_UART_Init(&huart3);
 8001c8e:	f7ff f97b 	bl	8000f88 <ESP_UART_Init>
  ESP_INIT_BASE();
 8001c92:	f7ff fb11 	bl	80012b8 <ESP_INIT_BASE>
  ssd1306_NetWorkView();
 8001c96:	f7ff fd2f 	bl	80016f8 <ssd1306_NetWorkView>
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001c9a:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 8001d68 <main+0x4f4>
 8001c9e:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8001d78 <main+0x504>
 8001ca2:	4650      	mov	r0, sl
 8001ca4:	f001 f99e 	bl	8002fe4 <HAL_ADC_GetValue>
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001ca8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8001cac:	f8a9 0000 	strh.w	r0, [r9]
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001cb0:	4638      	mov	r0, r7
 8001cb2:	f002 f9bd 	bl	8004030 <HAL_GPIO_ReadPin>
 8001cb6:	4d31      	ldr	r5, [pc, #196]	@ (8001d7c <main+0x508>)
 8001cb8:	b140      	cbz	r0, 8001ccc <main+0x458>
	    	if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8001cba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	f002 f9b6 	bl	8004030 <HAL_GPIO_ReadPin>
 8001cc4:	b110      	cbz	r0, 8001ccc <main+0x458>
	    	Period_-=10;
 8001cc6:	882b      	ldrh	r3, [r5, #0]
 8001cc8:	3b0a      	subs	r3, #10
 8001cca:	802b      	strh	r3, [r5, #0]
	    if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001ccc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cd0:	4638      	mov	r0, r7
 8001cd2:	f002 f9ad 	bl	8004030 <HAL_GPIO_ReadPin>
 8001cd6:	b158      	cbz	r0, 8001cf0 <main+0x47c>
	        if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8001cd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cdc:	4638      	mov	r0, r7
 8001cde:	f002 f9a7 	bl	8004030 <HAL_GPIO_ReadPin>
 8001ce2:	b128      	cbz	r0, 8001cf0 <main+0x47c>
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001ce4:	2200      	movs	r2, #0
	    	    	Period_--;
 8001ce6:	882b      	ldrh	r3, [r5, #0]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	802b      	strh	r3, [r5, #0]
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	63da      	str	r2, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001cf0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cf4:	4638      	mov	r0, r7
 8001cf6:	f002 f99b 	bl	8004030 <HAL_GPIO_ReadPin>
 8001cfa:	b158      	cbz	r0, 8001d14 <main+0x4a0>
	    	 if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001cfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d00:	4638      	mov	r0, r7
 8001d02:	f002 f995 	bl	8004030 <HAL_GPIO_ReadPin>
 8001d06:	b128      	cbz	r0, 8001d14 <main+0x4a0>
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001d08:	220a      	movs	r2, #10
	    		    	Period_++;
 8001d0a:	882b      	ldrh	r3, [r5, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	802b      	strh	r3, [r5, #0]
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	63da      	str	r2, [r3, #60]	@ 0x3c
	    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001d14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d18:	4638      	mov	r0, r7
 8001d1a:	f002 f989 	bl	8004030 <HAL_GPIO_ReadPin>
 8001d1e:	b140      	cbz	r0, 8001d32 <main+0x4be>
		    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001d20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d24:	4638      	mov	r0, r7
 8001d26:	f002 f983 	bl	8004030 <HAL_GPIO_ReadPin>
 8001d2a:	b110      	cbz	r0, 8001d32 <main+0x4be>
		    	Period_+=10;
 8001d2c:	882b      	ldrh	r3, [r5, #0]
 8001d2e:	330a      	adds	r3, #10
 8001d30:	802b      	strh	r3, [r5, #0]
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 8001d32:	46e8      	mov	r8, sp
 8001d34:	a914      	add	r1, sp, #80	@ 0x50
 8001d36:	4640      	mov	r0, r8
 8001d38:	f7ff fb3c 	bl	80013b4 <DHT_getData>
 8001d3c:	e898 0003 	ldmia.w	r8, {r0, r1}
		    __HAL_TIM_SET_PRESCALER(&htim1, Period_);
 8001d40:	6822      	ldr	r2, [r4, #0]
 8001d42:	882b      	ldrh	r3, [r5, #0]
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 8001d44:	f8df b038 	ldr.w	fp, [pc, #56]	@ 8001d80 <main+0x50c>
		    __HAL_TIM_SET_PRESCALER(&htim1, Period_);
 8001d48:	6293      	str	r3, [r2, #40]	@ 0x28
		  __HAL_TIM_SET_COMPARE(&htim3, 1, Period_);
 8001d4a:	6832      	ldr	r2, [r6, #0]
	    DHT11_Info = DHT_getData(&DHT11_Sensor);
 8001d4c:	e88b 0003 	stmia.w	fp, {r0, r1}
		  __HAL_TIM_SET_COMPARE(&htim3, 1, Period_);
 8001d50:	6413      	str	r3, [r2, #64]	@ 0x40
  {
 8001d52:	e7a6      	b.n	8001ca2 <main+0x42e>
 8001d54:	20000404 	.word	0x20000404
 8001d58:	200004e4 	.word	0x200004e4
 8001d5c:	40012800 	.word	0x40012800
 8001d60:	200003bc 	.word	0x200003bc
 8001d64:	40000400 	.word	0x40000400
 8001d68:	20000514 	.word	0x20000514
 8001d6c:	2000029e 	.word	0x2000029e
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	2000032c 	.word	0x2000032c
 8001d78:	200002a2 	.word	0x200002a2
 8001d7c:	20000006 	.word	0x20000006
 8001d80:	2000021c 	.word	0x2000021c

08001d84 <Error_Handler>:
 8001d84:	b672      	cpsid	i
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <Error_Handler+0x2>

08001d88 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af04      	add	r7, sp, #16
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	2301      	movs	r3, #1
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2301      	movs	r3, #1
 8001dae:	2200      	movs	r2, #0
 8001db0:	2178      	movs	r1, #120	@ 0x78
 8001db2:	4803      	ldr	r0, [pc, #12]	@ (8001dc0 <ssd1306_WriteCommand+0x2c>)
 8001db4:	f002 fab0 	bl	8004318 <HAL_I2C_Mem_Write>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	2000044c 	.word	0x2000044c

08001dc4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af04      	add	r7, sp, #16
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	2240      	movs	r2, #64	@ 0x40
 8001de2:	2178      	movs	r1, #120	@ 0x78
 8001de4:	4803      	ldr	r0, [pc, #12]	@ (8001df4 <ssd1306_WriteData+0x30>)
 8001de6:	f002 fa97 	bl	8004318 <HAL_I2C_Mem_Write>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	2000044c 	.word	0x2000044c

08001df8 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001dfc:	f7ff ffc4 	bl	8001d88 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e00:	2064      	movs	r0, #100	@ 0x64
 8001e02:	f000 fe67 	bl	8002ad4 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001e06:	20ae      	movs	r0, #174	@ 0xae
 8001e08:	f7ff ffc4 	bl	8001d94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001e0c:	2020      	movs	r0, #32
 8001e0e:	f7ff ffc1 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff ffbe 	bl	8001d94 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e18:	20b0      	movs	r0, #176	@ 0xb0
 8001e1a:	f7ff ffbb 	bl	8001d94 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e1e:	20c8      	movs	r0, #200	@ 0xc8
 8001e20:	f7ff ffb8 	bl	8001d94 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff ffb5 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e2a:	2010      	movs	r0, #16
 8001e2c:	f7ff ffb2 	bl	8001d94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e30:	2040      	movs	r0, #64	@ 0x40
 8001e32:	f7ff ffaf 	bl	8001d94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001e36:	2081      	movs	r0, #129	@ 0x81
 8001e38:	f7ff ffac 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001e3c:	20ff      	movs	r0, #255	@ 0xff
 8001e3e:	f7ff ffa9 	bl	8001d94 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001e42:	20a1      	movs	r0, #161	@ 0xa1
 8001e44:	f7ff ffa6 	bl	8001d94 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001e48:	20a6      	movs	r0, #166	@ 0xa6
 8001e4a:	f7ff ffa3 	bl	8001d94 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001e4e:	20a8      	movs	r0, #168	@ 0xa8
 8001e50:	f7ff ffa0 	bl	8001d94 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001e54:	203f      	movs	r0, #63	@ 0x3f
 8001e56:	f7ff ff9d 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e5a:	20a4      	movs	r0, #164	@ 0xa4
 8001e5c:	f7ff ff9a 	bl	8001d94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001e60:	20d3      	movs	r0, #211	@ 0xd3
 8001e62:	f7ff ff97 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff ff94 	bl	8001d94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e6c:	20d5      	movs	r0, #213	@ 0xd5
 8001e6e:	f7ff ff91 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001e72:	20f0      	movs	r0, #240	@ 0xf0
 8001e74:	f7ff ff8e 	bl	8001d94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001e78:	20d9      	movs	r0, #217	@ 0xd9
 8001e7a:	f7ff ff8b 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001e7e:	2022      	movs	r0, #34	@ 0x22
 8001e80:	f7ff ff88 	bl	8001d94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001e84:	20da      	movs	r0, #218	@ 0xda
 8001e86:	f7ff ff85 	bl	8001d94 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001e8a:	2012      	movs	r0, #18
 8001e8c:	f7ff ff82 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001e90:	20db      	movs	r0, #219	@ 0xdb
 8001e92:	f7ff ff7f 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001e96:	2020      	movs	r0, #32
 8001e98:	f7ff ff7c 	bl	8001d94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001e9c:	208d      	movs	r0, #141	@ 0x8d
 8001e9e:	f7ff ff79 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ea2:	2014      	movs	r0, #20
 8001ea4:	f7ff ff76 	bl	8001d94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001ea8:	20af      	movs	r0, #175	@ 0xaf
 8001eaa:	f7ff ff73 	bl	8001d94 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f000 f810 	bl	8001ed4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001eb4:	f000 f830 	bl	8001f18 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <ssd1306_Init+0xd8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ebe:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <ssd1306_Init+0xd8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	@ (8001ed0 <ssd1306_Init+0xd8>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	715a      	strb	r2, [r3, #5]
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000944 	.word	0x20000944

08001ed4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e00d      	b.n	8001f00 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <ssd1306_Fill+0x1a>
 8001eea:	2100      	movs	r1, #0
 8001eec:	e000      	b.n	8001ef0 <ssd1306_Fill+0x1c>
 8001eee:	21ff      	movs	r1, #255	@ 0xff
 8001ef0:	4a08      	ldr	r2, [pc, #32]	@ (8001f14 <ssd1306_Fill+0x40>)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3301      	adds	r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f06:	d3ed      	bcc.n	8001ee4 <ssd1306_Fill+0x10>
    }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000544 	.word	0x20000544

08001f18 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f1e:	2300      	movs	r3, #0
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	e016      	b.n	8001f52 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	3b50      	subs	r3, #80	@ 0x50
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff32 	bl	8001d94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff ff2f 	bl	8001d94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001f36:	2010      	movs	r0, #16
 8001f38:	f7ff ff2c 	bl	8001d94 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	01db      	lsls	r3, r3, #7
 8001f40:	4a08      	ldr	r2, [pc, #32]	@ (8001f64 <ssd1306_UpdateScreen+0x4c>)
 8001f42:	4413      	add	r3, r2
 8001f44:	2180      	movs	r1, #128	@ 0x80
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff3c 	bl	8001dc4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	71fb      	strb	r3, [r7, #7]
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b07      	cmp	r3, #7
 8001f56:	d9e5      	bls.n	8001f24 <ssd1306_UpdateScreen+0xc>
    }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000544 	.word	0x20000544

08001f68 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
 8001f72:	460b      	mov	r3, r1
 8001f74:	71bb      	strb	r3, [r7, #6]
 8001f76:	4613      	mov	r3, r2
 8001f78:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db48      	blt.n	8002014 <ssd1306_DrawPixel+0xac>
 8001f82:	79bb      	ldrb	r3, [r7, #6]
 8001f84:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f86:	d845      	bhi.n	8002014 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001f88:	4b25      	ldr	r3, [pc, #148]	@ (8002020 <ssd1306_DrawPixel+0xb8>)
 8001f8a:	791b      	ldrb	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001f90:	797b      	ldrb	r3, [r7, #5]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bf0c      	ite	eq
 8001f96:	2301      	moveq	r3, #1
 8001f98:	2300      	movne	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001f9e:	797b      	ldrb	r3, [r7, #5]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d11a      	bne.n	8001fda <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001fa4:	79fa      	ldrb	r2, [r7, #7]
 8001fa6:	79bb      	ldrb	r3, [r7, #6]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	b2d8      	uxtb	r0, r3
 8001fac:	4603      	mov	r3, r0
 8001fae:	01db      	lsls	r3, r3, #7
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002024 <ssd1306_DrawPixel+0xbc>)
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	b25a      	sxtb	r2, r3
 8001fb8:	79bb      	ldrb	r3, [r7, #6]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b259      	sxtb	r1, r3
 8001fca:	79fa      	ldrb	r2, [r7, #7]
 8001fcc:	4603      	mov	r3, r0
 8001fce:	01db      	lsls	r3, r3, #7
 8001fd0:	4413      	add	r3, r2
 8001fd2:	b2c9      	uxtb	r1, r1
 8001fd4:	4a13      	ldr	r2, [pc, #76]	@ (8002024 <ssd1306_DrawPixel+0xbc>)
 8001fd6:	54d1      	strb	r1, [r2, r3]
 8001fd8:	e01d      	b.n	8002016 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001fda:	79fa      	ldrb	r2, [r7, #7]
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	08db      	lsrs	r3, r3, #3
 8001fe0:	b2d8      	uxtb	r0, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	01db      	lsls	r3, r3, #7
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <ssd1306_DrawPixel+0xbc>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	b25a      	sxtb	r2, r3
 8001fee:	79bb      	ldrb	r3, [r7, #6]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	4013      	ands	r3, r2
 8002002:	b259      	sxtb	r1, r3
 8002004:	79fa      	ldrb	r2, [r7, #7]
 8002006:	4603      	mov	r3, r0
 8002008:	01db      	lsls	r3, r3, #7
 800200a:	4413      	add	r3, r2
 800200c:	b2c9      	uxtb	r1, r1
 800200e:	4a05      	ldr	r2, [pc, #20]	@ (8002024 <ssd1306_DrawPixel+0xbc>)
 8002010:	54d1      	strb	r1, [r2, r3]
 8002012:	e000      	b.n	8002016 <ssd1306_DrawPixel+0xae>
        return;
 8002014:	bf00      	nop
    }
}
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000944 	.word	0x20000944
 8002024:	20000544 	.word	0x20000544

08002028 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	4604      	mov	r4, r0
 8002030:	1d38      	adds	r0, r7, #4
 8002032:	e880 0006 	stmia.w	r0, {r1, r2}
 8002036:	461a      	mov	r2, r3
 8002038:	4623      	mov	r3, r4
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	4613      	mov	r3, r2
 800203e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	2b1f      	cmp	r3, #31
 8002044:	d902      	bls.n	800204c <ssd1306_WriteChar+0x24>
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	2b7e      	cmp	r3, #126	@ 0x7e
 800204a:	d901      	bls.n	8002050 <ssd1306_WriteChar+0x28>
        return 0;
 800204c:	2300      	movs	r3, #0
 800204e:	e06c      	b.n	800212a <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002050:	4b38      	ldr	r3, [pc, #224]	@ (8002134 <ssd1306_WriteChar+0x10c>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	793b      	ldrb	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	2b80      	cmp	r3, #128	@ 0x80
 800205c:	dc06      	bgt.n	800206c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800205e:	4b35      	ldr	r3, [pc, #212]	@ (8002134 <ssd1306_WriteChar+0x10c>)
 8002060:	885b      	ldrh	r3, [r3, #2]
 8002062:	461a      	mov	r2, r3
 8002064:	797b      	ldrb	r3, [r7, #5]
 8002066:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002068:	2b40      	cmp	r3, #64	@ 0x40
 800206a:	dd01      	ble.n	8002070 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800206c:	2300      	movs	r3, #0
 800206e:	e05c      	b.n	800212a <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	e04c      	b.n	8002110 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	3b20      	subs	r3, #32
 800207c:	7979      	ldrb	r1, [r7, #5]
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4619      	mov	r1, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	440b      	add	r3, r1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	e034      	b.n	8002100 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d012      	beq.n	80020cc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80020a6:	4b23      	ldr	r3, [pc, #140]	@ (8002134 <ssd1306_WriteChar+0x10c>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	b2d8      	uxtb	r0, r3
 80020b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <ssd1306_WriteChar+0x10c>)
 80020b6:	885b      	ldrh	r3, [r3, #2]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	4413      	add	r3, r2
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	7bba      	ldrb	r2, [r7, #14]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7ff ff4f 	bl	8001f68 <ssd1306_DrawPixel>
 80020ca:	e016      	b.n	80020fa <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80020cc:	4b19      	ldr	r3, [pc, #100]	@ (8002134 <ssd1306_WriteChar+0x10c>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	b2d8      	uxtb	r0, r3
 80020da:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <ssd1306_WriteChar+0x10c>)
 80020dc:	885b      	ldrh	r3, [r3, #2]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	b2d9      	uxtb	r1, r3
 80020e8:	7bbb      	ldrb	r3, [r7, #14]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf0c      	ite	eq
 80020ee:	2301      	moveq	r3, #1
 80020f0:	2300      	movne	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	f7ff ff37 	bl	8001f68 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	3301      	adds	r3, #1
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	793b      	ldrb	r3, [r7, #4]
 8002102:	461a      	mov	r2, r3
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	4293      	cmp	r3, r2
 8002108:	d3c5      	bcc.n	8002096 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3301      	adds	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	797b      	ldrb	r3, [r7, #5]
 8002112:	461a      	mov	r2, r3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	4293      	cmp	r3, r2
 8002118:	d3ad      	bcc.n	8002076 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <ssd1306_WriteChar+0x10c>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	793a      	ldrb	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	b29a      	uxth	r2, r3
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <ssd1306_WriteChar+0x10c>)
 8002126:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	@ 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd90      	pop	{r4, r7, pc}
 8002132:	bf00      	nop
 8002134:	20000944 	.word	0x20000944

08002138 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	1d38      	adds	r0, r7, #4
 8002142:	e880 0006 	stmia.w	r0, {r1, r2}
 8002146:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002148:	e012      	b.n	8002170 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	7818      	ldrb	r0, [r3, #0]
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	1d3a      	adds	r2, r7, #4
 8002152:	ca06      	ldmia	r2, {r1, r2}
 8002154:	f7ff ff68 	bl	8002028 <ssd1306_WriteChar>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d002      	beq.n	800216a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	e008      	b.n	800217c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3301      	adds	r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e8      	bne.n	800214a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	781b      	ldrb	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	460a      	mov	r2, r1
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	4613      	mov	r3, r2
 8002192:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <ssd1306_SetCursor+0x2c>)
 800219a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800219c:	79bb      	ldrb	r3, [r7, #6]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <ssd1306_SetCursor+0x2c>)
 80021a2:	805a      	strh	r2, [r3, #2]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000944 	.word	0x20000944

080021b4 <ssd1306_TestFonts>:
    } while((end - start) < 8000);
   
    HAL_Delay(1000);
}

void ssd1306_TestFonts() {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff fe8b 	bl	8001ed4 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 80021be:	2100      	movs	r1, #0
 80021c0:	2002      	movs	r0, #2
 80021c2:	f7ff ffdf 	bl	8002184 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 80021c6:	4a14      	ldr	r2, [pc, #80]	@ (8002218 <ssd1306_TestFonts+0x64>)
 80021c8:	2301      	movs	r3, #1
 80021ca:	ca06      	ldmia	r2, {r1, r2}
 80021cc:	4813      	ldr	r0, [pc, #76]	@ (800221c <ssd1306_TestFonts+0x68>)
 80021ce:	f7ff ffb3 	bl	8002138 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 80021d2:	211a      	movs	r1, #26
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7ff ffd5 	bl	8002184 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80021da:	4a11      	ldr	r2, [pc, #68]	@ (8002220 <ssd1306_TestFonts+0x6c>)
 80021dc:	2301      	movs	r3, #1
 80021de:	ca06      	ldmia	r2, {r1, r2}
 80021e0:	4810      	ldr	r0, [pc, #64]	@ (8002224 <ssd1306_TestFonts+0x70>)
 80021e2:	f7ff ffa9 	bl	8002138 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 80021e6:	212c      	movs	r1, #44	@ 0x2c
 80021e8:	2002      	movs	r0, #2
 80021ea:	f7ff ffcb 	bl	8002184 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80021ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002228 <ssd1306_TestFonts+0x74>)
 80021f0:	2301      	movs	r3, #1
 80021f2:	ca06      	ldmia	r2, {r1, r2}
 80021f4:	480d      	ldr	r0, [pc, #52]	@ (800222c <ssd1306_TestFonts+0x78>)
 80021f6:	f7ff ff9f 	bl	8002138 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 80021fa:	2136      	movs	r1, #54	@ 0x36
 80021fc:	2002      	movs	r0, #2
 80021fe:	f7ff ffc1 	bl	8002184 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8002202:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <ssd1306_TestFonts+0x7c>)
 8002204:	2301      	movs	r3, #1
 8002206:	ca06      	ldmia	r2, {r1, r2}
 8002208:	480a      	ldr	r0, [pc, #40]	@ (8002234 <ssd1306_TestFonts+0x80>)
 800220a:	f7ff ff95 	bl	8002138 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800220e:	f7ff fe83 	bl	8001f18 <ssd1306_UpdateScreen>
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000020 	.word	0x20000020
 800221c:	0800b73c 	.word	0x0800b73c
 8002220:	20000018 	.word	0x20000018
 8002224:	0800b748 	.word	0x0800b748
 8002228:	20000010 	.word	0x20000010
 800222c:	0800b754 	.word	0x0800b754
 8002230:	20000008 	.word	0x20000008
 8002234:	0800b760 	.word	0x0800b760

08002238 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <HAL_MspInit+0x5c>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	4a14      	ldr	r2, [pc, #80]	@ (8002294 <HAL_MspInit+0x5c>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6193      	str	r3, [r2, #24]
 800224a:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_MspInit+0x5c>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <HAL_MspInit+0x5c>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a0e      	ldr	r2, [pc, #56]	@ (8002294 <HAL_MspInit+0x5c>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002260:	61d3      	str	r3, [r2, #28]
 8002262:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <HAL_MspInit+0x5c>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_MspInit+0x60>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <HAL_MspInit+0x60>)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40021000 	.word	0x40021000
 8002298:	40010000 	.word	0x40010000

0800229c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	@ 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0318 	add.w	r3, r7, #24
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a44      	ldr	r2, [pc, #272]	@ (80023c8 <HAL_ADC_MspInit+0x12c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d152      	bne.n	8002362 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022bc:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a42      	ldr	r2, [pc, #264]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 80022c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b40      	ldr	r3, [pc, #256]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	4b3d      	ldr	r3, [pc, #244]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	4a3c      	ldr	r2, [pc, #240]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6193      	str	r3, [r2, #24]
 80022e0:	4b3a      	ldr	r3, [pc, #232]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022ec:	2330      	movs	r3, #48	@ 0x30
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f0:	2303      	movs	r3, #3
 80022f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	f107 0318 	add.w	r3, r7, #24
 80022f8:	4619      	mov	r1, r3
 80022fa:	4835      	ldr	r0, [pc, #212]	@ (80023d0 <HAL_ADC_MspInit+0x134>)
 80022fc:	f001 fd14 	bl	8003d28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002300:	4b34      	ldr	r3, [pc, #208]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 8002302:	4a35      	ldr	r2, [pc, #212]	@ (80023d8 <HAL_ADC_MspInit+0x13c>)
 8002304:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002306:	4b33      	ldr	r3, [pc, #204]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800230c:	4b31      	ldr	r3, [pc, #196]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002312:	4b30      	ldr	r3, [pc, #192]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002318:	4b2e      	ldr	r3, [pc, #184]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 800231a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800231e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002320:	4b2c      	ldr	r3, [pc, #176]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 8002322:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002326:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002328:	4b2a      	ldr	r3, [pc, #168]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 800232a:	2220      	movs	r2, #32
 800232c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800232e:	4b29      	ldr	r3, [pc, #164]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 8002330:	2200      	movs	r2, #0
 8002332:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002334:	4827      	ldr	r0, [pc, #156]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 8002336:	f001 fa55 	bl	80037e4 <HAL_DMA_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002340:	f7ff fd20 	bl	8001d84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a23      	ldr	r2, [pc, #140]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 8002348:	621a      	str	r2, [r3, #32]
 800234a:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <HAL_ADC_MspInit+0x138>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	2012      	movs	r0, #18
 8002356:	f001 fa0e 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800235a:	2012      	movs	r0, #18
 800235c:	f001 fa27 	bl	80037ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002360:	e02e      	b.n	80023c0 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1d      	ldr	r2, [pc, #116]	@ (80023dc <HAL_ADC_MspInit+0x140>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d129      	bne.n	80023c0 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800236c:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4a16      	ldr	r2, [pc, #88]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 8002372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002376:	6193      	str	r3, [r2, #24]
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_ADC_MspInit+0x130>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800239c:	230e      	movs	r3, #14
 800239e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023a0:	2303      	movs	r3, #3
 80023a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 0318 	add.w	r3, r7, #24
 80023a8:	4619      	mov	r1, r3
 80023aa:	4809      	ldr	r0, [pc, #36]	@ (80023d0 <HAL_ADC_MspInit+0x134>)
 80023ac:	f001 fcbc 	bl	8003d28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	2012      	movs	r0, #18
 80023b6:	f001 f9de 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80023ba:	2012      	movs	r0, #18
 80023bc:	f001 f9f7 	bl	80037ae <HAL_NVIC_EnableIRQ>
}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	@ 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40012400 	.word	0x40012400
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010800 	.word	0x40010800
 80023d4:	200004a0 	.word	0x200004a0
 80023d8:	40020008 	.word	0x40020008
 80023dc:	40012800 	.word	0x40012800

080023e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	@ 0x28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002470 <HAL_I2C_MspInit+0x90>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d132      	bne.n	8002466 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002400:	4b1c      	ldr	r3, [pc, #112]	@ (8002474 <HAL_I2C_MspInit+0x94>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a1b      	ldr	r2, [pc, #108]	@ (8002474 <HAL_I2C_MspInit+0x94>)
 8002406:	f043 0308 	orr.w	r3, r3, #8
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_I2C_MspInit+0x94>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002418:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241e:	2312      	movs	r3, #18
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002422:	2303      	movs	r3, #3
 8002424:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4812      	ldr	r0, [pc, #72]	@ (8002478 <HAL_I2C_MspInit+0x98>)
 800242e:	f001 fc7b 	bl	8003d28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002432:	4b12      	ldr	r3, [pc, #72]	@ (800247c <HAL_I2C_MspInit+0x9c>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
 8002448:	4a0c      	ldr	r2, [pc, #48]	@ (800247c <HAL_I2C_MspInit+0x9c>)
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_I2C_MspInit+0x94>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a08      	ldr	r2, [pc, #32]	@ (8002474 <HAL_I2C_MspInit+0x94>)
 8002454:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_I2C_MspInit+0x94>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	@ 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40005400 	.word	0x40005400
 8002474:	40021000 	.word	0x40021000
 8002478:	40010c00 	.word	0x40010c00
 800247c:	40010000 	.word	0x40010000

08002480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <HAL_TIM_Base_MspInit+0x58>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d10c      	bne.n	80024ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002492:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_TIM_Base_MspInit+0x5c>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4a11      	ldr	r2, [pc, #68]	@ (80024dc <HAL_TIM_Base_MspInit+0x5c>)
 8002498:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800249c:	6193      	str	r3, [r2, #24]
 800249e:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_TIM_Base_MspInit+0x5c>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024aa:	e010      	b.n	80024ce <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0b      	ldr	r2, [pc, #44]	@ (80024e0 <HAL_TIM_Base_MspInit+0x60>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10b      	bne.n	80024ce <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <HAL_TIM_Base_MspInit+0x5c>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a08      	ldr	r2, [pc, #32]	@ (80024dc <HAL_TIM_Base_MspInit+0x5c>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	61d3      	str	r3, [r2, #28]
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_TIM_Base_MspInit+0x5c>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40000400 	.word	0x40000400

080024e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1f      	ldr	r2, [pc, #124]	@ (800257c <HAL_TIM_MspPostInit+0x98>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d119      	bne.n	8002538 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002504:	4b1e      	ldr	r3, [pc, #120]	@ (8002580 <HAL_TIM_MspPostInit+0x9c>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	4a1d      	ldr	r2, [pc, #116]	@ (8002580 <HAL_TIM_MspPostInit+0x9c>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	6193      	str	r3, [r2, #24]
 8002510:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <HAL_TIM_MspPostInit+0x9c>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|BEEP_Pin;
 800251c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2302      	movs	r3, #2
 8002528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	4619      	mov	r1, r3
 8002530:	4814      	ldr	r0, [pc, #80]	@ (8002584 <HAL_TIM_MspPostInit+0xa0>)
 8002532:	f001 fbf9 	bl	8003d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002536:	e01c      	b.n	8002572 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <HAL_TIM_MspPostInit+0xa4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d117      	bne.n	8002572 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	4b0f      	ldr	r3, [pc, #60]	@ (8002580 <HAL_TIM_MspPostInit+0x9c>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4a0e      	ldr	r2, [pc, #56]	@ (8002580 <HAL_TIM_MspPostInit+0x9c>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	6193      	str	r3, [r2, #24]
 800254e:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <HAL_TIM_MspPostInit+0x9c>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 800255a:	2340      	movs	r3, #64	@ 0x40
 800255c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2302      	movs	r3, #2
 8002564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4619      	mov	r1, r3
 800256c:	4805      	ldr	r0, [pc, #20]	@ (8002584 <HAL_TIM_MspPostInit+0xa0>)
 800256e:	f001 fbdb 	bl	8003d28 <HAL_GPIO_Init>
}
 8002572:	bf00      	nop
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40012c00 	.word	0x40012c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40010800 	.word	0x40010800
 8002588:	40000400 	.word	0x40000400

0800258c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	@ 0x30
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a69      	ldr	r2, [pc, #420]	@ (800274c <HAL_UART_MspInit+0x1c0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d13e      	bne.n	800262a <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ac:	4b68      	ldr	r3, [pc, #416]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a67      	ldr	r2, [pc, #412]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 80025b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b65      	ldr	r3, [pc, #404]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	4b62      	ldr	r3, [pc, #392]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a61      	ldr	r2, [pc, #388]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025dc:	2340      	movs	r3, #64	@ 0x40
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4619      	mov	r1, r3
 80025ee:	4859      	ldr	r0, [pc, #356]	@ (8002754 <HAL_UART_MspInit+0x1c8>)
 80025f0:	f001 fb9a 	bl	8003d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025f4:	2380      	movs	r3, #128	@ 0x80
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	4619      	mov	r1, r3
 8002606:	4853      	ldr	r0, [pc, #332]	@ (8002754 <HAL_UART_MspInit+0x1c8>)
 8002608:	f001 fb8e 	bl	8003d28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800260c:	4b52      	ldr	r3, [pc, #328]	@ (8002758 <HAL_UART_MspInit+0x1cc>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002614:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800261a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002622:	4a4d      	ldr	r2, [pc, #308]	@ (8002758 <HAL_UART_MspInit+0x1cc>)
 8002624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002626:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002628:	e08b      	b.n	8002742 <HAL_UART_MspInit+0x1b6>
  else if(huart->Instance==USART3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a4b      	ldr	r2, [pc, #300]	@ (800275c <HAL_UART_MspInit+0x1d0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	f040 8086 	bne.w	8002742 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002636:	4b46      	ldr	r3, [pc, #280]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a45      	ldr	r2, [pc, #276]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002640:	61d3      	str	r3, [r2, #28]
 8002642:	4b43      	ldr	r3, [pc, #268]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264e:	4b40      	ldr	r3, [pc, #256]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	4a3f      	ldr	r2, [pc, #252]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 8002654:	f043 0308 	orr.w	r3, r3, #8
 8002658:	6193      	str	r3, [r2, #24]
 800265a:	4b3d      	ldr	r3, [pc, #244]	@ (8002750 <HAL_UART_MspInit+0x1c4>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800266a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002670:	2303      	movs	r3, #3
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	4619      	mov	r1, r3
 800267a:	4836      	ldr	r0, [pc, #216]	@ (8002754 <HAL_UART_MspInit+0x1c8>)
 800267c:	f001 fb54 	bl	8003d28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002680:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	4619      	mov	r1, r3
 8002694:	482f      	ldr	r0, [pc, #188]	@ (8002754 <HAL_UART_MspInit+0x1c8>)
 8002696:	f001 fb47 	bl	8003d28 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800269a:	4b31      	ldr	r3, [pc, #196]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 800269c:	4a31      	ldr	r2, [pc, #196]	@ (8002764 <HAL_UART_MspInit+0x1d8>)
 800269e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 80026a2:	2210      	movs	r2, #16
 80026a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 80026ae:	2280      	movs	r2, #128	@ 0x80
 80026b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b8:	4b29      	ldr	r3, [pc, #164]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80026be:	4b28      	ldr	r3, [pc, #160]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026c4:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80026ca:	4825      	ldr	r0, [pc, #148]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 80026cc:	f001 f88a 	bl	80037e4 <HAL_DMA_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_UART_MspInit+0x14e>
      Error_Handler();
 80026d6:	f7ff fb55 	bl	8001d84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a20      	ldr	r2, [pc, #128]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 80026de:	639a      	str	r2, [r3, #56]	@ 0x38
 80026e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002760 <HAL_UART_MspInit+0x1d4>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80026e6:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 80026e8:	4a20      	ldr	r2, [pc, #128]	@ (800276c <HAL_UART_MspInit+0x1e0>)
 80026ea:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 80026fa:	2280      	movs	r2, #128	@ 0x80
 80026fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002704:	4b18      	ldr	r3, [pc, #96]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800270a:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 800270c:	2220      	movs	r2, #32
 800270e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002710:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002716:	4814      	ldr	r0, [pc, #80]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 8002718:	f001 f864 	bl	80037e4 <HAL_DMA_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8002722:	f7ff fb2f 	bl	8001d84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a0f      	ldr	r2, [pc, #60]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 800272a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800272c:	4a0e      	ldr	r2, [pc, #56]	@ (8002768 <HAL_UART_MspInit+0x1dc>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2100      	movs	r1, #0
 8002736:	2027      	movs	r0, #39	@ 0x27
 8002738:	f001 f81d 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800273c:	2027      	movs	r0, #39	@ 0x27
 800273e:	f001 f836 	bl	80037ae <HAL_NVIC_EnableIRQ>
}
 8002742:	bf00      	nop
 8002744:	3730      	adds	r7, #48	@ 0x30
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40013800 	.word	0x40013800
 8002750:	40021000 	.word	0x40021000
 8002754:	40010c00 	.word	0x40010c00
 8002758:	40010000 	.word	0x40010000
 800275c:	40004800 	.word	0x40004800
 8002760:	200002e8 	.word	0x200002e8
 8002764:	4002001c 	.word	0x4002001c
 8002768:	200002a4 	.word	0x200002a4
 800276c:	40020030 	.word	0x40020030

08002770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <NMI_Handler+0x4>

08002778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <MemManage_Handler+0x4>

08002788 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <BusFault_Handler+0x4>

08002790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <UsageFault_Handler+0x4>

08002798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c0:	f000 f96c 	bl	8002a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027cc:	4802      	ldr	r0, [pc, #8]	@ (80027d8 <DMA1_Channel1_IRQHandler+0x10>)
 80027ce:	f001 f977 	bl	8003ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200004a0 	.word	0x200004a0

080027dc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <DMA1_Channel2_IRQHandler+0x10>)
 80027e2:	f001 f96d 	bl	8003ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200002e8 	.word	0x200002e8

080027f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80027f4:	4802      	ldr	r0, [pc, #8]	@ (8002800 <DMA1_Channel3_IRQHandler+0x10>)
 80027f6:	f001 f963 	bl	8003ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200002a4 	.word	0x200002a4

08002804 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002808:	4803      	ldr	r0, [pc, #12]	@ (8002818 <ADC1_2_IRQHandler+0x14>)
 800280a:	f000 fbf7 	bl	8002ffc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800280e:	4803      	ldr	r0, [pc, #12]	@ (800281c <ADC1_2_IRQHandler+0x18>)
 8002810:	f000 fbf4 	bl	8002ffc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000514 	.word	0x20000514
 800281c:	200004e4 	.word	0x200004e4

08002820 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002824:	4802      	ldr	r0, [pc, #8]	@ (8002830 <USART3_IRQHandler+0x10>)
 8002826:	f003 fd7b 	bl	8006320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000032c 	.word	0x2000032c

08002834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return 1;
 8002838:	2301      	movs	r3, #1
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <_kill>:

int _kill(int pid, int sig)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800284c:	f005 fbd6 	bl	8007ffc <__errno>
 8002850:	4603      	mov	r3, r0
 8002852:	2216      	movs	r2, #22
 8002854:	601a      	str	r2, [r3, #0]
  return -1;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <_exit>:

void _exit (int status)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800286a:	f04f 31ff 	mov.w	r1, #4294967295
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ffe7 	bl	8002842 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <_exit+0x12>

08002878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e00a      	b.n	80028a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800288a:	f3af 8000 	nop.w
 800288e:	4601      	mov	r1, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	60ba      	str	r2, [r7, #8]
 8002896:	b2ca      	uxtb	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbf0      	blt.n	800288a <_read+0x12>
  }

  return len;
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e009      	b.n	80028d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	60ba      	str	r2, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3301      	adds	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	dbf1      	blt.n	80028c4 <_write+0x12>
  }
  return len;
 80028e0:	687b      	ldr	r3, [r7, #4]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <_close>:

int _close(int file)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002910:	605a      	str	r2, [r3, #4]
  return 0;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <_isatty>:

int _isatty(int file)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
	...

0800294c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002954:	4a14      	ldr	r2, [pc, #80]	@ (80029a8 <_sbrk+0x5c>)
 8002956:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <_sbrk+0x60>)
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002960:	4b13      	ldr	r3, [pc, #76]	@ (80029b0 <_sbrk+0x64>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002968:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <_sbrk+0x64>)
 800296a:	4a12      	ldr	r2, [pc, #72]	@ (80029b4 <_sbrk+0x68>)
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296e:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	429a      	cmp	r2, r3
 800297a:	d207      	bcs.n	800298c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800297c:	f005 fb3e 	bl	8007ffc <__errno>
 8002980:	4603      	mov	r3, r0
 8002982:	220c      	movs	r2, #12
 8002984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	e009      	b.n	80029a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800298c:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002992:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	4a05      	ldr	r2, [pc, #20]	@ (80029b0 <_sbrk+0x64>)
 800299c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20005000 	.word	0x20005000
 80029ac:	00000400 	.word	0x00000400
 80029b0:	2000094c 	.word	0x2000094c
 80029b4:	20000aa0 	.word	0x20000aa0

080029b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029c4:	f7ff fff8 	bl	80029b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029c8:	480b      	ldr	r0, [pc, #44]	@ (80029f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80029ca:	490c      	ldr	r1, [pc, #48]	@ (80029fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80029cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002a00 <LoopFillZerobss+0x16>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d0:	e002      	b.n	80029d8 <LoopCopyDataInit>

080029d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d6:	3304      	adds	r3, #4

080029d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029dc:	d3f9      	bcc.n	80029d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029de:	4a09      	ldr	r2, [pc, #36]	@ (8002a04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80029e0:	4c09      	ldr	r4, [pc, #36]	@ (8002a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e4:	e001      	b.n	80029ea <LoopFillZerobss>

080029e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e8:	3204      	adds	r2, #4

080029ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ec:	d3fb      	bcc.n	80029e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ee:	f005 fb0b 	bl	8008008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029f2:	f7fe ff3f 	bl	8001874 <main>
  bx lr
 80029f6:	4770      	bx	lr
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002a00:	0800ea7c 	.word	0x0800ea7c
  ldr r2, =_sbss
 8002a04:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002a08:	20000aa0 	.word	0x20000aa0

08002a0c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <CAN1_RX1_IRQHandler>
	...

08002a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a14:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <HAL_Init+0x28>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a07      	ldr	r2, [pc, #28]	@ (8002a38 <HAL_Init+0x28>)
 8002a1a:	f043 0310 	orr.w	r3, r3, #16
 8002a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a20:	2003      	movs	r0, #3
 8002a22:	f000 fe9d 	bl	8003760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a26:	200f      	movs	r0, #15
 8002a28:	f000 f808 	bl	8002a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a2c:	f7ff fc04 	bl	8002238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40022000 	.word	0x40022000

08002a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a44:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <HAL_InitTick+0x54>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <HAL_InitTick+0x58>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 feb5 	bl	80037ca <HAL_SYSTICK_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00e      	b.n	8002a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d80a      	bhi.n	8002a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a70:	2200      	movs	r2, #0
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	f000 fe7d 	bl	8003776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a7c:	4a06      	ldr	r2, [pc, #24]	@ (8002a98 <HAL_InitTick+0x5c>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000028 	.word	0x20000028
 8002a94:	20000030 	.word	0x20000030
 8002a98:	2000002c 	.word	0x2000002c

08002a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <HAL_IncTick+0x1c>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_IncTick+0x20>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a03      	ldr	r2, [pc, #12]	@ (8002abc <HAL_IncTick+0x20>)
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	20000030 	.word	0x20000030
 8002abc:	20000950 	.word	0x20000950

08002ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac4:	4b02      	ldr	r3, [pc, #8]	@ (8002ad0 <HAL_GetTick+0x10>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	20000950 	.word	0x20000950

08002ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff fff0 	bl	8002ac0 <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d005      	beq.n	8002afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <HAL_Delay+0x44>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002afa:	bf00      	nop
 8002afc:	f7ff ffe0 	bl	8002ac0 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d8f7      	bhi.n	8002afc <HAL_Delay+0x28>
  {
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000030 	.word	0x20000030

08002b1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0be      	b.n	8002cbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fb9e 	bl	800229c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fc81 	bl	8003468 <ADC_ConversionStop_Disable>
 8002b66:	4603      	mov	r3, r0
 8002b68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 8099 	bne.w	8002caa <HAL_ADC_Init+0x18e>
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 8095 	bne.w	8002caa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b84:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b88:	f023 0302 	bic.w	r3, r3, #2
 8002b8c:	f043 0202 	orr.w	r2, r3, #2
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7b1b      	ldrb	r3, [r3, #12]
 8002ba2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ba4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bb4:	d003      	beq.n	8002bbe <HAL_ADC_Init+0xa2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d102      	bne.n	8002bc4 <HAL_ADC_Init+0xa8>
 8002bbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bc2:	e000      	b.n	8002bc6 <HAL_ADC_Init+0xaa>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7d1b      	ldrb	r3, [r3, #20]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d119      	bne.n	8002c08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7b1b      	ldrb	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	035a      	lsls	r2, r3, #13
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	e00b      	b.n	8002c08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	4b28      	ldr	r3, [pc, #160]	@ (8002cc4 <HAL_ADC_Init+0x1a8>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c38:	d003      	beq.n	8002c42 <HAL_ADC_Init+0x126>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d104      	bne.n	8002c4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	051b      	lsls	r3, r3, #20
 8002c4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c52:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <HAL_ADC_Init+0x1ac>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d10b      	bne.n	8002c88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c86:	e018      	b.n	8002cba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	f023 0312 	bic.w	r3, r3, #18
 8002c90:	f043 0210 	orr.w	r2, r3, #16
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ca8:	e007      	b.n	8002cba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	f043 0210 	orr.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	ffe1f7fd 	.word	0xffe1f7fd
 8002cc8:	ff1f0efe 	.word	0xff1f0efe

08002ccc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_Start+0x1a>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e098      	b.n	8002e18 <HAL_ADC_Start+0x14c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fb60 	bl	80033b4 <ADC_Enable>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 8087 	bne.w	8002e0e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a41      	ldr	r2, [pc, #260]	@ (8002e20 <HAL_ADC_Start+0x154>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d105      	bne.n	8002d2a <HAL_ADC_Start+0x5e>
 8002d1e:	4b41      	ldr	r3, [pc, #260]	@ (8002e24 <HAL_ADC_Start+0x158>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d115      	bne.n	8002d56 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d026      	beq.n	8002d92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d54:	e01d      	b.n	8002d92 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2f      	ldr	r2, [pc, #188]	@ (8002e24 <HAL_ADC_Start+0x158>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_ADC_Start+0xaa>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2b      	ldr	r2, [pc, #172]	@ (8002e20 <HAL_ADC_Start+0x154>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10d      	bne.n	8002d92 <HAL_ADC_Start+0xc6>
 8002d76:	4b2b      	ldr	r3, [pc, #172]	@ (8002e24 <HAL_ADC_Start+0x158>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d006      	beq.n	8002dac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	f023 0206 	bic.w	r2, r3, #6
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002daa:	e002      	b.n	8002db2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f06f 0202 	mvn.w	r2, #2
 8002dc2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002dce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002dd2:	d113      	bne.n	8002dfc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002dd8:	4a11      	ldr	r2, [pc, #68]	@ (8002e20 <HAL_ADC_Start+0x154>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d105      	bne.n	8002dea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002dde:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <HAL_ADC_Start+0x158>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d108      	bne.n	8002dfc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	e00c      	b.n	8002e16 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	e003      	b.n	8002e16 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40012800 	.word	0x40012800
 8002e24:	40012400 	.word	0x40012400

08002e28 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a64      	ldr	r2, [pc, #400]	@ (8002fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_ADC_Start_DMA+0x24>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a63      	ldr	r2, [pc, #396]	@ (8002fd4 <HAL_ADC_Start_DMA+0x1ac>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d106      	bne.n	8002e5a <HAL_ADC_Start_DMA+0x32>
 8002e4c:	4b60      	ldr	r3, [pc, #384]	@ (8002fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 80b3 	bne.w	8002fc0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_Start_DMA+0x40>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0ae      	b.n	8002fc6 <HAL_ADC_Start_DMA+0x19e>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fa9f 	bl	80033b4 <ADC_Enable>
 8002e76:	4603      	mov	r3, r0
 8002e78:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f040 809a 	bne.w	8002fb6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a4e      	ldr	r2, [pc, #312]	@ (8002fd4 <HAL_ADC_Start_DMA+0x1ac>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d105      	bne.n	8002eac <HAL_ADC_Start_DMA+0x84>
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d026      	beq.n	8002f14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ece:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ed6:	e01d      	b.n	8002f14 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a39      	ldr	r2, [pc, #228]	@ (8002fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_ADC_Start_DMA+0xd0>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a38      	ldr	r2, [pc, #224]	@ (8002fd4 <HAL_ADC_Start_DMA+0x1ac>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10d      	bne.n	8002f14 <HAL_ADC_Start_DMA+0xec>
 8002ef8:	4b35      	ldr	r3, [pc, #212]	@ (8002fd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f0c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	f023 0206 	bic.w	r2, r3, #6
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f2c:	e002      	b.n	8002f34 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4a25      	ldr	r2, [pc, #148]	@ (8002fd8 <HAL_ADC_Start_DMA+0x1b0>)
 8002f42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4a24      	ldr	r2, [pc, #144]	@ (8002fdc <HAL_ADC_Start_DMA+0x1b4>)
 8002f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <HAL_ADC_Start_DMA+0x1b8>)
 8002f52:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0202 	mvn.w	r2, #2
 8002f5c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f6c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a18      	ldr	r0, [r3, #32]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	334c      	adds	r3, #76	@ 0x4c
 8002f78:	4619      	mov	r1, r3
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f000 fc8b 	bl	8003898 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f8c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002f90:	d108      	bne.n	8002fa4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002fa0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002fa2:	e00f      	b.n	8002fc4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002fb2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002fb4:	e006      	b.n	8002fc4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002fbe:	e001      	b.n	8002fc4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40012400 	.word	0x40012400
 8002fd4:	40012800 	.word	0x40012800
 8002fd8:	080034eb 	.word	0x080034eb
 8002fdc:	08003567 	.word	0x08003567
 8002fe0:	08003583 	.word	0x08003583

08002fe4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d03e      	beq.n	800309c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d039      	beq.n	800309c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800304a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800304e:	d11d      	bne.n	800308c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003054:	2b00      	cmp	r3, #0
 8003056:	d119      	bne.n	800308c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0220 	bic.w	r2, r2, #32
 8003066:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f874 	bl	800317a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f06f 0212 	mvn.w	r2, #18
 800309a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d04d      	beq.n	8003142 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d048      	beq.n	8003142 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80030d2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80030d6:	d012      	beq.n	80030fe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d125      	bne.n	8003132 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030f0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80030f4:	d11d      	bne.n	8003132 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800310c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003112:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	f043 0201 	orr.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fa3f 	bl	80035b6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 020c 	mvn.w	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	d012      	beq.n	8003172 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f81b 	bl	800319e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0201 	mvn.w	r2, #1
 8003170:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x20>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e0dc      	b.n	800339e <HAL_ADC_ConfigChannel+0x1da>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b06      	cmp	r3, #6
 80031f2:	d81c      	bhi.n	800322e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	3b05      	subs	r3, #5
 8003206:	221f      	movs	r2, #31
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	4019      	ands	r1, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	3b05      	subs	r3, #5
 8003220:	fa00 f203 	lsl.w	r2, r0, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	635a      	str	r2, [r3, #52]	@ 0x34
 800322c:	e03c      	b.n	80032a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d81c      	bhi.n	8003270 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b23      	subs	r3, #35	@ 0x23
 8003248:	221f      	movs	r2, #31
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	4019      	ands	r1, r3
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	3b23      	subs	r3, #35	@ 0x23
 8003262:	fa00 f203 	lsl.w	r2, r0, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	631a      	str	r2, [r3, #48]	@ 0x30
 800326e:	e01b      	b.n	80032a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	3b41      	subs	r3, #65	@ 0x41
 8003282:	221f      	movs	r2, #31
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	4019      	ands	r1, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	3b41      	subs	r3, #65	@ 0x41
 800329c:	fa00 f203 	lsl.w	r2, r0, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	d91c      	bls.n	80032ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68d9      	ldr	r1, [r3, #12]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	3b1e      	subs	r3, #30
 80032c2:	2207      	movs	r2, #7
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4019      	ands	r1, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6898      	ldr	r0, [r3, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	3b1e      	subs	r3, #30
 80032dc:	fa00 f203 	lsl.w	r2, r0, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]
 80032e8:	e019      	b.n	800331e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6919      	ldr	r1, [r3, #16]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	2207      	movs	r2, #7
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	4019      	ands	r1, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6898      	ldr	r0, [r3, #8]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	fa00 f203 	lsl.w	r2, r0, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b10      	cmp	r3, #16
 8003324:	d003      	beq.n	800332e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800332a:	2b11      	cmp	r3, #17
 800332c:	d132      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1d      	ldr	r2, [pc, #116]	@ (80033a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d125      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d126      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003354:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b10      	cmp	r3, #16
 800335c:	d11a      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800335e:	4b13      	ldr	r3, [pc, #76]	@ (80033ac <HAL_ADC_ConfigChannel+0x1e8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a13      	ldr	r2, [pc, #76]	@ (80033b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	0c9a      	lsrs	r2, r3, #18
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003374:	e002      	b.n	800337c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3b01      	subs	r3, #1
 800337a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f9      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x1b2>
 8003382:	e007      	b.n	8003394 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	40012400 	.word	0x40012400
 80033ac:	20000028 	.word	0x20000028
 80033b0:	431bde83 	.word	0x431bde83

080033b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d040      	beq.n	8003454 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003460 <ADC_Enable+0xac>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003464 <ADC_Enable+0xb0>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	0c9b      	lsrs	r3, r3, #18
 80033ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033f0:	e002      	b.n	80033f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f9      	bne.n	80033f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033fe:	f7ff fb5f 	bl	8002ac0 <HAL_GetTick>
 8003402:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003404:	e01f      	b.n	8003446 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003406:	f7ff fb5b 	bl	8002ac0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d918      	bls.n	8003446 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d011      	beq.n	8003446 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003426:	f043 0210 	orr.w	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d1d8      	bne.n	8003406 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000028 	.word	0x20000028
 8003464:	431bde83 	.word	0x431bde83

08003468 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d12e      	bne.n	80034e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003492:	f7ff fb15 	bl	8002ac0 <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003498:	e01b      	b.n	80034d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800349a:	f7ff fb11 	bl	8002ac0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d914      	bls.n	80034d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10d      	bne.n	80034d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	f043 0210 	orr.w	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e007      	b.n	80034e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d0dc      	beq.n	800349a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003500:	2b00      	cmp	r3, #0
 8003502:	d127      	bne.n	8003554 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003508:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800351a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800351e:	d115      	bne.n	800354c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003524:	2b00      	cmp	r3, #0
 8003526:	d111      	bne.n	800354c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d105      	bne.n	800354c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7ff fe14 	bl	800317a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003552:	e004      	b.n	800355e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f7ff fe09 	bl	800318c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	f043 0204 	orr.w	r2, r3, #4
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff fe01 	bl	80031b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d8:	4b0c      	ldr	r3, [pc, #48]	@ (800360c <__NVIC_SetPriorityGrouping+0x44>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035e4:	4013      	ands	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035fa:	4a04      	ldr	r2, [pc, #16]	@ (800360c <__NVIC_SetPriorityGrouping+0x44>)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	60d3      	str	r3, [r2, #12]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003614:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <__NVIC_GetPriorityGrouping+0x18>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	f003 0307 	and.w	r3, r3, #7
}
 800361e:	4618      	mov	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	2b00      	cmp	r3, #0
 800363c:	db0b      	blt.n	8003656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	4906      	ldr	r1, [pc, #24]	@ (8003660 <__NVIC_EnableIRQ+0x34>)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2001      	movs	r0, #1
 800364e:	fa00 f202 	lsl.w	r2, r0, r2
 8003652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100

08003664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	@ (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	@ (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	@ 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	4313      	orrs	r3, r2
         );
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	@ 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800372c:	d301      	bcc.n	8003732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800372e:	2301      	movs	r3, #1
 8003730:	e00f      	b.n	8003752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <SysTick_Config+0x40>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373a:	210f      	movs	r1, #15
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	f7ff ff90 	bl	8003664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <SysTick_Config+0x40>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374a:	4b04      	ldr	r3, [pc, #16]	@ (800375c <SysTick_Config+0x40>)
 800374c:	2207      	movs	r2, #7
 800374e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	e000e010 	.word	0xe000e010

08003760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff2d 	bl	80035c8 <__NVIC_SetPriorityGrouping>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003788:	f7ff ff42 	bl	8003610 <__NVIC_GetPriorityGrouping>
 800378c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff ff90 	bl	80036b8 <NVIC_EncodePriority>
 8003798:	4602      	mov	r2, r0
 800379a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff5f 	bl	8003664 <__NVIC_SetPriority>
}
 80037a6:	bf00      	nop
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff35 	bl	800362c <__NVIC_EnableIRQ>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ffa2 	bl	800371c <SysTick_Config>
 80037d8:	4603      	mov	r3, r0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e043      	b.n	8003882 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	4b22      	ldr	r3, [pc, #136]	@ (800388c <HAL_DMA_Init+0xa8>)
 8003802:	4413      	add	r3, r2
 8003804:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <HAL_DMA_Init+0xac>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	009a      	lsls	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1f      	ldr	r2, [pc, #124]	@ (8003894 <HAL_DMA_Init+0xb0>)
 8003816:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800382e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003832:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800383c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	bffdfff8 	.word	0xbffdfff8
 8003890:	cccccccd 	.word	0xcccccccd
 8003894:	40020000 	.word	0x40020000

08003898 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_DMA_Start_IT+0x20>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e04b      	b.n	8003950 <HAL_DMA_Start_IT+0xb8>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d13a      	bne.n	8003942 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f9eb 	bl	8003ccc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 020e 	orr.w	r2, r2, #14
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e00f      	b.n	8003930 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0204 	bic.w	r2, r2, #4
 800391e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 020a 	orr.w	r2, r2, #10
 800392e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e005      	b.n	800394e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800394a:	2302      	movs	r3, #2
 800394c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800394e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d008      	beq.n	8003982 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2204      	movs	r2, #4
 8003974:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e020      	b.n	80039c4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 020e 	bic.w	r2, r2, #14
 8003990:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039aa:	2101      	movs	r1, #1
 80039ac:	fa01 f202 	lsl.w	r2, r1, r2
 80039b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d005      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2204      	movs	r2, #4
 80039ec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	e051      	b.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 020e 	bic.w	r2, r2, #14
 8003a02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	@ (8003aa4 <HAL_DMA_Abort_IT+0xd4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d029      	beq.n	8003a72 <HAL_DMA_Abort_IT+0xa2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a21      	ldr	r2, [pc, #132]	@ (8003aa8 <HAL_DMA_Abort_IT+0xd8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d022      	beq.n	8003a6e <HAL_DMA_Abort_IT+0x9e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aac <HAL_DMA_Abort_IT+0xdc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01a      	beq.n	8003a68 <HAL_DMA_Abort_IT+0x98>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab0 <HAL_DMA_Abort_IT+0xe0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d012      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x92>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <HAL_DMA_Abort_IT+0xe4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00a      	beq.n	8003a5c <HAL_DMA_Abort_IT+0x8c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab8 <HAL_DMA_Abort_IT+0xe8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d102      	bne.n	8003a56 <HAL_DMA_Abort_IT+0x86>
 8003a50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003a54:	e00e      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a5a:	e00b      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a60:	e008      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a66:	e005      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a6c:	e002      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a6e:	2310      	movs	r3, #16
 8003a70:	e000      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a72:	2301      	movs	r3, #1
 8003a74:	4a11      	ldr	r2, [pc, #68]	@ (8003abc <HAL_DMA_Abort_IT+0xec>)
 8003a76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
    } 
  }
  return status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40020008 	.word	0x40020008
 8003aa8:	4002001c 	.word	0x4002001c
 8003aac:	40020030 	.word	0x40020030
 8003ab0:	40020044 	.word	0x40020044
 8003ab4:	40020058 	.word	0x40020058
 8003ab8:	4002006c 	.word	0x4002006c
 8003abc:	40020000 	.word	0x40020000

08003ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	2204      	movs	r2, #4
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d04f      	beq.n	8003b88 <HAL_DMA_IRQHandler+0xc8>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d04a      	beq.n	8003b88 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a66      	ldr	r2, [pc, #408]	@ (8003cb0 <HAL_DMA_IRQHandler+0x1f0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d029      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xae>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a65      	ldr	r2, [pc, #404]	@ (8003cb4 <HAL_DMA_IRQHandler+0x1f4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d022      	beq.n	8003b6a <HAL_DMA_IRQHandler+0xaa>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a63      	ldr	r2, [pc, #396]	@ (8003cb8 <HAL_DMA_IRQHandler+0x1f8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01a      	beq.n	8003b64 <HAL_DMA_IRQHandler+0xa4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a62      	ldr	r2, [pc, #392]	@ (8003cbc <HAL_DMA_IRQHandler+0x1fc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d012      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x9e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a60      	ldr	r2, [pc, #384]	@ (8003cc0 <HAL_DMA_IRQHandler+0x200>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00a      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x98>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5f      	ldr	r2, [pc, #380]	@ (8003cc4 <HAL_DMA_IRQHandler+0x204>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d102      	bne.n	8003b52 <HAL_DMA_IRQHandler+0x92>
 8003b4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b50:	e00e      	b.n	8003b70 <HAL_DMA_IRQHandler+0xb0>
 8003b52:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003b56:	e00b      	b.n	8003b70 <HAL_DMA_IRQHandler+0xb0>
 8003b58:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003b5c:	e008      	b.n	8003b70 <HAL_DMA_IRQHandler+0xb0>
 8003b5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b62:	e005      	b.n	8003b70 <HAL_DMA_IRQHandler+0xb0>
 8003b64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b68:	e002      	b.n	8003b70 <HAL_DMA_IRQHandler+0xb0>
 8003b6a:	2340      	movs	r3, #64	@ 0x40
 8003b6c:	e000      	b.n	8003b70 <HAL_DMA_IRQHandler+0xb0>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	4a55      	ldr	r2, [pc, #340]	@ (8003cc8 <HAL_DMA_IRQHandler+0x208>)
 8003b72:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8094 	beq.w	8003ca6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b86:	e08e      	b.n	8003ca6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d056      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x186>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d051      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 020a 	bic.w	r2, r2, #10
 8003bbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a38      	ldr	r2, [pc, #224]	@ (8003cb0 <HAL_DMA_IRQHandler+0x1f0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d029      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x166>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a37      	ldr	r2, [pc, #220]	@ (8003cb4 <HAL_DMA_IRQHandler+0x1f4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d022      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x162>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a35      	ldr	r2, [pc, #212]	@ (8003cb8 <HAL_DMA_IRQHandler+0x1f8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d01a      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x15c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a34      	ldr	r2, [pc, #208]	@ (8003cbc <HAL_DMA_IRQHandler+0x1fc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d012      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x156>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a32      	ldr	r2, [pc, #200]	@ (8003cc0 <HAL_DMA_IRQHandler+0x200>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00a      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x150>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a31      	ldr	r2, [pc, #196]	@ (8003cc4 <HAL_DMA_IRQHandler+0x204>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d102      	bne.n	8003c0a <HAL_DMA_IRQHandler+0x14a>
 8003c04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003c08:	e00e      	b.n	8003c28 <HAL_DMA_IRQHandler+0x168>
 8003c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c0e:	e00b      	b.n	8003c28 <HAL_DMA_IRQHandler+0x168>
 8003c10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c14:	e008      	b.n	8003c28 <HAL_DMA_IRQHandler+0x168>
 8003c16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c1a:	e005      	b.n	8003c28 <HAL_DMA_IRQHandler+0x168>
 8003c1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c20:	e002      	b.n	8003c28 <HAL_DMA_IRQHandler+0x168>
 8003c22:	2320      	movs	r3, #32
 8003c24:	e000      	b.n	8003c28 <HAL_DMA_IRQHandler+0x168>
 8003c26:	2302      	movs	r3, #2
 8003c28:	4a27      	ldr	r2, [pc, #156]	@ (8003cc8 <HAL_DMA_IRQHandler+0x208>)
 8003c2a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d034      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c44:	e02f      	b.n	8003ca6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d028      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x1e8>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d023      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 020e 	bic.w	r2, r2, #14
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c78:	2101      	movs	r1, #1
 8003c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	4798      	blx	r3
    }
  }
  return;
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
}
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40020008 	.word	0x40020008
 8003cb4:	4002001c 	.word	0x4002001c
 8003cb8:	40020030 	.word	0x40020030
 8003cbc:	40020044 	.word	0x40020044
 8003cc0:	40020058 	.word	0x40020058
 8003cc4:	4002006c 	.word	0x4002006c
 8003cc8:	40020000 	.word	0x40020000

08003ccc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d108      	bne.n	8003d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d0a:	e007      	b.n	8003d1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	60da      	str	r2, [r3, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
	...

08003d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b08b      	sub	sp, #44	@ 0x2c
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d3a:	e169      	b.n	8004010 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	f040 8158 	bne.w	800400a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a9a      	ldr	r2, [pc, #616]	@ (8003fc8 <HAL_GPIO_Init+0x2a0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d05e      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d64:	4a98      	ldr	r2, [pc, #608]	@ (8003fc8 <HAL_GPIO_Init+0x2a0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d875      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d6a:	4a98      	ldr	r2, [pc, #608]	@ (8003fcc <HAL_GPIO_Init+0x2a4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d058      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d70:	4a96      	ldr	r2, [pc, #600]	@ (8003fcc <HAL_GPIO_Init+0x2a4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d86f      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d76:	4a96      	ldr	r2, [pc, #600]	@ (8003fd0 <HAL_GPIO_Init+0x2a8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d052      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d7c:	4a94      	ldr	r2, [pc, #592]	@ (8003fd0 <HAL_GPIO_Init+0x2a8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d869      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d82:	4a94      	ldr	r2, [pc, #592]	@ (8003fd4 <HAL_GPIO_Init+0x2ac>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d04c      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d88:	4a92      	ldr	r2, [pc, #584]	@ (8003fd4 <HAL_GPIO_Init+0x2ac>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d863      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d8e:	4a92      	ldr	r2, [pc, #584]	@ (8003fd8 <HAL_GPIO_Init+0x2b0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d046      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d94:	4a90      	ldr	r2, [pc, #576]	@ (8003fd8 <HAL_GPIO_Init+0x2b0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d85d      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d9a:	2b12      	cmp	r3, #18
 8003d9c:	d82a      	bhi.n	8003df4 <HAL_GPIO_Init+0xcc>
 8003d9e:	2b12      	cmp	r3, #18
 8003da0:	d859      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003da2:	a201      	add	r2, pc, #4	@ (adr r2, 8003da8 <HAL_GPIO_Init+0x80>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003e23 	.word	0x08003e23
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003e0f 	.word	0x08003e0f
 8003db4:	08003e51 	.word	0x08003e51
 8003db8:	08003e57 	.word	0x08003e57
 8003dbc:	08003e57 	.word	0x08003e57
 8003dc0:	08003e57 	.word	0x08003e57
 8003dc4:	08003e57 	.word	0x08003e57
 8003dc8:	08003e57 	.word	0x08003e57
 8003dcc:	08003e57 	.word	0x08003e57
 8003dd0:	08003e57 	.word	0x08003e57
 8003dd4:	08003e57 	.word	0x08003e57
 8003dd8:	08003e57 	.word	0x08003e57
 8003ddc:	08003e57 	.word	0x08003e57
 8003de0:	08003e57 	.word	0x08003e57
 8003de4:	08003e57 	.word	0x08003e57
 8003de8:	08003e57 	.word	0x08003e57
 8003dec:	08003e05 	.word	0x08003e05
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	4a79      	ldr	r2, [pc, #484]	@ (8003fdc <HAL_GPIO_Init+0x2b4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003dfa:	e02c      	b.n	8003e56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	623b      	str	r3, [r7, #32]
          break;
 8003e02:	e029      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	623b      	str	r3, [r7, #32]
          break;
 8003e0c:	e024      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	3308      	adds	r3, #8
 8003e14:	623b      	str	r3, [r7, #32]
          break;
 8003e16:	e01f      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	623b      	str	r3, [r7, #32]
          break;
 8003e20:	e01a      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	623b      	str	r3, [r7, #32]
          break;
 8003e2e:	e013      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e38:	2308      	movs	r3, #8
 8003e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	611a      	str	r2, [r3, #16]
          break;
 8003e42:	e009      	b.n	8003e58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e44:	2308      	movs	r3, #8
 8003e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	615a      	str	r2, [r3, #20]
          break;
 8003e4e:	e003      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e50:	2300      	movs	r3, #0
 8003e52:	623b      	str	r3, [r7, #32]
          break;
 8003e54:	e000      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          break;
 8003e56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2bff      	cmp	r3, #255	@ 0xff
 8003e5c:	d801      	bhi.n	8003e62 <HAL_GPIO_Init+0x13a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	e001      	b.n	8003e66 <HAL_GPIO_Init+0x13e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2bff      	cmp	r3, #255	@ 0xff
 8003e6c:	d802      	bhi.n	8003e74 <HAL_GPIO_Init+0x14c>
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	e002      	b.n	8003e7a <HAL_GPIO_Init+0x152>
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	3b08      	subs	r3, #8
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	210f      	movs	r1, #15
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	431a      	orrs	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80b1 	beq.w	800400a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8003fe0 <HAL_GPIO_Init+0x2b8>)
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe0 <HAL_GPIO_Init+0x2b8>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6193      	str	r3, [r2, #24]
 8003eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe0 <HAL_GPIO_Init+0x2b8>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ec0:	4a48      	ldr	r2, [pc, #288]	@ (8003fe4 <HAL_GPIO_Init+0x2bc>)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ecc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	220f      	movs	r2, #15
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a40      	ldr	r2, [pc, #256]	@ (8003fe8 <HAL_GPIO_Init+0x2c0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <HAL_GPIO_Init+0x1ec>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3f      	ldr	r2, [pc, #252]	@ (8003fec <HAL_GPIO_Init+0x2c4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00d      	beq.n	8003f10 <HAL_GPIO_Init+0x1e8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ff0 <HAL_GPIO_Init+0x2c8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d007      	beq.n	8003f0c <HAL_GPIO_Init+0x1e4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff4 <HAL_GPIO_Init+0x2cc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <HAL_GPIO_Init+0x1e0>
 8003f04:	2303      	movs	r3, #3
 8003f06:	e006      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	e004      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e002      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f14:	2300      	movs	r3, #0
 8003f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f18:	f002 0203 	and.w	r2, r2, #3
 8003f1c:	0092      	lsls	r2, r2, #2
 8003f1e:	4093      	lsls	r3, r2
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f26:	492f      	ldr	r1, [pc, #188]	@ (8003fe4 <HAL_GPIO_Init+0x2bc>)
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f40:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	492c      	ldr	r1, [pc, #176]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]
 8003f4c:	e006      	b.n	8003f5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	4928      	ldr	r1, [pc, #160]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d006      	beq.n	8003f76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f68:	4b23      	ldr	r3, [pc, #140]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	4922      	ldr	r1, [pc, #136]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60cb      	str	r3, [r1, #12]
 8003f74:	e006      	b.n	8003f84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f76:	4b20      	ldr	r3, [pc, #128]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	491e      	ldr	r1, [pc, #120]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d006      	beq.n	8003f9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f90:	4b19      	ldr	r3, [pc, #100]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	4918      	ldr	r1, [pc, #96]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
 8003f9c:	e006      	b.n	8003fac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f9e:	4b16      	ldr	r3, [pc, #88]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	4914      	ldr	r1, [pc, #80]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d021      	beq.n	8003ffc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	490e      	ldr	r1, [pc, #56]	@ (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	600b      	str	r3, [r1, #0]
 8003fc4:	e021      	b.n	800400a <HAL_GPIO_Init+0x2e2>
 8003fc6:	bf00      	nop
 8003fc8:	10320000 	.word	0x10320000
 8003fcc:	10310000 	.word	0x10310000
 8003fd0:	10220000 	.word	0x10220000
 8003fd4:	10210000 	.word	0x10210000
 8003fd8:	10120000 	.word	0x10120000
 8003fdc:	10110000 	.word	0x10110000
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40010800 	.word	0x40010800
 8003fec:	40010c00 	.word	0x40010c00
 8003ff0:	40011000 	.word	0x40011000
 8003ff4:	40011400 	.word	0x40011400
 8003ff8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_GPIO_Init+0x304>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	43db      	mvns	r3, r3
 8004004:	4909      	ldr	r1, [pc, #36]	@ (800402c <HAL_GPIO_Init+0x304>)
 8004006:	4013      	ands	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	3301      	adds	r3, #1
 800400e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	f47f ae8e 	bne.w	8003d3c <HAL_GPIO_Init+0x14>
  }
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	372c      	adds	r7, #44	@ 0x2c
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	40010400 	.word	0x40010400

08004030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	887b      	ldrh	r3, [r7, #2]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e001      	b.n	8004052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004052:	7bfb      	ldrb	r3, [r7, #15]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	807b      	strh	r3, [r7, #2]
 800406a:	4613      	mov	r3, r2
 800406c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800406e:	787b      	ldrb	r3, [r7, #1]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004074:	887a      	ldrh	r2, [r7, #2]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800407a:	e003      	b.n	8004084 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800407c:	887b      	ldrh	r3, [r7, #2]
 800407e:	041a      	lsls	r2, r3, #16
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	611a      	str	r2, [r3, #16]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
	...

08004090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e12b      	b.n	80042fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fe f992 	bl	80023e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2224      	movs	r2, #36	@ 0x24
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0201 	bic.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040f4:	f001 f842 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 80040f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4a81      	ldr	r2, [pc, #516]	@ (8004304 <HAL_I2C_Init+0x274>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d807      	bhi.n	8004114 <HAL_I2C_Init+0x84>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4a80      	ldr	r2, [pc, #512]	@ (8004308 <HAL_I2C_Init+0x278>)
 8004108:	4293      	cmp	r3, r2
 800410a:	bf94      	ite	ls
 800410c:	2301      	movls	r3, #1
 800410e:	2300      	movhi	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	e006      	b.n	8004122 <HAL_I2C_Init+0x92>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4a7d      	ldr	r2, [pc, #500]	@ (800430c <HAL_I2C_Init+0x27c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	bf94      	ite	ls
 800411c:	2301      	movls	r3, #1
 800411e:	2300      	movhi	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e0e7      	b.n	80042fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4a78      	ldr	r2, [pc, #480]	@ (8004310 <HAL_I2C_Init+0x280>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	0c9b      	lsrs	r3, r3, #18
 8004134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a6a      	ldr	r2, [pc, #424]	@ (8004304 <HAL_I2C_Init+0x274>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d802      	bhi.n	8004164 <HAL_I2C_Init+0xd4>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	3301      	adds	r3, #1
 8004162:	e009      	b.n	8004178 <HAL_I2C_Init+0xe8>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	4a69      	ldr	r2, [pc, #420]	@ (8004314 <HAL_I2C_Init+0x284>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	3301      	adds	r3, #1
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	430b      	orrs	r3, r1
 800417e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800418a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	495c      	ldr	r1, [pc, #368]	@ (8004304 <HAL_I2C_Init+0x274>)
 8004194:	428b      	cmp	r3, r1
 8004196:	d819      	bhi.n	80041cc <HAL_I2C_Init+0x13c>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1e59      	subs	r1, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80041a6:	1c59      	adds	r1, r3, #1
 80041a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041ac:	400b      	ands	r3, r1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_I2C_Init+0x138>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1e59      	subs	r1, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80041c0:	3301      	adds	r3, #1
 80041c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c6:	e051      	b.n	800426c <HAL_I2C_Init+0x1dc>
 80041c8:	2304      	movs	r3, #4
 80041ca:	e04f      	b.n	800426c <HAL_I2C_Init+0x1dc>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d111      	bne.n	80041f8 <HAL_I2C_Init+0x168>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1e58      	subs	r0, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	440b      	add	r3, r1
 80041e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e6:	3301      	adds	r3, #1
 80041e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e012      	b.n	800421e <HAL_I2C_Init+0x18e>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1e58      	subs	r0, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6859      	ldr	r1, [r3, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	0099      	lsls	r1, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	fbb0 f3f3 	udiv	r3, r0, r3
 800420e:	3301      	adds	r3, #1
 8004210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_I2C_Init+0x196>
 8004222:	2301      	movs	r3, #1
 8004224:	e022      	b.n	800426c <HAL_I2C_Init+0x1dc>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10e      	bne.n	800424c <HAL_I2C_Init+0x1bc>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1e58      	subs	r0, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6859      	ldr	r1, [r3, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	440b      	add	r3, r1
 800423c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004240:	3301      	adds	r3, #1
 8004242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800424a:	e00f      	b.n	800426c <HAL_I2C_Init+0x1dc>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1e58      	subs	r0, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	0099      	lsls	r1, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004262:	3301      	adds	r3, #1
 8004264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004268:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	6809      	ldr	r1, [r1, #0]
 8004270:	4313      	orrs	r3, r2
 8004272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800429a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6911      	ldr	r1, [r2, #16]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68d2      	ldr	r2, [r2, #12]
 80042a6:	4311      	orrs	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	000186a0 	.word	0x000186a0
 8004308:	001e847f 	.word	0x001e847f
 800430c:	003d08ff 	.word	0x003d08ff
 8004310:	431bde83 	.word	0x431bde83
 8004314:	10624dd3 	.word	0x10624dd3

08004318 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	4608      	mov	r0, r1
 8004322:	4611      	mov	r1, r2
 8004324:	461a      	mov	r2, r3
 8004326:	4603      	mov	r3, r0
 8004328:	817b      	strh	r3, [r7, #10]
 800432a:	460b      	mov	r3, r1
 800432c:	813b      	strh	r3, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004332:	f7fe fbc5 	bl	8002ac0 <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b20      	cmp	r3, #32
 8004342:	f040 80d9 	bne.w	80044f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2319      	movs	r3, #25
 800434c:	2201      	movs	r2, #1
 800434e:	496d      	ldr	r1, [pc, #436]	@ (8004504 <HAL_I2C_Mem_Write+0x1ec>)
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f971 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
 800435e:	e0cc      	b.n	80044fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_I2C_Mem_Write+0x56>
 800436a:	2302      	movs	r3, #2
 800436c:	e0c5      	b.n	80044fa <HAL_I2C_Mem_Write+0x1e2>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d007      	beq.n	8004394 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2221      	movs	r2, #33	@ 0x21
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2240      	movs	r2, #64	@ 0x40
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a3a      	ldr	r2, [r7, #32]
 80043be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a4d      	ldr	r2, [pc, #308]	@ (8004508 <HAL_I2C_Mem_Write+0x1f0>)
 80043d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043d6:	88f8      	ldrh	r0, [r7, #6]
 80043d8:	893a      	ldrh	r2, [r7, #8]
 80043da:	8979      	ldrh	r1, [r7, #10]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	4603      	mov	r3, r0
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f890 	bl	800450c <I2C_RequestMemoryWrite>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d052      	beq.n	8004498 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e081      	b.n	80044fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fa36 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	2b04      	cmp	r3, #4
 800440c:	d107      	bne.n	800441e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800441c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e06b      	b.n	80044fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b04      	cmp	r3, #4
 800445e:	d11b      	bne.n	8004498 <HAL_I2C_Mem_Write+0x180>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004464:	2b00      	cmp	r3, #0
 8004466:	d017      	beq.n	8004498 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1aa      	bne.n	80043f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fa29 	bl	80048fc <I2C_WaitOnBTFFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00d      	beq.n	80044cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d107      	bne.n	80044c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e016      	b.n	80044fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	00100002 	.word	0x00100002
 8004508:	ffff0000 	.word	0xffff0000

0800450c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	4608      	mov	r0, r1
 8004516:	4611      	mov	r1, r2
 8004518:	461a      	mov	r2, r3
 800451a:	4603      	mov	r3, r0
 800451c:	817b      	strh	r3, [r7, #10]
 800451e:	460b      	mov	r3, r1
 8004520:	813b      	strh	r3, [r7, #8]
 8004522:	4613      	mov	r3, r2
 8004524:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	2200      	movs	r2, #0
 800453e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f878 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800455c:	d103      	bne.n	8004566 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004564:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e05f      	b.n	800462a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800456a:	897b      	ldrh	r3, [r7, #10]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	6a3a      	ldr	r2, [r7, #32]
 800457e:	492d      	ldr	r1, [pc, #180]	@ (8004634 <I2C_RequestMemoryWrite+0x128>)
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f8d3 	bl	800472c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e04c      	b.n	800462a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a8:	6a39      	ldr	r1, [r7, #32]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f95e 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d107      	bne.n	80045ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e02b      	b.n	800462a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d105      	bne.n	80045e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045d8:	893b      	ldrh	r3, [r7, #8]
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	611a      	str	r2, [r3, #16]
 80045e2:	e021      	b.n	8004628 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045e4:	893b      	ldrh	r3, [r7, #8]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f4:	6a39      	ldr	r1, [r7, #32]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f938 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004606:	2b04      	cmp	r3, #4
 8004608:	d107      	bne.n	800461a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e005      	b.n	800462a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800461e:	893b      	ldrh	r3, [r7, #8]
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	00010002 	.word	0x00010002

08004638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004648:	e048      	b.n	80046dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d044      	beq.n	80046dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fe fa35 	bl	8002ac0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d139      	bne.n	80046dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	0c1b      	lsrs	r3, r3, #16
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d10d      	bne.n	800468e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	43da      	mvns	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	e00c      	b.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	43da      	mvns	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d116      	bne.n	80046dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e023      	b.n	8004724 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	0c1b      	lsrs	r3, r3, #16
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d10d      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0xca>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	43da      	mvns	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4013      	ands	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	e00c      	b.n	800471c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	43da      	mvns	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4013      	ands	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	bf0c      	ite	eq
 8004714:	2301      	moveq	r3, #1
 8004716:	2300      	movne	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	429a      	cmp	r2, r3
 8004720:	d093      	beq.n	800464a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800473a:	e071      	b.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474a:	d123      	bne.n	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004764:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	f043 0204 	orr.w	r2, r3, #4
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e067      	b.n	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d041      	beq.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479c:	f7fe f990 	bl	8002ac0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d302      	bcc.n	80047b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d136      	bne.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	0c1b      	lsrs	r3, r3, #16
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d10c      	bne.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	43da      	mvns	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4013      	ands	r3, r2
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bf14      	ite	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	2300      	moveq	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	e00b      	b.n	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	43da      	mvns	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480c:	f043 0220 	orr.w	r2, r3, #32
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e021      	b.n	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10c      	bne.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	43da      	mvns	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4013      	ands	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e00b      	b.n	800485c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	43da      	mvns	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4013      	ands	r3, r2
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf14      	ite	ne
 8004856:	2301      	movne	r3, #1
 8004858:	2300      	moveq	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	f47f af6d 	bne.w	800473c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004878:	e034      	b.n	80048e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f886 	bl	800498c <I2C_IsAcknowledgeFailed>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e034      	b.n	80048f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d028      	beq.n	80048e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fe f915 	bl	8002ac0 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11d      	bne.n	80048e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b2:	2b80      	cmp	r3, #128	@ 0x80
 80048b4:	d016      	beq.n	80048e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e007      	b.n	80048f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ee:	2b80      	cmp	r3, #128	@ 0x80
 80048f0:	d1c3      	bne.n	800487a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004908:	e034      	b.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f83e 	bl	800498c <I2C_IsAcknowledgeFailed>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e034      	b.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d028      	beq.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fe f8cd 	bl	8002ac0 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d11d      	bne.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b04      	cmp	r3, #4
 8004944:	d016      	beq.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e007      	b.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d1c3      	bne.n	800490a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a2:	d11b      	bne.n	80049dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c8:	f043 0204 	orr.w	r2, r3, #4
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e272      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8087 	beq.w	8004b16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a08:	4b92      	ldr	r3, [pc, #584]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d00c      	beq.n	8004a2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a14:	4b8f      	ldr	r3, [pc, #572]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 030c 	and.w	r3, r3, #12
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d112      	bne.n	8004a46 <HAL_RCC_OscConfig+0x5e>
 8004a20:	4b8c      	ldr	r3, [pc, #560]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a2c:	d10b      	bne.n	8004a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2e:	4b89      	ldr	r3, [pc, #548]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d06c      	beq.n	8004b14 <HAL_RCC_OscConfig+0x12c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d168      	bne.n	8004b14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e24c      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCC_OscConfig+0x76>
 8004a50:	4b80      	ldr	r3, [pc, #512]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a7f      	ldr	r2, [pc, #508]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	e02e      	b.n	8004abc <HAL_RCC_OscConfig+0xd4>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x98>
 8004a66:	4b7b      	ldr	r3, [pc, #492]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a7a      	ldr	r2, [pc, #488]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b78      	ldr	r3, [pc, #480]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a77      	ldr	r2, [pc, #476]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e01d      	b.n	8004abc <HAL_RCC_OscConfig+0xd4>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0xbc>
 8004a8a:	4b72      	ldr	r3, [pc, #456]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a71      	ldr	r2, [pc, #452]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	4b6f      	ldr	r3, [pc, #444]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a6e      	ldr	r2, [pc, #440]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e00b      	b.n	8004abc <HAL_RCC_OscConfig+0xd4>
 8004aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	4b68      	ldr	r3, [pc, #416]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a67      	ldr	r2, [pc, #412]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fffc 	bl	8002ac0 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004acc:	f7fd fff8 	bl	8002ac0 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	@ 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e200      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	4b5d      	ldr	r3, [pc, #372]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0xe4>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fd ffe8 	bl	8002ac0 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af4:	f7fd ffe4 	bl	8002ac0 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	@ 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e1ec      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b06:	4b53      	ldr	r3, [pc, #332]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x10c>
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d063      	beq.n	8004bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b22:	4b4c      	ldr	r3, [pc, #304]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b2e:	4b49      	ldr	r3, [pc, #292]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 030c 	and.w	r3, r3, #12
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d11c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x18c>
 8004b3a:	4b46      	ldr	r3, [pc, #280]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d116      	bne.n	8004b74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b46:	4b43      	ldr	r3, [pc, #268]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_RCC_OscConfig+0x176>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d001      	beq.n	8004b5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e1c0      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4939      	ldr	r1, [pc, #228]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b72:	e03a      	b.n	8004bea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d020      	beq.n	8004bbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b7c:	4b36      	ldr	r3, [pc, #216]	@ (8004c58 <HAL_RCC_OscConfig+0x270>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b82:	f7fd ff9d 	bl	8002ac0 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8a:	f7fd ff99 	bl	8002ac0 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e1a1      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4927      	ldr	r1, [pc, #156]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]
 8004bbc:	e015      	b.n	8004bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bbe:	4b26      	ldr	r3, [pc, #152]	@ (8004c58 <HAL_RCC_OscConfig+0x270>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fd ff7c 	bl	8002ac0 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bcc:	f7fd ff78 	bl	8002ac0 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e180      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bde:	4b1d      	ldr	r3, [pc, #116]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d03a      	beq.n	8004c6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d019      	beq.n	8004c32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfe:	4b17      	ldr	r3, [pc, #92]	@ (8004c5c <HAL_RCC_OscConfig+0x274>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c04:	f7fd ff5c 	bl	8002ac0 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0c:	f7fd ff58 	bl	8002ac0 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e160      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <HAL_RCC_OscConfig+0x26c>)
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c2a:	2001      	movs	r0, #1
 8004c2c:	f000 face 	bl	80051cc <RCC_Delay>
 8004c30:	e01c      	b.n	8004c6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c32:	4b0a      	ldr	r3, [pc, #40]	@ (8004c5c <HAL_RCC_OscConfig+0x274>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c38:	f7fd ff42 	bl	8002ac0 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c3e:	e00f      	b.n	8004c60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c40:	f7fd ff3e 	bl	8002ac0 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d908      	bls.n	8004c60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e146      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
 8004c58:	42420000 	.word	0x42420000
 8004c5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	4b92      	ldr	r3, [pc, #584]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e9      	bne.n	8004c40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80a6 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10d      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	4b88      	ldr	r3, [pc, #544]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	4a87      	ldr	r2, [pc, #540]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	61d3      	str	r3, [r2, #28]
 8004c96:	4b85      	ldr	r3, [pc, #532]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca6:	4b82      	ldr	r3, [pc, #520]	@ (8004eb0 <HAL_RCC_OscConfig+0x4c8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d118      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb0 <HAL_RCC_OscConfig+0x4c8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a7e      	ldr	r2, [pc, #504]	@ (8004eb0 <HAL_RCC_OscConfig+0x4c8>)
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cbe:	f7fd feff 	bl	8002ac0 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc6:	f7fd fefb 	bl	8002ac0 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b64      	cmp	r3, #100	@ 0x64
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e103      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	4b75      	ldr	r3, [pc, #468]	@ (8004eb0 <HAL_RCC_OscConfig+0x4c8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x312>
 8004cec:	4b6f      	ldr	r3, [pc, #444]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	4a6e      	ldr	r2, [pc, #440]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6213      	str	r3, [r2, #32]
 8004cf8:	e02d      	b.n	8004d56 <HAL_RCC_OscConfig+0x36e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x334>
 8004d02:	4b6a      	ldr	r3, [pc, #424]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	4a69      	ldr	r2, [pc, #420]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	6213      	str	r3, [r2, #32]
 8004d0e:	4b67      	ldr	r3, [pc, #412]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	4a66      	ldr	r2, [pc, #408]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	f023 0304 	bic.w	r3, r3, #4
 8004d18:	6213      	str	r3, [r2, #32]
 8004d1a:	e01c      	b.n	8004d56 <HAL_RCC_OscConfig+0x36e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b05      	cmp	r3, #5
 8004d22:	d10c      	bne.n	8004d3e <HAL_RCC_OscConfig+0x356>
 8004d24:	4b61      	ldr	r3, [pc, #388]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	4a60      	ldr	r2, [pc, #384]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d2a:	f043 0304 	orr.w	r3, r3, #4
 8004d2e:	6213      	str	r3, [r2, #32]
 8004d30:	4b5e      	ldr	r3, [pc, #376]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	4a5d      	ldr	r2, [pc, #372]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	6213      	str	r3, [r2, #32]
 8004d3c:	e00b      	b.n	8004d56 <HAL_RCC_OscConfig+0x36e>
 8004d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	4a5a      	ldr	r2, [pc, #360]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	6213      	str	r3, [r2, #32]
 8004d4a:	4b58      	ldr	r3, [pc, #352]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	4a57      	ldr	r2, [pc, #348]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d50:	f023 0304 	bic.w	r3, r3, #4
 8004d54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d015      	beq.n	8004d8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd feaf 	bl	8002ac0 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fd feab 	bl	8002ac0 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e0b1      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ee      	beq.n	8004d66 <HAL_RCC_OscConfig+0x37e>
 8004d88:	e014      	b.n	8004db4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8a:	f7fd fe99 	bl	8002ac0 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d90:	e00a      	b.n	8004da8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d92:	f7fd fe95 	bl	8002ac0 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e09b      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da8:	4b40      	ldr	r3, [pc, #256]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1ee      	bne.n	8004d92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d105      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dba:	4b3c      	ldr	r3, [pc, #240]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	4a3b      	ldr	r2, [pc, #236]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8087 	beq.w	8004ede <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dd0:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 030c 	and.w	r3, r3, #12
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d061      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d146      	bne.n	8004e72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de4:	4b33      	ldr	r3, [pc, #204]	@ (8004eb4 <HAL_RCC_OscConfig+0x4cc>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dea:	f7fd fe69 	bl	8002ac0 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df2:	f7fd fe65 	bl	8002ac0 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e06d      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e04:	4b29      	ldr	r3, [pc, #164]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f0      	bne.n	8004df2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e18:	d108      	bne.n	8004e2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e1a:	4b24      	ldr	r3, [pc, #144]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	4921      	ldr	r1, [pc, #132]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a19      	ldr	r1, [r3, #32]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	491b      	ldr	r1, [pc, #108]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e44:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb4 <HAL_RCC_OscConfig+0x4cc>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4a:	f7fd fe39 	bl	8002ac0 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e52:	f7fd fe35 	bl	8002ac0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e03d      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e64:	4b11      	ldr	r3, [pc, #68]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCC_OscConfig+0x46a>
 8004e70:	e035      	b.n	8004ede <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e72:	4b10      	ldr	r3, [pc, #64]	@ (8004eb4 <HAL_RCC_OscConfig+0x4cc>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fd fe22 	bl	8002ac0 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e80:	f7fd fe1e 	bl	8002ac0 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e026      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <HAL_RCC_OscConfig+0x4c4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x498>
 8004e9e:	e01e      	b.n	8004ede <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e019      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	40007000 	.word	0x40007000
 8004eb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <HAL_RCC_OscConfig+0x500>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d106      	bne.n	8004eda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d001      	beq.n	8004ede <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40021000 	.word	0x40021000

08004eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0d0      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f00:	4b6a      	ldr	r3, [pc, #424]	@ (80050ac <HAL_RCC_ClockConfig+0x1c0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d910      	bls.n	8004f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0e:	4b67      	ldr	r3, [pc, #412]	@ (80050ac <HAL_RCC_ClockConfig+0x1c0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f023 0207 	bic.w	r2, r3, #7
 8004f16:	4965      	ldr	r1, [pc, #404]	@ (80050ac <HAL_RCC_ClockConfig+0x1c0>)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1e:	4b63      	ldr	r3, [pc, #396]	@ (80050ac <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0b8      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d020      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f48:	4b59      	ldr	r3, [pc, #356]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4a58      	ldr	r2, [pc, #352]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f60:	4b53      	ldr	r3, [pc, #332]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4a52      	ldr	r2, [pc, #328]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004f6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6c:	4b50      	ldr	r3, [pc, #320]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	494d      	ldr	r1, [pc, #308]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d040      	beq.n	800500c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f92:	4b47      	ldr	r3, [pc, #284]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d115      	bne.n	8004fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e07f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d107      	bne.n	8004fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004faa:	4b41      	ldr	r3, [pc, #260]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e073      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fba:	4b3d      	ldr	r3, [pc, #244]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e06b      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fca:	4b39      	ldr	r3, [pc, #228]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f023 0203 	bic.w	r2, r3, #3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4936      	ldr	r1, [pc, #216]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fdc:	f7fd fd70 	bl	8002ac0 <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe2:	e00a      	b.n	8004ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe4:	f7fd fd6c 	bl	8002ac0 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e053      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 020c 	and.w	r2, r3, #12
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	429a      	cmp	r2, r3
 800500a:	d1eb      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800500c:	4b27      	ldr	r3, [pc, #156]	@ (80050ac <HAL_RCC_ClockConfig+0x1c0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d210      	bcs.n	800503c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501a:	4b24      	ldr	r3, [pc, #144]	@ (80050ac <HAL_RCC_ClockConfig+0x1c0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 0207 	bic.w	r2, r3, #7
 8005022:	4922      	ldr	r1, [pc, #136]	@ (80050ac <HAL_RCC_ClockConfig+0x1c0>)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b20      	ldr	r3, [pc, #128]	@ (80050ac <HAL_RCC_ClockConfig+0x1c0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e032      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005048:	4b19      	ldr	r3, [pc, #100]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4916      	ldr	r1, [pc, #88]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005056:	4313      	orrs	r3, r2
 8005058:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005066:	4b12      	ldr	r3, [pc, #72]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	490e      	ldr	r1, [pc, #56]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005076:	4313      	orrs	r3, r2
 8005078:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800507a:	f000 f821 	bl	80050c0 <HAL_RCC_GetSysClockFreq>
 800507e:	4602      	mov	r2, r0
 8005080:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	091b      	lsrs	r3, r3, #4
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	490a      	ldr	r1, [pc, #40]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c8>)
 800508c:	5ccb      	ldrb	r3, [r1, r3]
 800508e:	fa22 f303 	lsr.w	r3, r2, r3
 8005092:	4a09      	ldr	r2, [pc, #36]	@ (80050b8 <HAL_RCC_ClockConfig+0x1cc>)
 8005094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005096:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <HAL_RCC_ClockConfig+0x1d0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7fd fcce 	bl	8002a3c <HAL_InitTick>

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40022000 	.word	0x40022000
 80050b0:	40021000 	.word	0x40021000
 80050b4:	0800e5b8 	.word	0x0800e5b8
 80050b8:	20000028 	.word	0x20000028
 80050bc:	2000002c 	.word	0x2000002c

080050c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	2300      	movs	r3, #0
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	2300      	movs	r3, #0
 80050d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050da:	4b1e      	ldr	r3, [pc, #120]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x94>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d002      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x30>
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d003      	beq.n	80050f6 <HAL_RCC_GetSysClockFreq+0x36>
 80050ee:	e027      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050f0:	4b19      	ldr	r3, [pc, #100]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x98>)
 80050f2:	613b      	str	r3, [r7, #16]
      break;
 80050f4:	e027      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	0c9b      	lsrs	r3, r3, #18
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	4a17      	ldr	r2, [pc, #92]	@ (800515c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005100:	5cd3      	ldrb	r3, [r2, r3]
 8005102:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800510e:	4b11      	ldr	r3, [pc, #68]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x94>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	0c5b      	lsrs	r3, r3, #17
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	4a11      	ldr	r2, [pc, #68]	@ (8005160 <HAL_RCC_GetSysClockFreq+0xa0>)
 800511a:	5cd3      	ldrb	r3, [r2, r3]
 800511c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a0d      	ldr	r2, [pc, #52]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x98>)
 8005122:	fb03 f202 	mul.w	r2, r3, r2
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e004      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a0c      	ldr	r2, [pc, #48]	@ (8005164 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005134:	fb02 f303 	mul.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	613b      	str	r3, [r7, #16]
      break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x98>)
 8005142:	613b      	str	r3, [r7, #16]
      break;
 8005144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005146:	693b      	ldr	r3, [r7, #16]
}
 8005148:	4618      	mov	r0, r3
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000
 8005158:	007a1200 	.word	0x007a1200
 800515c:	0800e5d0 	.word	0x0800e5d0
 8005160:	0800e5e0 	.word	0x0800e5e0
 8005164:	003d0900 	.word	0x003d0900

08005168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800516c:	4b02      	ldr	r3, [pc, #8]	@ (8005178 <HAL_RCC_GetHCLKFreq+0x10>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	20000028 	.word	0x20000028

0800517c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005180:	f7ff fff2 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8005184:	4602      	mov	r2, r0
 8005186:	4b05      	ldr	r3, [pc, #20]	@ (800519c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	0a1b      	lsrs	r3, r3, #8
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	4903      	ldr	r1, [pc, #12]	@ (80051a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005192:	5ccb      	ldrb	r3, [r1, r3]
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40021000 	.word	0x40021000
 80051a0:	0800e5c8 	.word	0x0800e5c8

080051a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051a8:	f7ff ffde 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	0adb      	lsrs	r3, r3, #11
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4903      	ldr	r1, [pc, #12]	@ (80051c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000
 80051c8:	0800e5c8 	.word	0x0800e5c8

080051cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <RCC_Delay+0x34>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005204 <RCC_Delay+0x38>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	0a5b      	lsrs	r3, r3, #9
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051e8:	bf00      	nop
  }
  while (Delay --);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1e5a      	subs	r2, r3, #1
 80051ee:	60fa      	str	r2, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f9      	bne.n	80051e8 <RCC_Delay+0x1c>
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr
 8005200:	20000028 	.word	0x20000028
 8005204:	10624dd3 	.word	0x10624dd3

08005208 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d07d      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005224:	2300      	movs	r3, #0
 8005226:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005228:	4b4f      	ldr	r3, [pc, #316]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10d      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005234:	4b4c      	ldr	r3, [pc, #304]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	4a4b      	ldr	r2, [pc, #300]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800523e:	61d3      	str	r3, [r2, #28]
 8005240:	4b49      	ldr	r3, [pc, #292]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800524c:	2301      	movs	r3, #1
 800524e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005250:	4b46      	ldr	r3, [pc, #280]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d118      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800525c:	4b43      	ldr	r3, [pc, #268]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a42      	ldr	r2, [pc, #264]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005266:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005268:	f7fd fc2a 	bl	8002ac0 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526e:	e008      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005270:	f7fd fc26 	bl	8002ac0 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b64      	cmp	r3, #100	@ 0x64
 800527c:	d901      	bls.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e06d      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005282:	4b3a      	ldr	r3, [pc, #232]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800528e:	4b36      	ldr	r3, [pc, #216]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005296:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d02e      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d027      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052c2:	4a29      	ldr	r2, [pc, #164]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d014      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d2:	f7fd fbf5 	bl	8002ac0 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fd fbf1 	bl	8002ac0 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e036      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ee      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4917      	ldr	r1, [pc, #92]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530a:	4313      	orrs	r3, r2
 800530c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005314:	4b14      	ldr	r3, [pc, #80]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	4a13      	ldr	r2, [pc, #76]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800532c:	4b0e      	ldr	r3, [pc, #56]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	490b      	ldr	r1, [pc, #44]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533a:	4313      	orrs	r3, r2
 800533c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800534a:	4b07      	ldr	r3, [pc, #28]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	4904      	ldr	r1, [pc, #16]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
 800536c:	40007000 	.word	0x40007000
 8005370:	42420440 	.word	0x42420440

08005374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e041      	b.n	800540a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fd f870 	bl	8002480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f000 fafc 	bl	80059b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d001      	beq.n	800542c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e032      	b.n	8005492 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a18      	ldr	r2, [pc, #96]	@ (800549c <HAL_TIM_Base_Start+0x88>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00e      	beq.n	800545c <HAL_TIM_Base_Start+0x48>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005446:	d009      	beq.n	800545c <HAL_TIM_Base_Start+0x48>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a14      	ldr	r2, [pc, #80]	@ (80054a0 <HAL_TIM_Base_Start+0x8c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_TIM_Base_Start+0x48>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a13      	ldr	r2, [pc, #76]	@ (80054a4 <HAL_TIM_Base_Start+0x90>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d111      	bne.n	8005480 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b06      	cmp	r3, #6
 800546c:	d010      	beq.n	8005490 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547e:	e007      	b.n	8005490 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800

080054a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e041      	b.n	800553e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f839 	bl	8005546 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f000 fa62 	bl	80059b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d109      	bne.n	800557c <HAL_TIM_PWM_Start+0x24>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e022      	b.n	80055c2 <HAL_TIM_PWM_Start+0x6a>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b04      	cmp	r3, #4
 8005580:	d109      	bne.n	8005596 <HAL_TIM_PWM_Start+0x3e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	e015      	b.n	80055c2 <HAL_TIM_PWM_Start+0x6a>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d109      	bne.n	80055b0 <HAL_TIM_PWM_Start+0x58>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e008      	b.n	80055c2 <HAL_TIM_PWM_Start+0x6a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	bf14      	ite	ne
 80055bc:	2301      	movne	r3, #1
 80055be:	2300      	moveq	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e05e      	b.n	8005688 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <HAL_TIM_PWM_Start+0x82>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055d8:	e013      	b.n	8005602 <HAL_TIM_PWM_Start+0xaa>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d104      	bne.n	80055ea <HAL_TIM_PWM_Start+0x92>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055e8:	e00b      	b.n	8005602 <HAL_TIM_PWM_Start+0xaa>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d104      	bne.n	80055fa <HAL_TIM_PWM_Start+0xa2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055f8:	e003      	b.n	8005602 <HAL_TIM_PWM_Start+0xaa>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2201      	movs	r2, #1
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fc50 	bl	8005eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1e      	ldr	r2, [pc, #120]	@ (8005690 <HAL_TIM_PWM_Start+0x138>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d107      	bne.n	800562a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005628:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a18      	ldr	r2, [pc, #96]	@ (8005690 <HAL_TIM_PWM_Start+0x138>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_TIM_PWM_Start+0xfa>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563c:	d009      	beq.n	8005652 <HAL_TIM_PWM_Start+0xfa>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a14      	ldr	r2, [pc, #80]	@ (8005694 <HAL_TIM_PWM_Start+0x13c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_TIM_PWM_Start+0xfa>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a12      	ldr	r2, [pc, #72]	@ (8005698 <HAL_TIM_PWM_Start+0x140>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d111      	bne.n	8005676 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b06      	cmp	r3, #6
 8005662:	d010      	beq.n	8005686 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	e007      	b.n	8005686 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40012c00 	.word	0x40012c00
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800

0800569c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e0ae      	b.n	8005818 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	f200 809f 	bhi.w	8005808 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056ca:	a201      	add	r2, pc, #4	@ (adr r2, 80056d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	08005705 	.word	0x08005705
 80056d4:	08005809 	.word	0x08005809
 80056d8:	08005809 	.word	0x08005809
 80056dc:	08005809 	.word	0x08005809
 80056e0:	08005745 	.word	0x08005745
 80056e4:	08005809 	.word	0x08005809
 80056e8:	08005809 	.word	0x08005809
 80056ec:	08005809 	.word	0x08005809
 80056f0:	08005787 	.word	0x08005787
 80056f4:	08005809 	.word	0x08005809
 80056f8:	08005809 	.word	0x08005809
 80056fc:	08005809 	.word	0x08005809
 8005700:	080057c7 	.word	0x080057c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f9b2 	bl	8005a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0208 	orr.w	r2, r2, #8
 800571e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0204 	bic.w	r2, r2, #4
 800572e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6999      	ldr	r1, [r3, #24]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	619a      	str	r2, [r3, #24]
      break;
 8005742:	e064      	b.n	800580e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f9f8 	bl	8005b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800575e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800576e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6999      	ldr	r1, [r3, #24]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	021a      	lsls	r2, r3, #8
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	619a      	str	r2, [r3, #24]
      break;
 8005784:	e043      	b.n	800580e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fa41 	bl	8005c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0208 	orr.w	r2, r2, #8
 80057a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0204 	bic.w	r2, r2, #4
 80057b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69d9      	ldr	r1, [r3, #28]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	61da      	str	r2, [r3, #28]
      break;
 80057c4:	e023      	b.n	800580e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fa8b 	bl	8005ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69d9      	ldr	r1, [r3, #28]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	021a      	lsls	r2, r3, #8
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	61da      	str	r2, [r3, #28]
      break;
 8005806:	e002      	b.n	800580e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	75fb      	strb	r3, [r7, #23]
      break;
 800580c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_TIM_ConfigClockSource+0x1c>
 8005838:	2302      	movs	r3, #2
 800583a:	e0b4      	b.n	80059a6 <HAL_TIM_ConfigClockSource+0x186>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800585a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005874:	d03e      	beq.n	80058f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800587a:	f200 8087 	bhi.w	800598c <HAL_TIM_ConfigClockSource+0x16c>
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005882:	f000 8086 	beq.w	8005992 <HAL_TIM_ConfigClockSource+0x172>
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588a:	d87f      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b70      	cmp	r3, #112	@ 0x70
 800588e:	d01a      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005890:	2b70      	cmp	r3, #112	@ 0x70
 8005892:	d87b      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b60      	cmp	r3, #96	@ 0x60
 8005896:	d050      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x11a>
 8005898:	2b60      	cmp	r3, #96	@ 0x60
 800589a:	d877      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b50      	cmp	r3, #80	@ 0x50
 800589e:	d03c      	beq.n	800591a <HAL_TIM_ConfigClockSource+0xfa>
 80058a0:	2b50      	cmp	r3, #80	@ 0x50
 80058a2:	d873      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b40      	cmp	r3, #64	@ 0x40
 80058a6:	d058      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x13a>
 80058a8:	2b40      	cmp	r3, #64	@ 0x40
 80058aa:	d86f      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b30      	cmp	r3, #48	@ 0x30
 80058ae:	d064      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058b0:	2b30      	cmp	r3, #48	@ 0x30
 80058b2:	d86b      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d060      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d867      	bhi.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d05c      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d05a      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	e062      	b.n	800598c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058d6:	f000 facc 	bl	8005e72 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	609a      	str	r2, [r3, #8]
      break;
 80058f2:	e04f      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005904:	f000 fab5 	bl	8005e72 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005916:	609a      	str	r2, [r3, #8]
      break;
 8005918:	e03c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005926:	461a      	mov	r2, r3
 8005928:	f000 fa2c 	bl	8005d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2150      	movs	r1, #80	@ 0x50
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fa83 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 8005938:	e02c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005946:	461a      	mov	r2, r3
 8005948:	f000 fa4a 	bl	8005de0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2160      	movs	r1, #96	@ 0x60
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fa73 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 8005958:	e01c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005966:	461a      	mov	r2, r3
 8005968:	f000 fa0c 	bl	8005d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2140      	movs	r1, #64	@ 0x40
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fa63 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 8005978:	e00c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f000 fa5a 	bl	8005e3e <TIM_ITRx_SetConfig>
      break;
 800598a:	e003      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
      break;
 8005990:	e000      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a29      	ldr	r2, [pc, #164]	@ (8005a68 <TIM_Base_SetConfig+0xb8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00b      	beq.n	80059e0 <TIM_Base_SetConfig+0x30>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ce:	d007      	beq.n	80059e0 <TIM_Base_SetConfig+0x30>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a26      	ldr	r2, [pc, #152]	@ (8005a6c <TIM_Base_SetConfig+0xbc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_Base_SetConfig+0x30>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a25      	ldr	r2, [pc, #148]	@ (8005a70 <TIM_Base_SetConfig+0xc0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d108      	bne.n	80059f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a68 <TIM_Base_SetConfig+0xb8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00b      	beq.n	8005a12 <TIM_Base_SetConfig+0x62>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a00:	d007      	beq.n	8005a12 <TIM_Base_SetConfig+0x62>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a19      	ldr	r2, [pc, #100]	@ (8005a6c <TIM_Base_SetConfig+0xbc>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_Base_SetConfig+0x62>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a18      	ldr	r2, [pc, #96]	@ (8005a70 <TIM_Base_SetConfig+0xc0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d108      	bne.n	8005a24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a07      	ldr	r2, [pc, #28]	@ (8005a68 <TIM_Base_SetConfig+0xb8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d103      	bne.n	8005a58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	615a      	str	r2, [r3, #20]
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800

08005a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f023 0201 	bic.w	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 0302 	bic.w	r3, r3, #2
 8005abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a1c      	ldr	r2, [pc, #112]	@ (8005b3c <TIM_OC1_SetConfig+0xc8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d10c      	bne.n	8005aea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0308 	bic.w	r3, r3, #8
 8005ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f023 0304 	bic.w	r3, r3, #4
 8005ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a13      	ldr	r2, [pc, #76]	@ (8005b3c <TIM_OC1_SetConfig+0xc8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d111      	bne.n	8005b16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40012c00 	.word	0x40012c00

08005b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	f023 0210 	bic.w	r2, r3, #16
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 0320 	bic.w	r3, r3, #32
 8005b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005c10 <TIM_OC2_SetConfig+0xd0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d10d      	bne.n	8005bbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a14      	ldr	r2, [pc, #80]	@ (8005c10 <TIM_OC2_SetConfig+0xd0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d113      	bne.n	8005bec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr
 8005c10:	40012c00 	.word	0x40012c00

08005c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0303 	bic.w	r3, r3, #3
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce4 <TIM_OC3_SetConfig+0xd0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d10d      	bne.n	8005c8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	021b      	lsls	r3, r3, #8
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a14      	ldr	r2, [pc, #80]	@ (8005ce4 <TIM_OC3_SetConfig+0xd0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d113      	bne.n	8005cbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	621a      	str	r2, [r3, #32]
}
 8005cd8:	bf00      	nop
 8005cda:	371c      	adds	r7, #28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40012c00 	.word	0x40012c00

08005ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	031b      	lsls	r3, r3, #12
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a0f      	ldr	r2, [pc, #60]	@ (8005d80 <TIM_OC4_SetConfig+0x98>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d109      	bne.n	8005d5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	019b      	lsls	r3, r3, #6
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr
 8005d80:	40012c00 	.word	0x40012c00

08005d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f023 0201 	bic.w	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f023 030a 	bic.w	r3, r3, #10
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0210 	bic.w	r2, r3, #16
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	031b      	lsls	r3, r3, #12
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	621a      	str	r2, [r3, #32]
}
 8005e34:	bf00      	nop
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr

08005e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f043 0307 	orr.w	r3, r3, #7
 8005e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr

08005e72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b087      	sub	sp, #28
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	021a      	lsls	r2, r3, #8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	431a      	orrs	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	609a      	str	r2, [r3, #8]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f003 031f 	and.w	r3, r3, #31
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1a      	ldr	r2, [r3, #32]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1a      	ldr	r2, [r3, #32]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	621a      	str	r2, [r3, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e046      	b.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a16      	ldr	r2, [pc, #88]	@ (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00e      	beq.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f5c:	d009      	beq.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a12      	ldr	r2, [pc, #72]	@ (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a10      	ldr	r2, [pc, #64]	@ (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d10c      	bne.n	8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40000400 	.word	0x40000400
 8005fb0:	40000800 	.word	0x40000800

08005fb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e03d      	b.n	800604c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4313      	orrs	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr

08006056 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e042      	b.n	80060ee <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7fc fa85 	bl	800258c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2224      	movs	r2, #36	@ 0x24
 8006086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006098:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fe02 	bl	8006ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b08a      	sub	sp, #40	@ 0x28
 80060fa:	af02      	add	r7, sp, #8
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	603b      	str	r3, [r7, #0]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b20      	cmp	r3, #32
 8006114:	d16d      	bne.n	80061f2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_UART_Transmit+0x2c>
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e066      	b.n	80061f4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2221      	movs	r2, #33	@ 0x21
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006134:	f7fc fcc4 	bl	8002ac0 <HAL_GetTick>
 8006138:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	88fa      	ldrh	r2, [r7, #6]
 800613e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800614e:	d108      	bne.n	8006162 <HAL_UART_Transmit+0x6c>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	61bb      	str	r3, [r7, #24]
 8006160:	e003      	b.n	800616a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800616a:	e02a      	b.n	80061c2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2200      	movs	r2, #0
 8006174:	2180      	movs	r1, #128	@ 0x80
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fb8a 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e036      	b.n	80061f4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10b      	bne.n	80061a4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	461a      	mov	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800619a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	3302      	adds	r3, #2
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	e007      	b.n	80061b4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	781a      	ldrb	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	3301      	adds	r3, #1
 80061b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1cf      	bne.n	800616c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2200      	movs	r2, #0
 80061d4:	2140      	movs	r1, #64	@ 0x40
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fb5a 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e006      	b.n	80061f4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e000      	b.n	80061f4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80061f2:	2302      	movs	r3, #2
  }
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	@ 0x28
 8006200:	af02      	add	r7, sp, #8
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b20      	cmp	r3, #32
 800621a:	d17c      	bne.n	8006316 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_UART_Receive+0x2c>
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e075      	b.n	8006318 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2222      	movs	r2, #34	@ 0x22
 8006236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006240:	f7fc fc3e 	bl	8002ac0 <HAL_GetTick>
 8006244:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	88fa      	ldrh	r2, [r7, #6]
 800624a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	88fa      	ldrh	r2, [r7, #6]
 8006250:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625a:	d108      	bne.n	800626e <HAL_UART_Receive+0x72>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d104      	bne.n	800626e <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	e003      	b.n	8006276 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006272:	2300      	movs	r3, #0
 8006274:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006276:	e043      	b.n	8006300 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2200      	movs	r2, #0
 8006280:	2120      	movs	r1, #32
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fb04 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e042      	b.n	8006318 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10c      	bne.n	80062b2 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	3302      	adds	r3, #2
 80062ae:	61bb      	str	r3, [r7, #24]
 80062b0:	e01f      	b.n	80062f2 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ba:	d007      	beq.n	80062cc <HAL_UART_Receive+0xd0>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <HAL_UART_Receive+0xde>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d106      	bne.n	80062da <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	e008      	b.n	80062ec <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	3301      	adds	r3, #1
 80062f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1b6      	bne.n	8006278 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	e000      	b.n	8006318 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006316:	2302      	movs	r3, #2
  }
}
 8006318:	4618      	mov	r0, r3
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b0ba      	sub	sp, #232	@ 0xe8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006346:	2300      	movs	r3, #0
 8006348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800634c:	2300      	movs	r3, #0
 800634e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800635e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10f      	bne.n	8006386 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <HAL_UART_IRQHandler+0x66>
 8006372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fbd1 	bl	8006b26 <UART_Receive_IT>
      return;
 8006384:	e25b      	b.n	800683e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80de 	beq.w	800654c <HAL_UART_IRQHandler+0x22c>
 8006390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d106      	bne.n	80063aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80d1 	beq.w	800654c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <HAL_UART_IRQHandler+0xae>
 80063b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c6:	f043 0201 	orr.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_UART_IRQHandler+0xd2>
 80063da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ea:	f043 0202 	orr.w	r2, r3, #2
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <HAL_UART_IRQHandler+0xf6>
 80063fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640e:	f043 0204 	orr.w	r2, r3, #4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d011      	beq.n	8006446 <HAL_UART_IRQHandler+0x126>
 8006422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d105      	bne.n	800643a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800642e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	f043 0208 	orr.w	r2, r3, #8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 81f2 	beq.w	8006834 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d008      	beq.n	800646e <HAL_UART_IRQHandler+0x14e>
 800645c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fb5c 	bl	8006b26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf14      	ite	ne
 800647c:	2301      	movne	r3, #1
 800647e:	2300      	moveq	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <HAL_UART_IRQHandler+0x17a>
 8006492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d04f      	beq.n	800653a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa66 	bl	800696c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d041      	beq.n	8006532 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3314      	adds	r3, #20
 80064d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1d9      	bne.n	80064ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d013      	beq.n	800652a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006506:	4a7e      	ldr	r2, [pc, #504]	@ (8006700 <HAL_UART_IRQHandler+0x3e0>)
 8006508:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650e:	4618      	mov	r0, r3
 8006510:	f7fd fa5e 	bl	80039d0 <HAL_DMA_Abort_IT>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d016      	beq.n	8006548 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006524:	4610      	mov	r0, r2
 8006526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	e00e      	b.n	8006548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f99c 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006530:	e00a      	b.n	8006548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f998 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	e006      	b.n	8006548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f994 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006546:	e175      	b.n	8006834 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006548:	bf00      	nop
    return;
 800654a:	e173      	b.n	8006834 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006550:	2b01      	cmp	r3, #1
 8006552:	f040 814f 	bne.w	80067f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 8148 	beq.w	80067f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 8141 	beq.w	80067f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006572:	2300      	movs	r3, #0
 8006574:	60bb      	str	r3, [r7, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60bb      	str	r3, [r7, #8]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 80b6 	beq.w	8006704 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8145 	beq.w	8006838 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065b6:	429a      	cmp	r2, r3
 80065b8:	f080 813e 	bcs.w	8006838 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	f000 8088 	beq.w	80066e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	330c      	adds	r3, #12
 80065d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065fc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006600:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006608:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006614:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1d9      	bne.n	80065d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3314      	adds	r3, #20
 8006622:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800662c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800662e:	f023 0301 	bic.w	r3, r3, #1
 8006632:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3314      	adds	r3, #20
 800663c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006640:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006644:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006648:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006652:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e1      	bne.n	800661c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3314      	adds	r3, #20
 800665e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800666a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800666e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3314      	adds	r3, #20
 8006678:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800667c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800667e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006682:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800668a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e3      	bne.n	8006658 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	330c      	adds	r3, #12
 80066a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066b0:	f023 0310 	bic.w	r3, r3, #16
 80066b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80066c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066c4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e3      	bne.n	800669e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fd f93c 	bl	8003958 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f8bf 	bl	800687a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066fc:	e09c      	b.n	8006838 <HAL_UART_IRQHandler+0x518>
 80066fe:	bf00      	nop
 8006700:	08006a31 	.word	0x08006a31
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800670c:	b29b      	uxth	r3, r3
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 808e 	beq.w	800683c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8089 	beq.w	800683c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800673a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800673c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006740:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800674e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006750:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006754:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800675c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e3      	bne.n	800672a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3314      	adds	r3, #20
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	623b      	str	r3, [r7, #32]
   return(result);
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3314      	adds	r3, #20
 8006782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006786:	633a      	str	r2, [r7, #48]	@ 0x30
 8006788:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800678c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e3      	bne.n	8006762 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0310 	bic.w	r3, r3, #16
 80067be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80067cc:	61fa      	str	r2, [r7, #28]
 80067ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	69b9      	ldr	r1, [r7, #24]
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	617b      	str	r3, [r7, #20]
   return(result);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e3      	bne.n	80067a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f844 	bl	800687a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067f2:	e023      	b.n	800683c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d009      	beq.n	8006814 <HAL_UART_IRQHandler+0x4f4>
 8006800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f923 	bl	8006a58 <UART_Transmit_IT>
    return;
 8006812:	e014      	b.n	800683e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00e      	beq.n	800683e <HAL_UART_IRQHandler+0x51e>
 8006820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f962 	bl	8006af6 <UART_EndTransmit_IT>
    return;
 8006832:	e004      	b.n	800683e <HAL_UART_IRQHandler+0x51e>
    return;
 8006834:	bf00      	nop
 8006836:	e002      	b.n	800683e <HAL_UART_IRQHandler+0x51e>
      return;
 8006838:	bf00      	nop
 800683a:	e000      	b.n	800683e <HAL_UART_IRQHandler+0x51e>
      return;
 800683c:	bf00      	nop
  }
}
 800683e:	37e8      	adds	r7, #232	@ 0xe8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr

08006856 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr

0800687a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	460b      	mov	r3, r1
 8006884:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr

08006890 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b090      	sub	sp, #64	@ 0x40
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	4613      	mov	r3, r2
 800689e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a0:	e050      	b.n	8006944 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a8:	d04c      	beq.n	8006944 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d007      	beq.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068b0:	f7fc f906 	bl	8002ac0 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068bc:	429a      	cmp	r2, r3
 80068be:	d241      	bcs.n	8006944 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80068d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068e0:	637a      	str	r2, [r7, #52]	@ 0x34
 80068e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80068ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e5      	bne.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3314      	adds	r3, #20
 80068fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	613b      	str	r3, [r7, #16]
   return(result);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006914:	623a      	str	r2, [r7, #32]
 8006916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	69f9      	ldr	r1, [r7, #28]
 800691a:	6a3a      	ldr	r2, [r7, #32]
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	61bb      	str	r3, [r7, #24]
   return(result);
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e5      	bne.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e00f      	b.n	8006964 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	4013      	ands	r3, r2
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	429a      	cmp	r2, r3
 8006952:	bf0c      	ite	eq
 8006954:	2301      	moveq	r3, #1
 8006956:	2300      	movne	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	461a      	mov	r2, r3
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	429a      	cmp	r2, r3
 8006960:	d09f      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3740      	adds	r7, #64	@ 0x40
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b095      	sub	sp, #84	@ 0x54
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	330c      	adds	r3, #12
 800697a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800698a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	330c      	adds	r3, #12
 8006992:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006994:	643a      	str	r2, [r7, #64]	@ 0x40
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800699a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e5      	bne.n	8006974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3314      	adds	r3, #20
 80069ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3314      	adds	r3, #20
 80069c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e5      	bne.n	80069a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d119      	bne.n	8006a18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f023 0310 	bic.w	r3, r3, #16
 80069fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	330c      	adds	r3, #12
 8006a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a04:	61ba      	str	r2, [r7, #24]
 8006a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6979      	ldr	r1, [r7, #20]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	613b      	str	r3, [r7, #16]
   return(result);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e5      	bne.n	80069e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a26:	bf00      	nop
 8006a28:	3754      	adds	r7, #84	@ 0x54
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff ff0c 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b21      	cmp	r3, #33	@ 0x21
 8006a6a:	d13e      	bne.n	8006aea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a74:	d114      	bne.n	8006aa0 <UART_Transmit_IT+0x48>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d110      	bne.n	8006aa0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	1c9a      	adds	r2, r3, #2
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]
 8006a9e:	e008      	b.n	8006ab2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	1c59      	adds	r1, r3, #1
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6211      	str	r1, [r2, #32]
 8006aaa:	781a      	ldrb	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10f      	bne.n	8006ae6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ad4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ae4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e000      	b.n	8006aec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006aea:	2302      	movs	r3, #2
  }
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr

08006af6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff fe94 	bl	8006844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b08c      	sub	sp, #48	@ 0x30
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b22      	cmp	r3, #34	@ 0x22
 8006b38:	f040 80ae 	bne.w	8006c98 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b44:	d117      	bne.n	8006b76 <UART_Receive_IT+0x50>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d113      	bne.n	8006b76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6e:	1c9a      	adds	r2, r3, #2
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b74:	e026      	b.n	8006bc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b88:	d007      	beq.n	8006b9a <UART_Receive_IT+0x74>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <UART_Receive_IT+0x82>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	e008      	b.n	8006bba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d15d      	bne.n	8006c94 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0220 	bic.w	r2, r2, #32
 8006be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695a      	ldr	r2, [r3, #20]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d135      	bne.n	8006c8a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	613b      	str	r3, [r7, #16]
   return(result);
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f023 0310 	bic.w	r3, r3, #16
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c44:	623a      	str	r2, [r7, #32]
 8006c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	69f9      	ldr	r1, [r7, #28]
 8006c4a:	6a3a      	ldr	r2, [r7, #32]
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e5      	bne.n	8006c24 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d10a      	bne.n	8006c7c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff fdf9 	bl	800687a <HAL_UARTEx_RxEventCallback>
 8006c88:	e002      	b.n	8006c90 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff fde3 	bl	8006856 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e002      	b.n	8006c9a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	e000      	b.n	8006c9a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c98:	2302      	movs	r3, #2
  }
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3730      	adds	r7, #48	@ 0x30
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006cde:	f023 030c 	bic.w	r3, r3, #12
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6812      	ldr	r2, [r2, #0]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2c      	ldr	r2, [pc, #176]	@ (8006db8 <UART_SetConfig+0x114>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d103      	bne.n	8006d14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d0c:	f7fe fa4a 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	e002      	b.n	8006d1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d14:	f7fe fa32 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8006d18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009a      	lsls	r2, r3, #2
 8006d24:	441a      	add	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d30:	4a22      	ldr	r2, [pc, #136]	@ (8006dbc <UART_SetConfig+0x118>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	0119      	lsls	r1, r3, #4
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009a      	lsls	r2, r3, #2
 8006d44:	441a      	add	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d50:	4b1a      	ldr	r3, [pc, #104]	@ (8006dbc <UART_SetConfig+0x118>)
 8006d52:	fba3 0302 	umull	r0, r3, r3, r2
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	2064      	movs	r0, #100	@ 0x64
 8006d5a:	fb00 f303 	mul.w	r3, r0, r3
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	3332      	adds	r3, #50	@ 0x32
 8006d64:	4a15      	ldr	r2, [pc, #84]	@ (8006dbc <UART_SetConfig+0x118>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d70:	4419      	add	r1, r3
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009a      	lsls	r2, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d88:	4b0c      	ldr	r3, [pc, #48]	@ (8006dbc <UART_SetConfig+0x118>)
 8006d8a:	fba3 0302 	umull	r0, r3, r3, r2
 8006d8e:	095b      	lsrs	r3, r3, #5
 8006d90:	2064      	movs	r0, #100	@ 0x64
 8006d92:	fb00 f303 	mul.w	r3, r0, r3
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	3332      	adds	r3, #50	@ 0x32
 8006d9c:	4a07      	ldr	r2, [pc, #28]	@ (8006dbc <UART_SetConfig+0x118>)
 8006d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	f003 020f 	and.w	r2, r3, #15
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	440a      	add	r2, r1
 8006dae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006db0:	bf00      	nop
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40013800 	.word	0x40013800
 8006dbc:	51eb851f 	.word	0x51eb851f

08006dc0 <atoi>:
 8006dc0:	220a      	movs	r2, #10
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	f000 b87c 	b.w	8006ec0 <strtol>

08006dc8 <_strtol_l.constprop.0>:
 8006dc8:	2b24      	cmp	r3, #36	@ 0x24
 8006dca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dce:	4686      	mov	lr, r0
 8006dd0:	4690      	mov	r8, r2
 8006dd2:	d801      	bhi.n	8006dd8 <_strtol_l.constprop.0+0x10>
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d106      	bne.n	8006de6 <_strtol_l.constprop.0+0x1e>
 8006dd8:	f001 f910 	bl	8007ffc <__errno>
 8006ddc:	2316      	movs	r3, #22
 8006dde:	6003      	str	r3, [r0, #0]
 8006de0:	2000      	movs	r0, #0
 8006de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de6:	460d      	mov	r5, r1
 8006de8:	4833      	ldr	r0, [pc, #204]	@ (8006eb8 <_strtol_l.constprop.0+0xf0>)
 8006dea:	462a      	mov	r2, r5
 8006dec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006df0:	5d06      	ldrb	r6, [r0, r4]
 8006df2:	f016 0608 	ands.w	r6, r6, #8
 8006df6:	d1f8      	bne.n	8006dea <_strtol_l.constprop.0+0x22>
 8006df8:	2c2d      	cmp	r4, #45	@ 0x2d
 8006dfa:	d12d      	bne.n	8006e58 <_strtol_l.constprop.0+0x90>
 8006dfc:	2601      	movs	r6, #1
 8006dfe:	782c      	ldrb	r4, [r5, #0]
 8006e00:	1c95      	adds	r5, r2, #2
 8006e02:	f033 0210 	bics.w	r2, r3, #16
 8006e06:	d109      	bne.n	8006e1c <_strtol_l.constprop.0+0x54>
 8006e08:	2c30      	cmp	r4, #48	@ 0x30
 8006e0a:	d12a      	bne.n	8006e62 <_strtol_l.constprop.0+0x9a>
 8006e0c:	782a      	ldrb	r2, [r5, #0]
 8006e0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006e12:	2a58      	cmp	r2, #88	@ 0x58
 8006e14:	d125      	bne.n	8006e62 <_strtol_l.constprop.0+0x9a>
 8006e16:	2310      	movs	r3, #16
 8006e18:	786c      	ldrb	r4, [r5, #1]
 8006e1a:	3502      	adds	r5, #2
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006e22:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006e26:	fbbc f9f3 	udiv	r9, ip, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006e30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006e34:	2f09      	cmp	r7, #9
 8006e36:	d81b      	bhi.n	8006e70 <_strtol_l.constprop.0+0xa8>
 8006e38:	463c      	mov	r4, r7
 8006e3a:	42a3      	cmp	r3, r4
 8006e3c:	dd27      	ble.n	8006e8e <_strtol_l.constprop.0+0xc6>
 8006e3e:	1c57      	adds	r7, r2, #1
 8006e40:	d007      	beq.n	8006e52 <_strtol_l.constprop.0+0x8a>
 8006e42:	4581      	cmp	r9, r0
 8006e44:	d320      	bcc.n	8006e88 <_strtol_l.constprop.0+0xc0>
 8006e46:	d101      	bne.n	8006e4c <_strtol_l.constprop.0+0x84>
 8006e48:	45a2      	cmp	sl, r4
 8006e4a:	db1d      	blt.n	8006e88 <_strtol_l.constprop.0+0xc0>
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	fb00 4003 	mla	r0, r0, r3, r4
 8006e52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e56:	e7eb      	b.n	8006e30 <_strtol_l.constprop.0+0x68>
 8006e58:	2c2b      	cmp	r4, #43	@ 0x2b
 8006e5a:	bf04      	itt	eq
 8006e5c:	782c      	ldrbeq	r4, [r5, #0]
 8006e5e:	1c95      	addeq	r5, r2, #2
 8006e60:	e7cf      	b.n	8006e02 <_strtol_l.constprop.0+0x3a>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1da      	bne.n	8006e1c <_strtol_l.constprop.0+0x54>
 8006e66:	2c30      	cmp	r4, #48	@ 0x30
 8006e68:	bf0c      	ite	eq
 8006e6a:	2308      	moveq	r3, #8
 8006e6c:	230a      	movne	r3, #10
 8006e6e:	e7d5      	b.n	8006e1c <_strtol_l.constprop.0+0x54>
 8006e70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006e74:	2f19      	cmp	r7, #25
 8006e76:	d801      	bhi.n	8006e7c <_strtol_l.constprop.0+0xb4>
 8006e78:	3c37      	subs	r4, #55	@ 0x37
 8006e7a:	e7de      	b.n	8006e3a <_strtol_l.constprop.0+0x72>
 8006e7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006e80:	2f19      	cmp	r7, #25
 8006e82:	d804      	bhi.n	8006e8e <_strtol_l.constprop.0+0xc6>
 8006e84:	3c57      	subs	r4, #87	@ 0x57
 8006e86:	e7d8      	b.n	8006e3a <_strtol_l.constprop.0+0x72>
 8006e88:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8c:	e7e1      	b.n	8006e52 <_strtol_l.constprop.0+0x8a>
 8006e8e:	1c53      	adds	r3, r2, #1
 8006e90:	d108      	bne.n	8006ea4 <_strtol_l.constprop.0+0xdc>
 8006e92:	2322      	movs	r3, #34	@ 0x22
 8006e94:	4660      	mov	r0, ip
 8006e96:	f8ce 3000 	str.w	r3, [lr]
 8006e9a:	f1b8 0f00 	cmp.w	r8, #0
 8006e9e:	d0a0      	beq.n	8006de2 <_strtol_l.constprop.0+0x1a>
 8006ea0:	1e69      	subs	r1, r5, #1
 8006ea2:	e006      	b.n	8006eb2 <_strtol_l.constprop.0+0xea>
 8006ea4:	b106      	cbz	r6, 8006ea8 <_strtol_l.constprop.0+0xe0>
 8006ea6:	4240      	negs	r0, r0
 8006ea8:	f1b8 0f00 	cmp.w	r8, #0
 8006eac:	d099      	beq.n	8006de2 <_strtol_l.constprop.0+0x1a>
 8006eae:	2a00      	cmp	r2, #0
 8006eb0:	d1f6      	bne.n	8006ea0 <_strtol_l.constprop.0+0xd8>
 8006eb2:	f8c8 1000 	str.w	r1, [r8]
 8006eb6:	e794      	b.n	8006de2 <_strtol_l.constprop.0+0x1a>
 8006eb8:	0800e5e3 	.word	0x0800e5e3

08006ebc <_strtol_r>:
 8006ebc:	f7ff bf84 	b.w	8006dc8 <_strtol_l.constprop.0>

08006ec0 <strtol>:
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	4601      	mov	r1, r0
 8006ec6:	4802      	ldr	r0, [pc, #8]	@ (8006ed0 <strtol+0x10>)
 8006ec8:	6800      	ldr	r0, [r0, #0]
 8006eca:	f7ff bf7d 	b.w	8006dc8 <_strtol_l.constprop.0>
 8006ece:	bf00      	nop
 8006ed0:	20000040 	.word	0x20000040

08006ed4 <__cvt>:
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eda:	461d      	mov	r5, r3
 8006edc:	bfbb      	ittet	lt
 8006ede:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006ee2:	461d      	movlt	r5, r3
 8006ee4:	2300      	movge	r3, #0
 8006ee6:	232d      	movlt	r3, #45	@ 0x2d
 8006ee8:	b088      	sub	sp, #32
 8006eea:	4614      	mov	r4, r2
 8006eec:	bfb8      	it	lt
 8006eee:	4614      	movlt	r4, r2
 8006ef0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ef2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006ef4:	7013      	strb	r3, [r2, #0]
 8006ef6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ef8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006efc:	f023 0820 	bic.w	r8, r3, #32
 8006f00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f04:	d005      	beq.n	8006f12 <__cvt+0x3e>
 8006f06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f0a:	d100      	bne.n	8006f0e <__cvt+0x3a>
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e000      	b.n	8006f14 <__cvt+0x40>
 8006f12:	2303      	movs	r3, #3
 8006f14:	aa07      	add	r2, sp, #28
 8006f16:	9204      	str	r2, [sp, #16]
 8006f18:	aa06      	add	r2, sp, #24
 8006f1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f1e:	e9cd 3600 	strd	r3, r6, [sp]
 8006f22:	4622      	mov	r2, r4
 8006f24:	462b      	mov	r3, r5
 8006f26:	f001 f967 	bl	80081f8 <_dtoa_r>
 8006f2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f2e:	4607      	mov	r7, r0
 8006f30:	d119      	bne.n	8006f66 <__cvt+0x92>
 8006f32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f34:	07db      	lsls	r3, r3, #31
 8006f36:	d50e      	bpl.n	8006f56 <__cvt+0x82>
 8006f38:	eb00 0906 	add.w	r9, r0, r6
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2300      	movs	r3, #0
 8006f40:	4620      	mov	r0, r4
 8006f42:	4629      	mov	r1, r5
 8006f44:	f7f9 fde4 	bl	8000b10 <__aeabi_dcmpeq>
 8006f48:	b108      	cbz	r0, 8006f4e <__cvt+0x7a>
 8006f4a:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f4e:	2230      	movs	r2, #48	@ 0x30
 8006f50:	9b07      	ldr	r3, [sp, #28]
 8006f52:	454b      	cmp	r3, r9
 8006f54:	d31e      	bcc.n	8006f94 <__cvt+0xc0>
 8006f56:	4638      	mov	r0, r7
 8006f58:	9b07      	ldr	r3, [sp, #28]
 8006f5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006f5c:	1bdb      	subs	r3, r3, r7
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	b008      	add	sp, #32
 8006f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f6a:	eb00 0906 	add.w	r9, r0, r6
 8006f6e:	d1e5      	bne.n	8006f3c <__cvt+0x68>
 8006f70:	7803      	ldrb	r3, [r0, #0]
 8006f72:	2b30      	cmp	r3, #48	@ 0x30
 8006f74:	d10a      	bne.n	8006f8c <__cvt+0xb8>
 8006f76:	2200      	movs	r2, #0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 fdc7 	bl	8000b10 <__aeabi_dcmpeq>
 8006f82:	b918      	cbnz	r0, 8006f8c <__cvt+0xb8>
 8006f84:	f1c6 0601 	rsb	r6, r6, #1
 8006f88:	f8ca 6000 	str.w	r6, [sl]
 8006f8c:	f8da 3000 	ldr.w	r3, [sl]
 8006f90:	4499      	add	r9, r3
 8006f92:	e7d3      	b.n	8006f3c <__cvt+0x68>
 8006f94:	1c59      	adds	r1, r3, #1
 8006f96:	9107      	str	r1, [sp, #28]
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e7d9      	b.n	8006f50 <__cvt+0x7c>

08006f9c <__exponent>:
 8006f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	bfb6      	itet	lt
 8006fa2:	232d      	movlt	r3, #45	@ 0x2d
 8006fa4:	232b      	movge	r3, #43	@ 0x2b
 8006fa6:	4249      	neglt	r1, r1
 8006fa8:	2909      	cmp	r1, #9
 8006faa:	7002      	strb	r2, [r0, #0]
 8006fac:	7043      	strb	r3, [r0, #1]
 8006fae:	dd29      	ble.n	8007004 <__exponent+0x68>
 8006fb0:	f10d 0307 	add.w	r3, sp, #7
 8006fb4:	461d      	mov	r5, r3
 8006fb6:	270a      	movs	r7, #10
 8006fb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	fb07 1416 	mls	r4, r7, r6, r1
 8006fc2:	3430      	adds	r4, #48	@ 0x30
 8006fc4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006fc8:	460c      	mov	r4, r1
 8006fca:	2c63      	cmp	r4, #99	@ 0x63
 8006fcc:	4631      	mov	r1, r6
 8006fce:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fd2:	dcf1      	bgt.n	8006fb8 <__exponent+0x1c>
 8006fd4:	3130      	adds	r1, #48	@ 0x30
 8006fd6:	1e94      	subs	r4, r2, #2
 8006fd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fdc:	4623      	mov	r3, r4
 8006fde:	1c41      	adds	r1, r0, #1
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	d30a      	bcc.n	8006ffa <__exponent+0x5e>
 8006fe4:	f10d 0309 	add.w	r3, sp, #9
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	42ac      	cmp	r4, r5
 8006fec:	bf88      	it	hi
 8006fee:	2300      	movhi	r3, #0
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	4403      	add	r3, r0
 8006ff4:	1a18      	subs	r0, r3, r0
 8006ff6:	b003      	add	sp, #12
 8006ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ffe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007002:	e7ed      	b.n	8006fe0 <__exponent+0x44>
 8007004:	2330      	movs	r3, #48	@ 0x30
 8007006:	3130      	adds	r1, #48	@ 0x30
 8007008:	7083      	strb	r3, [r0, #2]
 800700a:	70c1      	strb	r1, [r0, #3]
 800700c:	1d03      	adds	r3, r0, #4
 800700e:	e7f1      	b.n	8006ff4 <__exponent+0x58>

08007010 <_printf_float>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	b091      	sub	sp, #68	@ 0x44
 8007016:	460c      	mov	r4, r1
 8007018:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800701c:	4616      	mov	r6, r2
 800701e:	461f      	mov	r7, r3
 8007020:	4605      	mov	r5, r0
 8007022:	f000 ffa1 	bl	8007f68 <_localeconv_r>
 8007026:	6803      	ldr	r3, [r0, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	9308      	str	r3, [sp, #32]
 800702c:	f7f9 f890 	bl	8000150 <strlen>
 8007030:	2300      	movs	r3, #0
 8007032:	930e      	str	r3, [sp, #56]	@ 0x38
 8007034:	f8d8 3000 	ldr.w	r3, [r8]
 8007038:	9009      	str	r0, [sp, #36]	@ 0x24
 800703a:	3307      	adds	r3, #7
 800703c:	f023 0307 	bic.w	r3, r3, #7
 8007040:	f103 0208 	add.w	r2, r3, #8
 8007044:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007048:	f8d4 b000 	ldr.w	fp, [r4]
 800704c:	f8c8 2000 	str.w	r2, [r8]
 8007050:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007054:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800705a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800705e:	f04f 32ff 	mov.w	r2, #4294967295
 8007062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007066:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800706a:	4b9c      	ldr	r3, [pc, #624]	@ (80072dc <_printf_float+0x2cc>)
 800706c:	f7f9 fd82 	bl	8000b74 <__aeabi_dcmpun>
 8007070:	bb70      	cbnz	r0, 80070d0 <_printf_float+0xc0>
 8007072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007076:	f04f 32ff 	mov.w	r2, #4294967295
 800707a:	4b98      	ldr	r3, [pc, #608]	@ (80072dc <_printf_float+0x2cc>)
 800707c:	f7f9 fd5c 	bl	8000b38 <__aeabi_dcmple>
 8007080:	bb30      	cbnz	r0, 80070d0 <_printf_float+0xc0>
 8007082:	2200      	movs	r2, #0
 8007084:	2300      	movs	r3, #0
 8007086:	4640      	mov	r0, r8
 8007088:	4649      	mov	r1, r9
 800708a:	f7f9 fd4b 	bl	8000b24 <__aeabi_dcmplt>
 800708e:	b110      	cbz	r0, 8007096 <_printf_float+0x86>
 8007090:	232d      	movs	r3, #45	@ 0x2d
 8007092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007096:	4a92      	ldr	r2, [pc, #584]	@ (80072e0 <_printf_float+0x2d0>)
 8007098:	4b92      	ldr	r3, [pc, #584]	@ (80072e4 <_printf_float+0x2d4>)
 800709a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800709e:	bf94      	ite	ls
 80070a0:	4690      	movls	r8, r2
 80070a2:	4698      	movhi	r8, r3
 80070a4:	2303      	movs	r3, #3
 80070a6:	f04f 0900 	mov.w	r9, #0
 80070aa:	6123      	str	r3, [r4, #16]
 80070ac:	f02b 0304 	bic.w	r3, fp, #4
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	4633      	mov	r3, r6
 80070b4:	4621      	mov	r1, r4
 80070b6:	4628      	mov	r0, r5
 80070b8:	9700      	str	r7, [sp, #0]
 80070ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 80070bc:	f000 f9d4 	bl	8007468 <_printf_common>
 80070c0:	3001      	adds	r0, #1
 80070c2:	f040 8090 	bne.w	80071e6 <_printf_float+0x1d6>
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	b011      	add	sp, #68	@ 0x44
 80070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d0:	4642      	mov	r2, r8
 80070d2:	464b      	mov	r3, r9
 80070d4:	4640      	mov	r0, r8
 80070d6:	4649      	mov	r1, r9
 80070d8:	f7f9 fd4c 	bl	8000b74 <__aeabi_dcmpun>
 80070dc:	b148      	cbz	r0, 80070f2 <_printf_float+0xe2>
 80070de:	464b      	mov	r3, r9
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bfb8      	it	lt
 80070e4:	232d      	movlt	r3, #45	@ 0x2d
 80070e6:	4a80      	ldr	r2, [pc, #512]	@ (80072e8 <_printf_float+0x2d8>)
 80070e8:	bfb8      	it	lt
 80070ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80070ee:	4b7f      	ldr	r3, [pc, #508]	@ (80072ec <_printf_float+0x2dc>)
 80070f0:	e7d3      	b.n	800709a <_printf_float+0x8a>
 80070f2:	6863      	ldr	r3, [r4, #4]
 80070f4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	d13f      	bne.n	800717c <_printf_float+0x16c>
 80070fc:	2306      	movs	r3, #6
 80070fe:	6063      	str	r3, [r4, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	9206      	str	r2, [sp, #24]
 800710a:	aa0e      	add	r2, sp, #56	@ 0x38
 800710c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007110:	aa0d      	add	r2, sp, #52	@ 0x34
 8007112:	9203      	str	r2, [sp, #12]
 8007114:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007118:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800711c:	6863      	ldr	r3, [r4, #4]
 800711e:	4642      	mov	r2, r8
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	4628      	mov	r0, r5
 8007124:	464b      	mov	r3, r9
 8007126:	910a      	str	r1, [sp, #40]	@ 0x28
 8007128:	f7ff fed4 	bl	8006ed4 <__cvt>
 800712c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800712e:	4680      	mov	r8, r0
 8007130:	2947      	cmp	r1, #71	@ 0x47
 8007132:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007134:	d128      	bne.n	8007188 <_printf_float+0x178>
 8007136:	1cc8      	adds	r0, r1, #3
 8007138:	db02      	blt.n	8007140 <_printf_float+0x130>
 800713a:	6863      	ldr	r3, [r4, #4]
 800713c:	4299      	cmp	r1, r3
 800713e:	dd40      	ble.n	80071c2 <_printf_float+0x1b2>
 8007140:	f1aa 0a02 	sub.w	sl, sl, #2
 8007144:	fa5f fa8a 	uxtb.w	sl, sl
 8007148:	4652      	mov	r2, sl
 800714a:	3901      	subs	r1, #1
 800714c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007150:	910d      	str	r1, [sp, #52]	@ 0x34
 8007152:	f7ff ff23 	bl	8006f9c <__exponent>
 8007156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007158:	4681      	mov	r9, r0
 800715a:	1813      	adds	r3, r2, r0
 800715c:	2a01      	cmp	r2, #1
 800715e:	6123      	str	r3, [r4, #16]
 8007160:	dc02      	bgt.n	8007168 <_printf_float+0x158>
 8007162:	6822      	ldr	r2, [r4, #0]
 8007164:	07d2      	lsls	r2, r2, #31
 8007166:	d501      	bpl.n	800716c <_printf_float+0x15c>
 8007168:	3301      	adds	r3, #1
 800716a:	6123      	str	r3, [r4, #16]
 800716c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007170:	2b00      	cmp	r3, #0
 8007172:	d09e      	beq.n	80070b2 <_printf_float+0xa2>
 8007174:	232d      	movs	r3, #45	@ 0x2d
 8007176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800717a:	e79a      	b.n	80070b2 <_printf_float+0xa2>
 800717c:	2947      	cmp	r1, #71	@ 0x47
 800717e:	d1bf      	bne.n	8007100 <_printf_float+0xf0>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1bd      	bne.n	8007100 <_printf_float+0xf0>
 8007184:	2301      	movs	r3, #1
 8007186:	e7ba      	b.n	80070fe <_printf_float+0xee>
 8007188:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800718c:	d9dc      	bls.n	8007148 <_printf_float+0x138>
 800718e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007192:	d118      	bne.n	80071c6 <_printf_float+0x1b6>
 8007194:	2900      	cmp	r1, #0
 8007196:	6863      	ldr	r3, [r4, #4]
 8007198:	dd0b      	ble.n	80071b2 <_printf_float+0x1a2>
 800719a:	6121      	str	r1, [r4, #16]
 800719c:	b913      	cbnz	r3, 80071a4 <_printf_float+0x194>
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	07d0      	lsls	r0, r2, #31
 80071a2:	d502      	bpl.n	80071aa <_printf_float+0x19a>
 80071a4:	3301      	adds	r3, #1
 80071a6:	440b      	add	r3, r1
 80071a8:	6123      	str	r3, [r4, #16]
 80071aa:	f04f 0900 	mov.w	r9, #0
 80071ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80071b0:	e7dc      	b.n	800716c <_printf_float+0x15c>
 80071b2:	b913      	cbnz	r3, 80071ba <_printf_float+0x1aa>
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	07d2      	lsls	r2, r2, #31
 80071b8:	d501      	bpl.n	80071be <_printf_float+0x1ae>
 80071ba:	3302      	adds	r3, #2
 80071bc:	e7f4      	b.n	80071a8 <_printf_float+0x198>
 80071be:	2301      	movs	r3, #1
 80071c0:	e7f2      	b.n	80071a8 <_printf_float+0x198>
 80071c2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80071c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071c8:	4299      	cmp	r1, r3
 80071ca:	db05      	blt.n	80071d8 <_printf_float+0x1c8>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	6121      	str	r1, [r4, #16]
 80071d0:	07d8      	lsls	r0, r3, #31
 80071d2:	d5ea      	bpl.n	80071aa <_printf_float+0x19a>
 80071d4:	1c4b      	adds	r3, r1, #1
 80071d6:	e7e7      	b.n	80071a8 <_printf_float+0x198>
 80071d8:	2900      	cmp	r1, #0
 80071da:	bfcc      	ite	gt
 80071dc:	2201      	movgt	r2, #1
 80071de:	f1c1 0202 	rsble	r2, r1, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	e7e0      	b.n	80071a8 <_printf_float+0x198>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	055a      	lsls	r2, r3, #21
 80071ea:	d407      	bmi.n	80071fc <_printf_float+0x1ec>
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	4642      	mov	r2, r8
 80071f0:	4631      	mov	r1, r6
 80071f2:	4628      	mov	r0, r5
 80071f4:	47b8      	blx	r7
 80071f6:	3001      	adds	r0, #1
 80071f8:	d12b      	bne.n	8007252 <_printf_float+0x242>
 80071fa:	e764      	b.n	80070c6 <_printf_float+0xb6>
 80071fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007200:	f240 80dc 	bls.w	80073bc <_printf_float+0x3ac>
 8007204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007208:	2200      	movs	r2, #0
 800720a:	2300      	movs	r3, #0
 800720c:	f7f9 fc80 	bl	8000b10 <__aeabi_dcmpeq>
 8007210:	2800      	cmp	r0, #0
 8007212:	d033      	beq.n	800727c <_printf_float+0x26c>
 8007214:	2301      	movs	r3, #1
 8007216:	4631      	mov	r1, r6
 8007218:	4628      	mov	r0, r5
 800721a:	4a35      	ldr	r2, [pc, #212]	@ (80072f0 <_printf_float+0x2e0>)
 800721c:	47b8      	blx	r7
 800721e:	3001      	adds	r0, #1
 8007220:	f43f af51 	beq.w	80070c6 <_printf_float+0xb6>
 8007224:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007228:	4543      	cmp	r3, r8
 800722a:	db02      	blt.n	8007232 <_printf_float+0x222>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	07d8      	lsls	r0, r3, #31
 8007230:	d50f      	bpl.n	8007252 <_printf_float+0x242>
 8007232:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007236:	4631      	mov	r1, r6
 8007238:	4628      	mov	r0, r5
 800723a:	47b8      	blx	r7
 800723c:	3001      	adds	r0, #1
 800723e:	f43f af42 	beq.w	80070c6 <_printf_float+0xb6>
 8007242:	f04f 0900 	mov.w	r9, #0
 8007246:	f108 38ff 	add.w	r8, r8, #4294967295
 800724a:	f104 0a1a 	add.w	sl, r4, #26
 800724e:	45c8      	cmp	r8, r9
 8007250:	dc09      	bgt.n	8007266 <_printf_float+0x256>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	079b      	lsls	r3, r3, #30
 8007256:	f100 8102 	bmi.w	800745e <_printf_float+0x44e>
 800725a:	68e0      	ldr	r0, [r4, #12]
 800725c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800725e:	4298      	cmp	r0, r3
 8007260:	bfb8      	it	lt
 8007262:	4618      	movlt	r0, r3
 8007264:	e731      	b.n	80070ca <_printf_float+0xba>
 8007266:	2301      	movs	r3, #1
 8007268:	4652      	mov	r2, sl
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	47b8      	blx	r7
 8007270:	3001      	adds	r0, #1
 8007272:	f43f af28 	beq.w	80070c6 <_printf_float+0xb6>
 8007276:	f109 0901 	add.w	r9, r9, #1
 800727a:	e7e8      	b.n	800724e <_printf_float+0x23e>
 800727c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800727e:	2b00      	cmp	r3, #0
 8007280:	dc38      	bgt.n	80072f4 <_printf_float+0x2e4>
 8007282:	2301      	movs	r3, #1
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	4a19      	ldr	r2, [pc, #100]	@ (80072f0 <_printf_float+0x2e0>)
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	f43f af1a 	beq.w	80070c6 <_printf_float+0xb6>
 8007292:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007296:	ea59 0303 	orrs.w	r3, r9, r3
 800729a:	d102      	bne.n	80072a2 <_printf_float+0x292>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	07d9      	lsls	r1, r3, #31
 80072a0:	d5d7      	bpl.n	8007252 <_printf_float+0x242>
 80072a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	f43f af0a 	beq.w	80070c6 <_printf_float+0xb6>
 80072b2:	f04f 0a00 	mov.w	sl, #0
 80072b6:	f104 0b1a 	add.w	fp, r4, #26
 80072ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072bc:	425b      	negs	r3, r3
 80072be:	4553      	cmp	r3, sl
 80072c0:	dc01      	bgt.n	80072c6 <_printf_float+0x2b6>
 80072c2:	464b      	mov	r3, r9
 80072c4:	e793      	b.n	80071ee <_printf_float+0x1de>
 80072c6:	2301      	movs	r3, #1
 80072c8:	465a      	mov	r2, fp
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	47b8      	blx	r7
 80072d0:	3001      	adds	r0, #1
 80072d2:	f43f aef8 	beq.w	80070c6 <_printf_float+0xb6>
 80072d6:	f10a 0a01 	add.w	sl, sl, #1
 80072da:	e7ee      	b.n	80072ba <_printf_float+0x2aa>
 80072dc:	7fefffff 	.word	0x7fefffff
 80072e0:	0800e6e3 	.word	0x0800e6e3
 80072e4:	0800e6e7 	.word	0x0800e6e7
 80072e8:	0800e6eb 	.word	0x0800e6eb
 80072ec:	0800e6ef 	.word	0x0800e6ef
 80072f0:	0800e6f3 	.word	0x0800e6f3
 80072f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80072fa:	4553      	cmp	r3, sl
 80072fc:	bfa8      	it	ge
 80072fe:	4653      	movge	r3, sl
 8007300:	2b00      	cmp	r3, #0
 8007302:	4699      	mov	r9, r3
 8007304:	dc36      	bgt.n	8007374 <_printf_float+0x364>
 8007306:	f04f 0b00 	mov.w	fp, #0
 800730a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800730e:	f104 021a 	add.w	r2, r4, #26
 8007312:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007314:	930a      	str	r3, [sp, #40]	@ 0x28
 8007316:	eba3 0309 	sub.w	r3, r3, r9
 800731a:	455b      	cmp	r3, fp
 800731c:	dc31      	bgt.n	8007382 <_printf_float+0x372>
 800731e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007320:	459a      	cmp	sl, r3
 8007322:	dc3a      	bgt.n	800739a <_printf_float+0x38a>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	07da      	lsls	r2, r3, #31
 8007328:	d437      	bmi.n	800739a <_printf_float+0x38a>
 800732a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800732c:	ebaa 0903 	sub.w	r9, sl, r3
 8007330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007332:	ebaa 0303 	sub.w	r3, sl, r3
 8007336:	4599      	cmp	r9, r3
 8007338:	bfa8      	it	ge
 800733a:	4699      	movge	r9, r3
 800733c:	f1b9 0f00 	cmp.w	r9, #0
 8007340:	dc33      	bgt.n	80073aa <_printf_float+0x39a>
 8007342:	f04f 0800 	mov.w	r8, #0
 8007346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800734a:	f104 0b1a 	add.w	fp, r4, #26
 800734e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007350:	ebaa 0303 	sub.w	r3, sl, r3
 8007354:	eba3 0309 	sub.w	r3, r3, r9
 8007358:	4543      	cmp	r3, r8
 800735a:	f77f af7a 	ble.w	8007252 <_printf_float+0x242>
 800735e:	2301      	movs	r3, #1
 8007360:	465a      	mov	r2, fp
 8007362:	4631      	mov	r1, r6
 8007364:	4628      	mov	r0, r5
 8007366:	47b8      	blx	r7
 8007368:	3001      	adds	r0, #1
 800736a:	f43f aeac 	beq.w	80070c6 <_printf_float+0xb6>
 800736e:	f108 0801 	add.w	r8, r8, #1
 8007372:	e7ec      	b.n	800734e <_printf_float+0x33e>
 8007374:	4642      	mov	r2, r8
 8007376:	4631      	mov	r1, r6
 8007378:	4628      	mov	r0, r5
 800737a:	47b8      	blx	r7
 800737c:	3001      	adds	r0, #1
 800737e:	d1c2      	bne.n	8007306 <_printf_float+0x2f6>
 8007380:	e6a1      	b.n	80070c6 <_printf_float+0xb6>
 8007382:	2301      	movs	r3, #1
 8007384:	4631      	mov	r1, r6
 8007386:	4628      	mov	r0, r5
 8007388:	920a      	str	r2, [sp, #40]	@ 0x28
 800738a:	47b8      	blx	r7
 800738c:	3001      	adds	r0, #1
 800738e:	f43f ae9a 	beq.w	80070c6 <_printf_float+0xb6>
 8007392:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007394:	f10b 0b01 	add.w	fp, fp, #1
 8007398:	e7bb      	b.n	8007312 <_printf_float+0x302>
 800739a:	4631      	mov	r1, r6
 800739c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	d1c0      	bne.n	800732a <_printf_float+0x31a>
 80073a8:	e68d      	b.n	80070c6 <_printf_float+0xb6>
 80073aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073ac:	464b      	mov	r3, r9
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	4442      	add	r2, r8
 80073b4:	47b8      	blx	r7
 80073b6:	3001      	adds	r0, #1
 80073b8:	d1c3      	bne.n	8007342 <_printf_float+0x332>
 80073ba:	e684      	b.n	80070c6 <_printf_float+0xb6>
 80073bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80073c0:	f1ba 0f01 	cmp.w	sl, #1
 80073c4:	dc01      	bgt.n	80073ca <_printf_float+0x3ba>
 80073c6:	07db      	lsls	r3, r3, #31
 80073c8:	d536      	bpl.n	8007438 <_printf_float+0x428>
 80073ca:	2301      	movs	r3, #1
 80073cc:	4642      	mov	r2, r8
 80073ce:	4631      	mov	r1, r6
 80073d0:	4628      	mov	r0, r5
 80073d2:	47b8      	blx	r7
 80073d4:	3001      	adds	r0, #1
 80073d6:	f43f ae76 	beq.w	80070c6 <_printf_float+0xb6>
 80073da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073de:	4631      	mov	r1, r6
 80073e0:	4628      	mov	r0, r5
 80073e2:	47b8      	blx	r7
 80073e4:	3001      	adds	r0, #1
 80073e6:	f43f ae6e 	beq.w	80070c6 <_printf_float+0xb6>
 80073ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073ee:	2200      	movs	r2, #0
 80073f0:	2300      	movs	r3, #0
 80073f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073f6:	f7f9 fb8b 	bl	8000b10 <__aeabi_dcmpeq>
 80073fa:	b9c0      	cbnz	r0, 800742e <_printf_float+0x41e>
 80073fc:	4653      	mov	r3, sl
 80073fe:	f108 0201 	add.w	r2, r8, #1
 8007402:	4631      	mov	r1, r6
 8007404:	4628      	mov	r0, r5
 8007406:	47b8      	blx	r7
 8007408:	3001      	adds	r0, #1
 800740a:	d10c      	bne.n	8007426 <_printf_float+0x416>
 800740c:	e65b      	b.n	80070c6 <_printf_float+0xb6>
 800740e:	2301      	movs	r3, #1
 8007410:	465a      	mov	r2, fp
 8007412:	4631      	mov	r1, r6
 8007414:	4628      	mov	r0, r5
 8007416:	47b8      	blx	r7
 8007418:	3001      	adds	r0, #1
 800741a:	f43f ae54 	beq.w	80070c6 <_printf_float+0xb6>
 800741e:	f108 0801 	add.w	r8, r8, #1
 8007422:	45d0      	cmp	r8, sl
 8007424:	dbf3      	blt.n	800740e <_printf_float+0x3fe>
 8007426:	464b      	mov	r3, r9
 8007428:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800742c:	e6e0      	b.n	80071f0 <_printf_float+0x1e0>
 800742e:	f04f 0800 	mov.w	r8, #0
 8007432:	f104 0b1a 	add.w	fp, r4, #26
 8007436:	e7f4      	b.n	8007422 <_printf_float+0x412>
 8007438:	2301      	movs	r3, #1
 800743a:	4642      	mov	r2, r8
 800743c:	e7e1      	b.n	8007402 <_printf_float+0x3f2>
 800743e:	2301      	movs	r3, #1
 8007440:	464a      	mov	r2, r9
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f ae3c 	beq.w	80070c6 <_printf_float+0xb6>
 800744e:	f108 0801 	add.w	r8, r8, #1
 8007452:	68e3      	ldr	r3, [r4, #12]
 8007454:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007456:	1a5b      	subs	r3, r3, r1
 8007458:	4543      	cmp	r3, r8
 800745a:	dcf0      	bgt.n	800743e <_printf_float+0x42e>
 800745c:	e6fd      	b.n	800725a <_printf_float+0x24a>
 800745e:	f04f 0800 	mov.w	r8, #0
 8007462:	f104 0919 	add.w	r9, r4, #25
 8007466:	e7f4      	b.n	8007452 <_printf_float+0x442>

08007468 <_printf_common>:
 8007468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	4616      	mov	r6, r2
 800746e:	4698      	mov	r8, r3
 8007470:	688a      	ldr	r2, [r1, #8]
 8007472:	690b      	ldr	r3, [r1, #16]
 8007474:	4607      	mov	r7, r0
 8007476:	4293      	cmp	r3, r2
 8007478:	bfb8      	it	lt
 800747a:	4613      	movlt	r3, r2
 800747c:	6033      	str	r3, [r6, #0]
 800747e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007482:	460c      	mov	r4, r1
 8007484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007488:	b10a      	cbz	r2, 800748e <_printf_common+0x26>
 800748a:	3301      	adds	r3, #1
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	0699      	lsls	r1, r3, #26
 8007492:	bf42      	ittt	mi
 8007494:	6833      	ldrmi	r3, [r6, #0]
 8007496:	3302      	addmi	r3, #2
 8007498:	6033      	strmi	r3, [r6, #0]
 800749a:	6825      	ldr	r5, [r4, #0]
 800749c:	f015 0506 	ands.w	r5, r5, #6
 80074a0:	d106      	bne.n	80074b0 <_printf_common+0x48>
 80074a2:	f104 0a19 	add.w	sl, r4, #25
 80074a6:	68e3      	ldr	r3, [r4, #12]
 80074a8:	6832      	ldr	r2, [r6, #0]
 80074aa:	1a9b      	subs	r3, r3, r2
 80074ac:	42ab      	cmp	r3, r5
 80074ae:	dc2b      	bgt.n	8007508 <_printf_common+0xa0>
 80074b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	3b00      	subs	r3, #0
 80074b8:	bf18      	it	ne
 80074ba:	2301      	movne	r3, #1
 80074bc:	0692      	lsls	r2, r2, #26
 80074be:	d430      	bmi.n	8007522 <_printf_common+0xba>
 80074c0:	4641      	mov	r1, r8
 80074c2:	4638      	mov	r0, r7
 80074c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074c8:	47c8      	blx	r9
 80074ca:	3001      	adds	r0, #1
 80074cc:	d023      	beq.n	8007516 <_printf_common+0xae>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	6922      	ldr	r2, [r4, #16]
 80074d2:	f003 0306 	and.w	r3, r3, #6
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	bf14      	ite	ne
 80074da:	2500      	movne	r5, #0
 80074dc:	6833      	ldreq	r3, [r6, #0]
 80074de:	f04f 0600 	mov.w	r6, #0
 80074e2:	bf08      	it	eq
 80074e4:	68e5      	ldreq	r5, [r4, #12]
 80074e6:	f104 041a 	add.w	r4, r4, #26
 80074ea:	bf08      	it	eq
 80074ec:	1aed      	subeq	r5, r5, r3
 80074ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80074f2:	bf08      	it	eq
 80074f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f8:	4293      	cmp	r3, r2
 80074fa:	bfc4      	itt	gt
 80074fc:	1a9b      	subgt	r3, r3, r2
 80074fe:	18ed      	addgt	r5, r5, r3
 8007500:	42b5      	cmp	r5, r6
 8007502:	d11a      	bne.n	800753a <_printf_common+0xd2>
 8007504:	2000      	movs	r0, #0
 8007506:	e008      	b.n	800751a <_printf_common+0xb2>
 8007508:	2301      	movs	r3, #1
 800750a:	4652      	mov	r2, sl
 800750c:	4641      	mov	r1, r8
 800750e:	4638      	mov	r0, r7
 8007510:	47c8      	blx	r9
 8007512:	3001      	adds	r0, #1
 8007514:	d103      	bne.n	800751e <_printf_common+0xb6>
 8007516:	f04f 30ff 	mov.w	r0, #4294967295
 800751a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751e:	3501      	adds	r5, #1
 8007520:	e7c1      	b.n	80074a6 <_printf_common+0x3e>
 8007522:	2030      	movs	r0, #48	@ 0x30
 8007524:	18e1      	adds	r1, r4, r3
 8007526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007530:	4422      	add	r2, r4
 8007532:	3302      	adds	r3, #2
 8007534:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007538:	e7c2      	b.n	80074c0 <_printf_common+0x58>
 800753a:	2301      	movs	r3, #1
 800753c:	4622      	mov	r2, r4
 800753e:	4641      	mov	r1, r8
 8007540:	4638      	mov	r0, r7
 8007542:	47c8      	blx	r9
 8007544:	3001      	adds	r0, #1
 8007546:	d0e6      	beq.n	8007516 <_printf_common+0xae>
 8007548:	3601      	adds	r6, #1
 800754a:	e7d9      	b.n	8007500 <_printf_common+0x98>

0800754c <_printf_i>:
 800754c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	7e0f      	ldrb	r7, [r1, #24]
 8007552:	4691      	mov	r9, r2
 8007554:	2f78      	cmp	r7, #120	@ 0x78
 8007556:	4680      	mov	r8, r0
 8007558:	460c      	mov	r4, r1
 800755a:	469a      	mov	sl, r3
 800755c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800755e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007562:	d807      	bhi.n	8007574 <_printf_i+0x28>
 8007564:	2f62      	cmp	r7, #98	@ 0x62
 8007566:	d80a      	bhi.n	800757e <_printf_i+0x32>
 8007568:	2f00      	cmp	r7, #0
 800756a:	f000 80d3 	beq.w	8007714 <_printf_i+0x1c8>
 800756e:	2f58      	cmp	r7, #88	@ 0x58
 8007570:	f000 80ba 	beq.w	80076e8 <_printf_i+0x19c>
 8007574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800757c:	e03a      	b.n	80075f4 <_printf_i+0xa8>
 800757e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007582:	2b15      	cmp	r3, #21
 8007584:	d8f6      	bhi.n	8007574 <_printf_i+0x28>
 8007586:	a101      	add	r1, pc, #4	@ (adr r1, 800758c <_printf_i+0x40>)
 8007588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800758c:	080075e5 	.word	0x080075e5
 8007590:	080075f9 	.word	0x080075f9
 8007594:	08007575 	.word	0x08007575
 8007598:	08007575 	.word	0x08007575
 800759c:	08007575 	.word	0x08007575
 80075a0:	08007575 	.word	0x08007575
 80075a4:	080075f9 	.word	0x080075f9
 80075a8:	08007575 	.word	0x08007575
 80075ac:	08007575 	.word	0x08007575
 80075b0:	08007575 	.word	0x08007575
 80075b4:	08007575 	.word	0x08007575
 80075b8:	080076fb 	.word	0x080076fb
 80075bc:	08007623 	.word	0x08007623
 80075c0:	080076b5 	.word	0x080076b5
 80075c4:	08007575 	.word	0x08007575
 80075c8:	08007575 	.word	0x08007575
 80075cc:	0800771d 	.word	0x0800771d
 80075d0:	08007575 	.word	0x08007575
 80075d4:	08007623 	.word	0x08007623
 80075d8:	08007575 	.word	0x08007575
 80075dc:	08007575 	.word	0x08007575
 80075e0:	080076bd 	.word	0x080076bd
 80075e4:	6833      	ldr	r3, [r6, #0]
 80075e6:	1d1a      	adds	r2, r3, #4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6032      	str	r2, [r6, #0]
 80075ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075f4:	2301      	movs	r3, #1
 80075f6:	e09e      	b.n	8007736 <_printf_i+0x1ea>
 80075f8:	6833      	ldr	r3, [r6, #0]
 80075fa:	6820      	ldr	r0, [r4, #0]
 80075fc:	1d19      	adds	r1, r3, #4
 80075fe:	6031      	str	r1, [r6, #0]
 8007600:	0606      	lsls	r6, r0, #24
 8007602:	d501      	bpl.n	8007608 <_printf_i+0xbc>
 8007604:	681d      	ldr	r5, [r3, #0]
 8007606:	e003      	b.n	8007610 <_printf_i+0xc4>
 8007608:	0645      	lsls	r5, r0, #25
 800760a:	d5fb      	bpl.n	8007604 <_printf_i+0xb8>
 800760c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007610:	2d00      	cmp	r5, #0
 8007612:	da03      	bge.n	800761c <_printf_i+0xd0>
 8007614:	232d      	movs	r3, #45	@ 0x2d
 8007616:	426d      	negs	r5, r5
 8007618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800761c:	230a      	movs	r3, #10
 800761e:	4859      	ldr	r0, [pc, #356]	@ (8007784 <_printf_i+0x238>)
 8007620:	e011      	b.n	8007646 <_printf_i+0xfa>
 8007622:	6821      	ldr	r1, [r4, #0]
 8007624:	6833      	ldr	r3, [r6, #0]
 8007626:	0608      	lsls	r0, r1, #24
 8007628:	f853 5b04 	ldr.w	r5, [r3], #4
 800762c:	d402      	bmi.n	8007634 <_printf_i+0xe8>
 800762e:	0649      	lsls	r1, r1, #25
 8007630:	bf48      	it	mi
 8007632:	b2ad      	uxthmi	r5, r5
 8007634:	2f6f      	cmp	r7, #111	@ 0x6f
 8007636:	6033      	str	r3, [r6, #0]
 8007638:	bf14      	ite	ne
 800763a:	230a      	movne	r3, #10
 800763c:	2308      	moveq	r3, #8
 800763e:	4851      	ldr	r0, [pc, #324]	@ (8007784 <_printf_i+0x238>)
 8007640:	2100      	movs	r1, #0
 8007642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007646:	6866      	ldr	r6, [r4, #4]
 8007648:	2e00      	cmp	r6, #0
 800764a:	bfa8      	it	ge
 800764c:	6821      	ldrge	r1, [r4, #0]
 800764e:	60a6      	str	r6, [r4, #8]
 8007650:	bfa4      	itt	ge
 8007652:	f021 0104 	bicge.w	r1, r1, #4
 8007656:	6021      	strge	r1, [r4, #0]
 8007658:	b90d      	cbnz	r5, 800765e <_printf_i+0x112>
 800765a:	2e00      	cmp	r6, #0
 800765c:	d04b      	beq.n	80076f6 <_printf_i+0x1aa>
 800765e:	4616      	mov	r6, r2
 8007660:	fbb5 f1f3 	udiv	r1, r5, r3
 8007664:	fb03 5711 	mls	r7, r3, r1, r5
 8007668:	5dc7      	ldrb	r7, [r0, r7]
 800766a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800766e:	462f      	mov	r7, r5
 8007670:	42bb      	cmp	r3, r7
 8007672:	460d      	mov	r5, r1
 8007674:	d9f4      	bls.n	8007660 <_printf_i+0x114>
 8007676:	2b08      	cmp	r3, #8
 8007678:	d10b      	bne.n	8007692 <_printf_i+0x146>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	07df      	lsls	r7, r3, #31
 800767e:	d508      	bpl.n	8007692 <_printf_i+0x146>
 8007680:	6923      	ldr	r3, [r4, #16]
 8007682:	6861      	ldr	r1, [r4, #4]
 8007684:	4299      	cmp	r1, r3
 8007686:	bfde      	ittt	le
 8007688:	2330      	movle	r3, #48	@ 0x30
 800768a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800768e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007692:	1b92      	subs	r2, r2, r6
 8007694:	6122      	str	r2, [r4, #16]
 8007696:	464b      	mov	r3, r9
 8007698:	4621      	mov	r1, r4
 800769a:	4640      	mov	r0, r8
 800769c:	f8cd a000 	str.w	sl, [sp]
 80076a0:	aa03      	add	r2, sp, #12
 80076a2:	f7ff fee1 	bl	8007468 <_printf_common>
 80076a6:	3001      	adds	r0, #1
 80076a8:	d14a      	bne.n	8007740 <_printf_i+0x1f4>
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295
 80076ae:	b004      	add	sp, #16
 80076b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	f043 0320 	orr.w	r3, r3, #32
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	2778      	movs	r7, #120	@ 0x78
 80076be:	4832      	ldr	r0, [pc, #200]	@ (8007788 <_printf_i+0x23c>)
 80076c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	6831      	ldr	r1, [r6, #0]
 80076c8:	061f      	lsls	r7, r3, #24
 80076ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80076ce:	d402      	bmi.n	80076d6 <_printf_i+0x18a>
 80076d0:	065f      	lsls	r7, r3, #25
 80076d2:	bf48      	it	mi
 80076d4:	b2ad      	uxthmi	r5, r5
 80076d6:	6031      	str	r1, [r6, #0]
 80076d8:	07d9      	lsls	r1, r3, #31
 80076da:	bf44      	itt	mi
 80076dc:	f043 0320 	orrmi.w	r3, r3, #32
 80076e0:	6023      	strmi	r3, [r4, #0]
 80076e2:	b11d      	cbz	r5, 80076ec <_printf_i+0x1a0>
 80076e4:	2310      	movs	r3, #16
 80076e6:	e7ab      	b.n	8007640 <_printf_i+0xf4>
 80076e8:	4826      	ldr	r0, [pc, #152]	@ (8007784 <_printf_i+0x238>)
 80076ea:	e7e9      	b.n	80076c0 <_printf_i+0x174>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	f023 0320 	bic.w	r3, r3, #32
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	e7f6      	b.n	80076e4 <_printf_i+0x198>
 80076f6:	4616      	mov	r6, r2
 80076f8:	e7bd      	b.n	8007676 <_printf_i+0x12a>
 80076fa:	6833      	ldr	r3, [r6, #0]
 80076fc:	6825      	ldr	r5, [r4, #0]
 80076fe:	1d18      	adds	r0, r3, #4
 8007700:	6961      	ldr	r1, [r4, #20]
 8007702:	6030      	str	r0, [r6, #0]
 8007704:	062e      	lsls	r6, r5, #24
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	d501      	bpl.n	800770e <_printf_i+0x1c2>
 800770a:	6019      	str	r1, [r3, #0]
 800770c:	e002      	b.n	8007714 <_printf_i+0x1c8>
 800770e:	0668      	lsls	r0, r5, #25
 8007710:	d5fb      	bpl.n	800770a <_printf_i+0x1be>
 8007712:	8019      	strh	r1, [r3, #0]
 8007714:	2300      	movs	r3, #0
 8007716:	4616      	mov	r6, r2
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	e7bc      	b.n	8007696 <_printf_i+0x14a>
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	2100      	movs	r1, #0
 8007720:	1d1a      	adds	r2, r3, #4
 8007722:	6032      	str	r2, [r6, #0]
 8007724:	681e      	ldr	r6, [r3, #0]
 8007726:	6862      	ldr	r2, [r4, #4]
 8007728:	4630      	mov	r0, r6
 800772a:	f000 fc9c 	bl	8008066 <memchr>
 800772e:	b108      	cbz	r0, 8007734 <_printf_i+0x1e8>
 8007730:	1b80      	subs	r0, r0, r6
 8007732:	6060      	str	r0, [r4, #4]
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	2300      	movs	r3, #0
 800773a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800773e:	e7aa      	b.n	8007696 <_printf_i+0x14a>
 8007740:	4632      	mov	r2, r6
 8007742:	4649      	mov	r1, r9
 8007744:	4640      	mov	r0, r8
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	47d0      	blx	sl
 800774a:	3001      	adds	r0, #1
 800774c:	d0ad      	beq.n	80076aa <_printf_i+0x15e>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	079b      	lsls	r3, r3, #30
 8007752:	d413      	bmi.n	800777c <_printf_i+0x230>
 8007754:	68e0      	ldr	r0, [r4, #12]
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	4298      	cmp	r0, r3
 800775a:	bfb8      	it	lt
 800775c:	4618      	movlt	r0, r3
 800775e:	e7a6      	b.n	80076ae <_printf_i+0x162>
 8007760:	2301      	movs	r3, #1
 8007762:	4632      	mov	r2, r6
 8007764:	4649      	mov	r1, r9
 8007766:	4640      	mov	r0, r8
 8007768:	47d0      	blx	sl
 800776a:	3001      	adds	r0, #1
 800776c:	d09d      	beq.n	80076aa <_printf_i+0x15e>
 800776e:	3501      	adds	r5, #1
 8007770:	68e3      	ldr	r3, [r4, #12]
 8007772:	9903      	ldr	r1, [sp, #12]
 8007774:	1a5b      	subs	r3, r3, r1
 8007776:	42ab      	cmp	r3, r5
 8007778:	dcf2      	bgt.n	8007760 <_printf_i+0x214>
 800777a:	e7eb      	b.n	8007754 <_printf_i+0x208>
 800777c:	2500      	movs	r5, #0
 800777e:	f104 0619 	add.w	r6, r4, #25
 8007782:	e7f5      	b.n	8007770 <_printf_i+0x224>
 8007784:	0800e6f5 	.word	0x0800e6f5
 8007788:	0800e706 	.word	0x0800e706

0800778c <_scanf_float>:
 800778c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007790:	b087      	sub	sp, #28
 8007792:	9303      	str	r3, [sp, #12]
 8007794:	688b      	ldr	r3, [r1, #8]
 8007796:	4617      	mov	r7, r2
 8007798:	1e5a      	subs	r2, r3, #1
 800779a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800779e:	bf82      	ittt	hi
 80077a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80077a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80077a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80077ac:	460a      	mov	r2, r1
 80077ae:	f04f 0500 	mov.w	r5, #0
 80077b2:	bf88      	it	hi
 80077b4:	608b      	strhi	r3, [r1, #8]
 80077b6:	680b      	ldr	r3, [r1, #0]
 80077b8:	4680      	mov	r8, r0
 80077ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80077be:	f842 3b1c 	str.w	r3, [r2], #28
 80077c2:	460c      	mov	r4, r1
 80077c4:	bf98      	it	ls
 80077c6:	f04f 0b00 	movls.w	fp, #0
 80077ca:	4616      	mov	r6, r2
 80077cc:	46aa      	mov	sl, r5
 80077ce:	46a9      	mov	r9, r5
 80077d0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80077d4:	9201      	str	r2, [sp, #4]
 80077d6:	9502      	str	r5, [sp, #8]
 80077d8:	68a2      	ldr	r2, [r4, #8]
 80077da:	b152      	cbz	r2, 80077f2 <_scanf_float+0x66>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80077e2:	d865      	bhi.n	80078b0 <_scanf_float+0x124>
 80077e4:	2b40      	cmp	r3, #64	@ 0x40
 80077e6:	d83d      	bhi.n	8007864 <_scanf_float+0xd8>
 80077e8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80077ec:	b2c8      	uxtb	r0, r1
 80077ee:	280e      	cmp	r0, #14
 80077f0:	d93b      	bls.n	800786a <_scanf_float+0xde>
 80077f2:	f1b9 0f00 	cmp.w	r9, #0
 80077f6:	d003      	beq.n	8007800 <_scanf_float+0x74>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007804:	f1ba 0f01 	cmp.w	sl, #1
 8007808:	f200 8118 	bhi.w	8007a3c <_scanf_float+0x2b0>
 800780c:	9b01      	ldr	r3, [sp, #4]
 800780e:	429e      	cmp	r6, r3
 8007810:	f200 8109 	bhi.w	8007a26 <_scanf_float+0x29a>
 8007814:	2001      	movs	r0, #1
 8007816:	b007      	add	sp, #28
 8007818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007820:	2a0d      	cmp	r2, #13
 8007822:	d8e6      	bhi.n	80077f2 <_scanf_float+0x66>
 8007824:	a101      	add	r1, pc, #4	@ (adr r1, 800782c <_scanf_float+0xa0>)
 8007826:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800782a:	bf00      	nop
 800782c:	08007973 	.word	0x08007973
 8007830:	080077f3 	.word	0x080077f3
 8007834:	080077f3 	.word	0x080077f3
 8007838:	080077f3 	.word	0x080077f3
 800783c:	080079d3 	.word	0x080079d3
 8007840:	080079ab 	.word	0x080079ab
 8007844:	080077f3 	.word	0x080077f3
 8007848:	080077f3 	.word	0x080077f3
 800784c:	08007981 	.word	0x08007981
 8007850:	080077f3 	.word	0x080077f3
 8007854:	080077f3 	.word	0x080077f3
 8007858:	080077f3 	.word	0x080077f3
 800785c:	080077f3 	.word	0x080077f3
 8007860:	08007939 	.word	0x08007939
 8007864:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007868:	e7da      	b.n	8007820 <_scanf_float+0x94>
 800786a:	290e      	cmp	r1, #14
 800786c:	d8c1      	bhi.n	80077f2 <_scanf_float+0x66>
 800786e:	a001      	add	r0, pc, #4	@ (adr r0, 8007874 <_scanf_float+0xe8>)
 8007870:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007874:	08007929 	.word	0x08007929
 8007878:	080077f3 	.word	0x080077f3
 800787c:	08007929 	.word	0x08007929
 8007880:	080079bf 	.word	0x080079bf
 8007884:	080077f3 	.word	0x080077f3
 8007888:	080078d1 	.word	0x080078d1
 800788c:	0800790f 	.word	0x0800790f
 8007890:	0800790f 	.word	0x0800790f
 8007894:	0800790f 	.word	0x0800790f
 8007898:	0800790f 	.word	0x0800790f
 800789c:	0800790f 	.word	0x0800790f
 80078a0:	0800790f 	.word	0x0800790f
 80078a4:	0800790f 	.word	0x0800790f
 80078a8:	0800790f 	.word	0x0800790f
 80078ac:	0800790f 	.word	0x0800790f
 80078b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80078b2:	d809      	bhi.n	80078c8 <_scanf_float+0x13c>
 80078b4:	2b60      	cmp	r3, #96	@ 0x60
 80078b6:	d8b1      	bhi.n	800781c <_scanf_float+0x90>
 80078b8:	2b54      	cmp	r3, #84	@ 0x54
 80078ba:	d07b      	beq.n	80079b4 <_scanf_float+0x228>
 80078bc:	2b59      	cmp	r3, #89	@ 0x59
 80078be:	d198      	bne.n	80077f2 <_scanf_float+0x66>
 80078c0:	2d07      	cmp	r5, #7
 80078c2:	d196      	bne.n	80077f2 <_scanf_float+0x66>
 80078c4:	2508      	movs	r5, #8
 80078c6:	e02c      	b.n	8007922 <_scanf_float+0x196>
 80078c8:	2b74      	cmp	r3, #116	@ 0x74
 80078ca:	d073      	beq.n	80079b4 <_scanf_float+0x228>
 80078cc:	2b79      	cmp	r3, #121	@ 0x79
 80078ce:	e7f6      	b.n	80078be <_scanf_float+0x132>
 80078d0:	6821      	ldr	r1, [r4, #0]
 80078d2:	05c8      	lsls	r0, r1, #23
 80078d4:	d51b      	bpl.n	800790e <_scanf_float+0x182>
 80078d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80078da:	6021      	str	r1, [r4, #0]
 80078dc:	f109 0901 	add.w	r9, r9, #1
 80078e0:	f1bb 0f00 	cmp.w	fp, #0
 80078e4:	d003      	beq.n	80078ee <_scanf_float+0x162>
 80078e6:	3201      	adds	r2, #1
 80078e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078ec:	60a2      	str	r2, [r4, #8]
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	60a3      	str	r3, [r4, #8]
 80078f4:	6923      	ldr	r3, [r4, #16]
 80078f6:	3301      	adds	r3, #1
 80078f8:	6123      	str	r3, [r4, #16]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	607b      	str	r3, [r7, #4]
 8007902:	f340 8087 	ble.w	8007a14 <_scanf_float+0x288>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	3301      	adds	r3, #1
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	e764      	b.n	80077d8 <_scanf_float+0x4c>
 800790e:	eb1a 0105 	adds.w	r1, sl, r5
 8007912:	f47f af6e 	bne.w	80077f2 <_scanf_float+0x66>
 8007916:	460d      	mov	r5, r1
 8007918:	468a      	mov	sl, r1
 800791a:	6822      	ldr	r2, [r4, #0]
 800791c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007920:	6022      	str	r2, [r4, #0]
 8007922:	f806 3b01 	strb.w	r3, [r6], #1
 8007926:	e7e2      	b.n	80078ee <_scanf_float+0x162>
 8007928:	6822      	ldr	r2, [r4, #0]
 800792a:	0610      	lsls	r0, r2, #24
 800792c:	f57f af61 	bpl.w	80077f2 <_scanf_float+0x66>
 8007930:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007934:	6022      	str	r2, [r4, #0]
 8007936:	e7f4      	b.n	8007922 <_scanf_float+0x196>
 8007938:	f1ba 0f00 	cmp.w	sl, #0
 800793c:	d10e      	bne.n	800795c <_scanf_float+0x1d0>
 800793e:	f1b9 0f00 	cmp.w	r9, #0
 8007942:	d10e      	bne.n	8007962 <_scanf_float+0x1d6>
 8007944:	6822      	ldr	r2, [r4, #0]
 8007946:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800794a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800794e:	d108      	bne.n	8007962 <_scanf_float+0x1d6>
 8007950:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007954:	f04f 0a01 	mov.w	sl, #1
 8007958:	6022      	str	r2, [r4, #0]
 800795a:	e7e2      	b.n	8007922 <_scanf_float+0x196>
 800795c:	f1ba 0f02 	cmp.w	sl, #2
 8007960:	d055      	beq.n	8007a0e <_scanf_float+0x282>
 8007962:	2d01      	cmp	r5, #1
 8007964:	d002      	beq.n	800796c <_scanf_float+0x1e0>
 8007966:	2d04      	cmp	r5, #4
 8007968:	f47f af43 	bne.w	80077f2 <_scanf_float+0x66>
 800796c:	3501      	adds	r5, #1
 800796e:	b2ed      	uxtb	r5, r5
 8007970:	e7d7      	b.n	8007922 <_scanf_float+0x196>
 8007972:	f1ba 0f01 	cmp.w	sl, #1
 8007976:	f47f af3c 	bne.w	80077f2 <_scanf_float+0x66>
 800797a:	f04f 0a02 	mov.w	sl, #2
 800797e:	e7d0      	b.n	8007922 <_scanf_float+0x196>
 8007980:	b97d      	cbnz	r5, 80079a2 <_scanf_float+0x216>
 8007982:	f1b9 0f00 	cmp.w	r9, #0
 8007986:	f47f af37 	bne.w	80077f8 <_scanf_float+0x6c>
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007990:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007994:	f040 8103 	bne.w	8007b9e <_scanf_float+0x412>
 8007998:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800799c:	2501      	movs	r5, #1
 800799e:	6022      	str	r2, [r4, #0]
 80079a0:	e7bf      	b.n	8007922 <_scanf_float+0x196>
 80079a2:	2d03      	cmp	r5, #3
 80079a4:	d0e2      	beq.n	800796c <_scanf_float+0x1e0>
 80079a6:	2d05      	cmp	r5, #5
 80079a8:	e7de      	b.n	8007968 <_scanf_float+0x1dc>
 80079aa:	2d02      	cmp	r5, #2
 80079ac:	f47f af21 	bne.w	80077f2 <_scanf_float+0x66>
 80079b0:	2503      	movs	r5, #3
 80079b2:	e7b6      	b.n	8007922 <_scanf_float+0x196>
 80079b4:	2d06      	cmp	r5, #6
 80079b6:	f47f af1c 	bne.w	80077f2 <_scanf_float+0x66>
 80079ba:	2507      	movs	r5, #7
 80079bc:	e7b1      	b.n	8007922 <_scanf_float+0x196>
 80079be:	6822      	ldr	r2, [r4, #0]
 80079c0:	0591      	lsls	r1, r2, #22
 80079c2:	f57f af16 	bpl.w	80077f2 <_scanf_float+0x66>
 80079c6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80079ca:	6022      	str	r2, [r4, #0]
 80079cc:	f8cd 9008 	str.w	r9, [sp, #8]
 80079d0:	e7a7      	b.n	8007922 <_scanf_float+0x196>
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80079d8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80079dc:	d006      	beq.n	80079ec <_scanf_float+0x260>
 80079de:	0550      	lsls	r0, r2, #21
 80079e0:	f57f af07 	bpl.w	80077f2 <_scanf_float+0x66>
 80079e4:	f1b9 0f00 	cmp.w	r9, #0
 80079e8:	f000 80d9 	beq.w	8007b9e <_scanf_float+0x412>
 80079ec:	0591      	lsls	r1, r2, #22
 80079ee:	bf58      	it	pl
 80079f0:	9902      	ldrpl	r1, [sp, #8]
 80079f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80079f6:	bf58      	it	pl
 80079f8:	eba9 0101 	subpl.w	r1, r9, r1
 80079fc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007a00:	f04f 0900 	mov.w	r9, #0
 8007a04:	bf58      	it	pl
 8007a06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a0a:	6022      	str	r2, [r4, #0]
 8007a0c:	e789      	b.n	8007922 <_scanf_float+0x196>
 8007a0e:	f04f 0a03 	mov.w	sl, #3
 8007a12:	e786      	b.n	8007922 <_scanf_float+0x196>
 8007a14:	4639      	mov	r1, r7
 8007a16:	4640      	mov	r0, r8
 8007a18:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007a1c:	4798      	blx	r3
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f43f aeda 	beq.w	80077d8 <_scanf_float+0x4c>
 8007a24:	e6e5      	b.n	80077f2 <_scanf_float+0x66>
 8007a26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a32:	4798      	blx	r3
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	6123      	str	r3, [r4, #16]
 8007a3a:	e6e7      	b.n	800780c <_scanf_float+0x80>
 8007a3c:	1e6b      	subs	r3, r5, #1
 8007a3e:	2b06      	cmp	r3, #6
 8007a40:	d824      	bhi.n	8007a8c <_scanf_float+0x300>
 8007a42:	2d02      	cmp	r5, #2
 8007a44:	d836      	bhi.n	8007ab4 <_scanf_float+0x328>
 8007a46:	9b01      	ldr	r3, [sp, #4]
 8007a48:	429e      	cmp	r6, r3
 8007a4a:	f67f aee3 	bls.w	8007814 <_scanf_float+0x88>
 8007a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a52:	463a      	mov	r2, r7
 8007a54:	4640      	mov	r0, r8
 8007a56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a5a:	4798      	blx	r3
 8007a5c:	6923      	ldr	r3, [r4, #16]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	6123      	str	r3, [r4, #16]
 8007a62:	e7f0      	b.n	8007a46 <_scanf_float+0x2ba>
 8007a64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a68:	463a      	mov	r2, r7
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007a70:	4798      	blx	r3
 8007a72:	6923      	ldr	r3, [r4, #16]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	6123      	str	r3, [r4, #16]
 8007a78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a7c:	fa5f fa8a 	uxtb.w	sl, sl
 8007a80:	f1ba 0f02 	cmp.w	sl, #2
 8007a84:	d1ee      	bne.n	8007a64 <_scanf_float+0x2d8>
 8007a86:	3d03      	subs	r5, #3
 8007a88:	b2ed      	uxtb	r5, r5
 8007a8a:	1b76      	subs	r6, r6, r5
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	05da      	lsls	r2, r3, #23
 8007a90:	d530      	bpl.n	8007af4 <_scanf_float+0x368>
 8007a92:	055b      	lsls	r3, r3, #21
 8007a94:	d511      	bpl.n	8007aba <_scanf_float+0x32e>
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	429e      	cmp	r6, r3
 8007a9a:	f67f aebb 	bls.w	8007814 <_scanf_float+0x88>
 8007a9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007aa2:	463a      	mov	r2, r7
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007aaa:	4798      	blx	r3
 8007aac:	6923      	ldr	r3, [r4, #16]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	e7f0      	b.n	8007a96 <_scanf_float+0x30a>
 8007ab4:	46aa      	mov	sl, r5
 8007ab6:	46b3      	mov	fp, r6
 8007ab8:	e7de      	b.n	8007a78 <_scanf_float+0x2ec>
 8007aba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007abe:	6923      	ldr	r3, [r4, #16]
 8007ac0:	2965      	cmp	r1, #101	@ 0x65
 8007ac2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ac6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	d00c      	beq.n	8007ae8 <_scanf_float+0x35c>
 8007ace:	2945      	cmp	r1, #69	@ 0x45
 8007ad0:	d00a      	beq.n	8007ae8 <_scanf_float+0x35c>
 8007ad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ad6:	463a      	mov	r2, r7
 8007ad8:	4640      	mov	r0, r8
 8007ada:	4798      	blx	r3
 8007adc:	6923      	ldr	r3, [r4, #16]
 8007ade:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	1eb5      	subs	r5, r6, #2
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	463a      	mov	r2, r7
 8007aea:	4640      	mov	r0, r8
 8007aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007af0:	4798      	blx	r3
 8007af2:	462e      	mov	r6, r5
 8007af4:	6822      	ldr	r2, [r4, #0]
 8007af6:	f012 0210 	ands.w	r2, r2, #16
 8007afa:	d001      	beq.n	8007b00 <_scanf_float+0x374>
 8007afc:	2000      	movs	r0, #0
 8007afe:	e68a      	b.n	8007816 <_scanf_float+0x8a>
 8007b00:	7032      	strb	r2, [r6, #0]
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b0c:	d11c      	bne.n	8007b48 <_scanf_float+0x3bc>
 8007b0e:	9b02      	ldr	r3, [sp, #8]
 8007b10:	454b      	cmp	r3, r9
 8007b12:	eba3 0209 	sub.w	r2, r3, r9
 8007b16:	d123      	bne.n	8007b60 <_scanf_float+0x3d4>
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	9901      	ldr	r1, [sp, #4]
 8007b1e:	f002 fcd3 	bl	800a4c8 <_strtod_r>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	6825      	ldr	r5, [r4, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f015 0f02 	tst.w	r5, #2
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	460f      	mov	r7, r1
 8007b30:	f103 0204 	add.w	r2, r3, #4
 8007b34:	d01f      	beq.n	8007b76 <_scanf_float+0x3ea>
 8007b36:	9903      	ldr	r1, [sp, #12]
 8007b38:	600a      	str	r2, [r1, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	e9c3 6700 	strd	r6, r7, [r3]
 8007b40:	68e3      	ldr	r3, [r4, #12]
 8007b42:	3301      	adds	r3, #1
 8007b44:	60e3      	str	r3, [r4, #12]
 8007b46:	e7d9      	b.n	8007afc <_scanf_float+0x370>
 8007b48:	9b04      	ldr	r3, [sp, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0e4      	beq.n	8007b18 <_scanf_float+0x38c>
 8007b4e:	9905      	ldr	r1, [sp, #20]
 8007b50:	230a      	movs	r3, #10
 8007b52:	4640      	mov	r0, r8
 8007b54:	3101      	adds	r1, #1
 8007b56:	f7ff f9b1 	bl	8006ebc <_strtol_r>
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	9e05      	ldr	r6, [sp, #20]
 8007b5e:	1ac2      	subs	r2, r0, r3
 8007b60:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007b64:	429e      	cmp	r6, r3
 8007b66:	bf28      	it	cs
 8007b68:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	490d      	ldr	r1, [pc, #52]	@ (8007ba4 <_scanf_float+0x418>)
 8007b70:	f000 f8de 	bl	8007d30 <siprintf>
 8007b74:	e7d0      	b.n	8007b18 <_scanf_float+0x38c>
 8007b76:	076d      	lsls	r5, r5, #29
 8007b78:	d4dd      	bmi.n	8007b36 <_scanf_float+0x3aa>
 8007b7a:	9d03      	ldr	r5, [sp, #12]
 8007b7c:	602a      	str	r2, [r5, #0]
 8007b7e:	681d      	ldr	r5, [r3, #0]
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	f7f8 fff6 	bl	8000b74 <__aeabi_dcmpun>
 8007b88:	b120      	cbz	r0, 8007b94 <_scanf_float+0x408>
 8007b8a:	4807      	ldr	r0, [pc, #28]	@ (8007ba8 <_scanf_float+0x41c>)
 8007b8c:	f000 fa88 	bl	80080a0 <nanf>
 8007b90:	6028      	str	r0, [r5, #0]
 8007b92:	e7d5      	b.n	8007b40 <_scanf_float+0x3b4>
 8007b94:	4630      	mov	r0, r6
 8007b96:	4639      	mov	r1, r7
 8007b98:	f7f9 f84a 	bl	8000c30 <__aeabi_d2f>
 8007b9c:	e7f8      	b.n	8007b90 <_scanf_float+0x404>
 8007b9e:	f04f 0900 	mov.w	r9, #0
 8007ba2:	e62d      	b.n	8007800 <_scanf_float+0x74>
 8007ba4:	0800e717 	.word	0x0800e717
 8007ba8:	0800e7c8 	.word	0x0800e7c8

08007bac <std>:
 8007bac:	2300      	movs	r3, #0
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bba:	6083      	str	r3, [r0, #8]
 8007bbc:	8181      	strh	r1, [r0, #12]
 8007bbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bc0:	81c2      	strh	r2, [r0, #14]
 8007bc2:	6183      	str	r3, [r0, #24]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	2208      	movs	r2, #8
 8007bc8:	305c      	adds	r0, #92	@ 0x5c
 8007bca:	f000 f92e 	bl	8007e2a <memset>
 8007bce:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <std+0x58>)
 8007bd0:	6224      	str	r4, [r4, #32]
 8007bd2:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <std+0x5c>)
 8007bd6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007c0c <std+0x60>)
 8007bda:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c10 <std+0x64>)
 8007bde:	6323      	str	r3, [r4, #48]	@ 0x30
 8007be0:	4b0c      	ldr	r3, [pc, #48]	@ (8007c14 <std+0x68>)
 8007be2:	429c      	cmp	r4, r3
 8007be4:	d006      	beq.n	8007bf4 <std+0x48>
 8007be6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bea:	4294      	cmp	r4, r2
 8007bec:	d002      	beq.n	8007bf4 <std+0x48>
 8007bee:	33d0      	adds	r3, #208	@ 0xd0
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	d105      	bne.n	8007c00 <std+0x54>
 8007bf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bfc:	f000 ba28 	b.w	8008050 <__retarget_lock_init_recursive>
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	bf00      	nop
 8007c04:	08007d71 	.word	0x08007d71
 8007c08:	08007d93 	.word	0x08007d93
 8007c0c:	08007dcb 	.word	0x08007dcb
 8007c10:	08007def 	.word	0x08007def
 8007c14:	20000954 	.word	0x20000954

08007c18 <stdio_exit_handler>:
 8007c18:	4a02      	ldr	r2, [pc, #8]	@ (8007c24 <stdio_exit_handler+0xc>)
 8007c1a:	4903      	ldr	r1, [pc, #12]	@ (8007c28 <stdio_exit_handler+0x10>)
 8007c1c:	4803      	ldr	r0, [pc, #12]	@ (8007c2c <stdio_exit_handler+0x14>)
 8007c1e:	f000 b869 	b.w	8007cf4 <_fwalk_sglue>
 8007c22:	bf00      	nop
 8007c24:	20000034 	.word	0x20000034
 8007c28:	0800a885 	.word	0x0800a885
 8007c2c:	20000044 	.word	0x20000044

08007c30 <cleanup_stdio>:
 8007c30:	6841      	ldr	r1, [r0, #4]
 8007c32:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <cleanup_stdio+0x34>)
 8007c34:	b510      	push	{r4, lr}
 8007c36:	4299      	cmp	r1, r3
 8007c38:	4604      	mov	r4, r0
 8007c3a:	d001      	beq.n	8007c40 <cleanup_stdio+0x10>
 8007c3c:	f002 fe22 	bl	800a884 <_fflush_r>
 8007c40:	68a1      	ldr	r1, [r4, #8]
 8007c42:	4b09      	ldr	r3, [pc, #36]	@ (8007c68 <cleanup_stdio+0x38>)
 8007c44:	4299      	cmp	r1, r3
 8007c46:	d002      	beq.n	8007c4e <cleanup_stdio+0x1e>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f002 fe1b 	bl	800a884 <_fflush_r>
 8007c4e:	68e1      	ldr	r1, [r4, #12]
 8007c50:	4b06      	ldr	r3, [pc, #24]	@ (8007c6c <cleanup_stdio+0x3c>)
 8007c52:	4299      	cmp	r1, r3
 8007c54:	d004      	beq.n	8007c60 <cleanup_stdio+0x30>
 8007c56:	4620      	mov	r0, r4
 8007c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c5c:	f002 be12 	b.w	800a884 <_fflush_r>
 8007c60:	bd10      	pop	{r4, pc}
 8007c62:	bf00      	nop
 8007c64:	20000954 	.word	0x20000954
 8007c68:	200009bc 	.word	0x200009bc
 8007c6c:	20000a24 	.word	0x20000a24

08007c70 <global_stdio_init.part.0>:
 8007c70:	b510      	push	{r4, lr}
 8007c72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca0 <global_stdio_init.part.0+0x30>)
 8007c74:	4c0b      	ldr	r4, [pc, #44]	@ (8007ca4 <global_stdio_init.part.0+0x34>)
 8007c76:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca8 <global_stdio_init.part.0+0x38>)
 8007c78:	4620      	mov	r0, r4
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	2104      	movs	r1, #4
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f7ff ff94 	bl	8007bac <std>
 8007c84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c88:	2201      	movs	r2, #1
 8007c8a:	2109      	movs	r1, #9
 8007c8c:	f7ff ff8e 	bl	8007bac <std>
 8007c90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c94:	2202      	movs	r2, #2
 8007c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c9a:	2112      	movs	r1, #18
 8007c9c:	f7ff bf86 	b.w	8007bac <std>
 8007ca0:	20000a8c 	.word	0x20000a8c
 8007ca4:	20000954 	.word	0x20000954
 8007ca8:	08007c19 	.word	0x08007c19

08007cac <__sfp_lock_acquire>:
 8007cac:	4801      	ldr	r0, [pc, #4]	@ (8007cb4 <__sfp_lock_acquire+0x8>)
 8007cae:	f000 b9d0 	b.w	8008052 <__retarget_lock_acquire_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	20000a95 	.word	0x20000a95

08007cb8 <__sfp_lock_release>:
 8007cb8:	4801      	ldr	r0, [pc, #4]	@ (8007cc0 <__sfp_lock_release+0x8>)
 8007cba:	f000 b9cb 	b.w	8008054 <__retarget_lock_release_recursive>
 8007cbe:	bf00      	nop
 8007cc0:	20000a95 	.word	0x20000a95

08007cc4 <__sinit>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	f7ff fff0 	bl	8007cac <__sfp_lock_acquire>
 8007ccc:	6a23      	ldr	r3, [r4, #32]
 8007cce:	b11b      	cbz	r3, 8007cd8 <__sinit+0x14>
 8007cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd4:	f7ff bff0 	b.w	8007cb8 <__sfp_lock_release>
 8007cd8:	4b04      	ldr	r3, [pc, #16]	@ (8007cec <__sinit+0x28>)
 8007cda:	6223      	str	r3, [r4, #32]
 8007cdc:	4b04      	ldr	r3, [pc, #16]	@ (8007cf0 <__sinit+0x2c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1f5      	bne.n	8007cd0 <__sinit+0xc>
 8007ce4:	f7ff ffc4 	bl	8007c70 <global_stdio_init.part.0>
 8007ce8:	e7f2      	b.n	8007cd0 <__sinit+0xc>
 8007cea:	bf00      	nop
 8007cec:	08007c31 	.word	0x08007c31
 8007cf0:	20000a8c 	.word	0x20000a8c

08007cf4 <_fwalk_sglue>:
 8007cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	4688      	mov	r8, r1
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	2600      	movs	r6, #0
 8007d00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d04:	f1b9 0901 	subs.w	r9, r9, #1
 8007d08:	d505      	bpl.n	8007d16 <_fwalk_sglue+0x22>
 8007d0a:	6824      	ldr	r4, [r4, #0]
 8007d0c:	2c00      	cmp	r4, #0
 8007d0e:	d1f7      	bne.n	8007d00 <_fwalk_sglue+0xc>
 8007d10:	4630      	mov	r0, r6
 8007d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d16:	89ab      	ldrh	r3, [r5, #12]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d907      	bls.n	8007d2c <_fwalk_sglue+0x38>
 8007d1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d20:	3301      	adds	r3, #1
 8007d22:	d003      	beq.n	8007d2c <_fwalk_sglue+0x38>
 8007d24:	4629      	mov	r1, r5
 8007d26:	4638      	mov	r0, r7
 8007d28:	47c0      	blx	r8
 8007d2a:	4306      	orrs	r6, r0
 8007d2c:	3568      	adds	r5, #104	@ 0x68
 8007d2e:	e7e9      	b.n	8007d04 <_fwalk_sglue+0x10>

08007d30 <siprintf>:
 8007d30:	b40e      	push	{r1, r2, r3}
 8007d32:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d36:	b500      	push	{lr}
 8007d38:	b09c      	sub	sp, #112	@ 0x70
 8007d3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d3c:	9002      	str	r0, [sp, #8]
 8007d3e:	9006      	str	r0, [sp, #24]
 8007d40:	9107      	str	r1, [sp, #28]
 8007d42:	9104      	str	r1, [sp, #16]
 8007d44:	4808      	ldr	r0, [pc, #32]	@ (8007d68 <siprintf+0x38>)
 8007d46:	4909      	ldr	r1, [pc, #36]	@ (8007d6c <siprintf+0x3c>)
 8007d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d4c:	9105      	str	r1, [sp, #20]
 8007d4e:	6800      	ldr	r0, [r0, #0]
 8007d50:	a902      	add	r1, sp, #8
 8007d52:	9301      	str	r3, [sp, #4]
 8007d54:	f002 fc1a 	bl	800a58c <_svfiprintf_r>
 8007d58:	2200      	movs	r2, #0
 8007d5a:	9b02      	ldr	r3, [sp, #8]
 8007d5c:	701a      	strb	r2, [r3, #0]
 8007d5e:	b01c      	add	sp, #112	@ 0x70
 8007d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d64:	b003      	add	sp, #12
 8007d66:	4770      	bx	lr
 8007d68:	20000040 	.word	0x20000040
 8007d6c:	ffff0208 	.word	0xffff0208

08007d70 <__sread>:
 8007d70:	b510      	push	{r4, lr}
 8007d72:	460c      	mov	r4, r1
 8007d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d78:	f000 f91c 	bl	8007fb4 <_read_r>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	bfab      	itete	ge
 8007d80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d82:	89a3      	ldrhlt	r3, [r4, #12]
 8007d84:	181b      	addge	r3, r3, r0
 8007d86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d8a:	bfac      	ite	ge
 8007d8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d8e:	81a3      	strhlt	r3, [r4, #12]
 8007d90:	bd10      	pop	{r4, pc}

08007d92 <__swrite>:
 8007d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d96:	461f      	mov	r7, r3
 8007d98:	898b      	ldrh	r3, [r1, #12]
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	05db      	lsls	r3, r3, #23
 8007d9e:	460c      	mov	r4, r1
 8007da0:	4616      	mov	r6, r2
 8007da2:	d505      	bpl.n	8007db0 <__swrite+0x1e>
 8007da4:	2302      	movs	r3, #2
 8007da6:	2200      	movs	r2, #0
 8007da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dac:	f000 f8f0 	bl	8007f90 <_lseek_r>
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	4632      	mov	r2, r6
 8007db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007db8:	81a3      	strh	r3, [r4, #12]
 8007dba:	4628      	mov	r0, r5
 8007dbc:	463b      	mov	r3, r7
 8007dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc6:	f000 b907 	b.w	8007fd8 <_write_r>

08007dca <__sseek>:
 8007dca:	b510      	push	{r4, lr}
 8007dcc:	460c      	mov	r4, r1
 8007dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd2:	f000 f8dd 	bl	8007f90 <_lseek_r>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	bf15      	itete	ne
 8007ddc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007de2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007de6:	81a3      	strheq	r3, [r4, #12]
 8007de8:	bf18      	it	ne
 8007dea:	81a3      	strhne	r3, [r4, #12]
 8007dec:	bd10      	pop	{r4, pc}

08007dee <__sclose>:
 8007dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df2:	f000 b8bd 	b.w	8007f70 <_close_r>

08007df6 <memmove>:
 8007df6:	4288      	cmp	r0, r1
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	eb01 0402 	add.w	r4, r1, r2
 8007dfe:	d902      	bls.n	8007e06 <memmove+0x10>
 8007e00:	4284      	cmp	r4, r0
 8007e02:	4623      	mov	r3, r4
 8007e04:	d807      	bhi.n	8007e16 <memmove+0x20>
 8007e06:	1e43      	subs	r3, r0, #1
 8007e08:	42a1      	cmp	r1, r4
 8007e0a:	d008      	beq.n	8007e1e <memmove+0x28>
 8007e0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e14:	e7f8      	b.n	8007e08 <memmove+0x12>
 8007e16:	4601      	mov	r1, r0
 8007e18:	4402      	add	r2, r0
 8007e1a:	428a      	cmp	r2, r1
 8007e1c:	d100      	bne.n	8007e20 <memmove+0x2a>
 8007e1e:	bd10      	pop	{r4, pc}
 8007e20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e28:	e7f7      	b.n	8007e1a <memmove+0x24>

08007e2a <memset>:
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4402      	add	r2, r0
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d100      	bne.n	8007e34 <memset+0xa>
 8007e32:	4770      	bx	lr
 8007e34:	f803 1b01 	strb.w	r1, [r3], #1
 8007e38:	e7f9      	b.n	8007e2e <memset+0x4>

08007e3a <strcspn>:
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	461e      	mov	r6, r3
 8007e40:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007e44:	b144      	cbz	r4, 8007e58 <strcspn+0x1e>
 8007e46:	1e4a      	subs	r2, r1, #1
 8007e48:	e001      	b.n	8007e4e <strcspn+0x14>
 8007e4a:	42a5      	cmp	r5, r4
 8007e4c:	d004      	beq.n	8007e58 <strcspn+0x1e>
 8007e4e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	d1f9      	bne.n	8007e4a <strcspn+0x10>
 8007e56:	e7f2      	b.n	8007e3e <strcspn+0x4>
 8007e58:	1a30      	subs	r0, r6, r0
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}

08007e5c <strncpy>:
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	b510      	push	{r4, lr}
 8007e60:	3901      	subs	r1, #1
 8007e62:	b132      	cbz	r2, 8007e72 <strncpy+0x16>
 8007e64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e68:	3a01      	subs	r2, #1
 8007e6a:	f803 4b01 	strb.w	r4, [r3], #1
 8007e6e:	2c00      	cmp	r4, #0
 8007e70:	d1f7      	bne.n	8007e62 <strncpy+0x6>
 8007e72:	2100      	movs	r1, #0
 8007e74:	441a      	add	r2, r3
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d100      	bne.n	8007e7c <strncpy+0x20>
 8007e7a:	bd10      	pop	{r4, pc}
 8007e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8007e80:	e7f9      	b.n	8007e76 <strncpy+0x1a>
	...

08007e84 <strtok>:
 8007e84:	4b16      	ldr	r3, [pc, #88]	@ (8007ee0 <strtok+0x5c>)
 8007e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8a:	681f      	ldr	r7, [r3, #0]
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007e90:	460e      	mov	r6, r1
 8007e92:	b9ec      	cbnz	r4, 8007ed0 <strtok+0x4c>
 8007e94:	2050      	movs	r0, #80	@ 0x50
 8007e96:	f000 ffbf 	bl	8008e18 <malloc>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	6478      	str	r0, [r7, #68]	@ 0x44
 8007e9e:	b920      	cbnz	r0, 8007eaa <strtok+0x26>
 8007ea0:	215b      	movs	r1, #91	@ 0x5b
 8007ea2:	4b10      	ldr	r3, [pc, #64]	@ (8007ee4 <strtok+0x60>)
 8007ea4:	4810      	ldr	r0, [pc, #64]	@ (8007ee8 <strtok+0x64>)
 8007ea6:	f000 f8ff 	bl	80080a8 <__assert_func>
 8007eaa:	e9c0 4400 	strd	r4, r4, [r0]
 8007eae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007eb2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007eb6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007eba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007ebe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007ec2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007ec6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007eca:	6184      	str	r4, [r0, #24]
 8007ecc:	7704      	strb	r4, [r0, #28]
 8007ece:	6244      	str	r4, [r0, #36]	@ 0x24
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007edc:	f000 b806 	b.w	8007eec <__strtok_r>
 8007ee0:	20000040 	.word	0x20000040
 8007ee4:	0800e71c 	.word	0x0800e71c
 8007ee8:	0800e733 	.word	0x0800e733

08007eec <__strtok_r>:
 8007eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eee:	4604      	mov	r4, r0
 8007ef0:	b908      	cbnz	r0, 8007ef6 <__strtok_r+0xa>
 8007ef2:	6814      	ldr	r4, [r2, #0]
 8007ef4:	b144      	cbz	r4, 8007f08 <__strtok_r+0x1c>
 8007ef6:	460f      	mov	r7, r1
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007efe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007f02:	b91e      	cbnz	r6, 8007f0c <__strtok_r+0x20>
 8007f04:	b965      	cbnz	r5, 8007f20 <__strtok_r+0x34>
 8007f06:	6015      	str	r5, [r2, #0]
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e005      	b.n	8007f18 <__strtok_r+0x2c>
 8007f0c:	42b5      	cmp	r5, r6
 8007f0e:	d1f6      	bne.n	8007efe <__strtok_r+0x12>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1f0      	bne.n	8007ef6 <__strtok_r+0xa>
 8007f14:	6014      	str	r4, [r2, #0]
 8007f16:	7003      	strb	r3, [r0, #0]
 8007f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f1a:	461c      	mov	r4, r3
 8007f1c:	e00c      	b.n	8007f38 <__strtok_r+0x4c>
 8007f1e:	b915      	cbnz	r5, 8007f26 <__strtok_r+0x3a>
 8007f20:	460e      	mov	r6, r1
 8007f22:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f26:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007f2a:	42ab      	cmp	r3, r5
 8007f2c:	d1f7      	bne.n	8007f1e <__strtok_r+0x32>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0f3      	beq.n	8007f1a <__strtok_r+0x2e>
 8007f32:	2300      	movs	r3, #0
 8007f34:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007f38:	6014      	str	r4, [r2, #0]
 8007f3a:	e7ed      	b.n	8007f18 <__strtok_r+0x2c>

08007f3c <strstr>:
 8007f3c:	780a      	ldrb	r2, [r1, #0]
 8007f3e:	b570      	push	{r4, r5, r6, lr}
 8007f40:	b96a      	cbnz	r2, 8007f5e <strstr+0x22>
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d109      	bne.n	8007f5c <strstr+0x20>
 8007f48:	460c      	mov	r4, r1
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0f6      	beq.n	8007f42 <strstr+0x6>
 8007f54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007f58:	429e      	cmp	r6, r3
 8007f5a:	d0f7      	beq.n	8007f4c <strstr+0x10>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	7803      	ldrb	r3, [r0, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1ef      	bne.n	8007f44 <strstr+0x8>
 8007f64:	4618      	mov	r0, r3
 8007f66:	e7ec      	b.n	8007f42 <strstr+0x6>

08007f68 <_localeconv_r>:
 8007f68:	4800      	ldr	r0, [pc, #0]	@ (8007f6c <_localeconv_r+0x4>)
 8007f6a:	4770      	bx	lr
 8007f6c:	20000180 	.word	0x20000180

08007f70 <_close_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	2300      	movs	r3, #0
 8007f74:	4d05      	ldr	r5, [pc, #20]	@ (8007f8c <_close_r+0x1c>)
 8007f76:	4604      	mov	r4, r0
 8007f78:	4608      	mov	r0, r1
 8007f7a:	602b      	str	r3, [r5, #0]
 8007f7c:	f7fa fcb5 	bl	80028ea <_close>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	d102      	bne.n	8007f8a <_close_r+0x1a>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	b103      	cbz	r3, 8007f8a <_close_r+0x1a>
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	20000a90 	.word	0x20000a90

08007f90 <_lseek_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4d05      	ldr	r5, [pc, #20]	@ (8007fb0 <_lseek_r+0x20>)
 8007f9c:	602a      	str	r2, [r5, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f7fa fcc7 	bl	8002932 <_lseek>
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	d102      	bne.n	8007fae <_lseek_r+0x1e>
 8007fa8:	682b      	ldr	r3, [r5, #0]
 8007faa:	b103      	cbz	r3, 8007fae <_lseek_r+0x1e>
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	bd38      	pop	{r3, r4, r5, pc}
 8007fb0:	20000a90 	.word	0x20000a90

08007fb4 <_read_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	4611      	mov	r1, r2
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	4d05      	ldr	r5, [pc, #20]	@ (8007fd4 <_read_r+0x20>)
 8007fc0:	602a      	str	r2, [r5, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f7fa fc58 	bl	8002878 <_read>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_read_r+0x1e>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_read_r+0x1e>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	20000a90 	.word	0x20000a90

08007fd8 <_write_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4604      	mov	r4, r0
 8007fdc:	4608      	mov	r0, r1
 8007fde:	4611      	mov	r1, r2
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	4d05      	ldr	r5, [pc, #20]	@ (8007ff8 <_write_r+0x20>)
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7fa fc63 	bl	80028b2 <_write>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_write_r+0x1e>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_write_r+0x1e>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	20000a90 	.word	0x20000a90

08007ffc <__errno>:
 8007ffc:	4b01      	ldr	r3, [pc, #4]	@ (8008004 <__errno+0x8>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20000040 	.word	0x20000040

08008008 <__libc_init_array>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	2600      	movs	r6, #0
 800800c:	4d0c      	ldr	r5, [pc, #48]	@ (8008040 <__libc_init_array+0x38>)
 800800e:	4c0d      	ldr	r4, [pc, #52]	@ (8008044 <__libc_init_array+0x3c>)
 8008010:	1b64      	subs	r4, r4, r5
 8008012:	10a4      	asrs	r4, r4, #2
 8008014:	42a6      	cmp	r6, r4
 8008016:	d109      	bne.n	800802c <__libc_init_array+0x24>
 8008018:	f003 fadc 	bl	800b5d4 <_init>
 800801c:	2600      	movs	r6, #0
 800801e:	4d0a      	ldr	r5, [pc, #40]	@ (8008048 <__libc_init_array+0x40>)
 8008020:	4c0a      	ldr	r4, [pc, #40]	@ (800804c <__libc_init_array+0x44>)
 8008022:	1b64      	subs	r4, r4, r5
 8008024:	10a4      	asrs	r4, r4, #2
 8008026:	42a6      	cmp	r6, r4
 8008028:	d105      	bne.n	8008036 <__libc_init_array+0x2e>
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008030:	4798      	blx	r3
 8008032:	3601      	adds	r6, #1
 8008034:	e7ee      	b.n	8008014 <__libc_init_array+0xc>
 8008036:	f855 3b04 	ldr.w	r3, [r5], #4
 800803a:	4798      	blx	r3
 800803c:	3601      	adds	r6, #1
 800803e:	e7f2      	b.n	8008026 <__libc_init_array+0x1e>
 8008040:	0800ea74 	.word	0x0800ea74
 8008044:	0800ea74 	.word	0x0800ea74
 8008048:	0800ea74 	.word	0x0800ea74
 800804c:	0800ea78 	.word	0x0800ea78

08008050 <__retarget_lock_init_recursive>:
 8008050:	4770      	bx	lr

08008052 <__retarget_lock_acquire_recursive>:
 8008052:	4770      	bx	lr

08008054 <__retarget_lock_release_recursive>:
 8008054:	4770      	bx	lr

08008056 <strcpy>:
 8008056:	4603      	mov	r3, r0
 8008058:	f811 2b01 	ldrb.w	r2, [r1], #1
 800805c:	f803 2b01 	strb.w	r2, [r3], #1
 8008060:	2a00      	cmp	r2, #0
 8008062:	d1f9      	bne.n	8008058 <strcpy+0x2>
 8008064:	4770      	bx	lr

08008066 <memchr>:
 8008066:	4603      	mov	r3, r0
 8008068:	b510      	push	{r4, lr}
 800806a:	b2c9      	uxtb	r1, r1
 800806c:	4402      	add	r2, r0
 800806e:	4293      	cmp	r3, r2
 8008070:	4618      	mov	r0, r3
 8008072:	d101      	bne.n	8008078 <memchr+0x12>
 8008074:	2000      	movs	r0, #0
 8008076:	e003      	b.n	8008080 <memchr+0x1a>
 8008078:	7804      	ldrb	r4, [r0, #0]
 800807a:	3301      	adds	r3, #1
 800807c:	428c      	cmp	r4, r1
 800807e:	d1f6      	bne.n	800806e <memchr+0x8>
 8008080:	bd10      	pop	{r4, pc}

08008082 <memcpy>:
 8008082:	440a      	add	r2, r1
 8008084:	4291      	cmp	r1, r2
 8008086:	f100 33ff 	add.w	r3, r0, #4294967295
 800808a:	d100      	bne.n	800808e <memcpy+0xc>
 800808c:	4770      	bx	lr
 800808e:	b510      	push	{r4, lr}
 8008090:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008094:	4291      	cmp	r1, r2
 8008096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800809a:	d1f9      	bne.n	8008090 <memcpy+0xe>
 800809c:	bd10      	pop	{r4, pc}
	...

080080a0 <nanf>:
 80080a0:	4800      	ldr	r0, [pc, #0]	@ (80080a4 <nanf+0x4>)
 80080a2:	4770      	bx	lr
 80080a4:	7fc00000 	.word	0x7fc00000

080080a8 <__assert_func>:
 80080a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080aa:	4614      	mov	r4, r2
 80080ac:	461a      	mov	r2, r3
 80080ae:	4b09      	ldr	r3, [pc, #36]	@ (80080d4 <__assert_func+0x2c>)
 80080b0:	4605      	mov	r5, r0
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68d8      	ldr	r0, [r3, #12]
 80080b6:	b954      	cbnz	r4, 80080ce <__assert_func+0x26>
 80080b8:	4b07      	ldr	r3, [pc, #28]	@ (80080d8 <__assert_func+0x30>)
 80080ba:	461c      	mov	r4, r3
 80080bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080c0:	9100      	str	r1, [sp, #0]
 80080c2:	462b      	mov	r3, r5
 80080c4:	4905      	ldr	r1, [pc, #20]	@ (80080dc <__assert_func+0x34>)
 80080c6:	f002 fc05 	bl	800a8d4 <fiprintf>
 80080ca:	f002 fc3d 	bl	800a948 <abort>
 80080ce:	4b04      	ldr	r3, [pc, #16]	@ (80080e0 <__assert_func+0x38>)
 80080d0:	e7f4      	b.n	80080bc <__assert_func+0x14>
 80080d2:	bf00      	nop
 80080d4:	20000040 	.word	0x20000040
 80080d8:	0800e7c8 	.word	0x0800e7c8
 80080dc:	0800e79a 	.word	0x0800e79a
 80080e0:	0800e78d 	.word	0x0800e78d

080080e4 <quorem>:
 80080e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	6903      	ldr	r3, [r0, #16]
 80080ea:	690c      	ldr	r4, [r1, #16]
 80080ec:	4607      	mov	r7, r0
 80080ee:	42a3      	cmp	r3, r4
 80080f0:	db7e      	blt.n	80081f0 <quorem+0x10c>
 80080f2:	3c01      	subs	r4, #1
 80080f4:	00a3      	lsls	r3, r4, #2
 80080f6:	f100 0514 	add.w	r5, r0, #20
 80080fa:	f101 0814 	add.w	r8, r1, #20
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800810a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800810e:	3301      	adds	r3, #1
 8008110:	429a      	cmp	r2, r3
 8008112:	fbb2 f6f3 	udiv	r6, r2, r3
 8008116:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800811a:	d32e      	bcc.n	800817a <quorem+0x96>
 800811c:	f04f 0a00 	mov.w	sl, #0
 8008120:	46c4      	mov	ip, r8
 8008122:	46ae      	mov	lr, r5
 8008124:	46d3      	mov	fp, sl
 8008126:	f85c 3b04 	ldr.w	r3, [ip], #4
 800812a:	b298      	uxth	r0, r3
 800812c:	fb06 a000 	mla	r0, r6, r0, sl
 8008130:	0c1b      	lsrs	r3, r3, #16
 8008132:	0c02      	lsrs	r2, r0, #16
 8008134:	fb06 2303 	mla	r3, r6, r3, r2
 8008138:	f8de 2000 	ldr.w	r2, [lr]
 800813c:	b280      	uxth	r0, r0
 800813e:	b292      	uxth	r2, r2
 8008140:	1a12      	subs	r2, r2, r0
 8008142:	445a      	add	r2, fp
 8008144:	f8de 0000 	ldr.w	r0, [lr]
 8008148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800814c:	b29b      	uxth	r3, r3
 800814e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008152:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008156:	b292      	uxth	r2, r2
 8008158:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800815c:	45e1      	cmp	r9, ip
 800815e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008162:	f84e 2b04 	str.w	r2, [lr], #4
 8008166:	d2de      	bcs.n	8008126 <quorem+0x42>
 8008168:	9b00      	ldr	r3, [sp, #0]
 800816a:	58eb      	ldr	r3, [r5, r3]
 800816c:	b92b      	cbnz	r3, 800817a <quorem+0x96>
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	3b04      	subs	r3, #4
 8008172:	429d      	cmp	r5, r3
 8008174:	461a      	mov	r2, r3
 8008176:	d32f      	bcc.n	80081d8 <quorem+0xf4>
 8008178:	613c      	str	r4, [r7, #16]
 800817a:	4638      	mov	r0, r7
 800817c:	f001 f9c4 	bl	8009508 <__mcmp>
 8008180:	2800      	cmp	r0, #0
 8008182:	db25      	blt.n	80081d0 <quorem+0xec>
 8008184:	4629      	mov	r1, r5
 8008186:	2000      	movs	r0, #0
 8008188:	f858 2b04 	ldr.w	r2, [r8], #4
 800818c:	f8d1 c000 	ldr.w	ip, [r1]
 8008190:	fa1f fe82 	uxth.w	lr, r2
 8008194:	fa1f f38c 	uxth.w	r3, ip
 8008198:	eba3 030e 	sub.w	r3, r3, lr
 800819c:	4403      	add	r3, r0
 800819e:	0c12      	lsrs	r2, r2, #16
 80081a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ae:	45c1      	cmp	r9, r8
 80081b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081b4:	f841 3b04 	str.w	r3, [r1], #4
 80081b8:	d2e6      	bcs.n	8008188 <quorem+0xa4>
 80081ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081c2:	b922      	cbnz	r2, 80081ce <quorem+0xea>
 80081c4:	3b04      	subs	r3, #4
 80081c6:	429d      	cmp	r5, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	d30b      	bcc.n	80081e4 <quorem+0x100>
 80081cc:	613c      	str	r4, [r7, #16]
 80081ce:	3601      	adds	r6, #1
 80081d0:	4630      	mov	r0, r6
 80081d2:	b003      	add	sp, #12
 80081d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	3b04      	subs	r3, #4
 80081dc:	2a00      	cmp	r2, #0
 80081de:	d1cb      	bne.n	8008178 <quorem+0x94>
 80081e0:	3c01      	subs	r4, #1
 80081e2:	e7c6      	b.n	8008172 <quorem+0x8e>
 80081e4:	6812      	ldr	r2, [r2, #0]
 80081e6:	3b04      	subs	r3, #4
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	d1ef      	bne.n	80081cc <quorem+0xe8>
 80081ec:	3c01      	subs	r4, #1
 80081ee:	e7ea      	b.n	80081c6 <quorem+0xe2>
 80081f0:	2000      	movs	r0, #0
 80081f2:	e7ee      	b.n	80081d2 <quorem+0xee>
 80081f4:	0000      	movs	r0, r0
	...

080081f8 <_dtoa_r>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	4614      	mov	r4, r2
 80081fe:	461d      	mov	r5, r3
 8008200:	69c7      	ldr	r7, [r0, #28]
 8008202:	b097      	sub	sp, #92	@ 0x5c
 8008204:	4683      	mov	fp, r0
 8008206:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800820a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800820c:	b97f      	cbnz	r7, 800822e <_dtoa_r+0x36>
 800820e:	2010      	movs	r0, #16
 8008210:	f000 fe02 	bl	8008e18 <malloc>
 8008214:	4602      	mov	r2, r0
 8008216:	f8cb 001c 	str.w	r0, [fp, #28]
 800821a:	b920      	cbnz	r0, 8008226 <_dtoa_r+0x2e>
 800821c:	21ef      	movs	r1, #239	@ 0xef
 800821e:	4ba8      	ldr	r3, [pc, #672]	@ (80084c0 <_dtoa_r+0x2c8>)
 8008220:	48a8      	ldr	r0, [pc, #672]	@ (80084c4 <_dtoa_r+0x2cc>)
 8008222:	f7ff ff41 	bl	80080a8 <__assert_func>
 8008226:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800822a:	6007      	str	r7, [r0, #0]
 800822c:	60c7      	str	r7, [r0, #12]
 800822e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008232:	6819      	ldr	r1, [r3, #0]
 8008234:	b159      	cbz	r1, 800824e <_dtoa_r+0x56>
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	2301      	movs	r3, #1
 800823a:	4093      	lsls	r3, r2
 800823c:	604a      	str	r2, [r1, #4]
 800823e:	608b      	str	r3, [r1, #8]
 8008240:	4658      	mov	r0, fp
 8008242:	f000 fedf 	bl	8009004 <_Bfree>
 8008246:	2200      	movs	r2, #0
 8008248:	f8db 301c 	ldr.w	r3, [fp, #28]
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	1e2b      	subs	r3, r5, #0
 8008250:	bfaf      	iteee	ge
 8008252:	2300      	movge	r3, #0
 8008254:	2201      	movlt	r2, #1
 8008256:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800825a:	9303      	strlt	r3, [sp, #12]
 800825c:	bfa8      	it	ge
 800825e:	6033      	strge	r3, [r6, #0]
 8008260:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008264:	4b98      	ldr	r3, [pc, #608]	@ (80084c8 <_dtoa_r+0x2d0>)
 8008266:	bfb8      	it	lt
 8008268:	6032      	strlt	r2, [r6, #0]
 800826a:	ea33 0308 	bics.w	r3, r3, r8
 800826e:	d112      	bne.n	8008296 <_dtoa_r+0x9e>
 8008270:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008274:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800827c:	4323      	orrs	r3, r4
 800827e:	f000 8550 	beq.w	8008d22 <_dtoa_r+0xb2a>
 8008282:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008284:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80084cc <_dtoa_r+0x2d4>
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 8552 	beq.w	8008d32 <_dtoa_r+0xb3a>
 800828e:	f10a 0303 	add.w	r3, sl, #3
 8008292:	f000 bd4c 	b.w	8008d2e <_dtoa_r+0xb36>
 8008296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800829a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800829e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082a2:	2200      	movs	r2, #0
 80082a4:	2300      	movs	r3, #0
 80082a6:	f7f8 fc33 	bl	8000b10 <__aeabi_dcmpeq>
 80082aa:	4607      	mov	r7, r0
 80082ac:	b158      	cbz	r0, 80082c6 <_dtoa_r+0xce>
 80082ae:	2301      	movs	r3, #1
 80082b0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082b6:	b113      	cbz	r3, 80082be <_dtoa_r+0xc6>
 80082b8:	4b85      	ldr	r3, [pc, #532]	@ (80084d0 <_dtoa_r+0x2d8>)
 80082ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80084d4 <_dtoa_r+0x2dc>
 80082c2:	f000 bd36 	b.w	8008d32 <_dtoa_r+0xb3a>
 80082c6:	ab14      	add	r3, sp, #80	@ 0x50
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	ab15      	add	r3, sp, #84	@ 0x54
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	4658      	mov	r0, fp
 80082d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80082d4:	f001 fa30 	bl	8009738 <__d2b>
 80082d8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80082dc:	4681      	mov	r9, r0
 80082de:	2e00      	cmp	r6, #0
 80082e0:	d077      	beq.n	80083d2 <_dtoa_r+0x1da>
 80082e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082e8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80082ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082f0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082f4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082f8:	9712      	str	r7, [sp, #72]	@ 0x48
 80082fa:	4619      	mov	r1, r3
 80082fc:	2200      	movs	r2, #0
 80082fe:	4b76      	ldr	r3, [pc, #472]	@ (80084d8 <_dtoa_r+0x2e0>)
 8008300:	f7f7 ffe6 	bl	80002d0 <__aeabi_dsub>
 8008304:	a368      	add	r3, pc, #416	@ (adr r3, 80084a8 <_dtoa_r+0x2b0>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f8 f999 	bl	8000640 <__aeabi_dmul>
 800830e:	a368      	add	r3, pc, #416	@ (adr r3, 80084b0 <_dtoa_r+0x2b8>)
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	f7f7 ffde 	bl	80002d4 <__adddf3>
 8008318:	4604      	mov	r4, r0
 800831a:	4630      	mov	r0, r6
 800831c:	460d      	mov	r5, r1
 800831e:	f7f8 f925 	bl	800056c <__aeabi_i2d>
 8008322:	a365      	add	r3, pc, #404	@ (adr r3, 80084b8 <_dtoa_r+0x2c0>)
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f8 f98a 	bl	8000640 <__aeabi_dmul>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4620      	mov	r0, r4
 8008332:	4629      	mov	r1, r5
 8008334:	f7f7 ffce 	bl	80002d4 <__adddf3>
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	f7f8 fc30 	bl	8000ba0 <__aeabi_d2iz>
 8008340:	2200      	movs	r2, #0
 8008342:	4607      	mov	r7, r0
 8008344:	2300      	movs	r3, #0
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	f7f8 fbeb 	bl	8000b24 <__aeabi_dcmplt>
 800834e:	b140      	cbz	r0, 8008362 <_dtoa_r+0x16a>
 8008350:	4638      	mov	r0, r7
 8008352:	f7f8 f90b 	bl	800056c <__aeabi_i2d>
 8008356:	4622      	mov	r2, r4
 8008358:	462b      	mov	r3, r5
 800835a:	f7f8 fbd9 	bl	8000b10 <__aeabi_dcmpeq>
 800835e:	b900      	cbnz	r0, 8008362 <_dtoa_r+0x16a>
 8008360:	3f01      	subs	r7, #1
 8008362:	2f16      	cmp	r7, #22
 8008364:	d853      	bhi.n	800840e <_dtoa_r+0x216>
 8008366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800836a:	4b5c      	ldr	r3, [pc, #368]	@ (80084dc <_dtoa_r+0x2e4>)
 800836c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	f7f8 fbd6 	bl	8000b24 <__aeabi_dcmplt>
 8008378:	2800      	cmp	r0, #0
 800837a:	d04a      	beq.n	8008412 <_dtoa_r+0x21a>
 800837c:	2300      	movs	r3, #0
 800837e:	3f01      	subs	r7, #1
 8008380:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008382:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008384:	1b9b      	subs	r3, r3, r6
 8008386:	1e5a      	subs	r2, r3, #1
 8008388:	bf46      	itte	mi
 800838a:	f1c3 0801 	rsbmi	r8, r3, #1
 800838e:	2300      	movmi	r3, #0
 8008390:	f04f 0800 	movpl.w	r8, #0
 8008394:	9209      	str	r2, [sp, #36]	@ 0x24
 8008396:	bf48      	it	mi
 8008398:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800839a:	2f00      	cmp	r7, #0
 800839c:	db3b      	blt.n	8008416 <_dtoa_r+0x21e>
 800839e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a0:	970e      	str	r7, [sp, #56]	@ 0x38
 80083a2:	443b      	add	r3, r7
 80083a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083a6:	2300      	movs	r3, #0
 80083a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80083aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083ac:	2b09      	cmp	r3, #9
 80083ae:	d866      	bhi.n	800847e <_dtoa_r+0x286>
 80083b0:	2b05      	cmp	r3, #5
 80083b2:	bfc4      	itt	gt
 80083b4:	3b04      	subgt	r3, #4
 80083b6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80083b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083ba:	bfc8      	it	gt
 80083bc:	2400      	movgt	r4, #0
 80083be:	f1a3 0302 	sub.w	r3, r3, #2
 80083c2:	bfd8      	it	le
 80083c4:	2401      	movle	r4, #1
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d864      	bhi.n	8008494 <_dtoa_r+0x29c>
 80083ca:	e8df f003 	tbb	[pc, r3]
 80083ce:	382b      	.short	0x382b
 80083d0:	5636      	.short	0x5636
 80083d2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80083d6:	441e      	add	r6, r3
 80083d8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083dc:	2b20      	cmp	r3, #32
 80083de:	bfc1      	itttt	gt
 80083e0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80083e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80083e8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80083ec:	fa24 f303 	lsrgt.w	r3, r4, r3
 80083f0:	bfd6      	itet	le
 80083f2:	f1c3 0320 	rsble	r3, r3, #32
 80083f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80083fa:	fa04 f003 	lslle.w	r0, r4, r3
 80083fe:	f7f8 f8a5 	bl	800054c <__aeabi_ui2d>
 8008402:	2201      	movs	r2, #1
 8008404:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008408:	3e01      	subs	r6, #1
 800840a:	9212      	str	r2, [sp, #72]	@ 0x48
 800840c:	e775      	b.n	80082fa <_dtoa_r+0x102>
 800840e:	2301      	movs	r3, #1
 8008410:	e7b6      	b.n	8008380 <_dtoa_r+0x188>
 8008412:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008414:	e7b5      	b.n	8008382 <_dtoa_r+0x18a>
 8008416:	427b      	negs	r3, r7
 8008418:	930a      	str	r3, [sp, #40]	@ 0x28
 800841a:	2300      	movs	r3, #0
 800841c:	eba8 0807 	sub.w	r8, r8, r7
 8008420:	930e      	str	r3, [sp, #56]	@ 0x38
 8008422:	e7c2      	b.n	80083aa <_dtoa_r+0x1b2>
 8008424:	2300      	movs	r3, #0
 8008426:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008428:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800842a:	2b00      	cmp	r3, #0
 800842c:	dc35      	bgt.n	800849a <_dtoa_r+0x2a2>
 800842e:	2301      	movs	r3, #1
 8008430:	461a      	mov	r2, r3
 8008432:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008436:	9221      	str	r2, [sp, #132]	@ 0x84
 8008438:	e00b      	b.n	8008452 <_dtoa_r+0x25a>
 800843a:	2301      	movs	r3, #1
 800843c:	e7f3      	b.n	8008426 <_dtoa_r+0x22e>
 800843e:	2300      	movs	r3, #0
 8008440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008442:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008444:	18fb      	adds	r3, r7, r3
 8008446:	9308      	str	r3, [sp, #32]
 8008448:	3301      	adds	r3, #1
 800844a:	2b01      	cmp	r3, #1
 800844c:	9307      	str	r3, [sp, #28]
 800844e:	bfb8      	it	lt
 8008450:	2301      	movlt	r3, #1
 8008452:	2100      	movs	r1, #0
 8008454:	2204      	movs	r2, #4
 8008456:	f8db 001c 	ldr.w	r0, [fp, #28]
 800845a:	f102 0514 	add.w	r5, r2, #20
 800845e:	429d      	cmp	r5, r3
 8008460:	d91f      	bls.n	80084a2 <_dtoa_r+0x2aa>
 8008462:	6041      	str	r1, [r0, #4]
 8008464:	4658      	mov	r0, fp
 8008466:	f000 fd8d 	bl	8008f84 <_Balloc>
 800846a:	4682      	mov	sl, r0
 800846c:	2800      	cmp	r0, #0
 800846e:	d139      	bne.n	80084e4 <_dtoa_r+0x2ec>
 8008470:	4602      	mov	r2, r0
 8008472:	f240 11af 	movw	r1, #431	@ 0x1af
 8008476:	4b1a      	ldr	r3, [pc, #104]	@ (80084e0 <_dtoa_r+0x2e8>)
 8008478:	e6d2      	b.n	8008220 <_dtoa_r+0x28>
 800847a:	2301      	movs	r3, #1
 800847c:	e7e0      	b.n	8008440 <_dtoa_r+0x248>
 800847e:	2401      	movs	r4, #1
 8008480:	2300      	movs	r3, #0
 8008482:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008484:	9320      	str	r3, [sp, #128]	@ 0x80
 8008486:	f04f 33ff 	mov.w	r3, #4294967295
 800848a:	2200      	movs	r2, #0
 800848c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008490:	2312      	movs	r3, #18
 8008492:	e7d0      	b.n	8008436 <_dtoa_r+0x23e>
 8008494:	2301      	movs	r3, #1
 8008496:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008498:	e7f5      	b.n	8008486 <_dtoa_r+0x28e>
 800849a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800849c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80084a0:	e7d7      	b.n	8008452 <_dtoa_r+0x25a>
 80084a2:	3101      	adds	r1, #1
 80084a4:	0052      	lsls	r2, r2, #1
 80084a6:	e7d8      	b.n	800845a <_dtoa_r+0x262>
 80084a8:	636f4361 	.word	0x636f4361
 80084ac:	3fd287a7 	.word	0x3fd287a7
 80084b0:	8b60c8b3 	.word	0x8b60c8b3
 80084b4:	3fc68a28 	.word	0x3fc68a28
 80084b8:	509f79fb 	.word	0x509f79fb
 80084bc:	3fd34413 	.word	0x3fd34413
 80084c0:	0800e71c 	.word	0x0800e71c
 80084c4:	0800e7d6 	.word	0x0800e7d6
 80084c8:	7ff00000 	.word	0x7ff00000
 80084cc:	0800e7d2 	.word	0x0800e7d2
 80084d0:	0800e6f4 	.word	0x0800e6f4
 80084d4:	0800e6f3 	.word	0x0800e6f3
 80084d8:	3ff80000 	.word	0x3ff80000
 80084dc:	0800e8d0 	.word	0x0800e8d0
 80084e0:	0800e82e 	.word	0x0800e82e
 80084e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80084e8:	6018      	str	r0, [r3, #0]
 80084ea:	9b07      	ldr	r3, [sp, #28]
 80084ec:	2b0e      	cmp	r3, #14
 80084ee:	f200 80a4 	bhi.w	800863a <_dtoa_r+0x442>
 80084f2:	2c00      	cmp	r4, #0
 80084f4:	f000 80a1 	beq.w	800863a <_dtoa_r+0x442>
 80084f8:	2f00      	cmp	r7, #0
 80084fa:	dd33      	ble.n	8008564 <_dtoa_r+0x36c>
 80084fc:	4b86      	ldr	r3, [pc, #536]	@ (8008718 <_dtoa_r+0x520>)
 80084fe:	f007 020f 	and.w	r2, r7, #15
 8008502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008506:	05f8      	lsls	r0, r7, #23
 8008508:	e9d3 3400 	ldrd	r3, r4, [r3]
 800850c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008510:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008514:	d516      	bpl.n	8008544 <_dtoa_r+0x34c>
 8008516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800851a:	4b80      	ldr	r3, [pc, #512]	@ (800871c <_dtoa_r+0x524>)
 800851c:	2603      	movs	r6, #3
 800851e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008522:	f7f8 f9b7 	bl	8000894 <__aeabi_ddiv>
 8008526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800852a:	f004 040f 	and.w	r4, r4, #15
 800852e:	4d7b      	ldr	r5, [pc, #492]	@ (800871c <_dtoa_r+0x524>)
 8008530:	b954      	cbnz	r4, 8008548 <_dtoa_r+0x350>
 8008532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800853a:	f7f8 f9ab 	bl	8000894 <__aeabi_ddiv>
 800853e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008542:	e028      	b.n	8008596 <_dtoa_r+0x39e>
 8008544:	2602      	movs	r6, #2
 8008546:	e7f2      	b.n	800852e <_dtoa_r+0x336>
 8008548:	07e1      	lsls	r1, r4, #31
 800854a:	d508      	bpl.n	800855e <_dtoa_r+0x366>
 800854c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008550:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008554:	f7f8 f874 	bl	8000640 <__aeabi_dmul>
 8008558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800855c:	3601      	adds	r6, #1
 800855e:	1064      	asrs	r4, r4, #1
 8008560:	3508      	adds	r5, #8
 8008562:	e7e5      	b.n	8008530 <_dtoa_r+0x338>
 8008564:	f000 80d2 	beq.w	800870c <_dtoa_r+0x514>
 8008568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800856c:	427c      	negs	r4, r7
 800856e:	4b6a      	ldr	r3, [pc, #424]	@ (8008718 <_dtoa_r+0x520>)
 8008570:	f004 020f 	and.w	r2, r4, #15
 8008574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f7f8 f860 	bl	8000640 <__aeabi_dmul>
 8008580:	2602      	movs	r6, #2
 8008582:	2300      	movs	r3, #0
 8008584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008588:	4d64      	ldr	r5, [pc, #400]	@ (800871c <_dtoa_r+0x524>)
 800858a:	1124      	asrs	r4, r4, #4
 800858c:	2c00      	cmp	r4, #0
 800858e:	f040 80b2 	bne.w	80086f6 <_dtoa_r+0x4fe>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1d3      	bne.n	800853e <_dtoa_r+0x346>
 8008596:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800859a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 80b7 	beq.w	8008710 <_dtoa_r+0x518>
 80085a2:	2200      	movs	r2, #0
 80085a4:	4620      	mov	r0, r4
 80085a6:	4629      	mov	r1, r5
 80085a8:	4b5d      	ldr	r3, [pc, #372]	@ (8008720 <_dtoa_r+0x528>)
 80085aa:	f7f8 fabb 	bl	8000b24 <__aeabi_dcmplt>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f000 80ae 	beq.w	8008710 <_dtoa_r+0x518>
 80085b4:	9b07      	ldr	r3, [sp, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 80aa 	beq.w	8008710 <_dtoa_r+0x518>
 80085bc:	9b08      	ldr	r3, [sp, #32]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd37      	ble.n	8008632 <_dtoa_r+0x43a>
 80085c2:	1e7b      	subs	r3, r7, #1
 80085c4:	4620      	mov	r0, r4
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	2200      	movs	r2, #0
 80085ca:	4629      	mov	r1, r5
 80085cc:	4b55      	ldr	r3, [pc, #340]	@ (8008724 <_dtoa_r+0x52c>)
 80085ce:	f7f8 f837 	bl	8000640 <__aeabi_dmul>
 80085d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d6:	9c08      	ldr	r4, [sp, #32]
 80085d8:	3601      	adds	r6, #1
 80085da:	4630      	mov	r0, r6
 80085dc:	f7f7 ffc6 	bl	800056c <__aeabi_i2d>
 80085e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085e4:	f7f8 f82c 	bl	8000640 <__aeabi_dmul>
 80085e8:	2200      	movs	r2, #0
 80085ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008728 <_dtoa_r+0x530>)
 80085ec:	f7f7 fe72 	bl	80002d4 <__adddf3>
 80085f0:	4605      	mov	r5, r0
 80085f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80085f6:	2c00      	cmp	r4, #0
 80085f8:	f040 809a 	bne.w	8008730 <_dtoa_r+0x538>
 80085fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008600:	2200      	movs	r2, #0
 8008602:	4b4a      	ldr	r3, [pc, #296]	@ (800872c <_dtoa_r+0x534>)
 8008604:	f7f7 fe64 	bl	80002d0 <__aeabi_dsub>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008610:	462a      	mov	r2, r5
 8008612:	4633      	mov	r3, r6
 8008614:	f7f8 faa4 	bl	8000b60 <__aeabi_dcmpgt>
 8008618:	2800      	cmp	r0, #0
 800861a:	f040 828e 	bne.w	8008b3a <_dtoa_r+0x942>
 800861e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008622:	462a      	mov	r2, r5
 8008624:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008628:	f7f8 fa7c 	bl	8000b24 <__aeabi_dcmplt>
 800862c:	2800      	cmp	r0, #0
 800862e:	f040 8127 	bne.w	8008880 <_dtoa_r+0x688>
 8008632:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008636:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800863a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800863c:	2b00      	cmp	r3, #0
 800863e:	f2c0 8163 	blt.w	8008908 <_dtoa_r+0x710>
 8008642:	2f0e      	cmp	r7, #14
 8008644:	f300 8160 	bgt.w	8008908 <_dtoa_r+0x710>
 8008648:	4b33      	ldr	r3, [pc, #204]	@ (8008718 <_dtoa_r+0x520>)
 800864a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800864e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008652:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008656:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008658:	2b00      	cmp	r3, #0
 800865a:	da03      	bge.n	8008664 <_dtoa_r+0x46c>
 800865c:	9b07      	ldr	r3, [sp, #28]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f340 8100 	ble.w	8008864 <_dtoa_r+0x66c>
 8008664:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008668:	4656      	mov	r6, sl
 800866a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f8 f90f 	bl	8000894 <__aeabi_ddiv>
 8008676:	f7f8 fa93 	bl	8000ba0 <__aeabi_d2iz>
 800867a:	4680      	mov	r8, r0
 800867c:	f7f7 ff76 	bl	800056c <__aeabi_i2d>
 8008680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008684:	f7f7 ffdc 	bl	8000640 <__aeabi_dmul>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4620      	mov	r0, r4
 800868e:	4629      	mov	r1, r5
 8008690:	f7f7 fe1e 	bl	80002d0 <__aeabi_dsub>
 8008694:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008698:	9d07      	ldr	r5, [sp, #28]
 800869a:	f806 4b01 	strb.w	r4, [r6], #1
 800869e:	eba6 040a 	sub.w	r4, r6, sl
 80086a2:	42a5      	cmp	r5, r4
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	f040 8116 	bne.w	80088d8 <_dtoa_r+0x6e0>
 80086ac:	f7f7 fe12 	bl	80002d4 <__adddf3>
 80086b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086b4:	4604      	mov	r4, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	f7f8 fa52 	bl	8000b60 <__aeabi_dcmpgt>
 80086bc:	2800      	cmp	r0, #0
 80086be:	f040 80f8 	bne.w	80088b2 <_dtoa_r+0x6ba>
 80086c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f8 fa21 	bl	8000b10 <__aeabi_dcmpeq>
 80086ce:	b118      	cbz	r0, 80086d8 <_dtoa_r+0x4e0>
 80086d0:	f018 0f01 	tst.w	r8, #1
 80086d4:	f040 80ed 	bne.w	80088b2 <_dtoa_r+0x6ba>
 80086d8:	4649      	mov	r1, r9
 80086da:	4658      	mov	r0, fp
 80086dc:	f000 fc92 	bl	8009004 <_Bfree>
 80086e0:	2300      	movs	r3, #0
 80086e2:	7033      	strb	r3, [r6, #0]
 80086e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80086e6:	3701      	adds	r7, #1
 80086e8:	601f      	str	r7, [r3, #0]
 80086ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8320 	beq.w	8008d32 <_dtoa_r+0xb3a>
 80086f2:	601e      	str	r6, [r3, #0]
 80086f4:	e31d      	b.n	8008d32 <_dtoa_r+0xb3a>
 80086f6:	07e2      	lsls	r2, r4, #31
 80086f8:	d505      	bpl.n	8008706 <_dtoa_r+0x50e>
 80086fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086fe:	f7f7 ff9f 	bl	8000640 <__aeabi_dmul>
 8008702:	2301      	movs	r3, #1
 8008704:	3601      	adds	r6, #1
 8008706:	1064      	asrs	r4, r4, #1
 8008708:	3508      	adds	r5, #8
 800870a:	e73f      	b.n	800858c <_dtoa_r+0x394>
 800870c:	2602      	movs	r6, #2
 800870e:	e742      	b.n	8008596 <_dtoa_r+0x39e>
 8008710:	9c07      	ldr	r4, [sp, #28]
 8008712:	9704      	str	r7, [sp, #16]
 8008714:	e761      	b.n	80085da <_dtoa_r+0x3e2>
 8008716:	bf00      	nop
 8008718:	0800e8d0 	.word	0x0800e8d0
 800871c:	0800e8a8 	.word	0x0800e8a8
 8008720:	3ff00000 	.word	0x3ff00000
 8008724:	40240000 	.word	0x40240000
 8008728:	401c0000 	.word	0x401c0000
 800872c:	40140000 	.word	0x40140000
 8008730:	4b70      	ldr	r3, [pc, #448]	@ (80088f4 <_dtoa_r+0x6fc>)
 8008732:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008734:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008738:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800873c:	4454      	add	r4, sl
 800873e:	2900      	cmp	r1, #0
 8008740:	d045      	beq.n	80087ce <_dtoa_r+0x5d6>
 8008742:	2000      	movs	r0, #0
 8008744:	496c      	ldr	r1, [pc, #432]	@ (80088f8 <_dtoa_r+0x700>)
 8008746:	f7f8 f8a5 	bl	8000894 <__aeabi_ddiv>
 800874a:	4633      	mov	r3, r6
 800874c:	462a      	mov	r2, r5
 800874e:	f7f7 fdbf 	bl	80002d0 <__aeabi_dsub>
 8008752:	4656      	mov	r6, sl
 8008754:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800875c:	f7f8 fa20 	bl	8000ba0 <__aeabi_d2iz>
 8008760:	4605      	mov	r5, r0
 8008762:	f7f7 ff03 	bl	800056c <__aeabi_i2d>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876e:	f7f7 fdaf 	bl	80002d0 <__aeabi_dsub>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	3530      	adds	r5, #48	@ 0x30
 8008778:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800877c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008780:	f806 5b01 	strb.w	r5, [r6], #1
 8008784:	f7f8 f9ce 	bl	8000b24 <__aeabi_dcmplt>
 8008788:	2800      	cmp	r0, #0
 800878a:	d163      	bne.n	8008854 <_dtoa_r+0x65c>
 800878c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008790:	2000      	movs	r0, #0
 8008792:	495a      	ldr	r1, [pc, #360]	@ (80088fc <_dtoa_r+0x704>)
 8008794:	f7f7 fd9c 	bl	80002d0 <__aeabi_dsub>
 8008798:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800879c:	f7f8 f9c2 	bl	8000b24 <__aeabi_dcmplt>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f040 8087 	bne.w	80088b4 <_dtoa_r+0x6bc>
 80087a6:	42a6      	cmp	r6, r4
 80087a8:	f43f af43 	beq.w	8008632 <_dtoa_r+0x43a>
 80087ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087b0:	2200      	movs	r2, #0
 80087b2:	4b53      	ldr	r3, [pc, #332]	@ (8008900 <_dtoa_r+0x708>)
 80087b4:	f7f7 ff44 	bl	8000640 <__aeabi_dmul>
 80087b8:	2200      	movs	r2, #0
 80087ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008900 <_dtoa_r+0x708>)
 80087c4:	f7f7 ff3c 	bl	8000640 <__aeabi_dmul>
 80087c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087cc:	e7c4      	b.n	8008758 <_dtoa_r+0x560>
 80087ce:	4631      	mov	r1, r6
 80087d0:	4628      	mov	r0, r5
 80087d2:	f7f7 ff35 	bl	8000640 <__aeabi_dmul>
 80087d6:	4656      	mov	r6, sl
 80087d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087dc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80087de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e2:	f7f8 f9dd 	bl	8000ba0 <__aeabi_d2iz>
 80087e6:	4605      	mov	r5, r0
 80087e8:	f7f7 fec0 	bl	800056c <__aeabi_i2d>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087f4:	f7f7 fd6c 	bl	80002d0 <__aeabi_dsub>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	3530      	adds	r5, #48	@ 0x30
 80087fe:	f806 5b01 	strb.w	r5, [r6], #1
 8008802:	42a6      	cmp	r6, r4
 8008804:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008808:	f04f 0200 	mov.w	r2, #0
 800880c:	d124      	bne.n	8008858 <_dtoa_r+0x660>
 800880e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008812:	4b39      	ldr	r3, [pc, #228]	@ (80088f8 <_dtoa_r+0x700>)
 8008814:	f7f7 fd5e 	bl	80002d4 <__adddf3>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008820:	f7f8 f99e 	bl	8000b60 <__aeabi_dcmpgt>
 8008824:	2800      	cmp	r0, #0
 8008826:	d145      	bne.n	80088b4 <_dtoa_r+0x6bc>
 8008828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800882c:	2000      	movs	r0, #0
 800882e:	4932      	ldr	r1, [pc, #200]	@ (80088f8 <_dtoa_r+0x700>)
 8008830:	f7f7 fd4e 	bl	80002d0 <__aeabi_dsub>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800883c:	f7f8 f972 	bl	8000b24 <__aeabi_dcmplt>
 8008840:	2800      	cmp	r0, #0
 8008842:	f43f aef6 	beq.w	8008632 <_dtoa_r+0x43a>
 8008846:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008848:	1e73      	subs	r3, r6, #1
 800884a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800884c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008850:	2b30      	cmp	r3, #48	@ 0x30
 8008852:	d0f8      	beq.n	8008846 <_dtoa_r+0x64e>
 8008854:	9f04      	ldr	r7, [sp, #16]
 8008856:	e73f      	b.n	80086d8 <_dtoa_r+0x4e0>
 8008858:	4b29      	ldr	r3, [pc, #164]	@ (8008900 <_dtoa_r+0x708>)
 800885a:	f7f7 fef1 	bl	8000640 <__aeabi_dmul>
 800885e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008862:	e7bc      	b.n	80087de <_dtoa_r+0x5e6>
 8008864:	d10c      	bne.n	8008880 <_dtoa_r+0x688>
 8008866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800886a:	2200      	movs	r2, #0
 800886c:	4b25      	ldr	r3, [pc, #148]	@ (8008904 <_dtoa_r+0x70c>)
 800886e:	f7f7 fee7 	bl	8000640 <__aeabi_dmul>
 8008872:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008876:	f7f8 f969 	bl	8000b4c <__aeabi_dcmpge>
 800887a:	2800      	cmp	r0, #0
 800887c:	f000 815b 	beq.w	8008b36 <_dtoa_r+0x93e>
 8008880:	2400      	movs	r4, #0
 8008882:	4625      	mov	r5, r4
 8008884:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008886:	4656      	mov	r6, sl
 8008888:	43db      	mvns	r3, r3
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	2700      	movs	r7, #0
 800888e:	4621      	mov	r1, r4
 8008890:	4658      	mov	r0, fp
 8008892:	f000 fbb7 	bl	8009004 <_Bfree>
 8008896:	2d00      	cmp	r5, #0
 8008898:	d0dc      	beq.n	8008854 <_dtoa_r+0x65c>
 800889a:	b12f      	cbz	r7, 80088a8 <_dtoa_r+0x6b0>
 800889c:	42af      	cmp	r7, r5
 800889e:	d003      	beq.n	80088a8 <_dtoa_r+0x6b0>
 80088a0:	4639      	mov	r1, r7
 80088a2:	4658      	mov	r0, fp
 80088a4:	f000 fbae 	bl	8009004 <_Bfree>
 80088a8:	4629      	mov	r1, r5
 80088aa:	4658      	mov	r0, fp
 80088ac:	f000 fbaa 	bl	8009004 <_Bfree>
 80088b0:	e7d0      	b.n	8008854 <_dtoa_r+0x65c>
 80088b2:	9704      	str	r7, [sp, #16]
 80088b4:	4633      	mov	r3, r6
 80088b6:	461e      	mov	r6, r3
 80088b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088bc:	2a39      	cmp	r2, #57	@ 0x39
 80088be:	d107      	bne.n	80088d0 <_dtoa_r+0x6d8>
 80088c0:	459a      	cmp	sl, r3
 80088c2:	d1f8      	bne.n	80088b6 <_dtoa_r+0x6be>
 80088c4:	9a04      	ldr	r2, [sp, #16]
 80088c6:	3201      	adds	r2, #1
 80088c8:	9204      	str	r2, [sp, #16]
 80088ca:	2230      	movs	r2, #48	@ 0x30
 80088cc:	f88a 2000 	strb.w	r2, [sl]
 80088d0:	781a      	ldrb	r2, [r3, #0]
 80088d2:	3201      	adds	r2, #1
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e7bd      	b.n	8008854 <_dtoa_r+0x65c>
 80088d8:	2200      	movs	r2, #0
 80088da:	4b09      	ldr	r3, [pc, #36]	@ (8008900 <_dtoa_r+0x708>)
 80088dc:	f7f7 feb0 	bl	8000640 <__aeabi_dmul>
 80088e0:	2200      	movs	r2, #0
 80088e2:	2300      	movs	r3, #0
 80088e4:	4604      	mov	r4, r0
 80088e6:	460d      	mov	r5, r1
 80088e8:	f7f8 f912 	bl	8000b10 <__aeabi_dcmpeq>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f43f aebc 	beq.w	800866a <_dtoa_r+0x472>
 80088f2:	e6f1      	b.n	80086d8 <_dtoa_r+0x4e0>
 80088f4:	0800e8d0 	.word	0x0800e8d0
 80088f8:	3fe00000 	.word	0x3fe00000
 80088fc:	3ff00000 	.word	0x3ff00000
 8008900:	40240000 	.word	0x40240000
 8008904:	40140000 	.word	0x40140000
 8008908:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800890a:	2a00      	cmp	r2, #0
 800890c:	f000 80db 	beq.w	8008ac6 <_dtoa_r+0x8ce>
 8008910:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008912:	2a01      	cmp	r2, #1
 8008914:	f300 80bf 	bgt.w	8008a96 <_dtoa_r+0x89e>
 8008918:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800891a:	2a00      	cmp	r2, #0
 800891c:	f000 80b7 	beq.w	8008a8e <_dtoa_r+0x896>
 8008920:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008924:	4646      	mov	r6, r8
 8008926:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800892a:	2101      	movs	r1, #1
 800892c:	441a      	add	r2, r3
 800892e:	4658      	mov	r0, fp
 8008930:	4498      	add	r8, r3
 8008932:	9209      	str	r2, [sp, #36]	@ 0x24
 8008934:	f000 fc64 	bl	8009200 <__i2b>
 8008938:	4605      	mov	r5, r0
 800893a:	b15e      	cbz	r6, 8008954 <_dtoa_r+0x75c>
 800893c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	dd08      	ble.n	8008954 <_dtoa_r+0x75c>
 8008942:	42b3      	cmp	r3, r6
 8008944:	bfa8      	it	ge
 8008946:	4633      	movge	r3, r6
 8008948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800894a:	eba8 0803 	sub.w	r8, r8, r3
 800894e:	1af6      	subs	r6, r6, r3
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	9309      	str	r3, [sp, #36]	@ 0x24
 8008954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008956:	b1f3      	cbz	r3, 8008996 <_dtoa_r+0x79e>
 8008958:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 80b7 	beq.w	8008ace <_dtoa_r+0x8d6>
 8008960:	b18c      	cbz	r4, 8008986 <_dtoa_r+0x78e>
 8008962:	4629      	mov	r1, r5
 8008964:	4622      	mov	r2, r4
 8008966:	4658      	mov	r0, fp
 8008968:	f000 fd08 	bl	800937c <__pow5mult>
 800896c:	464a      	mov	r2, r9
 800896e:	4601      	mov	r1, r0
 8008970:	4605      	mov	r5, r0
 8008972:	4658      	mov	r0, fp
 8008974:	f000 fc5a 	bl	800922c <__multiply>
 8008978:	4649      	mov	r1, r9
 800897a:	9004      	str	r0, [sp, #16]
 800897c:	4658      	mov	r0, fp
 800897e:	f000 fb41 	bl	8009004 <_Bfree>
 8008982:	9b04      	ldr	r3, [sp, #16]
 8008984:	4699      	mov	r9, r3
 8008986:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008988:	1b1a      	subs	r2, r3, r4
 800898a:	d004      	beq.n	8008996 <_dtoa_r+0x79e>
 800898c:	4649      	mov	r1, r9
 800898e:	4658      	mov	r0, fp
 8008990:	f000 fcf4 	bl	800937c <__pow5mult>
 8008994:	4681      	mov	r9, r0
 8008996:	2101      	movs	r1, #1
 8008998:	4658      	mov	r0, fp
 800899a:	f000 fc31 	bl	8009200 <__i2b>
 800899e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089a0:	4604      	mov	r4, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 81c9 	beq.w	8008d3a <_dtoa_r+0xb42>
 80089a8:	461a      	mov	r2, r3
 80089aa:	4601      	mov	r1, r0
 80089ac:	4658      	mov	r0, fp
 80089ae:	f000 fce5 	bl	800937c <__pow5mult>
 80089b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089b4:	4604      	mov	r4, r0
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	f300 808f 	bgt.w	8008ada <_dtoa_r+0x8e2>
 80089bc:	9b02      	ldr	r3, [sp, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f040 8087 	bne.w	8008ad2 <_dtoa_r+0x8da>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f040 8083 	bne.w	8008ad6 <_dtoa_r+0x8de>
 80089d0:	9b03      	ldr	r3, [sp, #12]
 80089d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089d6:	0d1b      	lsrs	r3, r3, #20
 80089d8:	051b      	lsls	r3, r3, #20
 80089da:	b12b      	cbz	r3, 80089e8 <_dtoa_r+0x7f0>
 80089dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089de:	f108 0801 	add.w	r8, r8, #1
 80089e2:	3301      	adds	r3, #1
 80089e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089e6:	2301      	movs	r3, #1
 80089e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80089ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 81aa 	beq.w	8008d46 <_dtoa_r+0xb4e>
 80089f2:	6923      	ldr	r3, [r4, #16]
 80089f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089f8:	6918      	ldr	r0, [r3, #16]
 80089fa:	f000 fbb5 	bl	8009168 <__hi0bits>
 80089fe:	f1c0 0020 	rsb	r0, r0, #32
 8008a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a04:	4418      	add	r0, r3
 8008a06:	f010 001f 	ands.w	r0, r0, #31
 8008a0a:	d071      	beq.n	8008af0 <_dtoa_r+0x8f8>
 8008a0c:	f1c0 0320 	rsb	r3, r0, #32
 8008a10:	2b04      	cmp	r3, #4
 8008a12:	dd65      	ble.n	8008ae0 <_dtoa_r+0x8e8>
 8008a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a16:	f1c0 001c 	rsb	r0, r0, #28
 8008a1a:	4403      	add	r3, r0
 8008a1c:	4480      	add	r8, r0
 8008a1e:	4406      	add	r6, r0
 8008a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a22:	f1b8 0f00 	cmp.w	r8, #0
 8008a26:	dd05      	ble.n	8008a34 <_dtoa_r+0x83c>
 8008a28:	4649      	mov	r1, r9
 8008a2a:	4642      	mov	r2, r8
 8008a2c:	4658      	mov	r0, fp
 8008a2e:	f000 fcff 	bl	8009430 <__lshift>
 8008a32:	4681      	mov	r9, r0
 8008a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dd05      	ble.n	8008a46 <_dtoa_r+0x84e>
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	4658      	mov	r0, fp
 8008a40:	f000 fcf6 	bl	8009430 <__lshift>
 8008a44:	4604      	mov	r4, r0
 8008a46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d053      	beq.n	8008af4 <_dtoa_r+0x8fc>
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4648      	mov	r0, r9
 8008a50:	f000 fd5a 	bl	8009508 <__mcmp>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	da4d      	bge.n	8008af4 <_dtoa_r+0x8fc>
 8008a58:	1e7b      	subs	r3, r7, #1
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	9304      	str	r3, [sp, #16]
 8008a5e:	220a      	movs	r2, #10
 8008a60:	2300      	movs	r3, #0
 8008a62:	4658      	mov	r0, fp
 8008a64:	f000 faf0 	bl	8009048 <__multadd>
 8008a68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a6a:	4681      	mov	r9, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 816c 	beq.w	8008d4a <_dtoa_r+0xb52>
 8008a72:	2300      	movs	r3, #0
 8008a74:	4629      	mov	r1, r5
 8008a76:	220a      	movs	r2, #10
 8008a78:	4658      	mov	r0, fp
 8008a7a:	f000 fae5 	bl	8009048 <__multadd>
 8008a7e:	9b08      	ldr	r3, [sp, #32]
 8008a80:	4605      	mov	r5, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dc61      	bgt.n	8008b4a <_dtoa_r+0x952>
 8008a86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	dc3b      	bgt.n	8008b04 <_dtoa_r+0x90c>
 8008a8c:	e05d      	b.n	8008b4a <_dtoa_r+0x952>
 8008a8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008a90:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a94:	e746      	b.n	8008924 <_dtoa_r+0x72c>
 8008a96:	9b07      	ldr	r3, [sp, #28]
 8008a98:	1e5c      	subs	r4, r3, #1
 8008a9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	bfbf      	itttt	lt
 8008aa0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008aa2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008aa4:	1ae3      	sublt	r3, r4, r3
 8008aa6:	18d2      	addlt	r2, r2, r3
 8008aa8:	bfa8      	it	ge
 8008aaa:	1b1c      	subge	r4, r3, r4
 8008aac:	9b07      	ldr	r3, [sp, #28]
 8008aae:	bfbe      	ittt	lt
 8008ab0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008ab2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008ab4:	2400      	movlt	r4, #0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bfb5      	itete	lt
 8008aba:	eba8 0603 	sublt.w	r6, r8, r3
 8008abe:	4646      	movge	r6, r8
 8008ac0:	2300      	movlt	r3, #0
 8008ac2:	9b07      	ldrge	r3, [sp, #28]
 8008ac4:	e730      	b.n	8008928 <_dtoa_r+0x730>
 8008ac6:	4646      	mov	r6, r8
 8008ac8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008aca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008acc:	e735      	b.n	800893a <_dtoa_r+0x742>
 8008ace:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ad0:	e75c      	b.n	800898c <_dtoa_r+0x794>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e788      	b.n	80089e8 <_dtoa_r+0x7f0>
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	e786      	b.n	80089e8 <_dtoa_r+0x7f0>
 8008ada:	2300      	movs	r3, #0
 8008adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ade:	e788      	b.n	80089f2 <_dtoa_r+0x7fa>
 8008ae0:	d09f      	beq.n	8008a22 <_dtoa_r+0x82a>
 8008ae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae4:	331c      	adds	r3, #28
 8008ae6:	441a      	add	r2, r3
 8008ae8:	4498      	add	r8, r3
 8008aea:	441e      	add	r6, r3
 8008aec:	9209      	str	r2, [sp, #36]	@ 0x24
 8008aee:	e798      	b.n	8008a22 <_dtoa_r+0x82a>
 8008af0:	4603      	mov	r3, r0
 8008af2:	e7f6      	b.n	8008ae2 <_dtoa_r+0x8ea>
 8008af4:	9b07      	ldr	r3, [sp, #28]
 8008af6:	9704      	str	r7, [sp, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dc20      	bgt.n	8008b3e <_dtoa_r+0x946>
 8008afc:	9308      	str	r3, [sp, #32]
 8008afe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	dd1e      	ble.n	8008b42 <_dtoa_r+0x94a>
 8008b04:	9b08      	ldr	r3, [sp, #32]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f47f aebc 	bne.w	8008884 <_dtoa_r+0x68c>
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	2205      	movs	r2, #5
 8008b10:	4658      	mov	r0, fp
 8008b12:	f000 fa99 	bl	8009048 <__multadd>
 8008b16:	4601      	mov	r1, r0
 8008b18:	4604      	mov	r4, r0
 8008b1a:	4648      	mov	r0, r9
 8008b1c:	f000 fcf4 	bl	8009508 <__mcmp>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f77f aeaf 	ble.w	8008884 <_dtoa_r+0x68c>
 8008b26:	2331      	movs	r3, #49	@ 0x31
 8008b28:	4656      	mov	r6, sl
 8008b2a:	f806 3b01 	strb.w	r3, [r6], #1
 8008b2e:	9b04      	ldr	r3, [sp, #16]
 8008b30:	3301      	adds	r3, #1
 8008b32:	9304      	str	r3, [sp, #16]
 8008b34:	e6aa      	b.n	800888c <_dtoa_r+0x694>
 8008b36:	9c07      	ldr	r4, [sp, #28]
 8008b38:	9704      	str	r7, [sp, #16]
 8008b3a:	4625      	mov	r5, r4
 8008b3c:	e7f3      	b.n	8008b26 <_dtoa_r+0x92e>
 8008b3e:	9b07      	ldr	r3, [sp, #28]
 8008b40:	9308      	str	r3, [sp, #32]
 8008b42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 8104 	beq.w	8008d52 <_dtoa_r+0xb5a>
 8008b4a:	2e00      	cmp	r6, #0
 8008b4c:	dd05      	ble.n	8008b5a <_dtoa_r+0x962>
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4632      	mov	r2, r6
 8008b52:	4658      	mov	r0, fp
 8008b54:	f000 fc6c 	bl	8009430 <__lshift>
 8008b58:	4605      	mov	r5, r0
 8008b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d05a      	beq.n	8008c16 <_dtoa_r+0xa1e>
 8008b60:	4658      	mov	r0, fp
 8008b62:	6869      	ldr	r1, [r5, #4]
 8008b64:	f000 fa0e 	bl	8008f84 <_Balloc>
 8008b68:	4606      	mov	r6, r0
 8008b6a:	b928      	cbnz	r0, 8008b78 <_dtoa_r+0x980>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b72:	4b83      	ldr	r3, [pc, #524]	@ (8008d80 <_dtoa_r+0xb88>)
 8008b74:	f7ff bb54 	b.w	8008220 <_dtoa_r+0x28>
 8008b78:	692a      	ldr	r2, [r5, #16]
 8008b7a:	f105 010c 	add.w	r1, r5, #12
 8008b7e:	3202      	adds	r2, #2
 8008b80:	0092      	lsls	r2, r2, #2
 8008b82:	300c      	adds	r0, #12
 8008b84:	f7ff fa7d 	bl	8008082 <memcpy>
 8008b88:	2201      	movs	r2, #1
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	f000 fc4f 	bl	8009430 <__lshift>
 8008b92:	462f      	mov	r7, r5
 8008b94:	4605      	mov	r5, r0
 8008b96:	f10a 0301 	add.w	r3, sl, #1
 8008b9a:	9307      	str	r3, [sp, #28]
 8008b9c:	9b08      	ldr	r3, [sp, #32]
 8008b9e:	4453      	add	r3, sl
 8008ba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ba2:	9b02      	ldr	r3, [sp, #8]
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008baa:	9b07      	ldr	r3, [sp, #28]
 8008bac:	4621      	mov	r1, r4
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	4648      	mov	r0, r9
 8008bb2:	9302      	str	r3, [sp, #8]
 8008bb4:	f7ff fa96 	bl	80080e4 <quorem>
 8008bb8:	4639      	mov	r1, r7
 8008bba:	9008      	str	r0, [sp, #32]
 8008bbc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bc0:	4648      	mov	r0, r9
 8008bc2:	f000 fca1 	bl	8009508 <__mcmp>
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4658      	mov	r0, fp
 8008bce:	f000 fcb7 	bl	8009540 <__mdiff>
 8008bd2:	68c2      	ldr	r2, [r0, #12]
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	bb02      	cbnz	r2, 8008c1a <_dtoa_r+0xa22>
 8008bd8:	4601      	mov	r1, r0
 8008bda:	4648      	mov	r0, r9
 8008bdc:	f000 fc94 	bl	8009508 <__mcmp>
 8008be0:	4602      	mov	r2, r0
 8008be2:	4631      	mov	r1, r6
 8008be4:	4658      	mov	r0, fp
 8008be6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008be8:	f000 fa0c 	bl	8009004 <_Bfree>
 8008bec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008bee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008bf0:	9e07      	ldr	r6, [sp, #28]
 8008bf2:	ea43 0102 	orr.w	r1, r3, r2
 8008bf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bf8:	4319      	orrs	r1, r3
 8008bfa:	d110      	bne.n	8008c1e <_dtoa_r+0xa26>
 8008bfc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c00:	d029      	beq.n	8008c56 <_dtoa_r+0xa5e>
 8008c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dd02      	ble.n	8008c0e <_dtoa_r+0xa16>
 8008c08:	9b08      	ldr	r3, [sp, #32]
 8008c0a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c0e:	9b02      	ldr	r3, [sp, #8]
 8008c10:	f883 8000 	strb.w	r8, [r3]
 8008c14:	e63b      	b.n	800888e <_dtoa_r+0x696>
 8008c16:	4628      	mov	r0, r5
 8008c18:	e7bb      	b.n	8008b92 <_dtoa_r+0x99a>
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	e7e1      	b.n	8008be2 <_dtoa_r+0x9ea>
 8008c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	db04      	blt.n	8008c2e <_dtoa_r+0xa36>
 8008c24:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008c26:	430b      	orrs	r3, r1
 8008c28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	d120      	bne.n	8008c70 <_dtoa_r+0xa78>
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	dded      	ble.n	8008c0e <_dtoa_r+0xa16>
 8008c32:	4649      	mov	r1, r9
 8008c34:	2201      	movs	r2, #1
 8008c36:	4658      	mov	r0, fp
 8008c38:	f000 fbfa 	bl	8009430 <__lshift>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4681      	mov	r9, r0
 8008c40:	f000 fc62 	bl	8009508 <__mcmp>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	dc03      	bgt.n	8008c50 <_dtoa_r+0xa58>
 8008c48:	d1e1      	bne.n	8008c0e <_dtoa_r+0xa16>
 8008c4a:	f018 0f01 	tst.w	r8, #1
 8008c4e:	d0de      	beq.n	8008c0e <_dtoa_r+0xa16>
 8008c50:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c54:	d1d8      	bne.n	8008c08 <_dtoa_r+0xa10>
 8008c56:	2339      	movs	r3, #57	@ 0x39
 8008c58:	9a02      	ldr	r2, [sp, #8]
 8008c5a:	7013      	strb	r3, [r2, #0]
 8008c5c:	4633      	mov	r3, r6
 8008c5e:	461e      	mov	r6, r3
 8008c60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	2a39      	cmp	r2, #57	@ 0x39
 8008c68:	d052      	beq.n	8008d10 <_dtoa_r+0xb18>
 8008c6a:	3201      	adds	r2, #1
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	e60e      	b.n	800888e <_dtoa_r+0x696>
 8008c70:	2a00      	cmp	r2, #0
 8008c72:	dd07      	ble.n	8008c84 <_dtoa_r+0xa8c>
 8008c74:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c78:	d0ed      	beq.n	8008c56 <_dtoa_r+0xa5e>
 8008c7a:	9a02      	ldr	r2, [sp, #8]
 8008c7c:	f108 0301 	add.w	r3, r8, #1
 8008c80:	7013      	strb	r3, [r2, #0]
 8008c82:	e604      	b.n	800888e <_dtoa_r+0x696>
 8008c84:	9b07      	ldr	r3, [sp, #28]
 8008c86:	9a07      	ldr	r2, [sp, #28]
 8008c88:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d028      	beq.n	8008ce4 <_dtoa_r+0xaec>
 8008c92:	4649      	mov	r1, r9
 8008c94:	2300      	movs	r3, #0
 8008c96:	220a      	movs	r2, #10
 8008c98:	4658      	mov	r0, fp
 8008c9a:	f000 f9d5 	bl	8009048 <__multadd>
 8008c9e:	42af      	cmp	r7, r5
 8008ca0:	4681      	mov	r9, r0
 8008ca2:	f04f 0300 	mov.w	r3, #0
 8008ca6:	f04f 020a 	mov.w	r2, #10
 8008caa:	4639      	mov	r1, r7
 8008cac:	4658      	mov	r0, fp
 8008cae:	d107      	bne.n	8008cc0 <_dtoa_r+0xac8>
 8008cb0:	f000 f9ca 	bl	8009048 <__multadd>
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	9b07      	ldr	r3, [sp, #28]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	9307      	str	r3, [sp, #28]
 8008cbe:	e774      	b.n	8008baa <_dtoa_r+0x9b2>
 8008cc0:	f000 f9c2 	bl	8009048 <__multadd>
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	2300      	movs	r3, #0
 8008cca:	220a      	movs	r2, #10
 8008ccc:	4658      	mov	r0, fp
 8008cce:	f000 f9bb 	bl	8009048 <__multadd>
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	e7f0      	b.n	8008cb8 <_dtoa_r+0xac0>
 8008cd6:	9b08      	ldr	r3, [sp, #32]
 8008cd8:	2700      	movs	r7, #0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bfcc      	ite	gt
 8008cde:	461e      	movgt	r6, r3
 8008ce0:	2601      	movle	r6, #1
 8008ce2:	4456      	add	r6, sl
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4658      	mov	r0, fp
 8008cea:	f000 fba1 	bl	8009430 <__lshift>
 8008cee:	4621      	mov	r1, r4
 8008cf0:	4681      	mov	r9, r0
 8008cf2:	f000 fc09 	bl	8009508 <__mcmp>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	dcb0      	bgt.n	8008c5c <_dtoa_r+0xa64>
 8008cfa:	d102      	bne.n	8008d02 <_dtoa_r+0xb0a>
 8008cfc:	f018 0f01 	tst.w	r8, #1
 8008d00:	d1ac      	bne.n	8008c5c <_dtoa_r+0xa64>
 8008d02:	4633      	mov	r3, r6
 8008d04:	461e      	mov	r6, r3
 8008d06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d0a:	2a30      	cmp	r2, #48	@ 0x30
 8008d0c:	d0fa      	beq.n	8008d04 <_dtoa_r+0xb0c>
 8008d0e:	e5be      	b.n	800888e <_dtoa_r+0x696>
 8008d10:	459a      	cmp	sl, r3
 8008d12:	d1a4      	bne.n	8008c5e <_dtoa_r+0xa66>
 8008d14:	9b04      	ldr	r3, [sp, #16]
 8008d16:	3301      	adds	r3, #1
 8008d18:	9304      	str	r3, [sp, #16]
 8008d1a:	2331      	movs	r3, #49	@ 0x31
 8008d1c:	f88a 3000 	strb.w	r3, [sl]
 8008d20:	e5b5      	b.n	800888e <_dtoa_r+0x696>
 8008d22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d24:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d84 <_dtoa_r+0xb8c>
 8008d28:	b11b      	cbz	r3, 8008d32 <_dtoa_r+0xb3a>
 8008d2a:	f10a 0308 	add.w	r3, sl, #8
 8008d2e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	4650      	mov	r0, sl
 8008d34:	b017      	add	sp, #92	@ 0x5c
 8008d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	f77f ae3d 	ble.w	80089bc <_dtoa_r+0x7c4>
 8008d42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d44:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d46:	2001      	movs	r0, #1
 8008d48:	e65b      	b.n	8008a02 <_dtoa_r+0x80a>
 8008d4a:	9b08      	ldr	r3, [sp, #32]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f77f aed6 	ble.w	8008afe <_dtoa_r+0x906>
 8008d52:	4656      	mov	r6, sl
 8008d54:	4621      	mov	r1, r4
 8008d56:	4648      	mov	r0, r9
 8008d58:	f7ff f9c4 	bl	80080e4 <quorem>
 8008d5c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d60:	9b08      	ldr	r3, [sp, #32]
 8008d62:	f806 8b01 	strb.w	r8, [r6], #1
 8008d66:	eba6 020a 	sub.w	r2, r6, sl
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	ddb3      	ble.n	8008cd6 <_dtoa_r+0xade>
 8008d6e:	4649      	mov	r1, r9
 8008d70:	2300      	movs	r3, #0
 8008d72:	220a      	movs	r2, #10
 8008d74:	4658      	mov	r0, fp
 8008d76:	f000 f967 	bl	8009048 <__multadd>
 8008d7a:	4681      	mov	r9, r0
 8008d7c:	e7ea      	b.n	8008d54 <_dtoa_r+0xb5c>
 8008d7e:	bf00      	nop
 8008d80:	0800e82e 	.word	0x0800e82e
 8008d84:	0800e7c9 	.word	0x0800e7c9

08008d88 <_free_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d040      	beq.n	8008e12 <_free_r+0x8a>
 8008d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d94:	1f0c      	subs	r4, r1, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bfb8      	it	lt
 8008d9a:	18e4      	addlt	r4, r4, r3
 8008d9c:	f000 f8e6 	bl	8008f6c <__malloc_lock>
 8008da0:	4a1c      	ldr	r2, [pc, #112]	@ (8008e14 <_free_r+0x8c>)
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	b933      	cbnz	r3, 8008db4 <_free_r+0x2c>
 8008da6:	6063      	str	r3, [r4, #4]
 8008da8:	6014      	str	r4, [r2, #0]
 8008daa:	4628      	mov	r0, r5
 8008dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008db0:	f000 b8e2 	b.w	8008f78 <__malloc_unlock>
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	d908      	bls.n	8008dca <_free_r+0x42>
 8008db8:	6820      	ldr	r0, [r4, #0]
 8008dba:	1821      	adds	r1, r4, r0
 8008dbc:	428b      	cmp	r3, r1
 8008dbe:	bf01      	itttt	eq
 8008dc0:	6819      	ldreq	r1, [r3, #0]
 8008dc2:	685b      	ldreq	r3, [r3, #4]
 8008dc4:	1809      	addeq	r1, r1, r0
 8008dc6:	6021      	streq	r1, [r4, #0]
 8008dc8:	e7ed      	b.n	8008da6 <_free_r+0x1e>
 8008dca:	461a      	mov	r2, r3
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b10b      	cbz	r3, 8008dd4 <_free_r+0x4c>
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	d9fa      	bls.n	8008dca <_free_r+0x42>
 8008dd4:	6811      	ldr	r1, [r2, #0]
 8008dd6:	1850      	adds	r0, r2, r1
 8008dd8:	42a0      	cmp	r0, r4
 8008dda:	d10b      	bne.n	8008df4 <_free_r+0x6c>
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	4401      	add	r1, r0
 8008de0:	1850      	adds	r0, r2, r1
 8008de2:	4283      	cmp	r3, r0
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	d1e0      	bne.n	8008daa <_free_r+0x22>
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	4408      	add	r0, r1
 8008dee:	6010      	str	r0, [r2, #0]
 8008df0:	6053      	str	r3, [r2, #4]
 8008df2:	e7da      	b.n	8008daa <_free_r+0x22>
 8008df4:	d902      	bls.n	8008dfc <_free_r+0x74>
 8008df6:	230c      	movs	r3, #12
 8008df8:	602b      	str	r3, [r5, #0]
 8008dfa:	e7d6      	b.n	8008daa <_free_r+0x22>
 8008dfc:	6820      	ldr	r0, [r4, #0]
 8008dfe:	1821      	adds	r1, r4, r0
 8008e00:	428b      	cmp	r3, r1
 8008e02:	bf01      	itttt	eq
 8008e04:	6819      	ldreq	r1, [r3, #0]
 8008e06:	685b      	ldreq	r3, [r3, #4]
 8008e08:	1809      	addeq	r1, r1, r0
 8008e0a:	6021      	streq	r1, [r4, #0]
 8008e0c:	6063      	str	r3, [r4, #4]
 8008e0e:	6054      	str	r4, [r2, #4]
 8008e10:	e7cb      	b.n	8008daa <_free_r+0x22>
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	20000a9c 	.word	0x20000a9c

08008e18 <malloc>:
 8008e18:	4b02      	ldr	r3, [pc, #8]	@ (8008e24 <malloc+0xc>)
 8008e1a:	4601      	mov	r1, r0
 8008e1c:	6818      	ldr	r0, [r3, #0]
 8008e1e:	f000 b825 	b.w	8008e6c <_malloc_r>
 8008e22:	bf00      	nop
 8008e24:	20000040 	.word	0x20000040

08008e28 <sbrk_aligned>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8008e68 <sbrk_aligned+0x40>)
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	6831      	ldr	r1, [r6, #0]
 8008e30:	4605      	mov	r5, r0
 8008e32:	b911      	cbnz	r1, 8008e3a <sbrk_aligned+0x12>
 8008e34:	f001 fd72 	bl	800a91c <_sbrk_r>
 8008e38:	6030      	str	r0, [r6, #0]
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	f001 fd6d 	bl	800a91c <_sbrk_r>
 8008e42:	1c43      	adds	r3, r0, #1
 8008e44:	d103      	bne.n	8008e4e <sbrk_aligned+0x26>
 8008e46:	f04f 34ff 	mov.w	r4, #4294967295
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
 8008e4e:	1cc4      	adds	r4, r0, #3
 8008e50:	f024 0403 	bic.w	r4, r4, #3
 8008e54:	42a0      	cmp	r0, r4
 8008e56:	d0f8      	beq.n	8008e4a <sbrk_aligned+0x22>
 8008e58:	1a21      	subs	r1, r4, r0
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f001 fd5e 	bl	800a91c <_sbrk_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	d1f2      	bne.n	8008e4a <sbrk_aligned+0x22>
 8008e64:	e7ef      	b.n	8008e46 <sbrk_aligned+0x1e>
 8008e66:	bf00      	nop
 8008e68:	20000a98 	.word	0x20000a98

08008e6c <_malloc_r>:
 8008e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e70:	1ccd      	adds	r5, r1, #3
 8008e72:	f025 0503 	bic.w	r5, r5, #3
 8008e76:	3508      	adds	r5, #8
 8008e78:	2d0c      	cmp	r5, #12
 8008e7a:	bf38      	it	cc
 8008e7c:	250c      	movcc	r5, #12
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	4606      	mov	r6, r0
 8008e82:	db01      	blt.n	8008e88 <_malloc_r+0x1c>
 8008e84:	42a9      	cmp	r1, r5
 8008e86:	d904      	bls.n	8008e92 <_malloc_r+0x26>
 8008e88:	230c      	movs	r3, #12
 8008e8a:	6033      	str	r3, [r6, #0]
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f68 <_malloc_r+0xfc>
 8008e96:	f000 f869 	bl	8008f6c <__malloc_lock>
 8008e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e9e:	461c      	mov	r4, r3
 8008ea0:	bb44      	cbnz	r4, 8008ef4 <_malloc_r+0x88>
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff ffbf 	bl	8008e28 <sbrk_aligned>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	4604      	mov	r4, r0
 8008eae:	d158      	bne.n	8008f62 <_malloc_r+0xf6>
 8008eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8008eb4:	4627      	mov	r7, r4
 8008eb6:	2f00      	cmp	r7, #0
 8008eb8:	d143      	bne.n	8008f42 <_malloc_r+0xd6>
 8008eba:	2c00      	cmp	r4, #0
 8008ebc:	d04b      	beq.n	8008f56 <_malloc_r+0xea>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	eb04 0903 	add.w	r9, r4, r3
 8008ec8:	f001 fd28 	bl	800a91c <_sbrk_r>
 8008ecc:	4581      	cmp	r9, r0
 8008ece:	d142      	bne.n	8008f56 <_malloc_r+0xea>
 8008ed0:	6821      	ldr	r1, [r4, #0]
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	1a6d      	subs	r5, r5, r1
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	f7ff ffa6 	bl	8008e28 <sbrk_aligned>
 8008edc:	3001      	adds	r0, #1
 8008ede:	d03a      	beq.n	8008f56 <_malloc_r+0xea>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	442b      	add	r3, r5
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	bb62      	cbnz	r2, 8008f48 <_malloc_r+0xdc>
 8008eee:	f8c8 7000 	str.w	r7, [r8]
 8008ef2:	e00f      	b.n	8008f14 <_malloc_r+0xa8>
 8008ef4:	6822      	ldr	r2, [r4, #0]
 8008ef6:	1b52      	subs	r2, r2, r5
 8008ef8:	d420      	bmi.n	8008f3c <_malloc_r+0xd0>
 8008efa:	2a0b      	cmp	r2, #11
 8008efc:	d917      	bls.n	8008f2e <_malloc_r+0xc2>
 8008efe:	1961      	adds	r1, r4, r5
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	6025      	str	r5, [r4, #0]
 8008f04:	bf18      	it	ne
 8008f06:	6059      	strne	r1, [r3, #4]
 8008f08:	6863      	ldr	r3, [r4, #4]
 8008f0a:	bf08      	it	eq
 8008f0c:	f8c8 1000 	streq.w	r1, [r8]
 8008f10:	5162      	str	r2, [r4, r5]
 8008f12:	604b      	str	r3, [r1, #4]
 8008f14:	4630      	mov	r0, r6
 8008f16:	f000 f82f 	bl	8008f78 <__malloc_unlock>
 8008f1a:	f104 000b 	add.w	r0, r4, #11
 8008f1e:	1d23      	adds	r3, r4, #4
 8008f20:	f020 0007 	bic.w	r0, r0, #7
 8008f24:	1ac2      	subs	r2, r0, r3
 8008f26:	bf1c      	itt	ne
 8008f28:	1a1b      	subne	r3, r3, r0
 8008f2a:	50a3      	strne	r3, [r4, r2]
 8008f2c:	e7af      	b.n	8008e8e <_malloc_r+0x22>
 8008f2e:	6862      	ldr	r2, [r4, #4]
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	bf0c      	ite	eq
 8008f34:	f8c8 2000 	streq.w	r2, [r8]
 8008f38:	605a      	strne	r2, [r3, #4]
 8008f3a:	e7eb      	b.n	8008f14 <_malloc_r+0xa8>
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	6864      	ldr	r4, [r4, #4]
 8008f40:	e7ae      	b.n	8008ea0 <_malloc_r+0x34>
 8008f42:	463c      	mov	r4, r7
 8008f44:	687f      	ldr	r7, [r7, #4]
 8008f46:	e7b6      	b.n	8008eb6 <_malloc_r+0x4a>
 8008f48:	461a      	mov	r2, r3
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	d1fb      	bne.n	8008f48 <_malloc_r+0xdc>
 8008f50:	2300      	movs	r3, #0
 8008f52:	6053      	str	r3, [r2, #4]
 8008f54:	e7de      	b.n	8008f14 <_malloc_r+0xa8>
 8008f56:	230c      	movs	r3, #12
 8008f58:	4630      	mov	r0, r6
 8008f5a:	6033      	str	r3, [r6, #0]
 8008f5c:	f000 f80c 	bl	8008f78 <__malloc_unlock>
 8008f60:	e794      	b.n	8008e8c <_malloc_r+0x20>
 8008f62:	6005      	str	r5, [r0, #0]
 8008f64:	e7d6      	b.n	8008f14 <_malloc_r+0xa8>
 8008f66:	bf00      	nop
 8008f68:	20000a9c 	.word	0x20000a9c

08008f6c <__malloc_lock>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	@ (8008f74 <__malloc_lock+0x8>)
 8008f6e:	f7ff b870 	b.w	8008052 <__retarget_lock_acquire_recursive>
 8008f72:	bf00      	nop
 8008f74:	20000a94 	.word	0x20000a94

08008f78 <__malloc_unlock>:
 8008f78:	4801      	ldr	r0, [pc, #4]	@ (8008f80 <__malloc_unlock+0x8>)
 8008f7a:	f7ff b86b 	b.w	8008054 <__retarget_lock_release_recursive>
 8008f7e:	bf00      	nop
 8008f80:	20000a94 	.word	0x20000a94

08008f84 <_Balloc>:
 8008f84:	b570      	push	{r4, r5, r6, lr}
 8008f86:	69c6      	ldr	r6, [r0, #28]
 8008f88:	4604      	mov	r4, r0
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	b976      	cbnz	r6, 8008fac <_Balloc+0x28>
 8008f8e:	2010      	movs	r0, #16
 8008f90:	f7ff ff42 	bl	8008e18 <malloc>
 8008f94:	4602      	mov	r2, r0
 8008f96:	61e0      	str	r0, [r4, #28]
 8008f98:	b920      	cbnz	r0, 8008fa4 <_Balloc+0x20>
 8008f9a:	216b      	movs	r1, #107	@ 0x6b
 8008f9c:	4b17      	ldr	r3, [pc, #92]	@ (8008ffc <_Balloc+0x78>)
 8008f9e:	4818      	ldr	r0, [pc, #96]	@ (8009000 <_Balloc+0x7c>)
 8008fa0:	f7ff f882 	bl	80080a8 <__assert_func>
 8008fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fa8:	6006      	str	r6, [r0, #0]
 8008faa:	60c6      	str	r6, [r0, #12]
 8008fac:	69e6      	ldr	r6, [r4, #28]
 8008fae:	68f3      	ldr	r3, [r6, #12]
 8008fb0:	b183      	cbz	r3, 8008fd4 <_Balloc+0x50>
 8008fb2:	69e3      	ldr	r3, [r4, #28]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fba:	b9b8      	cbnz	r0, 8008fec <_Balloc+0x68>
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	fa01 f605 	lsl.w	r6, r1, r5
 8008fc2:	1d72      	adds	r2, r6, #5
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	0092      	lsls	r2, r2, #2
 8008fc8:	f001 fcc5 	bl	800a956 <_calloc_r>
 8008fcc:	b160      	cbz	r0, 8008fe8 <_Balloc+0x64>
 8008fce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fd2:	e00e      	b.n	8008ff2 <_Balloc+0x6e>
 8008fd4:	2221      	movs	r2, #33	@ 0x21
 8008fd6:	2104      	movs	r1, #4
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f001 fcbc 	bl	800a956 <_calloc_r>
 8008fde:	69e3      	ldr	r3, [r4, #28]
 8008fe0:	60f0      	str	r0, [r6, #12]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1e4      	bne.n	8008fb2 <_Balloc+0x2e>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	6802      	ldr	r2, [r0, #0]
 8008fee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ff8:	e7f7      	b.n	8008fea <_Balloc+0x66>
 8008ffa:	bf00      	nop
 8008ffc:	0800e71c 	.word	0x0800e71c
 8009000:	0800e83f 	.word	0x0800e83f

08009004 <_Bfree>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	69c6      	ldr	r6, [r0, #28]
 8009008:	4605      	mov	r5, r0
 800900a:	460c      	mov	r4, r1
 800900c:	b976      	cbnz	r6, 800902c <_Bfree+0x28>
 800900e:	2010      	movs	r0, #16
 8009010:	f7ff ff02 	bl	8008e18 <malloc>
 8009014:	4602      	mov	r2, r0
 8009016:	61e8      	str	r0, [r5, #28]
 8009018:	b920      	cbnz	r0, 8009024 <_Bfree+0x20>
 800901a:	218f      	movs	r1, #143	@ 0x8f
 800901c:	4b08      	ldr	r3, [pc, #32]	@ (8009040 <_Bfree+0x3c>)
 800901e:	4809      	ldr	r0, [pc, #36]	@ (8009044 <_Bfree+0x40>)
 8009020:	f7ff f842 	bl	80080a8 <__assert_func>
 8009024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009028:	6006      	str	r6, [r0, #0]
 800902a:	60c6      	str	r6, [r0, #12]
 800902c:	b13c      	cbz	r4, 800903e <_Bfree+0x3a>
 800902e:	69eb      	ldr	r3, [r5, #28]
 8009030:	6862      	ldr	r2, [r4, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009038:	6021      	str	r1, [r4, #0]
 800903a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	0800e71c 	.word	0x0800e71c
 8009044:	0800e83f 	.word	0x0800e83f

08009048 <__multadd>:
 8009048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904c:	4607      	mov	r7, r0
 800904e:	460c      	mov	r4, r1
 8009050:	461e      	mov	r6, r3
 8009052:	2000      	movs	r0, #0
 8009054:	690d      	ldr	r5, [r1, #16]
 8009056:	f101 0c14 	add.w	ip, r1, #20
 800905a:	f8dc 3000 	ldr.w	r3, [ip]
 800905e:	3001      	adds	r0, #1
 8009060:	b299      	uxth	r1, r3
 8009062:	fb02 6101 	mla	r1, r2, r1, r6
 8009066:	0c1e      	lsrs	r6, r3, #16
 8009068:	0c0b      	lsrs	r3, r1, #16
 800906a:	fb02 3306 	mla	r3, r2, r6, r3
 800906e:	b289      	uxth	r1, r1
 8009070:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009074:	4285      	cmp	r5, r0
 8009076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800907a:	f84c 1b04 	str.w	r1, [ip], #4
 800907e:	dcec      	bgt.n	800905a <__multadd+0x12>
 8009080:	b30e      	cbz	r6, 80090c6 <__multadd+0x7e>
 8009082:	68a3      	ldr	r3, [r4, #8]
 8009084:	42ab      	cmp	r3, r5
 8009086:	dc19      	bgt.n	80090bc <__multadd+0x74>
 8009088:	6861      	ldr	r1, [r4, #4]
 800908a:	4638      	mov	r0, r7
 800908c:	3101      	adds	r1, #1
 800908e:	f7ff ff79 	bl	8008f84 <_Balloc>
 8009092:	4680      	mov	r8, r0
 8009094:	b928      	cbnz	r0, 80090a2 <__multadd+0x5a>
 8009096:	4602      	mov	r2, r0
 8009098:	21ba      	movs	r1, #186	@ 0xba
 800909a:	4b0c      	ldr	r3, [pc, #48]	@ (80090cc <__multadd+0x84>)
 800909c:	480c      	ldr	r0, [pc, #48]	@ (80090d0 <__multadd+0x88>)
 800909e:	f7ff f803 	bl	80080a8 <__assert_func>
 80090a2:	6922      	ldr	r2, [r4, #16]
 80090a4:	f104 010c 	add.w	r1, r4, #12
 80090a8:	3202      	adds	r2, #2
 80090aa:	0092      	lsls	r2, r2, #2
 80090ac:	300c      	adds	r0, #12
 80090ae:	f7fe ffe8 	bl	8008082 <memcpy>
 80090b2:	4621      	mov	r1, r4
 80090b4:	4638      	mov	r0, r7
 80090b6:	f7ff ffa5 	bl	8009004 <_Bfree>
 80090ba:	4644      	mov	r4, r8
 80090bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090c0:	3501      	adds	r5, #1
 80090c2:	615e      	str	r6, [r3, #20]
 80090c4:	6125      	str	r5, [r4, #16]
 80090c6:	4620      	mov	r0, r4
 80090c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090cc:	0800e82e 	.word	0x0800e82e
 80090d0:	0800e83f 	.word	0x0800e83f

080090d4 <__s2b>:
 80090d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d8:	4615      	mov	r5, r2
 80090da:	2209      	movs	r2, #9
 80090dc:	461f      	mov	r7, r3
 80090de:	3308      	adds	r3, #8
 80090e0:	460c      	mov	r4, r1
 80090e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80090e6:	4606      	mov	r6, r0
 80090e8:	2201      	movs	r2, #1
 80090ea:	2100      	movs	r1, #0
 80090ec:	429a      	cmp	r2, r3
 80090ee:	db09      	blt.n	8009104 <__s2b+0x30>
 80090f0:	4630      	mov	r0, r6
 80090f2:	f7ff ff47 	bl	8008f84 <_Balloc>
 80090f6:	b940      	cbnz	r0, 800910a <__s2b+0x36>
 80090f8:	4602      	mov	r2, r0
 80090fa:	21d3      	movs	r1, #211	@ 0xd3
 80090fc:	4b18      	ldr	r3, [pc, #96]	@ (8009160 <__s2b+0x8c>)
 80090fe:	4819      	ldr	r0, [pc, #100]	@ (8009164 <__s2b+0x90>)
 8009100:	f7fe ffd2 	bl	80080a8 <__assert_func>
 8009104:	0052      	lsls	r2, r2, #1
 8009106:	3101      	adds	r1, #1
 8009108:	e7f0      	b.n	80090ec <__s2b+0x18>
 800910a:	9b08      	ldr	r3, [sp, #32]
 800910c:	2d09      	cmp	r5, #9
 800910e:	6143      	str	r3, [r0, #20]
 8009110:	f04f 0301 	mov.w	r3, #1
 8009114:	6103      	str	r3, [r0, #16]
 8009116:	dd16      	ble.n	8009146 <__s2b+0x72>
 8009118:	f104 0909 	add.w	r9, r4, #9
 800911c:	46c8      	mov	r8, r9
 800911e:	442c      	add	r4, r5
 8009120:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009124:	4601      	mov	r1, r0
 8009126:	220a      	movs	r2, #10
 8009128:	4630      	mov	r0, r6
 800912a:	3b30      	subs	r3, #48	@ 0x30
 800912c:	f7ff ff8c 	bl	8009048 <__multadd>
 8009130:	45a0      	cmp	r8, r4
 8009132:	d1f5      	bne.n	8009120 <__s2b+0x4c>
 8009134:	f1a5 0408 	sub.w	r4, r5, #8
 8009138:	444c      	add	r4, r9
 800913a:	1b2d      	subs	r5, r5, r4
 800913c:	1963      	adds	r3, r4, r5
 800913e:	42bb      	cmp	r3, r7
 8009140:	db04      	blt.n	800914c <__s2b+0x78>
 8009142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009146:	2509      	movs	r5, #9
 8009148:	340a      	adds	r4, #10
 800914a:	e7f6      	b.n	800913a <__s2b+0x66>
 800914c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009150:	4601      	mov	r1, r0
 8009152:	220a      	movs	r2, #10
 8009154:	4630      	mov	r0, r6
 8009156:	3b30      	subs	r3, #48	@ 0x30
 8009158:	f7ff ff76 	bl	8009048 <__multadd>
 800915c:	e7ee      	b.n	800913c <__s2b+0x68>
 800915e:	bf00      	nop
 8009160:	0800e82e 	.word	0x0800e82e
 8009164:	0800e83f 	.word	0x0800e83f

08009168 <__hi0bits>:
 8009168:	4603      	mov	r3, r0
 800916a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800916e:	bf3a      	itte	cc
 8009170:	0403      	lslcc	r3, r0, #16
 8009172:	2010      	movcc	r0, #16
 8009174:	2000      	movcs	r0, #0
 8009176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800917a:	bf3c      	itt	cc
 800917c:	021b      	lslcc	r3, r3, #8
 800917e:	3008      	addcc	r0, #8
 8009180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009184:	bf3c      	itt	cc
 8009186:	011b      	lslcc	r3, r3, #4
 8009188:	3004      	addcc	r0, #4
 800918a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800918e:	bf3c      	itt	cc
 8009190:	009b      	lslcc	r3, r3, #2
 8009192:	3002      	addcc	r0, #2
 8009194:	2b00      	cmp	r3, #0
 8009196:	db05      	blt.n	80091a4 <__hi0bits+0x3c>
 8009198:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800919c:	f100 0001 	add.w	r0, r0, #1
 80091a0:	bf08      	it	eq
 80091a2:	2020      	moveq	r0, #32
 80091a4:	4770      	bx	lr

080091a6 <__lo0bits>:
 80091a6:	6803      	ldr	r3, [r0, #0]
 80091a8:	4602      	mov	r2, r0
 80091aa:	f013 0007 	ands.w	r0, r3, #7
 80091ae:	d00b      	beq.n	80091c8 <__lo0bits+0x22>
 80091b0:	07d9      	lsls	r1, r3, #31
 80091b2:	d421      	bmi.n	80091f8 <__lo0bits+0x52>
 80091b4:	0798      	lsls	r0, r3, #30
 80091b6:	bf49      	itett	mi
 80091b8:	085b      	lsrmi	r3, r3, #1
 80091ba:	089b      	lsrpl	r3, r3, #2
 80091bc:	2001      	movmi	r0, #1
 80091be:	6013      	strmi	r3, [r2, #0]
 80091c0:	bf5c      	itt	pl
 80091c2:	2002      	movpl	r0, #2
 80091c4:	6013      	strpl	r3, [r2, #0]
 80091c6:	4770      	bx	lr
 80091c8:	b299      	uxth	r1, r3
 80091ca:	b909      	cbnz	r1, 80091d0 <__lo0bits+0x2a>
 80091cc:	2010      	movs	r0, #16
 80091ce:	0c1b      	lsrs	r3, r3, #16
 80091d0:	b2d9      	uxtb	r1, r3
 80091d2:	b909      	cbnz	r1, 80091d8 <__lo0bits+0x32>
 80091d4:	3008      	adds	r0, #8
 80091d6:	0a1b      	lsrs	r3, r3, #8
 80091d8:	0719      	lsls	r1, r3, #28
 80091da:	bf04      	itt	eq
 80091dc:	091b      	lsreq	r3, r3, #4
 80091de:	3004      	addeq	r0, #4
 80091e0:	0799      	lsls	r1, r3, #30
 80091e2:	bf04      	itt	eq
 80091e4:	089b      	lsreq	r3, r3, #2
 80091e6:	3002      	addeq	r0, #2
 80091e8:	07d9      	lsls	r1, r3, #31
 80091ea:	d403      	bmi.n	80091f4 <__lo0bits+0x4e>
 80091ec:	085b      	lsrs	r3, r3, #1
 80091ee:	f100 0001 	add.w	r0, r0, #1
 80091f2:	d003      	beq.n	80091fc <__lo0bits+0x56>
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	4770      	bx	lr
 80091f8:	2000      	movs	r0, #0
 80091fa:	4770      	bx	lr
 80091fc:	2020      	movs	r0, #32
 80091fe:	4770      	bx	lr

08009200 <__i2b>:
 8009200:	b510      	push	{r4, lr}
 8009202:	460c      	mov	r4, r1
 8009204:	2101      	movs	r1, #1
 8009206:	f7ff febd 	bl	8008f84 <_Balloc>
 800920a:	4602      	mov	r2, r0
 800920c:	b928      	cbnz	r0, 800921a <__i2b+0x1a>
 800920e:	f240 1145 	movw	r1, #325	@ 0x145
 8009212:	4b04      	ldr	r3, [pc, #16]	@ (8009224 <__i2b+0x24>)
 8009214:	4804      	ldr	r0, [pc, #16]	@ (8009228 <__i2b+0x28>)
 8009216:	f7fe ff47 	bl	80080a8 <__assert_func>
 800921a:	2301      	movs	r3, #1
 800921c:	6144      	str	r4, [r0, #20]
 800921e:	6103      	str	r3, [r0, #16]
 8009220:	bd10      	pop	{r4, pc}
 8009222:	bf00      	nop
 8009224:	0800e82e 	.word	0x0800e82e
 8009228:	0800e83f 	.word	0x0800e83f

0800922c <__multiply>:
 800922c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009230:	4614      	mov	r4, r2
 8009232:	690a      	ldr	r2, [r1, #16]
 8009234:	6923      	ldr	r3, [r4, #16]
 8009236:	460f      	mov	r7, r1
 8009238:	429a      	cmp	r2, r3
 800923a:	bfa2      	ittt	ge
 800923c:	4623      	movge	r3, r4
 800923e:	460c      	movge	r4, r1
 8009240:	461f      	movge	r7, r3
 8009242:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009246:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800924a:	68a3      	ldr	r3, [r4, #8]
 800924c:	6861      	ldr	r1, [r4, #4]
 800924e:	eb0a 0609 	add.w	r6, sl, r9
 8009252:	42b3      	cmp	r3, r6
 8009254:	b085      	sub	sp, #20
 8009256:	bfb8      	it	lt
 8009258:	3101      	addlt	r1, #1
 800925a:	f7ff fe93 	bl	8008f84 <_Balloc>
 800925e:	b930      	cbnz	r0, 800926e <__multiply+0x42>
 8009260:	4602      	mov	r2, r0
 8009262:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009266:	4b43      	ldr	r3, [pc, #268]	@ (8009374 <__multiply+0x148>)
 8009268:	4843      	ldr	r0, [pc, #268]	@ (8009378 <__multiply+0x14c>)
 800926a:	f7fe ff1d 	bl	80080a8 <__assert_func>
 800926e:	f100 0514 	add.w	r5, r0, #20
 8009272:	462b      	mov	r3, r5
 8009274:	2200      	movs	r2, #0
 8009276:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800927a:	4543      	cmp	r3, r8
 800927c:	d321      	bcc.n	80092c2 <__multiply+0x96>
 800927e:	f107 0114 	add.w	r1, r7, #20
 8009282:	f104 0214 	add.w	r2, r4, #20
 8009286:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800928a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800928e:	9302      	str	r3, [sp, #8]
 8009290:	1b13      	subs	r3, r2, r4
 8009292:	3b15      	subs	r3, #21
 8009294:	f023 0303 	bic.w	r3, r3, #3
 8009298:	3304      	adds	r3, #4
 800929a:	f104 0715 	add.w	r7, r4, #21
 800929e:	42ba      	cmp	r2, r7
 80092a0:	bf38      	it	cc
 80092a2:	2304      	movcc	r3, #4
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	9b02      	ldr	r3, [sp, #8]
 80092a8:	9103      	str	r1, [sp, #12]
 80092aa:	428b      	cmp	r3, r1
 80092ac:	d80c      	bhi.n	80092c8 <__multiply+0x9c>
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	dd03      	ble.n	80092ba <__multiply+0x8e>
 80092b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d05a      	beq.n	8009370 <__multiply+0x144>
 80092ba:	6106      	str	r6, [r0, #16]
 80092bc:	b005      	add	sp, #20
 80092be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c2:	f843 2b04 	str.w	r2, [r3], #4
 80092c6:	e7d8      	b.n	800927a <__multiply+0x4e>
 80092c8:	f8b1 a000 	ldrh.w	sl, [r1]
 80092cc:	f1ba 0f00 	cmp.w	sl, #0
 80092d0:	d023      	beq.n	800931a <__multiply+0xee>
 80092d2:	46a9      	mov	r9, r5
 80092d4:	f04f 0c00 	mov.w	ip, #0
 80092d8:	f104 0e14 	add.w	lr, r4, #20
 80092dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092e0:	f8d9 3000 	ldr.w	r3, [r9]
 80092e4:	fa1f fb87 	uxth.w	fp, r7
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	fb0a 330b 	mla	r3, sl, fp, r3
 80092ee:	4463      	add	r3, ip
 80092f0:	f8d9 c000 	ldr.w	ip, [r9]
 80092f4:	0c3f      	lsrs	r7, r7, #16
 80092f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80092fa:	fb0a c707 	mla	r7, sl, r7, ip
 80092fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009302:	b29b      	uxth	r3, r3
 8009304:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009308:	4572      	cmp	r2, lr
 800930a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800930e:	f849 3b04 	str.w	r3, [r9], #4
 8009312:	d8e3      	bhi.n	80092dc <__multiply+0xb0>
 8009314:	9b01      	ldr	r3, [sp, #4]
 8009316:	f845 c003 	str.w	ip, [r5, r3]
 800931a:	9b03      	ldr	r3, [sp, #12]
 800931c:	3104      	adds	r1, #4
 800931e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009322:	f1b9 0f00 	cmp.w	r9, #0
 8009326:	d021      	beq.n	800936c <__multiply+0x140>
 8009328:	46ae      	mov	lr, r5
 800932a:	f04f 0a00 	mov.w	sl, #0
 800932e:	682b      	ldr	r3, [r5, #0]
 8009330:	f104 0c14 	add.w	ip, r4, #20
 8009334:	f8bc b000 	ldrh.w	fp, [ip]
 8009338:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800933c:	b29b      	uxth	r3, r3
 800933e:	fb09 770b 	mla	r7, r9, fp, r7
 8009342:	4457      	add	r7, sl
 8009344:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009348:	f84e 3b04 	str.w	r3, [lr], #4
 800934c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009350:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009354:	f8be 3000 	ldrh.w	r3, [lr]
 8009358:	4562      	cmp	r2, ip
 800935a:	fb09 330a 	mla	r3, r9, sl, r3
 800935e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009362:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009366:	d8e5      	bhi.n	8009334 <__multiply+0x108>
 8009368:	9f01      	ldr	r7, [sp, #4]
 800936a:	51eb      	str	r3, [r5, r7]
 800936c:	3504      	adds	r5, #4
 800936e:	e79a      	b.n	80092a6 <__multiply+0x7a>
 8009370:	3e01      	subs	r6, #1
 8009372:	e79c      	b.n	80092ae <__multiply+0x82>
 8009374:	0800e82e 	.word	0x0800e82e
 8009378:	0800e83f 	.word	0x0800e83f

0800937c <__pow5mult>:
 800937c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009380:	4615      	mov	r5, r2
 8009382:	f012 0203 	ands.w	r2, r2, #3
 8009386:	4607      	mov	r7, r0
 8009388:	460e      	mov	r6, r1
 800938a:	d007      	beq.n	800939c <__pow5mult+0x20>
 800938c:	4c25      	ldr	r4, [pc, #148]	@ (8009424 <__pow5mult+0xa8>)
 800938e:	3a01      	subs	r2, #1
 8009390:	2300      	movs	r3, #0
 8009392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009396:	f7ff fe57 	bl	8009048 <__multadd>
 800939a:	4606      	mov	r6, r0
 800939c:	10ad      	asrs	r5, r5, #2
 800939e:	d03d      	beq.n	800941c <__pow5mult+0xa0>
 80093a0:	69fc      	ldr	r4, [r7, #28]
 80093a2:	b97c      	cbnz	r4, 80093c4 <__pow5mult+0x48>
 80093a4:	2010      	movs	r0, #16
 80093a6:	f7ff fd37 	bl	8008e18 <malloc>
 80093aa:	4602      	mov	r2, r0
 80093ac:	61f8      	str	r0, [r7, #28]
 80093ae:	b928      	cbnz	r0, 80093bc <__pow5mult+0x40>
 80093b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80093b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009428 <__pow5mult+0xac>)
 80093b6:	481d      	ldr	r0, [pc, #116]	@ (800942c <__pow5mult+0xb0>)
 80093b8:	f7fe fe76 	bl	80080a8 <__assert_func>
 80093bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093c0:	6004      	str	r4, [r0, #0]
 80093c2:	60c4      	str	r4, [r0, #12]
 80093c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80093c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093cc:	b94c      	cbnz	r4, 80093e2 <__pow5mult+0x66>
 80093ce:	f240 2171 	movw	r1, #625	@ 0x271
 80093d2:	4638      	mov	r0, r7
 80093d4:	f7ff ff14 	bl	8009200 <__i2b>
 80093d8:	2300      	movs	r3, #0
 80093da:	4604      	mov	r4, r0
 80093dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80093e0:	6003      	str	r3, [r0, #0]
 80093e2:	f04f 0900 	mov.w	r9, #0
 80093e6:	07eb      	lsls	r3, r5, #31
 80093e8:	d50a      	bpl.n	8009400 <__pow5mult+0x84>
 80093ea:	4631      	mov	r1, r6
 80093ec:	4622      	mov	r2, r4
 80093ee:	4638      	mov	r0, r7
 80093f0:	f7ff ff1c 	bl	800922c <__multiply>
 80093f4:	4680      	mov	r8, r0
 80093f6:	4631      	mov	r1, r6
 80093f8:	4638      	mov	r0, r7
 80093fa:	f7ff fe03 	bl	8009004 <_Bfree>
 80093fe:	4646      	mov	r6, r8
 8009400:	106d      	asrs	r5, r5, #1
 8009402:	d00b      	beq.n	800941c <__pow5mult+0xa0>
 8009404:	6820      	ldr	r0, [r4, #0]
 8009406:	b938      	cbnz	r0, 8009418 <__pow5mult+0x9c>
 8009408:	4622      	mov	r2, r4
 800940a:	4621      	mov	r1, r4
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff ff0d 	bl	800922c <__multiply>
 8009412:	6020      	str	r0, [r4, #0]
 8009414:	f8c0 9000 	str.w	r9, [r0]
 8009418:	4604      	mov	r4, r0
 800941a:	e7e4      	b.n	80093e6 <__pow5mult+0x6a>
 800941c:	4630      	mov	r0, r6
 800941e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009422:	bf00      	nop
 8009424:	0800e898 	.word	0x0800e898
 8009428:	0800e71c 	.word	0x0800e71c
 800942c:	0800e83f 	.word	0x0800e83f

08009430 <__lshift>:
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	460c      	mov	r4, r1
 8009436:	4607      	mov	r7, r0
 8009438:	4691      	mov	r9, r2
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	6849      	ldr	r1, [r1, #4]
 800943e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009442:	68a3      	ldr	r3, [r4, #8]
 8009444:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009448:	f108 0601 	add.w	r6, r8, #1
 800944c:	42b3      	cmp	r3, r6
 800944e:	db0b      	blt.n	8009468 <__lshift+0x38>
 8009450:	4638      	mov	r0, r7
 8009452:	f7ff fd97 	bl	8008f84 <_Balloc>
 8009456:	4605      	mov	r5, r0
 8009458:	b948      	cbnz	r0, 800946e <__lshift+0x3e>
 800945a:	4602      	mov	r2, r0
 800945c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009460:	4b27      	ldr	r3, [pc, #156]	@ (8009500 <__lshift+0xd0>)
 8009462:	4828      	ldr	r0, [pc, #160]	@ (8009504 <__lshift+0xd4>)
 8009464:	f7fe fe20 	bl	80080a8 <__assert_func>
 8009468:	3101      	adds	r1, #1
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	e7ee      	b.n	800944c <__lshift+0x1c>
 800946e:	2300      	movs	r3, #0
 8009470:	f100 0114 	add.w	r1, r0, #20
 8009474:	f100 0210 	add.w	r2, r0, #16
 8009478:	4618      	mov	r0, r3
 800947a:	4553      	cmp	r3, sl
 800947c:	db33      	blt.n	80094e6 <__lshift+0xb6>
 800947e:	6920      	ldr	r0, [r4, #16]
 8009480:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009484:	f104 0314 	add.w	r3, r4, #20
 8009488:	f019 091f 	ands.w	r9, r9, #31
 800948c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009490:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009494:	d02b      	beq.n	80094ee <__lshift+0xbe>
 8009496:	468a      	mov	sl, r1
 8009498:	2200      	movs	r2, #0
 800949a:	f1c9 0e20 	rsb	lr, r9, #32
 800949e:	6818      	ldr	r0, [r3, #0]
 80094a0:	fa00 f009 	lsl.w	r0, r0, r9
 80094a4:	4310      	orrs	r0, r2
 80094a6:	f84a 0b04 	str.w	r0, [sl], #4
 80094aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ae:	459c      	cmp	ip, r3
 80094b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80094b4:	d8f3      	bhi.n	800949e <__lshift+0x6e>
 80094b6:	ebac 0304 	sub.w	r3, ip, r4
 80094ba:	3b15      	subs	r3, #21
 80094bc:	f023 0303 	bic.w	r3, r3, #3
 80094c0:	3304      	adds	r3, #4
 80094c2:	f104 0015 	add.w	r0, r4, #21
 80094c6:	4584      	cmp	ip, r0
 80094c8:	bf38      	it	cc
 80094ca:	2304      	movcc	r3, #4
 80094cc:	50ca      	str	r2, [r1, r3]
 80094ce:	b10a      	cbz	r2, 80094d4 <__lshift+0xa4>
 80094d0:	f108 0602 	add.w	r6, r8, #2
 80094d4:	3e01      	subs	r6, #1
 80094d6:	4638      	mov	r0, r7
 80094d8:	4621      	mov	r1, r4
 80094da:	612e      	str	r6, [r5, #16]
 80094dc:	f7ff fd92 	bl	8009004 <_Bfree>
 80094e0:	4628      	mov	r0, r5
 80094e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80094ea:	3301      	adds	r3, #1
 80094ec:	e7c5      	b.n	800947a <__lshift+0x4a>
 80094ee:	3904      	subs	r1, #4
 80094f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f4:	459c      	cmp	ip, r3
 80094f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80094fa:	d8f9      	bhi.n	80094f0 <__lshift+0xc0>
 80094fc:	e7ea      	b.n	80094d4 <__lshift+0xa4>
 80094fe:	bf00      	nop
 8009500:	0800e82e 	.word	0x0800e82e
 8009504:	0800e83f 	.word	0x0800e83f

08009508 <__mcmp>:
 8009508:	4603      	mov	r3, r0
 800950a:	690a      	ldr	r2, [r1, #16]
 800950c:	6900      	ldr	r0, [r0, #16]
 800950e:	b530      	push	{r4, r5, lr}
 8009510:	1a80      	subs	r0, r0, r2
 8009512:	d10e      	bne.n	8009532 <__mcmp+0x2a>
 8009514:	3314      	adds	r3, #20
 8009516:	3114      	adds	r1, #20
 8009518:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800951c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009520:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009524:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009528:	4295      	cmp	r5, r2
 800952a:	d003      	beq.n	8009534 <__mcmp+0x2c>
 800952c:	d205      	bcs.n	800953a <__mcmp+0x32>
 800952e:	f04f 30ff 	mov.w	r0, #4294967295
 8009532:	bd30      	pop	{r4, r5, pc}
 8009534:	42a3      	cmp	r3, r4
 8009536:	d3f3      	bcc.n	8009520 <__mcmp+0x18>
 8009538:	e7fb      	b.n	8009532 <__mcmp+0x2a>
 800953a:	2001      	movs	r0, #1
 800953c:	e7f9      	b.n	8009532 <__mcmp+0x2a>
	...

08009540 <__mdiff>:
 8009540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	4689      	mov	r9, r1
 8009546:	4606      	mov	r6, r0
 8009548:	4611      	mov	r1, r2
 800954a:	4648      	mov	r0, r9
 800954c:	4614      	mov	r4, r2
 800954e:	f7ff ffdb 	bl	8009508 <__mcmp>
 8009552:	1e05      	subs	r5, r0, #0
 8009554:	d112      	bne.n	800957c <__mdiff+0x3c>
 8009556:	4629      	mov	r1, r5
 8009558:	4630      	mov	r0, r6
 800955a:	f7ff fd13 	bl	8008f84 <_Balloc>
 800955e:	4602      	mov	r2, r0
 8009560:	b928      	cbnz	r0, 800956e <__mdiff+0x2e>
 8009562:	f240 2137 	movw	r1, #567	@ 0x237
 8009566:	4b3e      	ldr	r3, [pc, #248]	@ (8009660 <__mdiff+0x120>)
 8009568:	483e      	ldr	r0, [pc, #248]	@ (8009664 <__mdiff+0x124>)
 800956a:	f7fe fd9d 	bl	80080a8 <__assert_func>
 800956e:	2301      	movs	r3, #1
 8009570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009574:	4610      	mov	r0, r2
 8009576:	b003      	add	sp, #12
 8009578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957c:	bfbc      	itt	lt
 800957e:	464b      	movlt	r3, r9
 8009580:	46a1      	movlt	r9, r4
 8009582:	4630      	mov	r0, r6
 8009584:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009588:	bfba      	itte	lt
 800958a:	461c      	movlt	r4, r3
 800958c:	2501      	movlt	r5, #1
 800958e:	2500      	movge	r5, #0
 8009590:	f7ff fcf8 	bl	8008f84 <_Balloc>
 8009594:	4602      	mov	r2, r0
 8009596:	b918      	cbnz	r0, 80095a0 <__mdiff+0x60>
 8009598:	f240 2145 	movw	r1, #581	@ 0x245
 800959c:	4b30      	ldr	r3, [pc, #192]	@ (8009660 <__mdiff+0x120>)
 800959e:	e7e3      	b.n	8009568 <__mdiff+0x28>
 80095a0:	f100 0b14 	add.w	fp, r0, #20
 80095a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80095a8:	f109 0310 	add.w	r3, r9, #16
 80095ac:	60c5      	str	r5, [r0, #12]
 80095ae:	f04f 0c00 	mov.w	ip, #0
 80095b2:	f109 0514 	add.w	r5, r9, #20
 80095b6:	46d9      	mov	r9, fp
 80095b8:	6926      	ldr	r6, [r4, #16]
 80095ba:	f104 0e14 	add.w	lr, r4, #20
 80095be:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80095c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	9b01      	ldr	r3, [sp, #4]
 80095ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80095ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80095d2:	b281      	uxth	r1, r0
 80095d4:	9301      	str	r3, [sp, #4]
 80095d6:	fa1f f38a 	uxth.w	r3, sl
 80095da:	1a5b      	subs	r3, r3, r1
 80095dc:	0c00      	lsrs	r0, r0, #16
 80095de:	4463      	add	r3, ip
 80095e0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80095e4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80095ee:	4576      	cmp	r6, lr
 80095f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095f4:	f849 3b04 	str.w	r3, [r9], #4
 80095f8:	d8e6      	bhi.n	80095c8 <__mdiff+0x88>
 80095fa:	1b33      	subs	r3, r6, r4
 80095fc:	3b15      	subs	r3, #21
 80095fe:	f023 0303 	bic.w	r3, r3, #3
 8009602:	3415      	adds	r4, #21
 8009604:	3304      	adds	r3, #4
 8009606:	42a6      	cmp	r6, r4
 8009608:	bf38      	it	cc
 800960a:	2304      	movcc	r3, #4
 800960c:	441d      	add	r5, r3
 800960e:	445b      	add	r3, fp
 8009610:	461e      	mov	r6, r3
 8009612:	462c      	mov	r4, r5
 8009614:	4544      	cmp	r4, r8
 8009616:	d30e      	bcc.n	8009636 <__mdiff+0xf6>
 8009618:	f108 0103 	add.w	r1, r8, #3
 800961c:	1b49      	subs	r1, r1, r5
 800961e:	f021 0103 	bic.w	r1, r1, #3
 8009622:	3d03      	subs	r5, #3
 8009624:	45a8      	cmp	r8, r5
 8009626:	bf38      	it	cc
 8009628:	2100      	movcc	r1, #0
 800962a:	440b      	add	r3, r1
 800962c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009630:	b199      	cbz	r1, 800965a <__mdiff+0x11a>
 8009632:	6117      	str	r7, [r2, #16]
 8009634:	e79e      	b.n	8009574 <__mdiff+0x34>
 8009636:	46e6      	mov	lr, ip
 8009638:	f854 1b04 	ldr.w	r1, [r4], #4
 800963c:	fa1f fc81 	uxth.w	ip, r1
 8009640:	44f4      	add	ip, lr
 8009642:	0c08      	lsrs	r0, r1, #16
 8009644:	4471      	add	r1, lr
 8009646:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800964a:	b289      	uxth	r1, r1
 800964c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009650:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009654:	f846 1b04 	str.w	r1, [r6], #4
 8009658:	e7dc      	b.n	8009614 <__mdiff+0xd4>
 800965a:	3f01      	subs	r7, #1
 800965c:	e7e6      	b.n	800962c <__mdiff+0xec>
 800965e:	bf00      	nop
 8009660:	0800e82e 	.word	0x0800e82e
 8009664:	0800e83f 	.word	0x0800e83f

08009668 <__ulp>:
 8009668:	4b0e      	ldr	r3, [pc, #56]	@ (80096a4 <__ulp+0x3c>)
 800966a:	400b      	ands	r3, r1
 800966c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009670:	2b00      	cmp	r3, #0
 8009672:	dc08      	bgt.n	8009686 <__ulp+0x1e>
 8009674:	425b      	negs	r3, r3
 8009676:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800967a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800967e:	da04      	bge.n	800968a <__ulp+0x22>
 8009680:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009684:	4113      	asrs	r3, r2
 8009686:	2200      	movs	r2, #0
 8009688:	e008      	b.n	800969c <__ulp+0x34>
 800968a:	f1a2 0314 	sub.w	r3, r2, #20
 800968e:	2b1e      	cmp	r3, #30
 8009690:	bfd6      	itet	le
 8009692:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009696:	2201      	movgt	r2, #1
 8009698:	40da      	lsrle	r2, r3
 800969a:	2300      	movs	r3, #0
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	7ff00000 	.word	0x7ff00000

080096a8 <__b2d>:
 80096a8:	6902      	ldr	r2, [r0, #16]
 80096aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ac:	f100 0614 	add.w	r6, r0, #20
 80096b0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80096b4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80096b8:	4f1e      	ldr	r7, [pc, #120]	@ (8009734 <__b2d+0x8c>)
 80096ba:	4620      	mov	r0, r4
 80096bc:	f7ff fd54 	bl	8009168 <__hi0bits>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f1c0 0020 	rsb	r0, r0, #32
 80096c6:	2b0a      	cmp	r3, #10
 80096c8:	f1a2 0504 	sub.w	r5, r2, #4
 80096cc:	6008      	str	r0, [r1, #0]
 80096ce:	dc12      	bgt.n	80096f6 <__b2d+0x4e>
 80096d0:	42ae      	cmp	r6, r5
 80096d2:	bf2c      	ite	cs
 80096d4:	2200      	movcs	r2, #0
 80096d6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80096da:	f1c3 0c0b 	rsb	ip, r3, #11
 80096de:	3315      	adds	r3, #21
 80096e0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80096e4:	fa04 f303 	lsl.w	r3, r4, r3
 80096e8:	fa22 f20c 	lsr.w	r2, r2, ip
 80096ec:	ea4e 0107 	orr.w	r1, lr, r7
 80096f0:	431a      	orrs	r2, r3
 80096f2:	4610      	mov	r0, r2
 80096f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f6:	42ae      	cmp	r6, r5
 80096f8:	bf36      	itet	cc
 80096fa:	f1a2 0508 	subcc.w	r5, r2, #8
 80096fe:	2200      	movcs	r2, #0
 8009700:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009704:	3b0b      	subs	r3, #11
 8009706:	d012      	beq.n	800972e <__b2d+0x86>
 8009708:	f1c3 0720 	rsb	r7, r3, #32
 800970c:	fa22 f107 	lsr.w	r1, r2, r7
 8009710:	409c      	lsls	r4, r3
 8009712:	430c      	orrs	r4, r1
 8009714:	42b5      	cmp	r5, r6
 8009716:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800971a:	bf94      	ite	ls
 800971c:	2400      	movls	r4, #0
 800971e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009722:	409a      	lsls	r2, r3
 8009724:	40fc      	lsrs	r4, r7
 8009726:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800972a:	4322      	orrs	r2, r4
 800972c:	e7e1      	b.n	80096f2 <__b2d+0x4a>
 800972e:	ea44 0107 	orr.w	r1, r4, r7
 8009732:	e7de      	b.n	80096f2 <__b2d+0x4a>
 8009734:	3ff00000 	.word	0x3ff00000

08009738 <__d2b>:
 8009738:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800973c:	2101      	movs	r1, #1
 800973e:	4690      	mov	r8, r2
 8009740:	4699      	mov	r9, r3
 8009742:	9e08      	ldr	r6, [sp, #32]
 8009744:	f7ff fc1e 	bl	8008f84 <_Balloc>
 8009748:	4604      	mov	r4, r0
 800974a:	b930      	cbnz	r0, 800975a <__d2b+0x22>
 800974c:	4602      	mov	r2, r0
 800974e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009752:	4b23      	ldr	r3, [pc, #140]	@ (80097e0 <__d2b+0xa8>)
 8009754:	4823      	ldr	r0, [pc, #140]	@ (80097e4 <__d2b+0xac>)
 8009756:	f7fe fca7 	bl	80080a8 <__assert_func>
 800975a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800975e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009762:	b10d      	cbz	r5, 8009768 <__d2b+0x30>
 8009764:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009768:	9301      	str	r3, [sp, #4]
 800976a:	f1b8 0300 	subs.w	r3, r8, #0
 800976e:	d024      	beq.n	80097ba <__d2b+0x82>
 8009770:	4668      	mov	r0, sp
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	f7ff fd17 	bl	80091a6 <__lo0bits>
 8009778:	e9dd 1200 	ldrd	r1, r2, [sp]
 800977c:	b1d8      	cbz	r0, 80097b6 <__d2b+0x7e>
 800977e:	f1c0 0320 	rsb	r3, r0, #32
 8009782:	fa02 f303 	lsl.w	r3, r2, r3
 8009786:	430b      	orrs	r3, r1
 8009788:	40c2      	lsrs	r2, r0
 800978a:	6163      	str	r3, [r4, #20]
 800978c:	9201      	str	r2, [sp, #4]
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	bf0c      	ite	eq
 8009794:	2201      	moveq	r2, #1
 8009796:	2202      	movne	r2, #2
 8009798:	61a3      	str	r3, [r4, #24]
 800979a:	6122      	str	r2, [r4, #16]
 800979c:	b1ad      	cbz	r5, 80097ca <__d2b+0x92>
 800979e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097a2:	4405      	add	r5, r0
 80097a4:	6035      	str	r5, [r6, #0]
 80097a6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ac:	6018      	str	r0, [r3, #0]
 80097ae:	4620      	mov	r0, r4
 80097b0:	b002      	add	sp, #8
 80097b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80097b6:	6161      	str	r1, [r4, #20]
 80097b8:	e7e9      	b.n	800978e <__d2b+0x56>
 80097ba:	a801      	add	r0, sp, #4
 80097bc:	f7ff fcf3 	bl	80091a6 <__lo0bits>
 80097c0:	9b01      	ldr	r3, [sp, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	6163      	str	r3, [r4, #20]
 80097c6:	3020      	adds	r0, #32
 80097c8:	e7e7      	b.n	800979a <__d2b+0x62>
 80097ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097d2:	6030      	str	r0, [r6, #0]
 80097d4:	6918      	ldr	r0, [r3, #16]
 80097d6:	f7ff fcc7 	bl	8009168 <__hi0bits>
 80097da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097de:	e7e4      	b.n	80097aa <__d2b+0x72>
 80097e0:	0800e82e 	.word	0x0800e82e
 80097e4:	0800e83f 	.word	0x0800e83f

080097e8 <__ratio>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	b085      	sub	sp, #20
 80097ee:	e9cd 1000 	strd	r1, r0, [sp]
 80097f2:	a902      	add	r1, sp, #8
 80097f4:	f7ff ff58 	bl	80096a8 <__b2d>
 80097f8:	468b      	mov	fp, r1
 80097fa:	4606      	mov	r6, r0
 80097fc:	460f      	mov	r7, r1
 80097fe:	9800      	ldr	r0, [sp, #0]
 8009800:	a903      	add	r1, sp, #12
 8009802:	f7ff ff51 	bl	80096a8 <__b2d>
 8009806:	460d      	mov	r5, r1
 8009808:	9b01      	ldr	r3, [sp, #4]
 800980a:	4689      	mov	r9, r1
 800980c:	6919      	ldr	r1, [r3, #16]
 800980e:	9b00      	ldr	r3, [sp, #0]
 8009810:	4604      	mov	r4, r0
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	4630      	mov	r0, r6
 8009816:	1ac9      	subs	r1, r1, r3
 8009818:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009822:	2b00      	cmp	r3, #0
 8009824:	bfcd      	iteet	gt
 8009826:	463a      	movgt	r2, r7
 8009828:	462a      	movle	r2, r5
 800982a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800982e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009832:	bfd8      	it	le
 8009834:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009838:	464b      	mov	r3, r9
 800983a:	4622      	mov	r2, r4
 800983c:	4659      	mov	r1, fp
 800983e:	f7f7 f829 	bl	8000894 <__aeabi_ddiv>
 8009842:	b005      	add	sp, #20
 8009844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009848 <__copybits>:
 8009848:	3901      	subs	r1, #1
 800984a:	b570      	push	{r4, r5, r6, lr}
 800984c:	1149      	asrs	r1, r1, #5
 800984e:	6914      	ldr	r4, [r2, #16]
 8009850:	3101      	adds	r1, #1
 8009852:	f102 0314 	add.w	r3, r2, #20
 8009856:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800985a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800985e:	1f05      	subs	r5, r0, #4
 8009860:	42a3      	cmp	r3, r4
 8009862:	d30c      	bcc.n	800987e <__copybits+0x36>
 8009864:	1aa3      	subs	r3, r4, r2
 8009866:	3b11      	subs	r3, #17
 8009868:	f023 0303 	bic.w	r3, r3, #3
 800986c:	3211      	adds	r2, #17
 800986e:	42a2      	cmp	r2, r4
 8009870:	bf88      	it	hi
 8009872:	2300      	movhi	r3, #0
 8009874:	4418      	add	r0, r3
 8009876:	2300      	movs	r3, #0
 8009878:	4288      	cmp	r0, r1
 800987a:	d305      	bcc.n	8009888 <__copybits+0x40>
 800987c:	bd70      	pop	{r4, r5, r6, pc}
 800987e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009882:	f845 6f04 	str.w	r6, [r5, #4]!
 8009886:	e7eb      	b.n	8009860 <__copybits+0x18>
 8009888:	f840 3b04 	str.w	r3, [r0], #4
 800988c:	e7f4      	b.n	8009878 <__copybits+0x30>

0800988e <__any_on>:
 800988e:	f100 0214 	add.w	r2, r0, #20
 8009892:	6900      	ldr	r0, [r0, #16]
 8009894:	114b      	asrs	r3, r1, #5
 8009896:	4298      	cmp	r0, r3
 8009898:	b510      	push	{r4, lr}
 800989a:	db11      	blt.n	80098c0 <__any_on+0x32>
 800989c:	dd0a      	ble.n	80098b4 <__any_on+0x26>
 800989e:	f011 011f 	ands.w	r1, r1, #31
 80098a2:	d007      	beq.n	80098b4 <__any_on+0x26>
 80098a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098a8:	fa24 f001 	lsr.w	r0, r4, r1
 80098ac:	fa00 f101 	lsl.w	r1, r0, r1
 80098b0:	428c      	cmp	r4, r1
 80098b2:	d10b      	bne.n	80098cc <__any_on+0x3e>
 80098b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d803      	bhi.n	80098c4 <__any_on+0x36>
 80098bc:	2000      	movs	r0, #0
 80098be:	bd10      	pop	{r4, pc}
 80098c0:	4603      	mov	r3, r0
 80098c2:	e7f7      	b.n	80098b4 <__any_on+0x26>
 80098c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098c8:	2900      	cmp	r1, #0
 80098ca:	d0f5      	beq.n	80098b8 <__any_on+0x2a>
 80098cc:	2001      	movs	r0, #1
 80098ce:	e7f6      	b.n	80098be <__any_on+0x30>

080098d0 <sulp>:
 80098d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d4:	460f      	mov	r7, r1
 80098d6:	4690      	mov	r8, r2
 80098d8:	f7ff fec6 	bl	8009668 <__ulp>
 80098dc:	4604      	mov	r4, r0
 80098de:	460d      	mov	r5, r1
 80098e0:	f1b8 0f00 	cmp.w	r8, #0
 80098e4:	d011      	beq.n	800990a <sulp+0x3a>
 80098e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80098ea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dd0b      	ble.n	800990a <sulp+0x3a>
 80098f2:	2400      	movs	r4, #0
 80098f4:	051b      	lsls	r3, r3, #20
 80098f6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80098fa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80098fe:	4622      	mov	r2, r4
 8009900:	462b      	mov	r3, r5
 8009902:	f7f6 fe9d 	bl	8000640 <__aeabi_dmul>
 8009906:	4604      	mov	r4, r0
 8009908:	460d      	mov	r5, r1
 800990a:	4620      	mov	r0, r4
 800990c:	4629      	mov	r1, r5
 800990e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009912:	0000      	movs	r0, r0
 8009914:	0000      	movs	r0, r0
	...

08009918 <_strtod_l>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	b09f      	sub	sp, #124	@ 0x7c
 800991e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009920:	2200      	movs	r2, #0
 8009922:	460c      	mov	r4, r1
 8009924:	921a      	str	r2, [sp, #104]	@ 0x68
 8009926:	f04f 0a00 	mov.w	sl, #0
 800992a:	f04f 0b00 	mov.w	fp, #0
 800992e:	460a      	mov	r2, r1
 8009930:	9005      	str	r0, [sp, #20]
 8009932:	9219      	str	r2, [sp, #100]	@ 0x64
 8009934:	7811      	ldrb	r1, [r2, #0]
 8009936:	292b      	cmp	r1, #43	@ 0x2b
 8009938:	d048      	beq.n	80099cc <_strtod_l+0xb4>
 800993a:	d836      	bhi.n	80099aa <_strtod_l+0x92>
 800993c:	290d      	cmp	r1, #13
 800993e:	d830      	bhi.n	80099a2 <_strtod_l+0x8a>
 8009940:	2908      	cmp	r1, #8
 8009942:	d830      	bhi.n	80099a6 <_strtod_l+0x8e>
 8009944:	2900      	cmp	r1, #0
 8009946:	d039      	beq.n	80099bc <_strtod_l+0xa4>
 8009948:	2200      	movs	r2, #0
 800994a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800994c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800994e:	782a      	ldrb	r2, [r5, #0]
 8009950:	2a30      	cmp	r2, #48	@ 0x30
 8009952:	f040 80b1 	bne.w	8009ab8 <_strtod_l+0x1a0>
 8009956:	786a      	ldrb	r2, [r5, #1]
 8009958:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800995c:	2a58      	cmp	r2, #88	@ 0x58
 800995e:	d16c      	bne.n	8009a3a <_strtod_l+0x122>
 8009960:	9302      	str	r3, [sp, #8]
 8009962:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009964:	4a8e      	ldr	r2, [pc, #568]	@ (8009ba0 <_strtod_l+0x288>)
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	ab1a      	add	r3, sp, #104	@ 0x68
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	9805      	ldr	r0, [sp, #20]
 800996e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009970:	a919      	add	r1, sp, #100	@ 0x64
 8009972:	f001 f86d 	bl	800aa50 <__gethex>
 8009976:	f010 060f 	ands.w	r6, r0, #15
 800997a:	4604      	mov	r4, r0
 800997c:	d005      	beq.n	800998a <_strtod_l+0x72>
 800997e:	2e06      	cmp	r6, #6
 8009980:	d126      	bne.n	80099d0 <_strtod_l+0xb8>
 8009982:	2300      	movs	r3, #0
 8009984:	3501      	adds	r5, #1
 8009986:	9519      	str	r5, [sp, #100]	@ 0x64
 8009988:	930b      	str	r3, [sp, #44]	@ 0x2c
 800998a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800998c:	2b00      	cmp	r3, #0
 800998e:	f040 8584 	bne.w	800a49a <_strtod_l+0xb82>
 8009992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009994:	b1bb      	cbz	r3, 80099c6 <_strtod_l+0xae>
 8009996:	4650      	mov	r0, sl
 8009998:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800999c:	b01f      	add	sp, #124	@ 0x7c
 800999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a2:	2920      	cmp	r1, #32
 80099a4:	d1d0      	bne.n	8009948 <_strtod_l+0x30>
 80099a6:	3201      	adds	r2, #1
 80099a8:	e7c3      	b.n	8009932 <_strtod_l+0x1a>
 80099aa:	292d      	cmp	r1, #45	@ 0x2d
 80099ac:	d1cc      	bne.n	8009948 <_strtod_l+0x30>
 80099ae:	2101      	movs	r1, #1
 80099b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80099b2:	1c51      	adds	r1, r2, #1
 80099b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80099b6:	7852      	ldrb	r2, [r2, #1]
 80099b8:	2a00      	cmp	r2, #0
 80099ba:	d1c7      	bne.n	800994c <_strtod_l+0x34>
 80099bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099be:	9419      	str	r4, [sp, #100]	@ 0x64
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f040 8568 	bne.w	800a496 <_strtod_l+0xb7e>
 80099c6:	4650      	mov	r0, sl
 80099c8:	4659      	mov	r1, fp
 80099ca:	e7e7      	b.n	800999c <_strtod_l+0x84>
 80099cc:	2100      	movs	r1, #0
 80099ce:	e7ef      	b.n	80099b0 <_strtod_l+0x98>
 80099d0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099d2:	b13a      	cbz	r2, 80099e4 <_strtod_l+0xcc>
 80099d4:	2135      	movs	r1, #53	@ 0x35
 80099d6:	a81c      	add	r0, sp, #112	@ 0x70
 80099d8:	f7ff ff36 	bl	8009848 <__copybits>
 80099dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099de:	9805      	ldr	r0, [sp, #20]
 80099e0:	f7ff fb10 	bl	8009004 <_Bfree>
 80099e4:	3e01      	subs	r6, #1
 80099e6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80099e8:	2e04      	cmp	r6, #4
 80099ea:	d806      	bhi.n	80099fa <_strtod_l+0xe2>
 80099ec:	e8df f006 	tbb	[pc, r6]
 80099f0:	201d0314 	.word	0x201d0314
 80099f4:	14          	.byte	0x14
 80099f5:	00          	.byte	0x00
 80099f6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80099fa:	05e1      	lsls	r1, r4, #23
 80099fc:	bf48      	it	mi
 80099fe:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009a02:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a06:	0d1b      	lsrs	r3, r3, #20
 8009a08:	051b      	lsls	r3, r3, #20
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1bd      	bne.n	800998a <_strtod_l+0x72>
 8009a0e:	f7fe faf5 	bl	8007ffc <__errno>
 8009a12:	2322      	movs	r3, #34	@ 0x22
 8009a14:	6003      	str	r3, [r0, #0]
 8009a16:	e7b8      	b.n	800998a <_strtod_l+0x72>
 8009a18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009a1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009a20:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009a24:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a28:	e7e7      	b.n	80099fa <_strtod_l+0xe2>
 8009a2a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009ba4 <_strtod_l+0x28c>
 8009a2e:	e7e4      	b.n	80099fa <_strtod_l+0xe2>
 8009a30:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009a34:	f04f 3aff 	mov.w	sl, #4294967295
 8009a38:	e7df      	b.n	80099fa <_strtod_l+0xe2>
 8009a3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a40:	785b      	ldrb	r3, [r3, #1]
 8009a42:	2b30      	cmp	r3, #48	@ 0x30
 8009a44:	d0f9      	beq.n	8009a3a <_strtod_l+0x122>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d09f      	beq.n	800998a <_strtod_l+0x72>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a50:	220a      	movs	r2, #10
 8009a52:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a54:	2300      	movs	r3, #0
 8009a56:	461f      	mov	r7, r3
 8009a58:	9308      	str	r3, [sp, #32]
 8009a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a5c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009a5e:	7805      	ldrb	r5, [r0, #0]
 8009a60:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009a64:	b2d9      	uxtb	r1, r3
 8009a66:	2909      	cmp	r1, #9
 8009a68:	d928      	bls.n	8009abc <_strtod_l+0x1a4>
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	494e      	ldr	r1, [pc, #312]	@ (8009ba8 <_strtod_l+0x290>)
 8009a6e:	f000 ff43 	bl	800a8f8 <strncmp>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d032      	beq.n	8009adc <_strtod_l+0x1c4>
 8009a76:	2000      	movs	r0, #0
 8009a78:	462a      	mov	r2, r5
 8009a7a:	4681      	mov	r9, r0
 8009a7c:	463d      	mov	r5, r7
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2a65      	cmp	r2, #101	@ 0x65
 8009a82:	d001      	beq.n	8009a88 <_strtod_l+0x170>
 8009a84:	2a45      	cmp	r2, #69	@ 0x45
 8009a86:	d114      	bne.n	8009ab2 <_strtod_l+0x19a>
 8009a88:	b91d      	cbnz	r5, 8009a92 <_strtod_l+0x17a>
 8009a8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a8c:	4302      	orrs	r2, r0
 8009a8e:	d095      	beq.n	80099bc <_strtod_l+0xa4>
 8009a90:	2500      	movs	r5, #0
 8009a92:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009a94:	1c62      	adds	r2, r4, #1
 8009a96:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a98:	7862      	ldrb	r2, [r4, #1]
 8009a9a:	2a2b      	cmp	r2, #43	@ 0x2b
 8009a9c:	d077      	beq.n	8009b8e <_strtod_l+0x276>
 8009a9e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009aa0:	d07b      	beq.n	8009b9a <_strtod_l+0x282>
 8009aa2:	f04f 0c00 	mov.w	ip, #0
 8009aa6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009aaa:	2909      	cmp	r1, #9
 8009aac:	f240 8082 	bls.w	8009bb4 <_strtod_l+0x29c>
 8009ab0:	9419      	str	r4, [sp, #100]	@ 0x64
 8009ab2:	f04f 0800 	mov.w	r8, #0
 8009ab6:	e0a2      	b.n	8009bfe <_strtod_l+0x2e6>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	e7c7      	b.n	8009a4c <_strtod_l+0x134>
 8009abc:	2f08      	cmp	r7, #8
 8009abe:	bfd5      	itete	le
 8009ac0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009ac2:	9908      	ldrgt	r1, [sp, #32]
 8009ac4:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ac8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009acc:	f100 0001 	add.w	r0, r0, #1
 8009ad0:	bfd4      	ite	le
 8009ad2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009ad4:	9308      	strgt	r3, [sp, #32]
 8009ad6:	3701      	adds	r7, #1
 8009ad8:	9019      	str	r0, [sp, #100]	@ 0x64
 8009ada:	e7bf      	b.n	8009a5c <_strtod_l+0x144>
 8009adc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ae2:	785a      	ldrb	r2, [r3, #1]
 8009ae4:	b37f      	cbz	r7, 8009b46 <_strtod_l+0x22e>
 8009ae6:	4681      	mov	r9, r0
 8009ae8:	463d      	mov	r5, r7
 8009aea:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009aee:	2b09      	cmp	r3, #9
 8009af0:	d912      	bls.n	8009b18 <_strtod_l+0x200>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e7c4      	b.n	8009a80 <_strtod_l+0x168>
 8009af6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009af8:	3001      	adds	r0, #1
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	9219      	str	r2, [sp, #100]	@ 0x64
 8009afe:	785a      	ldrb	r2, [r3, #1]
 8009b00:	2a30      	cmp	r2, #48	@ 0x30
 8009b02:	d0f8      	beq.n	8009af6 <_strtod_l+0x1de>
 8009b04:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009b08:	2b08      	cmp	r3, #8
 8009b0a:	f200 84cb 	bhi.w	800a4a4 <_strtod_l+0xb8c>
 8009b0e:	4681      	mov	r9, r0
 8009b10:	2000      	movs	r0, #0
 8009b12:	4605      	mov	r5, r0
 8009b14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b16:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b18:	3a30      	subs	r2, #48	@ 0x30
 8009b1a:	f100 0301 	add.w	r3, r0, #1
 8009b1e:	d02a      	beq.n	8009b76 <_strtod_l+0x25e>
 8009b20:	4499      	add	r9, r3
 8009b22:	210a      	movs	r1, #10
 8009b24:	462b      	mov	r3, r5
 8009b26:	eb00 0c05 	add.w	ip, r0, r5
 8009b2a:	4563      	cmp	r3, ip
 8009b2c:	d10d      	bne.n	8009b4a <_strtod_l+0x232>
 8009b2e:	1c69      	adds	r1, r5, #1
 8009b30:	4401      	add	r1, r0
 8009b32:	4428      	add	r0, r5
 8009b34:	2808      	cmp	r0, #8
 8009b36:	dc16      	bgt.n	8009b66 <_strtod_l+0x24e>
 8009b38:	230a      	movs	r3, #10
 8009b3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b3c:	fb03 2300 	mla	r3, r3, r0, r2
 8009b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b42:	2300      	movs	r3, #0
 8009b44:	e018      	b.n	8009b78 <_strtod_l+0x260>
 8009b46:	4638      	mov	r0, r7
 8009b48:	e7da      	b.n	8009b00 <_strtod_l+0x1e8>
 8009b4a:	2b08      	cmp	r3, #8
 8009b4c:	f103 0301 	add.w	r3, r3, #1
 8009b50:	dc03      	bgt.n	8009b5a <_strtod_l+0x242>
 8009b52:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009b54:	434e      	muls	r6, r1
 8009b56:	960a      	str	r6, [sp, #40]	@ 0x28
 8009b58:	e7e7      	b.n	8009b2a <_strtod_l+0x212>
 8009b5a:	2b10      	cmp	r3, #16
 8009b5c:	bfde      	ittt	le
 8009b5e:	9e08      	ldrle	r6, [sp, #32]
 8009b60:	434e      	mulle	r6, r1
 8009b62:	9608      	strle	r6, [sp, #32]
 8009b64:	e7e1      	b.n	8009b2a <_strtod_l+0x212>
 8009b66:	280f      	cmp	r0, #15
 8009b68:	dceb      	bgt.n	8009b42 <_strtod_l+0x22a>
 8009b6a:	230a      	movs	r3, #10
 8009b6c:	9808      	ldr	r0, [sp, #32]
 8009b6e:	fb03 2300 	mla	r3, r3, r0, r2
 8009b72:	9308      	str	r3, [sp, #32]
 8009b74:	e7e5      	b.n	8009b42 <_strtod_l+0x22a>
 8009b76:	4629      	mov	r1, r5
 8009b78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b7a:	460d      	mov	r5, r1
 8009b7c:	1c50      	adds	r0, r2, #1
 8009b7e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b80:	7852      	ldrb	r2, [r2, #1]
 8009b82:	4618      	mov	r0, r3
 8009b84:	e7b1      	b.n	8009aea <_strtod_l+0x1d2>
 8009b86:	f04f 0900 	mov.w	r9, #0
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e77d      	b.n	8009a8a <_strtod_l+0x172>
 8009b8e:	f04f 0c00 	mov.w	ip, #0
 8009b92:	1ca2      	adds	r2, r4, #2
 8009b94:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b96:	78a2      	ldrb	r2, [r4, #2]
 8009b98:	e785      	b.n	8009aa6 <_strtod_l+0x18e>
 8009b9a:	f04f 0c01 	mov.w	ip, #1
 8009b9e:	e7f8      	b.n	8009b92 <_strtod_l+0x27a>
 8009ba0:	0800e9b0 	.word	0x0800e9b0
 8009ba4:	7ff00000 	.word	0x7ff00000
 8009ba8:	0800e998 	.word	0x0800e998
 8009bac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bae:	1c51      	adds	r1, r2, #1
 8009bb0:	9119      	str	r1, [sp, #100]	@ 0x64
 8009bb2:	7852      	ldrb	r2, [r2, #1]
 8009bb4:	2a30      	cmp	r2, #48	@ 0x30
 8009bb6:	d0f9      	beq.n	8009bac <_strtod_l+0x294>
 8009bb8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009bbc:	2908      	cmp	r1, #8
 8009bbe:	f63f af78 	bhi.w	8009ab2 <_strtod_l+0x19a>
 8009bc2:	f04f 080a 	mov.w	r8, #10
 8009bc6:	3a30      	subs	r2, #48	@ 0x30
 8009bc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bcc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009bce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bd0:	1c56      	adds	r6, r2, #1
 8009bd2:	9619      	str	r6, [sp, #100]	@ 0x64
 8009bd4:	7852      	ldrb	r2, [r2, #1]
 8009bd6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009bda:	f1be 0f09 	cmp.w	lr, #9
 8009bde:	d939      	bls.n	8009c54 <_strtod_l+0x33c>
 8009be0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009be2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009be6:	1a76      	subs	r6, r6, r1
 8009be8:	2e08      	cmp	r6, #8
 8009bea:	dc03      	bgt.n	8009bf4 <_strtod_l+0x2dc>
 8009bec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009bee:	4588      	cmp	r8, r1
 8009bf0:	bfa8      	it	ge
 8009bf2:	4688      	movge	r8, r1
 8009bf4:	f1bc 0f00 	cmp.w	ip, #0
 8009bf8:	d001      	beq.n	8009bfe <_strtod_l+0x2e6>
 8009bfa:	f1c8 0800 	rsb	r8, r8, #0
 8009bfe:	2d00      	cmp	r5, #0
 8009c00:	d14e      	bne.n	8009ca0 <_strtod_l+0x388>
 8009c02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c04:	4308      	orrs	r0, r1
 8009c06:	f47f aec0 	bne.w	800998a <_strtod_l+0x72>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f47f aed6 	bne.w	80099bc <_strtod_l+0xa4>
 8009c10:	2a69      	cmp	r2, #105	@ 0x69
 8009c12:	d028      	beq.n	8009c66 <_strtod_l+0x34e>
 8009c14:	dc25      	bgt.n	8009c62 <_strtod_l+0x34a>
 8009c16:	2a49      	cmp	r2, #73	@ 0x49
 8009c18:	d025      	beq.n	8009c66 <_strtod_l+0x34e>
 8009c1a:	2a4e      	cmp	r2, #78	@ 0x4e
 8009c1c:	f47f aece 	bne.w	80099bc <_strtod_l+0xa4>
 8009c20:	499a      	ldr	r1, [pc, #616]	@ (8009e8c <_strtod_l+0x574>)
 8009c22:	a819      	add	r0, sp, #100	@ 0x64
 8009c24:	f001 f936 	bl	800ae94 <__match>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	f43f aec7 	beq.w	80099bc <_strtod_l+0xa4>
 8009c2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	2b28      	cmp	r3, #40	@ 0x28
 8009c34:	d12e      	bne.n	8009c94 <_strtod_l+0x37c>
 8009c36:	4996      	ldr	r1, [pc, #600]	@ (8009e90 <_strtod_l+0x578>)
 8009c38:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c3a:	a819      	add	r0, sp, #100	@ 0x64
 8009c3c:	f001 f93e 	bl	800aebc <__hexnan>
 8009c40:	2805      	cmp	r0, #5
 8009c42:	d127      	bne.n	8009c94 <_strtod_l+0x37c>
 8009c44:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c46:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009c4a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009c4e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009c52:	e69a      	b.n	800998a <_strtod_l+0x72>
 8009c54:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c56:	fb08 2101 	mla	r1, r8, r1, r2
 8009c5a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009c5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c60:	e7b5      	b.n	8009bce <_strtod_l+0x2b6>
 8009c62:	2a6e      	cmp	r2, #110	@ 0x6e
 8009c64:	e7da      	b.n	8009c1c <_strtod_l+0x304>
 8009c66:	498b      	ldr	r1, [pc, #556]	@ (8009e94 <_strtod_l+0x57c>)
 8009c68:	a819      	add	r0, sp, #100	@ 0x64
 8009c6a:	f001 f913 	bl	800ae94 <__match>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f43f aea4 	beq.w	80099bc <_strtod_l+0xa4>
 8009c74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c76:	4988      	ldr	r1, [pc, #544]	@ (8009e98 <_strtod_l+0x580>)
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	a819      	add	r0, sp, #100	@ 0x64
 8009c7c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c7e:	f001 f909 	bl	800ae94 <__match>
 8009c82:	b910      	cbnz	r0, 8009c8a <_strtod_l+0x372>
 8009c84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c86:	3301      	adds	r3, #1
 8009c88:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c8a:	f04f 0a00 	mov.w	sl, #0
 8009c8e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009e9c <_strtod_l+0x584>
 8009c92:	e67a      	b.n	800998a <_strtod_l+0x72>
 8009c94:	4882      	ldr	r0, [pc, #520]	@ (8009ea0 <_strtod_l+0x588>)
 8009c96:	f000 fe51 	bl	800a93c <nan>
 8009c9a:	4682      	mov	sl, r0
 8009c9c:	468b      	mov	fp, r1
 8009c9e:	e674      	b.n	800998a <_strtod_l+0x72>
 8009ca0:	eba8 0309 	sub.w	r3, r8, r9
 8009ca4:	2f00      	cmp	r7, #0
 8009ca6:	bf08      	it	eq
 8009ca8:	462f      	moveq	r7, r5
 8009caa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009cac:	2d10      	cmp	r5, #16
 8009cae:	462c      	mov	r4, r5
 8009cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cb2:	bfa8      	it	ge
 8009cb4:	2410      	movge	r4, #16
 8009cb6:	f7f6 fc49 	bl	800054c <__aeabi_ui2d>
 8009cba:	2d09      	cmp	r5, #9
 8009cbc:	4682      	mov	sl, r0
 8009cbe:	468b      	mov	fp, r1
 8009cc0:	dc11      	bgt.n	8009ce6 <_strtod_l+0x3ce>
 8009cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f43f ae60 	beq.w	800998a <_strtod_l+0x72>
 8009cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ccc:	dd76      	ble.n	8009dbc <_strtod_l+0x4a4>
 8009cce:	2b16      	cmp	r3, #22
 8009cd0:	dc5d      	bgt.n	8009d8e <_strtod_l+0x476>
 8009cd2:	4974      	ldr	r1, [pc, #464]	@ (8009ea4 <_strtod_l+0x58c>)
 8009cd4:	4652      	mov	r2, sl
 8009cd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009cda:	465b      	mov	r3, fp
 8009cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce0:	f7f6 fcae 	bl	8000640 <__aeabi_dmul>
 8009ce4:	e7d9      	b.n	8009c9a <_strtod_l+0x382>
 8009ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8009ea4 <_strtod_l+0x58c>)
 8009ce8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009cf0:	f7f6 fca6 	bl	8000640 <__aeabi_dmul>
 8009cf4:	4682      	mov	sl, r0
 8009cf6:	9808      	ldr	r0, [sp, #32]
 8009cf8:	468b      	mov	fp, r1
 8009cfa:	f7f6 fc27 	bl	800054c <__aeabi_ui2d>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4650      	mov	r0, sl
 8009d04:	4659      	mov	r1, fp
 8009d06:	f7f6 fae5 	bl	80002d4 <__adddf3>
 8009d0a:	2d0f      	cmp	r5, #15
 8009d0c:	4682      	mov	sl, r0
 8009d0e:	468b      	mov	fp, r1
 8009d10:	ddd7      	ble.n	8009cc2 <_strtod_l+0x3aa>
 8009d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d14:	1b2c      	subs	r4, r5, r4
 8009d16:	441c      	add	r4, r3
 8009d18:	2c00      	cmp	r4, #0
 8009d1a:	f340 8096 	ble.w	8009e4a <_strtod_l+0x532>
 8009d1e:	f014 030f 	ands.w	r3, r4, #15
 8009d22:	d00a      	beq.n	8009d3a <_strtod_l+0x422>
 8009d24:	495f      	ldr	r1, [pc, #380]	@ (8009ea4 <_strtod_l+0x58c>)
 8009d26:	4652      	mov	r2, sl
 8009d28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d30:	465b      	mov	r3, fp
 8009d32:	f7f6 fc85 	bl	8000640 <__aeabi_dmul>
 8009d36:	4682      	mov	sl, r0
 8009d38:	468b      	mov	fp, r1
 8009d3a:	f034 040f 	bics.w	r4, r4, #15
 8009d3e:	d073      	beq.n	8009e28 <_strtod_l+0x510>
 8009d40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009d44:	dd48      	ble.n	8009dd8 <_strtod_l+0x4c0>
 8009d46:	2400      	movs	r4, #0
 8009d48:	46a0      	mov	r8, r4
 8009d4a:	46a1      	mov	r9, r4
 8009d4c:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d4e:	2322      	movs	r3, #34	@ 0x22
 8009d50:	f04f 0a00 	mov.w	sl, #0
 8009d54:	9a05      	ldr	r2, [sp, #20]
 8009d56:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009e9c <_strtod_l+0x584>
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f43f ae13 	beq.w	800998a <_strtod_l+0x72>
 8009d64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d66:	9805      	ldr	r0, [sp, #20]
 8009d68:	f7ff f94c 	bl	8009004 <_Bfree>
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	9805      	ldr	r0, [sp, #20]
 8009d70:	f7ff f948 	bl	8009004 <_Bfree>
 8009d74:	4641      	mov	r1, r8
 8009d76:	9805      	ldr	r0, [sp, #20]
 8009d78:	f7ff f944 	bl	8009004 <_Bfree>
 8009d7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d7e:	9805      	ldr	r0, [sp, #20]
 8009d80:	f7ff f940 	bl	8009004 <_Bfree>
 8009d84:	4621      	mov	r1, r4
 8009d86:	9805      	ldr	r0, [sp, #20]
 8009d88:	f7ff f93c 	bl	8009004 <_Bfree>
 8009d8c:	e5fd      	b.n	800998a <_strtod_l+0x72>
 8009d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009d94:	4293      	cmp	r3, r2
 8009d96:	dbbc      	blt.n	8009d12 <_strtod_l+0x3fa>
 8009d98:	4c42      	ldr	r4, [pc, #264]	@ (8009ea4 <_strtod_l+0x58c>)
 8009d9a:	f1c5 050f 	rsb	r5, r5, #15
 8009d9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009da2:	4652      	mov	r2, sl
 8009da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009da8:	465b      	mov	r3, fp
 8009daa:	f7f6 fc49 	bl	8000640 <__aeabi_dmul>
 8009dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db0:	1b5d      	subs	r5, r3, r5
 8009db2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009db6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009dba:	e791      	b.n	8009ce0 <_strtod_l+0x3c8>
 8009dbc:	3316      	adds	r3, #22
 8009dbe:	dba8      	blt.n	8009d12 <_strtod_l+0x3fa>
 8009dc0:	4b38      	ldr	r3, [pc, #224]	@ (8009ea4 <_strtod_l+0x58c>)
 8009dc2:	eba9 0808 	sub.w	r8, r9, r8
 8009dc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009dca:	4650      	mov	r0, sl
 8009dcc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009dd0:	4659      	mov	r1, fp
 8009dd2:	f7f6 fd5f 	bl	8000894 <__aeabi_ddiv>
 8009dd6:	e760      	b.n	8009c9a <_strtod_l+0x382>
 8009dd8:	4b33      	ldr	r3, [pc, #204]	@ (8009ea8 <_strtod_l+0x590>)
 8009dda:	4650      	mov	r0, sl
 8009ddc:	9308      	str	r3, [sp, #32]
 8009dde:	2300      	movs	r3, #0
 8009de0:	4659      	mov	r1, fp
 8009de2:	461e      	mov	r6, r3
 8009de4:	1124      	asrs	r4, r4, #4
 8009de6:	2c01      	cmp	r4, #1
 8009de8:	dc21      	bgt.n	8009e2e <_strtod_l+0x516>
 8009dea:	b10b      	cbz	r3, 8009df0 <_strtod_l+0x4d8>
 8009dec:	4682      	mov	sl, r0
 8009dee:	468b      	mov	fp, r1
 8009df0:	492d      	ldr	r1, [pc, #180]	@ (8009ea8 <_strtod_l+0x590>)
 8009df2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009df6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009dfa:	4652      	mov	r2, sl
 8009dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e00:	465b      	mov	r3, fp
 8009e02:	f7f6 fc1d 	bl	8000640 <__aeabi_dmul>
 8009e06:	4b25      	ldr	r3, [pc, #148]	@ (8009e9c <_strtod_l+0x584>)
 8009e08:	460a      	mov	r2, r1
 8009e0a:	400b      	ands	r3, r1
 8009e0c:	4927      	ldr	r1, [pc, #156]	@ (8009eac <_strtod_l+0x594>)
 8009e0e:	4682      	mov	sl, r0
 8009e10:	428b      	cmp	r3, r1
 8009e12:	d898      	bhi.n	8009d46 <_strtod_l+0x42e>
 8009e14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009e18:	428b      	cmp	r3, r1
 8009e1a:	bf86      	itte	hi
 8009e1c:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e20:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009eb0 <_strtod_l+0x598>
 8009e24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009e28:	2300      	movs	r3, #0
 8009e2a:	9308      	str	r3, [sp, #32]
 8009e2c:	e07a      	b.n	8009f24 <_strtod_l+0x60c>
 8009e2e:	07e2      	lsls	r2, r4, #31
 8009e30:	d505      	bpl.n	8009e3e <_strtod_l+0x526>
 8009e32:	9b08      	ldr	r3, [sp, #32]
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 fc02 	bl	8000640 <__aeabi_dmul>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	9a08      	ldr	r2, [sp, #32]
 8009e40:	3601      	adds	r6, #1
 8009e42:	3208      	adds	r2, #8
 8009e44:	1064      	asrs	r4, r4, #1
 8009e46:	9208      	str	r2, [sp, #32]
 8009e48:	e7cd      	b.n	8009de6 <_strtod_l+0x4ce>
 8009e4a:	d0ed      	beq.n	8009e28 <_strtod_l+0x510>
 8009e4c:	4264      	negs	r4, r4
 8009e4e:	f014 020f 	ands.w	r2, r4, #15
 8009e52:	d00a      	beq.n	8009e6a <_strtod_l+0x552>
 8009e54:	4b13      	ldr	r3, [pc, #76]	@ (8009ea4 <_strtod_l+0x58c>)
 8009e56:	4650      	mov	r0, sl
 8009e58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e5c:	4659      	mov	r1, fp
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	f7f6 fd17 	bl	8000894 <__aeabi_ddiv>
 8009e66:	4682      	mov	sl, r0
 8009e68:	468b      	mov	fp, r1
 8009e6a:	1124      	asrs	r4, r4, #4
 8009e6c:	d0dc      	beq.n	8009e28 <_strtod_l+0x510>
 8009e6e:	2c1f      	cmp	r4, #31
 8009e70:	dd20      	ble.n	8009eb4 <_strtod_l+0x59c>
 8009e72:	2400      	movs	r4, #0
 8009e74:	46a0      	mov	r8, r4
 8009e76:	46a1      	mov	r9, r4
 8009e78:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e7a:	2322      	movs	r3, #34	@ 0x22
 8009e7c:	9a05      	ldr	r2, [sp, #20]
 8009e7e:	f04f 0a00 	mov.w	sl, #0
 8009e82:	f04f 0b00 	mov.w	fp, #0
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	e768      	b.n	8009d5c <_strtod_l+0x444>
 8009e8a:	bf00      	nop
 8009e8c:	0800e6f0 	.word	0x0800e6f0
 8009e90:	0800e99c 	.word	0x0800e99c
 8009e94:	0800e6e8 	.word	0x0800e6e8
 8009e98:	0800e7cc 	.word	0x0800e7cc
 8009e9c:	7ff00000 	.word	0x7ff00000
 8009ea0:	0800e7c8 	.word	0x0800e7c8
 8009ea4:	0800e8d0 	.word	0x0800e8d0
 8009ea8:	0800e8a8 	.word	0x0800e8a8
 8009eac:	7ca00000 	.word	0x7ca00000
 8009eb0:	7fefffff 	.word	0x7fefffff
 8009eb4:	f014 0310 	ands.w	r3, r4, #16
 8009eb8:	bf18      	it	ne
 8009eba:	236a      	movne	r3, #106	@ 0x6a
 8009ebc:	4650      	mov	r0, sl
 8009ebe:	9308      	str	r3, [sp, #32]
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	4ea9      	ldr	r6, [pc, #676]	@ (800a16c <_strtod_l+0x854>)
 8009ec6:	07e2      	lsls	r2, r4, #31
 8009ec8:	d504      	bpl.n	8009ed4 <_strtod_l+0x5bc>
 8009eca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ece:	f7f6 fbb7 	bl	8000640 <__aeabi_dmul>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	1064      	asrs	r4, r4, #1
 8009ed6:	f106 0608 	add.w	r6, r6, #8
 8009eda:	d1f4      	bne.n	8009ec6 <_strtod_l+0x5ae>
 8009edc:	b10b      	cbz	r3, 8009ee2 <_strtod_l+0x5ca>
 8009ede:	4682      	mov	sl, r0
 8009ee0:	468b      	mov	fp, r1
 8009ee2:	9b08      	ldr	r3, [sp, #32]
 8009ee4:	b1b3      	cbz	r3, 8009f14 <_strtod_l+0x5fc>
 8009ee6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009eea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	4659      	mov	r1, fp
 8009ef2:	dd0f      	ble.n	8009f14 <_strtod_l+0x5fc>
 8009ef4:	2b1f      	cmp	r3, #31
 8009ef6:	dd57      	ble.n	8009fa8 <_strtod_l+0x690>
 8009ef8:	2b34      	cmp	r3, #52	@ 0x34
 8009efa:	bfd8      	it	le
 8009efc:	f04f 33ff 	movle.w	r3, #4294967295
 8009f00:	f04f 0a00 	mov.w	sl, #0
 8009f04:	bfcf      	iteee	gt
 8009f06:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009f0a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009f0e:	4093      	lslle	r3, r2
 8009f10:	ea03 0b01 	andle.w	fp, r3, r1
 8009f14:	2200      	movs	r2, #0
 8009f16:	2300      	movs	r3, #0
 8009f18:	4650      	mov	r0, sl
 8009f1a:	4659      	mov	r1, fp
 8009f1c:	f7f6 fdf8 	bl	8000b10 <__aeabi_dcmpeq>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d1a6      	bne.n	8009e72 <_strtod_l+0x55a>
 8009f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f26:	463a      	mov	r2, r7
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009f2c:	462b      	mov	r3, r5
 8009f2e:	9805      	ldr	r0, [sp, #20]
 8009f30:	f7ff f8d0 	bl	80090d4 <__s2b>
 8009f34:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f36:	2800      	cmp	r0, #0
 8009f38:	f43f af05 	beq.w	8009d46 <_strtod_l+0x42e>
 8009f3c:	2400      	movs	r4, #0
 8009f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f40:	eba9 0308 	sub.w	r3, r9, r8
 8009f44:	2a00      	cmp	r2, #0
 8009f46:	bfa8      	it	ge
 8009f48:	2300      	movge	r3, #0
 8009f4a:	46a0      	mov	r8, r4
 8009f4c:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009f52:	9316      	str	r3, [sp, #88]	@ 0x58
 8009f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f56:	9805      	ldr	r0, [sp, #20]
 8009f58:	6859      	ldr	r1, [r3, #4]
 8009f5a:	f7ff f813 	bl	8008f84 <_Balloc>
 8009f5e:	4681      	mov	r9, r0
 8009f60:	2800      	cmp	r0, #0
 8009f62:	f43f aef4 	beq.w	8009d4e <_strtod_l+0x436>
 8009f66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f68:	300c      	adds	r0, #12
 8009f6a:	691a      	ldr	r2, [r3, #16]
 8009f6c:	f103 010c 	add.w	r1, r3, #12
 8009f70:	3202      	adds	r2, #2
 8009f72:	0092      	lsls	r2, r2, #2
 8009f74:	f7fe f885 	bl	8008082 <memcpy>
 8009f78:	ab1c      	add	r3, sp, #112	@ 0x70
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	4652      	mov	r2, sl
 8009f82:	465b      	mov	r3, fp
 8009f84:	9805      	ldr	r0, [sp, #20]
 8009f86:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009f8a:	f7ff fbd5 	bl	8009738 <__d2b>
 8009f8e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f90:	2800      	cmp	r0, #0
 8009f92:	f43f aedc 	beq.w	8009d4e <_strtod_l+0x436>
 8009f96:	2101      	movs	r1, #1
 8009f98:	9805      	ldr	r0, [sp, #20]
 8009f9a:	f7ff f931 	bl	8009200 <__i2b>
 8009f9e:	4680      	mov	r8, r0
 8009fa0:	b948      	cbnz	r0, 8009fb6 <_strtod_l+0x69e>
 8009fa2:	f04f 0800 	mov.w	r8, #0
 8009fa6:	e6d2      	b.n	8009d4e <_strtod_l+0x436>
 8009fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fac:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb0:	ea03 0a0a 	and.w	sl, r3, sl
 8009fb4:	e7ae      	b.n	8009f14 <_strtod_l+0x5fc>
 8009fb6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009fb8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009fba:	2d00      	cmp	r5, #0
 8009fbc:	bfab      	itete	ge
 8009fbe:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009fc0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009fc2:	18ef      	addge	r7, r5, r3
 8009fc4:	1b5e      	sublt	r6, r3, r5
 8009fc6:	9b08      	ldr	r3, [sp, #32]
 8009fc8:	bfa8      	it	ge
 8009fca:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009fcc:	eba5 0503 	sub.w	r5, r5, r3
 8009fd0:	4415      	add	r5, r2
 8009fd2:	4b67      	ldr	r3, [pc, #412]	@ (800a170 <_strtod_l+0x858>)
 8009fd4:	f105 35ff 	add.w	r5, r5, #4294967295
 8009fd8:	bfb8      	it	lt
 8009fda:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009fdc:	429d      	cmp	r5, r3
 8009fde:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009fe2:	da50      	bge.n	800a086 <_strtod_l+0x76e>
 8009fe4:	1b5b      	subs	r3, r3, r5
 8009fe6:	2b1f      	cmp	r3, #31
 8009fe8:	f04f 0101 	mov.w	r1, #1
 8009fec:	eba2 0203 	sub.w	r2, r2, r3
 8009ff0:	dc3d      	bgt.n	800a06e <_strtod_l+0x756>
 8009ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ff6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ffc:	18bd      	adds	r5, r7, r2
 8009ffe:	9b08      	ldr	r3, [sp, #32]
 800a000:	42af      	cmp	r7, r5
 800a002:	4416      	add	r6, r2
 800a004:	441e      	add	r6, r3
 800a006:	463b      	mov	r3, r7
 800a008:	bfa8      	it	ge
 800a00a:	462b      	movge	r3, r5
 800a00c:	42b3      	cmp	r3, r6
 800a00e:	bfa8      	it	ge
 800a010:	4633      	movge	r3, r6
 800a012:	2b00      	cmp	r3, #0
 800a014:	bfc2      	ittt	gt
 800a016:	1aed      	subgt	r5, r5, r3
 800a018:	1af6      	subgt	r6, r6, r3
 800a01a:	1aff      	subgt	r7, r7, r3
 800a01c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dd16      	ble.n	800a050 <_strtod_l+0x738>
 800a022:	4641      	mov	r1, r8
 800a024:	461a      	mov	r2, r3
 800a026:	9805      	ldr	r0, [sp, #20]
 800a028:	f7ff f9a8 	bl	800937c <__pow5mult>
 800a02c:	4680      	mov	r8, r0
 800a02e:	2800      	cmp	r0, #0
 800a030:	d0b7      	beq.n	8009fa2 <_strtod_l+0x68a>
 800a032:	4601      	mov	r1, r0
 800a034:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a036:	9805      	ldr	r0, [sp, #20]
 800a038:	f7ff f8f8 	bl	800922c <__multiply>
 800a03c:	900e      	str	r0, [sp, #56]	@ 0x38
 800a03e:	2800      	cmp	r0, #0
 800a040:	f43f ae85 	beq.w	8009d4e <_strtod_l+0x436>
 800a044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a046:	9805      	ldr	r0, [sp, #20]
 800a048:	f7fe ffdc 	bl	8009004 <_Bfree>
 800a04c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a04e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a050:	2d00      	cmp	r5, #0
 800a052:	dc1d      	bgt.n	800a090 <_strtod_l+0x778>
 800a054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a056:	2b00      	cmp	r3, #0
 800a058:	dd23      	ble.n	800a0a2 <_strtod_l+0x78a>
 800a05a:	4649      	mov	r1, r9
 800a05c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a05e:	9805      	ldr	r0, [sp, #20]
 800a060:	f7ff f98c 	bl	800937c <__pow5mult>
 800a064:	4681      	mov	r9, r0
 800a066:	b9e0      	cbnz	r0, 800a0a2 <_strtod_l+0x78a>
 800a068:	f04f 0900 	mov.w	r9, #0
 800a06c:	e66f      	b.n	8009d4e <_strtod_l+0x436>
 800a06e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a072:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a076:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a07a:	35e2      	adds	r5, #226	@ 0xe2
 800a07c:	fa01 f305 	lsl.w	r3, r1, r5
 800a080:	9310      	str	r3, [sp, #64]	@ 0x40
 800a082:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a084:	e7ba      	b.n	8009ffc <_strtod_l+0x6e4>
 800a086:	2300      	movs	r3, #0
 800a088:	9310      	str	r3, [sp, #64]	@ 0x40
 800a08a:	2301      	movs	r3, #1
 800a08c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a08e:	e7b5      	b.n	8009ffc <_strtod_l+0x6e4>
 800a090:	462a      	mov	r2, r5
 800a092:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a094:	9805      	ldr	r0, [sp, #20]
 800a096:	f7ff f9cb 	bl	8009430 <__lshift>
 800a09a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d1d9      	bne.n	800a054 <_strtod_l+0x73c>
 800a0a0:	e655      	b.n	8009d4e <_strtod_l+0x436>
 800a0a2:	2e00      	cmp	r6, #0
 800a0a4:	dd07      	ble.n	800a0b6 <_strtod_l+0x79e>
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	4632      	mov	r2, r6
 800a0aa:	9805      	ldr	r0, [sp, #20]
 800a0ac:	f7ff f9c0 	bl	8009430 <__lshift>
 800a0b0:	4681      	mov	r9, r0
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d0d8      	beq.n	800a068 <_strtod_l+0x750>
 800a0b6:	2f00      	cmp	r7, #0
 800a0b8:	dd08      	ble.n	800a0cc <_strtod_l+0x7b4>
 800a0ba:	4641      	mov	r1, r8
 800a0bc:	463a      	mov	r2, r7
 800a0be:	9805      	ldr	r0, [sp, #20]
 800a0c0:	f7ff f9b6 	bl	8009430 <__lshift>
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f43f ae41 	beq.w	8009d4e <_strtod_l+0x436>
 800a0cc:	464a      	mov	r2, r9
 800a0ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0d0:	9805      	ldr	r0, [sp, #20]
 800a0d2:	f7ff fa35 	bl	8009540 <__mdiff>
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	f43f ae38 	beq.w	8009d4e <_strtod_l+0x436>
 800a0de:	68c3      	ldr	r3, [r0, #12]
 800a0e0:	4641      	mov	r1, r8
 800a0e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60c3      	str	r3, [r0, #12]
 800a0e8:	f7ff fa0e 	bl	8009508 <__mcmp>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	da45      	bge.n	800a17c <_strtod_l+0x864>
 800a0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0f2:	ea53 030a 	orrs.w	r3, r3, sl
 800a0f6:	d16b      	bne.n	800a1d0 <_strtod_l+0x8b8>
 800a0f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d167      	bne.n	800a1d0 <_strtod_l+0x8b8>
 800a100:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a104:	0d1b      	lsrs	r3, r3, #20
 800a106:	051b      	lsls	r3, r3, #20
 800a108:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a10c:	d960      	bls.n	800a1d0 <_strtod_l+0x8b8>
 800a10e:	6963      	ldr	r3, [r4, #20]
 800a110:	b913      	cbnz	r3, 800a118 <_strtod_l+0x800>
 800a112:	6923      	ldr	r3, [r4, #16]
 800a114:	2b01      	cmp	r3, #1
 800a116:	dd5b      	ble.n	800a1d0 <_strtod_l+0x8b8>
 800a118:	4621      	mov	r1, r4
 800a11a:	2201      	movs	r2, #1
 800a11c:	9805      	ldr	r0, [sp, #20]
 800a11e:	f7ff f987 	bl	8009430 <__lshift>
 800a122:	4641      	mov	r1, r8
 800a124:	4604      	mov	r4, r0
 800a126:	f7ff f9ef 	bl	8009508 <__mcmp>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	dd50      	ble.n	800a1d0 <_strtod_l+0x8b8>
 800a12e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a132:	9a08      	ldr	r2, [sp, #32]
 800a134:	0d1b      	lsrs	r3, r3, #20
 800a136:	051b      	lsls	r3, r3, #20
 800a138:	2a00      	cmp	r2, #0
 800a13a:	d06a      	beq.n	800a212 <_strtod_l+0x8fa>
 800a13c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a140:	d867      	bhi.n	800a212 <_strtod_l+0x8fa>
 800a142:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a146:	f67f ae98 	bls.w	8009e7a <_strtod_l+0x562>
 800a14a:	4650      	mov	r0, sl
 800a14c:	4659      	mov	r1, fp
 800a14e:	4b09      	ldr	r3, [pc, #36]	@ (800a174 <_strtod_l+0x85c>)
 800a150:	2200      	movs	r2, #0
 800a152:	f7f6 fa75 	bl	8000640 <__aeabi_dmul>
 800a156:	4b08      	ldr	r3, [pc, #32]	@ (800a178 <_strtod_l+0x860>)
 800a158:	4682      	mov	sl, r0
 800a15a:	400b      	ands	r3, r1
 800a15c:	468b      	mov	fp, r1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f47f ae00 	bne.w	8009d64 <_strtod_l+0x44c>
 800a164:	2322      	movs	r3, #34	@ 0x22
 800a166:	9a05      	ldr	r2, [sp, #20]
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	e5fb      	b.n	8009d64 <_strtod_l+0x44c>
 800a16c:	0800e9c8 	.word	0x0800e9c8
 800a170:	fffffc02 	.word	0xfffffc02
 800a174:	39500000 	.word	0x39500000
 800a178:	7ff00000 	.word	0x7ff00000
 800a17c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a180:	d165      	bne.n	800a24e <_strtod_l+0x936>
 800a182:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a188:	b35a      	cbz	r2, 800a1e2 <_strtod_l+0x8ca>
 800a18a:	4a99      	ldr	r2, [pc, #612]	@ (800a3f0 <_strtod_l+0xad8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d12b      	bne.n	800a1e8 <_strtod_l+0x8d0>
 800a190:	9b08      	ldr	r3, [sp, #32]
 800a192:	4651      	mov	r1, sl
 800a194:	b303      	cbz	r3, 800a1d8 <_strtod_l+0x8c0>
 800a196:	465a      	mov	r2, fp
 800a198:	4b96      	ldr	r3, [pc, #600]	@ (800a3f4 <_strtod_l+0xadc>)
 800a19a:	4013      	ands	r3, r2
 800a19c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a4:	d81b      	bhi.n	800a1de <_strtod_l+0x8c6>
 800a1a6:	0d1b      	lsrs	r3, r3, #20
 800a1a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b0:	4299      	cmp	r1, r3
 800a1b2:	d119      	bne.n	800a1e8 <_strtod_l+0x8d0>
 800a1b4:	4b90      	ldr	r3, [pc, #576]	@ (800a3f8 <_strtod_l+0xae0>)
 800a1b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d102      	bne.n	800a1c2 <_strtod_l+0x8aa>
 800a1bc:	3101      	adds	r1, #1
 800a1be:	f43f adc6 	beq.w	8009d4e <_strtod_l+0x436>
 800a1c2:	f04f 0a00 	mov.w	sl, #0
 800a1c6:	4b8b      	ldr	r3, [pc, #556]	@ (800a3f4 <_strtod_l+0xadc>)
 800a1c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1ca:	401a      	ands	r2, r3
 800a1cc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a1d0:	9b08      	ldr	r3, [sp, #32]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1b9      	bne.n	800a14a <_strtod_l+0x832>
 800a1d6:	e5c5      	b.n	8009d64 <_strtod_l+0x44c>
 800a1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1dc:	e7e8      	b.n	800a1b0 <_strtod_l+0x898>
 800a1de:	4613      	mov	r3, r2
 800a1e0:	e7e6      	b.n	800a1b0 <_strtod_l+0x898>
 800a1e2:	ea53 030a 	orrs.w	r3, r3, sl
 800a1e6:	d0a2      	beq.n	800a12e <_strtod_l+0x816>
 800a1e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1ea:	b1db      	cbz	r3, 800a224 <_strtod_l+0x90c>
 800a1ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1ee:	4213      	tst	r3, r2
 800a1f0:	d0ee      	beq.n	800a1d0 <_strtod_l+0x8b8>
 800a1f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1f4:	4650      	mov	r0, sl
 800a1f6:	4659      	mov	r1, fp
 800a1f8:	9a08      	ldr	r2, [sp, #32]
 800a1fa:	b1bb      	cbz	r3, 800a22c <_strtod_l+0x914>
 800a1fc:	f7ff fb68 	bl	80098d0 <sulp>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a208:	f7f6 f864 	bl	80002d4 <__adddf3>
 800a20c:	4682      	mov	sl, r0
 800a20e:	468b      	mov	fp, r1
 800a210:	e7de      	b.n	800a1d0 <_strtod_l+0x8b8>
 800a212:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a216:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a21a:	f04f 3aff 	mov.w	sl, #4294967295
 800a21e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a222:	e7d5      	b.n	800a1d0 <_strtod_l+0x8b8>
 800a224:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a226:	ea13 0f0a 	tst.w	r3, sl
 800a22a:	e7e1      	b.n	800a1f0 <_strtod_l+0x8d8>
 800a22c:	f7ff fb50 	bl	80098d0 <sulp>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a238:	f7f6 f84a 	bl	80002d0 <__aeabi_dsub>
 800a23c:	2200      	movs	r2, #0
 800a23e:	2300      	movs	r3, #0
 800a240:	4682      	mov	sl, r0
 800a242:	468b      	mov	fp, r1
 800a244:	f7f6 fc64 	bl	8000b10 <__aeabi_dcmpeq>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d0c1      	beq.n	800a1d0 <_strtod_l+0x8b8>
 800a24c:	e615      	b.n	8009e7a <_strtod_l+0x562>
 800a24e:	4641      	mov	r1, r8
 800a250:	4620      	mov	r0, r4
 800a252:	f7ff fac9 	bl	80097e8 <__ratio>
 800a256:	2200      	movs	r2, #0
 800a258:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a25c:	4606      	mov	r6, r0
 800a25e:	460f      	mov	r7, r1
 800a260:	f7f6 fc6a 	bl	8000b38 <__aeabi_dcmple>
 800a264:	2800      	cmp	r0, #0
 800a266:	d06d      	beq.n	800a344 <_strtod_l+0xa2c>
 800a268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d178      	bne.n	800a360 <_strtod_l+0xa48>
 800a26e:	f1ba 0f00 	cmp.w	sl, #0
 800a272:	d156      	bne.n	800a322 <_strtod_l+0xa0a>
 800a274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d158      	bne.n	800a330 <_strtod_l+0xa18>
 800a27e:	2200      	movs	r2, #0
 800a280:	4630      	mov	r0, r6
 800a282:	4639      	mov	r1, r7
 800a284:	4b5d      	ldr	r3, [pc, #372]	@ (800a3fc <_strtod_l+0xae4>)
 800a286:	f7f6 fc4d 	bl	8000b24 <__aeabi_dcmplt>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d157      	bne.n	800a33e <_strtod_l+0xa26>
 800a28e:	4630      	mov	r0, r6
 800a290:	4639      	mov	r1, r7
 800a292:	2200      	movs	r2, #0
 800a294:	4b5a      	ldr	r3, [pc, #360]	@ (800a400 <_strtod_l+0xae8>)
 800a296:	f7f6 f9d3 	bl	8000640 <__aeabi_dmul>
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a2a2:	9606      	str	r6, [sp, #24]
 800a2a4:	9307      	str	r3, [sp, #28]
 800a2a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2aa:	4d52      	ldr	r5, [pc, #328]	@ (800a3f4 <_strtod_l+0xadc>)
 800a2ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a2b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2b2:	401d      	ands	r5, r3
 800a2b4:	4b53      	ldr	r3, [pc, #332]	@ (800a404 <_strtod_l+0xaec>)
 800a2b6:	429d      	cmp	r5, r3
 800a2b8:	f040 80aa 	bne.w	800a410 <_strtod_l+0xaf8>
 800a2bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2be:	4650      	mov	r0, sl
 800a2c0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a2c4:	4659      	mov	r1, fp
 800a2c6:	f7ff f9cf 	bl	8009668 <__ulp>
 800a2ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2ce:	f7f6 f9b7 	bl	8000640 <__aeabi_dmul>
 800a2d2:	4652      	mov	r2, sl
 800a2d4:	465b      	mov	r3, fp
 800a2d6:	f7f5 fffd 	bl	80002d4 <__adddf3>
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4945      	ldr	r1, [pc, #276]	@ (800a3f4 <_strtod_l+0xadc>)
 800a2de:	4a4a      	ldr	r2, [pc, #296]	@ (800a408 <_strtod_l+0xaf0>)
 800a2e0:	4019      	ands	r1, r3
 800a2e2:	4291      	cmp	r1, r2
 800a2e4:	4682      	mov	sl, r0
 800a2e6:	d942      	bls.n	800a36e <_strtod_l+0xa56>
 800a2e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a2ea:	4b43      	ldr	r3, [pc, #268]	@ (800a3f8 <_strtod_l+0xae0>)
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d103      	bne.n	800a2f8 <_strtod_l+0x9e0>
 800a2f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	f43f ad2b 	beq.w	8009d4e <_strtod_l+0x436>
 800a2f8:	f04f 3aff 	mov.w	sl, #4294967295
 800a2fc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a3f8 <_strtod_l+0xae0>
 800a300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a302:	9805      	ldr	r0, [sp, #20]
 800a304:	f7fe fe7e 	bl	8009004 <_Bfree>
 800a308:	4649      	mov	r1, r9
 800a30a:	9805      	ldr	r0, [sp, #20]
 800a30c:	f7fe fe7a 	bl	8009004 <_Bfree>
 800a310:	4641      	mov	r1, r8
 800a312:	9805      	ldr	r0, [sp, #20]
 800a314:	f7fe fe76 	bl	8009004 <_Bfree>
 800a318:	4621      	mov	r1, r4
 800a31a:	9805      	ldr	r0, [sp, #20]
 800a31c:	f7fe fe72 	bl	8009004 <_Bfree>
 800a320:	e618      	b.n	8009f54 <_strtod_l+0x63c>
 800a322:	f1ba 0f01 	cmp.w	sl, #1
 800a326:	d103      	bne.n	800a330 <_strtod_l+0xa18>
 800a328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f43f ada5 	beq.w	8009e7a <_strtod_l+0x562>
 800a330:	2200      	movs	r2, #0
 800a332:	4b36      	ldr	r3, [pc, #216]	@ (800a40c <_strtod_l+0xaf4>)
 800a334:	2600      	movs	r6, #0
 800a336:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a33a:	4f30      	ldr	r7, [pc, #192]	@ (800a3fc <_strtod_l+0xae4>)
 800a33c:	e7b3      	b.n	800a2a6 <_strtod_l+0x98e>
 800a33e:	2600      	movs	r6, #0
 800a340:	4f2f      	ldr	r7, [pc, #188]	@ (800a400 <_strtod_l+0xae8>)
 800a342:	e7ac      	b.n	800a29e <_strtod_l+0x986>
 800a344:	4630      	mov	r0, r6
 800a346:	4639      	mov	r1, r7
 800a348:	4b2d      	ldr	r3, [pc, #180]	@ (800a400 <_strtod_l+0xae8>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	f7f6 f978 	bl	8000640 <__aeabi_dmul>
 800a350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a352:	4606      	mov	r6, r0
 800a354:	460f      	mov	r7, r1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0a1      	beq.n	800a29e <_strtod_l+0x986>
 800a35a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a35e:	e7a2      	b.n	800a2a6 <_strtod_l+0x98e>
 800a360:	2200      	movs	r2, #0
 800a362:	4b26      	ldr	r3, [pc, #152]	@ (800a3fc <_strtod_l+0xae4>)
 800a364:	4616      	mov	r6, r2
 800a366:	461f      	mov	r7, r3
 800a368:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a36c:	e79b      	b.n	800a2a6 <_strtod_l+0x98e>
 800a36e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a372:	9b08      	ldr	r3, [sp, #32]
 800a374:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1c1      	bne.n	800a300 <_strtod_l+0x9e8>
 800a37c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a380:	0d1b      	lsrs	r3, r3, #20
 800a382:	051b      	lsls	r3, r3, #20
 800a384:	429d      	cmp	r5, r3
 800a386:	d1bb      	bne.n	800a300 <_strtod_l+0x9e8>
 800a388:	4630      	mov	r0, r6
 800a38a:	4639      	mov	r1, r7
 800a38c:	f7f6 fdae 	bl	8000eec <__aeabi_d2lz>
 800a390:	f7f6 f928 	bl	80005e4 <__aeabi_l2d>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4630      	mov	r0, r6
 800a39a:	4639      	mov	r1, r7
 800a39c:	f7f5 ff98 	bl	80002d0 <__aeabi_dsub>
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a3a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3ae:	ea46 060a 	orr.w	r6, r6, sl
 800a3b2:	431e      	orrs	r6, r3
 800a3b4:	d069      	beq.n	800a48a <_strtod_l+0xb72>
 800a3b6:	a30a      	add	r3, pc, #40	@ (adr r3, 800a3e0 <_strtod_l+0xac8>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f7f6 fbb2 	bl	8000b24 <__aeabi_dcmplt>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	f47f accf 	bne.w	8009d64 <_strtod_l+0x44c>
 800a3c6:	a308      	add	r3, pc, #32	@ (adr r3, 800a3e8 <_strtod_l+0xad0>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3d0:	f7f6 fbc6 	bl	8000b60 <__aeabi_dcmpgt>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d093      	beq.n	800a300 <_strtod_l+0x9e8>
 800a3d8:	e4c4      	b.n	8009d64 <_strtod_l+0x44c>
 800a3da:	bf00      	nop
 800a3dc:	f3af 8000 	nop.w
 800a3e0:	94a03595 	.word	0x94a03595
 800a3e4:	3fdfffff 	.word	0x3fdfffff
 800a3e8:	35afe535 	.word	0x35afe535
 800a3ec:	3fe00000 	.word	0x3fe00000
 800a3f0:	000fffff 	.word	0x000fffff
 800a3f4:	7ff00000 	.word	0x7ff00000
 800a3f8:	7fefffff 	.word	0x7fefffff
 800a3fc:	3ff00000 	.word	0x3ff00000
 800a400:	3fe00000 	.word	0x3fe00000
 800a404:	7fe00000 	.word	0x7fe00000
 800a408:	7c9fffff 	.word	0x7c9fffff
 800a40c:	bff00000 	.word	0xbff00000
 800a410:	9b08      	ldr	r3, [sp, #32]
 800a412:	b323      	cbz	r3, 800a45e <_strtod_l+0xb46>
 800a414:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a418:	d821      	bhi.n	800a45e <_strtod_l+0xb46>
 800a41a:	a327      	add	r3, pc, #156	@ (adr r3, 800a4b8 <_strtod_l+0xba0>)
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f7f6 fb88 	bl	8000b38 <__aeabi_dcmple>
 800a428:	b1a0      	cbz	r0, 800a454 <_strtod_l+0xb3c>
 800a42a:	4639      	mov	r1, r7
 800a42c:	4630      	mov	r0, r6
 800a42e:	f7f6 fbdf 	bl	8000bf0 <__aeabi_d2uiz>
 800a432:	2801      	cmp	r0, #1
 800a434:	bf38      	it	cc
 800a436:	2001      	movcc	r0, #1
 800a438:	f7f6 f888 	bl	800054c <__aeabi_ui2d>
 800a43c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a43e:	4606      	mov	r6, r0
 800a440:	460f      	mov	r7, r1
 800a442:	b9fb      	cbnz	r3, 800a484 <_strtod_l+0xb6c>
 800a444:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a448:	9014      	str	r0, [sp, #80]	@ 0x50
 800a44a:	9315      	str	r3, [sp, #84]	@ 0x54
 800a44c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a450:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a454:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a456:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a45a:	1b5b      	subs	r3, r3, r5
 800a45c:	9311      	str	r3, [sp, #68]	@ 0x44
 800a45e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a462:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a466:	f7ff f8ff 	bl	8009668 <__ulp>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	4650      	mov	r0, sl
 800a470:	4659      	mov	r1, fp
 800a472:	f7f6 f8e5 	bl	8000640 <__aeabi_dmul>
 800a476:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a47a:	f7f5 ff2b 	bl	80002d4 <__adddf3>
 800a47e:	4682      	mov	sl, r0
 800a480:	468b      	mov	fp, r1
 800a482:	e776      	b.n	800a372 <_strtod_l+0xa5a>
 800a484:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a488:	e7e0      	b.n	800a44c <_strtod_l+0xb34>
 800a48a:	a30d      	add	r3, pc, #52	@ (adr r3, 800a4c0 <_strtod_l+0xba8>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	f7f6 fb48 	bl	8000b24 <__aeabi_dcmplt>
 800a494:	e79e      	b.n	800a3d4 <_strtod_l+0xabc>
 800a496:	2300      	movs	r3, #0
 800a498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a49a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a49c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a49e:	6013      	str	r3, [r2, #0]
 800a4a0:	f7ff ba77 	b.w	8009992 <_strtod_l+0x7a>
 800a4a4:	2a65      	cmp	r2, #101	@ 0x65
 800a4a6:	f43f ab6e 	beq.w	8009b86 <_strtod_l+0x26e>
 800a4aa:	2a45      	cmp	r2, #69	@ 0x45
 800a4ac:	f43f ab6b 	beq.w	8009b86 <_strtod_l+0x26e>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f7ff bba6 	b.w	8009c02 <_strtod_l+0x2ea>
 800a4b6:	bf00      	nop
 800a4b8:	ffc00000 	.word	0xffc00000
 800a4bc:	41dfffff 	.word	0x41dfffff
 800a4c0:	94a03595 	.word	0x94a03595
 800a4c4:	3fcfffff 	.word	0x3fcfffff

0800a4c8 <_strtod_r>:
 800a4c8:	4b01      	ldr	r3, [pc, #4]	@ (800a4d0 <_strtod_r+0x8>)
 800a4ca:	f7ff ba25 	b.w	8009918 <_strtod_l>
 800a4ce:	bf00      	nop
 800a4d0:	20000090 	.word	0x20000090

0800a4d4 <__ssputs_r>:
 800a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d8:	461f      	mov	r7, r3
 800a4da:	688e      	ldr	r6, [r1, #8]
 800a4dc:	4682      	mov	sl, r0
 800a4de:	42be      	cmp	r6, r7
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	4690      	mov	r8, r2
 800a4e4:	680b      	ldr	r3, [r1, #0]
 800a4e6:	d82d      	bhi.n	800a544 <__ssputs_r+0x70>
 800a4e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a4f0:	d026      	beq.n	800a540 <__ssputs_r+0x6c>
 800a4f2:	6965      	ldr	r5, [r4, #20]
 800a4f4:	6909      	ldr	r1, [r1, #16]
 800a4f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4fa:	eba3 0901 	sub.w	r9, r3, r1
 800a4fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a502:	1c7b      	adds	r3, r7, #1
 800a504:	444b      	add	r3, r9
 800a506:	106d      	asrs	r5, r5, #1
 800a508:	429d      	cmp	r5, r3
 800a50a:	bf38      	it	cc
 800a50c:	461d      	movcc	r5, r3
 800a50e:	0553      	lsls	r3, r2, #21
 800a510:	d527      	bpl.n	800a562 <__ssputs_r+0x8e>
 800a512:	4629      	mov	r1, r5
 800a514:	f7fe fcaa 	bl	8008e6c <_malloc_r>
 800a518:	4606      	mov	r6, r0
 800a51a:	b360      	cbz	r0, 800a576 <__ssputs_r+0xa2>
 800a51c:	464a      	mov	r2, r9
 800a51e:	6921      	ldr	r1, [r4, #16]
 800a520:	f7fd fdaf 	bl	8008082 <memcpy>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	6126      	str	r6, [r4, #16]
 800a532:	444e      	add	r6, r9
 800a534:	6026      	str	r6, [r4, #0]
 800a536:	463e      	mov	r6, r7
 800a538:	6165      	str	r5, [r4, #20]
 800a53a:	eba5 0509 	sub.w	r5, r5, r9
 800a53e:	60a5      	str	r5, [r4, #8]
 800a540:	42be      	cmp	r6, r7
 800a542:	d900      	bls.n	800a546 <__ssputs_r+0x72>
 800a544:	463e      	mov	r6, r7
 800a546:	4632      	mov	r2, r6
 800a548:	4641      	mov	r1, r8
 800a54a:	6820      	ldr	r0, [r4, #0]
 800a54c:	f7fd fc53 	bl	8007df6 <memmove>
 800a550:	2000      	movs	r0, #0
 800a552:	68a3      	ldr	r3, [r4, #8]
 800a554:	1b9b      	subs	r3, r3, r6
 800a556:	60a3      	str	r3, [r4, #8]
 800a558:	6823      	ldr	r3, [r4, #0]
 800a55a:	4433      	add	r3, r6
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a562:	462a      	mov	r2, r5
 800a564:	f000 fd57 	bl	800b016 <_realloc_r>
 800a568:	4606      	mov	r6, r0
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d1e0      	bne.n	800a530 <__ssputs_r+0x5c>
 800a56e:	4650      	mov	r0, sl
 800a570:	6921      	ldr	r1, [r4, #16]
 800a572:	f7fe fc09 	bl	8008d88 <_free_r>
 800a576:	230c      	movs	r3, #12
 800a578:	f8ca 3000 	str.w	r3, [sl]
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f04f 30ff 	mov.w	r0, #4294967295
 800a582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	e7e9      	b.n	800a55e <__ssputs_r+0x8a>
	...

0800a58c <_svfiprintf_r>:
 800a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	4698      	mov	r8, r3
 800a592:	898b      	ldrh	r3, [r1, #12]
 800a594:	4607      	mov	r7, r0
 800a596:	061b      	lsls	r3, r3, #24
 800a598:	460d      	mov	r5, r1
 800a59a:	4614      	mov	r4, r2
 800a59c:	b09d      	sub	sp, #116	@ 0x74
 800a59e:	d510      	bpl.n	800a5c2 <_svfiprintf_r+0x36>
 800a5a0:	690b      	ldr	r3, [r1, #16]
 800a5a2:	b973      	cbnz	r3, 800a5c2 <_svfiprintf_r+0x36>
 800a5a4:	2140      	movs	r1, #64	@ 0x40
 800a5a6:	f7fe fc61 	bl	8008e6c <_malloc_r>
 800a5aa:	6028      	str	r0, [r5, #0]
 800a5ac:	6128      	str	r0, [r5, #16]
 800a5ae:	b930      	cbnz	r0, 800a5be <_svfiprintf_r+0x32>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	b01d      	add	sp, #116	@ 0x74
 800a5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5be:	2340      	movs	r3, #64	@ 0x40
 800a5c0:	616b      	str	r3, [r5, #20]
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5c6:	2320      	movs	r3, #32
 800a5c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5cc:	2330      	movs	r3, #48	@ 0x30
 800a5ce:	f04f 0901 	mov.w	r9, #1
 800a5d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a770 <_svfiprintf_r+0x1e4>
 800a5da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5de:	4623      	mov	r3, r4
 800a5e0:	469a      	mov	sl, r3
 800a5e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e6:	b10a      	cbz	r2, 800a5ec <_svfiprintf_r+0x60>
 800a5e8:	2a25      	cmp	r2, #37	@ 0x25
 800a5ea:	d1f9      	bne.n	800a5e0 <_svfiprintf_r+0x54>
 800a5ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a5f0:	d00b      	beq.n	800a60a <_svfiprintf_r+0x7e>
 800a5f2:	465b      	mov	r3, fp
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f7ff ff6b 	bl	800a4d4 <__ssputs_r>
 800a5fe:	3001      	adds	r0, #1
 800a600:	f000 80a7 	beq.w	800a752 <_svfiprintf_r+0x1c6>
 800a604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a606:	445a      	add	r2, fp
 800a608:	9209      	str	r2, [sp, #36]	@ 0x24
 800a60a:	f89a 3000 	ldrb.w	r3, [sl]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f000 809f 	beq.w	800a752 <_svfiprintf_r+0x1c6>
 800a614:	2300      	movs	r3, #0
 800a616:	f04f 32ff 	mov.w	r2, #4294967295
 800a61a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a61e:	f10a 0a01 	add.w	sl, sl, #1
 800a622:	9304      	str	r3, [sp, #16]
 800a624:	9307      	str	r3, [sp, #28]
 800a626:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a62a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a62c:	4654      	mov	r4, sl
 800a62e:	2205      	movs	r2, #5
 800a630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a634:	484e      	ldr	r0, [pc, #312]	@ (800a770 <_svfiprintf_r+0x1e4>)
 800a636:	f7fd fd16 	bl	8008066 <memchr>
 800a63a:	9a04      	ldr	r2, [sp, #16]
 800a63c:	b9d8      	cbnz	r0, 800a676 <_svfiprintf_r+0xea>
 800a63e:	06d0      	lsls	r0, r2, #27
 800a640:	bf44      	itt	mi
 800a642:	2320      	movmi	r3, #32
 800a644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a648:	0711      	lsls	r1, r2, #28
 800a64a:	bf44      	itt	mi
 800a64c:	232b      	movmi	r3, #43	@ 0x2b
 800a64e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a652:	f89a 3000 	ldrb.w	r3, [sl]
 800a656:	2b2a      	cmp	r3, #42	@ 0x2a
 800a658:	d015      	beq.n	800a686 <_svfiprintf_r+0xfa>
 800a65a:	4654      	mov	r4, sl
 800a65c:	2000      	movs	r0, #0
 800a65e:	f04f 0c0a 	mov.w	ip, #10
 800a662:	9a07      	ldr	r2, [sp, #28]
 800a664:	4621      	mov	r1, r4
 800a666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a66a:	3b30      	subs	r3, #48	@ 0x30
 800a66c:	2b09      	cmp	r3, #9
 800a66e:	d94b      	bls.n	800a708 <_svfiprintf_r+0x17c>
 800a670:	b1b0      	cbz	r0, 800a6a0 <_svfiprintf_r+0x114>
 800a672:	9207      	str	r2, [sp, #28]
 800a674:	e014      	b.n	800a6a0 <_svfiprintf_r+0x114>
 800a676:	eba0 0308 	sub.w	r3, r0, r8
 800a67a:	fa09 f303 	lsl.w	r3, r9, r3
 800a67e:	4313      	orrs	r3, r2
 800a680:	46a2      	mov	sl, r4
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	e7d2      	b.n	800a62c <_svfiprintf_r+0xa0>
 800a686:	9b03      	ldr	r3, [sp, #12]
 800a688:	1d19      	adds	r1, r3, #4
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	9103      	str	r1, [sp, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	bfbb      	ittet	lt
 800a692:	425b      	neglt	r3, r3
 800a694:	f042 0202 	orrlt.w	r2, r2, #2
 800a698:	9307      	strge	r3, [sp, #28]
 800a69a:	9307      	strlt	r3, [sp, #28]
 800a69c:	bfb8      	it	lt
 800a69e:	9204      	strlt	r2, [sp, #16]
 800a6a0:	7823      	ldrb	r3, [r4, #0]
 800a6a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6a4:	d10a      	bne.n	800a6bc <_svfiprintf_r+0x130>
 800a6a6:	7863      	ldrb	r3, [r4, #1]
 800a6a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6aa:	d132      	bne.n	800a712 <_svfiprintf_r+0x186>
 800a6ac:	9b03      	ldr	r3, [sp, #12]
 800a6ae:	3402      	adds	r4, #2
 800a6b0:	1d1a      	adds	r2, r3, #4
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	9203      	str	r2, [sp, #12]
 800a6b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6ba:	9305      	str	r3, [sp, #20]
 800a6bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a774 <_svfiprintf_r+0x1e8>
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	7821      	ldrb	r1, [r4, #0]
 800a6c6:	f7fd fcce 	bl	8008066 <memchr>
 800a6ca:	b138      	cbz	r0, 800a6dc <_svfiprintf_r+0x150>
 800a6cc:	2240      	movs	r2, #64	@ 0x40
 800a6ce:	9b04      	ldr	r3, [sp, #16]
 800a6d0:	eba0 000a 	sub.w	r0, r0, sl
 800a6d4:	4082      	lsls	r2, r0
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	3401      	adds	r4, #1
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e0:	2206      	movs	r2, #6
 800a6e2:	4825      	ldr	r0, [pc, #148]	@ (800a778 <_svfiprintf_r+0x1ec>)
 800a6e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6e8:	f7fd fcbd 	bl	8008066 <memchr>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d036      	beq.n	800a75e <_svfiprintf_r+0x1d2>
 800a6f0:	4b22      	ldr	r3, [pc, #136]	@ (800a77c <_svfiprintf_r+0x1f0>)
 800a6f2:	bb1b      	cbnz	r3, 800a73c <_svfiprintf_r+0x1b0>
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	3307      	adds	r3, #7
 800a6f8:	f023 0307 	bic.w	r3, r3, #7
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	9303      	str	r3, [sp, #12]
 800a700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a702:	4433      	add	r3, r6
 800a704:	9309      	str	r3, [sp, #36]	@ 0x24
 800a706:	e76a      	b.n	800a5de <_svfiprintf_r+0x52>
 800a708:	460c      	mov	r4, r1
 800a70a:	2001      	movs	r0, #1
 800a70c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a710:	e7a8      	b.n	800a664 <_svfiprintf_r+0xd8>
 800a712:	2300      	movs	r3, #0
 800a714:	f04f 0c0a 	mov.w	ip, #10
 800a718:	4619      	mov	r1, r3
 800a71a:	3401      	adds	r4, #1
 800a71c:	9305      	str	r3, [sp, #20]
 800a71e:	4620      	mov	r0, r4
 800a720:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a724:	3a30      	subs	r2, #48	@ 0x30
 800a726:	2a09      	cmp	r2, #9
 800a728:	d903      	bls.n	800a732 <_svfiprintf_r+0x1a6>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0c6      	beq.n	800a6bc <_svfiprintf_r+0x130>
 800a72e:	9105      	str	r1, [sp, #20]
 800a730:	e7c4      	b.n	800a6bc <_svfiprintf_r+0x130>
 800a732:	4604      	mov	r4, r0
 800a734:	2301      	movs	r3, #1
 800a736:	fb0c 2101 	mla	r1, ip, r1, r2
 800a73a:	e7f0      	b.n	800a71e <_svfiprintf_r+0x192>
 800a73c:	ab03      	add	r3, sp, #12
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	462a      	mov	r2, r5
 800a742:	4638      	mov	r0, r7
 800a744:	4b0e      	ldr	r3, [pc, #56]	@ (800a780 <_svfiprintf_r+0x1f4>)
 800a746:	a904      	add	r1, sp, #16
 800a748:	f7fc fc62 	bl	8007010 <_printf_float>
 800a74c:	1c42      	adds	r2, r0, #1
 800a74e:	4606      	mov	r6, r0
 800a750:	d1d6      	bne.n	800a700 <_svfiprintf_r+0x174>
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	065b      	lsls	r3, r3, #25
 800a756:	f53f af2d 	bmi.w	800a5b4 <_svfiprintf_r+0x28>
 800a75a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a75c:	e72c      	b.n	800a5b8 <_svfiprintf_r+0x2c>
 800a75e:	ab03      	add	r3, sp, #12
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	462a      	mov	r2, r5
 800a764:	4638      	mov	r0, r7
 800a766:	4b06      	ldr	r3, [pc, #24]	@ (800a780 <_svfiprintf_r+0x1f4>)
 800a768:	a904      	add	r1, sp, #16
 800a76a:	f7fc feef 	bl	800754c <_printf_i>
 800a76e:	e7ed      	b.n	800a74c <_svfiprintf_r+0x1c0>
 800a770:	0800e9f0 	.word	0x0800e9f0
 800a774:	0800e9f6 	.word	0x0800e9f6
 800a778:	0800e9fa 	.word	0x0800e9fa
 800a77c:	08007011 	.word	0x08007011
 800a780:	0800a4d5 	.word	0x0800a4d5

0800a784 <__sflush_r>:
 800a784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	0716      	lsls	r6, r2, #28
 800a78c:	4605      	mov	r5, r0
 800a78e:	460c      	mov	r4, r1
 800a790:	d454      	bmi.n	800a83c <__sflush_r+0xb8>
 800a792:	684b      	ldr	r3, [r1, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	dc02      	bgt.n	800a79e <__sflush_r+0x1a>
 800a798:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	dd48      	ble.n	800a830 <__sflush_r+0xac>
 800a79e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7a0:	2e00      	cmp	r6, #0
 800a7a2:	d045      	beq.n	800a830 <__sflush_r+0xac>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a7aa:	682f      	ldr	r7, [r5, #0]
 800a7ac:	6a21      	ldr	r1, [r4, #32]
 800a7ae:	602b      	str	r3, [r5, #0]
 800a7b0:	d030      	beq.n	800a814 <__sflush_r+0x90>
 800a7b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7b4:	89a3      	ldrh	r3, [r4, #12]
 800a7b6:	0759      	lsls	r1, r3, #29
 800a7b8:	d505      	bpl.n	800a7c6 <__sflush_r+0x42>
 800a7ba:	6863      	ldr	r3, [r4, #4]
 800a7bc:	1ad2      	subs	r2, r2, r3
 800a7be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a7c0:	b10b      	cbz	r3, 800a7c6 <__sflush_r+0x42>
 800a7c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7c4:	1ad2      	subs	r2, r2, r3
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7cc:	6a21      	ldr	r1, [r4, #32]
 800a7ce:	47b0      	blx	r6
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	d106      	bne.n	800a7e4 <__sflush_r+0x60>
 800a7d6:	6829      	ldr	r1, [r5, #0]
 800a7d8:	291d      	cmp	r1, #29
 800a7da:	d82b      	bhi.n	800a834 <__sflush_r+0xb0>
 800a7dc:	4a28      	ldr	r2, [pc, #160]	@ (800a880 <__sflush_r+0xfc>)
 800a7de:	410a      	asrs	r2, r1
 800a7e0:	07d6      	lsls	r6, r2, #31
 800a7e2:	d427      	bmi.n	800a834 <__sflush_r+0xb0>
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	6062      	str	r2, [r4, #4]
 800a7e8:	6922      	ldr	r2, [r4, #16]
 800a7ea:	04d9      	lsls	r1, r3, #19
 800a7ec:	6022      	str	r2, [r4, #0]
 800a7ee:	d504      	bpl.n	800a7fa <__sflush_r+0x76>
 800a7f0:	1c42      	adds	r2, r0, #1
 800a7f2:	d101      	bne.n	800a7f8 <__sflush_r+0x74>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b903      	cbnz	r3, 800a7fa <__sflush_r+0x76>
 800a7f8:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7fc:	602f      	str	r7, [r5, #0]
 800a7fe:	b1b9      	cbz	r1, 800a830 <__sflush_r+0xac>
 800a800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a804:	4299      	cmp	r1, r3
 800a806:	d002      	beq.n	800a80e <__sflush_r+0x8a>
 800a808:	4628      	mov	r0, r5
 800a80a:	f7fe fabd 	bl	8008d88 <_free_r>
 800a80e:	2300      	movs	r3, #0
 800a810:	6363      	str	r3, [r4, #52]	@ 0x34
 800a812:	e00d      	b.n	800a830 <__sflush_r+0xac>
 800a814:	2301      	movs	r3, #1
 800a816:	4628      	mov	r0, r5
 800a818:	47b0      	blx	r6
 800a81a:	4602      	mov	r2, r0
 800a81c:	1c50      	adds	r0, r2, #1
 800a81e:	d1c9      	bne.n	800a7b4 <__sflush_r+0x30>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0c6      	beq.n	800a7b4 <__sflush_r+0x30>
 800a826:	2b1d      	cmp	r3, #29
 800a828:	d001      	beq.n	800a82e <__sflush_r+0xaa>
 800a82a:	2b16      	cmp	r3, #22
 800a82c:	d11d      	bne.n	800a86a <__sflush_r+0xe6>
 800a82e:	602f      	str	r7, [r5, #0]
 800a830:	2000      	movs	r0, #0
 800a832:	e021      	b.n	800a878 <__sflush_r+0xf4>
 800a834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a838:	b21b      	sxth	r3, r3
 800a83a:	e01a      	b.n	800a872 <__sflush_r+0xee>
 800a83c:	690f      	ldr	r7, [r1, #16]
 800a83e:	2f00      	cmp	r7, #0
 800a840:	d0f6      	beq.n	800a830 <__sflush_r+0xac>
 800a842:	0793      	lsls	r3, r2, #30
 800a844:	bf18      	it	ne
 800a846:	2300      	movne	r3, #0
 800a848:	680e      	ldr	r6, [r1, #0]
 800a84a:	bf08      	it	eq
 800a84c:	694b      	ldreq	r3, [r1, #20]
 800a84e:	1bf6      	subs	r6, r6, r7
 800a850:	600f      	str	r7, [r1, #0]
 800a852:	608b      	str	r3, [r1, #8]
 800a854:	2e00      	cmp	r6, #0
 800a856:	ddeb      	ble.n	800a830 <__sflush_r+0xac>
 800a858:	4633      	mov	r3, r6
 800a85a:	463a      	mov	r2, r7
 800a85c:	4628      	mov	r0, r5
 800a85e:	6a21      	ldr	r1, [r4, #32]
 800a860:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a864:	47e0      	blx	ip
 800a866:	2800      	cmp	r0, #0
 800a868:	dc07      	bgt.n	800a87a <__sflush_r+0xf6>
 800a86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a86e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a872:	f04f 30ff 	mov.w	r0, #4294967295
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a87a:	4407      	add	r7, r0
 800a87c:	1a36      	subs	r6, r6, r0
 800a87e:	e7e9      	b.n	800a854 <__sflush_r+0xd0>
 800a880:	dfbffffe 	.word	0xdfbffffe

0800a884 <_fflush_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	690b      	ldr	r3, [r1, #16]
 800a888:	4605      	mov	r5, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	b913      	cbnz	r3, 800a894 <_fflush_r+0x10>
 800a88e:	2500      	movs	r5, #0
 800a890:	4628      	mov	r0, r5
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	b118      	cbz	r0, 800a89e <_fflush_r+0x1a>
 800a896:	6a03      	ldr	r3, [r0, #32]
 800a898:	b90b      	cbnz	r3, 800a89e <_fflush_r+0x1a>
 800a89a:	f7fd fa13 	bl	8007cc4 <__sinit>
 800a89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d0f3      	beq.n	800a88e <_fflush_r+0xa>
 800a8a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a8a8:	07d0      	lsls	r0, r2, #31
 800a8aa:	d404      	bmi.n	800a8b6 <_fflush_r+0x32>
 800a8ac:	0599      	lsls	r1, r3, #22
 800a8ae:	d402      	bmi.n	800a8b6 <_fflush_r+0x32>
 800a8b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8b2:	f7fd fbce 	bl	8008052 <__retarget_lock_acquire_recursive>
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	f7ff ff63 	bl	800a784 <__sflush_r>
 800a8be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	07da      	lsls	r2, r3, #31
 800a8c4:	d4e4      	bmi.n	800a890 <_fflush_r+0xc>
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	059b      	lsls	r3, r3, #22
 800a8ca:	d4e1      	bmi.n	800a890 <_fflush_r+0xc>
 800a8cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8ce:	f7fd fbc1 	bl	8008054 <__retarget_lock_release_recursive>
 800a8d2:	e7dd      	b.n	800a890 <_fflush_r+0xc>

0800a8d4 <fiprintf>:
 800a8d4:	b40e      	push	{r1, r2, r3}
 800a8d6:	b503      	push	{r0, r1, lr}
 800a8d8:	4601      	mov	r1, r0
 800a8da:	ab03      	add	r3, sp, #12
 800a8dc:	4805      	ldr	r0, [pc, #20]	@ (800a8f4 <fiprintf+0x20>)
 800a8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e2:	6800      	ldr	r0, [r0, #0]
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	f000 fbf9 	bl	800b0dc <_vfiprintf_r>
 800a8ea:	b002      	add	sp, #8
 800a8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8f0:	b003      	add	sp, #12
 800a8f2:	4770      	bx	lr
 800a8f4:	20000040 	.word	0x20000040

0800a8f8 <strncmp>:
 800a8f8:	b510      	push	{r4, lr}
 800a8fa:	b16a      	cbz	r2, 800a918 <strncmp+0x20>
 800a8fc:	3901      	subs	r1, #1
 800a8fe:	1884      	adds	r4, r0, r2
 800a900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a904:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a908:	429a      	cmp	r2, r3
 800a90a:	d103      	bne.n	800a914 <strncmp+0x1c>
 800a90c:	42a0      	cmp	r0, r4
 800a90e:	d001      	beq.n	800a914 <strncmp+0x1c>
 800a910:	2a00      	cmp	r2, #0
 800a912:	d1f5      	bne.n	800a900 <strncmp+0x8>
 800a914:	1ad0      	subs	r0, r2, r3
 800a916:	bd10      	pop	{r4, pc}
 800a918:	4610      	mov	r0, r2
 800a91a:	e7fc      	b.n	800a916 <strncmp+0x1e>

0800a91c <_sbrk_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	2300      	movs	r3, #0
 800a920:	4d05      	ldr	r5, [pc, #20]	@ (800a938 <_sbrk_r+0x1c>)
 800a922:	4604      	mov	r4, r0
 800a924:	4608      	mov	r0, r1
 800a926:	602b      	str	r3, [r5, #0]
 800a928:	f7f8 f810 	bl	800294c <_sbrk>
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	d102      	bne.n	800a936 <_sbrk_r+0x1a>
 800a930:	682b      	ldr	r3, [r5, #0]
 800a932:	b103      	cbz	r3, 800a936 <_sbrk_r+0x1a>
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	bd38      	pop	{r3, r4, r5, pc}
 800a938:	20000a90 	.word	0x20000a90

0800a93c <nan>:
 800a93c:	2000      	movs	r0, #0
 800a93e:	4901      	ldr	r1, [pc, #4]	@ (800a944 <nan+0x8>)
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	7ff80000 	.word	0x7ff80000

0800a948 <abort>:
 800a948:	2006      	movs	r0, #6
 800a94a:	b508      	push	{r3, lr}
 800a94c:	f000 fd9a 	bl	800b484 <raise>
 800a950:	2001      	movs	r0, #1
 800a952:	f7f7 ff86 	bl	8002862 <_exit>

0800a956 <_calloc_r>:
 800a956:	b570      	push	{r4, r5, r6, lr}
 800a958:	fba1 5402 	umull	r5, r4, r1, r2
 800a95c:	b93c      	cbnz	r4, 800a96e <_calloc_r+0x18>
 800a95e:	4629      	mov	r1, r5
 800a960:	f7fe fa84 	bl	8008e6c <_malloc_r>
 800a964:	4606      	mov	r6, r0
 800a966:	b928      	cbnz	r0, 800a974 <_calloc_r+0x1e>
 800a968:	2600      	movs	r6, #0
 800a96a:	4630      	mov	r0, r6
 800a96c:	bd70      	pop	{r4, r5, r6, pc}
 800a96e:	220c      	movs	r2, #12
 800a970:	6002      	str	r2, [r0, #0]
 800a972:	e7f9      	b.n	800a968 <_calloc_r+0x12>
 800a974:	462a      	mov	r2, r5
 800a976:	4621      	mov	r1, r4
 800a978:	f7fd fa57 	bl	8007e2a <memset>
 800a97c:	e7f5      	b.n	800a96a <_calloc_r+0x14>

0800a97e <rshift>:
 800a97e:	6903      	ldr	r3, [r0, #16]
 800a980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a984:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a988:	f100 0414 	add.w	r4, r0, #20
 800a98c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a990:	dd46      	ble.n	800aa20 <rshift+0xa2>
 800a992:	f011 011f 	ands.w	r1, r1, #31
 800a996:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a99a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a99e:	d10c      	bne.n	800a9ba <rshift+0x3c>
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	f100 0710 	add.w	r7, r0, #16
 800a9a6:	42b1      	cmp	r1, r6
 800a9a8:	d335      	bcc.n	800aa16 <rshift+0x98>
 800a9aa:	1a9b      	subs	r3, r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	1eea      	subs	r2, r5, #3
 800a9b0:	4296      	cmp	r6, r2
 800a9b2:	bf38      	it	cc
 800a9b4:	2300      	movcc	r3, #0
 800a9b6:	4423      	add	r3, r4
 800a9b8:	e015      	b.n	800a9e6 <rshift+0x68>
 800a9ba:	46a1      	mov	r9, r4
 800a9bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9c0:	f1c1 0820 	rsb	r8, r1, #32
 800a9c4:	40cf      	lsrs	r7, r1
 800a9c6:	f105 0e04 	add.w	lr, r5, #4
 800a9ca:	4576      	cmp	r6, lr
 800a9cc:	46f4      	mov	ip, lr
 800a9ce:	d816      	bhi.n	800a9fe <rshift+0x80>
 800a9d0:	1a9a      	subs	r2, r3, r2
 800a9d2:	0092      	lsls	r2, r2, #2
 800a9d4:	3a04      	subs	r2, #4
 800a9d6:	3501      	adds	r5, #1
 800a9d8:	42ae      	cmp	r6, r5
 800a9da:	bf38      	it	cc
 800a9dc:	2200      	movcc	r2, #0
 800a9de:	18a3      	adds	r3, r4, r2
 800a9e0:	50a7      	str	r7, [r4, r2]
 800a9e2:	b107      	cbz	r7, 800a9e6 <rshift+0x68>
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	42a3      	cmp	r3, r4
 800a9e8:	eba3 0204 	sub.w	r2, r3, r4
 800a9ec:	bf08      	it	eq
 800a9ee:	2300      	moveq	r3, #0
 800a9f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9f4:	6102      	str	r2, [r0, #16]
 800a9f6:	bf08      	it	eq
 800a9f8:	6143      	streq	r3, [r0, #20]
 800a9fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9fe:	f8dc c000 	ldr.w	ip, [ip]
 800aa02:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa06:	ea4c 0707 	orr.w	r7, ip, r7
 800aa0a:	f849 7b04 	str.w	r7, [r9], #4
 800aa0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa12:	40cf      	lsrs	r7, r1
 800aa14:	e7d9      	b.n	800a9ca <rshift+0x4c>
 800aa16:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa1a:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa1e:	e7c2      	b.n	800a9a6 <rshift+0x28>
 800aa20:	4623      	mov	r3, r4
 800aa22:	e7e0      	b.n	800a9e6 <rshift+0x68>

0800aa24 <__hexdig_fun>:
 800aa24:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa28:	2b09      	cmp	r3, #9
 800aa2a:	d802      	bhi.n	800aa32 <__hexdig_fun+0xe>
 800aa2c:	3820      	subs	r0, #32
 800aa2e:	b2c0      	uxtb	r0, r0
 800aa30:	4770      	bx	lr
 800aa32:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa36:	2b05      	cmp	r3, #5
 800aa38:	d801      	bhi.n	800aa3e <__hexdig_fun+0x1a>
 800aa3a:	3847      	subs	r0, #71	@ 0x47
 800aa3c:	e7f7      	b.n	800aa2e <__hexdig_fun+0xa>
 800aa3e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa42:	2b05      	cmp	r3, #5
 800aa44:	d801      	bhi.n	800aa4a <__hexdig_fun+0x26>
 800aa46:	3827      	subs	r0, #39	@ 0x27
 800aa48:	e7f1      	b.n	800aa2e <__hexdig_fun+0xa>
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	4770      	bx	lr
	...

0800aa50 <__gethex>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	468a      	mov	sl, r1
 800aa56:	4690      	mov	r8, r2
 800aa58:	b085      	sub	sp, #20
 800aa5a:	9302      	str	r3, [sp, #8]
 800aa5c:	680b      	ldr	r3, [r1, #0]
 800aa5e:	9001      	str	r0, [sp, #4]
 800aa60:	1c9c      	adds	r4, r3, #2
 800aa62:	46a1      	mov	r9, r4
 800aa64:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa68:	2830      	cmp	r0, #48	@ 0x30
 800aa6a:	d0fa      	beq.n	800aa62 <__gethex+0x12>
 800aa6c:	eba9 0303 	sub.w	r3, r9, r3
 800aa70:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa74:	f7ff ffd6 	bl	800aa24 <__hexdig_fun>
 800aa78:	4605      	mov	r5, r0
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d168      	bne.n	800ab50 <__gethex+0x100>
 800aa7e:	2201      	movs	r2, #1
 800aa80:	4648      	mov	r0, r9
 800aa82:	499f      	ldr	r1, [pc, #636]	@ (800ad00 <__gethex+0x2b0>)
 800aa84:	f7ff ff38 	bl	800a8f8 <strncmp>
 800aa88:	4607      	mov	r7, r0
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d167      	bne.n	800ab5e <__gethex+0x10e>
 800aa8e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aa92:	4626      	mov	r6, r4
 800aa94:	f7ff ffc6 	bl	800aa24 <__hexdig_fun>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d062      	beq.n	800ab62 <__gethex+0x112>
 800aa9c:	4623      	mov	r3, r4
 800aa9e:	7818      	ldrb	r0, [r3, #0]
 800aaa0:	4699      	mov	r9, r3
 800aaa2:	2830      	cmp	r0, #48	@ 0x30
 800aaa4:	f103 0301 	add.w	r3, r3, #1
 800aaa8:	d0f9      	beq.n	800aa9e <__gethex+0x4e>
 800aaaa:	f7ff ffbb 	bl	800aa24 <__hexdig_fun>
 800aaae:	fab0 f580 	clz	r5, r0
 800aab2:	f04f 0b01 	mov.w	fp, #1
 800aab6:	096d      	lsrs	r5, r5, #5
 800aab8:	464a      	mov	r2, r9
 800aaba:	4616      	mov	r6, r2
 800aabc:	7830      	ldrb	r0, [r6, #0]
 800aabe:	3201      	adds	r2, #1
 800aac0:	f7ff ffb0 	bl	800aa24 <__hexdig_fun>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d1f8      	bne.n	800aaba <__gethex+0x6a>
 800aac8:	2201      	movs	r2, #1
 800aaca:	4630      	mov	r0, r6
 800aacc:	498c      	ldr	r1, [pc, #560]	@ (800ad00 <__gethex+0x2b0>)
 800aace:	f7ff ff13 	bl	800a8f8 <strncmp>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d13f      	bne.n	800ab56 <__gethex+0x106>
 800aad6:	b944      	cbnz	r4, 800aaea <__gethex+0x9a>
 800aad8:	1c74      	adds	r4, r6, #1
 800aada:	4622      	mov	r2, r4
 800aadc:	4616      	mov	r6, r2
 800aade:	7830      	ldrb	r0, [r6, #0]
 800aae0:	3201      	adds	r2, #1
 800aae2:	f7ff ff9f 	bl	800aa24 <__hexdig_fun>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d1f8      	bne.n	800aadc <__gethex+0x8c>
 800aaea:	1ba4      	subs	r4, r4, r6
 800aaec:	00a7      	lsls	r7, r4, #2
 800aaee:	7833      	ldrb	r3, [r6, #0]
 800aaf0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aaf4:	2b50      	cmp	r3, #80	@ 0x50
 800aaf6:	d13e      	bne.n	800ab76 <__gethex+0x126>
 800aaf8:	7873      	ldrb	r3, [r6, #1]
 800aafa:	2b2b      	cmp	r3, #43	@ 0x2b
 800aafc:	d033      	beq.n	800ab66 <__gethex+0x116>
 800aafe:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab00:	d034      	beq.n	800ab6c <__gethex+0x11c>
 800ab02:	2400      	movs	r4, #0
 800ab04:	1c71      	adds	r1, r6, #1
 800ab06:	7808      	ldrb	r0, [r1, #0]
 800ab08:	f7ff ff8c 	bl	800aa24 <__hexdig_fun>
 800ab0c:	1e43      	subs	r3, r0, #1
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b18      	cmp	r3, #24
 800ab12:	d830      	bhi.n	800ab76 <__gethex+0x126>
 800ab14:	f1a0 0210 	sub.w	r2, r0, #16
 800ab18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab1c:	f7ff ff82 	bl	800aa24 <__hexdig_fun>
 800ab20:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab24:	fa5f fc8c 	uxtb.w	ip, ip
 800ab28:	f1bc 0f18 	cmp.w	ip, #24
 800ab2c:	f04f 030a 	mov.w	r3, #10
 800ab30:	d91e      	bls.n	800ab70 <__gethex+0x120>
 800ab32:	b104      	cbz	r4, 800ab36 <__gethex+0xe6>
 800ab34:	4252      	negs	r2, r2
 800ab36:	4417      	add	r7, r2
 800ab38:	f8ca 1000 	str.w	r1, [sl]
 800ab3c:	b1ed      	cbz	r5, 800ab7a <__gethex+0x12a>
 800ab3e:	f1bb 0f00 	cmp.w	fp, #0
 800ab42:	bf0c      	ite	eq
 800ab44:	2506      	moveq	r5, #6
 800ab46:	2500      	movne	r5, #0
 800ab48:	4628      	mov	r0, r5
 800ab4a:	b005      	add	sp, #20
 800ab4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab50:	2500      	movs	r5, #0
 800ab52:	462c      	mov	r4, r5
 800ab54:	e7b0      	b.n	800aab8 <__gethex+0x68>
 800ab56:	2c00      	cmp	r4, #0
 800ab58:	d1c7      	bne.n	800aaea <__gethex+0x9a>
 800ab5a:	4627      	mov	r7, r4
 800ab5c:	e7c7      	b.n	800aaee <__gethex+0x9e>
 800ab5e:	464e      	mov	r6, r9
 800ab60:	462f      	mov	r7, r5
 800ab62:	2501      	movs	r5, #1
 800ab64:	e7c3      	b.n	800aaee <__gethex+0x9e>
 800ab66:	2400      	movs	r4, #0
 800ab68:	1cb1      	adds	r1, r6, #2
 800ab6a:	e7cc      	b.n	800ab06 <__gethex+0xb6>
 800ab6c:	2401      	movs	r4, #1
 800ab6e:	e7fb      	b.n	800ab68 <__gethex+0x118>
 800ab70:	fb03 0002 	mla	r0, r3, r2, r0
 800ab74:	e7ce      	b.n	800ab14 <__gethex+0xc4>
 800ab76:	4631      	mov	r1, r6
 800ab78:	e7de      	b.n	800ab38 <__gethex+0xe8>
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	eba6 0309 	sub.w	r3, r6, r9
 800ab80:	3b01      	subs	r3, #1
 800ab82:	2b07      	cmp	r3, #7
 800ab84:	dc0a      	bgt.n	800ab9c <__gethex+0x14c>
 800ab86:	9801      	ldr	r0, [sp, #4]
 800ab88:	f7fe f9fc 	bl	8008f84 <_Balloc>
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	b940      	cbnz	r0, 800aba2 <__gethex+0x152>
 800ab90:	4602      	mov	r2, r0
 800ab92:	21e4      	movs	r1, #228	@ 0xe4
 800ab94:	4b5b      	ldr	r3, [pc, #364]	@ (800ad04 <__gethex+0x2b4>)
 800ab96:	485c      	ldr	r0, [pc, #368]	@ (800ad08 <__gethex+0x2b8>)
 800ab98:	f7fd fa86 	bl	80080a8 <__assert_func>
 800ab9c:	3101      	adds	r1, #1
 800ab9e:	105b      	asrs	r3, r3, #1
 800aba0:	e7ef      	b.n	800ab82 <__gethex+0x132>
 800aba2:	2300      	movs	r3, #0
 800aba4:	f100 0a14 	add.w	sl, r0, #20
 800aba8:	4655      	mov	r5, sl
 800abaa:	469b      	mov	fp, r3
 800abac:	45b1      	cmp	r9, r6
 800abae:	d337      	bcc.n	800ac20 <__gethex+0x1d0>
 800abb0:	f845 bb04 	str.w	fp, [r5], #4
 800abb4:	eba5 050a 	sub.w	r5, r5, sl
 800abb8:	10ad      	asrs	r5, r5, #2
 800abba:	6125      	str	r5, [r4, #16]
 800abbc:	4658      	mov	r0, fp
 800abbe:	f7fe fad3 	bl	8009168 <__hi0bits>
 800abc2:	016d      	lsls	r5, r5, #5
 800abc4:	f8d8 6000 	ldr.w	r6, [r8]
 800abc8:	1a2d      	subs	r5, r5, r0
 800abca:	42b5      	cmp	r5, r6
 800abcc:	dd54      	ble.n	800ac78 <__gethex+0x228>
 800abce:	1bad      	subs	r5, r5, r6
 800abd0:	4629      	mov	r1, r5
 800abd2:	4620      	mov	r0, r4
 800abd4:	f7fe fe5b 	bl	800988e <__any_on>
 800abd8:	4681      	mov	r9, r0
 800abda:	b178      	cbz	r0, 800abfc <__gethex+0x1ac>
 800abdc:	f04f 0901 	mov.w	r9, #1
 800abe0:	1e6b      	subs	r3, r5, #1
 800abe2:	1159      	asrs	r1, r3, #5
 800abe4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800abe8:	f003 021f 	and.w	r2, r3, #31
 800abec:	fa09 f202 	lsl.w	r2, r9, r2
 800abf0:	420a      	tst	r2, r1
 800abf2:	d003      	beq.n	800abfc <__gethex+0x1ac>
 800abf4:	454b      	cmp	r3, r9
 800abf6:	dc36      	bgt.n	800ac66 <__gethex+0x216>
 800abf8:	f04f 0902 	mov.w	r9, #2
 800abfc:	4629      	mov	r1, r5
 800abfe:	4620      	mov	r0, r4
 800ac00:	f7ff febd 	bl	800a97e <rshift>
 800ac04:	442f      	add	r7, r5
 800ac06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac0a:	42bb      	cmp	r3, r7
 800ac0c:	da42      	bge.n	800ac94 <__gethex+0x244>
 800ac0e:	4621      	mov	r1, r4
 800ac10:	9801      	ldr	r0, [sp, #4]
 800ac12:	f7fe f9f7 	bl	8009004 <_Bfree>
 800ac16:	2300      	movs	r3, #0
 800ac18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac1a:	25a3      	movs	r5, #163	@ 0xa3
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	e793      	b.n	800ab48 <__gethex+0xf8>
 800ac20:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac24:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac26:	d012      	beq.n	800ac4e <__gethex+0x1fe>
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d104      	bne.n	800ac36 <__gethex+0x1e6>
 800ac2c:	f845 bb04 	str.w	fp, [r5], #4
 800ac30:	f04f 0b00 	mov.w	fp, #0
 800ac34:	465b      	mov	r3, fp
 800ac36:	7830      	ldrb	r0, [r6, #0]
 800ac38:	9303      	str	r3, [sp, #12]
 800ac3a:	f7ff fef3 	bl	800aa24 <__hexdig_fun>
 800ac3e:	9b03      	ldr	r3, [sp, #12]
 800ac40:	f000 000f 	and.w	r0, r0, #15
 800ac44:	4098      	lsls	r0, r3
 800ac46:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	e7ae      	b.n	800abac <__gethex+0x15c>
 800ac4e:	45b1      	cmp	r9, r6
 800ac50:	d8ea      	bhi.n	800ac28 <__gethex+0x1d8>
 800ac52:	2201      	movs	r2, #1
 800ac54:	4630      	mov	r0, r6
 800ac56:	492a      	ldr	r1, [pc, #168]	@ (800ad00 <__gethex+0x2b0>)
 800ac58:	9303      	str	r3, [sp, #12]
 800ac5a:	f7ff fe4d 	bl	800a8f8 <strncmp>
 800ac5e:	9b03      	ldr	r3, [sp, #12]
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d1e1      	bne.n	800ac28 <__gethex+0x1d8>
 800ac64:	e7a2      	b.n	800abac <__gethex+0x15c>
 800ac66:	4620      	mov	r0, r4
 800ac68:	1ea9      	subs	r1, r5, #2
 800ac6a:	f7fe fe10 	bl	800988e <__any_on>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d0c2      	beq.n	800abf8 <__gethex+0x1a8>
 800ac72:	f04f 0903 	mov.w	r9, #3
 800ac76:	e7c1      	b.n	800abfc <__gethex+0x1ac>
 800ac78:	da09      	bge.n	800ac8e <__gethex+0x23e>
 800ac7a:	1b75      	subs	r5, r6, r5
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	462a      	mov	r2, r5
 800ac80:	9801      	ldr	r0, [sp, #4]
 800ac82:	f7fe fbd5 	bl	8009430 <__lshift>
 800ac86:	4604      	mov	r4, r0
 800ac88:	1b7f      	subs	r7, r7, r5
 800ac8a:	f100 0a14 	add.w	sl, r0, #20
 800ac8e:	f04f 0900 	mov.w	r9, #0
 800ac92:	e7b8      	b.n	800ac06 <__gethex+0x1b6>
 800ac94:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac98:	42bd      	cmp	r5, r7
 800ac9a:	dd6f      	ble.n	800ad7c <__gethex+0x32c>
 800ac9c:	1bed      	subs	r5, r5, r7
 800ac9e:	42ae      	cmp	r6, r5
 800aca0:	dc34      	bgt.n	800ad0c <__gethex+0x2bc>
 800aca2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d022      	beq.n	800acf0 <__gethex+0x2a0>
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d024      	beq.n	800acf8 <__gethex+0x2a8>
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d115      	bne.n	800acde <__gethex+0x28e>
 800acb2:	42ae      	cmp	r6, r5
 800acb4:	d113      	bne.n	800acde <__gethex+0x28e>
 800acb6:	2e01      	cmp	r6, #1
 800acb8:	d10b      	bne.n	800acd2 <__gethex+0x282>
 800acba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800acbe:	9a02      	ldr	r2, [sp, #8]
 800acc0:	2562      	movs	r5, #98	@ 0x62
 800acc2:	6013      	str	r3, [r2, #0]
 800acc4:	2301      	movs	r3, #1
 800acc6:	6123      	str	r3, [r4, #16]
 800acc8:	f8ca 3000 	str.w	r3, [sl]
 800accc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acce:	601c      	str	r4, [r3, #0]
 800acd0:	e73a      	b.n	800ab48 <__gethex+0xf8>
 800acd2:	4620      	mov	r0, r4
 800acd4:	1e71      	subs	r1, r6, #1
 800acd6:	f7fe fdda 	bl	800988e <__any_on>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d1ed      	bne.n	800acba <__gethex+0x26a>
 800acde:	4621      	mov	r1, r4
 800ace0:	9801      	ldr	r0, [sp, #4]
 800ace2:	f7fe f98f 	bl	8009004 <_Bfree>
 800ace6:	2300      	movs	r3, #0
 800ace8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acea:	2550      	movs	r5, #80	@ 0x50
 800acec:	6013      	str	r3, [r2, #0]
 800acee:	e72b      	b.n	800ab48 <__gethex+0xf8>
 800acf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1f3      	bne.n	800acde <__gethex+0x28e>
 800acf6:	e7e0      	b.n	800acba <__gethex+0x26a>
 800acf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1dd      	bne.n	800acba <__gethex+0x26a>
 800acfe:	e7ee      	b.n	800acde <__gethex+0x28e>
 800ad00:	0800e998 	.word	0x0800e998
 800ad04:	0800e82e 	.word	0x0800e82e
 800ad08:	0800ea09 	.word	0x0800ea09
 800ad0c:	1e6f      	subs	r7, r5, #1
 800ad0e:	f1b9 0f00 	cmp.w	r9, #0
 800ad12:	d130      	bne.n	800ad76 <__gethex+0x326>
 800ad14:	b127      	cbz	r7, 800ad20 <__gethex+0x2d0>
 800ad16:	4639      	mov	r1, r7
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f7fe fdb8 	bl	800988e <__any_on>
 800ad1e:	4681      	mov	r9, r0
 800ad20:	2301      	movs	r3, #1
 800ad22:	4629      	mov	r1, r5
 800ad24:	1b76      	subs	r6, r6, r5
 800ad26:	2502      	movs	r5, #2
 800ad28:	117a      	asrs	r2, r7, #5
 800ad2a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad2e:	f007 071f 	and.w	r7, r7, #31
 800ad32:	40bb      	lsls	r3, r7
 800ad34:	4213      	tst	r3, r2
 800ad36:	4620      	mov	r0, r4
 800ad38:	bf18      	it	ne
 800ad3a:	f049 0902 	orrne.w	r9, r9, #2
 800ad3e:	f7ff fe1e 	bl	800a97e <rshift>
 800ad42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad46:	f1b9 0f00 	cmp.w	r9, #0
 800ad4a:	d047      	beq.n	800addc <__gethex+0x38c>
 800ad4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d015      	beq.n	800ad80 <__gethex+0x330>
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d017      	beq.n	800ad88 <__gethex+0x338>
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d109      	bne.n	800ad70 <__gethex+0x320>
 800ad5c:	f019 0f02 	tst.w	r9, #2
 800ad60:	d006      	beq.n	800ad70 <__gethex+0x320>
 800ad62:	f8da 3000 	ldr.w	r3, [sl]
 800ad66:	ea49 0903 	orr.w	r9, r9, r3
 800ad6a:	f019 0f01 	tst.w	r9, #1
 800ad6e:	d10e      	bne.n	800ad8e <__gethex+0x33e>
 800ad70:	f045 0510 	orr.w	r5, r5, #16
 800ad74:	e032      	b.n	800addc <__gethex+0x38c>
 800ad76:	f04f 0901 	mov.w	r9, #1
 800ad7a:	e7d1      	b.n	800ad20 <__gethex+0x2d0>
 800ad7c:	2501      	movs	r5, #1
 800ad7e:	e7e2      	b.n	800ad46 <__gethex+0x2f6>
 800ad80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad82:	f1c3 0301 	rsb	r3, r3, #1
 800ad86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0f0      	beq.n	800ad70 <__gethex+0x320>
 800ad8e:	f04f 0c00 	mov.w	ip, #0
 800ad92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad96:	f104 0314 	add.w	r3, r4, #20
 800ad9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ada2:	4618      	mov	r0, r3
 800ada4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800adac:	d01b      	beq.n	800ade6 <__gethex+0x396>
 800adae:	3201      	adds	r2, #1
 800adb0:	6002      	str	r2, [r0, #0]
 800adb2:	2d02      	cmp	r5, #2
 800adb4:	f104 0314 	add.w	r3, r4, #20
 800adb8:	d13c      	bne.n	800ae34 <__gethex+0x3e4>
 800adba:	f8d8 2000 	ldr.w	r2, [r8]
 800adbe:	3a01      	subs	r2, #1
 800adc0:	42b2      	cmp	r2, r6
 800adc2:	d109      	bne.n	800add8 <__gethex+0x388>
 800adc4:	2201      	movs	r2, #1
 800adc6:	1171      	asrs	r1, r6, #5
 800adc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adcc:	f006 061f 	and.w	r6, r6, #31
 800add0:	fa02 f606 	lsl.w	r6, r2, r6
 800add4:	421e      	tst	r6, r3
 800add6:	d13a      	bne.n	800ae4e <__gethex+0x3fe>
 800add8:	f045 0520 	orr.w	r5, r5, #32
 800addc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adde:	601c      	str	r4, [r3, #0]
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	601f      	str	r7, [r3, #0]
 800ade4:	e6b0      	b.n	800ab48 <__gethex+0xf8>
 800ade6:	4299      	cmp	r1, r3
 800ade8:	f843 cc04 	str.w	ip, [r3, #-4]
 800adec:	d8d9      	bhi.n	800ada2 <__gethex+0x352>
 800adee:	68a3      	ldr	r3, [r4, #8]
 800adf0:	459b      	cmp	fp, r3
 800adf2:	db17      	blt.n	800ae24 <__gethex+0x3d4>
 800adf4:	6861      	ldr	r1, [r4, #4]
 800adf6:	9801      	ldr	r0, [sp, #4]
 800adf8:	3101      	adds	r1, #1
 800adfa:	f7fe f8c3 	bl	8008f84 <_Balloc>
 800adfe:	4681      	mov	r9, r0
 800ae00:	b918      	cbnz	r0, 800ae0a <__gethex+0x3ba>
 800ae02:	4602      	mov	r2, r0
 800ae04:	2184      	movs	r1, #132	@ 0x84
 800ae06:	4b19      	ldr	r3, [pc, #100]	@ (800ae6c <__gethex+0x41c>)
 800ae08:	e6c5      	b.n	800ab96 <__gethex+0x146>
 800ae0a:	6922      	ldr	r2, [r4, #16]
 800ae0c:	f104 010c 	add.w	r1, r4, #12
 800ae10:	3202      	adds	r2, #2
 800ae12:	0092      	lsls	r2, r2, #2
 800ae14:	300c      	adds	r0, #12
 800ae16:	f7fd f934 	bl	8008082 <memcpy>
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	9801      	ldr	r0, [sp, #4]
 800ae1e:	f7fe f8f1 	bl	8009004 <_Bfree>
 800ae22:	464c      	mov	r4, r9
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	6122      	str	r2, [r4, #16]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae30:	615a      	str	r2, [r3, #20]
 800ae32:	e7be      	b.n	800adb2 <__gethex+0x362>
 800ae34:	6922      	ldr	r2, [r4, #16]
 800ae36:	455a      	cmp	r2, fp
 800ae38:	dd0b      	ble.n	800ae52 <__gethex+0x402>
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f7ff fd9e 	bl	800a97e <rshift>
 800ae42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae46:	3701      	adds	r7, #1
 800ae48:	42bb      	cmp	r3, r7
 800ae4a:	f6ff aee0 	blt.w	800ac0e <__gethex+0x1be>
 800ae4e:	2501      	movs	r5, #1
 800ae50:	e7c2      	b.n	800add8 <__gethex+0x388>
 800ae52:	f016 061f 	ands.w	r6, r6, #31
 800ae56:	d0fa      	beq.n	800ae4e <__gethex+0x3fe>
 800ae58:	4453      	add	r3, sl
 800ae5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae5e:	f7fe f983 	bl	8009168 <__hi0bits>
 800ae62:	f1c6 0620 	rsb	r6, r6, #32
 800ae66:	42b0      	cmp	r0, r6
 800ae68:	dbe7      	blt.n	800ae3a <__gethex+0x3ea>
 800ae6a:	e7f0      	b.n	800ae4e <__gethex+0x3fe>
 800ae6c:	0800e82e 	.word	0x0800e82e

0800ae70 <L_shift>:
 800ae70:	f1c2 0208 	rsb	r2, r2, #8
 800ae74:	0092      	lsls	r2, r2, #2
 800ae76:	b570      	push	{r4, r5, r6, lr}
 800ae78:	f1c2 0620 	rsb	r6, r2, #32
 800ae7c:	6843      	ldr	r3, [r0, #4]
 800ae7e:	6804      	ldr	r4, [r0, #0]
 800ae80:	fa03 f506 	lsl.w	r5, r3, r6
 800ae84:	432c      	orrs	r4, r5
 800ae86:	40d3      	lsrs	r3, r2
 800ae88:	6004      	str	r4, [r0, #0]
 800ae8a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae8e:	4288      	cmp	r0, r1
 800ae90:	d3f4      	bcc.n	800ae7c <L_shift+0xc>
 800ae92:	bd70      	pop	{r4, r5, r6, pc}

0800ae94 <__match>:
 800ae94:	b530      	push	{r4, r5, lr}
 800ae96:	6803      	ldr	r3, [r0, #0]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae9e:	b914      	cbnz	r4, 800aea6 <__match+0x12>
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	2001      	movs	r0, #1
 800aea4:	bd30      	pop	{r4, r5, pc}
 800aea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeaa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aeae:	2d19      	cmp	r5, #25
 800aeb0:	bf98      	it	ls
 800aeb2:	3220      	addls	r2, #32
 800aeb4:	42a2      	cmp	r2, r4
 800aeb6:	d0f0      	beq.n	800ae9a <__match+0x6>
 800aeb8:	2000      	movs	r0, #0
 800aeba:	e7f3      	b.n	800aea4 <__match+0x10>

0800aebc <__hexnan>:
 800aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	2500      	movs	r5, #0
 800aec2:	680b      	ldr	r3, [r1, #0]
 800aec4:	4682      	mov	sl, r0
 800aec6:	115e      	asrs	r6, r3, #5
 800aec8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aecc:	f013 031f 	ands.w	r3, r3, #31
 800aed0:	bf18      	it	ne
 800aed2:	3604      	addne	r6, #4
 800aed4:	1f37      	subs	r7, r6, #4
 800aed6:	4690      	mov	r8, r2
 800aed8:	46b9      	mov	r9, r7
 800aeda:	463c      	mov	r4, r7
 800aedc:	46ab      	mov	fp, r5
 800aede:	b087      	sub	sp, #28
 800aee0:	6801      	ldr	r1, [r0, #0]
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	f846 5c04 	str.w	r5, [r6, #-4]
 800aee8:	9502      	str	r5, [sp, #8]
 800aeea:	784a      	ldrb	r2, [r1, #1]
 800aeec:	1c4b      	adds	r3, r1, #1
 800aeee:	9303      	str	r3, [sp, #12]
 800aef0:	b342      	cbz	r2, 800af44 <__hexnan+0x88>
 800aef2:	4610      	mov	r0, r2
 800aef4:	9105      	str	r1, [sp, #20]
 800aef6:	9204      	str	r2, [sp, #16]
 800aef8:	f7ff fd94 	bl	800aa24 <__hexdig_fun>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d151      	bne.n	800afa4 <__hexnan+0xe8>
 800af00:	9a04      	ldr	r2, [sp, #16]
 800af02:	9905      	ldr	r1, [sp, #20]
 800af04:	2a20      	cmp	r2, #32
 800af06:	d818      	bhi.n	800af3a <__hexnan+0x7e>
 800af08:	9b02      	ldr	r3, [sp, #8]
 800af0a:	459b      	cmp	fp, r3
 800af0c:	dd13      	ble.n	800af36 <__hexnan+0x7a>
 800af0e:	454c      	cmp	r4, r9
 800af10:	d206      	bcs.n	800af20 <__hexnan+0x64>
 800af12:	2d07      	cmp	r5, #7
 800af14:	dc04      	bgt.n	800af20 <__hexnan+0x64>
 800af16:	462a      	mov	r2, r5
 800af18:	4649      	mov	r1, r9
 800af1a:	4620      	mov	r0, r4
 800af1c:	f7ff ffa8 	bl	800ae70 <L_shift>
 800af20:	4544      	cmp	r4, r8
 800af22:	d952      	bls.n	800afca <__hexnan+0x10e>
 800af24:	2300      	movs	r3, #0
 800af26:	f1a4 0904 	sub.w	r9, r4, #4
 800af2a:	f844 3c04 	str.w	r3, [r4, #-4]
 800af2e:	461d      	mov	r5, r3
 800af30:	464c      	mov	r4, r9
 800af32:	f8cd b008 	str.w	fp, [sp, #8]
 800af36:	9903      	ldr	r1, [sp, #12]
 800af38:	e7d7      	b.n	800aeea <__hexnan+0x2e>
 800af3a:	2a29      	cmp	r2, #41	@ 0x29
 800af3c:	d157      	bne.n	800afee <__hexnan+0x132>
 800af3e:	3102      	adds	r1, #2
 800af40:	f8ca 1000 	str.w	r1, [sl]
 800af44:	f1bb 0f00 	cmp.w	fp, #0
 800af48:	d051      	beq.n	800afee <__hexnan+0x132>
 800af4a:	454c      	cmp	r4, r9
 800af4c:	d206      	bcs.n	800af5c <__hexnan+0xa0>
 800af4e:	2d07      	cmp	r5, #7
 800af50:	dc04      	bgt.n	800af5c <__hexnan+0xa0>
 800af52:	462a      	mov	r2, r5
 800af54:	4649      	mov	r1, r9
 800af56:	4620      	mov	r0, r4
 800af58:	f7ff ff8a 	bl	800ae70 <L_shift>
 800af5c:	4544      	cmp	r4, r8
 800af5e:	d936      	bls.n	800afce <__hexnan+0x112>
 800af60:	4623      	mov	r3, r4
 800af62:	f1a8 0204 	sub.w	r2, r8, #4
 800af66:	f853 1b04 	ldr.w	r1, [r3], #4
 800af6a:	429f      	cmp	r7, r3
 800af6c:	f842 1f04 	str.w	r1, [r2, #4]!
 800af70:	d2f9      	bcs.n	800af66 <__hexnan+0xaa>
 800af72:	1b3b      	subs	r3, r7, r4
 800af74:	f023 0303 	bic.w	r3, r3, #3
 800af78:	3304      	adds	r3, #4
 800af7a:	3401      	adds	r4, #1
 800af7c:	3e03      	subs	r6, #3
 800af7e:	42b4      	cmp	r4, r6
 800af80:	bf88      	it	hi
 800af82:	2304      	movhi	r3, #4
 800af84:	2200      	movs	r2, #0
 800af86:	4443      	add	r3, r8
 800af88:	f843 2b04 	str.w	r2, [r3], #4
 800af8c:	429f      	cmp	r7, r3
 800af8e:	d2fb      	bcs.n	800af88 <__hexnan+0xcc>
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	b91b      	cbnz	r3, 800af9c <__hexnan+0xe0>
 800af94:	4547      	cmp	r7, r8
 800af96:	d128      	bne.n	800afea <__hexnan+0x12e>
 800af98:	2301      	movs	r3, #1
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	2005      	movs	r0, #5
 800af9e:	b007      	add	sp, #28
 800afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa4:	3501      	adds	r5, #1
 800afa6:	2d08      	cmp	r5, #8
 800afa8:	f10b 0b01 	add.w	fp, fp, #1
 800afac:	dd06      	ble.n	800afbc <__hexnan+0x100>
 800afae:	4544      	cmp	r4, r8
 800afb0:	d9c1      	bls.n	800af36 <__hexnan+0x7a>
 800afb2:	2300      	movs	r3, #0
 800afb4:	2501      	movs	r5, #1
 800afb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800afba:	3c04      	subs	r4, #4
 800afbc:	6822      	ldr	r2, [r4, #0]
 800afbe:	f000 000f 	and.w	r0, r0, #15
 800afc2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800afc6:	6020      	str	r0, [r4, #0]
 800afc8:	e7b5      	b.n	800af36 <__hexnan+0x7a>
 800afca:	2508      	movs	r5, #8
 800afcc:	e7b3      	b.n	800af36 <__hexnan+0x7a>
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d0dd      	beq.n	800af90 <__hexnan+0xd4>
 800afd4:	f04f 32ff 	mov.w	r2, #4294967295
 800afd8:	f1c3 0320 	rsb	r3, r3, #32
 800afdc:	40da      	lsrs	r2, r3
 800afde:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800afe2:	4013      	ands	r3, r2
 800afe4:	f846 3c04 	str.w	r3, [r6, #-4]
 800afe8:	e7d2      	b.n	800af90 <__hexnan+0xd4>
 800afea:	3f04      	subs	r7, #4
 800afec:	e7d0      	b.n	800af90 <__hexnan+0xd4>
 800afee:	2004      	movs	r0, #4
 800aff0:	e7d5      	b.n	800af9e <__hexnan+0xe2>

0800aff2 <__ascii_mbtowc>:
 800aff2:	b082      	sub	sp, #8
 800aff4:	b901      	cbnz	r1, 800aff8 <__ascii_mbtowc+0x6>
 800aff6:	a901      	add	r1, sp, #4
 800aff8:	b142      	cbz	r2, 800b00c <__ascii_mbtowc+0x1a>
 800affa:	b14b      	cbz	r3, 800b010 <__ascii_mbtowc+0x1e>
 800affc:	7813      	ldrb	r3, [r2, #0]
 800affe:	600b      	str	r3, [r1, #0]
 800b000:	7812      	ldrb	r2, [r2, #0]
 800b002:	1e10      	subs	r0, r2, #0
 800b004:	bf18      	it	ne
 800b006:	2001      	movne	r0, #1
 800b008:	b002      	add	sp, #8
 800b00a:	4770      	bx	lr
 800b00c:	4610      	mov	r0, r2
 800b00e:	e7fb      	b.n	800b008 <__ascii_mbtowc+0x16>
 800b010:	f06f 0001 	mvn.w	r0, #1
 800b014:	e7f8      	b.n	800b008 <__ascii_mbtowc+0x16>

0800b016 <_realloc_r>:
 800b016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b01a:	4680      	mov	r8, r0
 800b01c:	4615      	mov	r5, r2
 800b01e:	460c      	mov	r4, r1
 800b020:	b921      	cbnz	r1, 800b02c <_realloc_r+0x16>
 800b022:	4611      	mov	r1, r2
 800b024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	f7fd bf20 	b.w	8008e6c <_malloc_r>
 800b02c:	b92a      	cbnz	r2, 800b03a <_realloc_r+0x24>
 800b02e:	f7fd feab 	bl	8008d88 <_free_r>
 800b032:	2400      	movs	r4, #0
 800b034:	4620      	mov	r0, r4
 800b036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b03a:	f000 fa3f 	bl	800b4bc <_malloc_usable_size_r>
 800b03e:	4285      	cmp	r5, r0
 800b040:	4606      	mov	r6, r0
 800b042:	d802      	bhi.n	800b04a <_realloc_r+0x34>
 800b044:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b048:	d8f4      	bhi.n	800b034 <_realloc_r+0x1e>
 800b04a:	4629      	mov	r1, r5
 800b04c:	4640      	mov	r0, r8
 800b04e:	f7fd ff0d 	bl	8008e6c <_malloc_r>
 800b052:	4607      	mov	r7, r0
 800b054:	2800      	cmp	r0, #0
 800b056:	d0ec      	beq.n	800b032 <_realloc_r+0x1c>
 800b058:	42b5      	cmp	r5, r6
 800b05a:	462a      	mov	r2, r5
 800b05c:	4621      	mov	r1, r4
 800b05e:	bf28      	it	cs
 800b060:	4632      	movcs	r2, r6
 800b062:	f7fd f80e 	bl	8008082 <memcpy>
 800b066:	4621      	mov	r1, r4
 800b068:	4640      	mov	r0, r8
 800b06a:	f7fd fe8d 	bl	8008d88 <_free_r>
 800b06e:	463c      	mov	r4, r7
 800b070:	e7e0      	b.n	800b034 <_realloc_r+0x1e>

0800b072 <__ascii_wctomb>:
 800b072:	4603      	mov	r3, r0
 800b074:	4608      	mov	r0, r1
 800b076:	b141      	cbz	r1, 800b08a <__ascii_wctomb+0x18>
 800b078:	2aff      	cmp	r2, #255	@ 0xff
 800b07a:	d904      	bls.n	800b086 <__ascii_wctomb+0x14>
 800b07c:	228a      	movs	r2, #138	@ 0x8a
 800b07e:	f04f 30ff 	mov.w	r0, #4294967295
 800b082:	601a      	str	r2, [r3, #0]
 800b084:	4770      	bx	lr
 800b086:	2001      	movs	r0, #1
 800b088:	700a      	strb	r2, [r1, #0]
 800b08a:	4770      	bx	lr

0800b08c <__sfputc_r>:
 800b08c:	6893      	ldr	r3, [r2, #8]
 800b08e:	b410      	push	{r4}
 800b090:	3b01      	subs	r3, #1
 800b092:	2b00      	cmp	r3, #0
 800b094:	6093      	str	r3, [r2, #8]
 800b096:	da07      	bge.n	800b0a8 <__sfputc_r+0x1c>
 800b098:	6994      	ldr	r4, [r2, #24]
 800b09a:	42a3      	cmp	r3, r4
 800b09c:	db01      	blt.n	800b0a2 <__sfputc_r+0x16>
 800b09e:	290a      	cmp	r1, #10
 800b0a0:	d102      	bne.n	800b0a8 <__sfputc_r+0x1c>
 800b0a2:	bc10      	pop	{r4}
 800b0a4:	f000 b932 	b.w	800b30c <__swbuf_r>
 800b0a8:	6813      	ldr	r3, [r2, #0]
 800b0aa:	1c58      	adds	r0, r3, #1
 800b0ac:	6010      	str	r0, [r2, #0]
 800b0ae:	7019      	strb	r1, [r3, #0]
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	bc10      	pop	{r4}
 800b0b4:	4770      	bx	lr

0800b0b6 <__sfputs_r>:
 800b0b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	460f      	mov	r7, r1
 800b0bc:	4614      	mov	r4, r2
 800b0be:	18d5      	adds	r5, r2, r3
 800b0c0:	42ac      	cmp	r4, r5
 800b0c2:	d101      	bne.n	800b0c8 <__sfputs_r+0x12>
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	e007      	b.n	800b0d8 <__sfputs_r+0x22>
 800b0c8:	463a      	mov	r2, r7
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d0:	f7ff ffdc 	bl	800b08c <__sfputc_r>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d1f3      	bne.n	800b0c0 <__sfputs_r+0xa>
 800b0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0dc <_vfiprintf_r>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	460d      	mov	r5, r1
 800b0e2:	4614      	mov	r4, r2
 800b0e4:	4698      	mov	r8, r3
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	b09d      	sub	sp, #116	@ 0x74
 800b0ea:	b118      	cbz	r0, 800b0f4 <_vfiprintf_r+0x18>
 800b0ec:	6a03      	ldr	r3, [r0, #32]
 800b0ee:	b90b      	cbnz	r3, 800b0f4 <_vfiprintf_r+0x18>
 800b0f0:	f7fc fde8 	bl	8007cc4 <__sinit>
 800b0f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0f6:	07d9      	lsls	r1, r3, #31
 800b0f8:	d405      	bmi.n	800b106 <_vfiprintf_r+0x2a>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	059a      	lsls	r2, r3, #22
 800b0fe:	d402      	bmi.n	800b106 <_vfiprintf_r+0x2a>
 800b100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b102:	f7fc ffa6 	bl	8008052 <__retarget_lock_acquire_recursive>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	071b      	lsls	r3, r3, #28
 800b10a:	d501      	bpl.n	800b110 <_vfiprintf_r+0x34>
 800b10c:	692b      	ldr	r3, [r5, #16]
 800b10e:	b99b      	cbnz	r3, 800b138 <_vfiprintf_r+0x5c>
 800b110:	4629      	mov	r1, r5
 800b112:	4630      	mov	r0, r6
 800b114:	f000 f938 	bl	800b388 <__swsetup_r>
 800b118:	b170      	cbz	r0, 800b138 <_vfiprintf_r+0x5c>
 800b11a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b11c:	07dc      	lsls	r4, r3, #31
 800b11e:	d504      	bpl.n	800b12a <_vfiprintf_r+0x4e>
 800b120:	f04f 30ff 	mov.w	r0, #4294967295
 800b124:	b01d      	add	sp, #116	@ 0x74
 800b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	0598      	lsls	r0, r3, #22
 800b12e:	d4f7      	bmi.n	800b120 <_vfiprintf_r+0x44>
 800b130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b132:	f7fc ff8f 	bl	8008054 <__retarget_lock_release_recursive>
 800b136:	e7f3      	b.n	800b120 <_vfiprintf_r+0x44>
 800b138:	2300      	movs	r3, #0
 800b13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b13c:	2320      	movs	r3, #32
 800b13e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b142:	2330      	movs	r3, #48	@ 0x30
 800b144:	f04f 0901 	mov.w	r9, #1
 800b148:	f8cd 800c 	str.w	r8, [sp, #12]
 800b14c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b2f8 <_vfiprintf_r+0x21c>
 800b150:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b154:	4623      	mov	r3, r4
 800b156:	469a      	mov	sl, r3
 800b158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b15c:	b10a      	cbz	r2, 800b162 <_vfiprintf_r+0x86>
 800b15e:	2a25      	cmp	r2, #37	@ 0x25
 800b160:	d1f9      	bne.n	800b156 <_vfiprintf_r+0x7a>
 800b162:	ebba 0b04 	subs.w	fp, sl, r4
 800b166:	d00b      	beq.n	800b180 <_vfiprintf_r+0xa4>
 800b168:	465b      	mov	r3, fp
 800b16a:	4622      	mov	r2, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ffa1 	bl	800b0b6 <__sfputs_r>
 800b174:	3001      	adds	r0, #1
 800b176:	f000 80a7 	beq.w	800b2c8 <_vfiprintf_r+0x1ec>
 800b17a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b17c:	445a      	add	r2, fp
 800b17e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b180:	f89a 3000 	ldrb.w	r3, [sl]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 809f 	beq.w	800b2c8 <_vfiprintf_r+0x1ec>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b194:	f10a 0a01 	add.w	sl, sl, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	9307      	str	r3, [sp, #28]
 800b19c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2205      	movs	r2, #5
 800b1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1aa:	4853      	ldr	r0, [pc, #332]	@ (800b2f8 <_vfiprintf_r+0x21c>)
 800b1ac:	f7fc ff5b 	bl	8008066 <memchr>
 800b1b0:	9a04      	ldr	r2, [sp, #16]
 800b1b2:	b9d8      	cbnz	r0, 800b1ec <_vfiprintf_r+0x110>
 800b1b4:	06d1      	lsls	r1, r2, #27
 800b1b6:	bf44      	itt	mi
 800b1b8:	2320      	movmi	r3, #32
 800b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1be:	0713      	lsls	r3, r2, #28
 800b1c0:	bf44      	itt	mi
 800b1c2:	232b      	movmi	r3, #43	@ 0x2b
 800b1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1ce:	d015      	beq.n	800b1fc <_vfiprintf_r+0x120>
 800b1d0:	4654      	mov	r4, sl
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	f04f 0c0a 	mov.w	ip, #10
 800b1d8:	9a07      	ldr	r2, [sp, #28]
 800b1da:	4621      	mov	r1, r4
 800b1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e0:	3b30      	subs	r3, #48	@ 0x30
 800b1e2:	2b09      	cmp	r3, #9
 800b1e4:	d94b      	bls.n	800b27e <_vfiprintf_r+0x1a2>
 800b1e6:	b1b0      	cbz	r0, 800b216 <_vfiprintf_r+0x13a>
 800b1e8:	9207      	str	r2, [sp, #28]
 800b1ea:	e014      	b.n	800b216 <_vfiprintf_r+0x13a>
 800b1ec:	eba0 0308 	sub.w	r3, r0, r8
 800b1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	46a2      	mov	sl, r4
 800b1f8:	9304      	str	r3, [sp, #16]
 800b1fa:	e7d2      	b.n	800b1a2 <_vfiprintf_r+0xc6>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1d19      	adds	r1, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	9103      	str	r1, [sp, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfbb      	ittet	lt
 800b208:	425b      	neglt	r3, r3
 800b20a:	f042 0202 	orrlt.w	r2, r2, #2
 800b20e:	9307      	strge	r3, [sp, #28]
 800b210:	9307      	strlt	r3, [sp, #28]
 800b212:	bfb8      	it	lt
 800b214:	9204      	strlt	r2, [sp, #16]
 800b216:	7823      	ldrb	r3, [r4, #0]
 800b218:	2b2e      	cmp	r3, #46	@ 0x2e
 800b21a:	d10a      	bne.n	800b232 <_vfiprintf_r+0x156>
 800b21c:	7863      	ldrb	r3, [r4, #1]
 800b21e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b220:	d132      	bne.n	800b288 <_vfiprintf_r+0x1ac>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	3402      	adds	r4, #2
 800b226:	1d1a      	adds	r2, r3, #4
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	9203      	str	r2, [sp, #12]
 800b22c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b230:	9305      	str	r3, [sp, #20]
 800b232:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b2fc <_vfiprintf_r+0x220>
 800b236:	2203      	movs	r2, #3
 800b238:	4650      	mov	r0, sl
 800b23a:	7821      	ldrb	r1, [r4, #0]
 800b23c:	f7fc ff13 	bl	8008066 <memchr>
 800b240:	b138      	cbz	r0, 800b252 <_vfiprintf_r+0x176>
 800b242:	2240      	movs	r2, #64	@ 0x40
 800b244:	9b04      	ldr	r3, [sp, #16]
 800b246:	eba0 000a 	sub.w	r0, r0, sl
 800b24a:	4082      	lsls	r2, r0
 800b24c:	4313      	orrs	r3, r2
 800b24e:	3401      	adds	r4, #1
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b256:	2206      	movs	r2, #6
 800b258:	4829      	ldr	r0, [pc, #164]	@ (800b300 <_vfiprintf_r+0x224>)
 800b25a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b25e:	f7fc ff02 	bl	8008066 <memchr>
 800b262:	2800      	cmp	r0, #0
 800b264:	d03f      	beq.n	800b2e6 <_vfiprintf_r+0x20a>
 800b266:	4b27      	ldr	r3, [pc, #156]	@ (800b304 <_vfiprintf_r+0x228>)
 800b268:	bb1b      	cbnz	r3, 800b2b2 <_vfiprintf_r+0x1d6>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	3307      	adds	r3, #7
 800b26e:	f023 0307 	bic.w	r3, r3, #7
 800b272:	3308      	adds	r3, #8
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b278:	443b      	add	r3, r7
 800b27a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b27c:	e76a      	b.n	800b154 <_vfiprintf_r+0x78>
 800b27e:	460c      	mov	r4, r1
 800b280:	2001      	movs	r0, #1
 800b282:	fb0c 3202 	mla	r2, ip, r2, r3
 800b286:	e7a8      	b.n	800b1da <_vfiprintf_r+0xfe>
 800b288:	2300      	movs	r3, #0
 800b28a:	f04f 0c0a 	mov.w	ip, #10
 800b28e:	4619      	mov	r1, r3
 800b290:	3401      	adds	r4, #1
 800b292:	9305      	str	r3, [sp, #20]
 800b294:	4620      	mov	r0, r4
 800b296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b29a:	3a30      	subs	r2, #48	@ 0x30
 800b29c:	2a09      	cmp	r2, #9
 800b29e:	d903      	bls.n	800b2a8 <_vfiprintf_r+0x1cc>
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d0c6      	beq.n	800b232 <_vfiprintf_r+0x156>
 800b2a4:	9105      	str	r1, [sp, #20]
 800b2a6:	e7c4      	b.n	800b232 <_vfiprintf_r+0x156>
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2b0:	e7f0      	b.n	800b294 <_vfiprintf_r+0x1b8>
 800b2b2:	ab03      	add	r3, sp, #12
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	4b13      	ldr	r3, [pc, #76]	@ (800b308 <_vfiprintf_r+0x22c>)
 800b2bc:	a904      	add	r1, sp, #16
 800b2be:	f7fb fea7 	bl	8007010 <_printf_float>
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	1c78      	adds	r0, r7, #1
 800b2c6:	d1d6      	bne.n	800b276 <_vfiprintf_r+0x19a>
 800b2c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2ca:	07d9      	lsls	r1, r3, #31
 800b2cc:	d405      	bmi.n	800b2da <_vfiprintf_r+0x1fe>
 800b2ce:	89ab      	ldrh	r3, [r5, #12]
 800b2d0:	059a      	lsls	r2, r3, #22
 800b2d2:	d402      	bmi.n	800b2da <_vfiprintf_r+0x1fe>
 800b2d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2d6:	f7fc febd 	bl	8008054 <__retarget_lock_release_recursive>
 800b2da:	89ab      	ldrh	r3, [r5, #12]
 800b2dc:	065b      	lsls	r3, r3, #25
 800b2de:	f53f af1f 	bmi.w	800b120 <_vfiprintf_r+0x44>
 800b2e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2e4:	e71e      	b.n	800b124 <_vfiprintf_r+0x48>
 800b2e6:	ab03      	add	r3, sp, #12
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	462a      	mov	r2, r5
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	4b06      	ldr	r3, [pc, #24]	@ (800b308 <_vfiprintf_r+0x22c>)
 800b2f0:	a904      	add	r1, sp, #16
 800b2f2:	f7fc f92b 	bl	800754c <_printf_i>
 800b2f6:	e7e4      	b.n	800b2c2 <_vfiprintf_r+0x1e6>
 800b2f8:	0800e9f0 	.word	0x0800e9f0
 800b2fc:	0800e9f6 	.word	0x0800e9f6
 800b300:	0800e9fa 	.word	0x0800e9fa
 800b304:	08007011 	.word	0x08007011
 800b308:	0800b0b7 	.word	0x0800b0b7

0800b30c <__swbuf_r>:
 800b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30e:	460e      	mov	r6, r1
 800b310:	4614      	mov	r4, r2
 800b312:	4605      	mov	r5, r0
 800b314:	b118      	cbz	r0, 800b31e <__swbuf_r+0x12>
 800b316:	6a03      	ldr	r3, [r0, #32]
 800b318:	b90b      	cbnz	r3, 800b31e <__swbuf_r+0x12>
 800b31a:	f7fc fcd3 	bl	8007cc4 <__sinit>
 800b31e:	69a3      	ldr	r3, [r4, #24]
 800b320:	60a3      	str	r3, [r4, #8]
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	071a      	lsls	r2, r3, #28
 800b326:	d501      	bpl.n	800b32c <__swbuf_r+0x20>
 800b328:	6923      	ldr	r3, [r4, #16]
 800b32a:	b943      	cbnz	r3, 800b33e <__swbuf_r+0x32>
 800b32c:	4621      	mov	r1, r4
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 f82a 	bl	800b388 <__swsetup_r>
 800b334:	b118      	cbz	r0, 800b33e <__swbuf_r+0x32>
 800b336:	f04f 37ff 	mov.w	r7, #4294967295
 800b33a:	4638      	mov	r0, r7
 800b33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	6922      	ldr	r2, [r4, #16]
 800b342:	b2f6      	uxtb	r6, r6
 800b344:	1a98      	subs	r0, r3, r2
 800b346:	6963      	ldr	r3, [r4, #20]
 800b348:	4637      	mov	r7, r6
 800b34a:	4283      	cmp	r3, r0
 800b34c:	dc05      	bgt.n	800b35a <__swbuf_r+0x4e>
 800b34e:	4621      	mov	r1, r4
 800b350:	4628      	mov	r0, r5
 800b352:	f7ff fa97 	bl	800a884 <_fflush_r>
 800b356:	2800      	cmp	r0, #0
 800b358:	d1ed      	bne.n	800b336 <__swbuf_r+0x2a>
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	60a3      	str	r3, [r4, #8]
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	6022      	str	r2, [r4, #0]
 800b366:	701e      	strb	r6, [r3, #0]
 800b368:	6962      	ldr	r2, [r4, #20]
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d004      	beq.n	800b37a <__swbuf_r+0x6e>
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	07db      	lsls	r3, r3, #31
 800b374:	d5e1      	bpl.n	800b33a <__swbuf_r+0x2e>
 800b376:	2e0a      	cmp	r6, #10
 800b378:	d1df      	bne.n	800b33a <__swbuf_r+0x2e>
 800b37a:	4621      	mov	r1, r4
 800b37c:	4628      	mov	r0, r5
 800b37e:	f7ff fa81 	bl	800a884 <_fflush_r>
 800b382:	2800      	cmp	r0, #0
 800b384:	d0d9      	beq.n	800b33a <__swbuf_r+0x2e>
 800b386:	e7d6      	b.n	800b336 <__swbuf_r+0x2a>

0800b388 <__swsetup_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4b29      	ldr	r3, [pc, #164]	@ (800b430 <__swsetup_r+0xa8>)
 800b38c:	4605      	mov	r5, r0
 800b38e:	6818      	ldr	r0, [r3, #0]
 800b390:	460c      	mov	r4, r1
 800b392:	b118      	cbz	r0, 800b39c <__swsetup_r+0x14>
 800b394:	6a03      	ldr	r3, [r0, #32]
 800b396:	b90b      	cbnz	r3, 800b39c <__swsetup_r+0x14>
 800b398:	f7fc fc94 	bl	8007cc4 <__sinit>
 800b39c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a0:	0719      	lsls	r1, r3, #28
 800b3a2:	d422      	bmi.n	800b3ea <__swsetup_r+0x62>
 800b3a4:	06da      	lsls	r2, r3, #27
 800b3a6:	d407      	bmi.n	800b3b8 <__swsetup_r+0x30>
 800b3a8:	2209      	movs	r2, #9
 800b3aa:	602a      	str	r2, [r5, #0]
 800b3ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b4:	81a3      	strh	r3, [r4, #12]
 800b3b6:	e033      	b.n	800b420 <__swsetup_r+0x98>
 800b3b8:	0758      	lsls	r0, r3, #29
 800b3ba:	d512      	bpl.n	800b3e2 <__swsetup_r+0x5a>
 800b3bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3be:	b141      	cbz	r1, 800b3d2 <__swsetup_r+0x4a>
 800b3c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3c4:	4299      	cmp	r1, r3
 800b3c6:	d002      	beq.n	800b3ce <__swsetup_r+0x46>
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f7fd fcdd 	bl	8008d88 <_free_r>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b3d8:	81a3      	strh	r3, [r4, #12]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	6063      	str	r3, [r4, #4]
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f043 0308 	orr.w	r3, r3, #8
 800b3e8:	81a3      	strh	r3, [r4, #12]
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	b94b      	cbnz	r3, 800b402 <__swsetup_r+0x7a>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b3f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3f8:	d003      	beq.n	800b402 <__swsetup_r+0x7a>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	f000 f88a 	bl	800b516 <__smakebuf_r>
 800b402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b406:	f013 0201 	ands.w	r2, r3, #1
 800b40a:	d00a      	beq.n	800b422 <__swsetup_r+0x9a>
 800b40c:	2200      	movs	r2, #0
 800b40e:	60a2      	str	r2, [r4, #8]
 800b410:	6962      	ldr	r2, [r4, #20]
 800b412:	4252      	negs	r2, r2
 800b414:	61a2      	str	r2, [r4, #24]
 800b416:	6922      	ldr	r2, [r4, #16]
 800b418:	b942      	cbnz	r2, 800b42c <__swsetup_r+0xa4>
 800b41a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b41e:	d1c5      	bne.n	800b3ac <__swsetup_r+0x24>
 800b420:	bd38      	pop	{r3, r4, r5, pc}
 800b422:	0799      	lsls	r1, r3, #30
 800b424:	bf58      	it	pl
 800b426:	6962      	ldrpl	r2, [r4, #20]
 800b428:	60a2      	str	r2, [r4, #8]
 800b42a:	e7f4      	b.n	800b416 <__swsetup_r+0x8e>
 800b42c:	2000      	movs	r0, #0
 800b42e:	e7f7      	b.n	800b420 <__swsetup_r+0x98>
 800b430:	20000040 	.word	0x20000040

0800b434 <_raise_r>:
 800b434:	291f      	cmp	r1, #31
 800b436:	b538      	push	{r3, r4, r5, lr}
 800b438:	4605      	mov	r5, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	d904      	bls.n	800b448 <_raise_r+0x14>
 800b43e:	2316      	movs	r3, #22
 800b440:	6003      	str	r3, [r0, #0]
 800b442:	f04f 30ff 	mov.w	r0, #4294967295
 800b446:	bd38      	pop	{r3, r4, r5, pc}
 800b448:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b44a:	b112      	cbz	r2, 800b452 <_raise_r+0x1e>
 800b44c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b450:	b94b      	cbnz	r3, 800b466 <_raise_r+0x32>
 800b452:	4628      	mov	r0, r5
 800b454:	f000 f830 	bl	800b4b8 <_getpid_r>
 800b458:	4622      	mov	r2, r4
 800b45a:	4601      	mov	r1, r0
 800b45c:	4628      	mov	r0, r5
 800b45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b462:	f000 b817 	b.w	800b494 <_kill_r>
 800b466:	2b01      	cmp	r3, #1
 800b468:	d00a      	beq.n	800b480 <_raise_r+0x4c>
 800b46a:	1c59      	adds	r1, r3, #1
 800b46c:	d103      	bne.n	800b476 <_raise_r+0x42>
 800b46e:	2316      	movs	r3, #22
 800b470:	6003      	str	r3, [r0, #0]
 800b472:	2001      	movs	r0, #1
 800b474:	e7e7      	b.n	800b446 <_raise_r+0x12>
 800b476:	2100      	movs	r1, #0
 800b478:	4620      	mov	r0, r4
 800b47a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b47e:	4798      	blx	r3
 800b480:	2000      	movs	r0, #0
 800b482:	e7e0      	b.n	800b446 <_raise_r+0x12>

0800b484 <raise>:
 800b484:	4b02      	ldr	r3, [pc, #8]	@ (800b490 <raise+0xc>)
 800b486:	4601      	mov	r1, r0
 800b488:	6818      	ldr	r0, [r3, #0]
 800b48a:	f7ff bfd3 	b.w	800b434 <_raise_r>
 800b48e:	bf00      	nop
 800b490:	20000040 	.word	0x20000040

0800b494 <_kill_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	2300      	movs	r3, #0
 800b498:	4d06      	ldr	r5, [pc, #24]	@ (800b4b4 <_kill_r+0x20>)
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	4611      	mov	r1, r2
 800b4a0:	602b      	str	r3, [r5, #0]
 800b4a2:	f7f7 f9ce 	bl	8002842 <_kill>
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	d102      	bne.n	800b4b0 <_kill_r+0x1c>
 800b4aa:	682b      	ldr	r3, [r5, #0]
 800b4ac:	b103      	cbz	r3, 800b4b0 <_kill_r+0x1c>
 800b4ae:	6023      	str	r3, [r4, #0]
 800b4b0:	bd38      	pop	{r3, r4, r5, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20000a90 	.word	0x20000a90

0800b4b8 <_getpid_r>:
 800b4b8:	f7f7 b9bc 	b.w	8002834 <_getpid>

0800b4bc <_malloc_usable_size_r>:
 800b4bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c0:	1f18      	subs	r0, r3, #4
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	bfbc      	itt	lt
 800b4c6:	580b      	ldrlt	r3, [r1, r0]
 800b4c8:	18c0      	addlt	r0, r0, r3
 800b4ca:	4770      	bx	lr

0800b4cc <__swhatbuf_r>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d4:	4615      	mov	r5, r2
 800b4d6:	2900      	cmp	r1, #0
 800b4d8:	461e      	mov	r6, r3
 800b4da:	b096      	sub	sp, #88	@ 0x58
 800b4dc:	da0c      	bge.n	800b4f8 <__swhatbuf_r+0x2c>
 800b4de:	89a3      	ldrh	r3, [r4, #12]
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b4e6:	bf14      	ite	ne
 800b4e8:	2340      	movne	r3, #64	@ 0x40
 800b4ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	6031      	str	r1, [r6, #0]
 800b4f2:	602b      	str	r3, [r5, #0]
 800b4f4:	b016      	add	sp, #88	@ 0x58
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}
 800b4f8:	466a      	mov	r2, sp
 800b4fa:	f000 f849 	bl	800b590 <_fstat_r>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	dbed      	blt.n	800b4de <__swhatbuf_r+0x12>
 800b502:	9901      	ldr	r1, [sp, #4]
 800b504:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b508:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b50c:	4259      	negs	r1, r3
 800b50e:	4159      	adcs	r1, r3
 800b510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b514:	e7eb      	b.n	800b4ee <__swhatbuf_r+0x22>

0800b516 <__smakebuf_r>:
 800b516:	898b      	ldrh	r3, [r1, #12]
 800b518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b51a:	079d      	lsls	r5, r3, #30
 800b51c:	4606      	mov	r6, r0
 800b51e:	460c      	mov	r4, r1
 800b520:	d507      	bpl.n	800b532 <__smakebuf_r+0x1c>
 800b522:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b526:	6023      	str	r3, [r4, #0]
 800b528:	6123      	str	r3, [r4, #16]
 800b52a:	2301      	movs	r3, #1
 800b52c:	6163      	str	r3, [r4, #20]
 800b52e:	b003      	add	sp, #12
 800b530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b532:	466a      	mov	r2, sp
 800b534:	ab01      	add	r3, sp, #4
 800b536:	f7ff ffc9 	bl	800b4cc <__swhatbuf_r>
 800b53a:	9f00      	ldr	r7, [sp, #0]
 800b53c:	4605      	mov	r5, r0
 800b53e:	4639      	mov	r1, r7
 800b540:	4630      	mov	r0, r6
 800b542:	f7fd fc93 	bl	8008e6c <_malloc_r>
 800b546:	b948      	cbnz	r0, 800b55c <__smakebuf_r+0x46>
 800b548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54c:	059a      	lsls	r2, r3, #22
 800b54e:	d4ee      	bmi.n	800b52e <__smakebuf_r+0x18>
 800b550:	f023 0303 	bic.w	r3, r3, #3
 800b554:	f043 0302 	orr.w	r3, r3, #2
 800b558:	81a3      	strh	r3, [r4, #12]
 800b55a:	e7e2      	b.n	800b522 <__smakebuf_r+0xc>
 800b55c:	89a3      	ldrh	r3, [r4, #12]
 800b55e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b566:	81a3      	strh	r3, [r4, #12]
 800b568:	9b01      	ldr	r3, [sp, #4]
 800b56a:	6020      	str	r0, [r4, #0]
 800b56c:	b15b      	cbz	r3, 800b586 <__smakebuf_r+0x70>
 800b56e:	4630      	mov	r0, r6
 800b570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b574:	f000 f81e 	bl	800b5b4 <_isatty_r>
 800b578:	b128      	cbz	r0, 800b586 <__smakebuf_r+0x70>
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	f023 0303 	bic.w	r3, r3, #3
 800b580:	f043 0301 	orr.w	r3, r3, #1
 800b584:	81a3      	strh	r3, [r4, #12]
 800b586:	89a3      	ldrh	r3, [r4, #12]
 800b588:	431d      	orrs	r5, r3
 800b58a:	81a5      	strh	r5, [r4, #12]
 800b58c:	e7cf      	b.n	800b52e <__smakebuf_r+0x18>
	...

0800b590 <_fstat_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	2300      	movs	r3, #0
 800b594:	4d06      	ldr	r5, [pc, #24]	@ (800b5b0 <_fstat_r+0x20>)
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	4611      	mov	r1, r2
 800b59c:	602b      	str	r3, [r5, #0]
 800b59e:	f7f7 f9af 	bl	8002900 <_fstat>
 800b5a2:	1c43      	adds	r3, r0, #1
 800b5a4:	d102      	bne.n	800b5ac <_fstat_r+0x1c>
 800b5a6:	682b      	ldr	r3, [r5, #0]
 800b5a8:	b103      	cbz	r3, 800b5ac <_fstat_r+0x1c>
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	bd38      	pop	{r3, r4, r5, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20000a90 	.word	0x20000a90

0800b5b4 <_isatty_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	4d05      	ldr	r5, [pc, #20]	@ (800b5d0 <_isatty_r+0x1c>)
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	4608      	mov	r0, r1
 800b5be:	602b      	str	r3, [r5, #0]
 800b5c0:	f7f7 f9ad 	bl	800291e <_isatty>
 800b5c4:	1c43      	adds	r3, r0, #1
 800b5c6:	d102      	bne.n	800b5ce <_isatty_r+0x1a>
 800b5c8:	682b      	ldr	r3, [r5, #0]
 800b5ca:	b103      	cbz	r3, 800b5ce <_isatty_r+0x1a>
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	bd38      	pop	{r3, r4, r5, pc}
 800b5d0:	20000a90 	.word	0x20000a90

0800b5d4 <_init>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	bf00      	nop
 800b5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5da:	bc08      	pop	{r3}
 800b5dc:	469e      	mov	lr, r3
 800b5de:	4770      	bx	lr

0800b5e0 <_fini>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	bf00      	nop
 800b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	469e      	mov	lr, r3
 800b5ea:	4770      	bx	lr
