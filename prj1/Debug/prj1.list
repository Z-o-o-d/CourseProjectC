
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc90  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f3c  0800cd9c  0800cd9c  0000dd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcd8  0800fcd8  000112c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcd8  0800fcd8  00010cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fce0  0800fce0  000112c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fce0  0800fce0  00010ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fce4  0800fce4  00010ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0800fce8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f4  200002c8  0800ffb0  000112c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cbc  0800ffb0  00011cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000112c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c281  00000000  00000000  000112f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004579  00000000  00000000  0002d572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  00031af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c5  00000000  00000000  000332a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d072  00000000  00000000  0003456d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020849  00000000  00000000  000515df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097713  00000000  00000000  00071e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010953b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006818  00000000  00000000  00109580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0010fd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002c8 	.word	0x200002c8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800cd84 	.word	0x0800cd84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002cc 	.word	0x200002cc
 8000148:	0800cd84 	.word	0x0800cd84

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2uiz>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	d20e      	bcs.n	8000502 <__aeabi_f2uiz+0x22>
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004e8:	d30b      	bcc.n	8000502 <__aeabi_f2uiz+0x22>
 80004ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d409      	bmi.n	8000508 <__aeabi_f2uiz+0x28>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000500:	4770      	bx	lr
 8000502:	f04f 0000 	mov.w	r0, #0
 8000506:	4770      	bx	lr
 8000508:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800050c:	d101      	bne.n	8000512 <__aeabi_f2uiz+0x32>
 800050e:	0242      	lsls	r2, r0, #9
 8000510:	d102      	bne.n	8000518 <__aeabi_f2uiz+0x38>
 8000512:	f04f 30ff 	mov.w	r0, #4294967295
 8000516:	4770      	bx	lr
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	889b      	ldrh	r3, [r3, #4]
 800053e:	2201      	movs	r2, #1
 8000540:	4619      	mov	r1, r3
 8000542:	f002 fefc 	bl	800333e <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	889b      	ldrh	r3, [r3, #4]
 800054a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 800054c:	2311      	movs	r3, #17
 800054e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	79db      	ldrb	r3, [r3, #7]
 8000554:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000556:	2303      	movs	r3, #3
 8000558:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f107 0208 	add.w	r2, r7, #8
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f002 fd4f 	bl	8003008 <HAL_GPIO_Init>
}
 800056a:	bf00      	nop
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8000572:	b580      	push	{r7, lr}
 8000574:	b086      	sub	sp, #24
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	889b      	ldrh	r3, [r3, #4]
 800058c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	79db      	ldrb	r3, [r3, #7]
 8000596:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f107 0208 	add.w	r2, r7, #8
 80005a0:	4611      	mov	r1, r2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fd30 	bl	8003008 <HAL_GPIO_Init>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80005ba:	4a76      	ldr	r2, [pc, #472]	@ (8000794 <DHT_getData+0x1e4>)
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c4:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	799b      	ldrb	r3, [r3, #6]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d103      	bne.n	80005d8 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 80005d0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80005d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80005d6:	e002      	b.n	80005de <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 80005d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 80005de:	f001 fbdf 	bl	8001da0 <HAL_GetTick>
 80005e2:	4602      	mov	r2, r0
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	1ad2      	subs	r2, r2, r3
 80005ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d212      	bcs.n	8000616 <DHT_getData+0x66>
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00e      	beq.n	8000616 <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	61bb      	str	r3, [r7, #24]
		return data;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	461a      	mov	r2, r3
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000610:	e882 0003 	stmia.w	r2, {r0, r1}
 8000614:	e166      	b.n	80008e4 <DHT_getData+0x334>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8000616:	f001 fbc3 	bl	8001da0 <HAL_GetTick>
 800061a:	4603      	mov	r3, r0
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f7ff ff7c 	bl	8000520 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	889b      	ldrh	r3, [r3, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	f002 fe83 	bl	800333e <HAL_GPIO_WritePin>
	Delay(18);
 8000638:	2012      	movs	r0, #18
 800063a:	f001 fbbb 	bl	8001db4 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	889b      	ldrh	r3, [r3, #4]
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	f002 fe78 	bl	800333e <HAL_GPIO_WritePin>
	goToInput(sensor);
 800064e:	6838      	ldr	r0, [r7, #0]
 8000650:	f7ff ff8f 	bl	8000572 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 800065c:	e01a      	b.n	8000694 <DHT_getData+0xe4>
		timeout++;
 800065e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000660:	3301      	adds	r3, #1
 8000662:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8000664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000666:	f242 7210 	movw	r2, #10000	@ 0x2710
 800066a:	4293      	cmp	r3, r2
 800066c:	d912      	bls.n	8000694 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 800066e:	b662      	cpsie	i
}
 8000670:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000678:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000680:	60da      	str	r2, [r3, #12]

			return data;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	461a      	mov	r2, r3
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800068e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000692:	e127      	b.n	80008e4 <DHT_getData+0x334>
	while(getLine()) {
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	889b      	ldrh	r3, [r3, #4]
 800069c:	4619      	mov	r1, r3
 800069e:	4610      	mov	r0, r2
 80006a0:	f002 fe36 	bl	8003310 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d0d9      	beq.n	800065e <DHT_getData+0xae>
		}
	}
	timeout = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание подъёма
	while(!getLine()) {
 80006ae:	e01a      	b.n	80006e6 <DHT_getData+0x136>
		timeout++;
 80006b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006b2:	3301      	adds	r3, #1
 80006b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 80006b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006bc:	4293      	cmp	r3, r2
 80006be:	d912      	bls.n	80006e6 <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 80006c0:	b662      	cpsie	i
}
 80006c2:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80006ca:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80006d2:	60da      	str	r2, [r3, #12]

			return data;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	461a      	mov	r2, r3
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80006e4:	e0fe      	b.n	80008e4 <DHT_getData+0x334>
	while(!getLine()) {
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	889b      	ldrh	r3, [r3, #4]
 80006ee:	4619      	mov	r1, r3
 80006f0:	4610      	mov	r0, r2
 80006f2:	f002 fe0d 	bl	8003310 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d1d9      	bne.n	80006b0 <DHT_getData+0x100>
		}
	}
	timeout = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 8000700:	e012      	b.n	8000728 <DHT_getData+0x178>
		timeout++;
 8000702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000704:	3301      	adds	r3, #1
 8000706:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8000708:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800070a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800070e:	4293      	cmp	r3, r2
 8000710:	d90a      	bls.n	8000728 <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 8000712:	b662      	cpsie	i
}
 8000714:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	461a      	mov	r2, r3
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000722:	e882 0003 	stmia.w	r2, {r0, r1}
 8000726:	e0dd      	b.n	80008e4 <DHT_getData+0x334>
	while(getLine()) {
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	889b      	ldrh	r3, [r3, #4]
 8000730:	4619      	mov	r1, r3
 8000732:	4610      	mov	r0, r2
 8000734:	f002 fdec 	bl	8003310 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d0e1      	beq.n	8000702 <DHT_getData+0x152>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 800073e:	4a16      	ldr	r2, [pc, #88]	@ (8000798 <DHT_getData+0x1e8>)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000748:	6018      	str	r0, [r3, #0]
 800074a:	3304      	adds	r3, #4
 800074c:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 800074e:	2300      	movs	r3, #0
 8000750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000754:	e05d      	b.n	8000812 <DHT_getData+0x262>
		for(uint8_t b = 7; b != 255; b--) {
 8000756:	2307      	movs	r3, #7
 8000758:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800075c:	e050      	b.n	8000800 <DHT_getData+0x250>
			uint16_t hT = 0, lT = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	843b      	strh	r3, [r7, #32]
 8000762:	2300      	movs	r3, #0
 8000764:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8000766:	e002      	b.n	800076e <DHT_getData+0x1be>
 8000768:	8bfb      	ldrh	r3, [r7, #30]
 800076a:	3301      	adds	r3, #1
 800076c:	83fb      	strh	r3, [r7, #30]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	889b      	ldrh	r3, [r3, #4]
 8000776:	4619      	mov	r1, r3
 8000778:	4610      	mov	r0, r2
 800077a:	f002 fdc9 	bl	8003310 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b01      	cmp	r3, #1
 8000782:	d004      	beq.n	800078e <DHT_getData+0x1de>
 8000784:	8bfb      	ldrh	r3, [r7, #30]
 8000786:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800078a:	4293      	cmp	r3, r2
 800078c:	d1ec      	bne.n	8000768 <DHT_getData+0x1b8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	84bb      	strh	r3, [r7, #36]	@ 0x24
			while(getLine()&& hT != 65535) hT++;
 8000792:	e006      	b.n	80007a2 <DHT_getData+0x1f2>
 8000794:	0800cd9c 	.word	0x0800cd9c
 8000798:	0800cda4 	.word	0x0800cda4
 800079c:	8c3b      	ldrh	r3, [r7, #32]
 800079e:	3301      	adds	r3, #1
 80007a0:	843b      	strh	r3, [r7, #32]
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	889b      	ldrh	r3, [r3, #4]
 80007aa:	4619      	mov	r1, r3
 80007ac:	4610      	mov	r0, r2
 80007ae:	f002 fdaf 	bl	8003310 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d104      	bne.n	80007c2 <DHT_getData+0x212>
 80007b8:	8c3b      	ldrh	r3, [r7, #32]
 80007ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007be:	4293      	cmp	r3, r2
 80007c0:	d1ec      	bne.n	800079c <DHT_getData+0x1ec>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80007c2:	8c3a      	ldrh	r2, [r7, #32]
 80007c4:	8bfb      	ldrh	r3, [r7, #30]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d915      	bls.n	80007f6 <DHT_getData+0x246>
 80007ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80007ce:	3328      	adds	r3, #40	@ 0x28
 80007d0:	443b      	add	r3, r7
 80007d2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80007d6:	b25a      	sxtb	r2, r3
 80007d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80007dc:	2101      	movs	r1, #1
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	3328      	adds	r3, #40	@ 0x28
 80007f0:	443b      	add	r3, r7
 80007f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 80007f6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000800:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000804:	2bff      	cmp	r3, #255	@ 0xff
 8000806:	d1aa      	bne.n	800075e <DHT_getData+0x1ae>
	for(uint8_t a = 0; a < 5; a++) {
 8000808:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800080c:	3301      	adds	r3, #1
 800080e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000812:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000816:	2b04      	cmp	r3, #4
 8000818:	d99d      	bls.n	8000756 <DHT_getData+0x1a6>
  __ASM volatile ("cpsie i" : : : "memory");
 800081a:	b662      	cpsie	i
}
 800081c:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 800081e:	7b3a      	ldrb	r2, [r7, #12]
 8000820:	7b7b      	ldrb	r3, [r7, #13]
 8000822:	4413      	add	r3, r2
 8000824:	b2da      	uxtb	r2, r3
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	4413      	add	r3, r2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	4413      	add	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	7c3b      	ldrb	r3, [r7, #16]
 8000834:	429a      	cmp	r2, r3
 8000836:	d147      	bne.n	80008c8 <DHT_getData+0x318>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	799b      	ldrb	r3, [r3, #6]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d133      	bne.n	80008a8 <DHT_getData+0x2f8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8000840:	7b3b      	ldrb	r3, [r7, #12]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	7b7a      	ldrb	r2, [r7, #13]
 8000846:	4313      	orrs	r3, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fdf5 	bl	8000438 <__aeabi_i2f>
 800084e:	4603      	mov	r3, r0
 8000850:	4926      	ldr	r1, [pc, #152]	@ (80008ec <DHT_getData+0x33c>)
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fc82 	bl	800015c <__aeabi_fmul>
 8000858:	4603      	mov	r3, r0
 800085a:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	b25b      	sxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	db0e      	blt.n	8000882 <DHT_getData+0x2d2>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	4313      	orrs	r3, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fde3 	bl	8000438 <__aeabi_i2f>
 8000872:	4603      	mov	r3, r0
 8000874:	491d      	ldr	r1, [pc, #116]	@ (80008ec <DHT_getData+0x33c>)
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fc70 	bl	800015c <__aeabi_fmul>
 800087c:	4603      	mov	r3, r0
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	e012      	b.n	80008a8 <DHT_getData+0x2f8>
			}	else {
				rawData[2] &= ~(1<<7);
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000888:	b2db      	uxtb	r3, r3
 800088a:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	4313      	orrs	r3, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fdcf 	bl	8000438 <__aeabi_i2f>
 800089a:	4603      	mov	r3, r0
 800089c:	4914      	ldr	r1, [pc, #80]	@ (80008f0 <DHT_getData+0x340>)
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fc5c 	bl	800015c <__aeabi_fmul>
 80008a4:	4603      	mov	r3, r0
 80008a6:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	799b      	ldrb	r3, [r3, #6]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10b      	bne.n	80008c8 <DHT_getData+0x318>
			data.hum = (float)rawData[0];
 80008b0:	7b3b      	ldrb	r3, [r7, #12]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fdbc 	bl	8000430 <__aeabi_ui2f>
 80008b8:	4603      	mov	r3, r0
 80008ba:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80008bc:	7bbb      	ldrb	r3, [r7, #14]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fdb6 	bl	8000430 <__aeabi_ui2f>
 80008c4:	4603      	mov	r3, r0
 80008c6:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	461a      	mov	r2, r3
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008e0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	3dcccccd 	.word	0x3dcccccd
 80008f0:	bdcccccd 	.word	0xbdcccccd

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b500      	push	{lr}
 80008f6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f8:	2300      	movs	r3, #0
 80008fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80008fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80008fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000900:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000902:	9305      	str	r3, [sp, #20]
 8000904:	9306      	str	r3, [sp, #24]
 8000906:	9307      	str	r3, [sp, #28]
 8000908:	9308      	str	r3, [sp, #32]
 800090a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	9302      	str	r3, [sp, #8]
 8000910:	9303      	str	r3, [sp, #12]
 8000912:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2201      	movs	r2, #1
 8000916:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800091c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091e:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2202      	movs	r2, #2
 8000922:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000924:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000926:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800092a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	a80a      	add	r0, sp, #40	@ 0x28
 800092e:	f004 ff39 	bl	80057a4 <HAL_RCC_OscConfig>
 8000932:	b9d8      	cbnz	r0, 800096c <SystemClock_Config+0x78>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	230f      	movs	r3, #15
 8000936:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000938:	2102      	movs	r1, #2
 800093a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000940:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000944:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000946:	9309      	str	r3, [sp, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000948:	a805      	add	r0, sp, #20
 800094a:	f005 f9ad 	bl	8005ca8 <HAL_RCC_ClockConfig>
 800094e:	b978      	cbnz	r0, 8000970 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000950:	2312      	movs	r3, #18
 8000952:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000954:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000958:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800095a:	2300      	movs	r3, #0
 800095c:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095e:	a801      	add	r0, sp, #4
 8000960:	f005 fb30 	bl	8005fc4 <HAL_RCCEx_PeriphCLKConfig>
 8000964:	b930      	cbnz	r0, 8000974 <SystemClock_Config+0x80>
  {
    Error_Handler();
  }
}
 8000966:	b015      	add	sp, #84	@ 0x54
 8000968:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096e:	e7fe      	b.n	800096e <SystemClock_Config+0x7a>
 8000970:	b672      	cpsid	i
 8000972:	e7fe      	b.n	8000972 <SystemClock_Config+0x7e>
 8000974:	b672      	cpsid	i
 8000976:	e7fe      	b.n	8000976 <SystemClock_Config+0x82>

08000978 <main>:
{
 8000978:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800097c:	b0db      	sub	sp, #364	@ 0x16c
  HAL_Init();
 800097e:	f001 f9b7 	bl	8001cf0 <HAL_Init>
  SystemClock_Config();
 8000982:	f7ff ffb7 	bl	80008f4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	2400      	movs	r4, #0
 8000988:	943d      	str	r4, [sp, #244]	@ 0xf4
 800098a:	943e      	str	r4, [sp, #248]	@ 0xf8
 800098c:	943f      	str	r4, [sp, #252]	@ 0xfc
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4da8      	ldr	r5, [pc, #672]	@ (8000c30 <main+0x2b8>)
 8000990:	69ab      	ldr	r3, [r5, #24]
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	61ab      	str	r3, [r5, #24]
 8000998:	69ab      	ldr	r3, [r5, #24]
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	9304      	str	r3, [sp, #16]
 80009a0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	69ab      	ldr	r3, [r5, #24]
 80009a4:	f043 0320 	orr.w	r3, r3, #32
 80009a8:	61ab      	str	r3, [r5, #24]
 80009aa:	69ab      	ldr	r3, [r5, #24]
 80009ac:	f003 0320 	and.w	r3, r3, #32
 80009b0:	9305      	str	r3, [sp, #20]
 80009b2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	69ab      	ldr	r3, [r5, #24]
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	61ab      	str	r3, [r5, #24]
 80009bc:	69ab      	ldr	r3, [r5, #24]
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	9306      	str	r3, [sp, #24]
 80009c4:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	69ab      	ldr	r3, [r5, #24]
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	61ab      	str	r3, [r5, #24]
 80009ce:	69ab      	ldr	r3, [r5, #24]
 80009d0:	f003 0308 	and.w	r3, r3, #8
 80009d4:	9307      	str	r3, [sp, #28]
 80009d6:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Pin = DHT11_Pin;
 80009d8:	2601      	movs	r6, #1
 80009da:	963c      	str	r6, [sp, #240]	@ 0xf0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009dc:	963e      	str	r6, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80009de:	f8df 8254 	ldr.w	r8, [pc, #596]	@ 8000c34 <main+0x2bc>
 80009e2:	a93c      	add	r1, sp, #240	@ 0xf0
 80009e4:	4640      	mov	r0, r8
 80009e6:	f002 fb0f 	bl	8003008 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin|KEY_2_Pin|KEY_3_Pin;
 80009ea:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80009ee:	933c      	str	r3, [sp, #240]	@ 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	943d      	str	r4, [sp, #244]	@ 0xf4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009f2:	2702      	movs	r7, #2
 80009f4:	973e      	str	r7, [sp, #248]	@ 0xf8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	a93c      	add	r1, sp, #240	@ 0xf0
 80009f8:	4640      	mov	r0, r8
 80009fa:	f002 fb05 	bl	8003008 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009fe:	696b      	ldr	r3, [r5, #20]
 8000a00:	4333      	orrs	r3, r6
 8000a02:	616b      	str	r3, [r5, #20]
 8000a04:	696b      	ldr	r3, [r5, #20]
 8000a06:	4033      	ands	r3, r6
 8000a08:	9303      	str	r3, [sp, #12]
 8000a0a:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a0c:	4622      	mov	r2, r4
 8000a0e:	4621      	mov	r1, r4
 8000a10:	200b      	movs	r0, #11
 8000a12:	f002 f820 	bl	8002a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a16:	200b      	movs	r0, #11
 8000a18:	f002 f839 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a1c:	4622      	mov	r2, r4
 8000a1e:	4621      	mov	r1, r4
 8000a20:	200c      	movs	r0, #12
 8000a22:	f002 f818 	bl	8002a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a26:	200c      	movs	r0, #12
 8000a28:	f002 f831 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a2c:	4622      	mov	r2, r4
 8000a2e:	4621      	mov	r1, r4
 8000a30:	200d      	movs	r0, #13
 8000a32:	f002 f810 	bl	8002a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a36:	200d      	movs	r0, #13
 8000a38:	f002 f829 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  MX_USB_DEVICE_Init();
 8000a3c:	f00b f856 	bl	800baec <MX_USB_DEVICE_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a40:	943c      	str	r4, [sp, #240]	@ 0xf0
 8000a42:	943d      	str	r4, [sp, #244]	@ 0xf4
 8000a44:	943e      	str	r4, [sp, #248]	@ 0xf8
  hadc1.Instance = ADC1;
 8000a46:	487c      	ldr	r0, [pc, #496]	@ (8000c38 <main+0x2c0>)
 8000a48:	4b7c      	ldr	r3, [pc, #496]	@ (8000c3c <main+0x2c4>)
 8000a4a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a50:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a52:	7306      	strb	r6, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a54:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a56:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 8000a5a:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5c:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000a5e:	6107      	str	r7, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a60:	f001 f9cc 	bl	8001dfc <HAL_ADC_Init>
 8000a64:	2800      	cmp	r0, #0
 8000a66:	f040 822c 	bne.w	8000ec2 <main+0x54a>
  sConfig.Channel = ADC_CHANNEL_4;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	933c      	str	r3, [sp, #240]	@ 0xf0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	933d      	str	r3, [sp, #244]	@ 0xf4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a72:	2307      	movs	r3, #7
 8000a74:	933e      	str	r3, [sp, #248]	@ 0xf8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a76:	a93c      	add	r1, sp, #240	@ 0xf0
 8000a78:	486f      	ldr	r0, [pc, #444]	@ (8000c38 <main+0x2c0>)
 8000a7a:	f001 fd13 	bl	80024a4 <HAL_ADC_ConfigChannel>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	f040 8221 	bne.w	8000ec6 <main+0x54e>
  sConfig.Channel = ADC_CHANNEL_5;
 8000a84:	2305      	movs	r3, #5
 8000a86:	933c      	str	r3, [sp, #240]	@ 0xf0
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	933d      	str	r3, [sp, #244]	@ 0xf4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8c:	a93c      	add	r1, sp, #240	@ 0xf0
 8000a8e:	486a      	ldr	r0, [pc, #424]	@ (8000c38 <main+0x2c0>)
 8000a90:	f001 fd08 	bl	80024a4 <HAL_ADC_ConfigChannel>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	f040 8218 	bne.w	8000eca <main+0x552>
  hi2c1.Instance = I2C1;
 8000a9a:	4869      	ldr	r0, [pc, #420]	@ (8000c40 <main+0x2c8>)
 8000a9c:	4b69      	ldr	r3, [pc, #420]	@ (8000c44 <main+0x2cc>)
 8000a9e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aa0:	4b69      	ldr	r3, [pc, #420]	@ (8000c48 <main+0x2d0>)
 8000aa2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aae:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab8:	f002 fc5a 	bl	8003370 <HAL_I2C_Init>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	f040 8206 	bne.w	8000ece <main+0x556>
  huart1.Instance = USART1;
 8000ac2:	4862      	ldr	r0, [pc, #392]	@ (8000c4c <main+0x2d4>)
 8000ac4:	4b62      	ldr	r3, [pc, #392]	@ (8000c50 <main+0x2d8>)
 8000ac6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000ac8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000acc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ade:	f006 f998 	bl	8006e12 <HAL_UART_Init>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	f040 81f5 	bne.w	8000ed2 <main+0x55a>
  huart3.Instance = USART3;
 8000ae8:	485a      	ldr	r0, [pc, #360]	@ (8000c54 <main+0x2dc>)
 8000aea:	4b5b      	ldr	r3, [pc, #364]	@ (8000c58 <main+0x2e0>)
 8000aec:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000aee:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000af2:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af4:	2300      	movs	r3, #0
 8000af6:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afa:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000afc:	220c      	movs	r2, #12
 8000afe:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b00:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b02:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b04:	f006 f985 	bl	8006e12 <HAL_UART_Init>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	f040 81e4 	bne.w	8000ed6 <main+0x55e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	2400      	movs	r4, #0
 8000b10:	940a      	str	r4, [sp, #40]	@ 0x28
 8000b12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8000b14:	940c      	str	r4, [sp, #48]	@ 0x30
 8000b16:	940d      	str	r4, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	9408      	str	r4, [sp, #32]
 8000b1a:	9409      	str	r4, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1c:	9423      	str	r4, [sp, #140]	@ 0x8c
 8000b1e:	9424      	str	r4, [sp, #144]	@ 0x90
 8000b20:	9425      	str	r4, [sp, #148]	@ 0x94
 8000b22:	9426      	str	r4, [sp, #152]	@ 0x98
 8000b24:	9427      	str	r4, [sp, #156]	@ 0x9c
 8000b26:	9428      	str	r4, [sp, #160]	@ 0xa0
 8000b28:	9429      	str	r4, [sp, #164]	@ 0xa4
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	a83c      	add	r0, sp, #240	@ 0xf0
 8000b30:	f00b fcb2 	bl	800c498 <memset>
  htim1.Instance = TIM1;
 8000b34:	4849      	ldr	r0, [pc, #292]	@ (8000c5c <main+0x2e4>)
 8000b36:	4b4a      	ldr	r3, [pc, #296]	@ (8000c60 <main+0x2e8>)
 8000b38:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 72;
 8000b3a:	2348      	movs	r3, #72	@ 0x48
 8000b3c:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 100-1;
 8000b40:	2363      	movs	r3, #99	@ 0x63
 8000b42:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b44:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b46:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b4a:	f005 faf1 	bl	8006130 <HAL_TIM_Base_Init>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	f040 81c3 	bne.w	8000eda <main+0x562>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b58:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5a:	a90a      	add	r1, sp, #40	@ 0x28
 8000b5c:	483f      	ldr	r0, [pc, #252]	@ (8000c5c <main+0x2e4>)
 8000b5e:	f005 fd3d 	bl	80065dc <HAL_TIM_ConfigClockSource>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	f040 81bb 	bne.w	8000ede <main+0x566>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b68:	483c      	ldr	r0, [pc, #240]	@ (8000c5c <main+0x2e4>)
 8000b6a:	f005 fb7b 	bl	8006264 <HAL_TIM_PWM_Init>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	f040 81b7 	bne.w	8000ee2 <main+0x56a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7a:	a908      	add	r1, sp, #32
 8000b7c:	4837      	ldr	r0, [pc, #220]	@ (8000c5c <main+0x2e4>)
 8000b7e:	f006 f899 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	f040 81af 	bne.w	8000ee6 <main+0x56e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b88:	2360      	movs	r3, #96	@ 0x60
 8000b8a:	9323      	str	r3, [sp, #140]	@ 0x8c
  sConfigOC.Pulse = 36;
 8000b8c:	2324      	movs	r3, #36	@ 0x24
 8000b8e:	9324      	str	r3, [sp, #144]	@ 0x90
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b90:	2200      	movs	r2, #0
 8000b92:	9225      	str	r2, [sp, #148]	@ 0x94
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b94:	9226      	str	r2, [sp, #152]	@ 0x98
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b96:	9227      	str	r2, [sp, #156]	@ 0x9c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9c:	9328      	str	r3, [sp, #160]	@ 0xa0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9e:	9229      	str	r2, [sp, #164]	@ 0xa4
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba0:	a923      	add	r1, sp, #140	@ 0x8c
 8000ba2:	482e      	ldr	r0, [pc, #184]	@ (8000c5c <main+0x2e4>)
 8000ba4:	f005 fc58 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	f040 819e 	bne.w	8000eea <main+0x572>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	a923      	add	r1, sp, #140	@ 0x8c
 8000bb2:	482a      	ldr	r0, [pc, #168]	@ (8000c5c <main+0x2e4>)
 8000bb4:	f005 fc50 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	f040 8198 	bne.w	8000eee <main+0x576>
  sConfigOC.Pulse = 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	9324      	str	r3, [sp, #144]	@ 0x90
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	9328      	str	r3, [sp, #160]	@ 0xa0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc6:	2208      	movs	r2, #8
 8000bc8:	a923      	add	r1, sp, #140	@ 0x8c
 8000bca:	4824      	ldr	r0, [pc, #144]	@ (8000c5c <main+0x2e4>)
 8000bcc:	f005 fc44 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	f040 818e 	bne.w	8000ef2 <main+0x57a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	933c      	str	r3, [sp, #240]	@ 0xf0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bda:	933d      	str	r3, [sp, #244]	@ 0xf4
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bdc:	933e      	str	r3, [sp, #248]	@ 0xf8
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bde:	933f      	str	r3, [sp, #252]	@ 0xfc
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be0:	9340      	str	r3, [sp, #256]	@ 0x100
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be6:	9241      	str	r2, [sp, #260]	@ 0x104
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be8:	9343      	str	r3, [sp, #268]	@ 0x10c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bea:	a93c      	add	r1, sp, #240	@ 0xf0
 8000bec:	481b      	ldr	r0, [pc, #108]	@ (8000c5c <main+0x2e4>)
 8000bee:	f006 f8bf 	bl	8006d70 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	f040 817f 	bne.w	8000ef6 <main+0x57e>
  HAL_TIM_MspPostInit(&htim1);
 8000bf8:	4818      	ldr	r0, [pc, #96]	@ (8000c5c <main+0x2e4>)
 8000bfa:	f000 fe65 	bl	80018c8 <HAL_TIM_MspPostInit>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfe:	2300      	movs	r3, #0
 8000c00:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000c02:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000c04:	933e      	str	r3, [sp, #248]	@ 0xf8
  hadc2.Instance = ADC2;
 8000c06:	4817      	ldr	r0, [pc, #92]	@ (8000c64 <main+0x2ec>)
 8000c08:	4a17      	ldr	r2, [pc, #92]	@ (8000c68 <main+0x2f0>)
 8000c0a:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c10:	6082      	str	r2, [r0, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000c12:	2201      	movs	r2, #1
 8000c14:	7302      	strb	r2, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c16:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c18:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c1c:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c1e:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 3;
 8000c20:	2303      	movs	r3, #3
 8000c22:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c24:	f001 f8ea 	bl	8001dfc <HAL_ADC_Init>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	f040 8166 	bne.w	8000efa <main+0x582>
 8000c2e:	e01d      	b.n	8000c6c <main+0x2f4>
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	2000055c 	.word	0x2000055c
 8000c3c:	40012400 	.word	0x40012400
 8000c40:	20000494 	.word	0x20000494
 8000c44:	40005400 	.word	0x40005400
 8000c48:	000186a0 	.word	0x000186a0
 8000c4c:	200003bc 	.word	0x200003bc
 8000c50:	40013800 	.word	0x40013800
 8000c54:	20000374 	.word	0x20000374
 8000c58:	40004800 	.word	0x40004800
 8000c5c:	2000044c 	.word	0x2000044c
 8000c60:	40012c00 	.word	0x40012c00
 8000c64:	2000052c 	.word	0x2000052c
 8000c68:	40012800 	.word	0x40012800
  sConfig.Channel = ADC_CHANNEL_1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	933c      	str	r3, [sp, #240]	@ 0xf0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c70:	933d      	str	r3, [sp, #244]	@ 0xf4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c72:	2300      	movs	r3, #0
 8000c74:	933e      	str	r3, [sp, #248]	@ 0xf8
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c76:	a93c      	add	r1, sp, #240	@ 0xf0
 8000c78:	48b6      	ldr	r0, [pc, #728]	@ (8000f54 <main+0x5dc>)
 8000c7a:	f001 fc13 	bl	80024a4 <HAL_ADC_ConfigChannel>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	f040 813d 	bne.w	8000efe <main+0x586>
  sConfig.Channel = ADC_CHANNEL_2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	933c      	str	r3, [sp, #240]	@ 0xf0
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c88:	933d      	str	r3, [sp, #244]	@ 0xf4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c8a:	a93c      	add	r1, sp, #240	@ 0xf0
 8000c8c:	48b1      	ldr	r0, [pc, #708]	@ (8000f54 <main+0x5dc>)
 8000c8e:	f001 fc09 	bl	80024a4 <HAL_ADC_ConfigChannel>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	f040 8135 	bne.w	8000f02 <main+0x58a>
  sConfig.Channel = ADC_CHANNEL_3;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	933c      	str	r3, [sp, #240]	@ 0xf0
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c9c:	933d      	str	r3, [sp, #244]	@ 0xf4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c9e:	a93c      	add	r1, sp, #240	@ 0xf0
 8000ca0:	48ac      	ldr	r0, [pc, #688]	@ (8000f54 <main+0x5dc>)
 8000ca2:	f001 fbff 	bl	80024a4 <HAL_ADC_ConfigChannel>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	f040 812d 	bne.w	8000f06 <main+0x58e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cac:	2300      	movs	r3, #0
 8000cae:	9323      	str	r3, [sp, #140]	@ 0x8c
 8000cb0:	9324      	str	r3, [sp, #144]	@ 0x90
 8000cb2:	9325      	str	r3, [sp, #148]	@ 0x94
 8000cb4:	9326      	str	r3, [sp, #152]	@ 0x98
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8000cb8:	930b      	str	r3, [sp, #44]	@ 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cba:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000cbc:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000cbe:	933e      	str	r3, [sp, #248]	@ 0xf8
 8000cc0:	933f      	str	r3, [sp, #252]	@ 0xfc
 8000cc2:	9340      	str	r3, [sp, #256]	@ 0x100
 8000cc4:	9341      	str	r3, [sp, #260]	@ 0x104
 8000cc6:	9342      	str	r3, [sp, #264]	@ 0x108
  htim3.Instance = TIM3;
 8000cc8:	48a3      	ldr	r0, [pc, #652]	@ (8000f58 <main+0x5e0>)
 8000cca:	4aa4      	ldr	r2, [pc, #656]	@ (8000f5c <main+0x5e4>)
 8000ccc:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8000cce:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 720;
 8000cd2:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8000cd6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cdc:	f005 fa28 	bl	8006130 <HAL_TIM_Base_Init>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	f040 8112 	bne.w	8000f0a <main+0x592>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cea:	9323      	str	r3, [sp, #140]	@ 0x8c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cec:	a923      	add	r1, sp, #140	@ 0x8c
 8000cee:	489a      	ldr	r0, [pc, #616]	@ (8000f58 <main+0x5e0>)
 8000cf0:	f005 fc74 	bl	80065dc <HAL_TIM_ConfigClockSource>
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	f040 810a 	bne.w	8000f0e <main+0x596>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cfa:	4897      	ldr	r0, [pc, #604]	@ (8000f58 <main+0x5e0>)
 8000cfc:	f005 fab2 	bl	8006264 <HAL_TIM_PWM_Init>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	f040 8106 	bne.w	8000f12 <main+0x59a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	930a      	str	r3, [sp, #40]	@ 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d0c:	a90a      	add	r1, sp, #40	@ 0x28
 8000d0e:	4892      	ldr	r0, [pc, #584]	@ (8000f58 <main+0x5e0>)
 8000d10:	f005 ffd0 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	2800      	cmp	r0, #0
 8000d16:	f040 80fe 	bne.w	8000f16 <main+0x59e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1a:	2360      	movs	r3, #96	@ 0x60
 8000d1c:	933c      	str	r3, [sp, #240]	@ 0xf0
  sConfigOC.Pulse = 0;
 8000d1e:	2200      	movs	r2, #0
 8000d20:	923d      	str	r2, [sp, #244]	@ 0xf4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d22:	923e      	str	r2, [sp, #248]	@ 0xf8
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	9240      	str	r2, [sp, #256]	@ 0x100
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d26:	a93c      	add	r1, sp, #240	@ 0xf0
 8000d28:	488b      	ldr	r0, [pc, #556]	@ (8000f58 <main+0x5e0>)
 8000d2a:	f005 fb95 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	f040 80f3 	bne.w	8000f1a <main+0x5a2>
  HAL_TIM_MspPostInit(&htim3);
 8000d34:	4d88      	ldr	r5, [pc, #544]	@ (8000f58 <main+0x5e0>)
 8000d36:	4628      	mov	r0, r5
 8000d38:	f000 fdc6 	bl	80018c8 <HAL_TIM_MspPostInit>
  HAL_ADC_Start(&hadc1);
 8000d3c:	4e88      	ldr	r6, [pc, #544]	@ (8000f60 <main+0x5e8>)
 8000d3e:	4630      	mov	r0, r6
 8000d40:	f001 f934 	bl	8001fac <HAL_ADC_Start>
  ssd1306_Init();
 8000d44:	f000 fa4a 	bl	80011dc <ssd1306_Init>
  ssd1306_TestFonts();
 8000d48:	f000 fc26 	bl	8001598 <ssd1306_TestFonts>
  HAL_TIM_Base_Start(&htim1);
 8000d4c:	4c85      	ldr	r4, [pc, #532]	@ (8000f64 <main+0x5ec>)
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f005 fa3e 	bl	80061d0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d54:	2100      	movs	r1, #0
 8000d56:	4620      	mov	r0, r4
 8000d58:	f005 fadc 	bl	8006314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f005 fad8 	bl	8006314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d64:	2108      	movs	r1, #8
 8000d66:	4620      	mov	r0, r4
 8000d68:	f005 fad4 	bl	8006314 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	f005 fa2f 	bl	80061d0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d72:	2100      	movs	r1, #0
 8000d74:	4628      	mov	r0, r5
 8000d76:	f005 facd 	bl	8006314 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)PUMP, 2);
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	497a      	ldr	r1, [pc, #488]	@ (8000f68 <main+0x5f0>)
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f001 f9c2 	bl	8002108 <HAL_ADC_Start_DMA>
  DHT_sensor livingRoom = {GPIOB, GPIO_PIN_0, DHT11, GPIO_NOPULL};
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8cd 315a 	str.w	r3, [sp, #346]	@ 0x15a
 8000d8a:	f8cd 315e 	str.w	r3, [sp, #350]	@ 0x15e
 8000d8e:	f8cd 3162 	str.w	r3, [sp, #354]	@ 0x162
 8000d92:	f8ad 3166 	strh.w	r3, [sp, #358]	@ 0x166
 8000d96:	4b75      	ldr	r3, [pc, #468]	@ (8000f6c <main+0x5f4>)
 8000d98:	9355      	str	r3, [sp, #340]	@ 0x154
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f8ad 3158 	strh.w	r3, [sp, #344]	@ 0x158
  HAL_UART_Transmit_DMA(&huart3, ESP_CMD0, strlen(ESP_CMD0));  HAL_Delay(10000);
 8000da0:	4d73      	ldr	r5, [pc, #460]	@ (8000f70 <main+0x5f8>)
 8000da2:	4628      	mov	r0, r5
 8000da4:	f7ff f9d2 	bl	800014c <strlen>
 8000da8:	4c72      	ldr	r4, [pc, #456]	@ (8000f74 <main+0x5fc>)
 8000daa:	b282      	uxth	r2, r0
 8000dac:	4629      	mov	r1, r5
 8000dae:	4620      	mov	r0, r4
 8000db0:	f006 f902 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000db4:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000db8:	f000 fffc 	bl	8001db4 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, ESP_CMD1, strlen(ESP_CMD1));  HAL_Delay(10000);
 8000dbc:	4d6e      	ldr	r5, [pc, #440]	@ (8000f78 <main+0x600>)
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	f7ff f9c4 	bl	800014c <strlen>
 8000dc4:	b282      	uxth	r2, r0
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f006 f8f5 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000dce:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000dd2:	f000 ffef 	bl	8001db4 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, ESP_CMD2, strlen(ESP_CMD2));  HAL_Delay(10000);
 8000dd6:	4d69      	ldr	r5, [pc, #420]	@ (8000f7c <main+0x604>)
 8000dd8:	4628      	mov	r0, r5
 8000dda:	f7ff f9b7 	bl	800014c <strlen>
 8000dde:	b282      	uxth	r2, r0
 8000de0:	4629      	mov	r1, r5
 8000de2:	4620      	mov	r0, r4
 8000de4:	f006 f8e8 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000de8:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000dec:	f000 ffe2 	bl	8001db4 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, ESP_CMD3, strlen(ESP_CMD3));  HAL_Delay(10000);
 8000df0:	4d63      	ldr	r5, [pc, #396]	@ (8000f80 <main+0x608>)
 8000df2:	4628      	mov	r0, r5
 8000df4:	f7ff f9aa 	bl	800014c <strlen>
 8000df8:	b282      	uxth	r2, r0
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f006 f8db 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000e02:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e06:	f000 ffd5 	bl	8001db4 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, ESP_CMD4, strlen(ESP_CMD4));  HAL_Delay(10000);
 8000e0a:	4d5e      	ldr	r5, [pc, #376]	@ (8000f84 <main+0x60c>)
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f7ff f99d 	bl	800014c <strlen>
 8000e12:	b282      	uxth	r2, r0
 8000e14:	4629      	mov	r1, r5
 8000e16:	4620      	mov	r0, r4
 8000e18:	f006 f8ce 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000e1c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e20:	f000 ffc8 	bl	8001db4 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, ESP_CMD5, strlen(ESP_CMD5));  HAL_Delay(10000);
 8000e24:	4d58      	ldr	r5, [pc, #352]	@ (8000f88 <main+0x610>)
 8000e26:	4628      	mov	r0, r5
 8000e28:	f7ff f990 	bl	800014c <strlen>
 8000e2c:	b282      	uxth	r2, r0
 8000e2e:	4629      	mov	r1, r5
 8000e30:	4620      	mov	r0, r4
 8000e32:	f006 f8c1 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000e36:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e3a:	f000 ffbb 	bl	8001db4 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, ESP_CMD6, strlen(ESP_CMD6));  HAL_Delay(10000);
 8000e3e:	4d53      	ldr	r5, [pc, #332]	@ (8000f8c <main+0x614>)
 8000e40:	4628      	mov	r0, r5
 8000e42:	f7ff f983 	bl	800014c <strlen>
 8000e46:	b282      	uxth	r2, r0
 8000e48:	4629      	mov	r1, r5
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f006 f8b4 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000e50:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e54:	f000 ffae 	bl	8001db4 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, ESP_CMD7, strlen(ESP_CMD7));  HAL_Delay(10000);
 8000e58:	4d4d      	ldr	r5, [pc, #308]	@ (8000f90 <main+0x618>)
 8000e5a:	4628      	mov	r0, r5
 8000e5c:	f7ff f976 	bl	800014c <strlen>
 8000e60:	b282      	uxth	r2, r0
 8000e62:	4629      	mov	r1, r5
 8000e64:	4620      	mov	r0, r4
 8000e66:	f006 f8a7 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000e6a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e6e:	f000 ffa1 	bl	8001db4 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, ESP_CMD8, strlen(ESP_CMD8));  HAL_Delay(10000);
 8000e72:	4d48      	ldr	r5, [pc, #288]	@ (8000f94 <main+0x61c>)
 8000e74:	4628      	mov	r0, r5
 8000e76:	f7ff f969 	bl	800014c <strlen>
 8000e7a:	b282      	uxth	r2, r0
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f006 f89a 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000e84:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e88:	f000 ff94 	bl	8001db4 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, ESP_CMD9, strlen(ESP_CMD9));  HAL_Delay(10000);
 8000e8c:	4d42      	ldr	r5, [pc, #264]	@ (8000f98 <main+0x620>)
 8000e8e:	4628      	mov	r0, r5
 8000e90:	f7ff f95c 	bl	800014c <strlen>
 8000e94:	b282      	uxth	r2, r0
 8000e96:	4629      	mov	r1, r5
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f006 f88d 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000e9e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000ea2:	f000 ff87 	bl	8001db4 <HAL_Delay>
  HAL_Delay(50000);
 8000ea6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000eaa:	f000 ff83 	bl	8001db4 <HAL_Delay>
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 8000eae:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8000f9c <main+0x624>
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8000eb2:	4d2e      	ldr	r5, [pc, #184]	@ (8000f6c <main+0x5f4>)
	    	Period_-=10;
 8000eb4:	4f3a      	ldr	r7, [pc, #232]	@ (8000fa0 <main+0x628>)
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000eb6:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 8000f64 <main+0x5ec>
 8000eba:	2600      	movs	r6, #0
	    HAL_UART_Transmit(&huart3, ESP_CMD1, strlen(ESP_CMD1), 1000);
 8000ebc:	f44f 787a 	mov.w	r8, #1000	@ 0x3e8
 8000ec0:	e109      	b.n	80010d6 <main+0x75e>
 8000ec2:	b672      	cpsid	i
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <main+0x54c>
 8000ec6:	b672      	cpsid	i
 8000ec8:	e7fe      	b.n	8000ec8 <main+0x550>
 8000eca:	b672      	cpsid	i
 8000ecc:	e7fe      	b.n	8000ecc <main+0x554>
 8000ece:	b672      	cpsid	i
 8000ed0:	e7fe      	b.n	8000ed0 <main+0x558>
 8000ed2:	b672      	cpsid	i
 8000ed4:	e7fe      	b.n	8000ed4 <main+0x55c>
 8000ed6:	b672      	cpsid	i
 8000ed8:	e7fe      	b.n	8000ed8 <main+0x560>
 8000eda:	b672      	cpsid	i
 8000edc:	e7fe      	b.n	8000edc <main+0x564>
 8000ede:	b672      	cpsid	i
 8000ee0:	e7fe      	b.n	8000ee0 <main+0x568>
 8000ee2:	b672      	cpsid	i
 8000ee4:	e7fe      	b.n	8000ee4 <main+0x56c>
 8000ee6:	b672      	cpsid	i
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x570>
 8000eea:	b672      	cpsid	i
 8000eec:	e7fe      	b.n	8000eec <main+0x574>
 8000eee:	b672      	cpsid	i
 8000ef0:	e7fe      	b.n	8000ef0 <main+0x578>
 8000ef2:	b672      	cpsid	i
 8000ef4:	e7fe      	b.n	8000ef4 <main+0x57c>
 8000ef6:	b672      	cpsid	i
 8000ef8:	e7fe      	b.n	8000ef8 <main+0x580>
 8000efa:	b672      	cpsid	i
 8000efc:	e7fe      	b.n	8000efc <main+0x584>
 8000efe:	b672      	cpsid	i
 8000f00:	e7fe      	b.n	8000f00 <main+0x588>
 8000f02:	b672      	cpsid	i
 8000f04:	e7fe      	b.n	8000f04 <main+0x58c>
 8000f06:	b672      	cpsid	i
 8000f08:	e7fe      	b.n	8000f08 <main+0x590>
 8000f0a:	b672      	cpsid	i
 8000f0c:	e7fe      	b.n	8000f0c <main+0x594>
 8000f0e:	b672      	cpsid	i
 8000f10:	e7fe      	b.n	8000f10 <main+0x598>
 8000f12:	b672      	cpsid	i
 8000f14:	e7fe      	b.n	8000f14 <main+0x59c>
 8000f16:	b672      	cpsid	i
 8000f18:	e7fe      	b.n	8000f18 <main+0x5a0>
 8000f1a:	b672      	cpsid	i
 8000f1c:	e7fe      	b.n	8000f1c <main+0x5a4>
	    	if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 8000f1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f22:	4628      	mov	r0, r5
 8000f24:	f002 f9f4 	bl	8003310 <HAL_GPIO_ReadPin>
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	f000 80e1 	beq.w	80010f0 <main+0x778>
	    	Period_-=10;
 8000f2e:	883b      	ldrh	r3, [r7, #0]
 8000f30:	3b0a      	subs	r3, #10
 8000f32:	803b      	strh	r3, [r7, #0]
 8000f34:	e0dc      	b.n	80010f0 <main+0x778>
	        if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 8000f36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	f002 f9e8 	bl	8003310 <HAL_GPIO_ReadPin>
 8000f40:	2800      	cmp	r0, #0
 8000f42:	f000 80dd 	beq.w	8001100 <main+0x788>
	    	    	Period_--;
 8000f46:	883b      	ldrh	r3, [r7, #0]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	803b      	strh	r3, [r7, #0]
	    			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000f4c:	f8da 3000 	ldr.w	r3, [sl]
 8000f50:	63de      	str	r6, [r3, #60]	@ 0x3c
 8000f52:	e0d5      	b.n	8001100 <main+0x788>
 8000f54:	2000052c 	.word	0x2000052c
 8000f58:	20000404 	.word	0x20000404
 8000f5c:	40000400 	.word	0x40000400
 8000f60:	2000055c 	.word	0x2000055c
 8000f64:	2000044c 	.word	0x2000044c
 8000f68:	200002e4 	.word	0x200002e4
 8000f6c:	40010c00 	.word	0x40010c00
 8000f70:	200000d0 	.word	0x200000d0
 8000f74:	20000374 	.word	0x20000374
 8000f78:	200000c0 	.word	0x200000c0
 8000f7c:	200000a4 	.word	0x200000a4
 8000f80:	20000094 	.word	0x20000094
 8000f84:	20000068 	.word	0x20000068
 8000f88:	20000044 	.word	0x20000044
 8000f8c:	20000038 	.word	0x20000038
 8000f90:	2000002c 	.word	0x2000002c
 8000f94:	2000001c 	.word	0x2000001c
 8000f98:	20000004 	.word	0x20000004
 8000f9c:	200002e8 	.word	0x200002e8
 8000fa0:	20000000 	.word	0x20000000
	    	 if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8000fa4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fa8:	4628      	mov	r0, r5
 8000faa:	f002 f9b1 	bl	8003310 <HAL_GPIO_ReadPin>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	f000 80ae 	beq.w	8001110 <main+0x798>
	    		    	Period_++;
 8000fb4:	883b      	ldrh	r3, [r7, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	803b      	strh	r3, [r7, #0]
	    				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 10);
 8000fba:	f8da 3000 	ldr.w	r3, [sl]
 8000fbe:	220a      	movs	r2, #10
 8000fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fc2:	e0a5      	b.n	8001110 <main+0x798>
	    HAL_UART_Transmit(&huart3, ESP_CMD1, strlen(ESP_CMD1), 1000);
 8000fc4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8001138 <main+0x7c0>
 8000fc8:	4658      	mov	r0, fp
 8000fca:	f7ff f8bf 	bl	800014c <strlen>
 8000fce:	4c5b      	ldr	r4, [pc, #364]	@ (800113c <main+0x7c4>)
 8000fd0:	4643      	mov	r3, r8
 8000fd2:	b282      	uxth	r2, r0
 8000fd4:	4659      	mov	r1, fp
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f005 ff6b 	bl	8006eb2 <HAL_UART_Transmit>
	    HAL_Delay(5000);
 8000fdc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000fe0:	f000 fee8 	bl	8001db4 <HAL_Delay>
	    HAL_UART_Transmit(&huart3, ESP_CMD2, strlen(ESP_CMD2), 1000);
 8000fe4:	f8df b158 	ldr.w	fp, [pc, #344]	@ 8001140 <main+0x7c8>
 8000fe8:	4658      	mov	r0, fp
 8000fea:	f7ff f8af 	bl	800014c <strlen>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	b282      	uxth	r2, r0
 8000ff2:	4659      	mov	r1, fp
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f005 ff5c 	bl	8006eb2 <HAL_UART_Transmit>
	    HAL_Delay(5000);
 8000ffa:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ffe:	f000 fed9 	bl	8001db4 <HAL_Delay>
	    HAL_UART_Transmit(&huart3, ESP_CMD3, strlen(ESP_CMD3), 1000);
 8001002:	f8df b140 	ldr.w	fp, [pc, #320]	@ 8001144 <main+0x7cc>
 8001006:	4658      	mov	r0, fp
 8001008:	f7ff f8a0 	bl	800014c <strlen>
 800100c:	4643      	mov	r3, r8
 800100e:	b282      	uxth	r2, r0
 8001010:	4659      	mov	r1, fp
 8001012:	4620      	mov	r0, r4
 8001014:	f005 ff4d 	bl	8006eb2 <HAL_UART_Transmit>
	    HAL_Delay(5000);
 8001018:	f241 3088 	movw	r0, #5000	@ 0x1388
 800101c:	f000 feca 	bl	8001db4 <HAL_Delay>
	    DHT_data d = DHT_getData(&livingRoom);
 8001020:	a955      	add	r1, sp, #340	@ 0x154
 8001022:	a808      	add	r0, sp, #32
 8001024:	f7ff fac4 	bl	80005b0 <DHT_getData>
	    sprintf(msg0, "T:%dC H:%d%% ADC:%d\r\n", (uint8_t)d.temp, (uint8_t)d.hum , ADC_BUFFER);
 8001028:	9808      	ldr	r0, [sp, #32]
 800102a:	f7ff fa59 	bl	80004e0 <__aeabi_f2uiz>
 800102e:	b2c4      	uxtb	r4, r0
 8001030:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001032:	f7ff fa55 	bl	80004e0 <__aeabi_f2uiz>
 8001036:	f8b9 3000 	ldrh.w	r3, [r9]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	4623      	mov	r3, r4
 800103e:	b2c2      	uxtb	r2, r0
 8001040:	4941      	ldr	r1, [pc, #260]	@ (8001148 <main+0x7d0>)
 8001042:	a80a      	add	r0, sp, #40	@ 0x28
 8001044:	f00b f9ee 	bl	800c424 <siprintf>
		  CDC_Transmit_FS((uint8_t*)msg0, strlen(msg0));
 8001048:	a80a      	add	r0, sp, #40	@ 0x28
 800104a:	f7ff f87f 	bl	800014c <strlen>
 800104e:	b281      	uxth	r1, r0
 8001050:	a80a      	add	r0, sp, #40	@ 0x28
 8001052:	f00a fe09 	bl	800bc68 <CDC_Transmit_FS>
		  HAL_UART_Transmit(&huart1,(uint8_t*)msg0, strlen(msg0),100);
 8001056:	a80a      	add	r0, sp, #40	@ 0x28
 8001058:	f7ff f878 	bl	800014c <strlen>
 800105c:	2364      	movs	r3, #100	@ 0x64
 800105e:	b282      	uxth	r2, r0
 8001060:	a90a      	add	r1, sp, #40	@ 0x28
 8001062:	483a      	ldr	r0, [pc, #232]	@ (800114c <main+0x7d4>)
 8001064:	f005 ff25 	bl	8006eb2 <HAL_UART_Transmit>
		    sprintf(msg1, "Duty:%d\r\n", Period_);
 8001068:	883a      	ldrh	r2, [r7, #0]
 800106a:	4939      	ldr	r1, [pc, #228]	@ (8001150 <main+0x7d8>)
 800106c:	a823      	add	r0, sp, #140	@ 0x8c
 800106e:	f00b f9d9 	bl	800c424 <siprintf>
		    sprintf(msg2, "U:%d I:%d\r\n", PUMP[0],PUMP[1]);
 8001072:	4a38      	ldr	r2, [pc, #224]	@ (8001154 <main+0x7dc>)
 8001074:	8853      	ldrh	r3, [r2, #2]
 8001076:	8812      	ldrh	r2, [r2, #0]
 8001078:	4937      	ldr	r1, [pc, #220]	@ (8001158 <main+0x7e0>)
 800107a:	a83c      	add	r0, sp, #240	@ 0xf0
 800107c:	f00b f9d2 	bl	800c424 <siprintf>
		    __HAL_TIM_SET_PRESCALER(&htim1, Period_);
 8001080:	f8da 2000 	ldr.w	r2, [sl]
 8001084:	883b      	ldrh	r3, [r7, #0]
 8001086:	6293      	str	r3, [r2, #40]	@ 0x28
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Period_);
 8001088:	4a34      	ldr	r2, [pc, #208]	@ (800115c <main+0x7e4>)
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	6353      	str	r3, [r2, #52]	@ 0x34
	    ssd1306_Fill(Black);
 800108e:	4630      	mov	r0, r6
 8001090:	f000 f912 	bl	80012b8 <ssd1306_Fill>
	    ssd1306_SetCursor(0, 0);
 8001094:	4631      	mov	r1, r6
 8001096:	4630      	mov	r0, r6
 8001098:	f000 fa66 	bl	8001568 <ssd1306_SetCursor>
	    ssd1306_WriteString(msg0, Font_11x18, White);
 800109c:	4c30      	ldr	r4, [pc, #192]	@ (8001160 <main+0x7e8>)
 800109e:	2301      	movs	r3, #1
 80010a0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80010a4:	a80a      	add	r0, sp, #40	@ 0x28
 80010a6:	f000 fa39 	bl	800151c <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 18);
 80010aa:	2112      	movs	r1, #18
 80010ac:	4630      	mov	r0, r6
 80010ae:	f000 fa5b 	bl	8001568 <ssd1306_SetCursor>
	    ssd1306_WriteString(msg1, Font_11x18, White);
 80010b2:	2301      	movs	r3, #1
 80010b4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80010b8:	a823      	add	r0, sp, #140	@ 0x8c
 80010ba:	f000 fa2f 	bl	800151c <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 36);
 80010be:	2124      	movs	r1, #36	@ 0x24
 80010c0:	4630      	mov	r0, r6
 80010c2:	f000 fa51 	bl	8001568 <ssd1306_SetCursor>
	    ssd1306_WriteString(msg2, Font_11x18, White);
 80010c6:	2301      	movs	r3, #1
 80010c8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80010cc:	a83c      	add	r0, sp, #240	@ 0xf0
 80010ce:	f000 fa25 	bl	800151c <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 80010d2:	f000 f913 	bl	80012fc <ssd1306_UpdateScreen>
	  ADC_BUFFER=HAL_ADC_GetValue(&hadc1);
 80010d6:	4823      	ldr	r0, [pc, #140]	@ (8001164 <main+0x7ec>)
 80010d8:	f001 f8f4 	bl	80022c4 <HAL_ADC_GetValue>
 80010dc:	f8a9 0000 	strh.w	r0, [r9]
	    if (HAL_GPIO_ReadPin(KEY_0_GPIO_Port, KEY_0_Pin)) {
 80010e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e4:	4628      	mov	r0, r5
 80010e6:	f002 f913 	bl	8003310 <HAL_GPIO_ReadPin>
 80010ea:	2800      	cmp	r0, #0
 80010ec:	f47f af17 	bne.w	8000f1e <main+0x5a6>
	    if (HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)) {
 80010f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010f4:	4628      	mov	r0, r5
 80010f6:	f002 f90b 	bl	8003310 <HAL_GPIO_ReadPin>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	f47f af1b 	bne.w	8000f36 <main+0x5be>
	    if (HAL_GPIO_ReadPin(KEY_2_GPIO_Port, KEY_2_Pin)) {
 8001100:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001104:	4628      	mov	r0, r5
 8001106:	f002 f903 	bl	8003310 <HAL_GPIO_ReadPin>
 800110a:	2800      	cmp	r0, #0
 800110c:	f47f af4a 	bne.w	8000fa4 <main+0x62c>
	    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001110:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001114:	4628      	mov	r0, r5
 8001116:	f002 f8fb 	bl	8003310 <HAL_GPIO_ReadPin>
 800111a:	2800      	cmp	r0, #0
 800111c:	f43f af52 	beq.w	8000fc4 <main+0x64c>
		    if (HAL_GPIO_ReadPin(KEY_3_GPIO_Port, KEY_3_Pin)) {
 8001120:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001124:	4628      	mov	r0, r5
 8001126:	f002 f8f3 	bl	8003310 <HAL_GPIO_ReadPin>
 800112a:	2800      	cmp	r0, #0
 800112c:	f43f af4a 	beq.w	8000fc4 <main+0x64c>
		    	Period_+=10;
 8001130:	883b      	ldrh	r3, [r7, #0]
 8001132:	330a      	adds	r3, #10
 8001134:	803b      	strh	r3, [r7, #0]
 8001136:	e745      	b.n	8000fc4 <main+0x64c>
 8001138:	200000c0 	.word	0x200000c0
 800113c:	20000374 	.word	0x20000374
 8001140:	200000a4 	.word	0x200000a4
 8001144:	20000094 	.word	0x20000094
 8001148:	0800ce44 	.word	0x0800ce44
 800114c:	200003bc 	.word	0x200003bc
 8001150:	0800ce5c 	.word	0x0800ce5c
 8001154:	200002e4 	.word	0x200002e4
 8001158:	0800ce68 	.word	0x0800ce68
 800115c:	20000404 	.word	0x20000404
 8001160:	200000ec 	.word	0x200000ec
 8001164:	2000055c 	.word	0x2000055c

08001168 <Error_Handler>:
 8001168:	b672      	cpsid	i
  while (1)
 800116a:	e7fe      	b.n	800116a <Error_Handler+0x2>

0800116c <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	2200      	movs	r2, #0
 8001194:	2178      	movs	r1, #120	@ 0x78
 8001196:	4803      	ldr	r0, [pc, #12]	@ (80011a4 <ssd1306_WriteCommand+0x2c>)
 8001198:	f002 fa2e 	bl	80035f8 <HAL_I2C_Mem_Write>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000494 	.word	0x20000494

080011a8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ba:	9202      	str	r2, [sp, #8]
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	2240      	movs	r2, #64	@ 0x40
 80011c6:	2178      	movs	r1, #120	@ 0x78
 80011c8:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <ssd1306_WriteData+0x30>)
 80011ca:	f002 fa15 	bl	80035f8 <HAL_I2C_Mem_Write>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000494 	.word	0x20000494

080011dc <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80011e0:	f7ff ffc4 	bl	800116c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011e4:	2064      	movs	r0, #100	@ 0x64
 80011e6:	f000 fde5 	bl	8001db4 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80011ea:	20ae      	movs	r0, #174	@ 0xae
 80011ec:	f7ff ffc4 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80011f0:	2020      	movs	r0, #32
 80011f2:	f7ff ffc1 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff ffbe 	bl	8001178 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011fc:	20b0      	movs	r0, #176	@ 0xb0
 80011fe:	f7ff ffbb 	bl	8001178 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001202:	20c8      	movs	r0, #200	@ 0xc8
 8001204:	f7ff ffb8 	bl	8001178 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff ffb5 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800120e:	2010      	movs	r0, #16
 8001210:	f7ff ffb2 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001214:	2040      	movs	r0, #64	@ 0x40
 8001216:	f7ff ffaf 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800121a:	2081      	movs	r0, #129	@ 0x81
 800121c:	f7ff ffac 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001220:	20ff      	movs	r0, #255	@ 0xff
 8001222:	f7ff ffa9 	bl	8001178 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001226:	20a1      	movs	r0, #161	@ 0xa1
 8001228:	f7ff ffa6 	bl	8001178 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800122c:	20a6      	movs	r0, #166	@ 0xa6
 800122e:	f7ff ffa3 	bl	8001178 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001232:	20a8      	movs	r0, #168	@ 0xa8
 8001234:	f7ff ffa0 	bl	8001178 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001238:	203f      	movs	r0, #63	@ 0x3f
 800123a:	f7ff ff9d 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800123e:	20a4      	movs	r0, #164	@ 0xa4
 8001240:	f7ff ff9a 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001244:	20d3      	movs	r0, #211	@ 0xd3
 8001246:	f7ff ff97 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff ff94 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001250:	20d5      	movs	r0, #213	@ 0xd5
 8001252:	f7ff ff91 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001256:	20f0      	movs	r0, #240	@ 0xf0
 8001258:	f7ff ff8e 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800125c:	20d9      	movs	r0, #217	@ 0xd9
 800125e:	f7ff ff8b 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001262:	2022      	movs	r0, #34	@ 0x22
 8001264:	f7ff ff88 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001268:	20da      	movs	r0, #218	@ 0xda
 800126a:	f7ff ff85 	bl	8001178 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800126e:	2012      	movs	r0, #18
 8001270:	f7ff ff82 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001274:	20db      	movs	r0, #219	@ 0xdb
 8001276:	f7ff ff7f 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800127a:	2020      	movs	r0, #32
 800127c:	f7ff ff7c 	bl	8001178 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001280:	208d      	movs	r0, #141	@ 0x8d
 8001282:	f7ff ff79 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001286:	2014      	movs	r0, #20
 8001288:	f7ff ff76 	bl	8001178 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800128c:	20af      	movs	r0, #175	@ 0xaf
 800128e:	f7ff ff73 	bl	8001178 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f810 	bl	80012b8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001298:	f000 f830 	bl	80012fc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <ssd1306_Init+0xd8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012a2:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <ssd1306_Init+0xd8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012a8:	4b02      	ldr	r3, [pc, #8]	@ (80012b4 <ssd1306_Init+0xd8>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	715a      	strb	r2, [r3, #5]
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000098c 	.word	0x2000098c

080012b8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e00d      	b.n	80012e4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <ssd1306_Fill+0x1a>
 80012ce:	2100      	movs	r1, #0
 80012d0:	e000      	b.n	80012d4 <ssd1306_Fill+0x1c>
 80012d2:	21ff      	movs	r1, #255	@ 0xff
 80012d4:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <ssd1306_Fill+0x40>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4413      	add	r3, r2
 80012da:	460a      	mov	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ea:	d3ed      	bcc.n	80012c8 <ssd1306_Fill+0x10>
    }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	2000058c 	.word	0x2000058c

080012fc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001302:	2300      	movs	r3, #0
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	e016      	b.n	8001336 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	3b50      	subs	r3, #80	@ 0x50
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff32 	bl	8001178 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff ff2f 	bl	8001178 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800131a:	2010      	movs	r0, #16
 800131c:	f7ff ff2c 	bl	8001178 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	01db      	lsls	r3, r3, #7
 8001324:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <ssd1306_UpdateScreen+0x4c>)
 8001326:	4413      	add	r3, r2
 8001328:	2180      	movs	r1, #128	@ 0x80
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff3c 	bl	80011a8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	3301      	adds	r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b07      	cmp	r3, #7
 800133a:	d9e5      	bls.n	8001308 <ssd1306_UpdateScreen+0xc>
    }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000058c 	.word	0x2000058c

0800134c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	460b      	mov	r3, r1
 8001358:	71bb      	strb	r3, [r7, #6]
 800135a:	4613      	mov	r3, r2
 800135c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db48      	blt.n	80013f8 <ssd1306_DrawPixel+0xac>
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	2b3f      	cmp	r3, #63	@ 0x3f
 800136a:	d845      	bhi.n	80013f8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800136c:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <ssd1306_DrawPixel+0xb8>)
 800136e:	791b      	ldrb	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001374:	797b      	ldrb	r3, [r7, #5]
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf0c      	ite	eq
 800137a:	2301      	moveq	r3, #1
 800137c:	2300      	movne	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001382:	797b      	ldrb	r3, [r7, #5]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d11a      	bne.n	80013be <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	08db      	lsrs	r3, r3, #3
 800138e:	b2d8      	uxtb	r0, r3
 8001390:	4603      	mov	r3, r0
 8001392:	01db      	lsls	r3, r3, #7
 8001394:	4413      	add	r3, r2
 8001396:	4a1c      	ldr	r2, [pc, #112]	@ (8001408 <ssd1306_DrawPixel+0xbc>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	b25a      	sxtb	r2, r3
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b259      	sxtb	r1, r3
 80013ae:	79fa      	ldrb	r2, [r7, #7]
 80013b0:	4603      	mov	r3, r0
 80013b2:	01db      	lsls	r3, r3, #7
 80013b4:	4413      	add	r3, r2
 80013b6:	b2c9      	uxtb	r1, r1
 80013b8:	4a13      	ldr	r2, [pc, #76]	@ (8001408 <ssd1306_DrawPixel+0xbc>)
 80013ba:	54d1      	strb	r1, [r2, r3]
 80013bc:	e01d      	b.n	80013fa <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	08db      	lsrs	r3, r3, #3
 80013c4:	b2d8      	uxtb	r0, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	01db      	lsls	r3, r3, #7
 80013ca:	4413      	add	r3, r2
 80013cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <ssd1306_DrawPixel+0xbc>)
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	b25a      	sxtb	r2, r3
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	b259      	sxtb	r1, r3
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	4603      	mov	r3, r0
 80013ec:	01db      	lsls	r3, r3, #7
 80013ee:	4413      	add	r3, r2
 80013f0:	b2c9      	uxtb	r1, r1
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <ssd1306_DrawPixel+0xbc>)
 80013f4:	54d1      	strb	r1, [r2, r3]
 80013f6:	e000      	b.n	80013fa <ssd1306_DrawPixel+0xae>
        return;
 80013f8:	bf00      	nop
    }
}
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	2000098c 	.word	0x2000098c
 8001408:	2000058c 	.word	0x2000058c

0800140c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	4604      	mov	r4, r0
 8001414:	1d38      	adds	r0, r7, #4
 8001416:	e880 0006 	stmia.w	r0, {r1, r2}
 800141a:	461a      	mov	r2, r3
 800141c:	4623      	mov	r3, r4
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	4613      	mov	r3, r2
 8001422:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2b1f      	cmp	r3, #31
 8001428:	d902      	bls.n	8001430 <ssd1306_WriteChar+0x24>
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	2b7e      	cmp	r3, #126	@ 0x7e
 800142e:	d901      	bls.n	8001434 <ssd1306_WriteChar+0x28>
        return 0;
 8001430:	2300      	movs	r3, #0
 8001432:	e06c      	b.n	800150e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001434:	4b38      	ldr	r3, [pc, #224]	@ (8001518 <ssd1306_WriteChar+0x10c>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	793b      	ldrb	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	2b80      	cmp	r3, #128	@ 0x80
 8001440:	dc06      	bgt.n	8001450 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001442:	4b35      	ldr	r3, [pc, #212]	@ (8001518 <ssd1306_WriteChar+0x10c>)
 8001444:	885b      	ldrh	r3, [r3, #2]
 8001446:	461a      	mov	r2, r3
 8001448:	797b      	ldrb	r3, [r7, #5]
 800144a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800144c:	2b40      	cmp	r3, #64	@ 0x40
 800144e:	dd01      	ble.n	8001454 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001450:	2300      	movs	r3, #0
 8001452:	e05c      	b.n	800150e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	e04c      	b.n	80014f4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	3b20      	subs	r3, #32
 8001460:	7979      	ldrb	r1, [r7, #5]
 8001462:	fb01 f303 	mul.w	r3, r1, r3
 8001466:	4619      	mov	r1, r3
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	440b      	add	r3, r1
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	e034      	b.n	80014e4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d012      	beq.n	80014b0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800148a:	4b23      	ldr	r3, [pc, #140]	@ (8001518 <ssd1306_WriteChar+0x10c>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b2d8      	uxtb	r0, r3
 8001498:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <ssd1306_WriteChar+0x10c>)
 800149a:	885b      	ldrh	r3, [r3, #2]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	7bba      	ldrb	r2, [r7, #14]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff ff4f 	bl	800134c <ssd1306_DrawPixel>
 80014ae:	e016      	b.n	80014de <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <ssd1306_WriteChar+0x10c>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	b2d8      	uxtb	r0, r3
 80014be:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <ssd1306_WriteChar+0x10c>)
 80014c0:	885b      	ldrh	r3, [r3, #2]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	b2d9      	uxtb	r1, r3
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	bf0c      	ite	eq
 80014d2:	2301      	moveq	r3, #1
 80014d4:	2300      	movne	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	f7ff ff37 	bl	800134c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	793b      	ldrb	r3, [r7, #4]
 80014e6:	461a      	mov	r2, r3
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d3c5      	bcc.n	800147a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	797b      	ldrb	r3, [r7, #5]
 80014f6:	461a      	mov	r2, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d3ad      	bcc.n	800145a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <ssd1306_WriteChar+0x10c>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	793a      	ldrb	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <ssd1306_WriteChar+0x10c>)
 800150a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	@ 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd90      	pop	{r4, r7, pc}
 8001516:	bf00      	nop
 8001518:	2000098c 	.word	0x2000098c

0800151c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	1d38      	adds	r0, r7, #4
 8001526:	e880 0006 	stmia.w	r0, {r1, r2}
 800152a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800152c:	e012      	b.n	8001554 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	7818      	ldrb	r0, [r3, #0]
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	1d3a      	adds	r2, r7, #4
 8001536:	ca06      	ldmia	r2, {r1, r2}
 8001538:	f7ff ff68 	bl	800140c <ssd1306_WriteChar>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d002      	beq.n	800154e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	e008      	b.n	8001560 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e8      	bne.n	800152e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	781b      	ldrb	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <ssd1306_SetCursor+0x2c>)
 800157e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <ssd1306_SetCursor+0x2c>)
 8001586:	805a      	strh	r2, [r3, #2]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	2000098c 	.word	0x2000098c

08001598 <ssd1306_TestFonts>:
    } while((end - start) < 8000);
   
    HAL_Delay(1000);
}

void ssd1306_TestFonts() {
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff fe8b 	bl	80012b8 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 80015a2:	2100      	movs	r1, #0
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff ffdf 	bl	8001568 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 80015aa:	4a14      	ldr	r2, [pc, #80]	@ (80015fc <ssd1306_TestFonts+0x64>)
 80015ac:	2301      	movs	r3, #1
 80015ae:	ca06      	ldmia	r2, {r1, r2}
 80015b0:	4813      	ldr	r0, [pc, #76]	@ (8001600 <ssd1306_TestFonts+0x68>)
 80015b2:	f7ff ffb3 	bl	800151c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 80015b6:	211a      	movs	r1, #26
 80015b8:	2002      	movs	r0, #2
 80015ba:	f7ff ffd5 	bl	8001568 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80015be:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <ssd1306_TestFonts+0x6c>)
 80015c0:	2301      	movs	r3, #1
 80015c2:	ca06      	ldmia	r2, {r1, r2}
 80015c4:	4810      	ldr	r0, [pc, #64]	@ (8001608 <ssd1306_TestFonts+0x70>)
 80015c6:	f7ff ffa9 	bl	800151c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 80015ca:	212c      	movs	r1, #44	@ 0x2c
 80015cc:	2002      	movs	r0, #2
 80015ce:	f7ff ffcb 	bl	8001568 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80015d2:	4a0e      	ldr	r2, [pc, #56]	@ (800160c <ssd1306_TestFonts+0x74>)
 80015d4:	2301      	movs	r3, #1
 80015d6:	ca06      	ldmia	r2, {r1, r2}
 80015d8:	480d      	ldr	r0, [pc, #52]	@ (8001610 <ssd1306_TestFonts+0x78>)
 80015da:	f7ff ff9f 	bl	800151c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 80015de:	2136      	movs	r1, #54	@ 0x36
 80015e0:	2002      	movs	r0, #2
 80015e2:	f7ff ffc1 	bl	8001568 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80015e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001614 <ssd1306_TestFonts+0x7c>)
 80015e8:	2301      	movs	r3, #1
 80015ea:	ca06      	ldmia	r2, {r1, r2}
 80015ec:	480a      	ldr	r0, [pc, #40]	@ (8001618 <ssd1306_TestFonts+0x80>)
 80015ee:	f7ff ff95 	bl	800151c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80015f2:	f7ff fe83 	bl	80012fc <ssd1306_UpdateScreen>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200000f4 	.word	0x200000f4
 8001600:	0800cdac 	.word	0x0800cdac
 8001604:	200000ec 	.word	0x200000ec
 8001608:	0800cdb8 	.word	0x0800cdb8
 800160c:	200000e4 	.word	0x200000e4
 8001610:	0800cdc4 	.word	0x0800cdc4
 8001614:	200000dc 	.word	0x200000dc
 8001618:	0800cdd0 	.word	0x0800cdd0

0800161c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <HAL_MspInit+0x5c>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <HAL_MspInit+0x5c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6193      	str	r3, [r2, #24]
 800162e:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <HAL_MspInit+0x5c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <HAL_MspInit+0x5c>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a0e      	ldr	r2, [pc, #56]	@ (8001678 <HAL_MspInit+0x5c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <HAL_MspInit+0x5c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_MspInit+0x60>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_MspInit+0x60>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000

08001680 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a44      	ldr	r2, [pc, #272]	@ (80017ac <HAL_ADC_MspInit+0x12c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d152      	bne.n	8001746 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016a0:	4b43      	ldr	r3, [pc, #268]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a42      	ldr	r2, [pc, #264]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b40      	ldr	r3, [pc, #256]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b3d      	ldr	r3, [pc, #244]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a3c      	ldr	r2, [pc, #240]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b3a      	ldr	r3, [pc, #232]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016d0:	2330      	movs	r3, #48	@ 0x30
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d4:	2303      	movs	r3, #3
 80016d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	4619      	mov	r1, r3
 80016de:	4835      	ldr	r0, [pc, #212]	@ (80017b4 <HAL_ADC_MspInit+0x134>)
 80016e0:	f001 fc92 	bl	8003008 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016e4:	4b34      	ldr	r3, [pc, #208]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 80016e6:	4a35      	ldr	r2, [pc, #212]	@ (80017bc <HAL_ADC_MspInit+0x13c>)
 80016e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ea:	4b33      	ldr	r3, [pc, #204]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f0:	4b31      	ldr	r3, [pc, #196]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016f6:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 80016f8:	2280      	movs	r2, #128	@ 0x80
 80016fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016fc:	4b2e      	ldr	r3, [pc, #184]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 80016fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001702:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001704:	4b2c      	ldr	r3, [pc, #176]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 8001706:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800170a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800170c:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 800170e:	2220      	movs	r2, #32
 8001710:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001712:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001718:	4827      	ldr	r0, [pc, #156]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 800171a:	f001 f9d3 	bl	8002ac4 <HAL_DMA_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001724:	f7ff fd20 	bl	8001168 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a23      	ldr	r2, [pc, #140]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 800172c:	621a      	str	r2, [r3, #32]
 800172e:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <HAL_ADC_MspInit+0x138>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2012      	movs	r0, #18
 800173a:	f001 f98c 	bl	8002a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800173e:	2012      	movs	r0, #18
 8001740:	f001 f9a5 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001744:	e02e      	b.n	80017a4 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <HAL_ADC_MspInit+0x140>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d129      	bne.n	80017a4 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a16      	ldr	r2, [pc, #88]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a10      	ldr	r2, [pc, #64]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <HAL_ADC_MspInit+0x130>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001780:	230e      	movs	r3, #14
 8001782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	2303      	movs	r3, #3
 8001786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	4619      	mov	r1, r3
 800178e:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <HAL_ADC_MspInit+0x134>)
 8001790:	f001 fc3a 	bl	8003008 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2012      	movs	r0, #18
 800179a:	f001 f95c 	bl	8002a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800179e:	2012      	movs	r0, #18
 80017a0:	f001 f975 	bl	8002a8e <HAL_NVIC_EnableIRQ>
}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	@ 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40012400 	.word	0x40012400
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010800 	.word	0x40010800
 80017b8:	200004e8 	.word	0x200004e8
 80017bc:	40020008 	.word	0x40020008
 80017c0:	40012800 	.word	0x40012800

080017c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	@ 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1d      	ldr	r2, [pc, #116]	@ (8001854 <HAL_I2C_MspInit+0x90>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d132      	bne.n	800184a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <HAL_I2C_MspInit+0x94>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <HAL_I2C_MspInit+0x94>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_I2C_MspInit+0x94>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	2312      	movs	r3, #18
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4812      	ldr	r0, [pc, #72]	@ (800185c <HAL_I2C_MspInit+0x98>)
 8001812:	f001 fbf9 	bl	8003008 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <HAL_I2C_MspInit+0x9c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
 800182c:	4a0c      	ldr	r2, [pc, #48]	@ (8001860 <HAL_I2C_MspInit+0x9c>)
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_I2C_MspInit+0x94>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_I2C_MspInit+0x94>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_I2C_MspInit+0x94>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	@ 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40005400 	.word	0x40005400
 8001858:	40021000 	.word	0x40021000
 800185c:	40010c00 	.word	0x40010c00
 8001860:	40010000 	.word	0x40010000

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <HAL_TIM_Base_MspInit+0x58>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10c      	bne.n	8001890 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001876:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <HAL_TIM_Base_MspInit+0x5c>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	4a11      	ldr	r2, [pc, #68]	@ (80018c0 <HAL_TIM_Base_MspInit+0x5c>)
 800187c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001880:	6193      	str	r3, [r2, #24]
 8001882:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <HAL_TIM_Base_MspInit+0x5c>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800188e:	e010      	b.n	80018b2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0b      	ldr	r2, [pc, #44]	@ (80018c4 <HAL_TIM_Base_MspInit+0x60>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10b      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <HAL_TIM_Base_MspInit+0x5c>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a08      	ldr	r2, [pc, #32]	@ (80018c0 <HAL_TIM_Base_MspInit+0x5c>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_TIM_Base_MspInit+0x5c>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40012c00 	.word	0x40012c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40000400 	.word	0x40000400

080018c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001960 <HAL_TIM_MspPostInit+0x98>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d119      	bne.n	800191c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <HAL_TIM_MspPostInit+0x9c>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001964 <HAL_TIM_MspPostInit+0x9c>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HAL_TIM_MspPostInit+0x9c>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|BEEP_Pin;
 8001900:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2302      	movs	r3, #2
 800190c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	4619      	mov	r1, r3
 8001914:	4814      	ldr	r0, [pc, #80]	@ (8001968 <HAL_TIM_MspPostInit+0xa0>)
 8001916:	f001 fb77 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800191a:	e01c      	b.n	8001956 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a12      	ldr	r2, [pc, #72]	@ (800196c <HAL_TIM_MspPostInit+0xa4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d117      	bne.n	8001956 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_TIM_MspPostInit+0x9c>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	4a0e      	ldr	r2, [pc, #56]	@ (8001964 <HAL_TIM_MspPostInit+0x9c>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6193      	str	r3, [r2, #24]
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <HAL_TIM_MspPostInit+0x9c>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 800193e:	2340      	movs	r3, #64	@ 0x40
 8001940:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2302      	movs	r3, #2
 8001948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	@ (8001968 <HAL_TIM_MspPostInit+0xa0>)
 8001952:	f001 fb59 	bl	8003008 <HAL_GPIO_Init>
}
 8001956:	bf00      	nop
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40012c00 	.word	0x40012c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40010800 	.word	0x40010800
 800196c:	40000400 	.word	0x40000400

08001970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	@ 0x30
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a69      	ldr	r2, [pc, #420]	@ (8001b30 <HAL_UART_MspInit+0x1c0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d13e      	bne.n	8001a0e <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001990:	4b68      	ldr	r3, [pc, #416]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a67      	ldr	r2, [pc, #412]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 8001996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b65      	ldr	r3, [pc, #404]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a8:	4b62      	ldr	r3, [pc, #392]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a61      	ldr	r2, [pc, #388]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 80019ae:	f043 0308 	orr.w	r3, r3, #8
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019c0:	2340      	movs	r3, #64	@ 0x40
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	4859      	ldr	r0, [pc, #356]	@ (8001b38 <HAL_UART_MspInit+0x1c8>)
 80019d4:	f001 fb18 	bl	8003008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019d8:	2380      	movs	r3, #128	@ 0x80
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4853      	ldr	r0, [pc, #332]	@ (8001b38 <HAL_UART_MspInit+0x1c8>)
 80019ec:	f001 fb0c 	bl	8003008 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80019f0:	4b52      	ldr	r3, [pc, #328]	@ (8001b3c <HAL_UART_MspInit+0x1cc>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a06:	4a4d      	ldr	r2, [pc, #308]	@ (8001b3c <HAL_UART_MspInit+0x1cc>)
 8001a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a0c:	e08b      	b.n	8001b26 <HAL_UART_MspInit+0x1b6>
  else if(huart->Instance==USART3)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a4b      	ldr	r2, [pc, #300]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	f040 8086 	bne.w	8001b26 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a1a:	4b46      	ldr	r3, [pc, #280]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a45      	ldr	r2, [pc, #276]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b43      	ldr	r3, [pc, #268]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	4b40      	ldr	r3, [pc, #256]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	4a3f      	ldr	r2, [pc, #252]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	6193      	str	r3, [r2, #24]
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b34 <HAL_UART_MspInit+0x1c4>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4836      	ldr	r0, [pc, #216]	@ (8001b38 <HAL_UART_MspInit+0x1c8>)
 8001a60:	f001 fad2 	bl	8003008 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	482f      	ldr	r0, [pc, #188]	@ (8001b38 <HAL_UART_MspInit+0x1c8>)
 8001a7a:	f001 fac5 	bl	8003008 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001a7e:	4b31      	ldr	r3, [pc, #196]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001a80:	4a31      	ldr	r2, [pc, #196]	@ (8001b48 <HAL_UART_MspInit+0x1d8>)
 8001a82:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a84:	4b2f      	ldr	r3, [pc, #188]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001a86:	2210      	movs	r2, #16
 8001a88:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a90:	4b2c      	ldr	r3, [pc, #176]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001a92:	2280      	movs	r2, #128	@ 0x80
 8001a94:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a96:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a9c:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aa8:	4b26      	ldr	r3, [pc, #152]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001aae:	4825      	ldr	r0, [pc, #148]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001ab0:	f001 f808 	bl	8002ac4 <HAL_DMA_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8001aba:	f7ff fb55 	bl	8001168 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a20      	ldr	r2, [pc, #128]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001ac2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001aca:	4b20      	ldr	r3, [pc, #128]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001acc:	4a20      	ldr	r2, [pc, #128]	@ (8001b50 <HAL_UART_MspInit+0x1e0>)
 8001ace:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001ade:	2280      	movs	r2, #128	@ 0x80
 8001ae0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001af4:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001afa:	4814      	ldr	r0, [pc, #80]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001afc:	f000 ffe2 	bl	8002ac4 <HAL_DMA_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001b06:	f7ff fb2f 	bl	8001168 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b10:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2027      	movs	r0, #39	@ 0x27
 8001b1c:	f000 ff9b 	bl	8002a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b20:	2027      	movs	r0, #39	@ 0x27
 8001b22:	f000 ffb4 	bl	8002a8e <HAL_NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3730      	adds	r7, #48	@ 0x30
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40004800 	.word	0x40004800
 8001b44:	20000330 	.word	0x20000330
 8001b48:	4002001c 	.word	0x4002001c
 8001b4c:	200002ec 	.word	0x200002ec
 8001b50:	40020030 	.word	0x40020030

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <NMI_Handler+0x4>

08001b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 f8ea 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <DMA1_Channel1_IRQHandler+0x10>)
 8001bb2:	f001 f8f5 	bl	8002da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200004e8 	.word	0x200004e8

08001bc0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bc4:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <DMA1_Channel2_IRQHandler+0x10>)
 8001bc6:	f001 f8eb 	bl	8002da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000330 	.word	0x20000330

08001bd4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <DMA1_Channel3_IRQHandler+0x10>)
 8001bda:	f001 f8e1 	bl	8002da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200002ec 	.word	0x200002ec

08001be8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bec:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <ADC1_2_IRQHandler+0x14>)
 8001bee:	f000 fb75 	bl	80022dc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001bf2:	4803      	ldr	r0, [pc, #12]	@ (8001c00 <ADC1_2_IRQHandler+0x18>)
 8001bf4:	f000 fb72 	bl	80022dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000055c 	.word	0x2000055c
 8001c00:	2000052c 	.word	0x2000052c

08001c04 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001c0a:	f002 f982 	bl	8003f12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20001664 	.word	0x20001664

08001c18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <USART3_IRQHandler+0x10>)
 8001c1e:	f005 fa3b 	bl	8007098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000374 	.word	0x20000374

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f00a fc24 	bl	800c4a8 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20005000 	.word	0x20005000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	20000994 	.word	0x20000994
 8001c94:	20001cc0 	.word	0x20001cc0

08001c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca4:	f7ff fff8 	bl	8001c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca8:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001caa:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a09      	ldr	r2, [pc, #36]	@ (8001ce4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cc0:	4c09      	ldr	r4, [pc, #36]	@ (8001ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cce:	f00a fbf1 	bl	800c4b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cd2:	f7fe fe51 	bl	8000978 <main>
  bx lr
 8001cd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8001ce0:	0800fce8 	.word	0x0800fce8
  ldr r2, =_sbss
 8001ce4:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8001ce8:	20001cbc 	.word	0x20001cbc

08001cec <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <CAN1_RX1_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <HAL_Init+0x28>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	@ (8001d18 <HAL_Init+0x28>)
 8001cfa:	f043 0310 	orr.w	r3, r3, #16
 8001cfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 fe9d 	bl	8002a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d06:	200f      	movs	r0, #15
 8001d08:	f000 f808 	bl	8001d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0c:	f7ff fc86 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40022000 	.word	0x40022000

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_InitTick+0x54>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <HAL_InitTick+0x58>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 feb5 	bl	8002aaa <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00e      	b.n	8001d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f000 fe7d 	bl	8002a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	@ (8001d78 <HAL_InitTick+0x5c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200000fc 	.word	0x200000fc
 8001d74:	20000104 	.word	0x20000104
 8001d78:	20000100 	.word	0x20000100

08001d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_IncTick+0x1c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_IncTick+0x20>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a03      	ldr	r2, [pc, #12]	@ (8001d9c <HAL_IncTick+0x20>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000104 	.word	0x20000104
 8001d9c:	20000998 	.word	0x20000998

08001da0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return uwTick;
 8001da4:	4b02      	ldr	r3, [pc, #8]	@ (8001db0 <HAL_GetTick+0x10>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	20000998 	.word	0x20000998

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fff0 	bl	8001da0 <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d005      	beq.n	8001dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_Delay+0x44>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dda:	bf00      	nop
 8001ddc:	f7ff ffe0 	bl	8001da0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d8f7      	bhi.n	8001ddc <HAL_Delay+0x28>
  {
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000104 	.word	0x20000104

08001dfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0be      	b.n	8001f9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d109      	bne.n	8001e40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fc20 	bl	8001680 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fc81 	bl	8002748 <ADC_ConversionStop_Disable>
 8001e46:	4603      	mov	r3, r0
 8001e48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 8099 	bne.w	8001f8a <HAL_ADC_Init+0x18e>
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 8095 	bne.w	8001f8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e68:	f023 0302 	bic.w	r3, r3, #2
 8001e6c:	f043 0202 	orr.w	r2, r3, #2
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7b1b      	ldrb	r3, [r3, #12]
 8001e82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e94:	d003      	beq.n	8001e9e <HAL_ADC_Init+0xa2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <HAL_ADC_Init+0xa8>
 8001e9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ea2:	e000      	b.n	8001ea6 <HAL_ADC_Init+0xaa>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7d1b      	ldrb	r3, [r3, #20]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d119      	bne.n	8001ee8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7b1b      	ldrb	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	035a      	lsls	r2, r3, #13
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	e00b      	b.n	8001ee8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <HAL_ADC_Init+0x1a8>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f18:	d003      	beq.n	8001f22 <HAL_ADC_Init+0x126>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d104      	bne.n	8001f2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	051b      	lsls	r3, r3, #20
 8001f2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <HAL_ADC_Init+0x1ac>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d10b      	bne.n	8001f68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	f023 0303 	bic.w	r3, r3, #3
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f66:	e018      	b.n	8001f9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6c:	f023 0312 	bic.w	r3, r3, #18
 8001f70:	f043 0210 	orr.w	r2, r3, #16
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f88:	e007      	b.n	8001f9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	ffe1f7fd 	.word	0xffe1f7fd
 8001fa8:	ff1f0efe 	.word	0xff1f0efe

08001fac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_Start+0x1a>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e098      	b.n	80020f8 <HAL_ADC_Start+0x14c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fb60 	bl	8002694 <ADC_Enable>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 8087 	bne.w	80020ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a41      	ldr	r2, [pc, #260]	@ (8002100 <HAL_ADC_Start+0x154>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d105      	bne.n	800200a <HAL_ADC_Start+0x5e>
 8001ffe:	4b41      	ldr	r3, [pc, #260]	@ (8002104 <HAL_ADC_Start+0x158>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d115      	bne.n	8002036 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002020:	2b00      	cmp	r3, #0
 8002022:	d026      	beq.n	8002072 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002028:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800202c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002034:	e01d      	b.n	8002072 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a2f      	ldr	r2, [pc, #188]	@ (8002104 <HAL_ADC_Start+0x158>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d004      	beq.n	8002056 <HAL_ADC_Start+0xaa>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2b      	ldr	r2, [pc, #172]	@ (8002100 <HAL_ADC_Start+0x154>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10d      	bne.n	8002072 <HAL_ADC_Start+0xc6>
 8002056:	4b2b      	ldr	r3, [pc, #172]	@ (8002104 <HAL_ADC_Start+0x158>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002066:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800206a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002076:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002082:	f023 0206 	bic.w	r2, r3, #6
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	62da      	str	r2, [r3, #44]	@ 0x2c
 800208a:	e002      	b.n	8002092 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f06f 0202 	mvn.w	r2, #2
 80020a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020ae:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020b2:	d113      	bne.n	80020dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020b8:	4a11      	ldr	r2, [pc, #68]	@ (8002100 <HAL_ADC_Start+0x154>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d105      	bne.n	80020ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <HAL_ADC_Start+0x158>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	e00c      	b.n	80020f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	e003      	b.n	80020f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40012800 	.word	0x40012800
 8002104:	40012400 	.word	0x40012400

08002108 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a64      	ldr	r2, [pc, #400]	@ (80022b0 <HAL_ADC_Start_DMA+0x1a8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_ADC_Start_DMA+0x24>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a63      	ldr	r2, [pc, #396]	@ (80022b4 <HAL_ADC_Start_DMA+0x1ac>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d106      	bne.n	800213a <HAL_ADC_Start_DMA+0x32>
 800212c:	4b60      	ldr	r3, [pc, #384]	@ (80022b0 <HAL_ADC_Start_DMA+0x1a8>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002134:	2b00      	cmp	r3, #0
 8002136:	f040 80b3 	bne.w	80022a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_ADC_Start_DMA+0x40>
 8002144:	2302      	movs	r3, #2
 8002146:	e0ae      	b.n	80022a6 <HAL_ADC_Start_DMA+0x19e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fa9f 	bl	8002694 <ADC_Enable>
 8002156:	4603      	mov	r3, r0
 8002158:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800215a:	7dfb      	ldrb	r3, [r7, #23]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 809a 	bne.w	8002296 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a4e      	ldr	r2, [pc, #312]	@ (80022b4 <HAL_ADC_Start_DMA+0x1ac>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d105      	bne.n	800218c <HAL_ADC_Start_DMA+0x84>
 8002180:	4b4b      	ldr	r3, [pc, #300]	@ (80022b0 <HAL_ADC_Start_DMA+0x1a8>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d115      	bne.n	80021b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002190:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d026      	beq.n	80021f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021b6:	e01d      	b.n	80021f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a39      	ldr	r2, [pc, #228]	@ (80022b0 <HAL_ADC_Start_DMA+0x1a8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d004      	beq.n	80021d8 <HAL_ADC_Start_DMA+0xd0>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a38      	ldr	r2, [pc, #224]	@ (80022b4 <HAL_ADC_Start_DMA+0x1ac>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d10d      	bne.n	80021f4 <HAL_ADC_Start_DMA+0xec>
 80021d8:	4b35      	ldr	r3, [pc, #212]	@ (80022b0 <HAL_ADC_Start_DMA+0x1a8>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d006      	beq.n	800220e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	f023 0206 	bic.w	r2, r3, #6
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800220c:	e002      	b.n	8002214 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a25      	ldr	r2, [pc, #148]	@ (80022b8 <HAL_ADC_Start_DMA+0x1b0>)
 8002222:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a24      	ldr	r2, [pc, #144]	@ (80022bc <HAL_ADC_Start_DMA+0x1b4>)
 800222a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a23      	ldr	r2, [pc, #140]	@ (80022c0 <HAL_ADC_Start_DMA+0x1b8>)
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0202 	mvn.w	r2, #2
 800223c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800224c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a18      	ldr	r0, [r3, #32]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	334c      	adds	r3, #76	@ 0x4c
 8002258:	4619      	mov	r1, r3
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f000 fc8b 	bl	8002b78 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800226c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002270:	d108      	bne.n	8002284 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002280:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002282:	e00f      	b.n	80022a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002292:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002294:	e006      	b.n	80022a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800229e:	e001      	b.n	80022a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40012400 	.word	0x40012400
 80022b4:	40012800 	.word	0x40012800
 80022b8:	080027cb 	.word	0x080027cb
 80022bc:	08002847 	.word	0x08002847
 80022c0:	08002863 	.word	0x08002863

080022c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d03e      	beq.n	800237c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d039      	beq.n	800237c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800232a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800232e:	d11d      	bne.n	800236c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002334:	2b00      	cmp	r3, #0
 8002336:	d119      	bne.n	800236c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0220 	bic.w	r2, r2, #32
 8002346:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f874 	bl	800245a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f06f 0212 	mvn.w	r2, #18
 800237a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d04d      	beq.n	8002422 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d048      	beq.n	8002422 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d105      	bne.n	80023a8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80023b2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80023b6:	d012      	beq.n	80023de <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d125      	bne.n	8002412 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023d0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023d4:	d11d      	bne.n	8002412 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d119      	bne.n	8002412 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023ec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	f043 0201 	orr.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fa3f 	bl	8002896 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 020c 	mvn.w	r2, #12
 8002420:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d012      	beq.n	8002452 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00d      	beq.n	8002452 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f81b 	bl	800247e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0201 	mvn.w	r2, #1
 8002450:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x20>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e0dc      	b.n	800267e <HAL_ADC_ConfigChannel+0x1da>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b06      	cmp	r3, #6
 80024d2:	d81c      	bhi.n	800250e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	3b05      	subs	r3, #5
 80024e6:	221f      	movs	r2, #31
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4019      	ands	r1, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	3b05      	subs	r3, #5
 8002500:	fa00 f203 	lsl.w	r2, r0, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	635a      	str	r2, [r3, #52]	@ 0x34
 800250c:	e03c      	b.n	8002588 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d81c      	bhi.n	8002550 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3b23      	subs	r3, #35	@ 0x23
 8002528:	221f      	movs	r2, #31
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	4019      	ands	r1, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	3b23      	subs	r3, #35	@ 0x23
 8002542:	fa00 f203 	lsl.w	r2, r0, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	631a      	str	r2, [r3, #48]	@ 0x30
 800254e:	e01b      	b.n	8002588 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	3b41      	subs	r3, #65	@ 0x41
 8002562:	221f      	movs	r2, #31
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	4019      	ands	r1, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	3b41      	subs	r3, #65	@ 0x41
 800257c:	fa00 f203 	lsl.w	r2, r0, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b09      	cmp	r3, #9
 800258e:	d91c      	bls.n	80025ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68d9      	ldr	r1, [r3, #12]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	3b1e      	subs	r3, #30
 80025a2:	2207      	movs	r2, #7
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4019      	ands	r1, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6898      	ldr	r0, [r3, #8]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	3b1e      	subs	r3, #30
 80025bc:	fa00 f203 	lsl.w	r2, r0, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	e019      	b.n	80025fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6919      	ldr	r1, [r3, #16]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	2207      	movs	r2, #7
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4019      	ands	r1, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6898      	ldr	r0, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	fa00 f203 	lsl.w	r2, r0, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b10      	cmp	r3, #16
 8002604:	d003      	beq.n	800260e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800260a:	2b11      	cmp	r3, #17
 800260c:	d132      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1d      	ldr	r2, [pc, #116]	@ (8002688 <HAL_ADC_ConfigChannel+0x1e4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d125      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d126      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002634:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b10      	cmp	r3, #16
 800263c:	d11a      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800263e:	4b13      	ldr	r3, [pc, #76]	@ (800268c <HAL_ADC_ConfigChannel+0x1e8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a13      	ldr	r2, [pc, #76]	@ (8002690 <HAL_ADC_ConfigChannel+0x1ec>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	0c9a      	lsrs	r2, r3, #18
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002654:	e002      	b.n	800265c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3b01      	subs	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f9      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x1b2>
 8002662:	e007      	b.n	8002674 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	40012400 	.word	0x40012400
 800268c:	200000fc 	.word	0x200000fc
 8002690:	431bde83 	.word	0x431bde83

08002694 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d040      	beq.n	8002734 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0201 	orr.w	r2, r2, #1
 80026c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <ADC_Enable+0xac>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002744 <ADC_Enable+0xb0>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	0c9b      	lsrs	r3, r3, #18
 80026ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026d0:	e002      	b.n	80026d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f9      	bne.n	80026d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026de:	f7ff fb5f 	bl	8001da0 <HAL_GetTick>
 80026e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026e4:	e01f      	b.n	8002726 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026e6:	f7ff fb5b 	bl	8001da0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d918      	bls.n	8002726 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d011      	beq.n	8002726 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	f043 0210 	orr.w	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	f043 0201 	orr.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e007      	b.n	8002736 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d1d8      	bne.n	80026e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200000fc 	.word	0x200000fc
 8002744:	431bde83 	.word	0x431bde83

08002748 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d12e      	bne.n	80027c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002772:	f7ff fb15 	bl	8001da0 <HAL_GetTick>
 8002776:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002778:	e01b      	b.n	80027b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800277a:	f7ff fb11 	bl	8001da0 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d914      	bls.n	80027b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10d      	bne.n	80027b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e007      	b.n	80027c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d0dc      	beq.n	800277a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d127      	bne.n	8002834 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80027fa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80027fe:	d115      	bne.n	800282c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002804:	2b00      	cmp	r3, #0
 8002806:	d111      	bne.n	800282c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002818:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	f043 0201 	orr.w	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff fe14 	bl	800245a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002832:	e004      	b.n	800283e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff fe09 	bl	800246c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	f043 0204 	orr.w	r2, r3, #4
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff fe01 	bl	8002490 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4906      	ldr	r1, [pc, #24]	@ (8002940 <__NVIC_EnableIRQ+0x34>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	@ (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	@ (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	@ 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	@ 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a0c:	d301      	bcc.n	8002a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e00f      	b.n	8002a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a12:	4a0a      	ldr	r2, [pc, #40]	@ (8002a3c <SysTick_Config+0x40>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1a:	210f      	movs	r1, #15
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a20:	f7ff ff90 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <SysTick_Config+0x40>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2a:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <SysTick_Config+0x40>)
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	e000e010 	.word	0xe000e010

08002a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff2d 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a68:	f7ff ff42 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	6978      	ldr	r0, [r7, #20]
 8002a74:	f7ff ff90 	bl	8002998 <NVIC_EncodePriority>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff5f 	bl	8002944 <__NVIC_SetPriority>
}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff35 	bl	800290c <__NVIC_EnableIRQ>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ffa2 	bl	80029fc <SysTick_Config>
 8002ab8:	4603      	mov	r3, r0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e043      	b.n	8002b62 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_DMA_Init+0xa8>)
 8002ae2:	4413      	add	r3, r2
 8002ae4:	4a22      	ldr	r2, [pc, #136]	@ (8002b70 <HAL_DMA_Init+0xac>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	009a      	lsls	r2, r3, #2
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b74 <HAL_DMA_Init+0xb0>)
 8002af6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b0e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	bffdfff8 	.word	0xbffdfff8
 8002b70:	cccccccd 	.word	0xcccccccd
 8002b74:	40020000 	.word	0x40020000

08002b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_DMA_Start_IT+0x20>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e04b      	b.n	8002c30 <HAL_DMA_Start_IT+0xb8>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d13a      	bne.n	8002c22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f9eb 	bl	8002fac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 020e 	orr.w	r2, r2, #14
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	e00f      	b.n	8002c10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0204 	bic.w	r2, r2, #4
 8002bfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 020a 	orr.w	r2, r2, #10
 8002c0e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e005      	b.n	8002c2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d008      	beq.n	8002c62 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2204      	movs	r2, #4
 8002c54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e020      	b.n	8002ca4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 020e 	bic.w	r2, r2, #14
 8002c70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d005      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e051      	b.n	8002d78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 020e 	bic.w	r2, r2, #14
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a22      	ldr	r2, [pc, #136]	@ (8002d84 <HAL_DMA_Abort_IT+0xd4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d029      	beq.n	8002d52 <HAL_DMA_Abort_IT+0xa2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a21      	ldr	r2, [pc, #132]	@ (8002d88 <HAL_DMA_Abort_IT+0xd8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <HAL_DMA_Abort_IT+0x9e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d8c <HAL_DMA_Abort_IT+0xdc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01a      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x98>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1e      	ldr	r2, [pc, #120]	@ (8002d90 <HAL_DMA_Abort_IT+0xe0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d012      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x92>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1c      	ldr	r2, [pc, #112]	@ (8002d94 <HAL_DMA_Abort_IT+0xe4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00a      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x8c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002d98 <HAL_DMA_Abort_IT+0xe8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <HAL_DMA_Abort_IT+0x86>
 8002d30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d34:	e00e      	b.n	8002d54 <HAL_DMA_Abort_IT+0xa4>
 8002d36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d3a:	e00b      	b.n	8002d54 <HAL_DMA_Abort_IT+0xa4>
 8002d3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d40:	e008      	b.n	8002d54 <HAL_DMA_Abort_IT+0xa4>
 8002d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d46:	e005      	b.n	8002d54 <HAL_DMA_Abort_IT+0xa4>
 8002d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d4c:	e002      	b.n	8002d54 <HAL_DMA_Abort_IT+0xa4>
 8002d4e:	2310      	movs	r3, #16
 8002d50:	e000      	b.n	8002d54 <HAL_DMA_Abort_IT+0xa4>
 8002d52:	2301      	movs	r3, #1
 8002d54:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <HAL_DMA_Abort_IT+0xec>)
 8002d56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
    } 
  }
  return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40020008 	.word	0x40020008
 8002d88:	4002001c 	.word	0x4002001c
 8002d8c:	40020030 	.word	0x40020030
 8002d90:	40020044 	.word	0x40020044
 8002d94:	40020058 	.word	0x40020058
 8002d98:	4002006c 	.word	0x4002006c
 8002d9c:	40020000 	.word	0x40020000

08002da0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d04f      	beq.n	8002e68 <HAL_DMA_IRQHandler+0xc8>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d04a      	beq.n	8002e68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0204 	bic.w	r2, r2, #4
 8002dee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a66      	ldr	r2, [pc, #408]	@ (8002f90 <HAL_DMA_IRQHandler+0x1f0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d029      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xae>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a65      	ldr	r2, [pc, #404]	@ (8002f94 <HAL_DMA_IRQHandler+0x1f4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xaa>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a63      	ldr	r2, [pc, #396]	@ (8002f98 <HAL_DMA_IRQHandler+0x1f8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01a      	beq.n	8002e44 <HAL_DMA_IRQHandler+0xa4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a62      	ldr	r2, [pc, #392]	@ (8002f9c <HAL_DMA_IRQHandler+0x1fc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d012      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x9e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a60      	ldr	r2, [pc, #384]	@ (8002fa0 <HAL_DMA_IRQHandler+0x200>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00a      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x98>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5f      	ldr	r2, [pc, #380]	@ (8002fa4 <HAL_DMA_IRQHandler+0x204>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d102      	bne.n	8002e32 <HAL_DMA_IRQHandler+0x92>
 8002e2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e30:	e00e      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e32:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002e36:	e00b      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e3c:	e008      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e42:	e005      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e48:	e002      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e4a:	2340      	movs	r3, #64	@ 0x40
 8002e4c:	e000      	b.n	8002e50 <HAL_DMA_IRQHandler+0xb0>
 8002e4e:	2304      	movs	r3, #4
 8002e50:	4a55      	ldr	r2, [pc, #340]	@ (8002fa8 <HAL_DMA_IRQHandler+0x208>)
 8002e52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8094 	beq.w	8002f86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e66:	e08e      	b.n	8002f86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d056      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x186>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d051      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 020a 	bic.w	r2, r2, #10
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a38      	ldr	r2, [pc, #224]	@ (8002f90 <HAL_DMA_IRQHandler+0x1f0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d029      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x166>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a37      	ldr	r2, [pc, #220]	@ (8002f94 <HAL_DMA_IRQHandler+0x1f4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d022      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x162>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a35      	ldr	r2, [pc, #212]	@ (8002f98 <HAL_DMA_IRQHandler+0x1f8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01a      	beq.n	8002efc <HAL_DMA_IRQHandler+0x15c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a34      	ldr	r2, [pc, #208]	@ (8002f9c <HAL_DMA_IRQHandler+0x1fc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d012      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x156>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a32      	ldr	r2, [pc, #200]	@ (8002fa0 <HAL_DMA_IRQHandler+0x200>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x150>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a31      	ldr	r2, [pc, #196]	@ (8002fa4 <HAL_DMA_IRQHandler+0x204>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d102      	bne.n	8002eea <HAL_DMA_IRQHandler+0x14a>
 8002ee4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ee8:	e00e      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002eea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eee:	e00b      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002ef0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ef4:	e008      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002ef6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002efa:	e005      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002efc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f00:	e002      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002f02:	2320      	movs	r3, #32
 8002f04:	e000      	b.n	8002f08 <HAL_DMA_IRQHandler+0x168>
 8002f06:	2302      	movs	r3, #2
 8002f08:	4a27      	ldr	r2, [pc, #156]	@ (8002fa8 <HAL_DMA_IRQHandler+0x208>)
 8002f0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d034      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f24:	e02f      	b.n	8002f86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d028      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x1e8>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d023      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 020e 	bic.w	r2, r2, #14
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
    }
  }
  return;
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
}
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40020008 	.word	0x40020008
 8002f94:	4002001c 	.word	0x4002001c
 8002f98:	40020030 	.word	0x40020030
 8002f9c:	40020044 	.word	0x40020044
 8002fa0:	40020058 	.word	0x40020058
 8002fa4:	4002006c 	.word	0x4002006c
 8002fa8:	40020000 	.word	0x40020000

08002fac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d108      	bne.n	8002fec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fea:	e007      	b.n	8002ffc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr
	...

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b08b      	sub	sp, #44	@ 0x2c
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003016:	2300      	movs	r3, #0
 8003018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800301a:	e169      	b.n	80032f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800301c:	2201      	movs	r2, #1
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	429a      	cmp	r2, r3
 8003036:	f040 8158 	bne.w	80032ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4a9a      	ldr	r2, [pc, #616]	@ (80032a8 <HAL_GPIO_Init+0x2a0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d05e      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003044:	4a98      	ldr	r2, [pc, #608]	@ (80032a8 <HAL_GPIO_Init+0x2a0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d875      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 800304a:	4a98      	ldr	r2, [pc, #608]	@ (80032ac <HAL_GPIO_Init+0x2a4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d058      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003050:	4a96      	ldr	r2, [pc, #600]	@ (80032ac <HAL_GPIO_Init+0x2a4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d86f      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 8003056:	4a96      	ldr	r2, [pc, #600]	@ (80032b0 <HAL_GPIO_Init+0x2a8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d052      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 800305c:	4a94      	ldr	r2, [pc, #592]	@ (80032b0 <HAL_GPIO_Init+0x2a8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d869      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 8003062:	4a94      	ldr	r2, [pc, #592]	@ (80032b4 <HAL_GPIO_Init+0x2ac>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d04c      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003068:	4a92      	ldr	r2, [pc, #584]	@ (80032b4 <HAL_GPIO_Init+0x2ac>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d863      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 800306e:	4a92      	ldr	r2, [pc, #584]	@ (80032b8 <HAL_GPIO_Init+0x2b0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d046      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003074:	4a90      	ldr	r2, [pc, #576]	@ (80032b8 <HAL_GPIO_Init+0x2b0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d85d      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 800307a:	2b12      	cmp	r3, #18
 800307c:	d82a      	bhi.n	80030d4 <HAL_GPIO_Init+0xcc>
 800307e:	2b12      	cmp	r3, #18
 8003080:	d859      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 8003082:	a201      	add	r2, pc, #4	@ (adr r2, 8003088 <HAL_GPIO_Init+0x80>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	08003103 	.word	0x08003103
 800308c:	080030dd 	.word	0x080030dd
 8003090:	080030ef 	.word	0x080030ef
 8003094:	08003131 	.word	0x08003131
 8003098:	08003137 	.word	0x08003137
 800309c:	08003137 	.word	0x08003137
 80030a0:	08003137 	.word	0x08003137
 80030a4:	08003137 	.word	0x08003137
 80030a8:	08003137 	.word	0x08003137
 80030ac:	08003137 	.word	0x08003137
 80030b0:	08003137 	.word	0x08003137
 80030b4:	08003137 	.word	0x08003137
 80030b8:	08003137 	.word	0x08003137
 80030bc:	08003137 	.word	0x08003137
 80030c0:	08003137 	.word	0x08003137
 80030c4:	08003137 	.word	0x08003137
 80030c8:	08003137 	.word	0x08003137
 80030cc:	080030e5 	.word	0x080030e5
 80030d0:	080030f9 	.word	0x080030f9
 80030d4:	4a79      	ldr	r2, [pc, #484]	@ (80032bc <HAL_GPIO_Init+0x2b4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030da:	e02c      	b.n	8003136 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	623b      	str	r3, [r7, #32]
          break;
 80030e2:	e029      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	3304      	adds	r3, #4
 80030ea:	623b      	str	r3, [r7, #32]
          break;
 80030ec:	e024      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	3308      	adds	r3, #8
 80030f4:	623b      	str	r3, [r7, #32]
          break;
 80030f6:	e01f      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	330c      	adds	r3, #12
 80030fe:	623b      	str	r3, [r7, #32]
          break;
 8003100:	e01a      	b.n	8003138 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800310a:	2304      	movs	r3, #4
 800310c:	623b      	str	r3, [r7, #32]
          break;
 800310e:	e013      	b.n	8003138 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d105      	bne.n	8003124 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003118:	2308      	movs	r3, #8
 800311a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	611a      	str	r2, [r3, #16]
          break;
 8003122:	e009      	b.n	8003138 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003124:	2308      	movs	r3, #8
 8003126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	615a      	str	r2, [r3, #20]
          break;
 800312e:	e003      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003130:	2300      	movs	r3, #0
 8003132:	623b      	str	r3, [r7, #32]
          break;
 8003134:	e000      	b.n	8003138 <HAL_GPIO_Init+0x130>
          break;
 8003136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2bff      	cmp	r3, #255	@ 0xff
 800313c:	d801      	bhi.n	8003142 <HAL_GPIO_Init+0x13a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	e001      	b.n	8003146 <HAL_GPIO_Init+0x13e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2bff      	cmp	r3, #255	@ 0xff
 800314c:	d802      	bhi.n	8003154 <HAL_GPIO_Init+0x14c>
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	e002      	b.n	800315a <HAL_GPIO_Init+0x152>
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	3b08      	subs	r3, #8
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	210f      	movs	r1, #15
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	401a      	ands	r2, r3
 800316c:	6a39      	ldr	r1, [r7, #32]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	431a      	orrs	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80b1 	beq.w	80032ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003188:	4b4d      	ldr	r3, [pc, #308]	@ (80032c0 <HAL_GPIO_Init+0x2b8>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	4a4c      	ldr	r2, [pc, #304]	@ (80032c0 <HAL_GPIO_Init+0x2b8>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6193      	str	r3, [r2, #24]
 8003194:	4b4a      	ldr	r3, [pc, #296]	@ (80032c0 <HAL_GPIO_Init+0x2b8>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031a0:	4a48      	ldr	r2, [pc, #288]	@ (80032c4 <HAL_GPIO_Init+0x2bc>)
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a40      	ldr	r2, [pc, #256]	@ (80032c8 <HAL_GPIO_Init+0x2c0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d013      	beq.n	80031f4 <HAL_GPIO_Init+0x1ec>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a3f      	ldr	r2, [pc, #252]	@ (80032cc <HAL_GPIO_Init+0x2c4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00d      	beq.n	80031f0 <HAL_GPIO_Init+0x1e8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a3e      	ldr	r2, [pc, #248]	@ (80032d0 <HAL_GPIO_Init+0x2c8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d007      	beq.n	80031ec <HAL_GPIO_Init+0x1e4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a3d      	ldr	r2, [pc, #244]	@ (80032d4 <HAL_GPIO_Init+0x2cc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_GPIO_Init+0x1e0>
 80031e4:	2303      	movs	r3, #3
 80031e6:	e006      	b.n	80031f6 <HAL_GPIO_Init+0x1ee>
 80031e8:	2304      	movs	r3, #4
 80031ea:	e004      	b.n	80031f6 <HAL_GPIO_Init+0x1ee>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e002      	b.n	80031f6 <HAL_GPIO_Init+0x1ee>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_GPIO_Init+0x1ee>
 80031f4:	2300      	movs	r3, #0
 80031f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f8:	f002 0203 	and.w	r2, r2, #3
 80031fc:	0092      	lsls	r2, r2, #2
 80031fe:	4093      	lsls	r3, r2
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003206:	492f      	ldr	r1, [pc, #188]	@ (80032c4 <HAL_GPIO_Init+0x2bc>)
 8003208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	3302      	adds	r3, #2
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003220:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	492c      	ldr	r1, [pc, #176]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	608b      	str	r3, [r1, #8]
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800322e:	4b2a      	ldr	r3, [pc, #168]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	43db      	mvns	r3, r3
 8003236:	4928      	ldr	r1, [pc, #160]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003238:	4013      	ands	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003248:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	4922      	ldr	r1, [pc, #136]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	60cb      	str	r3, [r1, #12]
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003256:	4b20      	ldr	r3, [pc, #128]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	43db      	mvns	r3, r3
 800325e:	491e      	ldr	r1, [pc, #120]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003260:	4013      	ands	r3, r2
 8003262:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003270:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	4918      	ldr	r1, [pc, #96]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
 800327c:	e006      	b.n	800328c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	43db      	mvns	r3, r3
 8003286:	4914      	ldr	r1, [pc, #80]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003288:	4013      	ands	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d021      	beq.n	80032dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003298:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	490e      	ldr	r1, [pc, #56]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	e021      	b.n	80032ea <HAL_GPIO_Init+0x2e2>
 80032a6:	bf00      	nop
 80032a8:	10320000 	.word	0x10320000
 80032ac:	10310000 	.word	0x10310000
 80032b0:	10220000 	.word	0x10220000
 80032b4:	10210000 	.word	0x10210000
 80032b8:	10120000 	.word	0x10120000
 80032bc:	10110000 	.word	0x10110000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40010000 	.word	0x40010000
 80032c8:	40010800 	.word	0x40010800
 80032cc:	40010c00 	.word	0x40010c00
 80032d0:	40011000 	.word	0x40011000
 80032d4:	40011400 	.word	0x40011400
 80032d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <HAL_GPIO_Init+0x304>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	4909      	ldr	r1, [pc, #36]	@ (800330c <HAL_GPIO_Init+0x304>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	3301      	adds	r3, #1
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f47f ae8e 	bne.w	800301c <HAL_GPIO_Init+0x14>
  }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	372c      	adds	r7, #44	@ 0x2c
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	40010400 	.word	0x40010400

08003310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e001      	b.n	8003332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	807b      	strh	r3, [r7, #2]
 800334a:	4613      	mov	r3, r2
 800334c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800334e:	787b      	ldrb	r3, [r7, #1]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003354:	887a      	ldrh	r2, [r7, #2]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800335a:	e003      	b.n	8003364 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	041a      	lsls	r2, r3, #16
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	611a      	str	r2, [r3, #16]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
	...

08003370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e12b      	b.n	80035da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fa14 	bl	80017c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d4:	f002 fdb0 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 80033d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4a81      	ldr	r2, [pc, #516]	@ (80035e4 <HAL_I2C_Init+0x274>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d807      	bhi.n	80033f4 <HAL_I2C_Init+0x84>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a80      	ldr	r2, [pc, #512]	@ (80035e8 <HAL_I2C_Init+0x278>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	bf94      	ite	ls
 80033ec:	2301      	movls	r3, #1
 80033ee:	2300      	movhi	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e006      	b.n	8003402 <HAL_I2C_Init+0x92>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a7d      	ldr	r2, [pc, #500]	@ (80035ec <HAL_I2C_Init+0x27c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	bf94      	ite	ls
 80033fc:	2301      	movls	r3, #1
 80033fe:	2300      	movhi	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0e7      	b.n	80035da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a78      	ldr	r2, [pc, #480]	@ (80035f0 <HAL_I2C_Init+0x280>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0c9b      	lsrs	r3, r3, #18
 8003414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a6a      	ldr	r2, [pc, #424]	@ (80035e4 <HAL_I2C_Init+0x274>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d802      	bhi.n	8003444 <HAL_I2C_Init+0xd4>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3301      	adds	r3, #1
 8003442:	e009      	b.n	8003458 <HAL_I2C_Init+0xe8>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	4a69      	ldr	r2, [pc, #420]	@ (80035f4 <HAL_I2C_Init+0x284>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	3301      	adds	r3, #1
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800346a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	495c      	ldr	r1, [pc, #368]	@ (80035e4 <HAL_I2C_Init+0x274>)
 8003474:	428b      	cmp	r3, r1
 8003476:	d819      	bhi.n	80034ac <HAL_I2C_Init+0x13c>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e59      	subs	r1, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fbb1 f3f3 	udiv	r3, r1, r3
 8003486:	1c59      	adds	r1, r3, #1
 8003488:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800348c:	400b      	ands	r3, r1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_I2C_Init+0x138>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1e59      	subs	r1, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a6:	e051      	b.n	800354c <HAL_I2C_Init+0x1dc>
 80034a8:	2304      	movs	r3, #4
 80034aa:	e04f      	b.n	800354c <HAL_I2C_Init+0x1dc>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d111      	bne.n	80034d8 <HAL_I2C_Init+0x168>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	440b      	add	r3, r1
 80034c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e012      	b.n	80034fe <HAL_I2C_Init+0x18e>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1e58      	subs	r0, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	0099      	lsls	r1, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Init+0x196>
 8003502:	2301      	movs	r3, #1
 8003504:	e022      	b.n	800354c <HAL_I2C_Init+0x1dc>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10e      	bne.n	800352c <HAL_I2C_Init+0x1bc>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1e58      	subs	r0, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	440b      	add	r3, r1
 800351c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800352a:	e00f      	b.n	800354c <HAL_I2C_Init+0x1dc>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1e58      	subs	r0, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	0099      	lsls	r1, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003542:	3301      	adds	r3, #1
 8003544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003548:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	6809      	ldr	r1, [r1, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69da      	ldr	r2, [r3, #28]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800357a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6911      	ldr	r1, [r2, #16]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68d2      	ldr	r2, [r2, #12]
 8003586:	4311      	orrs	r1, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	430b      	orrs	r3, r1
 800358e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	000186a0 	.word	0x000186a0
 80035e8:	001e847f 	.word	0x001e847f
 80035ec:	003d08ff 	.word	0x003d08ff
 80035f0:	431bde83 	.word	0x431bde83
 80035f4:	10624dd3 	.word	0x10624dd3

080035f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	4608      	mov	r0, r1
 8003602:	4611      	mov	r1, r2
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	817b      	strh	r3, [r7, #10]
 800360a:	460b      	mov	r3, r1
 800360c:	813b      	strh	r3, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003612:	f7fe fbc5 	bl	8001da0 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b20      	cmp	r3, #32
 8003622:	f040 80d9 	bne.w	80037d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2319      	movs	r3, #25
 800362c:	2201      	movs	r2, #1
 800362e:	496d      	ldr	r1, [pc, #436]	@ (80037e4 <HAL_I2C_Mem_Write+0x1ec>)
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f971 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
 800363e:	e0cc      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_I2C_Mem_Write+0x56>
 800364a:	2302      	movs	r3, #2
 800364c:	e0c5      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d007      	beq.n	8003674 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2221      	movs	r2, #33	@ 0x21
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2240      	movs	r2, #64	@ 0x40
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a4d      	ldr	r2, [pc, #308]	@ (80037e8 <HAL_I2C_Mem_Write+0x1f0>)
 80036b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036b6:	88f8      	ldrh	r0, [r7, #6]
 80036b8:	893a      	ldrh	r2, [r7, #8]
 80036ba:	8979      	ldrh	r1, [r7, #10]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	4603      	mov	r3, r0
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f890 	bl	80037ec <I2C_RequestMemoryWrite>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d052      	beq.n	8003778 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e081      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa36 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d107      	bne.n	80036fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06b      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b04      	cmp	r3, #4
 800373e:	d11b      	bne.n	8003778 <HAL_I2C_Mem_Write+0x180>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	d017      	beq.n	8003778 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1aa      	bne.n	80036d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fa29 	bl	8003bdc <I2C_WaitOnBTFFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00d      	beq.n	80037ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	2b04      	cmp	r3, #4
 8003796:	d107      	bne.n	80037a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e016      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	00100002 	.word	0x00100002
 80037e8:	ffff0000 	.word	0xffff0000

080037ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	817b      	strh	r3, [r7, #10]
 80037fe:	460b      	mov	r3, r1
 8003800:	813b      	strh	r3, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2200      	movs	r2, #0
 800381e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f878 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383c:	d103      	bne.n	8003846 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003844:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e05f      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	492d      	ldr	r1, [pc, #180]	@ (8003914 <I2C_RequestMemoryWrite+0x128>)
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f8d3 	bl	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e04c      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003888:	6a39      	ldr	r1, [r7, #32]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f95e 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	2b04      	cmp	r3, #4
 800389c:	d107      	bne.n	80038ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e02b      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b8:	893b      	ldrh	r3, [r7, #8]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	e021      	b.n	8003908 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038c4:	893b      	ldrh	r3, [r7, #8]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d4:	6a39      	ldr	r1, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f938 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d107      	bne.n	80038fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e005      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038fe:	893b      	ldrh	r3, [r7, #8]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	00010002 	.word	0x00010002

08003918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003928:	e048      	b.n	80039bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d044      	beq.n	80039bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fe fa35 	bl	8001da0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d139      	bne.n	80039bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10d      	bne.n	800396e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	43da      	mvns	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	e00c      	b.n	8003988 <I2C_WaitOnFlagUntilTimeout+0x70>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	43da      	mvns	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4013      	ands	r3, r2
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	429a      	cmp	r2, r3
 800398c:	d116      	bne.n	80039bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e023      	b.n	8003a04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10d      	bne.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	43da      	mvns	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	e00c      	b.n	80039fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	43da      	mvns	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4013      	ands	r3, r2
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d093      	beq.n	800392a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a1a:	e071      	b.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a2a:	d123      	bne.n	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	f043 0204 	orr.w	r2, r3, #4
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e067      	b.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d041      	beq.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7c:	f7fe f990 	bl	8001da0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d302      	bcc.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d136      	bne.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10c      	bne.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e00b      	b.n	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	43da      	mvns	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e021      	b.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	0c1b      	lsrs	r3, r3, #16
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d10c      	bne.n	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	43da      	mvns	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4013      	ands	r3, r2
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf14      	ite	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	2300      	moveq	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e00b      	b.n	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf14      	ite	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	2300      	moveq	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f47f af6d 	bne.w	8003a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b58:	e034      	b.n	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f886 	bl	8003c6c <I2C_IsAcknowledgeFailed>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e034      	b.n	8003bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d028      	beq.n	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe f915 	bl	8001da0 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11d      	bne.n	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b92:	2b80      	cmp	r3, #128	@ 0x80
 8003b94:	d016      	beq.n	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e007      	b.n	8003bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b80      	cmp	r3, #128	@ 0x80
 8003bd0:	d1c3      	bne.n	8003b5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003be8:	e034      	b.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f83e 	bl	8003c6c <I2C_IsAcknowledgeFailed>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e034      	b.n	8003c64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d028      	beq.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7fe f8cd 	bl	8001da0 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11d      	bne.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d016      	beq.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	f043 0220 	orr.w	r2, r3, #32
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e007      	b.n	8003c64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d1c3      	bne.n	8003bea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c82:	d11b      	bne.n	8003cbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	f043 0204 	orr.w	r2, r3, #4
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cca:	b08b      	sub	sp, #44	@ 0x2c
 8003ccc:	af06      	add	r7, sp, #24
 8003cce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0f1      	b.n	8003ebe <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f008 f8ee 	bl	800bed0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f004 f813 	bl	8007d2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	687e      	ldr	r6, [r7, #4]
 8003d0e:	466d      	mov	r5, sp
 8003d10:	f106 0410 	add.w	r4, r6, #16
 8003d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	602b      	str	r3, [r5, #0]
 8003d1c:	1d33      	adds	r3, r6, #4
 8003d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d20:	6838      	ldr	r0, [r7, #0]
 8003d22:	f003 ffdd 	bl	8007ce0 <USB_CoreInit>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0c2      	b.n	8003ebe <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f004 f80e 	bl	8007d60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d44:	2300      	movs	r3, #0
 8003d46:	73fb      	strb	r3, [r7, #15]
 8003d48:	e040      	b.n	8003dcc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	440b      	add	r3, r1
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	440b      	add	r3, r1
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	3303      	adds	r3, #3
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d8a:	7bfa      	ldrb	r2, [r7, #15]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	440b      	add	r3, r1
 8003d98:	3338      	adds	r3, #56	@ 0x38
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d9e:	7bfa      	ldrb	r2, [r7, #15]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	440b      	add	r3, r1
 8003dac:	333c      	adds	r3, #60	@ 0x3c
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003db2:	7bfa      	ldrb	r2, [r7, #15]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3340      	adds	r3, #64	@ 0x40
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d3b9      	bcc.n	8003d4a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
 8003dda:	e044      	b.n	8003e66 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	440b      	add	r3, r1
 8003dea:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003df2:	7bfa      	ldrb	r2, [r7, #15]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	440b      	add	r3, r1
 8003e00:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	440b      	add	r3, r1
 8003e16:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e1e:	7bfa      	ldrb	r2, [r7, #15]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	440b      	add	r3, r1
 8003e42:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	440b      	add	r3, r1
 8003e58:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	3301      	adds	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	7bfa      	ldrb	r2, [r7, #15]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3b5      	bcc.n	8003ddc <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	687e      	ldr	r6, [r7, #4]
 8003e78:	466d      	mov	r5, sp
 8003e7a:	f106 0410 	add.w	r4, r6, #16
 8003e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	602b      	str	r3, [r5, #0]
 8003e86:	1d33      	adds	r3, r6, #4
 8003e88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e8a:	6838      	ldr	r0, [r7, #0]
 8003e8c:	f003 ff74 	bl	8007d78 <USB_DevInit>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e00d      	b.n	8003ebe <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f006 f9f5 	bl	800a2a6 <USB_DevDisconnect>

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ec6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_PCD_Start+0x16>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e016      	b.n	8003f0a <HAL_PCD_Start+0x44>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f003 ff09 	bl	8007d00 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003eee:	2101      	movs	r1, #1
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f008 fa60 	bl	800c3b6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f006 f9c9 	bl	800a292 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b088      	sub	sp, #32
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f006 f9cb 	bl	800a2ba <USB_ReadInterrupts>
 8003f24:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fb1b 	bl	800456c <PCD_EP_ISR_Handler>

    return;
 8003f36:	e119      	b.n	800416c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d013      	beq.n	8003f6a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f54:	b292      	uxth	r2, r2
 8003f56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f008 f833 	bl	800bfc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003f60:	2100      	movs	r1, #0
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f905 	bl	8004172 <HAL_PCD_SetAddress>

    return;
 8003f68:	e100      	b.n	800416c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00c      	beq.n	8003f8e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f86:	b292      	uxth	r2, r2
 8003f88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003f8c:	e0ee      	b.n	800416c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003faa:	b292      	uxth	r2, r2
 8003fac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003fb0:	e0dc      	b.n	800416c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d027      	beq.n	800400c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	b292      	uxth	r2, r2
 8003fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0208 	bic.w	r2, r2, #8
 8003fe6:	b292      	uxth	r2, r2
 8003fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f008 f823 	bl	800c038 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004004:	b292      	uxth	r2, r2
 8004006:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800400a:	e0af      	b.n	800416c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8083 	beq.w	800411e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8004018:	2300      	movs	r3, #0
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e010      	b.n	8004040 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	7ffb      	ldrb	r3, [r7, #31]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	441a      	add	r2, r3
 800402a:	7ffb      	ldrb	r3, [r7, #31]
 800402c:	8812      	ldrh	r2, [r2, #0]
 800402e:	b292      	uxth	r2, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	3320      	adds	r3, #32
 8004034:	443b      	add	r3, r7
 8004036:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800403a:	7ffb      	ldrb	r3, [r7, #31]
 800403c:	3301      	adds	r3, #1
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	7ffb      	ldrb	r3, [r7, #31]
 8004042:	2b07      	cmp	r3, #7
 8004044:	d9eb      	bls.n	800401e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800404e:	b29a      	uxth	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	b292      	uxth	r2, r2
 800405a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	b292      	uxth	r2, r2
 8004072:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004076:	bf00      	nop
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004080:	b29b      	uxth	r3, r3
 8004082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f6      	beq.n	8004078 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409c:	b292      	uxth	r2, r2
 800409e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e00f      	b.n	80040c8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80040a8:	7ffb      	ldrb	r3, [r7, #31]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	4611      	mov	r1, r2
 80040b0:	7ffa      	ldrb	r2, [r7, #31]
 80040b2:	0092      	lsls	r2, r2, #2
 80040b4:	440a      	add	r2, r1
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	3320      	adds	r3, #32
 80040ba:	443b      	add	r3, r7
 80040bc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80040c0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80040c2:	7ffb      	ldrb	r3, [r7, #31]
 80040c4:	3301      	adds	r3, #1
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	7ffb      	ldrb	r3, [r7, #31]
 80040ca:	2b07      	cmp	r3, #7
 80040cc:	d9ec      	bls.n	80040a8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0208 	orr.w	r2, r2, #8
 80040e0:	b292      	uxth	r2, r2
 80040e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040f8:	b292      	uxth	r2, r2
 80040fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004106:	b29a      	uxth	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0204 	orr.w	r2, r2, #4
 8004110:	b292      	uxth	r2, r2
 8004112:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f007 ff74 	bl	800c004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800411c:	e026      	b.n	800416c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00f      	beq.n	8004148 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800413a:	b292      	uxth	r2, r2
 800413c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f007 ff32 	bl	800bfaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004146:	e011      	b.n	800416c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00c      	beq.n	800416c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004164:	b292      	uxth	r2, r2
 8004166:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800416a:	bf00      	nop
  }
}
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_PCD_SetAddress+0x1a>
 8004188:	2302      	movs	r3, #2
 800418a:	e013      	b.n	80041b4 <HAL_PCD_SetAddress+0x42>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f006 f861 	bl	800a26c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	70fb      	strb	r3, [r7, #3]
 80041ce:	460b      	mov	r3, r1
 80041d0:	803b      	strh	r3, [r7, #0]
 80041d2:	4613      	mov	r3, r2
 80041d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	da0e      	bge.n	8004200 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	705a      	strb	r2, [r3, #1]
 80041fe:	e00e      	b.n	800421e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 0207 	and.w	r2, r3, #7
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800422a:	883a      	ldrh	r2, [r7, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	78ba      	ldrb	r2, [r7, #2]
 8004234:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004236:	78bb      	ldrb	r3, [r7, #2]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d102      	bne.n	8004242 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_PCD_EP_Open+0x94>
 800424c:	2302      	movs	r3, #2
 800424e:	e00e      	b.n	800426e <HAL_PCD_EP_Open+0xb2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	4618      	mov	r0, r3
 8004260:	f003 fdaa 	bl	8007db8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 800426c:	7afb      	ldrb	r3, [r7, #11]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004286:	2b00      	cmp	r3, #0
 8004288:	da0e      	bge.n	80042a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	705a      	strb	r2, [r3, #1]
 80042a6:	e00e      	b.n	80042c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 0207 	and.w	r2, r3, #7
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_PCD_EP_Close+0x6a>
 80042dc:	2302      	movs	r3, #2
 80042de:	e00e      	b.n	80042fe <HAL_PCD_EP_Close+0x88>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68f9      	ldr	r1, [r7, #12]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f004 f922 	bl	8008538 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	460b      	mov	r3, r1
 8004314:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004316:	7afb      	ldrb	r3, [r7, #11]
 8004318:	f003 0207 	and.w	r2, r3, #7
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004346:	7afb      	ldrb	r3, [r7, #11]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	b2da      	uxtb	r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6979      	ldr	r1, [r7, #20]
 8004358:	4618      	mov	r0, r3
 800435a:	f004 fad9 	bl	8008910 <USB_EPStartXfer>

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 0207 	and.w	r2, r3, #7
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	440b      	add	r3, r1
 8004386:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	460b      	mov	r3, r1
 80043a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a6:	7afb      	ldrb	r3, [r7, #11]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4413      	add	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2201      	movs	r2, #1
 80043e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6979      	ldr	r1, [r7, #20]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f004 fa8b 	bl	8008910 <USB_EPStartXfer>

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	f003 0207 	and.w	r2, r3, #7
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d901      	bls.n	8004422 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e04c      	b.n	80044bc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004422:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004426:	2b00      	cmp	r3, #0
 8004428:	da0e      	bge.n	8004448 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	4413      	add	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	705a      	strb	r2, [r3, #1]
 8004446:	e00c      	b.n	8004462 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4413      	add	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	b2da      	uxtb	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_PCD_EP_SetStall+0x7e>
 800447e:	2302      	movs	r3, #2
 8004480:	e01c      	b.n	80044bc <HAL_PCD_EP_SetStall+0xb8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	f005 fdee 	bl	800a072 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	2b00      	cmp	r3, #0
 800449e:	d108      	bne.n	80044b2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f005 ff13 	bl	800a2d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	f003 020f 	and.w	r2, r3, #15
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d901      	bls.n	80044e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e040      	b.n	8004564 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	da0e      	bge.n	8004508 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4413      	add	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	705a      	strb	r2, [r3, #1]
 8004506:	e00e      	b.n	8004526 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	f003 0207 	and.w	r2, r3, #7
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	b2da      	uxtb	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_PCD_EP_ClrStall+0x82>
 8004542:	2302      	movs	r3, #2
 8004544:	e00e      	b.n	8004564 <HAL_PCD_EP_ClrStall+0xa0>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68f9      	ldr	r1, [r7, #12]
 8004554:	4618      	mov	r0, r3
 8004556:	f005 fddc 	bl	800a112 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b096      	sub	sp, #88	@ 0x58
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004574:	e3be      	b.n	8004cf4 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800457e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004582:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004590:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004594:	2b00      	cmp	r3, #0
 8004596:	f040 8178 	bne.w	800488a <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800459a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d151      	bne.n	800464a <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80045b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b6:	81fb      	strh	r3, [r7, #14]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	89fb      	ldrh	r3, [r7, #14]
 80045be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3328      	adds	r3, #40	@ 0x28
 80045ce:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045d8:	b29b      	uxth	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	3302      	adds	r3, #2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80045fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	441a      	add	r2, r3
 8004606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004608:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800460a:	2100      	movs	r1, #0
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f007 fcb2 	bl	800bf76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 836a 	beq.w	8004cf4 <PCD_EP_ISR_Handler+0x788>
 8004620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f040 8365 	bne.w	8004cf4 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004636:	b2da      	uxtb	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004648:	e354      	b.n	8004cf4 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004650:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800465c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004664:	2b00      	cmp	r3, #0
 8004666:	d034      	beq.n	80046d2 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004670:	b29b      	uxth	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4413      	add	r3, r2
 800467c:	3306      	adds	r3, #6
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004692:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 800469e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80046a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f005 fe66 	bl	800a378 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80046b8:	4013      	ands	r3, r2
 80046ba:	823b      	strh	r3, [r7, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	8a3a      	ldrh	r2, [r7, #16]
 80046c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046c6:	b292      	uxth	r2, r2
 80046c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f007 fc26 	bl	800bf1c <HAL_PCD_SetupStageCallback>
 80046d0:	e310      	b.n	8004cf4 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046d2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f280 830c 	bge.w	8004cf4 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80046e8:	4013      	ands	r3, r2
 80046ea:	83fb      	strh	r3, [r7, #30]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	8bfa      	ldrh	r2, [r7, #30]
 80046f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046f6:	b292      	uxth	r2, r2
 80046f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4413      	add	r3, r2
 800470e:	3306      	adds	r3, #6
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004724:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d019      	beq.n	8004762 <PCD_EP_ISR_Handler+0x1f6>
 800472e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d015      	beq.n	8004762 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800473c:	6959      	ldr	r1, [r3, #20]
 800473e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004740:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004744:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004746:	b29b      	uxth	r3, r3
 8004748:	f005 fe16 	bl	800a378 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800474c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	441a      	add	r2, r3
 8004756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004758:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800475a:	2100      	movs	r1, #0
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f007 fbef 	bl	800bf40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800476c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004774:	2b00      	cmp	r3, #0
 8004776:	f040 82bd 	bne.w	8004cf4 <PCD_EP_ISR_Handler+0x788>
 800477a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800477e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004782:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004786:	f000 82b5 	beq.w	8004cf4 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004798:	b29b      	uxth	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	4413      	add	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b3e      	cmp	r3, #62	@ 0x3e
 80047c0:	d91d      	bls.n	80047fe <PCD_EP_ISR_Handler+0x292>
 80047c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <PCD_EP_ISR_Handler+0x270>
 80047d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047d8:	3b01      	subs	r3, #1
 80047da:	647b      	str	r3, [r7, #68]	@ 0x44
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	029b      	lsls	r3, r3, #10
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	4313      	orrs	r3, r2
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	801a      	strh	r2, [r3, #0]
 80047fc:	e026      	b.n	800484c <PCD_EP_ISR_Handler+0x2e0>
 80047fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <PCD_EP_ISR_Handler+0x2b0>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29b      	uxth	r3, r3
 800480c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004814:	b29a      	uxth	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	e017      	b.n	800484c <PCD_EP_ISR_Handler+0x2e0>
 800481c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	647b      	str	r3, [r7, #68]	@ 0x44
 8004824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <PCD_EP_ISR_Handler+0x2ca>
 8004830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004832:	3301      	adds	r3, #1
 8004834:	647b      	str	r3, [r7, #68]	@ 0x44
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29a      	uxth	r2, r3
 800483c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483e:	b29b      	uxth	r3, r3
 8004840:	029b      	lsls	r3, r3, #10
 8004842:	b29b      	uxth	r3, r3
 8004844:	4313      	orrs	r3, r2
 8004846:	b29a      	uxth	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485c:	827b      	strh	r3, [r7, #18]
 800485e:	8a7b      	ldrh	r3, [r7, #18]
 8004860:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004864:	827b      	strh	r3, [r7, #18]
 8004866:	8a7b      	ldrh	r3, [r7, #18]
 8004868:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800486c:	827b      	strh	r3, [r7, #18]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	8a7b      	ldrh	r3, [r7, #18]
 8004874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800487c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004884:	b29b      	uxth	r3, r3
 8004886:	8013      	strh	r3, [r2, #0]
 8004888:	e234      	b.n	8004cf4 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800489e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f280 80fc 	bge.w	8004aa0 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80048be:	4013      	ands	r3, r2
 80048c0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80048d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048da:	b292      	uxth	r2, r2
 80048dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80048de:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80048f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f6:	7b1b      	ldrb	r3, [r3, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d125      	bne.n	8004948 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004904:	b29b      	uxth	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4413      	add	r3, r2
 8004910:	3306      	adds	r3, #6
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004924:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004928:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8092 	beq.w	8004a56 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004938:	6959      	ldr	r1, [r3, #20]
 800493a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800493c:	88da      	ldrh	r2, [r3, #6]
 800493e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004942:	f005 fd19 	bl	800a378 <USB_ReadPMA>
 8004946:	e086      	b.n	8004a56 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494a:	78db      	ldrb	r3, [r3, #3]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d10a      	bne.n	8004966 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004950:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004954:	461a      	mov	r2, r3
 8004956:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f9d9 	bl	8004d10 <HAL_PCD_EP_DB_Receive>
 800495e:	4603      	mov	r3, r0
 8004960:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004964:	e077      	b.n	8004a56 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	b29b      	uxth	r3, r3
 8004978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800497c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004980:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800499a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800499e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d024      	beq.n	8004a0e <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	3302      	adds	r3, #2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80049f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d02e      	beq.n	8004a56 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fe:	6959      	ldr	r1, [r3, #20]
 8004a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a02:	891a      	ldrh	r2, [r3, #8]
 8004a04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a08:	f005 fcb6 	bl	800a378 <USB_ReadPMA>
 8004a0c:	e023      	b.n	8004a56 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	3306      	adds	r3, #6
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a36:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004a3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a48:	6959      	ldr	r1, [r3, #20]
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a4c:	895a      	ldrh	r2, [r3, #10]
 8004a4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a52:	f005 fc91 	bl	800a378 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a5e:	441a      	add	r2, r3
 8004a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a6c:	441a      	add	r2, r3
 8004a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a70:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <PCD_EP_ISR_Handler+0x51a>
 8004a7a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d206      	bcs.n	8004a94 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f007 fa57 	bl	800bf40 <HAL_PCD_DataOutStageCallback>
 8004a92:	e005      	b.n	8004aa0 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f003 ff38 	bl	8008910 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004aa0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8123 	beq.w	8004cf4 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8004aae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4413      	add	r3, r2
 8004ac0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004adc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b00:	78db      	ldrb	r3, [r3, #3]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	f040 80a2 	bne.w	8004c4c <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8004b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b10:	7b1b      	ldrb	r3, [r3, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8093 	beq.w	8004c3e <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d046      	beq.n	8004bb2 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d126      	bne.n	8004b7a <PCD_EP_ISR_Handler+0x60e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	4413      	add	r3, r2
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	011a      	lsls	r2, r3, #4
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	801a      	strh	r2, [r3, #0]
 8004b78:	e061      	b.n	8004c3e <PCD_EP_ISR_Handler+0x6d2>
 8004b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d15d      	bne.n	8004c3e <PCD_EP_ISR_Handler+0x6d2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b96:	4413      	add	r3, r2
 8004b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	011a      	lsls	r2, r3, #4
 8004ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bac:	2200      	movs	r2, #0
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	e045      	b.n	8004c3e <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d126      	bne.n	8004c0e <PCD_EP_ISR_Handler+0x6a2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd4:	4413      	add	r3, r2
 8004bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	011a      	lsls	r2, r3, #4
 8004bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be0:	4413      	add	r3, r2
 8004be2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004be6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	e017      	b.n	8004c3e <PCD_EP_ISR_Handler+0x6d2>
 8004c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c10:	785b      	ldrb	r3, [r3, #1]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d113      	bne.n	8004c3e <PCD_EP_ISR_Handler+0x6d2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c24:	4413      	add	r3, r2
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	011a      	lsls	r2, r3, #4
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c30:	4413      	add	r3, r2
 8004c32:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f007 f996 	bl	800bf76 <HAL_PCD_DataInStageCallback>
 8004c4a:	e053      	b.n	8004cf4 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004c4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d146      	bne.n	8004ce6 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c80:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d907      	bls.n	8004ca0 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8004c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c92:	699a      	ldr	r2, [r3, #24]
 8004c94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c98:	1ad2      	subs	r2, r2, r3
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c9c:	619a      	str	r2, [r3, #24]
 8004c9e:	e002      	b.n	8004ca6 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f007 f95e 	bl	800bf76 <HAL_PCD_DataInStageCallback>
 8004cba:	e01b      	b.n	8004cf4 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004cc4:	441a      	add	r2, r3
 8004cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cc8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004cd2:	441a      	add	r2, r3
 8004cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f003 fe16 	bl	8008910 <USB_EPStartXfer>
 8004ce4:	e006      	b.n	8004cf4 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004ce6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004cea:	461a      	mov	r2, r3
 8004cec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f91b 	bl	8004f2a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	b21b      	sxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f6ff ac38 	blt.w	8004576 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3758      	adds	r7, #88	@ 0x58
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d07e      	beq.n	8004e26 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	8b7b      	ldrh	r3, [r7, #26]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d306      	bcc.n	8004d6a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	699a      	ldr	r2, [r3, #24]
 8004d60:	8b7b      	ldrh	r3, [r7, #26]
 8004d62:	1ad2      	subs	r2, r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	619a      	str	r2, [r3, #24]
 8004d68:	e002      	b.n	8004d70 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d123      	bne.n	8004dc0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d92:	833b      	strh	r3, [r7, #24]
 8004d94:	8b3b      	ldrh	r3, [r7, #24]
 8004d96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d9a:	833b      	strh	r3, [r7, #24]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	8b3b      	ldrh	r3, [r7, #24]
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004dc0:	88fb      	ldrh	r3, [r7, #6]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01f      	beq.n	8004e0a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de4:	82fb      	strh	r3, [r7, #22]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	441a      	add	r2, r3
 8004df4:	8afb      	ldrh	r3, [r7, #22]
 8004df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e0a:	8b7b      	ldrh	r3, [r7, #26]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8087 	beq.w	8004f20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6959      	ldr	r1, [r3, #20]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	891a      	ldrh	r2, [r3, #8]
 8004e1e:	8b7b      	ldrh	r3, [r7, #26]
 8004e20:	f005 faaa 	bl	800a378 <USB_ReadPMA>
 8004e24:	e07c      	b.n	8004f20 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4413      	add	r3, r2
 8004e3a:	3306      	adds	r3, #6
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	8b7b      	ldrh	r3, [r7, #26]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d306      	bcc.n	8004e68 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	8b7b      	ldrh	r3, [r7, #26]
 8004e60:	1ad2      	subs	r2, r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	619a      	str	r2, [r3, #24]
 8004e66:	e002      	b.n	8004e6e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d123      	bne.n	8004ebe <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e90:	83fb      	strh	r3, [r7, #30]
 8004e92:	8bfb      	ldrh	r3, [r7, #30]
 8004e94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e98:	83fb      	strh	r3, [r7, #30]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	441a      	add	r2, r3
 8004ea8:	8bfb      	ldrh	r3, [r7, #30]
 8004eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d11f      	bne.n	8004f08 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee2:	83bb      	strh	r3, [r7, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	8bbb      	ldrh	r3, [r7, #28]
 8004ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f08:	8b7b      	ldrh	r3, [r7, #26]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6959      	ldr	r1, [r3, #20]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	895a      	ldrh	r2, [r3, #10]
 8004f1a:	8b7b      	ldrh	r3, [r7, #26]
 8004f1c:	f005 fa2c 	bl	800a378 <USB_ReadPMA>
    }
  }

  return count;
 8004f20:	8b7b      	ldrh	r3, [r7, #26]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b0a4      	sub	sp, #144	@ 0x90
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	4613      	mov	r3, r2
 8004f36:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 81dd 	beq.w	80052fe <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	3302      	adds	r3, #2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f6c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	699a      	ldr	r2, [r3, #24]
 8004f74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d907      	bls.n	8004f8c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f84:	1ad2      	subs	r2, r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	619a      	str	r2, [r3, #24]
 8004f8a:	e002      	b.n	8004f92 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 80b9 	bne.w	800510e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d126      	bne.n	8004ff2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb8:	4413      	add	r3, r2
 8004fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	011a      	lsls	r2, r3, #4
 8004fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	e01a      	b.n	8005028 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	785b      	ldrb	r3, [r3, #1]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d116      	bne.n	8005028 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005008:	b29b      	uxth	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500e:	4413      	add	r3, r2
 8005010:	637b      	str	r3, [r7, #52]	@ 0x34
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	011a      	lsls	r2, r3, #4
 8005018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501a:	4413      	add	r3, r2
 800501c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005020:	633b      	str	r3, [r7, #48]	@ 0x30
 8005022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005024:	2200      	movs	r2, #0
 8005026:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d126      	bne.n	8005084 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005044:	b29b      	uxth	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	4413      	add	r3, r2
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	011a      	lsls	r2, r3, #4
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	4413      	add	r3, r2
 8005058:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005068:	b29a      	uxth	r2, r3
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507c:	b29a      	uxth	r2, r3
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	e017      	b.n	80050b4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d113      	bne.n	80050b4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005094:	b29b      	uxth	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	4413      	add	r3, r2
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	011a      	lsls	r2, r3, #4
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	4413      	add	r3, r2
 80050a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050ac:	623b      	str	r3, [r7, #32]
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	2200      	movs	r2, #0
 80050b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f006 ff5b 	bl	800bf76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 82fc 	beq.w	80056c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e6:	82fb      	strh	r3, [r7, #22]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	8afb      	ldrh	r3, [r7, #22]
 80050f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005100:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005108:	b29b      	uxth	r3, r3
 800510a:	8013      	strh	r3, [r2, #0]
 800510c:	e2da      	b.n	80056c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d021      	beq.n	800515c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800512e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005132:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800514c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005158:	b29b      	uxth	r3, r3
 800515a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005162:	2b01      	cmp	r3, #1
 8005164:	f040 82ae 	bne.w	80056c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005170:	441a      	add	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800517e:	441a      	add	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	429a      	cmp	r2, r3
 800518e:	d30b      	bcc.n	80051a8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051a0:	1ad2      	subs	r2, r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	621a      	str	r2, [r3, #32]
 80051a6:	e017      	b.n	80051d8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d108      	bne.n	80051c2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80051b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80051b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80051c0:	e00a      	b.n	80051d8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2200      	movs	r2, #0
 80051d6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d165      	bne.n	80052ac <HAL_PCD_EP_DB_Transmit+0x382>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f4:	4413      	add	r3, r2
 80051f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	011a      	lsls	r2, r3, #4
 80051fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005200:	4413      	add	r3, r2
 8005202:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005212:	b29a      	uxth	r2, r3
 8005214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800521c:	2b3e      	cmp	r3, #62	@ 0x3e
 800521e:	d91d      	bls.n	800525c <HAL_PCD_EP_DB_Transmit+0x332>
 8005220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005228:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <HAL_PCD_EP_DB_Transmit+0x310>
 8005234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005236:	3b01      	subs	r3, #1
 8005238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29a      	uxth	r2, r3
 8005240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005242:	b29b      	uxth	r3, r3
 8005244:	029b      	lsls	r3, r3, #10
 8005246:	b29b      	uxth	r3, r3
 8005248:	4313      	orrs	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005254:	b29a      	uxth	r2, r3
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	e044      	b.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800525c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <HAL_PCD_EP_DB_Transmit+0x350>
 8005264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005272:	b29a      	uxth	r2, r3
 8005274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005276:	801a      	strh	r2, [r3, #0]
 8005278:	e035      	b.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800527a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800527e:	085b      	lsrs	r3, r3, #1
 8005280:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_PCD_EP_DB_Transmit+0x36a>
 800528e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005290:	3301      	adds	r3, #1
 8005292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29a      	uxth	r2, r3
 800529a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800529c:	b29b      	uxth	r3, r3
 800529e:	029b      	lsls	r3, r3, #10
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	4313      	orrs	r3, r2
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a8:	801a      	strh	r2, [r3, #0]
 80052aa:	e01c      	b.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d118      	bne.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c8:	4413      	add	r3, r2
 80052ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	011a      	lsls	r2, r3, #4
 80052d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052d4:	4413      	add	r3, r2
 80052d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052da:	643b      	str	r3, [r7, #64]	@ 0x40
 80052dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6959      	ldr	r1, [r3, #20]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	891a      	ldrh	r2, [r3, #8]
 80052f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f004 fff9 	bl	800a2ee <USB_WritePMA>
 80052fc:	e1e2      	b.n	80056c4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	3306      	adds	r3, #6
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005326:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005332:	429a      	cmp	r2, r3
 8005334:	d307      	bcc.n	8005346 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	619a      	str	r2, [r3, #24]
 8005344:	e002      	b.n	800534c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2200      	movs	r2, #0
 800534a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	f040 80c0 	bne.w	80054d6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d126      	bne.n	80053ac <HAL_PCD_EP_DB_Transmit+0x482>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800536c:	b29b      	uxth	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005372:	4413      	add	r3, r2
 8005374:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	011a      	lsls	r2, r3, #4
 800537c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800537e:	4413      	add	r3, r2
 8005380:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005390:	b29a      	uxth	r2, r3
 8005392:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005394:	801a      	strh	r2, [r3, #0]
 8005396:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	e01a      	b.n	80053e2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d116      	bne.n	80053e2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053c8:	4413      	add	r3, r2
 80053ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	011a      	lsls	r2, r3, #4
 80053d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053d4:	4413      	add	r3, r2
 80053d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053da:	663b      	str	r3, [r7, #96]	@ 0x60
 80053dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053de:	2200      	movs	r2, #0
 80053e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d12b      	bne.n	8005448 <HAL_PCD_EP_DB_Transmit+0x51e>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053fe:	b29b      	uxth	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005404:	4413      	add	r3, r2
 8005406:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	011a      	lsls	r2, r3, #4
 800540e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005410:	4413      	add	r3, r2
 8005412:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005416:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800541a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005426:	b29a      	uxth	r2, r3
 8005428:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800543a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543e:	b29a      	uxth	r2, r3
 8005440:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	e017      	b.n	8005478 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d113      	bne.n	8005478 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005458:	b29b      	uxth	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800545e:	4413      	add	r3, r2
 8005460:	677b      	str	r3, [r7, #116]	@ 0x74
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	011a      	lsls	r2, r3, #4
 8005468:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800546a:	4413      	add	r3, r2
 800546c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005470:	673b      	str	r3, [r7, #112]	@ 0x70
 8005472:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005474:	2200      	movs	r2, #0
 8005476:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	4619      	mov	r1, r3
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f006 fd79 	bl	800bf76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800548a:	2b00      	cmp	r3, #0
 800548c:	f040 811a 	bne.w	80056c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054aa:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	441a      	add	r2, r3
 80054bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80054c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	8013      	strh	r3, [r2, #0]
 80054d4:	e0f6      	b.n	80056c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d121      	bne.n	8005524 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005518:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800551c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800552a:	2b01      	cmp	r3, #1
 800552c:	f040 80ca 	bne.w	80056c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	695a      	ldr	r2, [r3, #20]
 8005534:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005538:	441a      	add	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	69da      	ldr	r2, [r3, #28]
 8005542:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005546:	441a      	add	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6a1a      	ldr	r2, [r3, #32]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	429a      	cmp	r2, r3
 8005556:	d30b      	bcc.n	8005570 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	6a1a      	ldr	r2, [r3, #32]
 8005564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005568:	1ad2      	subs	r2, r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	621a      	str	r2, [r3, #32]
 800556e:	e017      	b.n	80055a0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d108      	bne.n	800558a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005578:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800557c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005588:	e00a      	b.n	80055a0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d165      	bne.n	800567a <HAL_PCD_EP_DB_Transmit+0x750>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055bc:	b29b      	uxth	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055c2:	4413      	add	r3, r2
 80055c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	011a      	lsls	r2, r3, #4
 80055cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055ce:	4413      	add	r3, r2
 80055d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80055ec:	d91d      	bls.n	800562a <HAL_PCD_EP_DB_Transmit+0x700>
 80055ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <HAL_PCD_EP_DB_Transmit+0x6de>
 8005602:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005604:	3b01      	subs	r3, #1
 8005606:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005608:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29a      	uxth	r2, r3
 800560e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005610:	b29b      	uxth	r3, r3
 8005612:	029b      	lsls	r3, r3, #10
 8005614:	b29b      	uxth	r3, r3
 8005616:	4313      	orrs	r3, r2
 8005618:	b29b      	uxth	r3, r3
 800561a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005622:	b29a      	uxth	r2, r3
 8005624:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	e041      	b.n	80056ae <HAL_PCD_EP_DB_Transmit+0x784>
 800562a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <HAL_PCD_EP_DB_Transmit+0x71e>
 8005632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005640:	b29a      	uxth	r2, r3
 8005642:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e032      	b.n	80056ae <HAL_PCD_EP_DB_Transmit+0x784>
 8005648:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_PCD_EP_DB_Transmit+0x738>
 800565c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800565e:	3301      	adds	r3, #1
 8005660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005662:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29a      	uxth	r2, r3
 8005668:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800566a:	b29b      	uxth	r3, r3
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	b29b      	uxth	r3, r3
 8005670:	4313      	orrs	r3, r2
 8005672:	b29a      	uxth	r2, r3
 8005674:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	e019      	b.n	80056ae <HAL_PCD_EP_DB_Transmit+0x784>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d115      	bne.n	80056ae <HAL_PCD_EP_DB_Transmit+0x784>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800568a:	b29b      	uxth	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005690:	4413      	add	r3, r2
 8005692:	657b      	str	r3, [r7, #84]	@ 0x54
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	011a      	lsls	r2, r3, #4
 800569a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800569c:	4413      	add	r3, r2
 800569e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056ac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6959      	ldr	r1, [r3, #20]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	895a      	ldrh	r2, [r3, #10]
 80056ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f004 fe15 	bl	800a2ee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056de:	82bb      	strh	r3, [r7, #20]
 80056e0:	8abb      	ldrh	r3, [r7, #20]
 80056e2:	f083 0310 	eor.w	r3, r3, #16
 80056e6:	82bb      	strh	r3, [r7, #20]
 80056e8:	8abb      	ldrh	r3, [r7, #20]
 80056ea:	f083 0320 	eor.w	r3, r3, #32
 80056ee:	82bb      	strh	r3, [r7, #20]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	8abb      	ldrh	r3, [r7, #20]
 8005700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800570c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005710:	b29b      	uxth	r3, r3
 8005712:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3790      	adds	r7, #144	@ 0x90
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800571e:	b480      	push	{r7}
 8005720:	b087      	sub	sp, #28
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	817b      	strh	r3, [r7, #10]
 800572c:	4613      	mov	r3, r2
 800572e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005730:	897b      	ldrh	r3, [r7, #10]
 8005732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800573c:	897b      	ldrh	r3, [r7, #10]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	e009      	b.n	8005768 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005754:	897a      	ldrh	r2, [r7, #10]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005768:	893b      	ldrh	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d107      	bne.n	800577e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2200      	movs	r2, #0
 8005772:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	b29a      	uxth	r2, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	80da      	strh	r2, [r3, #6]
 800577c:	e00b      	b.n	8005796 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2201      	movs	r2, #1
 8005782:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	b29a      	uxth	r2, r3
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	0c1b      	lsrs	r3, r3, #16
 8005790:	b29a      	uxth	r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr
	...

080057a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e272      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 8087 	beq.w	80058d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057c4:	4b92      	ldr	r3, [pc, #584]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d00c      	beq.n	80057ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057d0:	4b8f      	ldr	r3, [pc, #572]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f003 030c 	and.w	r3, r3, #12
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d112      	bne.n	8005802 <HAL_RCC_OscConfig+0x5e>
 80057dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e8:	d10b      	bne.n	8005802 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ea:	4b89      	ldr	r3, [pc, #548]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d06c      	beq.n	80058d0 <HAL_RCC_OscConfig+0x12c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d168      	bne.n	80058d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e24c      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800580a:	d106      	bne.n	800581a <HAL_RCC_OscConfig+0x76>
 800580c:	4b80      	ldr	r3, [pc, #512]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a7f      	ldr	r2, [pc, #508]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	e02e      	b.n	8005878 <HAL_RCC_OscConfig+0xd4>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10c      	bne.n	800583c <HAL_RCC_OscConfig+0x98>
 8005822:	4b7b      	ldr	r3, [pc, #492]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a7a      	ldr	r2, [pc, #488]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	4b78      	ldr	r3, [pc, #480]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a77      	ldr	r2, [pc, #476]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e01d      	b.n	8005878 <HAL_RCC_OscConfig+0xd4>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005844:	d10c      	bne.n	8005860 <HAL_RCC_OscConfig+0xbc>
 8005846:	4b72      	ldr	r3, [pc, #456]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a71      	ldr	r2, [pc, #452]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 800584c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4b6f      	ldr	r3, [pc, #444]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a6e      	ldr	r2, [pc, #440]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e00b      	b.n	8005878 <HAL_RCC_OscConfig+0xd4>
 8005860:	4b6b      	ldr	r3, [pc, #428]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a6a      	ldr	r2, [pc, #424]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	4b68      	ldr	r3, [pc, #416]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a67      	ldr	r2, [pc, #412]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005876:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d013      	beq.n	80058a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005880:	f7fc fa8e 	bl	8001da0 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005888:	f7fc fa8a 	bl	8001da0 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	@ 0x64
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e200      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589a:	4b5d      	ldr	r3, [pc, #372]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0xe4>
 80058a6:	e014      	b.n	80058d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a8:	f7fc fa7a 	bl	8001da0 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b0:	f7fc fa76 	bl	8001da0 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b64      	cmp	r3, #100	@ 0x64
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e1ec      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058c2:	4b53      	ldr	r3, [pc, #332]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f0      	bne.n	80058b0 <HAL_RCC_OscConfig+0x10c>
 80058ce:	e000      	b.n	80058d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d063      	beq.n	80059a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058de:	4b4c      	ldr	r3, [pc, #304]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f003 030c 	and.w	r3, r3, #12
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058ea:	4b49      	ldr	r3, [pc, #292]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f003 030c 	and.w	r3, r3, #12
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d11c      	bne.n	8005930 <HAL_RCC_OscConfig+0x18c>
 80058f6:	4b46      	ldr	r3, [pc, #280]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d116      	bne.n	8005930 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005902:	4b43      	ldr	r3, [pc, #268]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_RCC_OscConfig+0x176>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d001      	beq.n	800591a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e1c0      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4939      	ldr	r1, [pc, #228]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 800592a:	4313      	orrs	r3, r2
 800592c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800592e:	e03a      	b.n	80059a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d020      	beq.n	800597a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005938:	4b36      	ldr	r3, [pc, #216]	@ (8005a14 <HAL_RCC_OscConfig+0x270>)
 800593a:	2201      	movs	r2, #1
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fc fa2f 	bl	8001da0 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005946:	f7fc fa2b 	bl	8001da0 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e1a1      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005958:	4b2d      	ldr	r3, [pc, #180]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f0      	beq.n	8005946 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005964:	4b2a      	ldr	r3, [pc, #168]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4927      	ldr	r1, [pc, #156]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 8005974:	4313      	orrs	r3, r2
 8005976:	600b      	str	r3, [r1, #0]
 8005978:	e015      	b.n	80059a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597a:	4b26      	ldr	r3, [pc, #152]	@ (8005a14 <HAL_RCC_OscConfig+0x270>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fc fa0e 	bl	8001da0 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005988:	f7fc fa0a 	bl	8001da0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e180      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d03a      	beq.n	8005a28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d019      	beq.n	80059ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ba:	4b17      	ldr	r3, [pc, #92]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80059bc:	2201      	movs	r2, #1
 80059be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059c0:	f7fc f9ee 	bl	8001da0 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c8:	f7fc f9ea 	bl	8001da0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e160      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059da:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <HAL_RCC_OscConfig+0x26c>)
 80059dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80059e6:	2001      	movs	r0, #1
 80059e8:	f000 face 	bl	8005f88 <RCC_Delay>
 80059ec:	e01c      	b.n	8005a28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005a18 <HAL_RCC_OscConfig+0x274>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f4:	f7fc f9d4 	bl	8001da0 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059fa:	e00f      	b.n	8005a1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059fc:	f7fc f9d0 	bl	8001da0 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d908      	bls.n	8005a1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e146      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000
 8005a14:	42420000 	.word	0x42420000
 8005a18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a1c:	4b92      	ldr	r3, [pc, #584]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e9      	bne.n	80059fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80a6 	beq.w	8005b82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a36:	2300      	movs	r3, #0
 8005a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a46:	4b88      	ldr	r3, [pc, #544]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	4a87      	ldr	r2, [pc, #540]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a50:	61d3      	str	r3, [r2, #28]
 8005a52:	4b85      	ldr	r3, [pc, #532]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a5a:	60bb      	str	r3, [r7, #8]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a62:	4b82      	ldr	r3, [pc, #520]	@ (8005c6c <HAL_RCC_OscConfig+0x4c8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d118      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c6c <HAL_RCC_OscConfig+0x4c8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a7e      	ldr	r2, [pc, #504]	@ (8005c6c <HAL_RCC_OscConfig+0x4c8>)
 8005a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a7a:	f7fc f991 	bl	8001da0 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a82:	f7fc f98d 	bl	8001da0 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b64      	cmp	r3, #100	@ 0x64
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e103      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a94:	4b75      	ldr	r3, [pc, #468]	@ (8005c6c <HAL_RCC_OscConfig+0x4c8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x312>
 8005aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	4a6e      	ldr	r2, [pc, #440]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	6213      	str	r3, [r2, #32]
 8005ab4:	e02d      	b.n	8005b12 <HAL_RCC_OscConfig+0x36e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x334>
 8005abe:	4b6a      	ldr	r3, [pc, #424]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	4a69      	ldr	r2, [pc, #420]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	6213      	str	r3, [r2, #32]
 8005aca:	4b67      	ldr	r3, [pc, #412]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	4a66      	ldr	r2, [pc, #408]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005ad0:	f023 0304 	bic.w	r3, r3, #4
 8005ad4:	6213      	str	r3, [r2, #32]
 8005ad6:	e01c      	b.n	8005b12 <HAL_RCC_OscConfig+0x36e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2b05      	cmp	r3, #5
 8005ade:	d10c      	bne.n	8005afa <HAL_RCC_OscConfig+0x356>
 8005ae0:	4b61      	ldr	r3, [pc, #388]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	4a60      	ldr	r2, [pc, #384]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005ae6:	f043 0304 	orr.w	r3, r3, #4
 8005aea:	6213      	str	r3, [r2, #32]
 8005aec:	4b5e      	ldr	r3, [pc, #376]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	4a5d      	ldr	r2, [pc, #372]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	6213      	str	r3, [r2, #32]
 8005af8:	e00b      	b.n	8005b12 <HAL_RCC_OscConfig+0x36e>
 8005afa:	4b5b      	ldr	r3, [pc, #364]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	4a5a      	ldr	r2, [pc, #360]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005b00:	f023 0301 	bic.w	r3, r3, #1
 8005b04:	6213      	str	r3, [r2, #32]
 8005b06:	4b58      	ldr	r3, [pc, #352]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	4a57      	ldr	r2, [pc, #348]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005b0c:	f023 0304 	bic.w	r3, r3, #4
 8005b10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d015      	beq.n	8005b46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b1a:	f7fc f941 	bl	8001da0 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b20:	e00a      	b.n	8005b38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b22:	f7fc f93d 	bl	8001da0 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e0b1      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b38:	4b4b      	ldr	r3, [pc, #300]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0ee      	beq.n	8005b22 <HAL_RCC_OscConfig+0x37e>
 8005b44:	e014      	b.n	8005b70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b46:	f7fc f92b 	bl	8001da0 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4c:	e00a      	b.n	8005b64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b4e:	f7fc f927 	bl	8001da0 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e09b      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b64:	4b40      	ldr	r3, [pc, #256]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1ee      	bne.n	8005b4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d105      	bne.n	8005b82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b76:	4b3c      	ldr	r3, [pc, #240]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 8087 	beq.w	8005c9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b8c:	4b36      	ldr	r3, [pc, #216]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f003 030c 	and.w	r3, r3, #12
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d061      	beq.n	8005c5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d146      	bne.n	8005c2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba0:	4b33      	ldr	r3, [pc, #204]	@ (8005c70 <HAL_RCC_OscConfig+0x4cc>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba6:	f7fc f8fb 	bl	8001da0 <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bae:	f7fc f8f7 	bl	8001da0 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e06d      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bc0:	4b29      	ldr	r3, [pc, #164]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f0      	bne.n	8005bae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd4:	d108      	bne.n	8005be8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005bd6:	4b24      	ldr	r3, [pc, #144]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4921      	ldr	r1, [pc, #132]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005be8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a19      	ldr	r1, [r3, #32]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	491b      	ldr	r1, [pc, #108]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c00:	4b1b      	ldr	r3, [pc, #108]	@ (8005c70 <HAL_RCC_OscConfig+0x4cc>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c06:	f7fc f8cb 	bl	8001da0 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0e:	f7fc f8c7 	bl	8001da0 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e03d      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c20:	4b11      	ldr	r3, [pc, #68]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0f0      	beq.n	8005c0e <HAL_RCC_OscConfig+0x46a>
 8005c2c:	e035      	b.n	8005c9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2e:	4b10      	ldr	r3, [pc, #64]	@ (8005c70 <HAL_RCC_OscConfig+0x4cc>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c34:	f7fc f8b4 	bl	8001da0 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3c:	f7fc f8b0 	bl	8001da0 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e026      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c4e:	4b06      	ldr	r3, [pc, #24]	@ (8005c68 <HAL_RCC_OscConfig+0x4c4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x498>
 8005c5a:	e01e      	b.n	8005c9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d107      	bne.n	8005c74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e019      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	40007000 	.word	0x40007000
 8005c70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca4 <HAL_RCC_OscConfig+0x500>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d106      	bne.n	8005c96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d001      	beq.n	8005c9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40021000 	.word	0x40021000

08005ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0d0      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d910      	bls.n	8005cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cca:	4b67      	ldr	r3, [pc, #412]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f023 0207 	bic.w	r2, r3, #7
 8005cd2:	4965      	ldr	r1, [pc, #404]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c0>)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cda:	4b63      	ldr	r3, [pc, #396]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d001      	beq.n	8005cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0b8      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d020      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d04:	4b59      	ldr	r3, [pc, #356]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4a58      	ldr	r2, [pc, #352]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d1c:	4b53      	ldr	r3, [pc, #332]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	4a52      	ldr	r2, [pc, #328]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d28:	4b50      	ldr	r3, [pc, #320]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	494d      	ldr	r1, [pc, #308]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d040      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4e:	4b47      	ldr	r3, [pc, #284]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d115      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e07f      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d107      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d66:	4b41      	ldr	r3, [pc, #260]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d109      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e073      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d76:	4b3d      	ldr	r3, [pc, #244]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e06b      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d86:	4b39      	ldr	r3, [pc, #228]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f023 0203 	bic.w	r2, r3, #3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	4936      	ldr	r1, [pc, #216]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d98:	f7fc f802 	bl	8001da0 <HAL_GetTick>
 8005d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9e:	e00a      	b.n	8005db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da0:	f7fb fffe 	bl	8001da0 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e053      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db6:	4b2d      	ldr	r3, [pc, #180]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 020c 	and.w	r2, r3, #12
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d1eb      	bne.n	8005da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc8:	4b27      	ldr	r3, [pc, #156]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d210      	bcs.n	8005df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd6:	4b24      	ldr	r3, [pc, #144]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 0207 	bic.w	r2, r3, #7
 8005dde:	4922      	ldr	r1, [pc, #136]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c0>)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de6:	4b20      	ldr	r3, [pc, #128]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e032      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e04:	4b19      	ldr	r3, [pc, #100]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4916      	ldr	r1, [pc, #88]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e22:	4b12      	ldr	r3, [pc, #72]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	490e      	ldr	r1, [pc, #56]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e36:	f000 f821 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c4>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	091b      	lsrs	r3, r3, #4
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	490a      	ldr	r1, [pc, #40]	@ (8005e70 <HAL_RCC_ClockConfig+0x1c8>)
 8005e48:	5ccb      	ldrb	r3, [r1, r3]
 8005e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4e:	4a09      	ldr	r2, [pc, #36]	@ (8005e74 <HAL_RCC_ClockConfig+0x1cc>)
 8005e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e52:	4b09      	ldr	r3, [pc, #36]	@ (8005e78 <HAL_RCC_ClockConfig+0x1d0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fb ff60 	bl	8001d1c <HAL_InitTick>

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40022000 	.word	0x40022000
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	0800fc78 	.word	0x0800fc78
 8005e74:	200000fc 	.word	0x200000fc
 8005e78:	20000100 	.word	0x20000100

08005e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e96:	4b1e      	ldr	r3, [pc, #120]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d002      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0x30>
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x36>
 8005eaa:	e027      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005eac:	4b19      	ldr	r3, [pc, #100]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8005eae:	613b      	str	r3, [r7, #16]
      break;
 8005eb0:	e027      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	0c9b      	lsrs	r3, r3, #18
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	4a17      	ldr	r2, [pc, #92]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ebc:	5cd3      	ldrb	r3, [r2, r3]
 8005ebe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d010      	beq.n	8005eec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005eca:	4b11      	ldr	r3, [pc, #68]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	0c5b      	lsrs	r3, r3, #17
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	4a11      	ldr	r2, [pc, #68]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ed6:	5cd3      	ldrb	r3, [r2, r3]
 8005ed8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a0d      	ldr	r2, [pc, #52]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ede:	fb03 f202 	mul.w	r2, r3, r2
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	e004      	b.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a0c      	ldr	r2, [pc, #48]	@ (8005f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	613b      	str	r3, [r7, #16]
      break;
 8005efa:	e002      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8005efe:	613b      	str	r3, [r7, #16]
      break;
 8005f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f02:	693b      	ldr	r3, [r7, #16]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40021000 	.word	0x40021000
 8005f14:	007a1200 	.word	0x007a1200
 8005f18:	0800fc90 	.word	0x0800fc90
 8005f1c:	0800fca0 	.word	0x0800fca0
 8005f20:	003d0900 	.word	0x003d0900

08005f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f28:	4b02      	ldr	r3, [pc, #8]	@ (8005f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr
 8005f34:	200000fc 	.word	0x200000fc

08005f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f3c:	f7ff fff2 	bl	8005f24 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4903      	ldr	r1, [pc, #12]	@ (8005f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	0800fc88 	.word	0x0800fc88

08005f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f64:	f7ff ffde 	bl	8005f24 <HAL_RCC_GetHCLKFreq>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	4b05      	ldr	r3, [pc, #20]	@ (8005f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	0adb      	lsrs	r3, r3, #11
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	4903      	ldr	r1, [pc, #12]	@ (8005f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f76:	5ccb      	ldrb	r3, [r1, r3]
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40021000 	.word	0x40021000
 8005f84:	0800fc88 	.word	0x0800fc88

08005f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f90:	4b0a      	ldr	r3, [pc, #40]	@ (8005fbc <RCC_Delay+0x34>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a0a      	ldr	r2, [pc, #40]	@ (8005fc0 <RCC_Delay+0x38>)
 8005f96:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9a:	0a5b      	lsrs	r3, r3, #9
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005fa4:	bf00      	nop
  }
  while (Delay --);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	1e5a      	subs	r2, r3, #1
 8005faa:	60fa      	str	r2, [r7, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1f9      	bne.n	8005fa4 <RCC_Delay+0x1c>
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr
 8005fbc:	200000fc 	.word	0x200000fc
 8005fc0:	10624dd3 	.word	0x10624dd3

08005fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d07d      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10d      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ffa:	61d3      	str	r3, [r2, #28]
 8005ffc:	4b49      	ldr	r3, [pc, #292]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006008:	2301      	movs	r3, #1
 800600a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600c:	4b46      	ldr	r3, [pc, #280]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d118      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006018:	4b43      	ldr	r3, [pc, #268]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a42      	ldr	r2, [pc, #264]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800601e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006024:	f7fb febc 	bl	8001da0 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602a:	e008      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800602c:	f7fb feb8 	bl	8001da0 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	@ 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e06d      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603e:	4b3a      	ldr	r3, [pc, #232]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800604a:	4b36      	ldr	r3, [pc, #216]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006052:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d02e      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	429a      	cmp	r2, r3
 8006066:	d027      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006068:	4b2e      	ldr	r3, [pc, #184]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006070:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006072:	4b2e      	ldr	r3, [pc, #184]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006074:	2201      	movs	r2, #1
 8006076:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006078:	4b2c      	ldr	r3, [pc, #176]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800607e:	4a29      	ldr	r2, [pc, #164]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d014      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608e:	f7fb fe87 	bl	8001da0 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006094:	e00a      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006096:	f7fb fe83 	bl	8001da0 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d901      	bls.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e036      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ee      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	4917      	ldr	r1, [pc, #92]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060ca:	7dfb      	ldrb	r3, [r7, #23]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d105      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d0:	4b14      	ldr	r3, [pc, #80]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	4a13      	ldr	r2, [pc, #76]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d008      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	490b      	ldr	r1, [pc, #44]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006106:	4b07      	ldr	r3, [pc, #28]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	4904      	ldr	r1, [pc, #16]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006114:	4313      	orrs	r3, r2
 8006116:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40021000 	.word	0x40021000
 8006128:	40007000 	.word	0x40007000
 800612c:	42420440 	.word	0x42420440

08006130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e041      	b.n	80061c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fb fb84 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f000 fafc 	bl	800676c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d001      	beq.n	80061e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e032      	b.n	800624e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a18      	ldr	r2, [pc, #96]	@ (8006258 <HAL_TIM_Base_Start+0x88>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00e      	beq.n	8006218 <HAL_TIM_Base_Start+0x48>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006202:	d009      	beq.n	8006218 <HAL_TIM_Base_Start+0x48>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a14      	ldr	r2, [pc, #80]	@ (800625c <HAL_TIM_Base_Start+0x8c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_TIM_Base_Start+0x48>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a13      	ldr	r2, [pc, #76]	@ (8006260 <HAL_TIM_Base_Start+0x90>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d111      	bne.n	800623c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b06      	cmp	r3, #6
 8006228:	d010      	beq.n	800624c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623a:	e007      	b.n	800624c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	40012c00 	.word	0x40012c00
 800625c:	40000400 	.word	0x40000400
 8006260:	40000800 	.word	0x40000800

08006264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e041      	b.n	80062fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f839 	bl	8006302 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3304      	adds	r3, #4
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f000 fa62 	bl	800676c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr

08006314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <HAL_TIM_PWM_Start+0x24>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	bf14      	ite	ne
 8006330:	2301      	movne	r3, #1
 8006332:	2300      	moveq	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	e022      	b.n	800637e <HAL_TIM_PWM_Start+0x6a>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b04      	cmp	r3, #4
 800633c:	d109      	bne.n	8006352 <HAL_TIM_PWM_Start+0x3e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	bf14      	ite	ne
 800634a:	2301      	movne	r3, #1
 800634c:	2300      	moveq	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	e015      	b.n	800637e <HAL_TIM_PWM_Start+0x6a>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b08      	cmp	r3, #8
 8006356:	d109      	bne.n	800636c <HAL_TIM_PWM_Start+0x58>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e008      	b.n	800637e <HAL_TIM_PWM_Start+0x6a>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e05e      	b.n	8006444 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d104      	bne.n	8006396 <HAL_TIM_PWM_Start+0x82>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006394:	e013      	b.n	80063be <HAL_TIM_PWM_Start+0xaa>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b04      	cmp	r3, #4
 800639a:	d104      	bne.n	80063a6 <HAL_TIM_PWM_Start+0x92>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063a4:	e00b      	b.n	80063be <HAL_TIM_PWM_Start+0xaa>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d104      	bne.n	80063b6 <HAL_TIM_PWM_Start+0xa2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063b4:	e003      	b.n	80063be <HAL_TIM_PWM_Start+0xaa>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2201      	movs	r2, #1
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fc50 	bl	8006c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1e      	ldr	r2, [pc, #120]	@ (800644c <HAL_TIM_PWM_Start+0x138>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d107      	bne.n	80063e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a18      	ldr	r2, [pc, #96]	@ (800644c <HAL_TIM_PWM_Start+0x138>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00e      	beq.n	800640e <HAL_TIM_PWM_Start+0xfa>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f8:	d009      	beq.n	800640e <HAL_TIM_PWM_Start+0xfa>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a14      	ldr	r2, [pc, #80]	@ (8006450 <HAL_TIM_PWM_Start+0x13c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <HAL_TIM_PWM_Start+0xfa>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a12      	ldr	r2, [pc, #72]	@ (8006454 <HAL_TIM_PWM_Start+0x140>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d111      	bne.n	8006432 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b06      	cmp	r3, #6
 800641e:	d010      	beq.n	8006442 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006430:	e007      	b.n	8006442 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0201 	orr.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800

08006458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006472:	2302      	movs	r3, #2
 8006474:	e0ae      	b.n	80065d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	f200 809f 	bhi.w	80065c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080065c5 	.word	0x080065c5
 8006494:	080065c5 	.word	0x080065c5
 8006498:	080065c5 	.word	0x080065c5
 800649c:	08006501 	.word	0x08006501
 80064a0:	080065c5 	.word	0x080065c5
 80064a4:	080065c5 	.word	0x080065c5
 80064a8:	080065c5 	.word	0x080065c5
 80064ac:	08006543 	.word	0x08006543
 80064b0:	080065c5 	.word	0x080065c5
 80064b4:	080065c5 	.word	0x080065c5
 80064b8:	080065c5 	.word	0x080065c5
 80064bc:	08006583 	.word	0x08006583
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f9b2 	bl	8006830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0208 	orr.w	r2, r2, #8
 80064da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0204 	bic.w	r2, r2, #4
 80064ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6999      	ldr	r1, [r3, #24]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	619a      	str	r2, [r3, #24]
      break;
 80064fe:	e064      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f9f8 	bl	80068fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800651a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800652a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6999      	ldr	r1, [r3, #24]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	619a      	str	r2, [r3, #24]
      break;
 8006540:	e043      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fa41 	bl	80069d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0208 	orr.w	r2, r2, #8
 800655c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0204 	bic.w	r2, r2, #4
 800656c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69d9      	ldr	r1, [r3, #28]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	61da      	str	r2, [r3, #28]
      break;
 8006580:	e023      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fa8b 	bl	8006aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800659c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69d9      	ldr	r1, [r3, #28]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	021a      	lsls	r2, r3, #8
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	61da      	str	r2, [r3, #28]
      break;
 80065c2:	e002      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
      break;
 80065c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIM_ConfigClockSource+0x1c>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e0b4      	b.n	8006762 <HAL_TIM_ConfigClockSource+0x186>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800661e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006630:	d03e      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006636:	f200 8087 	bhi.w	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663e:	f000 8086 	beq.w	800674e <HAL_TIM_ConfigClockSource+0x172>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006646:	d87f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b70      	cmp	r3, #112	@ 0x70
 800664a:	d01a      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0xa6>
 800664c:	2b70      	cmp	r3, #112	@ 0x70
 800664e:	d87b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b60      	cmp	r3, #96	@ 0x60
 8006652:	d050      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006654:	2b60      	cmp	r3, #96	@ 0x60
 8006656:	d877      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b50      	cmp	r3, #80	@ 0x50
 800665a:	d03c      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0xfa>
 800665c:	2b50      	cmp	r3, #80	@ 0x50
 800665e:	d873      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b40      	cmp	r3, #64	@ 0x40
 8006662:	d058      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x13a>
 8006664:	2b40      	cmp	r3, #64	@ 0x40
 8006666:	d86f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b30      	cmp	r3, #48	@ 0x30
 800666a:	d064      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 800666c:	2b30      	cmp	r3, #48	@ 0x30
 800666e:	d86b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b20      	cmp	r3, #32
 8006672:	d060      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b20      	cmp	r3, #32
 8006676:	d867      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05c      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b10      	cmp	r3, #16
 800667e:	d05a      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 8006680:	e062      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006692:	f000 facc 	bl	8006c2e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	609a      	str	r2, [r3, #8]
      break;
 80066ae:	e04f      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066c0:	f000 fab5 	bl	8006c2e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066d2:	609a      	str	r2, [r3, #8]
      break;
 80066d4:	e03c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 fa2c 	bl	8006b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2150      	movs	r1, #80	@ 0x50
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fa83 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 80066f4:	e02c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006702:	461a      	mov	r2, r3
 8006704:	f000 fa4a 	bl	8006b9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2160      	movs	r1, #96	@ 0x60
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fa73 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 8006714:	e01c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006722:	461a      	mov	r2, r3
 8006724:	f000 fa0c 	bl	8006b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2140      	movs	r1, #64	@ 0x40
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fa63 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 8006734:	e00c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f000 fa5a 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 8006746:	e003      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
      break;
 800674c:	e000      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800674e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a29      	ldr	r2, [pc, #164]	@ (8006824 <TIM_Base_SetConfig+0xb8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00b      	beq.n	800679c <TIM_Base_SetConfig+0x30>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800678a:	d007      	beq.n	800679c <TIM_Base_SetConfig+0x30>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a26      	ldr	r2, [pc, #152]	@ (8006828 <TIM_Base_SetConfig+0xbc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_Base_SetConfig+0x30>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a25      	ldr	r2, [pc, #148]	@ (800682c <TIM_Base_SetConfig+0xc0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d108      	bne.n	80067ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006824 <TIM_Base_SetConfig+0xb8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00b      	beq.n	80067ce <TIM_Base_SetConfig+0x62>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067bc:	d007      	beq.n	80067ce <TIM_Base_SetConfig+0x62>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a19      	ldr	r2, [pc, #100]	@ (8006828 <TIM_Base_SetConfig+0xbc>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d003      	beq.n	80067ce <TIM_Base_SetConfig+0x62>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a18      	ldr	r2, [pc, #96]	@ (800682c <TIM_Base_SetConfig+0xc0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d108      	bne.n	80067e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a07      	ldr	r2, [pc, #28]	@ (8006824 <TIM_Base_SetConfig+0xb8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d103      	bne.n	8006814 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	615a      	str	r2, [r3, #20]
}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800

08006830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f023 0201 	bic.w	r2, r3, #1
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f023 0302 	bic.w	r3, r3, #2
 8006878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1c      	ldr	r2, [pc, #112]	@ (80068f8 <TIM_OC1_SetConfig+0xc8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10c      	bne.n	80068a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0308 	bic.w	r3, r3, #8
 8006892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 0304 	bic.w	r3, r3, #4
 80068a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a13      	ldr	r2, [pc, #76]	@ (80068f8 <TIM_OC1_SetConfig+0xc8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d111      	bne.n	80068d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	40012c00 	.word	0x40012c00

080068fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f023 0210 	bic.w	r2, r3, #16
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0320 	bic.w	r3, r3, #32
 8006946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a1d      	ldr	r2, [pc, #116]	@ (80069cc <TIM_OC2_SetConfig+0xd0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d10d      	bne.n	8006978 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006976:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a14      	ldr	r2, [pc, #80]	@ (80069cc <TIM_OC2_SetConfig+0xd0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d113      	bne.n	80069a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800698e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr
 80069cc:	40012c00 	.word	0x40012c00

080069d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0303 	bic.w	r3, r3, #3
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa0 <TIM_OC3_SetConfig+0xd0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d10d      	bne.n	8006a4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a14      	ldr	r2, [pc, #80]	@ (8006aa0 <TIM_OC3_SetConfig+0xd0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d113      	bne.n	8006a7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	621a      	str	r2, [r3, #32]
}
 8006a94:	bf00      	nop
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40012c00 	.word	0x40012c00

08006aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	031b      	lsls	r3, r3, #12
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a0f      	ldr	r2, [pc, #60]	@ (8006b3c <TIM_OC4_SetConfig+0x98>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d109      	bne.n	8006b18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	019b      	lsls	r3, r3, #6
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	621a      	str	r2, [r3, #32]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr
 8006b3c:	40012c00 	.word	0x40012c00

08006b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0201 	bic.w	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f023 030a 	bic.w	r3, r3, #10
 8006b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr

08006b9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f023 0210 	bic.w	r2, r3, #16
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	031b      	lsls	r3, r3, #12
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	621a      	str	r2, [r3, #32]
}
 8006bf0:	bf00      	nop
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f043 0307 	orr.w	r3, r3, #7
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	609a      	str	r2, [r3, #8]
}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	021a      	lsls	r2, r3, #8
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	609a      	str	r2, [r3, #8]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr

08006c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	2201      	movs	r2, #1
 8006c80:	fa02 f303 	lsl.w	r3, r2, r3
 8006c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a1a      	ldr	r2, [r3, #32]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	43db      	mvns	r3, r3
 8006c8e:	401a      	ands	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1a      	ldr	r2, [r3, #32]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f003 031f 	and.w	r3, r3, #31
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e046      	b.n	8006d5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a16      	ldr	r2, [pc, #88]	@ (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d18:	d009      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a12      	ldr	r2, [pc, #72]	@ (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a10      	ldr	r2, [pc, #64]	@ (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d10c      	bne.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800

08006d70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e03d      	b.n	8006e08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr

08006e12 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e042      	b.n	8006eaa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fa fd99 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2224      	movs	r2, #36	@ 0x24
 8006e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 feb4 	bl	8007bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	695a      	ldr	r2, [r3, #20]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e7a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e8a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b08a      	sub	sp, #40	@ 0x28
 8006eb6:	af02      	add	r7, sp, #8
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d16d      	bne.n	8006fae <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <HAL_UART_Transmit+0x2c>
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e066      	b.n	8006fb0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2221      	movs	r2, #33	@ 0x21
 8006eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ef0:	f7fa ff56 	bl	8001da0 <HAL_GetTick>
 8006ef4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	88fa      	ldrh	r2, [r7, #6]
 8006efa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	88fa      	ldrh	r2, [r7, #6]
 8006f00:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0a:	d108      	bne.n	8006f1e <HAL_UART_Transmit+0x6c>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e003      	b.n	8006f26 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f26:	e02a      	b.n	8006f7e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2180      	movs	r1, #128	@ 0x80
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 fc16 	bl	8007764 <UART_WaitOnFlagUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e036      	b.n	8006fb0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f56:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	e007      	b.n	8006f70 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1cf      	bne.n	8006f28 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2140      	movs	r1, #64	@ 0x40
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fbe6 	bl	8007764 <UART_WaitOnFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e006      	b.n	8006fb0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e000      	b.n	8006fb0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006fae:	2302      	movs	r3, #2
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08c      	sub	sp, #48	@ 0x30
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	d156      	bne.n	8007080 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <HAL_UART_Transmit_DMA+0x26>
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e04f      	b.n	8007082 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2221      	movs	r2, #33	@ 0x21
 8006ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007006:	4a21      	ldr	r2, [pc, #132]	@ (800708c <HAL_UART_Transmit_DMA+0xd4>)
 8007008:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	4a20      	ldr	r2, [pc, #128]	@ (8007090 <HAL_UART_Transmit_DMA+0xd8>)
 8007010:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007016:	4a1f      	ldr	r2, [pc, #124]	@ (8007094 <HAL_UART_Transmit_DMA+0xdc>)
 8007018:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701e:	2200      	movs	r2, #0
 8007020:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8007022:	f107 0308 	add.w	r3, r7, #8
 8007026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800702c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3304      	adds	r3, #4
 8007036:	461a      	mov	r2, r3
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	f7fb fd9d 	bl	8002b78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007046:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3314      	adds	r3, #20
 800704e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	617b      	str	r3, [r7, #20]
   return(result);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800705e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3314      	adds	r3, #20
 8007066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007068:	627a      	str	r2, [r7, #36]	@ 0x24
 800706a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	6a39      	ldr	r1, [r7, #32]
 800706e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	61fb      	str	r3, [r7, #28]
   return(result);
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e5      	bne.n	8007048 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	e000      	b.n	8007082 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007080:	2302      	movs	r3, #2
  }
}
 8007082:	4618      	mov	r0, r3
 8007084:	3730      	adds	r7, #48	@ 0x30
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	0800761b 	.word	0x0800761b
 8007090:	080076b5 	.word	0x080076b5
 8007094:	080076d1 	.word	0x080076d1

08007098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b0ba      	sub	sp, #232	@ 0xe8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80070be:	2300      	movs	r3, #0
 80070c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80070d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10f      	bne.n	80070fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e2:	f003 0320 	and.w	r3, r3, #32
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d009      	beq.n	80070fe <HAL_UART_IRQHandler+0x66>
 80070ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fca6 	bl	8007a48 <UART_Receive_IT>
      return;
 80070fc:	e25b      	b.n	80075b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 80de 	beq.w	80072c4 <HAL_UART_IRQHandler+0x22c>
 8007108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007118:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 80d1 	beq.w	80072c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00b      	beq.n	8007146 <HAL_UART_IRQHandler+0xae>
 800712e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800713e:	f043 0201 	orr.w	r2, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00b      	beq.n	800716a <HAL_UART_IRQHandler+0xd2>
 8007152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007162:	f043 0202 	orr.w	r2, r3, #2
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <HAL_UART_IRQHandler+0xf6>
 8007176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d005      	beq.n	800718e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007186:	f043 0204 	orr.w	r2, r3, #4
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d011      	beq.n	80071be <HAL_UART_IRQHandler+0x126>
 800719a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800719e:	f003 0320 	and.w	r3, r3, #32
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d105      	bne.n	80071b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b6:	f043 0208 	orr.w	r2, r3, #8
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 81f2 	beq.w	80075ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d008      	beq.n	80071e6 <HAL_UART_IRQHandler+0x14e>
 80071d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d8:	f003 0320 	and.w	r3, r3, #32
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fc31 	bl	8007a48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	bf14      	ite	ne
 80071f4:	2301      	movne	r3, #1
 80071f6:	2300      	moveq	r3, #0
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d103      	bne.n	8007212 <HAL_UART_IRQHandler+0x17a>
 800720a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d04f      	beq.n	80072b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fb3b 	bl	800788e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d041      	beq.n	80072aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3314      	adds	r3, #20
 800722c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007234:	e853 3f00 	ldrex	r3, [r3]
 8007238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800723c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3314      	adds	r3, #20
 800724e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007252:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800725e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800726a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1d9      	bne.n	8007226 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007276:	2b00      	cmp	r3, #0
 8007278:	d013      	beq.n	80072a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727e:	4a7e      	ldr	r2, [pc, #504]	@ (8007478 <HAL_UART_IRQHandler+0x3e0>)
 8007280:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007286:	4618      	mov	r0, r3
 8007288:	f7fb fd12 	bl	8002cb0 <HAL_DMA_Abort_IT>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d016      	beq.n	80072c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a0:	e00e      	b.n	80072c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9a5 	bl	80075f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	e00a      	b.n	80072c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f9a1 	bl	80075f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b0:	e006      	b.n	80072c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f99d 	bl	80075f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80072be:	e175      	b.n	80075ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c0:	bf00      	nop
    return;
 80072c2:	e173      	b.n	80075ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	f040 814f 	bne.w	800756c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 8148 	beq.w	800756c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8141 	beq.w	800756c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ea:	2300      	movs	r3, #0
 80072ec:	60bb      	str	r3, [r7, #8]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	60bb      	str	r3, [r7, #8]
 80072fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 80b6 	beq.w	800747c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800731c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 8145 	beq.w	80075b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800732a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800732e:	429a      	cmp	r2, r3
 8007330:	f080 813e 	bcs.w	80075b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800733a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	2b20      	cmp	r3, #32
 8007344:	f000 8088 	beq.w	8007458 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800735e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007362:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007366:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007374:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007378:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007380:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800738c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1d9      	bne.n	8007348 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3314      	adds	r3, #20
 800739a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073a6:	f023 0301 	bic.w	r3, r3, #1
 80073aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3314      	adds	r3, #20
 80073b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80073bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80073c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80073ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e1      	bne.n	8007394 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3314      	adds	r3, #20
 80073d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3314      	adds	r3, #20
 80073f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e3      	bne.n	80073d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007428:	f023 0310 	bic.w	r3, r3, #16
 800742c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800743a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800743c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007440:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e3      	bne.n	8007416 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007452:	4618      	mov	r0, r3
 8007454:	f7fb fbf0 	bl	8002c38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007466:	b29b      	uxth	r3, r3
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	b29b      	uxth	r3, r3
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f8c8 	bl	8007604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007474:	e09c      	b.n	80075b0 <HAL_UART_IRQHandler+0x518>
 8007476:	bf00      	nop
 8007478:	08007953 	.word	0x08007953
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007484:	b29b      	uxth	r3, r3
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 808e 	beq.w	80075b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8089 	beq.w	80075b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	330c      	adds	r3, #12
 80074a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ac:	e853 3f00 	ldrex	r3, [r3]
 80074b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	330c      	adds	r3, #12
 80074c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80074c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80074c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e3      	bne.n	80074a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3314      	adds	r3, #20
 80074e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	623b      	str	r3, [r7, #32]
   return(result);
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	f023 0301 	bic.w	r3, r3, #1
 80074f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3314      	adds	r3, #20
 80074fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007500:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e3      	bne.n	80074da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	330c      	adds	r3, #12
 8007526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0310 	bic.w	r3, r3, #16
 8007536:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	330c      	adds	r3, #12
 8007540:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007544:	61fa      	str	r2, [r7, #28]
 8007546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	69b9      	ldr	r1, [r7, #24]
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	617b      	str	r3, [r7, #20]
   return(result);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e3      	bne.n	8007520 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800755e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f84d 	bl	8007604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800756a:	e023      	b.n	80075b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <HAL_UART_IRQHandler+0x4f4>
 8007578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800757c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f9f8 	bl	800797a <UART_Transmit_IT>
    return;
 800758a:	e014      	b.n	80075b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800758c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00e      	beq.n	80075b6 <HAL_UART_IRQHandler+0x51e>
 8007598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800759c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fa37 	bl	8007a18 <UART_EndTransmit_IT>
    return;
 80075aa:	e004      	b.n	80075b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80075ac:	bf00      	nop
 80075ae:	e002      	b.n	80075b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80075b0:	bf00      	nop
 80075b2:	e000      	b.n	80075b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80075b4:	bf00      	nop
  }
}
 80075b6:	37e8      	adds	r7, #232	@ 0xe8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr

080075ce <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc80      	pop	{r7}
 80075de:	4770      	bx	lr

080075e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr

080075f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr

08007604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr

0800761a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b090      	sub	sp, #64	@ 0x40
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d137      	bne.n	80076a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007638:	2200      	movs	r2, #0
 800763a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800763c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3314      	adds	r3, #20
 8007642:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	623b      	str	r3, [r7, #32]
   return(result);
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007652:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3314      	adds	r3, #20
 800765a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800765c:	633a      	str	r2, [r7, #48]	@ 0x30
 800765e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e5      	bne.n	800763c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	330c      	adds	r3, #12
 8007676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007686:	637b      	str	r3, [r7, #52]	@ 0x34
 8007688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	330c      	adds	r3, #12
 800768e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007690:	61fa      	str	r2, [r7, #28]
 8007692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	69b9      	ldr	r1, [r7, #24]
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	617b      	str	r3, [r7, #20]
   return(result);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e5      	bne.n	8007670 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076a4:	e002      	b.n	80076ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80076a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80076a8:	f7ff ff88 	bl	80075bc <HAL_UART_TxCpltCallback>
}
 80076ac:	bf00      	nop
 80076ae:	3740      	adds	r7, #64	@ 0x40
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7ff ff83 	bl	80075ce <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c8:	bf00      	nop
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bf14      	ite	ne
 80076f0:	2301      	movne	r3, #1
 80076f2:	2300      	moveq	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b21      	cmp	r3, #33	@ 0x21
 8007702:	d108      	bne.n	8007716 <UART_DMAError+0x46>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2200      	movs	r2, #0
 800770e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007710:	68b8      	ldr	r0, [r7, #8]
 8007712:	f000 f895 	bl	8007840 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007720:	2b00      	cmp	r3, #0
 8007722:	bf14      	ite	ne
 8007724:	2301      	movne	r3, #1
 8007726:	2300      	moveq	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b22      	cmp	r3, #34	@ 0x22
 8007736:	d108      	bne.n	800774a <UART_DMAError+0x7a>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2200      	movs	r2, #0
 8007742:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007744:	68b8      	ldr	r0, [r7, #8]
 8007746:	f000 f8a2 	bl	800788e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800774e:	f043 0210 	orr.w	r2, r3, #16
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007756:	68b8      	ldr	r0, [r7, #8]
 8007758:	f7ff ff4b 	bl	80075f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800775c:	bf00      	nop
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b090      	sub	sp, #64	@ 0x40
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	4613      	mov	r3, r2
 8007772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007774:	e050      	b.n	8007818 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d04c      	beq.n	8007818 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800777e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007780:	2b00      	cmp	r3, #0
 8007782:	d007      	beq.n	8007794 <UART_WaitOnFlagUntilTimeout+0x30>
 8007784:	f7fa fb0c 	bl	8001da0 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007790:	429a      	cmp	r2, r3
 8007792:	d241      	bcs.n	8007818 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330c      	adds	r3, #12
 800779a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80077aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80077b4:	637a      	str	r2, [r7, #52]	@ 0x34
 80077b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80077c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e5      	bne.n	8007794 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3314      	adds	r3, #20
 80077ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	613b      	str	r3, [r7, #16]
   return(result);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f023 0301 	bic.w	r3, r3, #1
 80077de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3314      	adds	r3, #20
 80077e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077e8:	623a      	str	r2, [r7, #32]
 80077ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	69f9      	ldr	r1, [r7, #28]
 80077ee:	6a3a      	ldr	r2, [r7, #32]
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e5      	bne.n	80077c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2220      	movs	r2, #32
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e00f      	b.n	8007838 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4013      	ands	r3, r2
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	429a      	cmp	r2, r3
 8007826:	bf0c      	ite	eq
 8007828:	2301      	moveq	r3, #1
 800782a:	2300      	movne	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	461a      	mov	r2, r3
 8007830:	79fb      	ldrb	r3, [r7, #7]
 8007832:	429a      	cmp	r2, r3
 8007834:	d09f      	beq.n	8007776 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3740      	adds	r7, #64	@ 0x40
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b089      	sub	sp, #36	@ 0x24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	60bb      	str	r3, [r7, #8]
   return(result);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	330c      	adds	r3, #12
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	61ba      	str	r2, [r7, #24]
 800786a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6979      	ldr	r1, [r7, #20]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	613b      	str	r3, [r7, #16]
   return(result);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e5      	bne.n	8007848 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007884:	bf00      	nop
 8007886:	3724      	adds	r7, #36	@ 0x24
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr

0800788e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800788e:	b480      	push	{r7}
 8007890:	b095      	sub	sp, #84	@ 0x54
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	330c      	adds	r3, #12
 800789c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	330c      	adds	r3, #12
 80078b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80078b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e5      	bne.n	8007896 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3314      	adds	r3, #20
 80078d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	f023 0301 	bic.w	r3, r3, #1
 80078e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3314      	adds	r3, #20
 80078e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e5      	bne.n	80078ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007902:	2b01      	cmp	r3, #1
 8007904:	d119      	bne.n	800793a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	60bb      	str	r3, [r7, #8]
   return(result);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f023 0310 	bic.w	r3, r3, #16
 800791c:	647b      	str	r3, [r7, #68]	@ 0x44
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	330c      	adds	r3, #12
 8007924:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007926:	61ba      	str	r2, [r7, #24]
 8007928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	6979      	ldr	r1, [r7, #20]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	e841 2300 	strex	r3, r2, [r1]
 8007932:	613b      	str	r3, [r7, #16]
   return(result);
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1e5      	bne.n	8007906 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2220      	movs	r2, #32
 800793e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007948:	bf00      	nop
 800794a:	3754      	adds	r7, #84	@ 0x54
 800794c:	46bd      	mov	sp, r7
 800794e:	bc80      	pop	{r7}
 8007950:	4770      	bx	lr

08007952 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff fe40 	bl	80075f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007972:	bf00      	nop
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b21      	cmp	r3, #33	@ 0x21
 800798c:	d13e      	bne.n	8007a0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007996:	d114      	bne.n	80079c2 <UART_Transmit_IT+0x48>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d110      	bne.n	80079c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	1c9a      	adds	r2, r3, #2
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	621a      	str	r2, [r3, #32]
 80079c0:	e008      	b.n	80079d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	1c59      	adds	r1, r3, #1
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6211      	str	r1, [r2, #32]
 80079cc:	781a      	ldrb	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29b      	uxth	r3, r3
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	4619      	mov	r1, r3
 80079e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10f      	bne.n	8007a08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e000      	b.n	8007a0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a0c:	2302      	movs	r3, #2
  }
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff fdbf 	bl	80075bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08c      	sub	sp, #48	@ 0x30
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b22      	cmp	r3, #34	@ 0x22
 8007a5a:	f040 80ae 	bne.w	8007bba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a66:	d117      	bne.n	8007a98 <UART_Receive_IT+0x50>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d113      	bne.n	8007a98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a78:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a90:	1c9a      	adds	r2, r3, #2
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a96:	e026      	b.n	8007ae6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aaa:	d007      	beq.n	8007abc <UART_Receive_IT+0x74>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <UART_Receive_IT+0x82>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	e008      	b.n	8007adc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ada:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	4619      	mov	r1, r3
 8007af4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d15d      	bne.n	8007bb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0220 	bic.w	r2, r2, #32
 8007b08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695a      	ldr	r2, [r3, #20]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d135      	bne.n	8007bac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	330c      	adds	r3, #12
 8007b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	613b      	str	r3, [r7, #16]
   return(result);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f023 0310 	bic.w	r3, r3, #16
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	330c      	adds	r3, #12
 8007b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b66:	623a      	str	r2, [r7, #32]
 8007b68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	69f9      	ldr	r1, [r7, #28]
 8007b6c:	6a3a      	ldr	r2, [r7, #32]
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e5      	bne.n	8007b46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0310 	and.w	r3, r3, #16
 8007b84:	2b10      	cmp	r3, #16
 8007b86:	d10a      	bne.n	8007b9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff fd2d 	bl	8007604 <HAL_UARTEx_RxEventCallback>
 8007baa:	e002      	b.n	8007bb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fd17 	bl	80075e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e002      	b.n	8007bbc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	e000      	b.n	8007bbc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007bba:	2302      	movs	r3, #2
  }
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3730      	adds	r7, #48	@ 0x30
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007bfe:	f023 030c 	bic.w	r3, r3, #12
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6812      	ldr	r2, [r2, #0]
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a2c      	ldr	r2, [pc, #176]	@ (8007cd8 <UART_SetConfig+0x114>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d103      	bne.n	8007c34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c2c:	f7fe f998 	bl	8005f60 <HAL_RCC_GetPCLK2Freq>
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	e002      	b.n	8007c3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c34:	f7fe f980 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8007c38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009a      	lsls	r2, r3, #2
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	4a22      	ldr	r2, [pc, #136]	@ (8007cdc <UART_SetConfig+0x118>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	0119      	lsls	r1, r3, #4
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	009a      	lsls	r2, r3, #2
 8007c64:	441a      	add	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c70:	4b1a      	ldr	r3, [pc, #104]	@ (8007cdc <UART_SetConfig+0x118>)
 8007c72:	fba3 0302 	umull	r0, r3, r3, r2
 8007c76:	095b      	lsrs	r3, r3, #5
 8007c78:	2064      	movs	r0, #100	@ 0x64
 8007c7a:	fb00 f303 	mul.w	r3, r0, r3
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	3332      	adds	r3, #50	@ 0x32
 8007c84:	4a15      	ldr	r2, [pc, #84]	@ (8007cdc <UART_SetConfig+0x118>)
 8007c86:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8a:	095b      	lsrs	r3, r3, #5
 8007c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c90:	4419      	add	r1, r3
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009a      	lsls	r2, r3, #2
 8007c9c:	441a      	add	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8007cdc <UART_SetConfig+0x118>)
 8007caa:	fba3 0302 	umull	r0, r3, r3, r2
 8007cae:	095b      	lsrs	r3, r3, #5
 8007cb0:	2064      	movs	r0, #100	@ 0x64
 8007cb2:	fb00 f303 	mul.w	r3, r0, r3
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	3332      	adds	r3, #50	@ 0x32
 8007cbc:	4a07      	ldr	r2, [pc, #28]	@ (8007cdc <UART_SetConfig+0x118>)
 8007cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc2:	095b      	lsrs	r3, r3, #5
 8007cc4:	f003 020f 	and.w	r2, r3, #15
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	440a      	add	r2, r1
 8007cce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40013800 	.word	0x40013800
 8007cdc:	51eb851f 	.word	0x51eb851f

08007ce0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	f107 0014 	add.w	r0, r7, #20
 8007cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	b004      	add	sp, #16
 8007cfe:	4770      	bx	lr

08007d00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d10:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007d14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr

08007d2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d34:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007d38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	43db      	mvns	r3, r3
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr

08007d78 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d78:	b084      	sub	sp, #16
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	f107 0014 	add.w	r0, r7, #20
 8007d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bc80      	pop	{r7}
 8007db4:	b004      	add	sp, #16
 8007db6:	4770      	bx	lr

08007db8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b09d      	sub	sp, #116	@ 0x74
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dde:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	78db      	ldrb	r3, [r3, #3]
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d81f      	bhi.n	8007e2a <USB_ActivateEndpoint+0x72>
 8007dea:	a201      	add	r2, pc, #4	@ (adr r2, 8007df0 <USB_ActivateEndpoint+0x38>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e01 	.word	0x08007e01
 8007df4:	08007e1d 	.word	0x08007e1d
 8007df8:	08007e33 	.word	0x08007e33
 8007dfc:	08007e0f 	.word	0x08007e0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007e00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007e04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007e08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007e0c:	e012      	b.n	8007e34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007e0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007e12:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007e16:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007e1a:	e00b      	b.n	8007e34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007e20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007e28:	e004      	b.n	8007e34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007e30:	e000      	b.n	8007e34 <USB_ActivateEndpoint+0x7c>
      break;
 8007e32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	441a      	add	r2, r3
 8007e3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007e42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	7812      	ldrb	r2, [r2, #0]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	441a      	add	r2, r3
 8007e82:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007e86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	7b1b      	ldrb	r3, [r3, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f040 8178 	bne.w	8008194 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 8084 	beq.w	8007fb6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	011a      	lsls	r2, r3, #4
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	88db      	ldrh	r3, [r3, #6]
 8007ed6:	085b      	lsrs	r3, r3, #1
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	827b      	strh	r3, [r7, #18]
 8007ef0:	8a7b      	ldrh	r3, [r7, #18]
 8007ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d01b      	beq.n	8007f32 <USB_ActivateEndpoint+0x17a>
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f10:	823b      	strh	r3, [r7, #16]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	441a      	add	r2, r3
 8007f1c:	8a3b      	ldrh	r3, [r7, #16]
 8007f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	78db      	ldrb	r3, [r3, #3]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d020      	beq.n	8007f7c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f50:	81bb      	strh	r3, [r7, #12]
 8007f52:	89bb      	ldrh	r3, [r7, #12]
 8007f54:	f083 0320 	eor.w	r3, r3, #32
 8007f58:	81bb      	strh	r3, [r7, #12]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	441a      	add	r2, r3
 8007f64:	89bb      	ldrh	r3, [r7, #12]
 8007f66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	8013      	strh	r3, [r2, #0]
 8007f7a:	e2d5      	b.n	8008528 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f92:	81fb      	strh	r3, [r7, #14]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	441a      	add	r2, r3
 8007f9e:	89fb      	ldrh	r3, [r7, #14]
 8007fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	8013      	strh	r3, [r2, #0]
 8007fb4:	e2b8      	b.n	8008528 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc6:	4413      	add	r3, r2
 8007fc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	011a      	lsls	r2, r3, #4
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	88db      	ldrh	r3, [r3, #6]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffa:	4413      	add	r3, r2
 8007ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	011a      	lsls	r2, r3, #4
 8008004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008006:	4413      	add	r3, r2
 8008008:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800800c:	627b      	str	r3, [r7, #36]	@ 0x24
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008018:	b29a      	uxth	r2, r3
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b3e      	cmp	r3, #62	@ 0x3e
 8008024:	d91d      	bls.n	8008062 <USB_ActivateEndpoint+0x2aa>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	2b00      	cmp	r3, #0
 8008038:	d102      	bne.n	8008040 <USB_ActivateEndpoint+0x288>
 800803a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800803c:	3b01      	subs	r3, #1
 800803e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	b29a      	uxth	r2, r3
 8008046:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008048:	b29b      	uxth	r3, r3
 800804a:	029b      	lsls	r3, r3, #10
 800804c:	b29b      	uxth	r3, r3
 800804e:	4313      	orrs	r3, r2
 8008050:	b29b      	uxth	r3, r3
 8008052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800805a:	b29a      	uxth	r2, r3
 800805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805e:	801a      	strh	r2, [r3, #0]
 8008060:	e026      	b.n	80080b0 <USB_ActivateEndpoint+0x2f8>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10a      	bne.n	8008080 <USB_ActivateEndpoint+0x2c8>
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008078:	b29a      	uxth	r2, r3
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	801a      	strh	r2, [r3, #0]
 800807e:	e017      	b.n	80080b0 <USB_ActivateEndpoint+0x2f8>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	085b      	lsrs	r3, r3, #1
 8008086:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <USB_ActivateEndpoint+0x2e2>
 8008094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008096:	3301      	adds	r3, #1
 8008098:	66bb      	str	r3, [r7, #104]	@ 0x68
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29a      	uxth	r2, r3
 80080a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	029b      	lsls	r3, r3, #10
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	4313      	orrs	r3, r2
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80080be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01b      	beq.n	8008100 <USB_ActivateEndpoint+0x348>
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080de:	843b      	strh	r3, [r7, #32]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	441a      	add	r2, r3
 80080ea:	8c3b      	ldrh	r3, [r7, #32]
 80080ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d124      	bne.n	8008152 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800811a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811e:	83bb      	strh	r3, [r7, #28]
 8008120:	8bbb      	ldrh	r3, [r7, #28]
 8008122:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008126:	83bb      	strh	r3, [r7, #28]
 8008128:	8bbb      	ldrh	r3, [r7, #28]
 800812a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800812e:	83bb      	strh	r3, [r7, #28]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	441a      	add	r2, r3
 800813a:	8bbb      	ldrh	r3, [r7, #28]
 800813c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800814c:	b29b      	uxth	r3, r3
 800814e:	8013      	strh	r3, [r2, #0]
 8008150:	e1ea      	b.n	8008528 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008168:	83fb      	strh	r3, [r7, #30]
 800816a:	8bfb      	ldrh	r3, [r7, #30]
 800816c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008170:	83fb      	strh	r3, [r7, #30]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	441a      	add	r2, r3
 800817c:	8bfb      	ldrh	r3, [r7, #30]
 800817e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008182:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800818a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800818e:	b29b      	uxth	r3, r3
 8008190:	8013      	strh	r3, [r2, #0]
 8008192:	e1c9      	b.n	8008528 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	78db      	ldrb	r3, [r3, #3]
 8008198:	2b02      	cmp	r3, #2
 800819a:	d11e      	bne.n	80081da <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081b2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	441a      	add	r2, r3
 80081c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80081c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081cc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80081d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	8013      	strh	r3, [r2, #0]
 80081d8:	e01d      	b.n	8008216 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80081ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081f0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	441a      	add	r2, r3
 80081fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800820a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800820e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008212:	b29b      	uxth	r3, r3
 8008214:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008220:	b29b      	uxth	r3, r3
 8008222:	461a      	mov	r2, r3
 8008224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008226:	4413      	add	r3, r2
 8008228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	011a      	lsls	r2, r3, #4
 8008230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008232:	4413      	add	r3, r2
 8008234:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008238:	65bb      	str	r3, [r7, #88]	@ 0x58
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	891b      	ldrh	r3, [r3, #8]
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	b29b      	uxth	r3, r3
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	b29a      	uxth	r2, r3
 8008246:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008248:	801a      	strh	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	657b      	str	r3, [r7, #84]	@ 0x54
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008254:	b29b      	uxth	r3, r3
 8008256:	461a      	mov	r2, r3
 8008258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800825a:	4413      	add	r3, r2
 800825c:	657b      	str	r3, [r7, #84]	@ 0x54
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	011a      	lsls	r2, r3, #4
 8008264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008266:	4413      	add	r3, r2
 8008268:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800826c:	653b      	str	r3, [r7, #80]	@ 0x50
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	895b      	ldrh	r3, [r3, #10]
 8008272:	085b      	lsrs	r3, r3, #1
 8008274:	b29b      	uxth	r3, r3
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800827c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	785b      	ldrb	r3, [r3, #1]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f040 8093 	bne.w	80083ae <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008298:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800829c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01b      	beq.n	80082dc <USB_ActivateEndpoint+0x524>
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	441a      	add	r2, r3
 80082c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80082c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d8:	b29b      	uxth	r3, r3
 80082da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80082ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80082ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01b      	beq.n	800832c <USB_ActivateEndpoint+0x574>
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800830a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	441a      	add	r2, r3
 8008316:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800831c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008324:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008328:	b29b      	uxth	r3, r3
 800832a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	b29b      	uxth	r3, r3
 800833a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800833e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008342:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008344:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008346:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800834a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800834c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800834e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008352:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	441a      	add	r2, r3
 800835e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800836c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008370:	b29b      	uxth	r3, r3
 8008372:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800838a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	441a      	add	r2, r3
 8008396:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800839c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	8013      	strh	r3, [r2, #0]
 80083ac:	e0bc      	b.n	8008528 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80083be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80083c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d01d      	beq.n	8008406 <USB_ActivateEndpoint+0x64e>
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	441a      	add	r2, r3
 80083ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80083f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008402:	b29b      	uxth	r3, r3
 8008404:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008416:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800841a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d01d      	beq.n	800845e <USB_ActivateEndpoint+0x6a6>
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008438:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	441a      	add	r2, r3
 8008446:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800844a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800844e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008456:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800845a:	b29b      	uxth	r3, r3
 800845c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	78db      	ldrb	r3, [r3, #3]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d024      	beq.n	80084b0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	b29b      	uxth	r3, r3
 8008474:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800847c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008480:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008484:	f083 0320 	eor.w	r3, r3, #32
 8008488:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	441a      	add	r2, r3
 8008496:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800849a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800849e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	8013      	strh	r3, [r2, #0]
 80084ae:	e01d      	b.n	80084ec <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	441a      	add	r2, r3
 80084d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80084d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008502:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	441a      	add	r2, r3
 8008510:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008514:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008518:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800851c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008524:	b29b      	uxth	r3, r3
 8008526:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008528:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800852c:	4618      	mov	r0, r3
 800852e:	3774      	adds	r7, #116	@ 0x74
 8008530:	46bd      	mov	sp, r7
 8008532:	bc80      	pop	{r7}
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop

08008538 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008538:	b480      	push	{r7}
 800853a:	b08d      	sub	sp, #52	@ 0x34
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	7b1b      	ldrb	r3, [r3, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f040 808e 	bne.w	8008668 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	785b      	ldrb	r3, [r3, #1]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d044      	beq.n	80085de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	81bb      	strh	r3, [r7, #12]
 8008562:	89bb      	ldrh	r3, [r7, #12]
 8008564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01b      	beq.n	80085a4 <USB_DeactivateEndpoint+0x6c>
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	b29b      	uxth	r3, r3
 800857a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800857e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008582:	817b      	strh	r3, [r7, #10]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	441a      	add	r2, r3
 800858e:	897b      	ldrh	r3, [r7, #10]
 8008590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800859c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ba:	813b      	strh	r3, [r7, #8]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	441a      	add	r2, r3
 80085c6:	893b      	ldrh	r3, [r7, #8]
 80085c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d8:	b29b      	uxth	r3, r3
 80085da:	8013      	strh	r3, [r2, #0]
 80085dc:	e192      	b.n	8008904 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	827b      	strh	r3, [r7, #18]
 80085ec:	8a7b      	ldrh	r3, [r7, #18]
 80085ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d01b      	beq.n	800862e <USB_DeactivateEndpoint+0xf6>
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	b29b      	uxth	r3, r3
 8008604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800860c:	823b      	strh	r3, [r7, #16]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	441a      	add	r2, r3
 8008618:	8a3b      	ldrh	r3, [r7, #16]
 800861a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800861e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008622:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800862a:	b29b      	uxth	r3, r3
 800862c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008644:	81fb      	strh	r3, [r7, #14]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	441a      	add	r2, r3
 8008650:	89fb      	ldrh	r3, [r7, #14]
 8008652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800865a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800865e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008662:	b29b      	uxth	r3, r3
 8008664:	8013      	strh	r3, [r2, #0]
 8008666:	e14d      	b.n	8008904 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	2b00      	cmp	r3, #0
 800866e:	f040 80a5 	bne.w	80087bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	843b      	strh	r3, [r7, #32]
 8008680:	8c3b      	ldrh	r3, [r7, #32]
 8008682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01b      	beq.n	80086c2 <USB_DeactivateEndpoint+0x18a>
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800869c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a0:	83fb      	strh	r3, [r7, #30]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	8bfb      	ldrh	r3, [r7, #30]
 80086ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086be:	b29b      	uxth	r3, r3
 80086c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	83bb      	strh	r3, [r7, #28]
 80086d0:	8bbb      	ldrh	r3, [r7, #28]
 80086d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d01b      	beq.n	8008712 <USB_DeactivateEndpoint+0x1da>
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f0:	837b      	strh	r3, [r7, #26]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	441a      	add	r2, r3
 80086fc:	8b7b      	ldrh	r3, [r7, #26]
 80086fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800870a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800870e:	b29b      	uxth	r3, r3
 8008710:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008728:	833b      	strh	r3, [r7, #24]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	441a      	add	r2, r3
 8008734:	8b3b      	ldrh	r3, [r7, #24]
 8008736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800873a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800873e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008742:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008746:	b29b      	uxth	r3, r3
 8008748:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800875c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008760:	82fb      	strh	r3, [r7, #22]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	441a      	add	r2, r3
 800876c:	8afb      	ldrh	r3, [r7, #22]
 800876e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800877a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800877e:	b29b      	uxth	r3, r3
 8008780:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	b29b      	uxth	r3, r3
 8008790:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008798:	82bb      	strh	r3, [r7, #20]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	441a      	add	r2, r3
 80087a4:	8abb      	ldrh	r3, [r7, #20]
 80087a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	8013      	strh	r3, [r2, #0]
 80087ba:	e0a3      	b.n	8008904 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80087ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80087cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01b      	beq.n	800880c <USB_DeactivateEndpoint+0x2d4>
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	441a      	add	r2, r3
 80087f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80087f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008808:	b29b      	uxth	r3, r3
 800880a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800881a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800881c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008820:	2b00      	cmp	r3, #0
 8008822:	d01b      	beq.n	800885c <USB_DeactivateEndpoint+0x324>
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	b29b      	uxth	r3, r3
 8008832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800883a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	441a      	add	r2, r3
 8008846:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800884c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008854:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008858:	b29b      	uxth	r3, r3
 800885a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29b      	uxth	r3, r3
 800886a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800886e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008872:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	441a      	add	r2, r3
 800887e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800888c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008890:	b29b      	uxth	r3, r3
 8008892:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	441a      	add	r2, r3
 80088b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	441a      	add	r2, r3
 80088ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80088f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008900:	b29b      	uxth	r3, r3
 8008902:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3734      	adds	r7, #52	@ 0x34
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr

08008910 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b0c2      	sub	sp, #264	@ 0x108
 8008914:	af00      	add	r7, sp, #0
 8008916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800891a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800891e:	6018      	str	r0, [r3, #0]
 8008920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008928:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800892a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800892e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	2b01      	cmp	r3, #1
 8008938:	f040 86b7 	bne.w	80096aa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800893c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	699a      	ldr	r2, [r3, #24]
 8008948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800894c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	429a      	cmp	r2, r3
 8008956:	d908      	bls.n	800896a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008968:	e007      	b.n	800897a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800896a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800896e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800897a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800897e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	7b1b      	ldrb	r3, [r3, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d13a      	bne.n	8008a00 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800898a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800898e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6959      	ldr	r1, [r3, #20]
 8008996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800899a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	88da      	ldrh	r2, [r3, #6]
 80089a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80089ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80089b0:	6800      	ldr	r0, [r0, #0]
 80089b2:	f001 fc9c 	bl	800a2ee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80089b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	461a      	mov	r2, r3
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	4413      	add	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]
 80089da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	011a      	lsls	r2, r3, #4
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	4413      	add	r3, r2
 80089ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	801a      	strh	r2, [r3, #0]
 80089fc:	f000 be1f 	b.w	800963e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	78db      	ldrb	r3, [r3, #3]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	f040 8462 	bne.w	80092d6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6a1a      	ldr	r2, [r3, #32]
 8008a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	f240 83df 	bls.w	80091ee <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a56:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	441a      	add	r2, r3
 8008a74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a80:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6a1a      	ldr	r2, [r3, #32]
 8008a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9c:	1ad2      	subs	r2, r2, r3
 8008a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 81c7 	beq.w	8008e60 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d177      	bne.n	8008bde <USB_EPStartXfer+0x2ce>
 8008aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0e:	4413      	add	r3, r2
 8008b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	011a      	lsls	r2, r3, #4
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	4413      	add	r3, r2
 8008b24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	801a      	strh	r2, [r3, #0]
 8008b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b40:	d921      	bls.n	8008b86 <USB_EPStartXfer+0x276>
 8008b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b46:	095b      	lsrs	r3, r3, #5
 8008b48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d104      	bne.n	8008b62 <USB_EPStartXfer+0x252>
 8008b58:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	029b      	lsls	r3, r3, #10
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	4313      	orrs	r3, r2
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b82:	801a      	strh	r2, [r3, #0]
 8008b84:	e050      	b.n	8008c28 <USB_EPStartXfer+0x318>
 8008b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10a      	bne.n	8008ba4 <USB_EPStartXfer+0x294>
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba0:	801a      	strh	r2, [r3, #0]
 8008ba2:	e041      	b.n	8008c28 <USB_EPStartXfer+0x318>
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba8:	085b      	lsrs	r3, r3, #1
 8008baa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d004      	beq.n	8008bc4 <USB_EPStartXfer+0x2b4>
 8008bba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	029b      	lsls	r3, r3, #10
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bda:	801a      	strh	r2, [r3, #0]
 8008bdc:	e024      	b.n	8008c28 <USB_EPStartXfer+0x318>
 8008bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	785b      	ldrb	r3, [r3, #1]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d11c      	bne.n	8008c28 <USB_EPStartXfer+0x318>
 8008bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c02:	4413      	add	r3, r2
 8008c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	011a      	lsls	r2, r3, #4
 8008c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c16:	4413      	add	r3, r2
 8008c18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	895b      	ldrh	r3, [r3, #10]
 8008c34:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6959      	ldr	r1, [r3, #20]
 8008c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c4e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c52:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c56:	6800      	ldr	r0, [r0, #0]
 8008c58:	f001 fb49 	bl	800a2ee <USB_WritePMA>
            ep->xfer_buff += len;
 8008c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695a      	ldr	r2, [r3, #20]
 8008c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c6c:	441a      	add	r2, r3
 8008c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6a1a      	ldr	r2, [r3, #32]
 8008c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d90f      	bls.n	8008cb6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6a1a      	ldr	r2, [r3, #32]
 8008ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca6:	1ad2      	subs	r2, r2, r3
 8008ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	621a      	str	r2, [r3, #32]
 8008cb4:	e00e      	b.n	8008cd4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	785b      	ldrb	r3, [r3, #1]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d177      	bne.n	8008dd4 <USB_EPStartXfer+0x4c4>
 8008ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	61bb      	str	r3, [r7, #24]
 8008cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	4413      	add	r3, r2
 8008d06:	61bb      	str	r3, [r7, #24]
 8008d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	011a      	lsls	r2, r3, #4
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	801a      	strh	r2, [r3, #0]
 8008d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d34:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d36:	d921      	bls.n	8008d7c <USB_EPStartXfer+0x46c>
 8008d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d3c:	095b      	lsrs	r3, r3, #5
 8008d3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d46:	f003 031f 	and.w	r3, r3, #31
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d104      	bne.n	8008d58 <USB_EPStartXfer+0x448>
 8008d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d52:	3b01      	subs	r3, #1
 8008d54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	029b      	lsls	r3, r3, #10
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	801a      	strh	r2, [r3, #0]
 8008d7a:	e056      	b.n	8008e2a <USB_EPStartXfer+0x51a>
 8008d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10a      	bne.n	8008d9a <USB_EPStartXfer+0x48a>
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	e047      	b.n	8008e2a <USB_EPStartXfer+0x51a>
 8008d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9e:	085b      	lsrs	r3, r3, #1
 8008da0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d004      	beq.n	8008dba <USB_EPStartXfer+0x4aa>
 8008db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008db4:	3301      	adds	r3, #1
 8008db6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	029b      	lsls	r3, r3, #10
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	801a      	strh	r2, [r3, #0]
 8008dd2:	e02a      	b.n	8008e2a <USB_EPStartXfer+0x51a>
 8008dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	785b      	ldrb	r3, [r3, #1]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d122      	bne.n	8008e2a <USB_EPStartXfer+0x51a>
 8008de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	623b      	str	r3, [r7, #32]
 8008df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	461a      	mov	r2, r3
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	4413      	add	r3, r2
 8008e06:	623b      	str	r3, [r7, #32]
 8008e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	011a      	lsls	r2, r3, #4
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e1e:	61fb      	str	r3, [r7, #28]
 8008e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	891b      	ldrh	r3, [r3, #8]
 8008e36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6959      	ldr	r1, [r3, #20]
 8008e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008e54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008e58:	6800      	ldr	r0, [r0, #0]
 8008e5a:	f001 fa48 	bl	800a2ee <USB_WritePMA>
 8008e5e:	e3ee      	b.n	800963e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	785b      	ldrb	r3, [r3, #1]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d177      	bne.n	8008f60 <USB_EPStartXfer+0x650>
 8008e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e90:	4413      	add	r3, r2
 8008e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	011a      	lsls	r2, r3, #4
 8008ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eba:	801a      	strh	r2, [r3, #0]
 8008ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ec2:	d921      	bls.n	8008f08 <USB_EPStartXfer+0x5f8>
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed2:	f003 031f 	and.w	r3, r3, #31
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d104      	bne.n	8008ee4 <USB_EPStartXfer+0x5d4>
 8008eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	029b      	lsls	r3, r3, #10
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f04:	801a      	strh	r2, [r3, #0]
 8008f06:	e056      	b.n	8008fb6 <USB_EPStartXfer+0x6a6>
 8008f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <USB_EPStartXfer+0x616>
 8008f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f22:	801a      	strh	r2, [r3, #0]
 8008f24:	e047      	b.n	8008fb6 <USB_EPStartXfer+0x6a6>
 8008f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d004      	beq.n	8008f46 <USB_EPStartXfer+0x636>
 8008f3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f40:	3301      	adds	r3, #1
 8008f42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	029b      	lsls	r3, r3, #10
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f5c:	801a      	strh	r2, [r3, #0]
 8008f5e:	e02a      	b.n	8008fb6 <USB_EPStartXfer+0x6a6>
 8008f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	785b      	ldrb	r3, [r3, #1]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d122      	bne.n	8008fb6 <USB_EPStartXfer+0x6a6>
 8008f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f90:	4413      	add	r3, r2
 8008f92:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	011a      	lsls	r2, r3, #4
 8008fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	891b      	ldrh	r3, [r3, #8]
 8008fc2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6959      	ldr	r1, [r3, #20]
 8008fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008fdc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008fe0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008fe4:	6800      	ldr	r0, [r0, #0]
 8008fe6:	f001 f982 	bl	800a2ee <USB_WritePMA>
            ep->xfer_buff += len;
 8008fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	695a      	ldr	r2, [r3, #20]
 8008ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ffa:	441a      	add	r2, r3
 8008ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800900c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6a1a      	ldr	r2, [r3, #32]
 8009014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	429a      	cmp	r2, r3
 8009022:	d90f      	bls.n	8009044 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6a1a      	ldr	r2, [r3, #32]
 8009030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009034:	1ad2      	subs	r2, r2, r3
 8009036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800903a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	621a      	str	r2, [r3, #32]
 8009042:	e00e      	b.n	8009062 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2200      	movs	r2, #0
 8009060:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009066:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	643b      	str	r3, [r7, #64]	@ 0x40
 800906e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	785b      	ldrb	r3, [r3, #1]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d177      	bne.n	800916e <USB_EPStartXfer+0x85e>
 800907e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009082:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	63bb      	str	r3, [r7, #56]	@ 0x38
 800908a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009098:	b29b      	uxth	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	4413      	add	r3, r2
 80090a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	011a      	lsls	r2, r3, #4
 80090b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b2:	4413      	add	r3, r2
 80090b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80090b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c8:	801a      	strh	r2, [r3, #0]
 80090ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80090d0:	d921      	bls.n	8009116 <USB_EPStartXfer+0x806>
 80090d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d6:	095b      	lsrs	r3, r3, #5
 80090d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80090dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e0:	f003 031f 	and.w	r3, r3, #31
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d104      	bne.n	80090f2 <USB_EPStartXfer+0x7e2>
 80090e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ec:	3b01      	subs	r3, #1
 80090ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80090f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	029b      	lsls	r3, r3, #10
 8009100:	b29b      	uxth	r3, r3
 8009102:	4313      	orrs	r3, r2
 8009104:	b29b      	uxth	r3, r3
 8009106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800910a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800910e:	b29a      	uxth	r2, r3
 8009110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009112:	801a      	strh	r2, [r3, #0]
 8009114:	e050      	b.n	80091b8 <USB_EPStartXfer+0x8a8>
 8009116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <USB_EPStartXfer+0x824>
 800911e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	b29b      	uxth	r3, r3
 8009124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800912c:	b29a      	uxth	r2, r3
 800912e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009130:	801a      	strh	r2, [r3, #0]
 8009132:	e041      	b.n	80091b8 <USB_EPStartXfer+0x8a8>
 8009134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009138:	085b      	lsrs	r3, r3, #1
 800913a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800913e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d004      	beq.n	8009154 <USB_EPStartXfer+0x844>
 800914a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800914e:	3301      	adds	r3, #1
 8009150:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	b29a      	uxth	r2, r3
 800915a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800915e:	b29b      	uxth	r3, r3
 8009160:	029b      	lsls	r3, r3, #10
 8009162:	b29b      	uxth	r3, r3
 8009164:	4313      	orrs	r3, r2
 8009166:	b29a      	uxth	r2, r3
 8009168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916a:	801a      	strh	r2, [r3, #0]
 800916c:	e024      	b.n	80091b8 <USB_EPStartXfer+0x8a8>
 800916e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	785b      	ldrb	r3, [r3, #1]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d11c      	bne.n	80091b8 <USB_EPStartXfer+0x8a8>
 800917e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800918c:	b29b      	uxth	r3, r3
 800918e:	461a      	mov	r2, r3
 8009190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009192:	4413      	add	r3, r2
 8009194:	643b      	str	r3, [r7, #64]	@ 0x40
 8009196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	011a      	lsls	r2, r3, #4
 80091a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091a6:	4413      	add	r3, r2
 80091a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80091ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80091b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	895b      	ldrh	r3, [r3, #10]
 80091c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6959      	ldr	r1, [r3, #20]
 80091d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d8:	b29b      	uxth	r3, r3
 80091da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80091de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80091e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80091e6:	6800      	ldr	r0, [r0, #0]
 80091e8:	f001 f881 	bl	800a2ee <USB_WritePMA>
 80091ec:	e227      	b.n	800963e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80091ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80091fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800920c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009224:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800922c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	441a      	add	r2, r3
 8009242:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800924a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800924e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009256:	b29b      	uxth	r3, r3
 8009258:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800925a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800925e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800926a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009274:	b29b      	uxth	r3, r3
 8009276:	461a      	mov	r2, r3
 8009278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800927a:	4413      	add	r3, r2
 800927c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800927e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	011a      	lsls	r2, r3, #4
 800928c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800928e:	4413      	add	r3, r2
 8009290:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009294:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800929a:	b29a      	uxth	r2, r3
 800929c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800929e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80092a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	891b      	ldrh	r3, [r3, #8]
 80092ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6959      	ldr	r1, [r3, #20]
 80092bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80092c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80092ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80092ce:	6800      	ldr	r0, [r0, #0]
 80092d0:	f001 f80d 	bl	800a2ee <USB_WritePMA>
 80092d4:	e1b3      	b.n	800963e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80092d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6a1a      	ldr	r2, [r3, #32]
 80092e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092e6:	1ad2      	subs	r2, r2, r3
 80092e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80092f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	b29b      	uxth	r3, r3
 8009312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 80c6 	beq.w	80094a8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800931c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	673b      	str	r3, [r7, #112]	@ 0x70
 8009328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800932c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d177      	bne.n	8009428 <USB_EPStartXfer+0xb18>
 8009338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800933c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009348:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009352:	b29b      	uxth	r3, r3
 8009354:	461a      	mov	r2, r3
 8009356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009358:	4413      	add	r3, r2
 800935a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800935c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	011a      	lsls	r2, r3, #4
 800936a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800936c:	4413      	add	r3, r2
 800936e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009372:	667b      	str	r3, [r7, #100]	@ 0x64
 8009374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800937e:	b29a      	uxth	r2, r3
 8009380:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009382:	801a      	strh	r2, [r3, #0]
 8009384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009388:	2b3e      	cmp	r3, #62	@ 0x3e
 800938a:	d921      	bls.n	80093d0 <USB_EPStartXfer+0xac0>
 800938c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009390:	095b      	lsrs	r3, r3, #5
 8009392:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939a:	f003 031f 	and.w	r3, r3, #31
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d104      	bne.n	80093ac <USB_EPStartXfer+0xa9c>
 80093a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80093a6:	3b01      	subs	r3, #1
 80093a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80093ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	029b      	lsls	r3, r3, #10
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	4313      	orrs	r3, r2
 80093be:	b29b      	uxth	r3, r3
 80093c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093cc:	801a      	strh	r2, [r3, #0]
 80093ce:	e050      	b.n	8009472 <USB_EPStartXfer+0xb62>
 80093d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <USB_EPStartXfer+0xade>
 80093d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	e041      	b.n	8009472 <USB_EPStartXfer+0xb62>
 80093ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f2:	085b      	lsrs	r3, r3, #1
 80093f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80093f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <USB_EPStartXfer+0xafe>
 8009404:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009408:	3301      	adds	r3, #1
 800940a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800940e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	b29a      	uxth	r2, r3
 8009414:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009418:	b29b      	uxth	r3, r3
 800941a:	029b      	lsls	r3, r3, #10
 800941c:	b29b      	uxth	r3, r3
 800941e:	4313      	orrs	r3, r2
 8009420:	b29a      	uxth	r2, r3
 8009422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009424:	801a      	strh	r2, [r3, #0]
 8009426:	e024      	b.n	8009472 <USB_EPStartXfer+0xb62>
 8009428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800942c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	785b      	ldrb	r3, [r3, #1]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d11c      	bne.n	8009472 <USB_EPStartXfer+0xb62>
 8009438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009446:	b29b      	uxth	r3, r3
 8009448:	461a      	mov	r2, r3
 800944a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800944c:	4413      	add	r3, r2
 800944e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	011a      	lsls	r2, r3, #4
 800945e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009460:	4413      	add	r3, r2
 8009462:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009466:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800946c:	b29a      	uxth	r2, r3
 800946e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009470:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	895b      	ldrh	r3, [r3, #10]
 800947e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6959      	ldr	r1, [r3, #20]
 800948e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009492:	b29b      	uxth	r3, r3
 8009494:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009498:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800949c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80094a0:	6800      	ldr	r0, [r0, #0]
 80094a2:	f000 ff24 	bl	800a2ee <USB_WritePMA>
 80094a6:	e0ca      	b.n	800963e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	785b      	ldrb	r3, [r3, #1]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d177      	bne.n	80095a8 <USB_EPStartXfer+0xc98>
 80094b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	461a      	mov	r2, r3
 80094d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094d8:	4413      	add	r3, r2
 80094da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	011a      	lsls	r2, r3, #4
 80094ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094ec:	4413      	add	r3, r2
 80094ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80094f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094fe:	b29a      	uxth	r2, r3
 8009500:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009502:	801a      	strh	r2, [r3, #0]
 8009504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009508:	2b3e      	cmp	r3, #62	@ 0x3e
 800950a:	d921      	bls.n	8009550 <USB_EPStartXfer+0xc40>
 800950c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800951a:	f003 031f 	and.w	r3, r3, #31
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <USB_EPStartXfer+0xc1c>
 8009522:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009526:	3b01      	subs	r3, #1
 8009528:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800952c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	b29a      	uxth	r2, r3
 8009532:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009536:	b29b      	uxth	r3, r3
 8009538:	029b      	lsls	r3, r3, #10
 800953a:	b29b      	uxth	r3, r3
 800953c:	4313      	orrs	r3, r2
 800953e:	b29b      	uxth	r3, r3
 8009540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009548:	b29a      	uxth	r2, r3
 800954a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800954c:	801a      	strh	r2, [r3, #0]
 800954e:	e05c      	b.n	800960a <USB_EPStartXfer+0xcfa>
 8009550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10a      	bne.n	800956e <USB_EPStartXfer+0xc5e>
 8009558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	b29b      	uxth	r3, r3
 800955e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009566:	b29a      	uxth	r2, r3
 8009568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	e04d      	b.n	800960a <USB_EPStartXfer+0xcfa>
 800956e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009572:	085b      	lsrs	r3, r3, #1
 8009574:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d004      	beq.n	800958e <USB_EPStartXfer+0xc7e>
 8009584:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009588:	3301      	adds	r3, #1
 800958a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800958e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29a      	uxth	r2, r3
 8009594:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009598:	b29b      	uxth	r3, r3
 800959a:	029b      	lsls	r3, r3, #10
 800959c:	b29b      	uxth	r3, r3
 800959e:	4313      	orrs	r3, r2
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095a4:	801a      	strh	r2, [r3, #0]
 80095a6:	e030      	b.n	800960a <USB_EPStartXfer+0xcfa>
 80095a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d128      	bne.n	800960a <USB_EPStartXfer+0xcfa>
 80095b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095dc:	4413      	add	r3, r2
 80095de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	011a      	lsls	r2, r3, #4
 80095f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095f4:	4413      	add	r3, r2
 80095f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80095fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009602:	b29a      	uxth	r2, r3
 8009604:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009608:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800960a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800960e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	891b      	ldrh	r3, [r3, #8]
 8009616:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800961a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6959      	ldr	r1, [r3, #20]
 8009626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962a:	b29b      	uxth	r3, r3
 800962c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009630:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009634:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009638:	6800      	ldr	r0, [r0, #0]
 800963a:	f000 fe58 	bl	800a2ee <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800963e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	b29b      	uxth	r3, r3
 800965c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009664:	817b      	strh	r3, [r7, #10]
 8009666:	897b      	ldrh	r3, [r7, #10]
 8009668:	f083 0310 	eor.w	r3, r3, #16
 800966c:	817b      	strh	r3, [r7, #10]
 800966e:	897b      	ldrh	r3, [r7, #10]
 8009670:	f083 0320 	eor.w	r3, r3, #32
 8009674:	817b      	strh	r3, [r7, #10]
 8009676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	441a      	add	r2, r3
 8009690:	897b      	ldrh	r3, [r7, #10]
 8009692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800969a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800969e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	8013      	strh	r3, [r2, #0]
 80096a6:	f000 bcde 	b.w	800a066 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80096aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	7b1b      	ldrb	r3, [r3, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f040 80bb 	bne.w	8009832 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80096bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	699a      	ldr	r2, [r3, #24]
 80096c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d917      	bls.n	8009708 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80096d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80096e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	699a      	ldr	r2, [r3, #24]
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f8:	1ad2      	subs	r2, r2, r3
 80096fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	619a      	str	r2, [r3, #24]
 8009706:	e00e      	b.n	8009726 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800970c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2200      	movs	r2, #0
 8009724:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009742:	b29b      	uxth	r3, r3
 8009744:	461a      	mov	r2, r3
 8009746:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800974a:	4413      	add	r3, r2
 800974c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	011a      	lsls	r2, r3, #4
 800975e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009762:	4413      	add	r3, r2
 8009764:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009768:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800976c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	b29b      	uxth	r3, r3
 8009774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009778:	b29a      	uxth	r2, r3
 800977a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800977e:	801a      	strh	r2, [r3, #0]
 8009780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009784:	2b3e      	cmp	r3, #62	@ 0x3e
 8009786:	d924      	bls.n	80097d2 <USB_EPStartXfer+0xec2>
 8009788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978c:	095b      	lsrs	r3, r3, #5
 800978e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009796:	f003 031f 	and.w	r3, r3, #31
 800979a:	2b00      	cmp	r3, #0
 800979c:	d104      	bne.n	80097a8 <USB_EPStartXfer+0xe98>
 800979e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80097a2:	3b01      	subs	r3, #1
 80097a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80097a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	029b      	lsls	r3, r3, #10
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	4313      	orrs	r3, r2
 80097bc:	b29b      	uxth	r3, r3
 80097be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097cc:	801a      	strh	r2, [r3, #0]
 80097ce:	f000 bc10 	b.w	8009ff2 <USB_EPStartXfer+0x16e2>
 80097d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10c      	bne.n	80097f4 <USB_EPStartXfer+0xee4>
 80097da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097f0:	801a      	strh	r2, [r3, #0]
 80097f2:	e3fe      	b.n	8009ff2 <USB_EPStartXfer+0x16e2>
 80097f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f8:	085b      	lsrs	r3, r3, #1
 80097fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80097fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d004      	beq.n	8009814 <USB_EPStartXfer+0xf04>
 800980a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800980e:	3301      	adds	r3, #1
 8009810:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009814:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	b29a      	uxth	r2, r3
 800981c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009820:	b29b      	uxth	r3, r3
 8009822:	029b      	lsls	r3, r3, #10
 8009824:	b29b      	uxth	r3, r3
 8009826:	4313      	orrs	r3, r2
 8009828:	b29a      	uxth	r2, r3
 800982a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800982e:	801a      	strh	r2, [r3, #0]
 8009830:	e3df      	b.n	8009ff2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	78db      	ldrb	r3, [r3, #3]
 800983e:	2b02      	cmp	r3, #2
 8009840:	f040 8218 	bne.w	8009c74 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b00      	cmp	r3, #0
 8009852:	f040 809d 	bne.w	8009990 <USB_EPStartXfer+0x1080>
 8009856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800985a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009872:	b29b      	uxth	r3, r3
 8009874:	461a      	mov	r2, r3
 8009876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800987a:	4413      	add	r3, r2
 800987c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	011a      	lsls	r2, r3, #4
 800988e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009892:	4413      	add	r3, r2
 8009894:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800989c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098ae:	801a      	strh	r2, [r3, #0]
 80098b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80098be:	d92b      	bls.n	8009918 <USB_EPStartXfer+0x1008>
 80098c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	095b      	lsrs	r3, r3, #5
 80098ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	f003 031f 	and.w	r3, r3, #31
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d104      	bne.n	80098f0 <USB_EPStartXfer+0xfe0>
 80098e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ea:	3b01      	subs	r3, #1
 80098ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	029b      	lsls	r3, r3, #10
 8009900:	b29b      	uxth	r3, r3
 8009902:	4313      	orrs	r3, r2
 8009904:	b29b      	uxth	r3, r3
 8009906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800990a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800990e:	b29a      	uxth	r2, r3
 8009910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009914:	801a      	strh	r2, [r3, #0]
 8009916:	e070      	b.n	80099fa <USB_EPStartXfer+0x10ea>
 8009918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800991c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10c      	bne.n	8009942 <USB_EPStartXfer+0x1032>
 8009928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	b29b      	uxth	r3, r3
 8009930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009938:	b29a      	uxth	r2, r3
 800993a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800993e:	801a      	strh	r2, [r3, #0]
 8009940:	e05b      	b.n	80099fa <USB_EPStartXfer+0x10ea>
 8009942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	085b      	lsrs	r3, r3, #1
 8009950:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	d004      	beq.n	8009972 <USB_EPStartXfer+0x1062>
 8009968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800996c:	3301      	adds	r3, #1
 800996e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29a      	uxth	r2, r3
 800997a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800997e:	b29b      	uxth	r3, r3
 8009980:	029b      	lsls	r3, r3, #10
 8009982:	b29b      	uxth	r3, r3
 8009984:	4313      	orrs	r3, r2
 8009986:	b29a      	uxth	r2, r3
 8009988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800998c:	801a      	strh	r2, [r3, #0]
 800998e:	e034      	b.n	80099fa <USB_EPStartXfer+0x10ea>
 8009990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	785b      	ldrb	r3, [r3, #1]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d12c      	bne.n	80099fa <USB_EPStartXfer+0x10ea>
 80099a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099bc:	b29b      	uxth	r3, r3
 80099be:	461a      	mov	r2, r3
 80099c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80099c4:	4413      	add	r3, r2
 80099c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	011a      	lsls	r2, r3, #4
 80099d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80099dc:	4413      	add	r3, r2
 80099de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80099e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80099f8:	801a      	strh	r2, [r3, #0]
 80099fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f040 809d 	bne.w	8009b54 <USB_EPStartXfer+0x1244>
 8009a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	461a      	mov	r2, r3
 8009a3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a3e:	4413      	add	r3, r2
 8009a40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	011a      	lsls	r2, r3, #4
 8009a52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a56:	4413      	add	r3, r2
 8009a58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a72:	801a      	strh	r2, [r3, #0]
 8009a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a82:	d92b      	bls.n	8009adc <USB_EPStartXfer+0x11cc>
 8009a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	095b      	lsrs	r3, r3, #5
 8009a92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 031f 	and.w	r3, r3, #31
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d104      	bne.n	8009ab4 <USB_EPStartXfer+0x11a4>
 8009aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	029b      	lsls	r3, r3, #10
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ad8:	801a      	strh	r2, [r3, #0]
 8009ada:	e069      	b.n	8009bb0 <USB_EPStartXfer+0x12a0>
 8009adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10c      	bne.n	8009b06 <USB_EPStartXfer+0x11f6>
 8009aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b02:	801a      	strh	r2, [r3, #0]
 8009b04:	e054      	b.n	8009bb0 <USB_EPStartXfer+0x12a0>
 8009b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	085b      	lsrs	r3, r3, #1
 8009b14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d004      	beq.n	8009b36 <USB_EPStartXfer+0x1226>
 8009b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b30:	3301      	adds	r3, #1
 8009b32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	029b      	lsls	r3, r3, #10
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b50:	801a      	strh	r2, [r3, #0]
 8009b52:	e02d      	b.n	8009bb0 <USB_EPStartXfer+0x12a0>
 8009b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	785b      	ldrb	r3, [r3, #1]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d125      	bne.n	8009bb0 <USB_EPStartXfer+0x12a0>
 8009b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	461a      	mov	r2, r3
 8009b76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	011a      	lsls	r2, r3, #4
 8009b8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009b92:	4413      	add	r3, r2
 8009b94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bae:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 8218 	beq.w	8009ff2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009be2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d005      	beq.n	8009bfa <USB_EPStartXfer+0x12ea>
 8009bee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10d      	bne.n	8009c16 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009bfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f040 81f5 	bne.w	8009ff2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f040 81ee 	bne.w	8009ff2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c3c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	441a      	add	r2, r3
 8009c5a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	8013      	strh	r3, [r2, #0]
 8009c72:	e1be      	b.n	8009ff2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	78db      	ldrb	r3, [r3, #3]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	f040 81b4 	bne.w	8009fee <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	699a      	ldr	r2, [r3, #24]
 8009c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d917      	bls.n	8009cd2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	699a      	ldr	r2, [r3, #24]
 8009cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc2:	1ad2      	subs	r2, r2, r3
 8009cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	619a      	str	r2, [r3, #24]
 8009cd0:	e00e      	b.n	8009cf0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2200      	movs	r2, #0
 8009cee:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	785b      	ldrb	r3, [r3, #1]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f040 8085 	bne.w	8009e0c <USB_EPStartXfer+0x14fc>
 8009d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	461a      	mov	r2, r3
 8009d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009d26:	4413      	add	r3, r2
 8009d28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	011a      	lsls	r2, r3, #4
 8009d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009d3e:	4413      	add	r3, r2
 8009d40:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d5a:	801a      	strh	r2, [r3, #0]
 8009d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d60:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d62:	d923      	bls.n	8009dac <USB_EPStartXfer+0x149c>
 8009d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d68:	095b      	lsrs	r3, r3, #5
 8009d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d72:	f003 031f 	and.w	r3, r3, #31
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d104      	bne.n	8009d84 <USB_EPStartXfer+0x1474>
 8009d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009d84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	029b      	lsls	r3, r3, #10
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	4313      	orrs	r3, r2
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009da8:	801a      	strh	r2, [r3, #0]
 8009daa:	e060      	b.n	8009e6e <USB_EPStartXfer+0x155e>
 8009dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10c      	bne.n	8009dce <USB_EPStartXfer+0x14be>
 8009db4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009dca:	801a      	strh	r2, [r3, #0]
 8009dcc:	e04f      	b.n	8009e6e <USB_EPStartXfer+0x155e>
 8009dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd2:	085b      	lsrs	r3, r3, #1
 8009dd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d004      	beq.n	8009dee <USB_EPStartXfer+0x14de>
 8009de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009de8:	3301      	adds	r3, #1
 8009dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009dee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	029b      	lsls	r3, r3, #10
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	4313      	orrs	r3, r2
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e08:	801a      	strh	r2, [r3, #0]
 8009e0a:	e030      	b.n	8009e6e <USB_EPStartXfer+0x155e>
 8009e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	785b      	ldrb	r3, [r3, #1]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d128      	bne.n	8009e6e <USB_EPStartXfer+0x155e>
 8009e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e40:	4413      	add	r3, r2
 8009e42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	011a      	lsls	r2, r3, #4
 8009e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e58:	4413      	add	r3, r2
 8009e5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009e5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009e6c:	801a      	strh	r2, [r3, #0]
 8009e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	785b      	ldrb	r3, [r3, #1]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f040 8085 	bne.w	8009f98 <USB_EPStartXfer+0x1688>
 8009e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	461a      	mov	r2, r3
 8009eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	011a      	lsls	r2, r3, #4
 8009ec6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009eca:	4413      	add	r3, r2
 8009ecc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ed4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ee6:	801a      	strh	r2, [r3, #0]
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eec:	2b3e      	cmp	r3, #62	@ 0x3e
 8009eee:	d923      	bls.n	8009f38 <USB_EPStartXfer+0x1628>
 8009ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef4:	095b      	lsrs	r3, r3, #5
 8009ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efe:	f003 031f 	and.w	r3, r3, #31
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d104      	bne.n	8009f10 <USB_EPStartXfer+0x1600>
 8009f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	029b      	lsls	r3, r3, #10
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	4313      	orrs	r3, r2
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f34:	801a      	strh	r2, [r3, #0]
 8009f36:	e05c      	b.n	8009ff2 <USB_EPStartXfer+0x16e2>
 8009f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10c      	bne.n	8009f5a <USB_EPStartXfer+0x164a>
 8009f40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f56:	801a      	strh	r2, [r3, #0]
 8009f58:	e04b      	b.n	8009ff2 <USB_EPStartXfer+0x16e2>
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5e:	085b      	lsrs	r3, r3, #1
 8009f60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d004      	beq.n	8009f7a <USB_EPStartXfer+0x166a>
 8009f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f74:	3301      	adds	r3, #1
 8009f76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	029b      	lsls	r3, r3, #10
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f94:	801a      	strh	r2, [r3, #0]
 8009f96:	e02c      	b.n	8009ff2 <USB_EPStartXfer+0x16e2>
 8009f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	785b      	ldrb	r3, [r3, #1]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d124      	bne.n	8009ff2 <USB_EPStartXfer+0x16e2>
 8009fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	461a      	mov	r2, r3
 8009fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	011a      	lsls	r2, r3, #4
 8009fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009fea:	801a      	strh	r2, [r3, #0]
 8009fec:	e001      	b.n	8009ff2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e03a      	b.n	800a068 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a018:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a01c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a020:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a024:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a028:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a02c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a030:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	441a      	add	r2, r3
 800a04e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a05a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a05e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a062:	b29b      	uxth	r3, r3
 800a064:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a072:	b480      	push	{r7}
 800a074:	b085      	sub	sp, #20
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	785b      	ldrb	r3, [r3, #1]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d020      	beq.n	800a0c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	b29b      	uxth	r3, r3
 800a092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a09a:	81bb      	strh	r3, [r7, #12]
 800a09c:	89bb      	ldrh	r3, [r7, #12]
 800a09e:	f083 0310 	eor.w	r3, r3, #16
 800a0a2:	81bb      	strh	r3, [r7, #12]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	441a      	add	r2, r3
 800a0ae:	89bb      	ldrh	r3, [r7, #12]
 800a0b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	8013      	strh	r3, [r2, #0]
 800a0c4:	e01f      	b.n	800a106 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4413      	add	r3, r2
 800a0d0:	881b      	ldrh	r3, [r3, #0]
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0dc:	81fb      	strh	r3, [r7, #14]
 800a0de:	89fb      	ldrh	r3, [r7, #14]
 800a0e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a0e4:	81fb      	strh	r3, [r7, #14]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	441a      	add	r2, r3
 800a0f0:	89fb      	ldrh	r3, [r7, #14]
 800a0f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a102:	b29b      	uxth	r3, r3
 800a104:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr

0800a112 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a112:	b480      	push	{r7}
 800a114:	b087      	sub	sp, #28
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	7b1b      	ldrb	r3, [r3, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	f040 809d 	bne.w	800a260 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	785b      	ldrb	r3, [r3, #1]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d04c      	beq.n	800a1c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	823b      	strh	r3, [r7, #16]
 800a13c:	8a3b      	ldrh	r3, [r7, #16]
 800a13e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a142:	2b00      	cmp	r3, #0
 800a144:	d01b      	beq.n	800a17e <USB_EPClearStall+0x6c>
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	b29b      	uxth	r3, r3
 800a154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a15c:	81fb      	strh	r3, [r7, #14]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	441a      	add	r2, r3
 800a168:	89fb      	ldrh	r3, [r7, #14]
 800a16a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a16e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a176:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	78db      	ldrb	r3, [r3, #3]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d06c      	beq.n	800a260 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	881b      	ldrh	r3, [r3, #0]
 800a192:	b29b      	uxth	r3, r3
 800a194:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a19c:	81bb      	strh	r3, [r7, #12]
 800a19e:	89bb      	ldrh	r3, [r7, #12]
 800a1a0:	f083 0320 	eor.w	r3, r3, #32
 800a1a4:	81bb      	strh	r3, [r7, #12]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	441a      	add	r2, r3
 800a1b0:	89bb      	ldrh	r3, [r7, #12]
 800a1b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	8013      	strh	r3, [r2, #0]
 800a1c6:	e04b      	b.n	800a260 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	82fb      	strh	r3, [r7, #22]
 800a1d6:	8afb      	ldrh	r3, [r7, #22]
 800a1d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d01b      	beq.n	800a218 <USB_EPClearStall+0x106>
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1f6:	82bb      	strh	r3, [r7, #20]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	441a      	add	r2, r3
 800a202:	8abb      	ldrh	r3, [r7, #20]
 800a204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a20c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a214:	b29b      	uxth	r3, r3
 800a216:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	b29b      	uxth	r3, r3
 800a226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a22a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a22e:	827b      	strh	r3, [r7, #18]
 800a230:	8a7b      	ldrh	r3, [r7, #18]
 800a232:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a236:	827b      	strh	r3, [r7, #18]
 800a238:	8a7b      	ldrh	r3, [r7, #18]
 800a23a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a23e:	827b      	strh	r3, [r7, #18]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	441a      	add	r2, r3
 800a24a:	8a7b      	ldrh	r3, [r7, #18]
 800a24c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	bc80      	pop	{r7}
 800a26a:	4770      	bx	lr

0800a26c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a278:	78fb      	ldrb	r3, [r7, #3]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2280      	movs	r2, #128	@ 0x80
 800a282:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr

0800a292 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bc80      	pop	{r7}
 800a2a4:	4770      	bx	lr

0800a2a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b083      	sub	sp, #12
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bc80      	pop	{r7}
 800a2b8:	4770      	bx	lr

0800a2ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bc80      	pop	{r7}
 800a2d6:	4770      	bx	lr

0800a2d8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bc80      	pop	{r7}
 800a2ec:	4770      	bx	lr

0800a2ee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b08b      	sub	sp, #44	@ 0x2c
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	60f8      	str	r0, [r7, #12]
 800a2f6:	60b9      	str	r1, [r7, #8]
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	80fb      	strh	r3, [r7, #6]
 800a300:	4613      	mov	r3, r2
 800a302:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a304:	88bb      	ldrh	r3, [r7, #4]
 800a306:	3301      	adds	r3, #1
 800a308:	085b      	lsrs	r3, r3, #1
 800a30a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a314:	88fb      	ldrh	r3, [r7, #6]
 800a316:	005a      	lsls	r2, r3, #1
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a320:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
 800a326:	e01e      	b.n	800a366 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	3301      	adds	r3, #1
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	b21a      	sxth	r2, r3
 800a338:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	b21b      	sxth	r3, r3
 800a340:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	8a7a      	ldrh	r2, [r7, #18]
 800a346:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	3302      	adds	r3, #2
 800a34c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	3302      	adds	r3, #2
 800a352:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	3301      	adds	r3, #1
 800a358:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	3301      	adds	r3, #1
 800a35e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a362:	3b01      	subs	r3, #1
 800a364:	627b      	str	r3, [r7, #36]	@ 0x24
 800a366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1dd      	bne.n	800a328 <USB_WritePMA+0x3a>
  }
}
 800a36c:	bf00      	nop
 800a36e:	bf00      	nop
 800a370:	372c      	adds	r7, #44	@ 0x2c
 800a372:	46bd      	mov	sp, r7
 800a374:	bc80      	pop	{r7}
 800a376:	4770      	bx	lr

0800a378 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a378:	b480      	push	{r7}
 800a37a:	b08b      	sub	sp, #44	@ 0x2c
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4611      	mov	r1, r2
 800a384:	461a      	mov	r2, r3
 800a386:	460b      	mov	r3, r1
 800a388:	80fb      	strh	r3, [r7, #6]
 800a38a:	4613      	mov	r3, r2
 800a38c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a38e:	88bb      	ldrh	r3, [r7, #4]
 800a390:	085b      	lsrs	r3, r3, #1
 800a392:	b29b      	uxth	r3, r3
 800a394:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a39e:	88fb      	ldrh	r3, [r7, #6]
 800a3a0:	005a      	lsls	r2, r3, #1
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3b0:	e01b      	b.n	800a3ea <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	3302      	adds	r3, #2
 800a3be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	b2da      	uxtb	r2, r3
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	0a1b      	lsrs	r3, r3, #8
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	3302      	adds	r3, #2
 800a3e2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e0      	bne.n	800a3b2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a3f0:	88bb      	ldrh	r3, [r7, #4]
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d007      	beq.n	800a40c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	b29b      	uxth	r3, r3
 800a402:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	b2da      	uxtb	r2, r3
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	701a      	strb	r2, [r3, #0]
  }
}
 800a40c:	bf00      	nop
 800a40e:	372c      	adds	r7, #44	@ 0x2c
 800a410:	46bd      	mov	sp, r7
 800a412:	bc80      	pop	{r7}
 800a414:	4770      	bx	lr

0800a416 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b084      	sub	sp, #16
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	460b      	mov	r3, r1
 800a420:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a422:	2300      	movs	r3, #0
 800a424:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	7c1b      	ldrb	r3, [r3, #16]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d115      	bne.n	800a45a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a42e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a432:	2202      	movs	r2, #2
 800a434:	2181      	movs	r1, #129	@ 0x81
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 fe81 	bl	800c13e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a442:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a446:	2202      	movs	r2, #2
 800a448:	2101      	movs	r1, #1
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 fe77 	bl	800c13e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800a458:	e012      	b.n	800a480 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a45a:	2340      	movs	r3, #64	@ 0x40
 800a45c:	2202      	movs	r2, #2
 800a45e:	2181      	movs	r1, #129	@ 0x81
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f001 fe6c 	bl	800c13e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a46c:	2340      	movs	r3, #64	@ 0x40
 800a46e:	2202      	movs	r2, #2
 800a470:	2101      	movs	r1, #1
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f001 fe63 	bl	800c13e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a480:	2308      	movs	r3, #8
 800a482:	2203      	movs	r2, #3
 800a484:	2182      	movs	r1, #130	@ 0x82
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f001 fe59 	bl	800c13e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a492:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a496:	f001 ff79 	bl	800c38c <USBD_static_malloc>
 800a49a:	4602      	mov	r2, r0
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d102      	bne.n	800a4b2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	73fb      	strb	r3, [r7, #15]
 800a4b0:	e026      	b.n	800a500 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4b8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	7c1b      	ldrb	r3, [r3, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d109      	bne.n	800a4f0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 ff19 	bl	800c320 <USBD_LL_PrepareReceive>
 800a4ee:	e007      	b.n	800a500 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4f6:	2340      	movs	r3, #64	@ 0x40
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 ff10 	bl	800c320 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a500:	7bfb      	ldrb	r3, [r7, #15]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	460b      	mov	r3, r1
 800a514:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a51a:	2181      	movs	r1, #129	@ 0x81
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 fe34 	bl	800c18a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a528:	2101      	movs	r1, #1
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f001 fe2d 	bl	800c18a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a538:	2182      	movs	r1, #130	@ 0x82
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f001 fe25 	bl	800c18a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00e      	beq.n	800a56e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a560:	4618      	mov	r0, r3
 800a562:	f001 ff1f 	bl	800c3a4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a588:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a58a:	2300      	movs	r3, #0
 800a58c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a58e:	2300      	movs	r3, #0
 800a590:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d039      	beq.n	800a616 <USBD_CDC_Setup+0x9e>
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	d17f      	bne.n	800a6a6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	88db      	ldrh	r3, [r3, #6]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d029      	beq.n	800a602 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	b25b      	sxtb	r3, r3
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	da11      	bge.n	800a5dc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a5c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	88d2      	ldrh	r2, [r2, #6]
 800a5ca:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a5cc:	6939      	ldr	r1, [r7, #16]
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	88db      	ldrh	r3, [r3, #6]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f001 fa05 	bl	800b9e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a5da:	e06b      	b.n	800a6b4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	785a      	ldrb	r2, [r3, #1]
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	88db      	ldrh	r3, [r3, #6]
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a5f2:	6939      	ldr	r1, [r7, #16]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	88db      	ldrh	r3, [r3, #6]
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f001 fa20 	bl	800ba40 <USBD_CtlPrepareRx>
      break;
 800a600:	e058      	b.n	800a6b4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	7850      	ldrb	r0, [r2, #1]
 800a60e:	2200      	movs	r2, #0
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	4798      	blx	r3
      break;
 800a614:	e04e      	b.n	800a6b4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	785b      	ldrb	r3, [r3, #1]
 800a61a:	2b0b      	cmp	r3, #11
 800a61c:	d02e      	beq.n	800a67c <USBD_CDC_Setup+0x104>
 800a61e:	2b0b      	cmp	r3, #11
 800a620:	dc38      	bgt.n	800a694 <USBD_CDC_Setup+0x11c>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <USBD_CDC_Setup+0xb4>
 800a626:	2b0a      	cmp	r3, #10
 800a628:	d014      	beq.n	800a654 <USBD_CDC_Setup+0xdc>
 800a62a:	e033      	b.n	800a694 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a632:	2b03      	cmp	r3, #3
 800a634:	d107      	bne.n	800a646 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a636:	f107 030c 	add.w	r3, r7, #12
 800a63a:	2202      	movs	r2, #2
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 f9d0 	bl	800b9e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a644:	e02e      	b.n	800a6a4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 f961 	bl	800b910 <USBD_CtlError>
            ret = USBD_FAIL;
 800a64e:	2302      	movs	r3, #2
 800a650:	75fb      	strb	r3, [r7, #23]
          break;
 800a652:	e027      	b.n	800a6a4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d107      	bne.n	800a66e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a65e:	f107 030f 	add.w	r3, r7, #15
 800a662:	2201      	movs	r2, #1
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f001 f9bc 	bl	800b9e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a66c:	e01a      	b.n	800a6a4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 f94d 	bl	800b910 <USBD_CtlError>
            ret = USBD_FAIL;
 800a676:	2302      	movs	r3, #2
 800a678:	75fb      	strb	r3, [r7, #23]
          break;
 800a67a:	e013      	b.n	800a6a4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a682:	2b03      	cmp	r3, #3
 800a684:	d00d      	beq.n	800a6a2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f001 f941 	bl	800b910 <USBD_CtlError>
            ret = USBD_FAIL;
 800a68e:	2302      	movs	r3, #2
 800a690:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a692:	e006      	b.n	800a6a2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f001 f93a 	bl	800b910 <USBD_CtlError>
          ret = USBD_FAIL;
 800a69c:	2302      	movs	r3, #2
 800a69e:	75fb      	strb	r3, [r7, #23]
          break;
 800a6a0:	e000      	b.n	800a6a4 <USBD_CDC_Setup+0x12c>
          break;
 800a6a2:	bf00      	nop
      }
      break;
 800a6a4:	e006      	b.n	800a6b4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f001 f931 	bl	800b910 <USBD_CtlError>
      ret = USBD_FAIL;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	75fb      	strb	r3, [r7, #23]
      break;
 800a6b2:	bf00      	nop
  }

  return ret;
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6d0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6d8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d03a      	beq.n	800a75a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a6e4:	78fa      	ldrb	r2, [r7, #3]
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	440b      	add	r3, r1
 800a6f2:	331c      	adds	r3, #28
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d029      	beq.n	800a74e <USBD_CDC_DataIn+0x90>
 800a6fa:	78fa      	ldrb	r2, [r7, #3]
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	4613      	mov	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4413      	add	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	440b      	add	r3, r1
 800a708:	331c      	adds	r3, #28
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	78f9      	ldrb	r1, [r7, #3]
 800a70e:	68b8      	ldr	r0, [r7, #8]
 800a710:	460b      	mov	r3, r1
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	440b      	add	r3, r1
 800a716:	00db      	lsls	r3, r3, #3
 800a718:	4403      	add	r3, r0
 800a71a:	3338      	adds	r3, #56	@ 0x38
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	fbb2 f1f3 	udiv	r1, r2, r3
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d110      	bne.n	800a74e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	440b      	add	r3, r1
 800a73a:	331c      	adds	r3, #28
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a740:	78f9      	ldrb	r1, [r7, #3]
 800a742:	2300      	movs	r3, #0
 800a744:	2200      	movs	r2, #0
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f001 fdc7 	bl	800c2da <USBD_LL_Transmit>
 800a74c:	e003      	b.n	800a756 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	e000      	b.n	800a75c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a75a:	2302      	movs	r3, #2
  }
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a776:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 fdf2 	bl	800c366 <USBD_LL_GetRxDataSize>
 800a782:	4602      	mov	r2, r0
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00d      	beq.n	800a7b0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	4798      	blx	r3

    return USBD_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	e000      	b.n	800a7b2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a7b0:	2302      	movs	r3, #2
  }
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7c8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d014      	beq.n	800a7fe <USBD_CDC_EP0_RxReady+0x44>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a7da:	2bff      	cmp	r3, #255	@ 0xff
 800a7dc:	d00f      	beq.n	800a7fe <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a7ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	22ff      	movs	r2, #255	@ 0xff
 800a7fa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2243      	movs	r2, #67	@ 0x43
 800a814:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a816:	4b03      	ldr	r3, [pc, #12]	@ (800a824 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bc80      	pop	{r7}
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	20000190 	.word	0x20000190

0800a828 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2243      	movs	r2, #67	@ 0x43
 800a834:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a836:	4b03      	ldr	r3, [pc, #12]	@ (800a844 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a838:	4618      	mov	r0, r3
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bc80      	pop	{r7}
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	2000014c 	.word	0x2000014c

0800a848 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2243      	movs	r2, #67	@ 0x43
 800a854:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a856:	4b03      	ldr	r3, [pc, #12]	@ (800a864 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bc80      	pop	{r7}
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	200001d4 	.word	0x200001d4

0800a868 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	220a      	movs	r2, #10
 800a874:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a876:	4b03      	ldr	r3, [pc, #12]	@ (800a884 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bc80      	pop	{r7}
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	20000108 	.word	0x20000108

0800a888 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a892:	2302      	movs	r3, #2
 800a894:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d005      	beq.n	800a8a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bc80      	pop	{r7}
 800a8b2:	4770      	bx	lr

0800a8b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b087      	sub	sp, #28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a8d2:	88fa      	ldrh	r2, [r7, #6]
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	371c      	adds	r7, #28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bc80      	pop	{r7}
 800a8e4:	4770      	bx	lr

0800a8e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b085      	sub	sp, #20
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	bc80      	pop	{r7}
 800a90a:	4770      	bx	lr

0800a90c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a91a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a922:	2b00      	cmp	r3, #0
 800a924:	d01c      	beq.n	800a960 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d115      	bne.n	800a95c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2201      	movs	r2, #1
 800a934:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a94e:	b29b      	uxth	r3, r3
 800a950:	2181      	movs	r1, #129	@ 0x81
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 fcc1 	bl	800c2da <USBD_LL_Transmit>

      return USBD_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	e002      	b.n	800a962 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e000      	b.n	800a962 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a960:	2302      	movs	r3, #2
  }
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a978:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a980:	2b00      	cmp	r3, #0
 800a982:	d017      	beq.n	800a9b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	7c1b      	ldrb	r3, [r3, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d109      	bne.n	800a9a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a992:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a996:	2101      	movs	r1, #1
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 fcc1 	bl	800c320 <USBD_LL_PrepareReceive>
 800a99e:	e007      	b.n	800a9b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a9a6:	2340      	movs	r3, #64	@ 0x40
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f001 fcb8 	bl	800c320 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e000      	b.n	800a9b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a9b4:	2302      	movs	r3, #2
  }
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e01a      	b.n	800aa0c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d003      	beq.n	800a9e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	79fa      	ldrb	r2, [r7, #7]
 800aa02:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f001 fb25 	bl	800c054 <USBD_LL_Init>

  return USBD_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d006      	beq.n	800aa36 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73fb      	strb	r3, [r7, #15]
 800aa34:	e001      	b.n	800aa3a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aa36:	2302      	movs	r3, #2
 800aa38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bc80      	pop	{r7}
 800aa44:	4770      	bx	lr

0800aa46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b082      	sub	sp, #8
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 fb5a 	bl	800c108 <USBD_LL_Start>

  return USBD_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bc80      	pop	{r7}
 800aa70:	4770      	bx	lr

0800aa72 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aa7e:	2302      	movs	r3, #2
 800aa80:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00c      	beq.n	800aaa6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	78fa      	ldrb	r2, [r7, #3]
 800aa96:	4611      	mov	r1, r2
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	4798      	blx	r3
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	78fa      	ldrb	r2, [r7, #3]
 800aac6:	4611      	mov	r1, r2
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	4798      	blx	r3

  return USBD_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800aae6:	6839      	ldr	r1, [r7, #0]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 fed8 	bl	800b89e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aafc:	461a      	mov	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ab0a:	f003 031f 	and.w	r3, r3, #31
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d016      	beq.n	800ab40 <USBD_LL_SetupStage+0x6a>
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d81c      	bhi.n	800ab50 <USBD_LL_SetupStage+0x7a>
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <USBD_LL_SetupStage+0x4a>
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d008      	beq.n	800ab30 <USBD_LL_SetupStage+0x5a>
 800ab1e:	e017      	b.n	800ab50 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f9cb 	bl	800aec4 <USBD_StdDevReq>
      break;
 800ab2e:	e01a      	b.n	800ab66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fa2d 	bl	800af98 <USBD_StdItfReq>
      break;
 800ab3e:	e012      	b.n	800ab66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ab46:	4619      	mov	r1, r3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 fa6d 	bl	800b028 <USBD_StdEPReq>
      break;
 800ab4e:	e00a      	b.n	800ab66 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ab56:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f001 fb32 	bl	800c1c8 <USBD_LL_StallEP>
      break;
 800ab64:	bf00      	nop
  }

  return USBD_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ab7e:	7afb      	ldrb	r3, [r7, #11]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d14b      	bne.n	800ac1c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ab8a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d134      	bne.n	800ac00 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	68da      	ldr	r2, [r3, #12]
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d919      	bls.n	800abd6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	68da      	ldr	r2, [r3, #12]
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	1ad2      	subs	r2, r2, r3
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800abb8:	429a      	cmp	r2, r3
 800abba:	d203      	bcs.n	800abc4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	e002      	b.n	800abca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800abc8:	b29b      	uxth	r3, r3
 800abca:	461a      	mov	r2, r3
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f000 ff54 	bl	800ba7c <USBD_CtlContinueRx>
 800abd4:	e038      	b.n	800ac48 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00a      	beq.n	800abf8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800abe8:	2b03      	cmp	r3, #3
 800abea:	d105      	bne.n	800abf8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 ff51 	bl	800baa0 <USBD_CtlSendStatus>
 800abfe:	e023      	b.n	800ac48 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ac06:	2b05      	cmp	r3, #5
 800ac08:	d11e      	bne.n	800ac48 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ac12:	2100      	movs	r1, #0
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f001 fad7 	bl	800c1c8 <USBD_LL_StallEP>
 800ac1a:	e015      	b.n	800ac48 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00d      	beq.n	800ac44 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d108      	bne.n	800ac44 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	7afa      	ldrb	r2, [r7, #11]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	4798      	blx	r3
 800ac42:	e001      	b.n	800ac48 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ac44:	2302      	movs	r3, #2
 800ac46:	e000      	b.n	800ac4a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b086      	sub	sp, #24
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	607a      	str	r2, [r7, #4]
 800ac5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d17f      	bne.n	800ad66 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3314      	adds	r3, #20
 800ac6a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d15c      	bne.n	800ad30 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d915      	bls.n	800acae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	1ad2      	subs	r2, r2, r3
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	461a      	mov	r2, r3
 800ac98:	6879      	ldr	r1, [r7, #4]
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f000 febe 	bl	800ba1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aca0:	2300      	movs	r3, #0
 800aca2:	2200      	movs	r2, #0
 800aca4:	2100      	movs	r1, #0
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f001 fb3a 	bl	800c320 <USBD_LL_PrepareReceive>
 800acac:	e04e      	b.n	800ad4c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	6912      	ldr	r2, [r2, #16]
 800acb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800acba:	fb01 f202 	mul.w	r2, r1, r2
 800acbe:	1a9b      	subs	r3, r3, r2
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d11c      	bne.n	800acfe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800accc:	429a      	cmp	r2, r3
 800acce:	d316      	bcc.n	800acfe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	689a      	ldr	r2, [r3, #8]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800acda:	429a      	cmp	r2, r3
 800acdc:	d20f      	bcs.n	800acfe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800acde:	2200      	movs	r2, #0
 800ace0:	2100      	movs	r1, #0
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f000 fe9a 	bl	800ba1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acf0:	2300      	movs	r3, #0
 800acf2:	2200      	movs	r2, #0
 800acf4:	2100      	movs	r1, #0
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f001 fb12 	bl	800c320 <USBD_LL_PrepareReceive>
 800acfc:	e026      	b.n	800ad4c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ad10:	2b03      	cmp	r3, #3
 800ad12:	d105      	bne.n	800ad20 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ad20:	2180      	movs	r1, #128	@ 0x80
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f001 fa50 	bl	800c1c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 fecc 	bl	800bac6 <USBD_CtlReceiveStatus>
 800ad2e:	e00d      	b.n	800ad4c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ad36:	2b04      	cmp	r3, #4
 800ad38:	d004      	beq.n	800ad44 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d103      	bne.n	800ad4c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ad44:	2180      	movs	r1, #128	@ 0x80
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f001 fa3e 	bl	800c1c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d11d      	bne.n	800ad92 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f7ff fe81 	bl	800aa5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ad64:	e015      	b.n	800ad92 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad6c:	695b      	ldr	r3, [r3, #20]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00d      	beq.n	800ad8e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	d108      	bne.n	800ad8e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad82:	695b      	ldr	r3, [r3, #20]
 800ad84:	7afa      	ldrb	r2, [r7, #11]
 800ad86:	4611      	mov	r1, r2
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	4798      	blx	r3
 800ad8c:	e001      	b.n	800ad92 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad8e:	2302      	movs	r3, #2
 800ad90:	e000      	b.n	800ad94 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ada4:	2340      	movs	r3, #64	@ 0x40
 800ada6:	2200      	movs	r2, #0
 800ada8:	2100      	movs	r1, #0
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f001 f9c7 	bl	800c13e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2240      	movs	r2, #64	@ 0x40
 800adbc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adc0:	2340      	movs	r3, #64	@ 0x40
 800adc2:	2200      	movs	r2, #0
 800adc4:	2180      	movs	r1, #128	@ 0x80
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f001 f9b9 	bl	800c13e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2240      	movs	r2, #64	@ 0x40
 800add6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d009      	beq.n	800ae14 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	6852      	ldr	r2, [r2, #4]
 800ae0c:	b2d2      	uxtb	r2, r2
 800ae0e:	4611      	mov	r1, r2
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	4798      	blx	r3
  }

  return USBD_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b083      	sub	sp, #12
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	460b      	mov	r3, r1
 800ae28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	78fa      	ldrb	r2, [r7, #3]
 800ae2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bc80      	pop	{r7}
 800ae3a:	4770      	bx	lr

0800ae3c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2204      	movs	r2, #4
 800ae54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bc80      	pop	{r7}
 800ae62:	4770      	bx	lr

0800ae64 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae72:	2b04      	cmp	r3, #4
 800ae74:	d105      	bne.n	800ae82 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bc80      	pop	{r7}
 800ae8c:	4770      	bx	lr

0800ae8e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b082      	sub	sp, #8
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d10b      	bne.n	800aeb8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d005      	beq.n	800aeb8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
	...

0800aec4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aeda:	2b40      	cmp	r3, #64	@ 0x40
 800aedc:	d005      	beq.n	800aeea <USBD_StdDevReq+0x26>
 800aede:	2b40      	cmp	r3, #64	@ 0x40
 800aee0:	d84f      	bhi.n	800af82 <USBD_StdDevReq+0xbe>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d009      	beq.n	800aefa <USBD_StdDevReq+0x36>
 800aee6:	2b20      	cmp	r3, #32
 800aee8:	d14b      	bne.n	800af82 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	4798      	blx	r3
      break;
 800aef8:	e048      	b.n	800af8c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	785b      	ldrb	r3, [r3, #1]
 800aefe:	2b09      	cmp	r3, #9
 800af00:	d839      	bhi.n	800af76 <USBD_StdDevReq+0xb2>
 800af02:	a201      	add	r2, pc, #4	@ (adr r2, 800af08 <USBD_StdDevReq+0x44>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af59 	.word	0x0800af59
 800af0c:	0800af6d 	.word	0x0800af6d
 800af10:	0800af77 	.word	0x0800af77
 800af14:	0800af63 	.word	0x0800af63
 800af18:	0800af77 	.word	0x0800af77
 800af1c:	0800af3b 	.word	0x0800af3b
 800af20:	0800af31 	.word	0x0800af31
 800af24:	0800af77 	.word	0x0800af77
 800af28:	0800af4f 	.word	0x0800af4f
 800af2c:	0800af45 	.word	0x0800af45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f9dc 	bl	800b2f0 <USBD_GetDescriptor>
          break;
 800af38:	e022      	b.n	800af80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fb3f 	bl	800b5c0 <USBD_SetAddress>
          break;
 800af42:	e01d      	b.n	800af80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fb7e 	bl	800b648 <USBD_SetConfig>
          break;
 800af4c:	e018      	b.n	800af80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fc07 	bl	800b764 <USBD_GetConfig>
          break;
 800af56:	e013      	b.n	800af80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fc37 	bl	800b7ce <USBD_GetStatus>
          break;
 800af60:	e00e      	b.n	800af80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fc65 	bl	800b834 <USBD_SetFeature>
          break;
 800af6a:	e009      	b.n	800af80 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fc74 	bl	800b85c <USBD_ClrFeature>
          break;
 800af74:	e004      	b.n	800af80 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fcc9 	bl	800b910 <USBD_CtlError>
          break;
 800af7e:	bf00      	nop
      }
      break;
 800af80:	e004      	b.n	800af8c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fcc3 	bl	800b910 <USBD_CtlError>
      break;
 800af8a:	bf00      	nop
  }

  return ret;
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop

0800af98 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800afae:	2b40      	cmp	r3, #64	@ 0x40
 800afb0:	d005      	beq.n	800afbe <USBD_StdItfReq+0x26>
 800afb2:	2b40      	cmp	r3, #64	@ 0x40
 800afb4:	d82e      	bhi.n	800b014 <USBD_StdItfReq+0x7c>
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <USBD_StdItfReq+0x26>
 800afba:	2b20      	cmp	r3, #32
 800afbc:	d12a      	bne.n	800b014 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afc4:	3b01      	subs	r3, #1
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d81d      	bhi.n	800b006 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	889b      	ldrh	r3, [r3, #4]
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d813      	bhi.n	800affc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	4798      	blx	r3
 800afe2:	4603      	mov	r3, r0
 800afe4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	88db      	ldrh	r3, [r3, #6]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d110      	bne.n	800b010 <USBD_StdItfReq+0x78>
 800afee:	7bfb      	ldrb	r3, [r7, #15]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10d      	bne.n	800b010 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fd53 	bl	800baa0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800affa:	e009      	b.n	800b010 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fc86 	bl	800b910 <USBD_CtlError>
          break;
 800b004:	e004      	b.n	800b010 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fc81 	bl	800b910 <USBD_CtlError>
          break;
 800b00e:	e000      	b.n	800b012 <USBD_StdItfReq+0x7a>
          break;
 800b010:	bf00      	nop
      }
      break;
 800b012:	e004      	b.n	800b01e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fc7a 	bl	800b910 <USBD_CtlError>
      break;
 800b01c:	bf00      	nop
  }

  return USBD_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	889b      	ldrh	r3, [r3, #4]
 800b03a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b044:	2b40      	cmp	r3, #64	@ 0x40
 800b046:	d007      	beq.n	800b058 <USBD_StdEPReq+0x30>
 800b048:	2b40      	cmp	r3, #64	@ 0x40
 800b04a:	f200 8146 	bhi.w	800b2da <USBD_StdEPReq+0x2b2>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00a      	beq.n	800b068 <USBD_StdEPReq+0x40>
 800b052:	2b20      	cmp	r3, #32
 800b054:	f040 8141 	bne.w	800b2da <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	4798      	blx	r3
      break;
 800b066:	e13d      	b.n	800b2e4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b070:	2b20      	cmp	r3, #32
 800b072:	d10a      	bne.n	800b08a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	4798      	blx	r3
 800b082:	4603      	mov	r3, r0
 800b084:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b086:	7bfb      	ldrb	r3, [r7, #15]
 800b088:	e12d      	b.n	800b2e6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	785b      	ldrb	r3, [r3, #1]
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d007      	beq.n	800b0a2 <USBD_StdEPReq+0x7a>
 800b092:	2b03      	cmp	r3, #3
 800b094:	f300 811b 	bgt.w	800b2ce <USBD_StdEPReq+0x2a6>
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d072      	beq.n	800b182 <USBD_StdEPReq+0x15a>
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d03a      	beq.n	800b116 <USBD_StdEPReq+0xee>
 800b0a0:	e115      	b.n	800b2ce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d002      	beq.n	800b0b2 <USBD_StdEPReq+0x8a>
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d015      	beq.n	800b0dc <USBD_StdEPReq+0xb4>
 800b0b0:	e02b      	b.n	800b10a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00c      	beq.n	800b0d2 <USBD_StdEPReq+0xaa>
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ba:	2b80      	cmp	r3, #128	@ 0x80
 800b0bc:	d009      	beq.n	800b0d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b0be:	7bbb      	ldrb	r3, [r7, #14]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f001 f880 	bl	800c1c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b0c8:	2180      	movs	r1, #128	@ 0x80
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f001 f87c 	bl	800c1c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0d0:	e020      	b.n	800b114 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fc1b 	bl	800b910 <USBD_CtlError>
              break;
 800b0da:	e01b      	b.n	800b114 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	885b      	ldrh	r3, [r3, #2]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10e      	bne.n	800b102 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00b      	beq.n	800b102 <USBD_StdEPReq+0xda>
 800b0ea:	7bbb      	ldrb	r3, [r7, #14]
 800b0ec:	2b80      	cmp	r3, #128	@ 0x80
 800b0ee:	d008      	beq.n	800b102 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	88db      	ldrh	r3, [r3, #6]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 f863 	bl	800c1c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fccc 	bl	800baa0 <USBD_CtlSendStatus>

              break;
 800b108:	e004      	b.n	800b114 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fbff 	bl	800b910 <USBD_CtlError>
              break;
 800b112:	bf00      	nop
          }
          break;
 800b114:	e0e0      	b.n	800b2d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d002      	beq.n	800b126 <USBD_StdEPReq+0xfe>
 800b120:	2b03      	cmp	r3, #3
 800b122:	d015      	beq.n	800b150 <USBD_StdEPReq+0x128>
 800b124:	e026      	b.n	800b174 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00c      	beq.n	800b146 <USBD_StdEPReq+0x11e>
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
 800b12e:	2b80      	cmp	r3, #128	@ 0x80
 800b130:	d009      	beq.n	800b146 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b132:	7bbb      	ldrb	r3, [r7, #14]
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f001 f846 	bl	800c1c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b13c:	2180      	movs	r1, #128	@ 0x80
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f001 f842 	bl	800c1c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b144:	e01c      	b.n	800b180 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fbe1 	bl	800b910 <USBD_CtlError>
              break;
 800b14e:	e017      	b.n	800b180 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	885b      	ldrh	r3, [r3, #2]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d112      	bne.n	800b17e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b158:	7bbb      	ldrb	r3, [r7, #14]
 800b15a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b162:	7bbb      	ldrb	r3, [r7, #14]
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f001 f84d 	bl	800c206 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fc97 	bl	800baa0 <USBD_CtlSendStatus>
              }
              break;
 800b172:	e004      	b.n	800b17e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fbca 	bl	800b910 <USBD_CtlError>
              break;
 800b17c:	e000      	b.n	800b180 <USBD_StdEPReq+0x158>
              break;
 800b17e:	bf00      	nop
          }
          break;
 800b180:	e0aa      	b.n	800b2d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d002      	beq.n	800b192 <USBD_StdEPReq+0x16a>
 800b18c:	2b03      	cmp	r3, #3
 800b18e:	d032      	beq.n	800b1f6 <USBD_StdEPReq+0x1ce>
 800b190:	e097      	b.n	800b2c2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d007      	beq.n	800b1a8 <USBD_StdEPReq+0x180>
 800b198:	7bbb      	ldrb	r3, [r7, #14]
 800b19a:	2b80      	cmp	r3, #128	@ 0x80
 800b19c:	d004      	beq.n	800b1a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fbb5 	bl	800b910 <USBD_CtlError>
                break;
 800b1a6:	e091      	b.n	800b2cc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	da0b      	bge.n	800b1c8 <USBD_StdEPReq+0x1a0>
 800b1b0:	7bbb      	ldrb	r3, [r7, #14]
 800b1b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	3310      	adds	r3, #16
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	e00b      	b.n	800b1e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1c8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	4413      	add	r3, r2
 800b1de:	3304      	adds	r3, #4
 800b1e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fbf8 	bl	800b9e4 <USBD_CtlSendData>
              break;
 800b1f4:	e06a      	b.n	800b2cc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b1f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	da11      	bge.n	800b222 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	f003 020f 	and.w	r2, r3, #15
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	4613      	mov	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	440b      	add	r3, r1
 800b210:	3318      	adds	r3, #24
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d117      	bne.n	800b248 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fb78 	bl	800b910 <USBD_CtlError>
                  break;
 800b220:	e054      	b.n	800b2cc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b222:	7bbb      	ldrb	r3, [r7, #14]
 800b224:	f003 020f 	and.w	r2, r3, #15
 800b228:	6879      	ldr	r1, [r7, #4]
 800b22a:	4613      	mov	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4413      	add	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	440b      	add	r3, r1
 800b234:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d104      	bne.n	800b248 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fb65 	bl	800b910 <USBD_CtlError>
                  break;
 800b246:	e041      	b.n	800b2cc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	da0b      	bge.n	800b268 <USBD_StdEPReq+0x240>
 800b250:	7bbb      	ldrb	r3, [r7, #14]
 800b252:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b256:	4613      	mov	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	3310      	adds	r3, #16
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	4413      	add	r3, r2
 800b264:	3304      	adds	r3, #4
 800b266:	e00b      	b.n	800b280 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b268:	7bbb      	ldrb	r3, [r7, #14]
 800b26a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b26e:	4613      	mov	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	4413      	add	r3, r2
 800b27e:	3304      	adds	r3, #4
 800b280:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b282:	7bbb      	ldrb	r3, [r7, #14]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <USBD_StdEPReq+0x266>
 800b288:	7bbb      	ldrb	r3, [r7, #14]
 800b28a:	2b80      	cmp	r3, #128	@ 0x80
 800b28c:	d103      	bne.n	800b296 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2200      	movs	r2, #0
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	e00e      	b.n	800b2b4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b296:	7bbb      	ldrb	r3, [r7, #14]
 800b298:	4619      	mov	r1, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 ffd2 	bl	800c244 <USBD_LL_IsStallEP>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d003      	beq.n	800b2ae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	601a      	str	r2, [r3, #0]
 800b2ac:	e002      	b.n	800b2b4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fb92 	bl	800b9e4 <USBD_CtlSendData>
              break;
 800b2c0:	e004      	b.n	800b2cc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fb23 	bl	800b910 <USBD_CtlError>
              break;
 800b2ca:	bf00      	nop
          }
          break;
 800b2cc:	e004      	b.n	800b2d8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fb1d 	bl	800b910 <USBD_CtlError>
          break;
 800b2d6:	bf00      	nop
      }
      break;
 800b2d8:	e004      	b.n	800b2e4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fb17 	bl	800b910 <USBD_CtlError>
      break;
 800b2e2:	bf00      	nop
  }

  return ret;
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b302:	2300      	movs	r3, #0
 800b304:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	885b      	ldrh	r3, [r3, #2]
 800b30a:	0a1b      	lsrs	r3, r3, #8
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	3b01      	subs	r3, #1
 800b310:	2b06      	cmp	r3, #6
 800b312:	f200 8128 	bhi.w	800b566 <USBD_GetDescriptor+0x276>
 800b316:	a201      	add	r2, pc, #4	@ (adr r2, 800b31c <USBD_GetDescriptor+0x2c>)
 800b318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31c:	0800b339 	.word	0x0800b339
 800b320:	0800b351 	.word	0x0800b351
 800b324:	0800b391 	.word	0x0800b391
 800b328:	0800b567 	.word	0x0800b567
 800b32c:	0800b567 	.word	0x0800b567
 800b330:	0800b507 	.word	0x0800b507
 800b334:	0800b533 	.word	0x0800b533
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	7c12      	ldrb	r2, [r2, #16]
 800b344:	f107 0108 	add.w	r1, r7, #8
 800b348:	4610      	mov	r0, r2
 800b34a:	4798      	blx	r3
 800b34c:	60f8      	str	r0, [r7, #12]
      break;
 800b34e:	e112      	b.n	800b576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	7c1b      	ldrb	r3, [r3, #16]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10d      	bne.n	800b374 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b360:	f107 0208 	add.w	r2, r7, #8
 800b364:	4610      	mov	r0, r2
 800b366:	4798      	blx	r3
 800b368:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3301      	adds	r3, #1
 800b36e:	2202      	movs	r2, #2
 800b370:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b372:	e100      	b.n	800b576 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37c:	f107 0208 	add.w	r2, r7, #8
 800b380:	4610      	mov	r0, r2
 800b382:	4798      	blx	r3
 800b384:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3301      	adds	r3, #1
 800b38a:	2202      	movs	r2, #2
 800b38c:	701a      	strb	r2, [r3, #0]
      break;
 800b38e:	e0f2      	b.n	800b576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	885b      	ldrh	r3, [r3, #2]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b05      	cmp	r3, #5
 800b398:	f200 80ac 	bhi.w	800b4f4 <USBD_GetDescriptor+0x204>
 800b39c:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a4 <USBD_GetDescriptor+0xb4>)
 800b39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a2:	bf00      	nop
 800b3a4:	0800b3bd 	.word	0x0800b3bd
 800b3a8:	0800b3f1 	.word	0x0800b3f1
 800b3ac:	0800b425 	.word	0x0800b425
 800b3b0:	0800b459 	.word	0x0800b459
 800b3b4:	0800b48d 	.word	0x0800b48d
 800b3b8:	0800b4c1 	.word	0x0800b4c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00b      	beq.n	800b3e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	7c12      	ldrb	r2, [r2, #16]
 800b3d4:	f107 0108 	add.w	r1, r7, #8
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
 800b3dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3de:	e091      	b.n	800b504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fa94 	bl	800b910 <USBD_CtlError>
            err++;
 800b3e8:	7afb      	ldrb	r3, [r7, #11]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ee:	e089      	b.n	800b504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00b      	beq.n	800b414 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	7c12      	ldrb	r2, [r2, #16]
 800b408:	f107 0108 	add.w	r1, r7, #8
 800b40c:	4610      	mov	r0, r2
 800b40e:	4798      	blx	r3
 800b410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b412:	e077      	b.n	800b504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fa7a 	bl	800b910 <USBD_CtlError>
            err++;
 800b41c:	7afb      	ldrb	r3, [r7, #11]
 800b41e:	3301      	adds	r3, #1
 800b420:	72fb      	strb	r3, [r7, #11]
          break;
 800b422:	e06f      	b.n	800b504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00b      	beq.n	800b448 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	7c12      	ldrb	r2, [r2, #16]
 800b43c:	f107 0108 	add.w	r1, r7, #8
 800b440:	4610      	mov	r0, r2
 800b442:	4798      	blx	r3
 800b444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b446:	e05d      	b.n	800b504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fa60 	bl	800b910 <USBD_CtlError>
            err++;
 800b450:	7afb      	ldrb	r3, [r7, #11]
 800b452:	3301      	adds	r3, #1
 800b454:	72fb      	strb	r3, [r7, #11]
          break;
 800b456:	e055      	b.n	800b504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00b      	beq.n	800b47c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	7c12      	ldrb	r2, [r2, #16]
 800b470:	f107 0108 	add.w	r1, r7, #8
 800b474:	4610      	mov	r0, r2
 800b476:	4798      	blx	r3
 800b478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b47a:	e043      	b.n	800b504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fa46 	bl	800b910 <USBD_CtlError>
            err++;
 800b484:	7afb      	ldrb	r3, [r7, #11]
 800b486:	3301      	adds	r3, #1
 800b488:	72fb      	strb	r3, [r7, #11]
          break;
 800b48a:	e03b      	b.n	800b504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00b      	beq.n	800b4b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	7c12      	ldrb	r2, [r2, #16]
 800b4a4:	f107 0108 	add.w	r1, r7, #8
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	4798      	blx	r3
 800b4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ae:	e029      	b.n	800b504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fa2c 	bl	800b910 <USBD_CtlError>
            err++;
 800b4b8:	7afb      	ldrb	r3, [r7, #11]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b4be:	e021      	b.n	800b504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00b      	beq.n	800b4e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	7c12      	ldrb	r2, [r2, #16]
 800b4d8:	f107 0108 	add.w	r1, r7, #8
 800b4dc:	4610      	mov	r0, r2
 800b4de:	4798      	blx	r3
 800b4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4e2:	e00f      	b.n	800b504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fa12 	bl	800b910 <USBD_CtlError>
            err++;
 800b4ec:	7afb      	ldrb	r3, [r7, #11]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b4f2:	e007      	b.n	800b504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fa0a 	bl	800b910 <USBD_CtlError>
          err++;
 800b4fc:	7afb      	ldrb	r3, [r7, #11]
 800b4fe:	3301      	adds	r3, #1
 800b500:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b502:	e038      	b.n	800b576 <USBD_GetDescriptor+0x286>
 800b504:	e037      	b.n	800b576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	7c1b      	ldrb	r3, [r3, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d109      	bne.n	800b522 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b516:	f107 0208 	add.w	r2, r7, #8
 800b51a:	4610      	mov	r0, r2
 800b51c:	4798      	blx	r3
 800b51e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b520:	e029      	b.n	800b576 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 f9f3 	bl	800b910 <USBD_CtlError>
        err++;
 800b52a:	7afb      	ldrb	r3, [r7, #11]
 800b52c:	3301      	adds	r3, #1
 800b52e:	72fb      	strb	r3, [r7, #11]
      break;
 800b530:	e021      	b.n	800b576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	7c1b      	ldrb	r3, [r3, #16]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10d      	bne.n	800b556 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b542:	f107 0208 	add.w	r2, r7, #8
 800b546:	4610      	mov	r0, r2
 800b548:	4798      	blx	r3
 800b54a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3301      	adds	r3, #1
 800b550:	2207      	movs	r2, #7
 800b552:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b554:	e00f      	b.n	800b576 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f9d9 	bl	800b910 <USBD_CtlError>
        err++;
 800b55e:	7afb      	ldrb	r3, [r7, #11]
 800b560:	3301      	adds	r3, #1
 800b562:	72fb      	strb	r3, [r7, #11]
      break;
 800b564:	e007      	b.n	800b576 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b566:	6839      	ldr	r1, [r7, #0]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f9d1 	bl	800b910 <USBD_CtlError>
      err++;
 800b56e:	7afb      	ldrb	r3, [r7, #11]
 800b570:	3301      	adds	r3, #1
 800b572:	72fb      	strb	r3, [r7, #11]
      break;
 800b574:	bf00      	nop
  }

  if (err != 0U)
 800b576:	7afb      	ldrb	r3, [r7, #11]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d11c      	bne.n	800b5b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b57c:	893b      	ldrh	r3, [r7, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d011      	beq.n	800b5a6 <USBD_GetDescriptor+0x2b6>
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	88db      	ldrh	r3, [r3, #6]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00d      	beq.n	800b5a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	88da      	ldrh	r2, [r3, #6]
 800b58e:	893b      	ldrh	r3, [r7, #8]
 800b590:	4293      	cmp	r3, r2
 800b592:	bf28      	it	cs
 800b594:	4613      	movcs	r3, r2
 800b596:	b29b      	uxth	r3, r3
 800b598:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b59a:	893b      	ldrh	r3, [r7, #8]
 800b59c:	461a      	mov	r2, r3
 800b59e:	68f9      	ldr	r1, [r7, #12]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 fa1f 	bl	800b9e4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	88db      	ldrh	r3, [r3, #6]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d104      	bne.n	800b5b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa76 	bl	800baa0 <USBD_CtlSendStatus>
 800b5b4:	e000      	b.n	800b5b8 <USBD_GetDescriptor+0x2c8>
    return;
 800b5b6:	bf00      	nop
    }
  }
}
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop

0800b5c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	889b      	ldrh	r3, [r3, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d130      	bne.n	800b634 <USBD_SetAddress+0x74>
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	88db      	ldrh	r3, [r3, #6]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d12c      	bne.n	800b634 <USBD_SetAddress+0x74>
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	885b      	ldrh	r3, [r3, #2]
 800b5de:	2b7f      	cmp	r3, #127	@ 0x7f
 800b5e0:	d828      	bhi.n	800b634 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	885b      	ldrh	r3, [r3, #2]
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d104      	bne.n	800b602 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f988 	bl	800b910 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b600:	e01d      	b.n	800b63e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	7bfa      	ldrb	r2, [r7, #15]
 800b606:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fe44 	bl	800c29c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fa43 	bl	800baa0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d004      	beq.n	800b62a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2202      	movs	r2, #2
 800b624:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b628:	e009      	b.n	800b63e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b632:	e004      	b.n	800b63e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f96a 	bl	800b910 <USBD_CtlError>
  }
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
	...

0800b648 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	885b      	ldrh	r3, [r3, #2]
 800b656:	b2da      	uxtb	r2, r3
 800b658:	4b41      	ldr	r3, [pc, #260]	@ (800b760 <USBD_SetConfig+0x118>)
 800b65a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b65c:	4b40      	ldr	r3, [pc, #256]	@ (800b760 <USBD_SetConfig+0x118>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d904      	bls.n	800b66e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f952 	bl	800b910 <USBD_CtlError>
 800b66c:	e075      	b.n	800b75a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b674:	2b02      	cmp	r3, #2
 800b676:	d002      	beq.n	800b67e <USBD_SetConfig+0x36>
 800b678:	2b03      	cmp	r3, #3
 800b67a:	d023      	beq.n	800b6c4 <USBD_SetConfig+0x7c>
 800b67c:	e062      	b.n	800b744 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b67e:	4b38      	ldr	r3, [pc, #224]	@ (800b760 <USBD_SetConfig+0x118>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d01a      	beq.n	800b6bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b686:	4b36      	ldr	r3, [pc, #216]	@ (800b760 <USBD_SetConfig+0x118>)
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	461a      	mov	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2203      	movs	r2, #3
 800b694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b698:	4b31      	ldr	r3, [pc, #196]	@ (800b760 <USBD_SetConfig+0x118>)
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7ff f9e7 	bl	800aa72 <USBD_SetClassConfig>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d104      	bne.n	800b6b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f92f 	bl	800b910 <USBD_CtlError>
            return;
 800b6b2:	e052      	b.n	800b75a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f9f3 	bl	800baa0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b6ba:	e04e      	b.n	800b75a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f9ef 	bl	800baa0 <USBD_CtlSendStatus>
        break;
 800b6c2:	e04a      	b.n	800b75a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b6c4:	4b26      	ldr	r3, [pc, #152]	@ (800b760 <USBD_SetConfig+0x118>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d112      	bne.n	800b6f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800b6d4:	4b22      	ldr	r3, [pc, #136]	@ (800b760 <USBD_SetConfig+0x118>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b6de:	4b20      	ldr	r3, [pc, #128]	@ (800b760 <USBD_SetConfig+0x118>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7ff f9e3 	bl	800aab0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f9d8 	bl	800baa0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b6f0:	e033      	b.n	800b75a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b6f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b760 <USBD_SetConfig+0x118>)
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d01d      	beq.n	800b73c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	b2db      	uxtb	r3, r3
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff f9d1 	bl	800aab0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b70e:	4b14      	ldr	r3, [pc, #80]	@ (800b760 <USBD_SetConfig+0x118>)
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	461a      	mov	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b718:	4b11      	ldr	r3, [pc, #68]	@ (800b760 <USBD_SetConfig+0x118>)
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7ff f9a7 	bl	800aa72 <USBD_SetClassConfig>
 800b724:	4603      	mov	r3, r0
 800b726:	2b02      	cmp	r3, #2
 800b728:	d104      	bne.n	800b734 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f8ef 	bl	800b910 <USBD_CtlError>
            return;
 800b732:	e012      	b.n	800b75a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f9b3 	bl	800baa0 <USBD_CtlSendStatus>
        break;
 800b73a:	e00e      	b.n	800b75a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f9af 	bl	800baa0 <USBD_CtlSendStatus>
        break;
 800b742:	e00a      	b.n	800b75a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f8e2 	bl	800b910 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b74c:	4b04      	ldr	r3, [pc, #16]	@ (800b760 <USBD_SetConfig+0x118>)
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7ff f9ac 	bl	800aab0 <USBD_ClrClassConfig>
        break;
 800b758:	bf00      	nop
    }
  }
}
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	2000099c 	.word	0x2000099c

0800b764 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	88db      	ldrh	r3, [r3, #6]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d004      	beq.n	800b780 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f8c9 	bl	800b910 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b77e:	e022      	b.n	800b7c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b786:	2b02      	cmp	r3, #2
 800b788:	dc02      	bgt.n	800b790 <USBD_GetConfig+0x2c>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	dc03      	bgt.n	800b796 <USBD_GetConfig+0x32>
 800b78e:	e015      	b.n	800b7bc <USBD_GetConfig+0x58>
 800b790:	2b03      	cmp	r3, #3
 800b792:	d00b      	beq.n	800b7ac <USBD_GetConfig+0x48>
 800b794:	e012      	b.n	800b7bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	3308      	adds	r3, #8
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 f91d 	bl	800b9e4 <USBD_CtlSendData>
        break;
 800b7aa:	e00c      	b.n	800b7c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f915 	bl	800b9e4 <USBD_CtlSendData>
        break;
 800b7ba:	e004      	b.n	800b7c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f8a6 	bl	800b910 <USBD_CtlError>
        break;
 800b7c4:	bf00      	nop
}
 800b7c6:	bf00      	nop
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d81e      	bhi.n	800b822 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	88db      	ldrh	r3, [r3, #6]
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d004      	beq.n	800b7f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b7ec:	6839      	ldr	r1, [r7, #0]
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f88e 	bl	800b910 <USBD_CtlError>
        break;
 800b7f4:	e01a      	b.n	800b82c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b802:	2b00      	cmp	r3, #0
 800b804:	d005      	beq.n	800b812 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	f043 0202 	orr.w	r2, r3, #2
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	330c      	adds	r3, #12
 800b816:	2202      	movs	r2, #2
 800b818:	4619      	mov	r1, r3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f8e2 	bl	800b9e4 <USBD_CtlSendData>
      break;
 800b820:	e004      	b.n	800b82c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 f873 	bl	800b910 <USBD_CtlError>
      break;
 800b82a:	bf00      	nop
  }
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	885b      	ldrh	r3, [r3, #2]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d106      	bne.n	800b854 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2201      	movs	r2, #1
 800b84a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f926 	bl	800baa0 <USBD_CtlSendStatus>
  }
}
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b86c:	3b01      	subs	r3, #1
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d80b      	bhi.n	800b88a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	885b      	ldrh	r3, [r3, #2]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d10c      	bne.n	800b894 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f90c 	bl	800baa0 <USBD_CtlSendStatus>
      }
      break;
 800b888:	e004      	b.n	800b894 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f83f 	bl	800b910 <USBD_CtlError>
      break;
 800b892:	e000      	b.n	800b896 <USBD_ClrFeature+0x3a>
      break;
 800b894:	bf00      	nop
  }
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b083      	sub	sp, #12
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	781a      	ldrb	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	785a      	ldrb	r2, [r3, #1]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	3302      	adds	r3, #2
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	3303      	adds	r3, #3
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	021b      	lsls	r3, r3, #8
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	4413      	add	r3, r2
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	461a      	mov	r2, r3
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	3305      	adds	r3, #5
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	021b      	lsls	r3, r3, #8
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	4413      	add	r3, r2
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	3306      	adds	r3, #6
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	3307      	adds	r3, #7
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	021b      	lsls	r3, r3, #8
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	4413      	add	r3, r2
 800b900:	b29a      	uxth	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	80da      	strh	r2, [r3, #6]

}
 800b906:	bf00      	nop
 800b908:	370c      	adds	r7, #12
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bc80      	pop	{r7}
 800b90e:	4770      	bx	lr

0800b910 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b91a:	2180      	movs	r1, #128	@ 0x80
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fc53 	bl	800c1c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b922:	2100      	movs	r1, #0
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fc4f 	bl	800c1c8 <USBD_LL_StallEP>
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b086      	sub	sp, #24
 800b936:	af00      	add	r7, sp, #0
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	60b9      	str	r1, [r7, #8]
 800b93c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b93e:	2300      	movs	r3, #0
 800b940:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d032      	beq.n	800b9ae <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f000 f834 	bl	800b9b6 <USBD_GetLen>
 800b94e:	4603      	mov	r3, r0
 800b950:	3301      	adds	r3, #1
 800b952:	b29b      	uxth	r3, r3
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	b29a      	uxth	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	75fa      	strb	r2, [r7, #23]
 800b962:	461a      	mov	r2, r3
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	4413      	add	r3, r2
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	7812      	ldrb	r2, [r2, #0]
 800b96c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	75fa      	strb	r2, [r7, #23]
 800b974:	461a      	mov	r2, r3
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	4413      	add	r3, r2
 800b97a:	2203      	movs	r2, #3
 800b97c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b97e:	e012      	b.n	800b9a6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	60fa      	str	r2, [r7, #12]
 800b986:	7dfa      	ldrb	r2, [r7, #23]
 800b988:	1c51      	adds	r1, r2, #1
 800b98a:	75f9      	strb	r1, [r7, #23]
 800b98c:	4611      	mov	r1, r2
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	440a      	add	r2, r1
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	1c5a      	adds	r2, r3, #1
 800b99a:	75fa      	strb	r2, [r7, #23]
 800b99c:	461a      	mov	r2, r3
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1e8      	bne.n	800b980 <USBD_GetString+0x4e>
    }
  }
}
 800b9ae:	bf00      	nop
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b085      	sub	sp, #20
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b9c2:	e005      	b.n	800b9d0 <USBD_GetLen+0x1a>
  {
    len++;
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1f5      	bne.n	800b9c4 <USBD_GetLen+0xe>
  }

  return len;
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3714      	adds	r7, #20
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bc80      	pop	{r7}
 800b9e2:	4770      	bx	lr

0800b9e4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b9fa:	88fa      	ldrh	r2, [r7, #6]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ba00:	88fa      	ldrh	r2, [r7, #6]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba06:	88fb      	ldrh	r3, [r7, #6]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 fc64 	bl	800c2da <USBD_LL_Transmit>

  return USBD_OK;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	4613      	mov	r3, r2
 800ba28:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba2a:	88fb      	ldrh	r3, [r7, #6]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	2100      	movs	r1, #0
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f000 fc52 	bl	800c2da <USBD_LL_Transmit>

  return USBD_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2203      	movs	r2, #3
 800ba52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ba56:	88fa      	ldrh	r2, [r7, #6]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ba5e:	88fa      	ldrh	r2, [r7, #6]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba66:	88fb      	ldrh	r3, [r7, #6]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 fc57 	bl	800c320 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	4613      	mov	r3, r2
 800ba88:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba8a:	88fb      	ldrh	r3, [r7, #6]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	2100      	movs	r1, #0
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f000 fc45 	bl	800c320 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2204      	movs	r2, #4
 800baac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bab0:	2300      	movs	r3, #0
 800bab2:	2200      	movs	r2, #0
 800bab4:	2100      	movs	r1, #0
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fc0f 	bl	800c2da <USBD_LL_Transmit>

  return USBD_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b082      	sub	sp, #8
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2205      	movs	r2, #5
 800bad2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bad6:	2300      	movs	r3, #0
 800bad8:	2200      	movs	r2, #0
 800bada:	2100      	movs	r1, #0
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fc1f 	bl	800c320 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800baf0:	2200      	movs	r2, #0
 800baf2:	4912      	ldr	r1, [pc, #72]	@ (800bb3c <MX_USB_DEVICE_Init+0x50>)
 800baf4:	4812      	ldr	r0, [pc, #72]	@ (800bb40 <MX_USB_DEVICE_Init+0x54>)
 800baf6:	f7fe ff62 	bl	800a9be <USBD_Init>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb00:	f7f5 fb32 	bl	8001168 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb04:	490f      	ldr	r1, [pc, #60]	@ (800bb44 <MX_USB_DEVICE_Init+0x58>)
 800bb06:	480e      	ldr	r0, [pc, #56]	@ (800bb40 <MX_USB_DEVICE_Init+0x54>)
 800bb08:	f7fe ff84 	bl	800aa14 <USBD_RegisterClass>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb12:	f7f5 fb29 	bl	8001168 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb16:	490c      	ldr	r1, [pc, #48]	@ (800bb48 <MX_USB_DEVICE_Init+0x5c>)
 800bb18:	4809      	ldr	r0, [pc, #36]	@ (800bb40 <MX_USB_DEVICE_Init+0x54>)
 800bb1a:	f7fe feb5 	bl	800a888 <USBD_CDC_RegisterInterface>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb24:	f7f5 fb20 	bl	8001168 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb28:	4805      	ldr	r0, [pc, #20]	@ (800bb40 <MX_USB_DEVICE_Init+0x54>)
 800bb2a:	f7fe ff8c 	bl	800aa46 <USBD_Start>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb34:	f7f5 fb18 	bl	8001168 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb38:	bf00      	nop
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	20000228 	.word	0x20000228
 800bb40:	200009a0 	.word	0x200009a0
 800bb44:	20000114 	.word	0x20000114
 800bb48:	20000218 	.word	0x20000218

0800bb4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb50:	2200      	movs	r2, #0
 800bb52:	4905      	ldr	r1, [pc, #20]	@ (800bb68 <CDC_Init_FS+0x1c>)
 800bb54:	4805      	ldr	r0, [pc, #20]	@ (800bb6c <CDC_Init_FS+0x20>)
 800bb56:	f7fe fead 	bl	800a8b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb5a:	4905      	ldr	r1, [pc, #20]	@ (800bb70 <CDC_Init_FS+0x24>)
 800bb5c:	4803      	ldr	r0, [pc, #12]	@ (800bb6c <CDC_Init_FS+0x20>)
 800bb5e:	f7fe fec2 	bl	800a8e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20001064 	.word	0x20001064
 800bb6c:	200009a0 	.word	0x200009a0
 800bb70:	20000c64 	.word	0x20000c64

0800bb74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb74:	b480      	push	{r7}
 800bb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bc80      	pop	{r7}
 800bb80:	4770      	bx	lr
	...

0800bb84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	6039      	str	r1, [r7, #0]
 800bb8e:	71fb      	strb	r3, [r7, #7]
 800bb90:	4613      	mov	r3, r2
 800bb92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	2b23      	cmp	r3, #35	@ 0x23
 800bb98:	d84a      	bhi.n	800bc30 <CDC_Control_FS+0xac>
 800bb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bba0 <CDC_Control_FS+0x1c>)
 800bb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba0:	0800bc31 	.word	0x0800bc31
 800bba4:	0800bc31 	.word	0x0800bc31
 800bba8:	0800bc31 	.word	0x0800bc31
 800bbac:	0800bc31 	.word	0x0800bc31
 800bbb0:	0800bc31 	.word	0x0800bc31
 800bbb4:	0800bc31 	.word	0x0800bc31
 800bbb8:	0800bc31 	.word	0x0800bc31
 800bbbc:	0800bc31 	.word	0x0800bc31
 800bbc0:	0800bc31 	.word	0x0800bc31
 800bbc4:	0800bc31 	.word	0x0800bc31
 800bbc8:	0800bc31 	.word	0x0800bc31
 800bbcc:	0800bc31 	.word	0x0800bc31
 800bbd0:	0800bc31 	.word	0x0800bc31
 800bbd4:	0800bc31 	.word	0x0800bc31
 800bbd8:	0800bc31 	.word	0x0800bc31
 800bbdc:	0800bc31 	.word	0x0800bc31
 800bbe0:	0800bc31 	.word	0x0800bc31
 800bbe4:	0800bc31 	.word	0x0800bc31
 800bbe8:	0800bc31 	.word	0x0800bc31
 800bbec:	0800bc31 	.word	0x0800bc31
 800bbf0:	0800bc31 	.word	0x0800bc31
 800bbf4:	0800bc31 	.word	0x0800bc31
 800bbf8:	0800bc31 	.word	0x0800bc31
 800bbfc:	0800bc31 	.word	0x0800bc31
 800bc00:	0800bc31 	.word	0x0800bc31
 800bc04:	0800bc31 	.word	0x0800bc31
 800bc08:	0800bc31 	.word	0x0800bc31
 800bc0c:	0800bc31 	.word	0x0800bc31
 800bc10:	0800bc31 	.word	0x0800bc31
 800bc14:	0800bc31 	.word	0x0800bc31
 800bc18:	0800bc31 	.word	0x0800bc31
 800bc1c:	0800bc31 	.word	0x0800bc31
 800bc20:	0800bc31 	.word	0x0800bc31
 800bc24:	0800bc31 	.word	0x0800bc31
 800bc28:	0800bc31 	.word	0x0800bc31
 800bc2c:	0800bc31 	.word	0x0800bc31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc30:	bf00      	nop
  }

  return (USBD_OK);
 800bc32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bc80      	pop	{r7}
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop

0800bc40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	4805      	ldr	r0, [pc, #20]	@ (800bc64 <CDC_Receive_FS+0x24>)
 800bc4e:	f7fe fe4a 	bl	800a8e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc52:	4804      	ldr	r0, [pc, #16]	@ (800bc64 <CDC_Receive_FS+0x24>)
 800bc54:	f7fe fe89 	bl	800a96a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	200009a0 	.word	0x200009a0

0800bc68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc78:	4b0d      	ldr	r3, [pc, #52]	@ (800bcb0 <CDC_Transmit_FS+0x48>)
 800bc7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e00b      	b.n	800bca6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc8e:	887b      	ldrh	r3, [r7, #2]
 800bc90:	461a      	mov	r2, r3
 800bc92:	6879      	ldr	r1, [r7, #4]
 800bc94:	4806      	ldr	r0, [pc, #24]	@ (800bcb0 <CDC_Transmit_FS+0x48>)
 800bc96:	f7fe fe0d 	bl	800a8b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc9a:	4805      	ldr	r0, [pc, #20]	@ (800bcb0 <CDC_Transmit_FS+0x48>)
 800bc9c:	f7fe fe36 	bl	800a90c <USBD_CDC_TransmitPacket>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	200009a0 	.word	0x200009a0

0800bcb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	6039      	str	r1, [r7, #0]
 800bcbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	2212      	movs	r2, #18
 800bcc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bcc6:	4b03      	ldr	r3, [pc, #12]	@ (800bcd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bc80      	pop	{r7}
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	20000244 	.word	0x20000244

0800bcd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	6039      	str	r1, [r7, #0]
 800bce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2204      	movs	r2, #4
 800bce8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcea:	4b03      	ldr	r3, [pc, #12]	@ (800bcf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bc80      	pop	{r7}
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	20000258 	.word	0x20000258

0800bcfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4603      	mov	r3, r0
 800bd04:	6039      	str	r1, [r7, #0]
 800bd06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd08:	79fb      	ldrb	r3, [r7, #7]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d105      	bne.n	800bd1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	4907      	ldr	r1, [pc, #28]	@ (800bd30 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd12:	4808      	ldr	r0, [pc, #32]	@ (800bd34 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd14:	f7ff fe0d 	bl	800b932 <USBD_GetString>
 800bd18:	e004      	b.n	800bd24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	4904      	ldr	r1, [pc, #16]	@ (800bd30 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd1e:	4805      	ldr	r0, [pc, #20]	@ (800bd34 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd20:	f7ff fe07 	bl	800b932 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd24:	4b02      	ldr	r3, [pc, #8]	@ (800bd30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	20001464 	.word	0x20001464
 800bd34:	0800cdfc 	.word	0x0800cdfc

0800bd38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	4603      	mov	r3, r0
 800bd40:	6039      	str	r1, [r7, #0]
 800bd42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	4904      	ldr	r1, [pc, #16]	@ (800bd58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd48:	4804      	ldr	r0, [pc, #16]	@ (800bd5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd4a:	f7ff fdf2 	bl	800b932 <USBD_GetString>
  return USBD_StrDesc;
 800bd4e:	4b02      	ldr	r3, [pc, #8]	@ (800bd58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20001464 	.word	0x20001464
 800bd5c:	0800ce14 	.word	0x0800ce14

0800bd60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	4603      	mov	r3, r0
 800bd68:	6039      	str	r1, [r7, #0]
 800bd6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	221a      	movs	r2, #26
 800bd70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd72:	f000 f843 	bl	800bdfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd76:	4b02      	ldr	r3, [pc, #8]	@ (800bd80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	2000025c 	.word	0x2000025c

0800bd84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	6039      	str	r1, [r7, #0]
 800bd8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd90:	79fb      	ldrb	r3, [r7, #7]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d105      	bne.n	800bda2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	4907      	ldr	r1, [pc, #28]	@ (800bdb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd9a:	4808      	ldr	r0, [pc, #32]	@ (800bdbc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd9c:	f7ff fdc9 	bl	800b932 <USBD_GetString>
 800bda0:	e004      	b.n	800bdac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	4904      	ldr	r1, [pc, #16]	@ (800bdb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bda6:	4805      	ldr	r0, [pc, #20]	@ (800bdbc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bda8:	f7ff fdc3 	bl	800b932 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdac:	4b02      	ldr	r3, [pc, #8]	@ (800bdb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20001464 	.word	0x20001464
 800bdbc:	0800ce28 	.word	0x0800ce28

0800bdc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	6039      	str	r1, [r7, #0]
 800bdca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d105      	bne.n	800bdde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	4907      	ldr	r1, [pc, #28]	@ (800bdf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdd6:	4808      	ldr	r0, [pc, #32]	@ (800bdf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdd8:	f7ff fdab 	bl	800b932 <USBD_GetString>
 800bddc:	e004      	b.n	800bde8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	4904      	ldr	r1, [pc, #16]	@ (800bdf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bde2:	4805      	ldr	r0, [pc, #20]	@ (800bdf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bde4:	f7ff fda5 	bl	800b932 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bde8:	4b02      	ldr	r3, [pc, #8]	@ (800bdf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20001464 	.word	0x20001464
 800bdf8:	0800ce34 	.word	0x0800ce34

0800bdfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be02:	4b0f      	ldr	r3, [pc, #60]	@ (800be40 <Get_SerialNum+0x44>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be08:	4b0e      	ldr	r3, [pc, #56]	@ (800be44 <Get_SerialNum+0x48>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be0e:	4b0e      	ldr	r3, [pc, #56]	@ (800be48 <Get_SerialNum+0x4c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4413      	add	r3, r2
 800be1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d009      	beq.n	800be36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be22:	2208      	movs	r2, #8
 800be24:	4909      	ldr	r1, [pc, #36]	@ (800be4c <Get_SerialNum+0x50>)
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f000 f814 	bl	800be54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be2c:	2204      	movs	r2, #4
 800be2e:	4908      	ldr	r1, [pc, #32]	@ (800be50 <Get_SerialNum+0x54>)
 800be30:	68b8      	ldr	r0, [r7, #8]
 800be32:	f000 f80f 	bl	800be54 <IntToUnicode>
  }
}
 800be36:	bf00      	nop
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	1ffff7e8 	.word	0x1ffff7e8
 800be44:	1ffff7ec 	.word	0x1ffff7ec
 800be48:	1ffff7f0 	.word	0x1ffff7f0
 800be4c:	2000025e 	.word	0x2000025e
 800be50:	2000026e 	.word	0x2000026e

0800be54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be54:	b480      	push	{r7}
 800be56:	b087      	sub	sp, #28
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	4613      	mov	r3, r2
 800be60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be62:	2300      	movs	r3, #0
 800be64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be66:	2300      	movs	r3, #0
 800be68:	75fb      	strb	r3, [r7, #23]
 800be6a:	e027      	b.n	800bebc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	0f1b      	lsrs	r3, r3, #28
 800be70:	2b09      	cmp	r3, #9
 800be72:	d80b      	bhi.n	800be8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	0f1b      	lsrs	r3, r3, #28
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	4619      	mov	r1, r3
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	440b      	add	r3, r1
 800be84:	3230      	adds	r2, #48	@ 0x30
 800be86:	b2d2      	uxtb	r2, r2
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	e00a      	b.n	800bea2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	0f1b      	lsrs	r3, r3, #28
 800be90:	b2da      	uxtb	r2, r3
 800be92:	7dfb      	ldrb	r3, [r7, #23]
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	4619      	mov	r1, r3
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	440b      	add	r3, r1
 800be9c:	3237      	adds	r2, #55	@ 0x37
 800be9e:	b2d2      	uxtb	r2, r2
 800bea0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	011b      	lsls	r3, r3, #4
 800bea6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	3301      	adds	r3, #1
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	4413      	add	r3, r2
 800beb2:	2200      	movs	r2, #0
 800beb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	3301      	adds	r3, #1
 800beba:	75fb      	strb	r3, [r7, #23]
 800bebc:	7dfa      	ldrb	r2, [r7, #23]
 800bebe:	79fb      	ldrb	r3, [r7, #7]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d3d3      	bcc.n	800be6c <IntToUnicode+0x18>
  }
}
 800bec4:	bf00      	nop
 800bec6:	bf00      	nop
 800bec8:	371c      	adds	r7, #28
 800beca:	46bd      	mov	sp, r7
 800becc:	bc80      	pop	{r7}
 800bece:	4770      	bx	lr

0800bed0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a0d      	ldr	r2, [pc, #52]	@ (800bf14 <HAL_PCD_MspInit+0x44>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d113      	bne.n	800bf0a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bee2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf18 <HAL_PCD_MspInit+0x48>)
 800bee4:	69db      	ldr	r3, [r3, #28]
 800bee6:	4a0c      	ldr	r2, [pc, #48]	@ (800bf18 <HAL_PCD_MspInit+0x48>)
 800bee8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800beec:	61d3      	str	r3, [r2, #28]
 800beee:	4b0a      	ldr	r3, [pc, #40]	@ (800bf18 <HAL_PCD_MspInit+0x48>)
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bef6:	60fb      	str	r3, [r7, #12]
 800bef8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800befa:	2200      	movs	r2, #0
 800befc:	2100      	movs	r1, #0
 800befe:	2014      	movs	r0, #20
 800bf00:	f7f6 fda9 	bl	8002a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bf04:	2014      	movs	r0, #20
 800bf06:	f7f6 fdc2 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bf0a:	bf00      	nop
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	40005c00 	.word	0x40005c00
 800bf18:	40021000 	.word	0x40021000

0800bf1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800bf30:	4619      	mov	r1, r3
 800bf32:	4610      	mov	r0, r2
 800bf34:	f7fe fdcf 	bl	800aad6 <USBD_LL_SetupStage>
}
 800bf38:	bf00      	nop
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800bf52:	78fa      	ldrb	r2, [r7, #3]
 800bf54:	6879      	ldr	r1, [r7, #4]
 800bf56:	4613      	mov	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4413      	add	r3, r2
 800bf5c:	00db      	lsls	r3, r3, #3
 800bf5e:	440b      	add	r3, r1
 800bf60:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	78fb      	ldrb	r3, [r7, #3]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	f7fe fe01 	bl	800ab70 <USBD_LL_DataOutStage>
}
 800bf6e:	bf00      	nop
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b082      	sub	sp, #8
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800bf88:	78fa      	ldrb	r2, [r7, #3]
 800bf8a:	6879      	ldr	r1, [r7, #4]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4413      	add	r3, r2
 800bf92:	00db      	lsls	r3, r3, #3
 800bf94:	440b      	add	r3, r1
 800bf96:	333c      	adds	r3, #60	@ 0x3c
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	78fb      	ldrb	r3, [r7, #3]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	f7fe fe58 	bl	800ac52 <USBD_LL_DataInStage>
}
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b082      	sub	sp, #8
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fe ff68 	bl	800ae8e <USBD_LL_SOF>
}
 800bfbe:	bf00      	nop
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b084      	sub	sp, #16
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d001      	beq.n	800bfde <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bfda:	f7f5 f8c5 	bl	8001168 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800bfe4:	7bfa      	ldrb	r2, [r7, #15]
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe ff18 	bl	800ae1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fe fed1 	bl	800ad9c <USBD_LL_Reset>
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe ff12 	bl	800ae3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d005      	beq.n	800c02c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c020:	4b04      	ldr	r3, [pc, #16]	@ (800c034 <HAL_PCD_SuspendCallback+0x30>)
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	4a03      	ldr	r2, [pc, #12]	@ (800c034 <HAL_PCD_SuspendCallback+0x30>)
 800c026:	f043 0306 	orr.w	r3, r3, #6
 800c02a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	e000ed00 	.word	0xe000ed00

0800c038 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe ff0c 	bl	800ae64 <USBD_LL_Resume>
}
 800c04c:	bf00      	nop
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c05c:	4a28      	ldr	r2, [pc, #160]	@ (800c100 <USBD_LL_Init+0xac>)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a26      	ldr	r2, [pc, #152]	@ (800c100 <USBD_LL_Init+0xac>)
 800c068:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c06c:	4b24      	ldr	r3, [pc, #144]	@ (800c100 <USBD_LL_Init+0xac>)
 800c06e:	4a25      	ldr	r2, [pc, #148]	@ (800c104 <USBD_LL_Init+0xb0>)
 800c070:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c072:	4b23      	ldr	r3, [pc, #140]	@ (800c100 <USBD_LL_Init+0xac>)
 800c074:	2208      	movs	r2, #8
 800c076:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c078:	4b21      	ldr	r3, [pc, #132]	@ (800c100 <USBD_LL_Init+0xac>)
 800c07a:	2202      	movs	r2, #2
 800c07c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c07e:	4b20      	ldr	r3, [pc, #128]	@ (800c100 <USBD_LL_Init+0xac>)
 800c080:	2200      	movs	r2, #0
 800c082:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c084:	4b1e      	ldr	r3, [pc, #120]	@ (800c100 <USBD_LL_Init+0xac>)
 800c086:	2200      	movs	r2, #0
 800c088:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c08a:	4b1d      	ldr	r3, [pc, #116]	@ (800c100 <USBD_LL_Init+0xac>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c090:	481b      	ldr	r0, [pc, #108]	@ (800c100 <USBD_LL_Init+0xac>)
 800c092:	f7f7 fe19 	bl	8003cc8 <HAL_PCD_Init>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c09c:	f7f5 f864 	bl	8001168 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c0a6:	2318      	movs	r3, #24
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	f7f9 fb37 	bl	800571e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c0b6:	2358      	movs	r3, #88	@ 0x58
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	2180      	movs	r1, #128	@ 0x80
 800c0bc:	f7f9 fb2f 	bl	800571e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c0c6:	23c0      	movs	r3, #192	@ 0xc0
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	2181      	movs	r1, #129	@ 0x81
 800c0cc:	f7f9 fb27 	bl	800571e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c0d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c0da:	2200      	movs	r2, #0
 800c0dc:	2101      	movs	r1, #1
 800c0de:	f7f9 fb1e 	bl	800571e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c0e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	2182      	movs	r1, #130	@ 0x82
 800c0f0:	f7f9 fb15 	bl	800571e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	20001664 	.word	0x20001664
 800c104:	40005c00 	.word	0x40005c00

0800c108 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c110:	2300      	movs	r3, #0
 800c112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c11e:	4618      	mov	r0, r3
 800c120:	f7f7 fed1 	bl	8003ec6 <HAL_PCD_Start>
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c128:	7bfb      	ldrb	r3, [r7, #15]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f000 f94e 	bl	800c3cc <USBD_Get_USB_Status>
 800c130:	4603      	mov	r3, r0
 800c132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c134:	7bbb      	ldrb	r3, [r7, #14]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b084      	sub	sp, #16
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	4608      	mov	r0, r1
 800c148:	4611      	mov	r1, r2
 800c14a:	461a      	mov	r2, r3
 800c14c:	4603      	mov	r3, r0
 800c14e:	70fb      	strb	r3, [r7, #3]
 800c150:	460b      	mov	r3, r1
 800c152:	70bb      	strb	r3, [r7, #2]
 800c154:	4613      	mov	r3, r2
 800c156:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c166:	78bb      	ldrb	r3, [r7, #2]
 800c168:	883a      	ldrh	r2, [r7, #0]
 800c16a:	78f9      	ldrb	r1, [r7, #3]
 800c16c:	f7f8 f826 	bl	80041bc <HAL_PCD_EP_Open>
 800c170:	4603      	mov	r3, r0
 800c172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 f928 	bl	800c3cc <USBD_Get_USB_Status>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c180:	7bbb      	ldrb	r3, [r7, #14]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b084      	sub	sp, #16
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	460b      	mov	r3, r1
 800c194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c1a4:	78fa      	ldrb	r2, [r7, #3]
 800c1a6:	4611      	mov	r1, r2
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7f8 f864 	bl	8004276 <HAL_PCD_EP_Close>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1b2:	7bfb      	ldrb	r3, [r7, #15]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 f909 	bl	800c3cc <USBD_Get_USB_Status>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c1e2:	78fa      	ldrb	r2, [r7, #3]
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7f8 f90c 	bl	8004404 <HAL_PCD_EP_SetStall>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1f0:	7bfb      	ldrb	r3, [r7, #15]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f000 f8ea 	bl	800c3cc <USBD_Get_USB_Status>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b084      	sub	sp, #16
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	460b      	mov	r3, r1
 800c210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c220:	78fa      	ldrb	r2, [r7, #3]
 800c222:	4611      	mov	r1, r2
 800c224:	4618      	mov	r0, r3
 800c226:	f7f8 f94d 	bl	80044c4 <HAL_PCD_EP_ClrStall>
 800c22a:	4603      	mov	r3, r0
 800c22c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c22e:	7bfb      	ldrb	r3, [r7, #15]
 800c230:	4618      	mov	r0, r3
 800c232:	f000 f8cb 	bl	800c3cc <USBD_Get_USB_Status>
 800c236:	4603      	mov	r3, r0
 800c238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c23a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	460b      	mov	r3, r1
 800c24e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c256:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	da0c      	bge.n	800c27a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c266:	68f9      	ldr	r1, [r7, #12]
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	4613      	mov	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	00db      	lsls	r3, r3, #3
 800c272:	440b      	add	r3, r1
 800c274:	3302      	adds	r3, #2
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	e00b      	b.n	800c292 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c280:	68f9      	ldr	r1, [r7, #12]
 800c282:	4613      	mov	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4413      	add	r3, r2
 800c288:	00db      	lsls	r3, r3, #3
 800c28a:	440b      	add	r3, r1
 800c28c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800c290:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c292:	4618      	mov	r0, r3
 800c294:	3714      	adds	r7, #20
 800c296:	46bd      	mov	sp, r7
 800c298:	bc80      	pop	{r7}
 800c29a:	4770      	bx	lr

0800c29c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c2b6:	78fa      	ldrb	r2, [r7, #3]
 800c2b8:	4611      	mov	r1, r2
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7f7 ff59 	bl	8004172 <HAL_PCD_SetAddress>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 f880 	bl	800c3cc <USBD_Get_USB_Status>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b086      	sub	sp, #24
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	60f8      	str	r0, [r7, #12]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	72fb      	strb	r3, [r7, #11]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c2fc:	893b      	ldrh	r3, [r7, #8]
 800c2fe:	7af9      	ldrb	r1, [r7, #11]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	f7f8 f848 	bl	8004396 <HAL_PCD_EP_Transmit>
 800c306:	4603      	mov	r3, r0
 800c308:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c30a:	7dfb      	ldrb	r3, [r7, #23]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 f85d 	bl	800c3cc <USBD_Get_USB_Status>
 800c312:	4603      	mov	r3, r0
 800c314:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c316:	7dbb      	ldrb	r3, [r7, #22]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	607a      	str	r2, [r7, #4]
 800c32a:	461a      	mov	r2, r3
 800c32c:	460b      	mov	r3, r1
 800c32e:	72fb      	strb	r3, [r7, #11]
 800c330:	4613      	mov	r3, r2
 800c332:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c342:	893b      	ldrh	r3, [r7, #8]
 800c344:	7af9      	ldrb	r1, [r7, #11]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	f7f7 ffdd 	bl	8004306 <HAL_PCD_EP_Receive>
 800c34c:	4603      	mov	r3, r0
 800c34e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 f83a 	bl	800c3cc <USBD_Get_USB_Status>
 800c358:	4603      	mov	r3, r0
 800c35a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c35c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b082      	sub	sp, #8
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
 800c36e:	460b      	mov	r3, r1
 800c370:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c378:	78fa      	ldrb	r2, [r7, #3]
 800c37a:	4611      	mov	r1, r2
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7f7 fff3 	bl	8004368 <HAL_PCD_EP_GetRxCount>
 800c382:	4603      	mov	r3, r0
}
 800c384:	4618      	mov	r0, r3
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c394:	4b02      	ldr	r3, [pc, #8]	@ (800c3a0 <USBD_static_malloc+0x14>)
}
 800c396:	4618      	mov	r0, r3
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bc80      	pop	{r7}
 800c39e:	4770      	bx	lr
 800c3a0:	20001954 	.word	0x20001954

0800c3a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]

}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bc80      	pop	{r7}
 800c3b4:	4770      	bx	lr

0800c3b6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b083      	sub	sp, #12
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	460b      	mov	r3, r1
 800c3c0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c3c2:	bf00      	nop
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bc80      	pop	{r7}
 800c3ca:	4770      	bx	lr

0800c3cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3da:	79fb      	ldrb	r3, [r7, #7]
 800c3dc:	2b03      	cmp	r3, #3
 800c3de:	d817      	bhi.n	800c410 <USBD_Get_USB_Status+0x44>
 800c3e0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e8 <USBD_Get_USB_Status+0x1c>)
 800c3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e6:	bf00      	nop
 800c3e8:	0800c3f9 	.word	0x0800c3f9
 800c3ec:	0800c3ff 	.word	0x0800c3ff
 800c3f0:	0800c405 	.word	0x0800c405
 800c3f4:	0800c40b 	.word	0x0800c40b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c3fc:	e00b      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3fe:	2302      	movs	r3, #2
 800c400:	73fb      	strb	r3, [r7, #15]
    break;
 800c402:	e008      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c404:	2301      	movs	r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]
    break;
 800c408:	e005      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c40a:	2302      	movs	r3, #2
 800c40c:	73fb      	strb	r3, [r7, #15]
    break;
 800c40e:	e002      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c410:	2302      	movs	r3, #2
 800c412:	73fb      	strb	r3, [r7, #15]
    break;
 800c414:	bf00      	nop
  }
  return usb_status;
 800c416:	7bfb      	ldrb	r3, [r7, #15]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bc80      	pop	{r7}
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop

0800c424 <siprintf>:
 800c424:	b40e      	push	{r1, r2, r3}
 800c426:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c42a:	b500      	push	{lr}
 800c42c:	b09c      	sub	sp, #112	@ 0x70
 800c42e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c430:	9002      	str	r0, [sp, #8]
 800c432:	9006      	str	r0, [sp, #24]
 800c434:	9107      	str	r1, [sp, #28]
 800c436:	9104      	str	r1, [sp, #16]
 800c438:	4808      	ldr	r0, [pc, #32]	@ (800c45c <siprintf+0x38>)
 800c43a:	4909      	ldr	r1, [pc, #36]	@ (800c460 <siprintf+0x3c>)
 800c43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c440:	9105      	str	r1, [sp, #20]
 800c442:	6800      	ldr	r0, [r0, #0]
 800c444:	a902      	add	r1, sp, #8
 800c446:	9301      	str	r3, [sp, #4]
 800c448:	f000 f9ac 	bl	800c7a4 <_svfiprintf_r>
 800c44c:	2200      	movs	r2, #0
 800c44e:	9b02      	ldr	r3, [sp, #8]
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	b01c      	add	sp, #112	@ 0x70
 800c454:	f85d eb04 	ldr.w	lr, [sp], #4
 800c458:	b003      	add	sp, #12
 800c45a:	4770      	bx	lr
 800c45c:	20000278 	.word	0x20000278
 800c460:	ffff0208 	.word	0xffff0208

0800c464 <memmove>:
 800c464:	4288      	cmp	r0, r1
 800c466:	b510      	push	{r4, lr}
 800c468:	eb01 0402 	add.w	r4, r1, r2
 800c46c:	d902      	bls.n	800c474 <memmove+0x10>
 800c46e:	4284      	cmp	r4, r0
 800c470:	4623      	mov	r3, r4
 800c472:	d807      	bhi.n	800c484 <memmove+0x20>
 800c474:	1e43      	subs	r3, r0, #1
 800c476:	42a1      	cmp	r1, r4
 800c478:	d008      	beq.n	800c48c <memmove+0x28>
 800c47a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c47e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c482:	e7f8      	b.n	800c476 <memmove+0x12>
 800c484:	4601      	mov	r1, r0
 800c486:	4402      	add	r2, r0
 800c488:	428a      	cmp	r2, r1
 800c48a:	d100      	bne.n	800c48e <memmove+0x2a>
 800c48c:	bd10      	pop	{r4, pc}
 800c48e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c496:	e7f7      	b.n	800c488 <memmove+0x24>

0800c498 <memset>:
 800c498:	4603      	mov	r3, r0
 800c49a:	4402      	add	r2, r0
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d100      	bne.n	800c4a2 <memset+0xa>
 800c4a0:	4770      	bx	lr
 800c4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4a6:	e7f9      	b.n	800c49c <memset+0x4>

0800c4a8 <__errno>:
 800c4a8:	4b01      	ldr	r3, [pc, #4]	@ (800c4b0 <__errno+0x8>)
 800c4aa:	6818      	ldr	r0, [r3, #0]
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	20000278 	.word	0x20000278

0800c4b4 <__libc_init_array>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	2600      	movs	r6, #0
 800c4b8:	4d0c      	ldr	r5, [pc, #48]	@ (800c4ec <__libc_init_array+0x38>)
 800c4ba:	4c0d      	ldr	r4, [pc, #52]	@ (800c4f0 <__libc_init_array+0x3c>)
 800c4bc:	1b64      	subs	r4, r4, r5
 800c4be:	10a4      	asrs	r4, r4, #2
 800c4c0:	42a6      	cmp	r6, r4
 800c4c2:	d109      	bne.n	800c4d8 <__libc_init_array+0x24>
 800c4c4:	f000 fc5e 	bl	800cd84 <_init>
 800c4c8:	2600      	movs	r6, #0
 800c4ca:	4d0a      	ldr	r5, [pc, #40]	@ (800c4f4 <__libc_init_array+0x40>)
 800c4cc:	4c0a      	ldr	r4, [pc, #40]	@ (800c4f8 <__libc_init_array+0x44>)
 800c4ce:	1b64      	subs	r4, r4, r5
 800c4d0:	10a4      	asrs	r4, r4, #2
 800c4d2:	42a6      	cmp	r6, r4
 800c4d4:	d105      	bne.n	800c4e2 <__libc_init_array+0x2e>
 800c4d6:	bd70      	pop	{r4, r5, r6, pc}
 800c4d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4dc:	4798      	blx	r3
 800c4de:	3601      	adds	r6, #1
 800c4e0:	e7ee      	b.n	800c4c0 <__libc_init_array+0xc>
 800c4e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4e6:	4798      	blx	r3
 800c4e8:	3601      	adds	r6, #1
 800c4ea:	e7f2      	b.n	800c4d2 <__libc_init_array+0x1e>
 800c4ec:	0800fce0 	.word	0x0800fce0
 800c4f0:	0800fce0 	.word	0x0800fce0
 800c4f4:	0800fce0 	.word	0x0800fce0
 800c4f8:	0800fce4 	.word	0x0800fce4

0800c4fc <__retarget_lock_acquire_recursive>:
 800c4fc:	4770      	bx	lr

0800c4fe <__retarget_lock_release_recursive>:
 800c4fe:	4770      	bx	lr

0800c500 <_free_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4605      	mov	r5, r0
 800c504:	2900      	cmp	r1, #0
 800c506:	d040      	beq.n	800c58a <_free_r+0x8a>
 800c508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c50c:	1f0c      	subs	r4, r1, #4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bfb8      	it	lt
 800c512:	18e4      	addlt	r4, r4, r3
 800c514:	f000 f8de 	bl	800c6d4 <__malloc_lock>
 800c518:	4a1c      	ldr	r2, [pc, #112]	@ (800c58c <_free_r+0x8c>)
 800c51a:	6813      	ldr	r3, [r2, #0]
 800c51c:	b933      	cbnz	r3, 800c52c <_free_r+0x2c>
 800c51e:	6063      	str	r3, [r4, #4]
 800c520:	6014      	str	r4, [r2, #0]
 800c522:	4628      	mov	r0, r5
 800c524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c528:	f000 b8da 	b.w	800c6e0 <__malloc_unlock>
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	d908      	bls.n	800c542 <_free_r+0x42>
 800c530:	6820      	ldr	r0, [r4, #0]
 800c532:	1821      	adds	r1, r4, r0
 800c534:	428b      	cmp	r3, r1
 800c536:	bf01      	itttt	eq
 800c538:	6819      	ldreq	r1, [r3, #0]
 800c53a:	685b      	ldreq	r3, [r3, #4]
 800c53c:	1809      	addeq	r1, r1, r0
 800c53e:	6021      	streq	r1, [r4, #0]
 800c540:	e7ed      	b.n	800c51e <_free_r+0x1e>
 800c542:	461a      	mov	r2, r3
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	b10b      	cbz	r3, 800c54c <_free_r+0x4c>
 800c548:	42a3      	cmp	r3, r4
 800c54a:	d9fa      	bls.n	800c542 <_free_r+0x42>
 800c54c:	6811      	ldr	r1, [r2, #0]
 800c54e:	1850      	adds	r0, r2, r1
 800c550:	42a0      	cmp	r0, r4
 800c552:	d10b      	bne.n	800c56c <_free_r+0x6c>
 800c554:	6820      	ldr	r0, [r4, #0]
 800c556:	4401      	add	r1, r0
 800c558:	1850      	adds	r0, r2, r1
 800c55a:	4283      	cmp	r3, r0
 800c55c:	6011      	str	r1, [r2, #0]
 800c55e:	d1e0      	bne.n	800c522 <_free_r+0x22>
 800c560:	6818      	ldr	r0, [r3, #0]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	4408      	add	r0, r1
 800c566:	6010      	str	r0, [r2, #0]
 800c568:	6053      	str	r3, [r2, #4]
 800c56a:	e7da      	b.n	800c522 <_free_r+0x22>
 800c56c:	d902      	bls.n	800c574 <_free_r+0x74>
 800c56e:	230c      	movs	r3, #12
 800c570:	602b      	str	r3, [r5, #0]
 800c572:	e7d6      	b.n	800c522 <_free_r+0x22>
 800c574:	6820      	ldr	r0, [r4, #0]
 800c576:	1821      	adds	r1, r4, r0
 800c578:	428b      	cmp	r3, r1
 800c57a:	bf01      	itttt	eq
 800c57c:	6819      	ldreq	r1, [r3, #0]
 800c57e:	685b      	ldreq	r3, [r3, #4]
 800c580:	1809      	addeq	r1, r1, r0
 800c582:	6021      	streq	r1, [r4, #0]
 800c584:	6063      	str	r3, [r4, #4]
 800c586:	6054      	str	r4, [r2, #4]
 800c588:	e7cb      	b.n	800c522 <_free_r+0x22>
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	20001cb8 	.word	0x20001cb8

0800c590 <sbrk_aligned>:
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	4e0f      	ldr	r6, [pc, #60]	@ (800c5d0 <sbrk_aligned+0x40>)
 800c594:	460c      	mov	r4, r1
 800c596:	6831      	ldr	r1, [r6, #0]
 800c598:	4605      	mov	r5, r0
 800c59a:	b911      	cbnz	r1, 800c5a2 <sbrk_aligned+0x12>
 800c59c:	f000 fb90 	bl	800ccc0 <_sbrk_r>
 800c5a0:	6030      	str	r0, [r6, #0]
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	f000 fb8b 	bl	800ccc0 <_sbrk_r>
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	d103      	bne.n	800c5b6 <sbrk_aligned+0x26>
 800c5ae:	f04f 34ff 	mov.w	r4, #4294967295
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	bd70      	pop	{r4, r5, r6, pc}
 800c5b6:	1cc4      	adds	r4, r0, #3
 800c5b8:	f024 0403 	bic.w	r4, r4, #3
 800c5bc:	42a0      	cmp	r0, r4
 800c5be:	d0f8      	beq.n	800c5b2 <sbrk_aligned+0x22>
 800c5c0:	1a21      	subs	r1, r4, r0
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f000 fb7c 	bl	800ccc0 <_sbrk_r>
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d1f2      	bne.n	800c5b2 <sbrk_aligned+0x22>
 800c5cc:	e7ef      	b.n	800c5ae <sbrk_aligned+0x1e>
 800c5ce:	bf00      	nop
 800c5d0:	20001cb4 	.word	0x20001cb4

0800c5d4 <_malloc_r>:
 800c5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	1ccd      	adds	r5, r1, #3
 800c5da:	f025 0503 	bic.w	r5, r5, #3
 800c5de:	3508      	adds	r5, #8
 800c5e0:	2d0c      	cmp	r5, #12
 800c5e2:	bf38      	it	cc
 800c5e4:	250c      	movcc	r5, #12
 800c5e6:	2d00      	cmp	r5, #0
 800c5e8:	4606      	mov	r6, r0
 800c5ea:	db01      	blt.n	800c5f0 <_malloc_r+0x1c>
 800c5ec:	42a9      	cmp	r1, r5
 800c5ee:	d904      	bls.n	800c5fa <_malloc_r+0x26>
 800c5f0:	230c      	movs	r3, #12
 800c5f2:	6033      	str	r3, [r6, #0]
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c6d0 <_malloc_r+0xfc>
 800c5fe:	f000 f869 	bl	800c6d4 <__malloc_lock>
 800c602:	f8d8 3000 	ldr.w	r3, [r8]
 800c606:	461c      	mov	r4, r3
 800c608:	bb44      	cbnz	r4, 800c65c <_malloc_r+0x88>
 800c60a:	4629      	mov	r1, r5
 800c60c:	4630      	mov	r0, r6
 800c60e:	f7ff ffbf 	bl	800c590 <sbrk_aligned>
 800c612:	1c43      	adds	r3, r0, #1
 800c614:	4604      	mov	r4, r0
 800c616:	d158      	bne.n	800c6ca <_malloc_r+0xf6>
 800c618:	f8d8 4000 	ldr.w	r4, [r8]
 800c61c:	4627      	mov	r7, r4
 800c61e:	2f00      	cmp	r7, #0
 800c620:	d143      	bne.n	800c6aa <_malloc_r+0xd6>
 800c622:	2c00      	cmp	r4, #0
 800c624:	d04b      	beq.n	800c6be <_malloc_r+0xea>
 800c626:	6823      	ldr	r3, [r4, #0]
 800c628:	4639      	mov	r1, r7
 800c62a:	4630      	mov	r0, r6
 800c62c:	eb04 0903 	add.w	r9, r4, r3
 800c630:	f000 fb46 	bl	800ccc0 <_sbrk_r>
 800c634:	4581      	cmp	r9, r0
 800c636:	d142      	bne.n	800c6be <_malloc_r+0xea>
 800c638:	6821      	ldr	r1, [r4, #0]
 800c63a:	4630      	mov	r0, r6
 800c63c:	1a6d      	subs	r5, r5, r1
 800c63e:	4629      	mov	r1, r5
 800c640:	f7ff ffa6 	bl	800c590 <sbrk_aligned>
 800c644:	3001      	adds	r0, #1
 800c646:	d03a      	beq.n	800c6be <_malloc_r+0xea>
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	442b      	add	r3, r5
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	f8d8 3000 	ldr.w	r3, [r8]
 800c652:	685a      	ldr	r2, [r3, #4]
 800c654:	bb62      	cbnz	r2, 800c6b0 <_malloc_r+0xdc>
 800c656:	f8c8 7000 	str.w	r7, [r8]
 800c65a:	e00f      	b.n	800c67c <_malloc_r+0xa8>
 800c65c:	6822      	ldr	r2, [r4, #0]
 800c65e:	1b52      	subs	r2, r2, r5
 800c660:	d420      	bmi.n	800c6a4 <_malloc_r+0xd0>
 800c662:	2a0b      	cmp	r2, #11
 800c664:	d917      	bls.n	800c696 <_malloc_r+0xc2>
 800c666:	1961      	adds	r1, r4, r5
 800c668:	42a3      	cmp	r3, r4
 800c66a:	6025      	str	r5, [r4, #0]
 800c66c:	bf18      	it	ne
 800c66e:	6059      	strne	r1, [r3, #4]
 800c670:	6863      	ldr	r3, [r4, #4]
 800c672:	bf08      	it	eq
 800c674:	f8c8 1000 	streq.w	r1, [r8]
 800c678:	5162      	str	r2, [r4, r5]
 800c67a:	604b      	str	r3, [r1, #4]
 800c67c:	4630      	mov	r0, r6
 800c67e:	f000 f82f 	bl	800c6e0 <__malloc_unlock>
 800c682:	f104 000b 	add.w	r0, r4, #11
 800c686:	1d23      	adds	r3, r4, #4
 800c688:	f020 0007 	bic.w	r0, r0, #7
 800c68c:	1ac2      	subs	r2, r0, r3
 800c68e:	bf1c      	itt	ne
 800c690:	1a1b      	subne	r3, r3, r0
 800c692:	50a3      	strne	r3, [r4, r2]
 800c694:	e7af      	b.n	800c5f6 <_malloc_r+0x22>
 800c696:	6862      	ldr	r2, [r4, #4]
 800c698:	42a3      	cmp	r3, r4
 800c69a:	bf0c      	ite	eq
 800c69c:	f8c8 2000 	streq.w	r2, [r8]
 800c6a0:	605a      	strne	r2, [r3, #4]
 800c6a2:	e7eb      	b.n	800c67c <_malloc_r+0xa8>
 800c6a4:	4623      	mov	r3, r4
 800c6a6:	6864      	ldr	r4, [r4, #4]
 800c6a8:	e7ae      	b.n	800c608 <_malloc_r+0x34>
 800c6aa:	463c      	mov	r4, r7
 800c6ac:	687f      	ldr	r7, [r7, #4]
 800c6ae:	e7b6      	b.n	800c61e <_malloc_r+0x4a>
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	42a3      	cmp	r3, r4
 800c6b6:	d1fb      	bne.n	800c6b0 <_malloc_r+0xdc>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	6053      	str	r3, [r2, #4]
 800c6bc:	e7de      	b.n	800c67c <_malloc_r+0xa8>
 800c6be:	230c      	movs	r3, #12
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	6033      	str	r3, [r6, #0]
 800c6c4:	f000 f80c 	bl	800c6e0 <__malloc_unlock>
 800c6c8:	e794      	b.n	800c5f4 <_malloc_r+0x20>
 800c6ca:	6005      	str	r5, [r0, #0]
 800c6cc:	e7d6      	b.n	800c67c <_malloc_r+0xa8>
 800c6ce:	bf00      	nop
 800c6d0:	20001cb8 	.word	0x20001cb8

0800c6d4 <__malloc_lock>:
 800c6d4:	4801      	ldr	r0, [pc, #4]	@ (800c6dc <__malloc_lock+0x8>)
 800c6d6:	f7ff bf11 	b.w	800c4fc <__retarget_lock_acquire_recursive>
 800c6da:	bf00      	nop
 800c6dc:	20001cb0 	.word	0x20001cb0

0800c6e0 <__malloc_unlock>:
 800c6e0:	4801      	ldr	r0, [pc, #4]	@ (800c6e8 <__malloc_unlock+0x8>)
 800c6e2:	f7ff bf0c 	b.w	800c4fe <__retarget_lock_release_recursive>
 800c6e6:	bf00      	nop
 800c6e8:	20001cb0 	.word	0x20001cb0

0800c6ec <__ssputs_r>:
 800c6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f0:	461f      	mov	r7, r3
 800c6f2:	688e      	ldr	r6, [r1, #8]
 800c6f4:	4682      	mov	sl, r0
 800c6f6:	42be      	cmp	r6, r7
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	4690      	mov	r8, r2
 800c6fc:	680b      	ldr	r3, [r1, #0]
 800c6fe:	d82d      	bhi.n	800c75c <__ssputs_r+0x70>
 800c700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c704:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c708:	d026      	beq.n	800c758 <__ssputs_r+0x6c>
 800c70a:	6965      	ldr	r5, [r4, #20]
 800c70c:	6909      	ldr	r1, [r1, #16]
 800c70e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c712:	eba3 0901 	sub.w	r9, r3, r1
 800c716:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c71a:	1c7b      	adds	r3, r7, #1
 800c71c:	444b      	add	r3, r9
 800c71e:	106d      	asrs	r5, r5, #1
 800c720:	429d      	cmp	r5, r3
 800c722:	bf38      	it	cc
 800c724:	461d      	movcc	r5, r3
 800c726:	0553      	lsls	r3, r2, #21
 800c728:	d527      	bpl.n	800c77a <__ssputs_r+0x8e>
 800c72a:	4629      	mov	r1, r5
 800c72c:	f7ff ff52 	bl	800c5d4 <_malloc_r>
 800c730:	4606      	mov	r6, r0
 800c732:	b360      	cbz	r0, 800c78e <__ssputs_r+0xa2>
 800c734:	464a      	mov	r2, r9
 800c736:	6921      	ldr	r1, [r4, #16]
 800c738:	f000 fae0 	bl	800ccfc <memcpy>
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c746:	81a3      	strh	r3, [r4, #12]
 800c748:	6126      	str	r6, [r4, #16]
 800c74a:	444e      	add	r6, r9
 800c74c:	6026      	str	r6, [r4, #0]
 800c74e:	463e      	mov	r6, r7
 800c750:	6165      	str	r5, [r4, #20]
 800c752:	eba5 0509 	sub.w	r5, r5, r9
 800c756:	60a5      	str	r5, [r4, #8]
 800c758:	42be      	cmp	r6, r7
 800c75a:	d900      	bls.n	800c75e <__ssputs_r+0x72>
 800c75c:	463e      	mov	r6, r7
 800c75e:	4632      	mov	r2, r6
 800c760:	4641      	mov	r1, r8
 800c762:	6820      	ldr	r0, [r4, #0]
 800c764:	f7ff fe7e 	bl	800c464 <memmove>
 800c768:	2000      	movs	r0, #0
 800c76a:	68a3      	ldr	r3, [r4, #8]
 800c76c:	1b9b      	subs	r3, r3, r6
 800c76e:	60a3      	str	r3, [r4, #8]
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	4433      	add	r3, r6
 800c774:	6023      	str	r3, [r4, #0]
 800c776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c77a:	462a      	mov	r2, r5
 800c77c:	f000 facc 	bl	800cd18 <_realloc_r>
 800c780:	4606      	mov	r6, r0
 800c782:	2800      	cmp	r0, #0
 800c784:	d1e0      	bne.n	800c748 <__ssputs_r+0x5c>
 800c786:	4650      	mov	r0, sl
 800c788:	6921      	ldr	r1, [r4, #16]
 800c78a:	f7ff feb9 	bl	800c500 <_free_r>
 800c78e:	230c      	movs	r3, #12
 800c790:	f8ca 3000 	str.w	r3, [sl]
 800c794:	89a3      	ldrh	r3, [r4, #12]
 800c796:	f04f 30ff 	mov.w	r0, #4294967295
 800c79a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c79e:	81a3      	strh	r3, [r4, #12]
 800c7a0:	e7e9      	b.n	800c776 <__ssputs_r+0x8a>
	...

0800c7a4 <_svfiprintf_r>:
 800c7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a8:	4698      	mov	r8, r3
 800c7aa:	898b      	ldrh	r3, [r1, #12]
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	061b      	lsls	r3, r3, #24
 800c7b0:	460d      	mov	r5, r1
 800c7b2:	4614      	mov	r4, r2
 800c7b4:	b09d      	sub	sp, #116	@ 0x74
 800c7b6:	d510      	bpl.n	800c7da <_svfiprintf_r+0x36>
 800c7b8:	690b      	ldr	r3, [r1, #16]
 800c7ba:	b973      	cbnz	r3, 800c7da <_svfiprintf_r+0x36>
 800c7bc:	2140      	movs	r1, #64	@ 0x40
 800c7be:	f7ff ff09 	bl	800c5d4 <_malloc_r>
 800c7c2:	6028      	str	r0, [r5, #0]
 800c7c4:	6128      	str	r0, [r5, #16]
 800c7c6:	b930      	cbnz	r0, 800c7d6 <_svfiprintf_r+0x32>
 800c7c8:	230c      	movs	r3, #12
 800c7ca:	603b      	str	r3, [r7, #0]
 800c7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d0:	b01d      	add	sp, #116	@ 0x74
 800c7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d6:	2340      	movs	r3, #64	@ 0x40
 800c7d8:	616b      	str	r3, [r5, #20]
 800c7da:	2300      	movs	r3, #0
 800c7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7de:	2320      	movs	r3, #32
 800c7e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7e4:	2330      	movs	r3, #48	@ 0x30
 800c7e6:	f04f 0901 	mov.w	r9, #1
 800c7ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7ee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c988 <_svfiprintf_r+0x1e4>
 800c7f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7f6:	4623      	mov	r3, r4
 800c7f8:	469a      	mov	sl, r3
 800c7fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7fe:	b10a      	cbz	r2, 800c804 <_svfiprintf_r+0x60>
 800c800:	2a25      	cmp	r2, #37	@ 0x25
 800c802:	d1f9      	bne.n	800c7f8 <_svfiprintf_r+0x54>
 800c804:	ebba 0b04 	subs.w	fp, sl, r4
 800c808:	d00b      	beq.n	800c822 <_svfiprintf_r+0x7e>
 800c80a:	465b      	mov	r3, fp
 800c80c:	4622      	mov	r2, r4
 800c80e:	4629      	mov	r1, r5
 800c810:	4638      	mov	r0, r7
 800c812:	f7ff ff6b 	bl	800c6ec <__ssputs_r>
 800c816:	3001      	adds	r0, #1
 800c818:	f000 80a7 	beq.w	800c96a <_svfiprintf_r+0x1c6>
 800c81c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c81e:	445a      	add	r2, fp
 800c820:	9209      	str	r2, [sp, #36]	@ 0x24
 800c822:	f89a 3000 	ldrb.w	r3, [sl]
 800c826:	2b00      	cmp	r3, #0
 800c828:	f000 809f 	beq.w	800c96a <_svfiprintf_r+0x1c6>
 800c82c:	2300      	movs	r3, #0
 800c82e:	f04f 32ff 	mov.w	r2, #4294967295
 800c832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c836:	f10a 0a01 	add.w	sl, sl, #1
 800c83a:	9304      	str	r3, [sp, #16]
 800c83c:	9307      	str	r3, [sp, #28]
 800c83e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c842:	931a      	str	r3, [sp, #104]	@ 0x68
 800c844:	4654      	mov	r4, sl
 800c846:	2205      	movs	r2, #5
 800c848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c84c:	484e      	ldr	r0, [pc, #312]	@ (800c988 <_svfiprintf_r+0x1e4>)
 800c84e:	f000 fa47 	bl	800cce0 <memchr>
 800c852:	9a04      	ldr	r2, [sp, #16]
 800c854:	b9d8      	cbnz	r0, 800c88e <_svfiprintf_r+0xea>
 800c856:	06d0      	lsls	r0, r2, #27
 800c858:	bf44      	itt	mi
 800c85a:	2320      	movmi	r3, #32
 800c85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c860:	0711      	lsls	r1, r2, #28
 800c862:	bf44      	itt	mi
 800c864:	232b      	movmi	r3, #43	@ 0x2b
 800c866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c86a:	f89a 3000 	ldrb.w	r3, [sl]
 800c86e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c870:	d015      	beq.n	800c89e <_svfiprintf_r+0xfa>
 800c872:	4654      	mov	r4, sl
 800c874:	2000      	movs	r0, #0
 800c876:	f04f 0c0a 	mov.w	ip, #10
 800c87a:	9a07      	ldr	r2, [sp, #28]
 800c87c:	4621      	mov	r1, r4
 800c87e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c882:	3b30      	subs	r3, #48	@ 0x30
 800c884:	2b09      	cmp	r3, #9
 800c886:	d94b      	bls.n	800c920 <_svfiprintf_r+0x17c>
 800c888:	b1b0      	cbz	r0, 800c8b8 <_svfiprintf_r+0x114>
 800c88a:	9207      	str	r2, [sp, #28]
 800c88c:	e014      	b.n	800c8b8 <_svfiprintf_r+0x114>
 800c88e:	eba0 0308 	sub.w	r3, r0, r8
 800c892:	fa09 f303 	lsl.w	r3, r9, r3
 800c896:	4313      	orrs	r3, r2
 800c898:	46a2      	mov	sl, r4
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	e7d2      	b.n	800c844 <_svfiprintf_r+0xa0>
 800c89e:	9b03      	ldr	r3, [sp, #12]
 800c8a0:	1d19      	adds	r1, r3, #4
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	9103      	str	r1, [sp, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	bfbb      	ittet	lt
 800c8aa:	425b      	neglt	r3, r3
 800c8ac:	f042 0202 	orrlt.w	r2, r2, #2
 800c8b0:	9307      	strge	r3, [sp, #28]
 800c8b2:	9307      	strlt	r3, [sp, #28]
 800c8b4:	bfb8      	it	lt
 800c8b6:	9204      	strlt	r2, [sp, #16]
 800c8b8:	7823      	ldrb	r3, [r4, #0]
 800c8ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8bc:	d10a      	bne.n	800c8d4 <_svfiprintf_r+0x130>
 800c8be:	7863      	ldrb	r3, [r4, #1]
 800c8c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8c2:	d132      	bne.n	800c92a <_svfiprintf_r+0x186>
 800c8c4:	9b03      	ldr	r3, [sp, #12]
 800c8c6:	3402      	adds	r4, #2
 800c8c8:	1d1a      	adds	r2, r3, #4
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	9203      	str	r2, [sp, #12]
 800c8ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8d2:	9305      	str	r3, [sp, #20]
 800c8d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c98c <_svfiprintf_r+0x1e8>
 800c8d8:	2203      	movs	r2, #3
 800c8da:	4650      	mov	r0, sl
 800c8dc:	7821      	ldrb	r1, [r4, #0]
 800c8de:	f000 f9ff 	bl	800cce0 <memchr>
 800c8e2:	b138      	cbz	r0, 800c8f4 <_svfiprintf_r+0x150>
 800c8e4:	2240      	movs	r2, #64	@ 0x40
 800c8e6:	9b04      	ldr	r3, [sp, #16]
 800c8e8:	eba0 000a 	sub.w	r0, r0, sl
 800c8ec:	4082      	lsls	r2, r0
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	3401      	adds	r4, #1
 800c8f2:	9304      	str	r3, [sp, #16]
 800c8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f8:	2206      	movs	r2, #6
 800c8fa:	4825      	ldr	r0, [pc, #148]	@ (800c990 <_svfiprintf_r+0x1ec>)
 800c8fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c900:	f000 f9ee 	bl	800cce0 <memchr>
 800c904:	2800      	cmp	r0, #0
 800c906:	d036      	beq.n	800c976 <_svfiprintf_r+0x1d2>
 800c908:	4b22      	ldr	r3, [pc, #136]	@ (800c994 <_svfiprintf_r+0x1f0>)
 800c90a:	bb1b      	cbnz	r3, 800c954 <_svfiprintf_r+0x1b0>
 800c90c:	9b03      	ldr	r3, [sp, #12]
 800c90e:	3307      	adds	r3, #7
 800c910:	f023 0307 	bic.w	r3, r3, #7
 800c914:	3308      	adds	r3, #8
 800c916:	9303      	str	r3, [sp, #12]
 800c918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c91a:	4433      	add	r3, r6
 800c91c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c91e:	e76a      	b.n	800c7f6 <_svfiprintf_r+0x52>
 800c920:	460c      	mov	r4, r1
 800c922:	2001      	movs	r0, #1
 800c924:	fb0c 3202 	mla	r2, ip, r2, r3
 800c928:	e7a8      	b.n	800c87c <_svfiprintf_r+0xd8>
 800c92a:	2300      	movs	r3, #0
 800c92c:	f04f 0c0a 	mov.w	ip, #10
 800c930:	4619      	mov	r1, r3
 800c932:	3401      	adds	r4, #1
 800c934:	9305      	str	r3, [sp, #20]
 800c936:	4620      	mov	r0, r4
 800c938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c93c:	3a30      	subs	r2, #48	@ 0x30
 800c93e:	2a09      	cmp	r2, #9
 800c940:	d903      	bls.n	800c94a <_svfiprintf_r+0x1a6>
 800c942:	2b00      	cmp	r3, #0
 800c944:	d0c6      	beq.n	800c8d4 <_svfiprintf_r+0x130>
 800c946:	9105      	str	r1, [sp, #20]
 800c948:	e7c4      	b.n	800c8d4 <_svfiprintf_r+0x130>
 800c94a:	4604      	mov	r4, r0
 800c94c:	2301      	movs	r3, #1
 800c94e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c952:	e7f0      	b.n	800c936 <_svfiprintf_r+0x192>
 800c954:	ab03      	add	r3, sp, #12
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	462a      	mov	r2, r5
 800c95a:	4638      	mov	r0, r7
 800c95c:	4b0e      	ldr	r3, [pc, #56]	@ (800c998 <_svfiprintf_r+0x1f4>)
 800c95e:	a904      	add	r1, sp, #16
 800c960:	f3af 8000 	nop.w
 800c964:	1c42      	adds	r2, r0, #1
 800c966:	4606      	mov	r6, r0
 800c968:	d1d6      	bne.n	800c918 <_svfiprintf_r+0x174>
 800c96a:	89ab      	ldrh	r3, [r5, #12]
 800c96c:	065b      	lsls	r3, r3, #25
 800c96e:	f53f af2d 	bmi.w	800c7cc <_svfiprintf_r+0x28>
 800c972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c974:	e72c      	b.n	800c7d0 <_svfiprintf_r+0x2c>
 800c976:	ab03      	add	r3, sp, #12
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	462a      	mov	r2, r5
 800c97c:	4638      	mov	r0, r7
 800c97e:	4b06      	ldr	r3, [pc, #24]	@ (800c998 <_svfiprintf_r+0x1f4>)
 800c980:	a904      	add	r1, sp, #16
 800c982:	f000 f87d 	bl	800ca80 <_printf_i>
 800c986:	e7ed      	b.n	800c964 <_svfiprintf_r+0x1c0>
 800c988:	0800fca2 	.word	0x0800fca2
 800c98c:	0800fca8 	.word	0x0800fca8
 800c990:	0800fcac 	.word	0x0800fcac
 800c994:	00000000 	.word	0x00000000
 800c998:	0800c6ed 	.word	0x0800c6ed

0800c99c <_printf_common>:
 800c99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a0:	4616      	mov	r6, r2
 800c9a2:	4698      	mov	r8, r3
 800c9a4:	688a      	ldr	r2, [r1, #8]
 800c9a6:	690b      	ldr	r3, [r1, #16]
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	bfb8      	it	lt
 800c9ae:	4613      	movlt	r3, r2
 800c9b0:	6033      	str	r3, [r6, #0]
 800c9b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c9b6:	460c      	mov	r4, r1
 800c9b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c9bc:	b10a      	cbz	r2, 800c9c2 <_printf_common+0x26>
 800c9be:	3301      	adds	r3, #1
 800c9c0:	6033      	str	r3, [r6, #0]
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	0699      	lsls	r1, r3, #26
 800c9c6:	bf42      	ittt	mi
 800c9c8:	6833      	ldrmi	r3, [r6, #0]
 800c9ca:	3302      	addmi	r3, #2
 800c9cc:	6033      	strmi	r3, [r6, #0]
 800c9ce:	6825      	ldr	r5, [r4, #0]
 800c9d0:	f015 0506 	ands.w	r5, r5, #6
 800c9d4:	d106      	bne.n	800c9e4 <_printf_common+0x48>
 800c9d6:	f104 0a19 	add.w	sl, r4, #25
 800c9da:	68e3      	ldr	r3, [r4, #12]
 800c9dc:	6832      	ldr	r2, [r6, #0]
 800c9de:	1a9b      	subs	r3, r3, r2
 800c9e0:	42ab      	cmp	r3, r5
 800c9e2:	dc2b      	bgt.n	800ca3c <_printf_common+0xa0>
 800c9e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c9e8:	6822      	ldr	r2, [r4, #0]
 800c9ea:	3b00      	subs	r3, #0
 800c9ec:	bf18      	it	ne
 800c9ee:	2301      	movne	r3, #1
 800c9f0:	0692      	lsls	r2, r2, #26
 800c9f2:	d430      	bmi.n	800ca56 <_printf_common+0xba>
 800c9f4:	4641      	mov	r1, r8
 800c9f6:	4638      	mov	r0, r7
 800c9f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c9fc:	47c8      	blx	r9
 800c9fe:	3001      	adds	r0, #1
 800ca00:	d023      	beq.n	800ca4a <_printf_common+0xae>
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	6922      	ldr	r2, [r4, #16]
 800ca06:	f003 0306 	and.w	r3, r3, #6
 800ca0a:	2b04      	cmp	r3, #4
 800ca0c:	bf14      	ite	ne
 800ca0e:	2500      	movne	r5, #0
 800ca10:	6833      	ldreq	r3, [r6, #0]
 800ca12:	f04f 0600 	mov.w	r6, #0
 800ca16:	bf08      	it	eq
 800ca18:	68e5      	ldreq	r5, [r4, #12]
 800ca1a:	f104 041a 	add.w	r4, r4, #26
 800ca1e:	bf08      	it	eq
 800ca20:	1aed      	subeq	r5, r5, r3
 800ca22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca26:	bf08      	it	eq
 800ca28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	bfc4      	itt	gt
 800ca30:	1a9b      	subgt	r3, r3, r2
 800ca32:	18ed      	addgt	r5, r5, r3
 800ca34:	42b5      	cmp	r5, r6
 800ca36:	d11a      	bne.n	800ca6e <_printf_common+0xd2>
 800ca38:	2000      	movs	r0, #0
 800ca3a:	e008      	b.n	800ca4e <_printf_common+0xb2>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	4652      	mov	r2, sl
 800ca40:	4641      	mov	r1, r8
 800ca42:	4638      	mov	r0, r7
 800ca44:	47c8      	blx	r9
 800ca46:	3001      	adds	r0, #1
 800ca48:	d103      	bne.n	800ca52 <_printf_common+0xb6>
 800ca4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca52:	3501      	adds	r5, #1
 800ca54:	e7c1      	b.n	800c9da <_printf_common+0x3e>
 800ca56:	2030      	movs	r0, #48	@ 0x30
 800ca58:	18e1      	adds	r1, r4, r3
 800ca5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca64:	4422      	add	r2, r4
 800ca66:	3302      	adds	r3, #2
 800ca68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ca6c:	e7c2      	b.n	800c9f4 <_printf_common+0x58>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	4622      	mov	r2, r4
 800ca72:	4641      	mov	r1, r8
 800ca74:	4638      	mov	r0, r7
 800ca76:	47c8      	blx	r9
 800ca78:	3001      	adds	r0, #1
 800ca7a:	d0e6      	beq.n	800ca4a <_printf_common+0xae>
 800ca7c:	3601      	adds	r6, #1
 800ca7e:	e7d9      	b.n	800ca34 <_printf_common+0x98>

0800ca80 <_printf_i>:
 800ca80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca84:	7e0f      	ldrb	r7, [r1, #24]
 800ca86:	4691      	mov	r9, r2
 800ca88:	2f78      	cmp	r7, #120	@ 0x78
 800ca8a:	4680      	mov	r8, r0
 800ca8c:	460c      	mov	r4, r1
 800ca8e:	469a      	mov	sl, r3
 800ca90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca96:	d807      	bhi.n	800caa8 <_printf_i+0x28>
 800ca98:	2f62      	cmp	r7, #98	@ 0x62
 800ca9a:	d80a      	bhi.n	800cab2 <_printf_i+0x32>
 800ca9c:	2f00      	cmp	r7, #0
 800ca9e:	f000 80d3 	beq.w	800cc48 <_printf_i+0x1c8>
 800caa2:	2f58      	cmp	r7, #88	@ 0x58
 800caa4:	f000 80ba 	beq.w	800cc1c <_printf_i+0x19c>
 800caa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800caac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cab0:	e03a      	b.n	800cb28 <_printf_i+0xa8>
 800cab2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cab6:	2b15      	cmp	r3, #21
 800cab8:	d8f6      	bhi.n	800caa8 <_printf_i+0x28>
 800caba:	a101      	add	r1, pc, #4	@ (adr r1, 800cac0 <_printf_i+0x40>)
 800cabc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cac0:	0800cb19 	.word	0x0800cb19
 800cac4:	0800cb2d 	.word	0x0800cb2d
 800cac8:	0800caa9 	.word	0x0800caa9
 800cacc:	0800caa9 	.word	0x0800caa9
 800cad0:	0800caa9 	.word	0x0800caa9
 800cad4:	0800caa9 	.word	0x0800caa9
 800cad8:	0800cb2d 	.word	0x0800cb2d
 800cadc:	0800caa9 	.word	0x0800caa9
 800cae0:	0800caa9 	.word	0x0800caa9
 800cae4:	0800caa9 	.word	0x0800caa9
 800cae8:	0800caa9 	.word	0x0800caa9
 800caec:	0800cc2f 	.word	0x0800cc2f
 800caf0:	0800cb57 	.word	0x0800cb57
 800caf4:	0800cbe9 	.word	0x0800cbe9
 800caf8:	0800caa9 	.word	0x0800caa9
 800cafc:	0800caa9 	.word	0x0800caa9
 800cb00:	0800cc51 	.word	0x0800cc51
 800cb04:	0800caa9 	.word	0x0800caa9
 800cb08:	0800cb57 	.word	0x0800cb57
 800cb0c:	0800caa9 	.word	0x0800caa9
 800cb10:	0800caa9 	.word	0x0800caa9
 800cb14:	0800cbf1 	.word	0x0800cbf1
 800cb18:	6833      	ldr	r3, [r6, #0]
 800cb1a:	1d1a      	adds	r2, r3, #4
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	6032      	str	r2, [r6, #0]
 800cb20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e09e      	b.n	800cc6a <_printf_i+0x1ea>
 800cb2c:	6833      	ldr	r3, [r6, #0]
 800cb2e:	6820      	ldr	r0, [r4, #0]
 800cb30:	1d19      	adds	r1, r3, #4
 800cb32:	6031      	str	r1, [r6, #0]
 800cb34:	0606      	lsls	r6, r0, #24
 800cb36:	d501      	bpl.n	800cb3c <_printf_i+0xbc>
 800cb38:	681d      	ldr	r5, [r3, #0]
 800cb3a:	e003      	b.n	800cb44 <_printf_i+0xc4>
 800cb3c:	0645      	lsls	r5, r0, #25
 800cb3e:	d5fb      	bpl.n	800cb38 <_printf_i+0xb8>
 800cb40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb44:	2d00      	cmp	r5, #0
 800cb46:	da03      	bge.n	800cb50 <_printf_i+0xd0>
 800cb48:	232d      	movs	r3, #45	@ 0x2d
 800cb4a:	426d      	negs	r5, r5
 800cb4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb50:	230a      	movs	r3, #10
 800cb52:	4859      	ldr	r0, [pc, #356]	@ (800ccb8 <_printf_i+0x238>)
 800cb54:	e011      	b.n	800cb7a <_printf_i+0xfa>
 800cb56:	6821      	ldr	r1, [r4, #0]
 800cb58:	6833      	ldr	r3, [r6, #0]
 800cb5a:	0608      	lsls	r0, r1, #24
 800cb5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb60:	d402      	bmi.n	800cb68 <_printf_i+0xe8>
 800cb62:	0649      	lsls	r1, r1, #25
 800cb64:	bf48      	it	mi
 800cb66:	b2ad      	uxthmi	r5, r5
 800cb68:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb6a:	6033      	str	r3, [r6, #0]
 800cb6c:	bf14      	ite	ne
 800cb6e:	230a      	movne	r3, #10
 800cb70:	2308      	moveq	r3, #8
 800cb72:	4851      	ldr	r0, [pc, #324]	@ (800ccb8 <_printf_i+0x238>)
 800cb74:	2100      	movs	r1, #0
 800cb76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cb7a:	6866      	ldr	r6, [r4, #4]
 800cb7c:	2e00      	cmp	r6, #0
 800cb7e:	bfa8      	it	ge
 800cb80:	6821      	ldrge	r1, [r4, #0]
 800cb82:	60a6      	str	r6, [r4, #8]
 800cb84:	bfa4      	itt	ge
 800cb86:	f021 0104 	bicge.w	r1, r1, #4
 800cb8a:	6021      	strge	r1, [r4, #0]
 800cb8c:	b90d      	cbnz	r5, 800cb92 <_printf_i+0x112>
 800cb8e:	2e00      	cmp	r6, #0
 800cb90:	d04b      	beq.n	800cc2a <_printf_i+0x1aa>
 800cb92:	4616      	mov	r6, r2
 800cb94:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb98:	fb03 5711 	mls	r7, r3, r1, r5
 800cb9c:	5dc7      	ldrb	r7, [r0, r7]
 800cb9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cba2:	462f      	mov	r7, r5
 800cba4:	42bb      	cmp	r3, r7
 800cba6:	460d      	mov	r5, r1
 800cba8:	d9f4      	bls.n	800cb94 <_printf_i+0x114>
 800cbaa:	2b08      	cmp	r3, #8
 800cbac:	d10b      	bne.n	800cbc6 <_printf_i+0x146>
 800cbae:	6823      	ldr	r3, [r4, #0]
 800cbb0:	07df      	lsls	r7, r3, #31
 800cbb2:	d508      	bpl.n	800cbc6 <_printf_i+0x146>
 800cbb4:	6923      	ldr	r3, [r4, #16]
 800cbb6:	6861      	ldr	r1, [r4, #4]
 800cbb8:	4299      	cmp	r1, r3
 800cbba:	bfde      	ittt	le
 800cbbc:	2330      	movle	r3, #48	@ 0x30
 800cbbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cbc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cbc6:	1b92      	subs	r2, r2, r6
 800cbc8:	6122      	str	r2, [r4, #16]
 800cbca:	464b      	mov	r3, r9
 800cbcc:	4621      	mov	r1, r4
 800cbce:	4640      	mov	r0, r8
 800cbd0:	f8cd a000 	str.w	sl, [sp]
 800cbd4:	aa03      	add	r2, sp, #12
 800cbd6:	f7ff fee1 	bl	800c99c <_printf_common>
 800cbda:	3001      	adds	r0, #1
 800cbdc:	d14a      	bne.n	800cc74 <_printf_i+0x1f4>
 800cbde:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe2:	b004      	add	sp, #16
 800cbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	f043 0320 	orr.w	r3, r3, #32
 800cbee:	6023      	str	r3, [r4, #0]
 800cbf0:	2778      	movs	r7, #120	@ 0x78
 800cbf2:	4832      	ldr	r0, [pc, #200]	@ (800ccbc <_printf_i+0x23c>)
 800cbf4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	6831      	ldr	r1, [r6, #0]
 800cbfc:	061f      	lsls	r7, r3, #24
 800cbfe:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc02:	d402      	bmi.n	800cc0a <_printf_i+0x18a>
 800cc04:	065f      	lsls	r7, r3, #25
 800cc06:	bf48      	it	mi
 800cc08:	b2ad      	uxthmi	r5, r5
 800cc0a:	6031      	str	r1, [r6, #0]
 800cc0c:	07d9      	lsls	r1, r3, #31
 800cc0e:	bf44      	itt	mi
 800cc10:	f043 0320 	orrmi.w	r3, r3, #32
 800cc14:	6023      	strmi	r3, [r4, #0]
 800cc16:	b11d      	cbz	r5, 800cc20 <_printf_i+0x1a0>
 800cc18:	2310      	movs	r3, #16
 800cc1a:	e7ab      	b.n	800cb74 <_printf_i+0xf4>
 800cc1c:	4826      	ldr	r0, [pc, #152]	@ (800ccb8 <_printf_i+0x238>)
 800cc1e:	e7e9      	b.n	800cbf4 <_printf_i+0x174>
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	f023 0320 	bic.w	r3, r3, #32
 800cc26:	6023      	str	r3, [r4, #0]
 800cc28:	e7f6      	b.n	800cc18 <_printf_i+0x198>
 800cc2a:	4616      	mov	r6, r2
 800cc2c:	e7bd      	b.n	800cbaa <_printf_i+0x12a>
 800cc2e:	6833      	ldr	r3, [r6, #0]
 800cc30:	6825      	ldr	r5, [r4, #0]
 800cc32:	1d18      	adds	r0, r3, #4
 800cc34:	6961      	ldr	r1, [r4, #20]
 800cc36:	6030      	str	r0, [r6, #0]
 800cc38:	062e      	lsls	r6, r5, #24
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	d501      	bpl.n	800cc42 <_printf_i+0x1c2>
 800cc3e:	6019      	str	r1, [r3, #0]
 800cc40:	e002      	b.n	800cc48 <_printf_i+0x1c8>
 800cc42:	0668      	lsls	r0, r5, #25
 800cc44:	d5fb      	bpl.n	800cc3e <_printf_i+0x1be>
 800cc46:	8019      	strh	r1, [r3, #0]
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4616      	mov	r6, r2
 800cc4c:	6123      	str	r3, [r4, #16]
 800cc4e:	e7bc      	b.n	800cbca <_printf_i+0x14a>
 800cc50:	6833      	ldr	r3, [r6, #0]
 800cc52:	2100      	movs	r1, #0
 800cc54:	1d1a      	adds	r2, r3, #4
 800cc56:	6032      	str	r2, [r6, #0]
 800cc58:	681e      	ldr	r6, [r3, #0]
 800cc5a:	6862      	ldr	r2, [r4, #4]
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f000 f83f 	bl	800cce0 <memchr>
 800cc62:	b108      	cbz	r0, 800cc68 <_printf_i+0x1e8>
 800cc64:	1b80      	subs	r0, r0, r6
 800cc66:	6060      	str	r0, [r4, #4]
 800cc68:	6863      	ldr	r3, [r4, #4]
 800cc6a:	6123      	str	r3, [r4, #16]
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc72:	e7aa      	b.n	800cbca <_printf_i+0x14a>
 800cc74:	4632      	mov	r2, r6
 800cc76:	4649      	mov	r1, r9
 800cc78:	4640      	mov	r0, r8
 800cc7a:	6923      	ldr	r3, [r4, #16]
 800cc7c:	47d0      	blx	sl
 800cc7e:	3001      	adds	r0, #1
 800cc80:	d0ad      	beq.n	800cbde <_printf_i+0x15e>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	079b      	lsls	r3, r3, #30
 800cc86:	d413      	bmi.n	800ccb0 <_printf_i+0x230>
 800cc88:	68e0      	ldr	r0, [r4, #12]
 800cc8a:	9b03      	ldr	r3, [sp, #12]
 800cc8c:	4298      	cmp	r0, r3
 800cc8e:	bfb8      	it	lt
 800cc90:	4618      	movlt	r0, r3
 800cc92:	e7a6      	b.n	800cbe2 <_printf_i+0x162>
 800cc94:	2301      	movs	r3, #1
 800cc96:	4632      	mov	r2, r6
 800cc98:	4649      	mov	r1, r9
 800cc9a:	4640      	mov	r0, r8
 800cc9c:	47d0      	blx	sl
 800cc9e:	3001      	adds	r0, #1
 800cca0:	d09d      	beq.n	800cbde <_printf_i+0x15e>
 800cca2:	3501      	adds	r5, #1
 800cca4:	68e3      	ldr	r3, [r4, #12]
 800cca6:	9903      	ldr	r1, [sp, #12]
 800cca8:	1a5b      	subs	r3, r3, r1
 800ccaa:	42ab      	cmp	r3, r5
 800ccac:	dcf2      	bgt.n	800cc94 <_printf_i+0x214>
 800ccae:	e7eb      	b.n	800cc88 <_printf_i+0x208>
 800ccb0:	2500      	movs	r5, #0
 800ccb2:	f104 0619 	add.w	r6, r4, #25
 800ccb6:	e7f5      	b.n	800cca4 <_printf_i+0x224>
 800ccb8:	0800fcb3 	.word	0x0800fcb3
 800ccbc:	0800fcc4 	.word	0x0800fcc4

0800ccc0 <_sbrk_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	4d05      	ldr	r5, [pc, #20]	@ (800ccdc <_sbrk_r+0x1c>)
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	4608      	mov	r0, r1
 800ccca:	602b      	str	r3, [r5, #0]
 800cccc:	f7f4 ffae 	bl	8001c2c <_sbrk>
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	d102      	bne.n	800ccda <_sbrk_r+0x1a>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	b103      	cbz	r3, 800ccda <_sbrk_r+0x1a>
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	20001cac 	.word	0x20001cac

0800cce0 <memchr>:
 800cce0:	4603      	mov	r3, r0
 800cce2:	b510      	push	{r4, lr}
 800cce4:	b2c9      	uxtb	r1, r1
 800cce6:	4402      	add	r2, r0
 800cce8:	4293      	cmp	r3, r2
 800ccea:	4618      	mov	r0, r3
 800ccec:	d101      	bne.n	800ccf2 <memchr+0x12>
 800ccee:	2000      	movs	r0, #0
 800ccf0:	e003      	b.n	800ccfa <memchr+0x1a>
 800ccf2:	7804      	ldrb	r4, [r0, #0]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	428c      	cmp	r4, r1
 800ccf8:	d1f6      	bne.n	800cce8 <memchr+0x8>
 800ccfa:	bd10      	pop	{r4, pc}

0800ccfc <memcpy>:
 800ccfc:	440a      	add	r2, r1
 800ccfe:	4291      	cmp	r1, r2
 800cd00:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd04:	d100      	bne.n	800cd08 <memcpy+0xc>
 800cd06:	4770      	bx	lr
 800cd08:	b510      	push	{r4, lr}
 800cd0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd0e:	4291      	cmp	r1, r2
 800cd10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd14:	d1f9      	bne.n	800cd0a <memcpy+0xe>
 800cd16:	bd10      	pop	{r4, pc}

0800cd18 <_realloc_r>:
 800cd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1c:	4680      	mov	r8, r0
 800cd1e:	4615      	mov	r5, r2
 800cd20:	460c      	mov	r4, r1
 800cd22:	b921      	cbnz	r1, 800cd2e <_realloc_r+0x16>
 800cd24:	4611      	mov	r1, r2
 800cd26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd2a:	f7ff bc53 	b.w	800c5d4 <_malloc_r>
 800cd2e:	b92a      	cbnz	r2, 800cd3c <_realloc_r+0x24>
 800cd30:	f7ff fbe6 	bl	800c500 <_free_r>
 800cd34:	2400      	movs	r4, #0
 800cd36:	4620      	mov	r0, r4
 800cd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd3c:	f000 f81a 	bl	800cd74 <_malloc_usable_size_r>
 800cd40:	4285      	cmp	r5, r0
 800cd42:	4606      	mov	r6, r0
 800cd44:	d802      	bhi.n	800cd4c <_realloc_r+0x34>
 800cd46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cd4a:	d8f4      	bhi.n	800cd36 <_realloc_r+0x1e>
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	4640      	mov	r0, r8
 800cd50:	f7ff fc40 	bl	800c5d4 <_malloc_r>
 800cd54:	4607      	mov	r7, r0
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d0ec      	beq.n	800cd34 <_realloc_r+0x1c>
 800cd5a:	42b5      	cmp	r5, r6
 800cd5c:	462a      	mov	r2, r5
 800cd5e:	4621      	mov	r1, r4
 800cd60:	bf28      	it	cs
 800cd62:	4632      	movcs	r2, r6
 800cd64:	f7ff ffca 	bl	800ccfc <memcpy>
 800cd68:	4621      	mov	r1, r4
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	f7ff fbc8 	bl	800c500 <_free_r>
 800cd70:	463c      	mov	r4, r7
 800cd72:	e7e0      	b.n	800cd36 <_realloc_r+0x1e>

0800cd74 <_malloc_usable_size_r>:
 800cd74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd78:	1f18      	subs	r0, r3, #4
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	bfbc      	itt	lt
 800cd7e:	580b      	ldrlt	r3, [r1, r0]
 800cd80:	18c0      	addlt	r0, r0, r3
 800cd82:	4770      	bx	lr

0800cd84 <_init>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	bf00      	nop
 800cd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8a:	bc08      	pop	{r3}
 800cd8c:	469e      	mov	lr, r3
 800cd8e:	4770      	bx	lr

0800cd90 <_fini>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	bf00      	nop
 800cd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd96:	bc08      	pop	{r3}
 800cd98:	469e      	mov	lr, r3
 800cd9a:	4770      	bx	lr
