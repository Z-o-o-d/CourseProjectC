
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acf0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023e4  0800ae00  0800ae00  0000be00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1e4  0800d1e4  0000f2e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1e4  0800d1e4  0000e1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1ec  0800d1ec  0000f2e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1ec  0800d1ec  0000e1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1f0  0800d1f0  0000e1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  0800d1f4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000938  200002e0  0800d4d4  0000f2e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c18  0800d4d4  0000fc18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f2e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc11  00000000  00000000  0000f309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003962  00000000  00000000  0002bf1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000cdbb  00000000  00000000  0002f87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  0003c638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa0  00000000  00000000  0003d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a35e  00000000  00000000  0003e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f63e  00000000  00000000  00058b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096e46  00000000  00000000  0007815c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010efa2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a0c  00000000  00000000  0010efe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001139f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002e0 	.word	0x200002e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ade8 	.word	0x0800ade8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002e4 	.word	0x200002e4
 800014c:	0800ade8 	.word	0x0800ade8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_f2uiz>:
 8000fd8:	0042      	lsls	r2, r0, #1
 8000fda:	d20e      	bcs.n	8000ffa <__aeabi_f2uiz+0x22>
 8000fdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fe0:	d30b      	bcc.n	8000ffa <__aeabi_f2uiz+0x22>
 8000fe2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fe6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fea:	d409      	bmi.n	8001000 <__aeabi_f2uiz+0x28>
 8000fec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	4770      	bx	lr
 8000ffa:	f04f 0000 	mov.w	r0, #0
 8000ffe:	4770      	bx	lr
 8001000:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001004:	d101      	bne.n	800100a <__aeabi_f2uiz+0x32>
 8001006:	0242      	lsls	r2, r0, #9
 8001008:	d102      	bne.n	8001010 <__aeabi_f2uiz+0x38>
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	4770      	bx	lr
 8001010:	f04f 0000 	mov.w	r0, #0
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_d2lz>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	2200      	movs	r2, #0
 800101c:	2300      	movs	r3, #0
 800101e:	4604      	mov	r4, r0
 8001020:	460d      	mov	r5, r1
 8001022:	f7ff fd7f 	bl	8000b24 <__aeabi_dcmplt>
 8001026:	b928      	cbnz	r0, 8001034 <__aeabi_d2lz+0x1c>
 8001028:	4620      	mov	r0, r4
 800102a:	4629      	mov	r1, r5
 800102c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001030:	f000 b80a 	b.w	8001048 <__aeabi_d2ulz>
 8001034:	4620      	mov	r0, r4
 8001036:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800103a:	f000 f805 	bl	8001048 <__aeabi_d2ulz>
 800103e:	4240      	negs	r0, r0
 8001040:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001044:	bd38      	pop	{r3, r4, r5, pc}
 8001046:	bf00      	nop

08001048 <__aeabi_d2ulz>:
 8001048:	b5d0      	push	{r4, r6, r7, lr}
 800104a:	2200      	movs	r2, #0
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <__aeabi_d2ulz+0x34>)
 800104e:	4606      	mov	r6, r0
 8001050:	460f      	mov	r7, r1
 8001052:	f7ff faf5 	bl	8000640 <__aeabi_dmul>
 8001056:	f7ff fdcb 	bl	8000bf0 <__aeabi_d2uiz>
 800105a:	4604      	mov	r4, r0
 800105c:	f7ff fa76 	bl	800054c <__aeabi_ui2d>
 8001060:	2200      	movs	r2, #0
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <__aeabi_d2ulz+0x38>)
 8001064:	f7ff faec 	bl	8000640 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4630      	mov	r0, r6
 800106e:	4639      	mov	r1, r7
 8001070:	f7ff f92e 	bl	80002d0 <__aeabi_dsub>
 8001074:	f7ff fdbc 	bl	8000bf0 <__aeabi_d2uiz>
 8001078:	4621      	mov	r1, r4
 800107a:	bdd0      	pop	{r4, r6, r7, pc}
 800107c:	3df00000 	.word	0x3df00000
 8001080:	41f00000 	.word	0x41f00000

08001084 <ESP_SendCommand>:
    strncpy(esp_config.ap_ssid, ap_ssid, sizeof(esp_config.ap_ssid));
    strncpy(esp_config.ap_pswd, ap_pswd, sizeof(esp_config.ap_pswd));
    strncpy(esp_config.ap_ip, ap_ip, sizeof(esp_config.ap_ip));
}

void ESP_SendCommand(const char *command) {
 8001084:	b510      	push	{r4, lr}
 8001086:	4604      	mov	r4, r0
    // Transmit the command using the default UART
    HAL_UART_Transmit(AT_huart, (uint8_t*)command, strlen(command), 1000);
 8001088:	f7ff f862 	bl	8000150 <strlen>
 800108c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001090:	b282      	uxth	r2, r0
 8001092:	4621      	mov	r1, r4
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <ESP_SendCommand+0x1c>)
 8001096:	6800      	ldr	r0, [r0, #0]
 8001098:	f004 ffd8 	bl	800604c <HAL_UART_Transmit>
}
 800109c:	bd10      	pop	{r4, pc}
 800109e:	bf00      	nop
 80010a0:	200002fc 	.word	0x200002fc

080010a4 <ESP_SendTCP>:

void ESP_SendTCP(uint8_t con_num, char *data) {
 80010a4:	b530      	push	{r4, r5, lr}
 80010a6:	b08f      	sub	sp, #60	@ 0x3c
 80010a8:	4605      	mov	r5, r0
 80010aa:	460c      	mov	r4, r1
    // Calculate the total length
    uint8_t cmd[50];
    sprintf((char*)cmd, "AT+CIPSEND=%d,%d\r\n", con_num, strlen(data));
 80010ac:	4608      	mov	r0, r1
 80010ae:	f7ff f84f 	bl	8000150 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	462a      	mov	r2, r5
 80010b6:	490e      	ldr	r1, [pc, #56]	@ (80010f0 <ESP_SendTCP+0x4c>)
 80010b8:	a801      	add	r0, sp, #4
 80010ba:	f006 fa45 	bl	8007548 <siprintf>
    HAL_UART_Transmit(AT_huart, cmd, strlen((char*)cmd), 100);
 80010be:	a801      	add	r0, sp, #4
 80010c0:	f7ff f846 	bl	8000150 <strlen>
 80010c4:	4d0b      	ldr	r5, [pc, #44]	@ (80010f4 <ESP_SendTCP+0x50>)
 80010c6:	2364      	movs	r3, #100	@ 0x64
 80010c8:	b282      	uxth	r2, r0
 80010ca:	a901      	add	r1, sp, #4
 80010cc:	6828      	ldr	r0, [r5, #0]
 80010ce:	f004 ffbd 	bl	800604c <HAL_UART_Transmit>
    HAL_Delay(1); // Adjust this delay as needed
 80010d2:	2001      	movs	r0, #1
 80010d4:	f002 fc82 	bl	80039dc <HAL_Delay>
    HAL_UART_Transmit(AT_huart, (uint8_t *)data, strlen(data), 1000);
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff f839 	bl	8000150 <strlen>
 80010de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e2:	b282      	uxth	r2, r0
 80010e4:	4621      	mov	r1, r4
 80010e6:	6828      	ldr	r0, [r5, #0]
 80010e8:	f004 ffb0 	bl	800604c <HAL_UART_Transmit>
}
 80010ec:	b00f      	add	sp, #60	@ 0x3c
 80010ee:	bd30      	pop	{r4, r5, pc}
 80010f0:	0800ae08 	.word	0x0800ae08
 80010f4:	200002fc 	.word	0x200002fc

080010f8 <ESP_UART_Init>:

void ESP_UART_Init(UART_HandleTypeDef *huart){
    AT_huart = huart;
 80010f8:	4b01      	ldr	r3, [pc, #4]	@ (8001100 <ESP_UART_Init+0x8>)
 80010fa:	6018      	str	r0, [r3, #0]
}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200002fc 	.word	0x200002fc

08001104 <ESP_SetMode_AP>:
#else
    ESP_SendCommand("AT+RST\r\n");
#endif
}

void ESP_SetMode_AP() {
 8001104:	b508      	push	{r3, lr}
    ESP_SendCommand("AT+CWMODE=2\r\n");
 8001106:	4802      	ldr	r0, [pc, #8]	@ (8001110 <ESP_SetMode_AP+0xc>)
 8001108:	f7ff ffbc 	bl	8001084 <ESP_SendCommand>
}
 800110c:	bd08      	pop	{r3, pc}
 800110e:	bf00      	nop
 8001110:	0800ae1c 	.word	0x0800ae1c

08001114 <ESP_SetIP>:

void ESP_SetIP(const char *ip) {
 8001114:	b500      	push	{lr}
 8001116:	b08f      	sub	sp, #60	@ 0x3c
 8001118:	4602      	mov	r2, r0
    char cmd[50];
    sprintf(cmd, "AT+CIPAP=\"%s\"\r\n", ip);
 800111a:	4905      	ldr	r1, [pc, #20]	@ (8001130 <ESP_SetIP+0x1c>)
 800111c:	a801      	add	r0, sp, #4
 800111e:	f006 fa13 	bl	8007548 <siprintf>
    ESP_SendCommand(cmd);
 8001122:	a801      	add	r0, sp, #4
 8001124:	f7ff ffae 	bl	8001084 <ESP_SendCommand>
}
 8001128:	b00f      	add	sp, #60	@ 0x3c
 800112a:	f85d fb04 	ldr.w	pc, [sp], #4
 800112e:	bf00      	nop
 8001130:	0800ae2c 	.word	0x0800ae2c

08001134 <ESP_SetMode_AP_STD>:

void ESP_SetMode_AP_STD() {
 8001134:	b508      	push	{r3, lr}
    ESP_SendCommand("AT+CWMODE=3\r\n");
 8001136:	4802      	ldr	r0, [pc, #8]	@ (8001140 <ESP_SetMode_AP_STD+0xc>)
 8001138:	f7ff ffa4 	bl	8001084 <ESP_SendCommand>
}
 800113c:	bd08      	pop	{r3, pc}
 800113e:	bf00      	nop
 8001140:	0800ae3c 	.word	0x0800ae3c

08001144 <ESP_SetSoftAP>:

void ESP_SetSoftAP(const char *ssid, const char *password) {
 8001144:	b500      	push	{lr}
 8001146:	b09b      	sub	sp, #108	@ 0x6c
 8001148:	4602      	mov	r2, r0
    #ifdef USE_PASSWORD
        // Use password if USE_PASSWORD is defined
        sprintf(cmd, "AT+CWSAP=\"%s\",\"%s\",1,3\r\n", ssid, password);
    #else
        // No password if USE_PASSWORD is not defined
        sprintf(cmd, "AT+CWSAP=\"%s\",\"\",1,0\r\n", ssid);
 800114a:	4905      	ldr	r1, [pc, #20]	@ (8001160 <ESP_SetSoftAP+0x1c>)
 800114c:	a801      	add	r0, sp, #4
 800114e:	f006 f9fb 	bl	8007548 <siprintf>
    #endif

    ESP_SendCommand(cmd);
 8001152:	a801      	add	r0, sp, #4
 8001154:	f7ff ff96 	bl	8001084 <ESP_SendCommand>
}
 8001158:	b01b      	add	sp, #108	@ 0x6c
 800115a:	f85d fb04 	ldr.w	pc, [sp], #4
 800115e:	bf00      	nop
 8001160:	0800ae4c 	.word	0x0800ae4c

08001164 <ESP_ConnectWiFi>:

void ESP_ConnectWiFi(const char *ssid, const char *password) {
 8001164:	b500      	push	{lr}
 8001166:	b09b      	sub	sp, #108	@ 0x6c
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
    char cmd[100];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 800116c:	4904      	ldr	r1, [pc, #16]	@ (8001180 <ESP_ConnectWiFi+0x1c>)
 800116e:	a801      	add	r0, sp, #4
 8001170:	f006 f9ea 	bl	8007548 <siprintf>
    ESP_SendCommand(cmd);
 8001174:	a801      	add	r0, sp, #4
 8001176:	f7ff ff85 	bl	8001084 <ESP_SendCommand>
}
 800117a:	b01b      	add	sp, #108	@ 0x6c
 800117c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001180:	0800ae64 	.word	0x0800ae64

08001184 <ESP_CheckWiFi>:

WiFiInfoTypeDef ESP_CheckWiFi(void) {
 8001184:	b570      	push	{r4, r5, r6, lr}
 8001186:	b0a8      	sub	sp, #160	@ 0xa0
 8001188:	4605      	mov	r5, r0
    WiFiInfoTypeDef info = {0};
 800118a:	2232      	movs	r2, #50	@ 0x32
 800118c:	2100      	movs	r1, #0
 800118e:	a81a      	add	r0, sp, #104	@ 0x68
 8001190:	f006 fa3d 	bl	800760e <memset>
    char response[100] = {0};
 8001194:	2400      	movs	r4, #0
 8001196:	9401      	str	r4, [sp, #4]
 8001198:	2260      	movs	r2, #96	@ 0x60
 800119a:	4621      	mov	r1, r4
 800119c:	a802      	add	r0, sp, #8
 800119e:	f006 fa36 	bl	800760e <memset>
    char *token;
    huart3.RxXferCount = 0;
 80011a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001250 <ESP_CheckWiFi+0xcc>)
 80011a4:	85dc      	strh	r4, [r3, #46]	@ 0x2e
    ESP_SendCommand("AT+CWJAP?\r\n");
 80011a6:	482b      	ldr	r0, [pc, #172]	@ (8001254 <ESP_CheckWiFi+0xd0>)
 80011a8:	f7ff ff6c 	bl	8001084 <ESP_SendCommand>
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);
 80011ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b0:	2264      	movs	r2, #100	@ 0x64
 80011b2:	a901      	add	r1, sp, #4
 80011b4:	4828      	ldr	r0, [pc, #160]	@ (8001258 <ESP_CheckWiFi+0xd4>)
 80011b6:	6800      	ldr	r0, [r0, #0]
 80011b8:	f004 ffad 	bl	8006116 <HAL_UART_Receive>
    // Parse the response and populate the WiFiInfo struct

    // I don know why it can't be     token = strtok(response, "+CWJAP:,\"");
    // sscanf scanf ALSO can't used  so strange

    token = strtok(response, ":,\"");
 80011bc:	4927      	ldr	r1, [pc, #156]	@ (800125c <ESP_CheckWiFi+0xd8>)
 80011be:	a801      	add	r0, sp, #4
 80011c0:	f006 fa52 	bl	8007668 <strtok>

    token = strtok(NULL, "\",\""); // Get SSID
 80011c4:	4926      	ldr	r1, [pc, #152]	@ (8001260 <ESP_CheckWiFi+0xdc>)
 80011c6:	4620      	mov	r0, r4
 80011c8:	f006 fa4e 	bl	8007668 <strtok>
 80011cc:	4601      	mov	r1, r0
    strcpy(info.ssid, token);
 80011ce:	a81a      	add	r0, sp, #104	@ 0x68
 80011d0:	f006 fb33 	bl	800783a <strcpy>

    token = strtok(NULL, "\","); // Get MAC address
 80011d4:	4923      	ldr	r1, [pc, #140]	@ (8001264 <ESP_CheckWiFi+0xe0>)
 80011d6:	4620      	mov	r0, r4
 80011d8:	f006 fa46 	bl	8007668 <strtok>
 80011dc:	4601      	mov	r1, r0
    strcpy(info.bssid, token);
 80011de:	a822      	add	r0, sp, #136	@ 0x88
 80011e0:	f006 fb2b 	bl	800783a <strcpy>

    token = strtok(NULL, ","); // Get security mode
 80011e4:	4e20      	ldr	r6, [pc, #128]	@ (8001268 <ESP_CheckWiFi+0xe4>)
 80011e6:	4631      	mov	r1, r6
 80011e8:	4620      	mov	r0, r4
 80011ea:	f006 fa3d 	bl	8007668 <strtok>
    info.channel = atoi(token);
 80011ee:	f005 f9f3 	bl	80065d8 <atoi>
 80011f2:	f88d 009a 	strb.w	r0, [sp, #154]	@ 0x9a

    token = strtok(NULL, ","); // Get RSSI
 80011f6:	4631      	mov	r1, r6
 80011f8:	4620      	mov	r0, r4
 80011fa:	f006 fa35 	bl	8007668 <strtok>
    info.rssi = atoi(token);
 80011fe:	f005 f9eb 	bl	80065d8 <atoi>
 8001202:	f88d 009b 	strb.w	r0, [sp, #155]	@ 0x9b

    token = strtok(NULL, "\r\n"); // Get connected status
 8001206:	4919      	ldr	r1, [pc, #100]	@ (800126c <ESP_CheckWiFi+0xe8>)
 8001208:	4620      	mov	r0, r4
 800120a:	f006 fa2d 	bl	8007668 <strtok>
    info.encryption = atoi(token);
 800120e:	f005 f9e3 	bl	80065d8 <atoi>
 8001212:	f88d 009c 	strb.w	r0, [sp, #156]	@ 0x9c

    return info;
 8001216:	f10d 0c68 	add.w	ip, sp, #104	@ 0x68
 800121a:	46ae      	mov	lr, r5
 800121c:	ae26      	add	r6, sp, #152	@ 0x98
 800121e:	4664      	mov	r4, ip
 8001220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001222:	f8ce 0000 	str.w	r0, [lr]
 8001226:	f8ce 1004 	str.w	r1, [lr, #4]
 800122a:	f8ce 2008 	str.w	r2, [lr, #8]
 800122e:	f8ce 300c 	str.w	r3, [lr, #12]
 8001232:	46a4      	mov	ip, r4
 8001234:	f10e 0e10 	add.w	lr, lr, #16
 8001238:	42b4      	cmp	r4, r6
 800123a:	d1f0      	bne.n	800121e <ESP_CheckWiFi+0x9a>
 800123c:	6820      	ldr	r0, [r4, #0]
 800123e:	f8ce 0000 	str.w	r0, [lr]
 8001242:	7923      	ldrb	r3, [r4, #4]
 8001244:	f88e 3004 	strb.w	r3, [lr, #4]
}
 8001248:	4628      	mov	r0, r5
 800124a:	b028      	add	sp, #160	@ 0xa0
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	bf00      	nop
 8001250:	20000444 	.word	0x20000444
 8001254:	0800ae7c 	.word	0x0800ae7c
 8001258:	200002fc 	.word	0x200002fc
 800125c:	0800ae88 	.word	0x0800ae88
 8001260:	0800ae8c 	.word	0x0800ae8c
 8001264:	0800ae90 	.word	0x0800ae90
 8001268:	0800ae94 	.word	0x0800ae94
 800126c:	0800ae60 	.word	0x0800ae60

08001270 <ESP_GetIPInfo>:

IPInfoTypeDef ESP_GetIPInfo(void) {
 8001270:	b530      	push	{r4, r5, lr}
 8001272:	b0c5      	sub	sp, #276	@ 0x114
 8001274:	4604      	mov	r4, r0
    IPInfoTypeDef ipInfo = {0};
 8001276:	2244      	movs	r2, #68	@ 0x44
 8001278:	2100      	movs	r1, #0
 800127a:	a833      	add	r0, sp, #204	@ 0xcc
 800127c:	f006 f9c7 	bl	800760e <memset>
    char response[200] = {0};
 8001280:	2100      	movs	r1, #0
 8001282:	9101      	str	r1, [sp, #4]
 8001284:	22c4      	movs	r2, #196	@ 0xc4
 8001286:	a802      	add	r0, sp, #8
 8001288:	f006 f9c1 	bl	800760e <memset>
    char *token;

    ESP_SendCommand("AT+CIFSR\r\n");
 800128c:	482a      	ldr	r0, [pc, #168]	@ (8001338 <ESP_GetIPInfo+0xc8>)
 800128e:	f7ff fef9 	bl	8001084 <ESP_SendCommand>
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);
 8001292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001296:	22c8      	movs	r2, #200	@ 0xc8
 8001298:	a901      	add	r1, sp, #4
 800129a:	4828      	ldr	r0, [pc, #160]	@ (800133c <ESP_GetIPInfo+0xcc>)
 800129c:	6800      	ldr	r0, [r0, #0]
 800129e:	f004 ff3a 	bl	8006116 <HAL_UART_Receive>

    // Parse AP IP
    token = strstr(response, "+CIFSR:APIP,\"");
 80012a2:	4927      	ldr	r1, [pc, #156]	@ (8001340 <ESP_GetIPInfo+0xd0>)
 80012a4:	a801      	add	r0, sp, #4
 80012a6:	f006 fa3b 	bl	8007720 <strstr>
    if (token) {
 80012aa:	b150      	cbz	r0, 80012c2 <ESP_GetIPInfo+0x52>
 80012ac:	4605      	mov	r5, r0
        token += strlen("+CIFSR:APIP,\"");
 80012ae:	350d      	adds	r5, #13
        strncpy(ipInfo.AP_IP, token, strcspn(token, "\""));
 80012b0:	4924      	ldr	r1, [pc, #144]	@ (8001344 <ESP_GetIPInfo+0xd4>)
 80012b2:	4628      	mov	r0, r5
 80012b4:	f006 f9b3 	bl	800761e <strcspn>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4629      	mov	r1, r5
 80012bc:	a833      	add	r0, sp, #204	@ 0xcc
 80012be:	f006 f9bf 	bl	8007640 <strncpy>
    }

    // Parse AP MAC
    token = strstr(response, "+CIFSR:APMAC,\"");
 80012c2:	4921      	ldr	r1, [pc, #132]	@ (8001348 <ESP_GetIPInfo+0xd8>)
 80012c4:	a801      	add	r0, sp, #4
 80012c6:	f006 fa2b 	bl	8007720 <strstr>
    if (token) {
 80012ca:	4605      	mov	r5, r0
 80012cc:	b148      	cbz	r0, 80012e2 <ESP_GetIPInfo+0x72>
        token += strlen("+CIFSR:APMAC,\"");
 80012ce:	350e      	adds	r5, #14
        strncpy(ipInfo.AP_MAC, token, strcspn(token, "\""));
 80012d0:	491c      	ldr	r1, [pc, #112]	@ (8001344 <ESP_GetIPInfo+0xd4>)
 80012d2:	4628      	mov	r0, r5
 80012d4:	f006 f9a3 	bl	800761e <strcspn>
 80012d8:	4602      	mov	r2, r0
 80012da:	4629      	mov	r1, r5
 80012dc:	a837      	add	r0, sp, #220	@ 0xdc
 80012de:	f006 f9af 	bl	8007640 <strncpy>
    }

    // Parse STA IP
    token = strstr(response, "+CIFSR:STAIP,\"");
 80012e2:	491a      	ldr	r1, [pc, #104]	@ (800134c <ESP_GetIPInfo+0xdc>)
 80012e4:	a801      	add	r0, sp, #4
 80012e6:	f006 fa1b 	bl	8007720 <strstr>
    if (token) {
 80012ea:	4605      	mov	r5, r0
 80012ec:	b150      	cbz	r0, 8001304 <ESP_GetIPInfo+0x94>
        token += strlen("+CIFSR:STAIP,\"");
 80012ee:	350e      	adds	r5, #14
        strncpy(ipInfo.STA_IP, token, strcspn(token, "\""));
 80012f0:	4914      	ldr	r1, [pc, #80]	@ (8001344 <ESP_GetIPInfo+0xd4>)
 80012f2:	4628      	mov	r0, r5
 80012f4:	f006 f993 	bl	800761e <strcspn>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4629      	mov	r1, r5
 80012fc:	f10d 00ee 	add.w	r0, sp, #238	@ 0xee
 8001300:	f006 f99e 	bl	8007640 <strncpy>
    }

    // Parse STA MAC
    token = strstr(response, "+CIFSR:STAMAC,\"");
 8001304:	4912      	ldr	r1, [pc, #72]	@ (8001350 <ESP_GetIPInfo+0xe0>)
 8001306:	a801      	add	r0, sp, #4
 8001308:	f006 fa0a 	bl	8007720 <strstr>
    if (token) {
 800130c:	4605      	mov	r5, r0
 800130e:	b150      	cbz	r0, 8001326 <ESP_GetIPInfo+0xb6>
        token += strlen("+CIFSR:STAMAC,\"");
 8001310:	350f      	adds	r5, #15
        strncpy(ipInfo.STA_MAC, token, strcspn(token, "\""));
 8001312:	490c      	ldr	r1, [pc, #48]	@ (8001344 <ESP_GetIPInfo+0xd4>)
 8001314:	4628      	mov	r0, r5
 8001316:	f006 f982 	bl	800761e <strcspn>
 800131a:	4602      	mov	r2, r0
 800131c:	4629      	mov	r1, r5
 800131e:	f10d 00fe 	add.w	r0, sp, #254	@ 0xfe
 8001322:	f006 f98d 	bl	8007640 <strncpy>
    }
    return ipInfo;
 8001326:	2244      	movs	r2, #68	@ 0x44
 8001328:	a933      	add	r1, sp, #204	@ 0xcc
 800132a:	4620      	mov	r0, r4
 800132c:	f006 fa9b 	bl	8007866 <memcpy>
}
 8001330:	4620      	mov	r0, r4
 8001332:	b045      	add	sp, #276	@ 0x114
 8001334:	bd30      	pop	{r4, r5, pc}
 8001336:	bf00      	nop
 8001338:	0800ae98 	.word	0x0800ae98
 800133c:	200002fc 	.word	0x200002fc
 8001340:	0800aea4 	.word	0x0800aea4
 8001344:	0800aeb0 	.word	0x0800aeb0
 8001348:	0800aeb4 	.word	0x0800aeb4
 800134c:	0800aec4 	.word	0x0800aec4
 8001350:	0800aed4 	.word	0x0800aed4

08001354 <ESP_EnableMUX>:

void ESP_EnableMUX() {
 8001354:	b508      	push	{r3, lr}
    ESP_SendCommand("AT+CIPMUX=1\r\n");
 8001356:	4802      	ldr	r0, [pc, #8]	@ (8001360 <ESP_EnableMUX+0xc>)
 8001358:	f7ff fe94 	bl	8001084 <ESP_SendCommand>
}
 800135c:	bd08      	pop	{r3, pc}
 800135e:	bf00      	nop
 8001360:	0800aee4 	.word	0x0800aee4

08001364 <ESP_StartServer>:

void ESP_StartServer(uint16_t port) {
 8001364:	b500      	push	{lr}
 8001366:	b08f      	sub	sp, #60	@ 0x3c
 8001368:	4602      	mov	r2, r0
    char cmd[50];
    sprintf(cmd, "AT+CIPSERVER=1,%d\r\n", port);
 800136a:	4905      	ldr	r1, [pc, #20]	@ (8001380 <ESP_StartServer+0x1c>)
 800136c:	a801      	add	r0, sp, #4
 800136e:	f006 f8eb 	bl	8007548 <siprintf>
    ESP_SendCommand(cmd);
 8001372:	a801      	add	r0, sp, #4
 8001374:	f7ff fe86 	bl	8001084 <ESP_SendCommand>
}
 8001378:	b00f      	add	sp, #60	@ 0x3c
 800137a:	f85d fb04 	ldr.w	pc, [sp], #4
 800137e:	bf00      	nop
 8001380:	0800aef4 	.word	0x0800aef4

08001384 <ESP_StopServer>:

void ESP_StopServer() {
 8001384:	b508      	push	{r3, lr}
    ESP_SendCommand("AT+CIPSERVER=0\r\n");
 8001386:	4802      	ldr	r0, [pc, #8]	@ (8001390 <ESP_StopServer+0xc>)
 8001388:	f7ff fe7c 	bl	8001084 <ESP_SendCommand>
}
 800138c:	bd08      	pop	{r3, pc}
 800138e:	bf00      	nop
 8001390:	0800af08 	.word	0x0800af08

08001394 <ESP_RestoreDefaults>:

void ESP_ListAPs() {
    ESP_SendCommand("AT+CWLAP\r\n");
}

void ESP_RestoreDefaults() {
 8001394:	b508      	push	{r3, lr}
    ESP_SendCommand("AT+RESTORE\r\n");
 8001396:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <ESP_RestoreDefaults+0xc>)
 8001398:	f7ff fe74 	bl	8001084 <ESP_SendCommand>
}
 800139c:	bd08      	pop	{r3, pc}
 800139e:	bf00      	nop
 80013a0:	0800af1c 	.word	0x0800af1c

080013a4 <ESP_RESET_SERVER>:


void ESP_RESET_SERVER() {
 80013a4:	b508      	push	{r3, lr}
	ESP_StopServer();
 80013a6:	f7ff ffed 	bl	8001384 <ESP_StopServer>
    HAL_Delay(1000);
 80013aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ae:	f002 fb15 	bl	80039dc <HAL_Delay>
    ESP_StartServer(9999);
 80013b2:	f242 700f 	movw	r0, #9999	@ 0x270f
 80013b6:	f7ff ffd5 	bl	8001364 <ESP_StartServer>
    HAL_Delay(1000);
 80013ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013be:	f002 fb0d 	bl	80039dc <HAL_Delay>
}
 80013c2:	bd08      	pop	{r3, pc}

080013c4 <ESP_Reset_GPIO>:

#ifdef ENABLE_GPIO_RESET_CONTROL
static GPIO_TypeDef *ESP_Reset_GPIO_Port = ESP_RESET_GPIO_Port;
static uint16_t ESP_Reset_Pin = ESP_RESET_Pin;

void ESP_Reset_GPIO() {
 80013c4:	b510      	push	{r4, lr}
    // Set the reset pin low to reset the ESP module
    HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_RESET);
 80013c6:	4c09      	ldr	r4, [pc, #36]	@ (80013ec <ESP_Reset_GPIO+0x28>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	2102      	movs	r1, #2
 80013cc:	4620      	mov	r0, r4
 80013ce:	f003 f9c9 	bl	8004764 <HAL_GPIO_WritePin>
    HAL_Delay(100); // Hold low for 1000 ms
 80013d2:	2064      	movs	r0, #100	@ 0x64
 80013d4:	f002 fb02 	bl	80039dc <HAL_Delay>
    // Set the reset pin high to bring the ESP module out of reset
    HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2102      	movs	r1, #2
 80013dc:	4620      	mov	r0, r4
 80013de:	f003 f9c1 	bl	8004764 <HAL_GPIO_WritePin>
    HAL_Delay(1000); // Wait for the ESP module to initialize
 80013e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e6:	f002 faf9 	bl	80039dc <HAL_Delay>
}
 80013ea:	bd10      	pop	{r4, pc}
 80013ec:	40010c00 	.word	0x40010c00

080013f0 <ESP_INIT_FULL>:
void ESP_INIT_FULL() {
 80013f0:	b510      	push	{r4, lr}
    ESP_RestoreDefaults();
 80013f2:	f7ff ffcf 	bl	8001394 <ESP_RestoreDefaults>
    HAL_Delay(2000);
 80013f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013fa:	f002 faef 	bl	80039dc <HAL_Delay>
	ESP_Reset_GPIO();
 80013fe:	f7ff ffe1 	bl	80013c4 <ESP_Reset_GPIO>
    HAL_Delay(2000);
 8001402:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001406:	f002 fae9 	bl	80039dc <HAL_Delay>
    ESP_SetMode_AP();
 800140a:	f7ff fe7b 	bl	8001104 <ESP_SetMode_AP>
    HAL_Delay(1000);
 800140e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001412:	f002 fae3 	bl	80039dc <HAL_Delay>
    ESP_SetIP(esp_config.ap_ip);
 8001416:	4c18      	ldr	r4, [pc, #96]	@ (8001478 <ESP_INIT_FULL+0x88>)
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff fe7b 	bl	8001114 <ESP_SetIP>
    HAL_Delay(1000);
 800141e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001422:	f002 fadb 	bl	80039dc <HAL_Delay>
    ESP_SetMode_AP_STD();
 8001426:	f7ff fe85 	bl	8001134 <ESP_SetMode_AP_STD>
    HAL_Delay(1000);
 800142a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800142e:	f002 fad5 	bl	80039dc <HAL_Delay>
    ESP_SetSoftAP(esp_config.ap_ssid, esp_config.ap_pswd);
 8001432:	f1a4 0120 	sub.w	r1, r4, #32
 8001436:	f1a4 0040 	sub.w	r0, r4, #64	@ 0x40
 800143a:	f7ff fe83 	bl	8001144 <ESP_SetSoftAP>
    HAL_Delay(2000);
 800143e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001442:	f002 facb 	bl	80039dc <HAL_Delay>
    HAL_Delay(2000);
 8001446:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800144a:	f002 fac7 	bl	80039dc <HAL_Delay>
    ESP_ConnectWiFi(esp_config.wifi_ssid, esp_config.wifi_pswd);
 800144e:	f1a4 0160 	sub.w	r1, r4, #96	@ 0x60
 8001452:	f1a4 0080 	sub.w	r0, r4, #128	@ 0x80
 8001456:	f7ff fe85 	bl	8001164 <ESP_ConnectWiFi>
    HAL_Delay(20000);
 800145a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800145e:	f002 fabd 	bl	80039dc <HAL_Delay>
    ESP_EnableMUX();
 8001462:	f7ff ff77 	bl	8001354 <ESP_EnableMUX>
    HAL_Delay(1000);
 8001466:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800146a:	f002 fab7 	bl	80039dc <HAL_Delay>
    ESP_StartServer(esp_config.server_port);
 800146e:	f834 0c82 	ldrh.w	r0, [r4, #-130]
 8001472:	f7ff ff77 	bl	8001364 <ESP_StartServer>
}
 8001476:	bd10      	pop	{r4, pc}
 8001478:	20000082 	.word	0x20000082

0800147c <ESP_INIT_BASE>:
void ESP_INIT_BASE() {
 800147c:	b508      	push	{r3, lr}
	ESP_Reset_GPIO();
 800147e:	f7ff ffa1 	bl	80013c4 <ESP_Reset_GPIO>
    HAL_Delay(1000);
 8001482:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001486:	f002 faa9 	bl	80039dc <HAL_Delay>
    ESP_EnableMUX();
 800148a:	f7ff ff63 	bl	8001354 <ESP_EnableMUX>
    HAL_Delay(1000);
 800148e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001492:	f002 faa3 	bl	80039dc <HAL_Delay>
    ESP_StartServer(9999);
 8001496:	f242 700f 	movw	r0, #9999	@ 0x270f
 800149a:	f7ff ff63 	bl	8001364 <ESP_StartServer>
    HAL_Delay(1000);
 800149e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014a2:	f002 fa9b 	bl	80039dc <HAL_Delay>
}
 80014a6:	bd08      	pop	{r3, pc}

080014a8 <DHT_getData>:
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
}

DHT_data DHT_getData(DHT_sensor *sensor) {
 80014a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ac:	b089      	sub	sp, #36	@ 0x24
 80014ae:	9001      	str	r0, [sp, #4]
 80014b0:	460c      	mov	r4, r1
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80014b2:	798b      	ldrb	r3, [r1, #6]
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf14      	ite	ne
 80014b8:	f44f 757a 	movne.w	r5, #1000	@ 0x3e8
 80014bc:	f44f 65fa 	moveq.w	r5, #2000	@ 0x7d0
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 80014c0:	f002 fa86 	bl	80039d0 <HAL_GetTick>
 80014c4:	68a2      	ldr	r2, [r4, #8]
 80014c6:	1a83      	subs	r3, r0, r2
 80014c8:	42ab      	cmp	r3, r5
 80014ca:	d201      	bcs.n	80014d0 <DHT_getData+0x28>
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	d144      	bne.n	800155a <DHT_getData+0xb2>
		data.hum = sensor->lastHum;
		data.temp = sensor->lastTemp;
		return data;
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 80014d0:	f002 fa7e 	bl	80039d0 <HAL_GetTick>
 80014d4:	3001      	adds	r0, #1
 80014d6:	60a0      	str	r0, [r4, #8]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	2500      	movs	r5, #0
 80014da:	9502      	str	r5, [sp, #8]
 80014dc:	9503      	str	r5, [sp, #12]
 80014de:	9504      	str	r5, [sp, #16]
 80014e0:	9505      	str	r5, [sp, #20]
  lineUp();
 80014e2:	2201      	movs	r2, #1
 80014e4:	88a1      	ldrh	r1, [r4, #4]
 80014e6:	6820      	ldr	r0, [r4, #0]
 80014e8:	f003 f93c 	bl	8004764 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80014ec:	88a3      	ldrh	r3, [r4, #4]
 80014ee:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80014f0:	2311      	movs	r3, #17
 80014f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 80014f4:	79e3      	ldrb	r3, [r4, #7]
 80014f6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 80014f8:	2303      	movs	r3, #3
 80014fa:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80014fc:	a902      	add	r1, sp, #8
 80014fe:	6820      	ldr	r0, [r4, #0]
 8001500:	f002 ffea 	bl	80044d8 <HAL_GPIO_Init>

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
	//Опускание линии данных на 18 мс
	lineDown();
 8001504:	462a      	mov	r2, r5
 8001506:	88a1      	ldrh	r1, [r4, #4]
 8001508:	6820      	ldr	r0, [r4, #0]
 800150a:	f003 f92b 	bl	8004764 <HAL_GPIO_WritePin>
	Delay(18);
 800150e:	2012      	movs	r0, #18
 8001510:	f002 fa64 	bl	80039dc <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8001514:	2201      	movs	r2, #1
 8001516:	88a1      	ldrh	r1, [r4, #4]
 8001518:	6820      	ldr	r0, [r4, #0]
 800151a:	f003 f923 	bl	8004764 <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	9503      	str	r5, [sp, #12]
 8001520:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8001522:	88a3      	ldrh	r3, [r4, #4]
 8001524:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8001526:	79e3      	ldrb	r3, [r4, #7]
 8001528:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800152a:	a902      	add	r1, sp, #8
 800152c:	6820      	ldr	r0, [r4, #0]
 800152e:	f002 ffd3 	bl	80044d8 <HAL_GPIO_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001532:	b672      	cpsid	i
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
	//Ожидание спада
	while(getLine()) {
 8001534:	f242 7511 	movw	r5, #10001	@ 0x2711
 8001538:	88a1      	ldrh	r1, [r4, #4]
 800153a:	6820      	ldr	r0, [r4, #0]
 800153c:	f003 f90c 	bl	8004758 <HAL_GPIO_ReadPin>
 8001540:	2801      	cmp	r0, #1
 8001542:	d10d      	bne.n	8001560 <DHT_getData+0xb8>
		timeout++;
		if (timeout > DHT_TIMEOUT) {
 8001544:	3d01      	subs	r5, #1
 8001546:	b2ad      	uxth	r5, r5
 8001548:	2d00      	cmp	r5, #0
 800154a:	d1f5      	bne.n	8001538 <DHT_getData+0x90>
  __ASM volatile ("cpsie i" : : : "memory");
 800154c:	b662      	cpsie	i
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 800154e:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 8001552:	6123      	str	r3, [r4, #16]
			sensor->lastTemp = -128.0f;
 8001554:	60e3      	str	r3, [r4, #12]

			return data;
 8001556:	461d      	mov	r5, r3
 8001558:	e07c      	b.n	8001654 <DHT_getData+0x1ac>
		data.hum = sensor->lastHum;
 800155a:	6925      	ldr	r5, [r4, #16]
		data.temp = sensor->lastTemp;
 800155c:	68e3      	ldr	r3, [r4, #12]
		return data;
 800155e:	e079      	b.n	8001654 <DHT_getData+0x1ac>
 8001560:	f242 7511 	movw	r5, #10001	@ 0x2711
		}
	}
	timeout = 0;
	//Ожидание подъёма
	while(!getLine()) {
 8001564:	88a1      	ldrh	r1, [r4, #4]
 8001566:	6820      	ldr	r0, [r4, #0]
 8001568:	f003 f8f6 	bl	8004758 <HAL_GPIO_ReadPin>
 800156c:	2801      	cmp	r0, #1
 800156e:	d00a      	beq.n	8001586 <DHT_getData+0xde>
		timeout++;
		if (timeout > DHT_TIMEOUT) {
 8001570:	3d01      	subs	r5, #1
 8001572:	b2ad      	uxth	r5, r5
 8001574:	2d00      	cmp	r5, #0
 8001576:	d1f5      	bne.n	8001564 <DHT_getData+0xbc>
 8001578:	b662      	cpsie	i
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 800157a:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 800157e:	6123      	str	r3, [r4, #16]
			sensor->lastTemp = -128.0f;
 8001580:	60e3      	str	r3, [r4, #12]

			return data;
 8001582:	461d      	mov	r5, r3
 8001584:	e066      	b.n	8001654 <DHT_getData+0x1ac>
 8001586:	f242 7511 	movw	r5, #10001	@ 0x2711
		}
	}
	timeout = 0;
	//Ожидание спада
	while(getLine()) {
 800158a:	88a1      	ldrh	r1, [r4, #4]
 800158c:	6820      	ldr	r0, [r4, #0]
 800158e:	f003 f8e3 	bl	8004758 <HAL_GPIO_ReadPin>
 8001592:	2801      	cmp	r0, #1
 8001594:	d108      	bne.n	80015a8 <DHT_getData+0x100>
		timeout++;
		if (timeout > DHT_TIMEOUT) {
 8001596:	3d01      	subs	r5, #1
 8001598:	b2ad      	uxth	r5, r5
 800159a:	2d00      	cmp	r5, #0
 800159c:	d1f5      	bne.n	800158a <DHT_getData+0xe2>
 800159e:	b662      	cpsie	i
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 80015a0:	f04f 4543 	mov.w	r5, #3271557120	@ 0xc3000000
 80015a4:	462b      	mov	r3, r5
 80015a6:	e055      	b.n	8001654 <DHT_getData+0x1ac>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 80015a8:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <DHT_getData+0x218>)
 80015aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015ae:	9006      	str	r0, [sp, #24]
 80015b0:	f88d 101c 	strb.w	r1, [sp, #28]
 80015b4:	f04f 0900 	mov.w	r9, #0
 80015b8:	46c8      	mov	r8, r9
			while(!getLine() && lT != 65535) lT++;
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
			while(getLine()&& hT != 65535) hT++;
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80015ba:	f10d 0a18 	add.w	sl, sp, #24
 80015be:	e02f      	b.n	8001620 <DHT_getData+0x178>
 80015c0:	461d      	mov	r5, r3
			while(!getLine() && lT != 65535) lT++;
 80015c2:	88a1      	ldrh	r1, [r4, #4]
 80015c4:	6820      	ldr	r0, [r4, #0]
 80015c6:	f003 f8c7 	bl	8004758 <HAL_GPIO_ReadPin>
 80015ca:	2801      	cmp	r0, #1
 80015cc:	d005      	beq.n	80015da <DHT_getData+0x132>
 80015ce:	1c6b      	adds	r3, r5, #1
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d4:	d1f4      	bne.n	80015c0 <DHT_getData+0x118>
 80015d6:	4646      	mov	r6, r8
 80015d8:	e002      	b.n	80015e0 <DHT_getData+0x138>
 80015da:	4646      	mov	r6, r8
 80015dc:	e000      	b.n	80015e0 <DHT_getData+0x138>
 80015de:	461e      	mov	r6, r3
			while(getLine()&& hT != 65535) hT++;
 80015e0:	88a1      	ldrh	r1, [r4, #4]
 80015e2:	6820      	ldr	r0, [r4, #0]
 80015e4:	f003 f8b8 	bl	8004758 <HAL_GPIO_ReadPin>
 80015e8:	2801      	cmp	r0, #1
 80015ea:	d103      	bne.n	80015f4 <DHT_getData+0x14c>
 80015ec:	1c73      	adds	r3, r6, #1
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f2:	d1f4      	bne.n	80015de <DHT_getData+0x136>
			if(hT > lT) rawData[a] |= (1<<b);
 80015f4:	b2b6      	uxth	r6, r6
 80015f6:	b2ad      	uxth	r5, r5
 80015f8:	42ae      	cmp	r6, r5
 80015fa:	d906      	bls.n	800160a <DHT_getData+0x162>
 80015fc:	fa0b f207 	lsl.w	r2, fp, r7
 8001600:	f819 300a 	ldrb.w	r3, [r9, sl]
 8001604:	4313      	orrs	r3, r2
 8001606:	f809 300a 	strb.w	r3, [r9, sl]
		for(uint8_t b = 7; b != 255; b--) {
 800160a:	3f01      	subs	r7, #1
 800160c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001610:	d001      	beq.n	8001616 <DHT_getData+0x16e>
 8001612:	4645      	mov	r5, r8
 8001614:	e7d5      	b.n	80015c2 <DHT_getData+0x11a>
	for(uint8_t a = 0; a < 5; a++) {
 8001616:	f109 0901 	add.w	r9, r9, #1
 800161a:	f1b9 0f05 	cmp.w	r9, #5
 800161e:	d003      	beq.n	8001628 <DHT_getData+0x180>
		for(uint8_t b = 7; b != 255; b--) {
 8001620:	2707      	movs	r7, #7
			if(hT > lT) rawData[a] |= (1<<b);
 8001622:	f04f 0b01 	mov.w	fp, #1
 8001626:	e7f4      	b.n	8001612 <DHT_getData+0x16a>
 8001628:	b662      	cpsie	i
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 800162a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800162e:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8001632:	f89d 601a 	ldrb.w	r6, [sp, #26]
 8001636:	f89d 701b 	ldrb.w	r7, [sp, #27]
 800163a:	1883      	adds	r3, r0, r2
 800163c:	4433      	add	r3, r6
 800163e:	443b      	add	r3, r7
 8001640:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	4299      	cmp	r1, r3
 8001648:	d00b      	beq.n	8001662 <DHT_getData+0x1ba>
	DHT_data data = {-128.0f, -128.0f};
 800164a:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 800164e:	461d      	mov	r5, r3
			data.temp = (float)rawData[2];
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8001650:	6125      	str	r5, [r4, #16]
	sensor->lastTemp = data.temp;
 8001652:	60e3      	str	r3, [r4, #12]
		return data;
 8001654:	9a01      	ldr	r2, [sp, #4]
 8001656:	6015      	str	r5, [r2, #0]
 8001658:	6053      	str	r3, [r2, #4]
	#endif

	return data;	
}
 800165a:	4610      	mov	r0, r2
 800165c:	b009      	add	sp, #36	@ 0x24
 800165e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sensor->type == DHT22) {
 8001662:	79a3      	ldrb	r3, [r4, #6]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d008      	beq.n	800167a <DHT_getData+0x1d2>
		if (sensor->type == DHT11) {
 8001668:	bb33      	cbnz	r3, 80016b8 <DHT_getData+0x210>
			data.hum = (float)rawData[0];
 800166a:	f7ff fbe7 	bl	8000e3c <__aeabi_ui2f>
 800166e:	4605      	mov	r5, r0
			data.temp = (float)rawData[2];
 8001670:	4630      	mov	r0, r6
 8001672:	f7ff fbe3 	bl	8000e3c <__aeabi_ui2f>
 8001676:	4603      	mov	r3, r0
 8001678:	e7ea      	b.n	8001650 <DHT_getData+0x1a8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 800167a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800167e:	f7ff fbe1 	bl	8000e44 <__aeabi_i2f>
 8001682:	4910      	ldr	r1, [pc, #64]	@ (80016c4 <DHT_getData+0x21c>)
 8001684:	f7fe fd6c 	bl	8000160 <__aeabi_fmul>
 8001688:	4605      	mov	r5, r0
			if(!(rawData[2] & (1<<7))) {
 800168a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800168e:	d108      	bne.n	80016a2 <DHT_getData+0x1fa>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001690:	ea47 2006 	orr.w	r0, r7, r6, lsl #8
 8001694:	f7ff fbd6 	bl	8000e44 <__aeabi_i2f>
 8001698:	490a      	ldr	r1, [pc, #40]	@ (80016c4 <DHT_getData+0x21c>)
 800169a:	f7fe fd61 	bl	8000160 <__aeabi_fmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	e7d6      	b.n	8001650 <DHT_getData+0x1a8>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80016a2:	f006 007f 	and.w	r0, r6, #127	@ 0x7f
 80016a6:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
 80016aa:	f7ff fbcb 	bl	8000e44 <__aeabi_i2f>
 80016ae:	4906      	ldr	r1, [pc, #24]	@ (80016c8 <DHT_getData+0x220>)
 80016b0:	f7fe fd56 	bl	8000160 <__aeabi_fmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	e7cb      	b.n	8001650 <DHT_getData+0x1a8>
	DHT_data data = {-128.0f, -128.0f};
 80016b8:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 80016bc:	461d      	mov	r5, r3
 80016be:	e7c7      	b.n	8001650 <DHT_getData+0x1a8>
 80016c0:	0800ae00 	.word	0x0800ae00
 80016c4:	3dcccccd 	.word	0x3dcccccd
 80016c8:	bdcccccd 	.word	0xbdcccccd

080016cc <Buzzer_SetFrequency>:
}



void Buzzer_SetFrequency(BuzzerTypeDef *buzzer, uint32_t frequency) {
    buzzer->frequency = frequency;
 80016cc:	6081      	str	r1, [r0, #8]

    uint32_t prescaler = 1000000/frequency  - 1;
 80016ce:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <Buzzer_SetFrequency+0x14>)
 80016d0:	fbb3 f1f1 	udiv	r1, r3, r1
 80016d4:	3901      	subs	r1, #1
    __HAL_TIM_SET_PRESCALER(buzzer->htim, prescaler);
 80016d6:	6803      	ldr	r3, [r0, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6299      	str	r1, [r3, #40]	@ 0x28
}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	000f4240 	.word	0x000f4240

080016e4 <Buzzer_SetVolume>:

void Buzzer_SetVolume(BuzzerTypeDef *buzzer, uint8_t volume) {
    buzzer->volume = volume;
 80016e4:	7301      	strb	r1, [r0, #12]
    uint32_t compare_value = volume;

    __HAL_TIM_SET_COMPARE(buzzer->htim, buzzer->channel, compare_value);
 80016e6:	6843      	ldr	r3, [r0, #4]
 80016e8:	b91b      	cbnz	r3, 80016f2 <Buzzer_SetVolume+0xe>
 80016ea:	6803      	ldr	r3, [r0, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6359      	str	r1, [r3, #52]	@ 0x34
 80016f0:	4770      	bx	lr
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d006      	beq.n	8001704 <Buzzer_SetVolume+0x20>
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	6803      	ldr	r3, [r0, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	bf0c      	ite	eq
 80016fe:	63d9      	streq	r1, [r3, #60]	@ 0x3c
 8001700:	6419      	strne	r1, [r3, #64]	@ 0x40
}
 8001702:	4770      	bx	lr
    __HAL_TIM_SET_COMPARE(buzzer->htim, buzzer->channel, compare_value);
 8001704:	6803      	ldr	r3, [r0, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6399      	str	r1, [r3, #56]	@ 0x38
 800170a:	4770      	bx	lr

0800170c <Buzzer_Init>:
void Buzzer_Init(BuzzerTypeDef *buzzer) {
 800170c:	b510      	push	{r4, lr}
 800170e:	4604      	mov	r4, r0
    Buzzer_SetFrequency(buzzer, buzzer->frequency);
 8001710:	6881      	ldr	r1, [r0, #8]
 8001712:	f7ff ffdb 	bl	80016cc <Buzzer_SetFrequency>
    Buzzer_SetVolume(buzzer, buzzer->volume);
 8001716:	7b21      	ldrb	r1, [r4, #12]
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff ffe3 	bl	80016e4 <Buzzer_SetVolume>
		if (buzzer->htim->Instance == TIM1){
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <Buzzer_Init+0x50>)
 8001724:	429a      	cmp	r2, r3
 8001726:	d010      	beq.n	800174a <Buzzer_Init+0x3e>
    	 period = HAL_RCC_GetPCLK1Freq()/1000000-1;
 8001728:	f003 fe2a 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <Buzzer_Init+0x54>)
 800172e:	fba3 2300 	umull	r2, r3, r3, r0
 8001732:	0c9b      	lsrs	r3, r3, #18
 8001734:	3b01      	subs	r3, #1
    __HAL_TIM_SET_AUTORELOAD(buzzer->htim, period);
 8001736:	6822      	ldr	r2, [r4, #0]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	60d3      	str	r3, [r2, #12]
    HAL_TIM_PWM_Start(buzzer->htim, buzzer->channel);
 8001740:	6861      	ldr	r1, [r4, #4]
 8001742:	6820      	ldr	r0, [r4, #0]
 8001744:	f004 fad8 	bl	8005cf8 <HAL_TIM_PWM_Start>
}
 8001748:	bd10      	pop	{r4, pc}
    	 period = HAL_RCC_GetPCLK2Freq()/1000000-1;
 800174a:	f003 fe29 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 800174e:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <Buzzer_Init+0x54>)
 8001750:	fba3 2300 	umull	r2, r3, r3, r0
 8001754:	0c9b      	lsrs	r3, r3, #18
 8001756:	3b01      	subs	r3, #1
 8001758:	e7ed      	b.n	8001736 <Buzzer_Init+0x2a>
 800175a:	bf00      	nop
 800175c:	40012c00 	.word	0x40012c00
 8001760:	431bde83 	.word	0x431bde83

08001764 <convertSecondsToTime>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void convertSecondsToTime(uint32_t total_seconds, TimeTypedef* time)
{
    time->hours = total_seconds / 3600;
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <convertSecondsToTime+0x30>)
 8001766:	fba3 2300 	umull	r2, r3, r3, r0
 800176a:	0adb      	lsrs	r3, r3, #11
 800176c:	600b      	str	r3, [r1, #0]
    time->minutes = (total_seconds%3600) / 60;
 800176e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001772:	fb02 0313 	mls	r3, r2, r3, r0
 8001776:	4a08      	ldr	r2, [pc, #32]	@ (8001798 <convertSecondsToTime+0x34>)
 8001778:	fba2 c303 	umull	ip, r3, r2, r3
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	604b      	str	r3, [r1, #4]
    time->seconds = total_seconds % 60;
 8001780:	fba2 2300 	umull	r2, r3, r2, r0
 8001784:	095b      	lsrs	r3, r3, #5
 8001786:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800178a:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800178e:	6088      	str	r0, [r1, #8]
}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	91a2b3c5 	.word	0x91a2b3c5
 8001798:	88888889 	.word	0x88888889

0800179c <convertTimeToSeconds>:

uint32_t convertTimeToSeconds(TimeTypedef* time) {
    return (time->hours * 3600) + (time->minutes * 60) + time->seconds;
 800179c:	6802      	ldr	r2, [r0, #0]
 800179e:	6843      	ldr	r3, [r0, #4]
 80017a0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80017aa:	fb01 3302 	mla	r3, r1, r2, r3
 80017ae:	6880      	ldr	r0, [r0, #8]
}
 80017b0:	4418      	add	r0, r3
 80017b2:	4770      	bx	lr

080017b4 <ssd1306_NoticeView>:

void ssd1306_NoticeView(const char* notice)
{
 80017b4:	b530      	push	{r4, r5, lr}
 80017b6:	b09b      	sub	sp, #108	@ 0x6c
 80017b8:	4605      	mov	r5, r0
    uint8_t msg[100];
    ssd1306_Fill(Black);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f001 fc5e 	bl	800307c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80017c0:	2100      	movs	r1, #0
 80017c2:	4608      	mov	r0, r1
 80017c4:	f001 fd92 	bl	80032ec <ssd1306_SetCursor>
    sprintf((char*)msg, "NOTICE");
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <ssd1306_NoticeView+0x58>)
 80017ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017ce:	9001      	str	r0, [sp, #4]
 80017d0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80017d4:	0c09      	lsrs	r1, r1, #16
 80017d6:	f88d 100a 	strb.w	r1, [sp, #10]
    ssd1306_WriteString((char*)msg, Font_11x18, White);
 80017da:	4c0d      	ldr	r4, [pc, #52]	@ (8001810 <ssd1306_NoticeView+0x5c>)
 80017dc:	2301      	movs	r3, #1
 80017de:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017e2:	a801      	add	r0, sp, #4
 80017e4:	f001 fd68 	bl	80032b8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 30);
 80017e8:	211e      	movs	r1, #30
 80017ea:	2000      	movs	r0, #0
 80017ec:	f001 fd7e 	bl	80032ec <ssd1306_SetCursor>
    sprintf((char*)msg, "%s", notice);
 80017f0:	4629      	mov	r1, r5
 80017f2:	a801      	add	r0, sp, #4
 80017f4:	f006 f821 	bl	800783a <strcpy>
    ssd1306_WriteString((char*)msg, Font_11x18, White);
 80017f8:	2301      	movs	r3, #1
 80017fa:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017fe:	a801      	add	r0, sp, #4
 8001800:	f001 fd5a 	bl	80032b8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001804:	f001 fc48 	bl	8003098 <ssd1306_UpdateScreen>
}
 8001808:	b01b      	add	sp, #108	@ 0x6c
 800180a:	bd30      	pop	{r4, r5, pc}
 800180c:	0800af2c 	.word	0x0800af2c
 8001810:	200000f4 	.word	0x200000f4

08001814 <ssd1306_WelcomeView>:


void ssd1306_WelcomeView(){
 8001814:	b530      	push	{r4, r5, lr}
 8001816:	b09b      	sub	sp, #108	@ 0x6c
	uint8_t msg[100];
	ssd1306_Fill(Black);
 8001818:	2000      	movs	r0, #0
 800181a:	f001 fc2f 	bl	800307c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 800181e:	2100      	movs	r1, #0
 8001820:	4608      	mov	r0, r1
 8001822:	f001 fd63 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "BOOTING");
 8001826:	ac01      	add	r4, sp, #4
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <ssd1306_WelcomeView+0x74>)
 800182a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800182e:	e884 0003 	stmia.w	r4, {r0, r1}
	ssd1306_WriteString(msg, Font_11x18, White);
 8001832:	4d16      	ldr	r5, [pc, #88]	@ (800188c <ssd1306_WelcomeView+0x78>)
 8001834:	2301      	movs	r3, #1
 8001836:	e895 0006 	ldmia.w	r5, {r1, r2}
 800183a:	4620      	mov	r0, r4
 800183c:	f001 fd3c 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 25);
 8001840:	2119      	movs	r1, #25
 8001842:	2000      	movs	r0, #0
 8001844:	f001 fd52 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "Course PrjC");
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <ssd1306_WelcomeView+0x7c>)
 800184a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800184e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ssd1306_WriteString(msg, Font_11x18, White);
 8001852:	2301      	movs	r3, #1
 8001854:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001858:	4620      	mov	r0, r4
 800185a:	f001 fd2d 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 50);
 800185e:	2132      	movs	r1, #50	@ 0x32
 8001860:	2000      	movs	r0, #0
 8001862:	f001 fd43 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "Initialing...");
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <ssd1306_WelcomeView+0x80>)
 8001868:	46a4      	mov	ip, r4
 800186a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8001870:	f8ac 3000 	strh.w	r3, [ip]
	ssd1306_WriteString(msg, Font_7x10, White);
 8001874:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <ssd1306_WelcomeView+0x84>)
 8001876:	2301      	movs	r3, #1
 8001878:	ca06      	ldmia	r2, {r1, r2}
 800187a:	4620      	mov	r0, r4
 800187c:	f001 fd1c 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001880:	f001 fc0a 	bl	8003098 <ssd1306_UpdateScreen>
}
 8001884:	b01b      	add	sp, #108	@ 0x6c
 8001886:	bd30      	pop	{r4, r5, pc}
 8001888:	0800af34 	.word	0x0800af34
 800188c:	200000f4 	.word	0x200000f4
 8001890:	0800af3c 	.word	0x0800af3c
 8001894:	0800af48 	.word	0x0800af48
 8001898:	200000fc 	.word	0x200000fc

0800189c <ssd1306_IndexView>:

void ssd1306_IndexView(){
 800189c:	b510      	push	{r4, lr}
 800189e:	b09c      	sub	sp, #112	@ 0x70
	uint8_t msg[100];
	ssd1306_Fill(Black);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f001 fbeb 	bl	800307c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 80018a6:	2100      	movs	r1, #0
 80018a8:	4608      	mov	r0, r1
 80018aa:	f001 fd1f 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "Index");
 80018ae:	4b40      	ldr	r3, [pc, #256]	@ (80019b0 <ssd1306_IndexView+0x114>)
 80018b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018b4:	9003      	str	r0, [sp, #12]
 80018b6:	f8ad 1010 	strh.w	r1, [sp, #16]
	ssd1306_WriteString(msg, Font_11x18, White);
 80018ba:	4a3e      	ldr	r2, [pc, #248]	@ (80019b4 <ssd1306_IndexView+0x118>)
 80018bc:	2301      	movs	r3, #1
 80018be:	ca06      	ldmia	r2, {r1, r2}
 80018c0:	a803      	add	r0, sp, #12
 80018c2:	f001 fcf9 	bl	80032b8 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 18);
 80018c6:	2112      	movs	r1, #18
 80018c8:	2000      	movs	r0, #0
 80018ca:	f001 fd0f 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "RUN TIME");
 80018ce:	4a3a      	ldr	r2, [pc, #232]	@ (80019b8 <ssd1306_IndexView+0x11c>)
 80018d0:	ab03      	add	r3, sp, #12
 80018d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d4:	c303      	stmia	r3!, {r0, r1}
 80018d6:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteString(msg, Font_6x8, White);
 80018d8:	4a38      	ldr	r2, [pc, #224]	@ (80019bc <ssd1306_IndexView+0x120>)
 80018da:	2301      	movs	r3, #1
 80018dc:	ca06      	ldmia	r2, {r1, r2}
 80018de:	a803      	add	r0, sp, #12
 80018e0:	f001 fcea 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 26);
 80018e4:	211a      	movs	r1, #26
 80018e6:	2000      	movs	r0, #0
 80018e8:	f001 fd00 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%02u:%02u:%02u", Time.hours, Time.minutes, Time.seconds);
 80018ec:	4a34      	ldr	r2, [pc, #208]	@ (80019c0 <ssd1306_IndexView+0x124>)
 80018ee:	6893      	ldr	r3, [r2, #8]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	6853      	ldr	r3, [r2, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	4933      	ldr	r1, [pc, #204]	@ (80019c4 <ssd1306_IndexView+0x128>)
 80018f8:	a803      	add	r0, sp, #12
 80018fa:	f005 fe25 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 80018fe:	4a32      	ldr	r2, [pc, #200]	@ (80019c8 <ssd1306_IndexView+0x12c>)
 8001900:	2301      	movs	r3, #1
 8001902:	ca06      	ldmia	r2, {r1, r2}
 8001904:	a803      	add	r0, sp, #12
 8001906:	f001 fcd7 	bl	80032b8 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 40);
 800190a:	2128      	movs	r1, #40	@ 0x28
 800190c:	2000      	movs	r0, #0
 800190e:	f001 fced 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "DHT:%s\n", FLAG_DHT_ALARM ? "ALARM" : "NORMAL");
 8001912:	4b2e      	ldr	r3, [pc, #184]	@ (80019cc <ssd1306_IndexView+0x130>)
 8001914:	7819      	ldrb	r1, [r3, #0]
 8001916:	4a2e      	ldr	r2, [pc, #184]	@ (80019d0 <ssd1306_IndexView+0x134>)
 8001918:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <ssd1306_IndexView+0x138>)
 800191a:	2900      	cmp	r1, #0
 800191c:	bf18      	it	ne
 800191e:	461a      	movne	r2, r3
 8001920:	492d      	ldr	r1, [pc, #180]	@ (80019d8 <ssd1306_IndexView+0x13c>)
 8001922:	a803      	add	r0, sp, #12
 8001924:	f005 fe10 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001928:	4a27      	ldr	r2, [pc, #156]	@ (80019c8 <ssd1306_IndexView+0x12c>)
 800192a:	2301      	movs	r3, #1
 800192c:	ca06      	ldmia	r2, {r1, r2}
 800192e:	a803      	add	r0, sp, #12
 8001930:	f001 fcc2 	bl	80032b8 <ssd1306_WriteString>

	ssd1306_SetCursor(0 , 56);
 8001934:	2138      	movs	r1, #56	@ 0x38
 8001936:	2000      	movs	r0, #0
 8001938:	f001 fcd8 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "DHT");
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <ssd1306_IndexView+0x140>)
 800193e:	9303      	str	r3, [sp, #12]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001940:	4c1e      	ldr	r4, [pc, #120]	@ (80019bc <ssd1306_IndexView+0x120>)
 8001942:	2301      	movs	r3, #1
 8001944:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001948:	a803      	add	r0, sp, #12
 800194a:	f001 fcb5 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 56);
 800194e:	2138      	movs	r1, #56	@ 0x38
 8001950:	2020      	movs	r0, #32
 8001952:	f001 fccb 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "PUMP");
 8001956:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <ssd1306_IndexView+0x144>)
 8001958:	e893 0003 	ldmia.w	r3, {r0, r1}
 800195c:	9003      	str	r0, [sp, #12]
 800195e:	f88d 1010 	strb.w	r1, [sp, #16]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001962:	2301      	movs	r3, #1
 8001964:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001968:	a803      	add	r0, sp, #12
 800196a:	f001 fca5 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 800196e:	2138      	movs	r1, #56	@ 0x38
 8001970:	2040      	movs	r0, #64	@ 0x40
 8001972:	f001 fcbb 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "BEEP");
 8001976:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <ssd1306_IndexView+0x148>)
 8001978:	e893 0003 	ldmia.w	r3, {r0, r1}
 800197c:	9003      	str	r0, [sp, #12]
 800197e:	f88d 1010 	strb.w	r1, [sp, #16]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001982:	2301      	movs	r3, #1
 8001984:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001988:	a803      	add	r0, sp, #12
 800198a:	f001 fc95 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 800198e:	2138      	movs	r1, #56	@ 0x38
 8001990:	2060      	movs	r0, #96	@ 0x60
 8001992:	f001 fcab 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "NET");
 8001996:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <ssd1306_IndexView+0x14c>)
 8001998:	9303      	str	r3, [sp, #12]
	ssd1306_WriteString(msg, Font_6x8, White);
 800199a:	2301      	movs	r3, #1
 800199c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80019a0:	a803      	add	r0, sp, #12
 80019a2:	f001 fc89 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80019a6:	f001 fb77 	bl	8003098 <ssd1306_UpdateScreen>
}
 80019aa:	b01c      	add	sp, #112	@ 0x70
 80019ac:	bd10      	pop	{r4, pc}
 80019ae:	bf00      	nop
 80019b0:	0800af68 	.word	0x0800af68
 80019b4:	200000f4 	.word	0x200000f4
 80019b8:	0800af70 	.word	0x0800af70
 80019bc:	20000104 	.word	0x20000104
 80019c0:	20000318 	.word	0x20000318
 80019c4:	0800af7c 	.word	0x0800af7c
 80019c8:	200000fc 	.word	0x200000fc
 80019cc:	20000328 	.word	0x20000328
 80019d0:	0800af60 	.word	0x0800af60
 80019d4:	0800af58 	.word	0x0800af58
 80019d8:	0800af8c 	.word	0x0800af8c
 80019dc:	00544844 	.word	0x00544844
 80019e0:	0800af94 	.word	0x0800af94
 80019e4:	0800af9c 	.word	0x0800af9c
 80019e8:	0054454e 	.word	0x0054454e

080019ec <ssd1306_NetWorkView>:

void ssd1306_NetWorkView(){
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	b09a      	sub	sp, #104	@ 0x68
	uint8_t msg[100];
	ssd1306_Fill(Black);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f001 fb43 	bl	800307c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 80019f6:	2100      	movs	r1, #0
 80019f8:	4608      	mov	r0, r1
 80019fa:	f001 fc77 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "NETWORK %d",WiFiInfo.rssi);
 80019fe:	4e27      	ldr	r6, [pc, #156]	@ (8001a9c <ssd1306_NetWorkView+0xb0>)
 8001a00:	f996 2033 	ldrsb.w	r2, [r6, #51]	@ 0x33
 8001a04:	4926      	ldr	r1, [pc, #152]	@ (8001aa0 <ssd1306_NetWorkView+0xb4>)
 8001a06:	a801      	add	r0, sp, #4
 8001a08:	f005 fd9e 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001a0c:	4a25      	ldr	r2, [pc, #148]	@ (8001aa4 <ssd1306_NetWorkView+0xb8>)
 8001a0e:	2301      	movs	r3, #1
 8001a10:	ca06      	ldmia	r2, {r1, r2}
 8001a12:	a801      	add	r0, sp, #4
 8001a14:	f001 fc50 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8001a18:	2112      	movs	r1, #18
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f001 fc66 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%s",esp_config.ap_ssid);
 8001a20:	4921      	ldr	r1, [pc, #132]	@ (8001aa8 <ssd1306_NetWorkView+0xbc>)
 8001a22:	a801      	add	r0, sp, #4
 8001a24:	f005 ff09 	bl	800783a <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001a28:	4c20      	ldr	r4, [pc, #128]	@ (8001aac <ssd1306_NetWorkView+0xc0>)
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001a30:	a801      	add	r0, sp, #4
 8001a32:	f001 fc41 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 31);
 8001a36:	211f      	movs	r1, #31
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f001 fc57 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "AP :%s",IPInfo.AP_IP);
 8001a3e:	4d1c      	ldr	r5, [pc, #112]	@ (8001ab0 <ssd1306_NetWorkView+0xc4>)
 8001a40:	462a      	mov	r2, r5
 8001a42:	491c      	ldr	r1, [pc, #112]	@ (8001ab4 <ssd1306_NetWorkView+0xc8>)
 8001a44:	a801      	add	r0, sp, #4
 8001a46:	f005 fd7f 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001a50:	a801      	add	r0, sp, #4
 8001a52:	f001 fc31 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 43);
 8001a56:	212b      	movs	r1, #43	@ 0x2b
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f001 fc47 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%s",WiFiInfo.ssid);
 8001a5e:	4631      	mov	r1, r6
 8001a60:	a801      	add	r0, sp, #4
 8001a62:	f005 feea 	bl	800783a <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001a66:	2301      	movs	r3, #1
 8001a68:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001a6c:	a801      	add	r0, sp, #4
 8001a6e:	f001 fc23 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 54);
 8001a72:	2136      	movs	r1, #54	@ 0x36
 8001a74:	2000      	movs	r0, #0
 8001a76:	f001 fc39 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "STA:%s",IPInfo.STA_IP);
 8001a7a:	f105 0222 	add.w	r2, r5, #34	@ 0x22
 8001a7e:	490e      	ldr	r1, [pc, #56]	@ (8001ab8 <ssd1306_NetWorkView+0xcc>)
 8001a80:	a801      	add	r0, sp, #4
 8001a82:	f005 fd61 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001a86:	2301      	movs	r3, #1
 8001a88:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001a8c:	a801      	add	r0, sp, #4
 8001a8e:	f001 fc13 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a92:	f001 fb01 	bl	8003098 <ssd1306_UpdateScreen>
}
 8001a96:	b01a      	add	sp, #104	@ 0x68
 8001a98:	bd70      	pop	{r4, r5, r6, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000378 	.word	0x20000378
 8001aa0:	0800afa4 	.word	0x0800afa4
 8001aa4:	200000f4 	.word	0x200000f4
 8001aa8:	20000042 	.word	0x20000042
 8001aac:	200000fc 	.word	0x200000fc
 8001ab0:	20000334 	.word	0x20000334
 8001ab4:	0800afb0 	.word	0x0800afb0
 8001ab8:	0800afb8 	.word	0x0800afb8

08001abc <ssd1306_SensorView>:

void ssd1306_SensorView(){
 8001abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac0:	b09a      	sub	sp, #104	@ 0x68
	uint8_t msg[100];
	ssd1306_Fill(Black);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f001 fada 	bl	800307c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4608      	mov	r0, r1
 8001acc:	f001 fc0e 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "SENSOR");
 8001ad0:	4b80      	ldr	r3, [pc, #512]	@ (8001cd4 <ssd1306_SensorView+0x218>)
 8001ad2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ad6:	9001      	str	r0, [sp, #4]
 8001ad8:	f8ad 1008 	strh.w	r1, [sp, #8]
 8001adc:	0c09      	lsrs	r1, r1, #16
 8001ade:	f88d 100a 	strb.w	r1, [sp, #10]
	ssd1306_WriteString(msg, Font_11x18, White);
 8001ae2:	4c7d      	ldr	r4, [pc, #500]	@ (8001cd8 <ssd1306_SensorView+0x21c>)
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001aea:	a801      	add	r0, sp, #4
 8001aec:	f001 fbe4 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8001af0:	2112      	movs	r1, #18
 8001af2:	2000      	movs	r0, #0
 8001af4:	f001 fbfa 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "T:%dC",(uint8_t)DHT11_Info.temp);
 8001af8:	4d78      	ldr	r5, [pc, #480]	@ (8001cdc <ssd1306_SensorView+0x220>)
 8001afa:	6868      	ldr	r0, [r5, #4]
 8001afc:	f7ff fa6c 	bl	8000fd8 <__aeabi_f2uiz>
 8001b00:	b2c2      	uxtb	r2, r0
 8001b02:	4977      	ldr	r1, [pc, #476]	@ (8001ce0 <ssd1306_SensorView+0x224>)
 8001b04:	a801      	add	r0, sp, #4
 8001b06:	f005 fd1f 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001b10:	a801      	add	r0, sp, #4
 8001b12:	f001 fbd1 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 18);
 8001b16:	2112      	movs	r1, #18
 8001b18:	2040      	movs	r0, #64	@ 0x40
 8001b1a:	f001 fbe7 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "H:%d%%",(uint8_t)DHT11_Info.hum);
 8001b1e:	6828      	ldr	r0, [r5, #0]
 8001b20:	f7ff fa5a 	bl	8000fd8 <__aeabi_f2uiz>
 8001b24:	b2c2      	uxtb	r2, r0
 8001b26:	496f      	ldr	r1, [pc, #444]	@ (8001ce4 <ssd1306_SensorView+0x228>)
 8001b28:	a801      	add	r0, sp, #4
 8001b2a:	f005 fd0d 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001b34:	a801      	add	r0, sp, #4
 8001b36:	f001 fbbf 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 8001b3a:	2124      	movs	r1, #36	@ 0x24
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f001 fbd5 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "L:%d",(uint8_t)DHT11_Alarm_L.temp);
 8001b42:	f8df 81a4 	ldr.w	r8, [pc, #420]	@ 8001ce8 <ssd1306_SensorView+0x22c>
 8001b46:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001b4a:	f7ff fa45 	bl	8000fd8 <__aeabi_f2uiz>
 8001b4e:	4f67      	ldr	r7, [pc, #412]	@ (8001cec <ssd1306_SensorView+0x230>)
 8001b50:	b2c2      	uxtb	r2, r0
 8001b52:	4639      	mov	r1, r7
 8001b54:	a801      	add	r0, sp, #4
 8001b56:	f005 fcf7 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001b5a:	4c65      	ldr	r4, [pc, #404]	@ (8001cf0 <ssd1306_SensorView+0x234>)
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001b62:	a801      	add	r0, sp, #4
 8001b64:	f001 fba8 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 36);
 8001b68:	2124      	movs	r1, #36	@ 0x24
 8001b6a:	2020      	movs	r0, #32
 8001b6c:	f001 fbbe 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "H:%d",(uint8_t)DHT11_Alarm_H.temp);
 8001b70:	4e60      	ldr	r6, [pc, #384]	@ (8001cf4 <ssd1306_SensorView+0x238>)
 8001b72:	6870      	ldr	r0, [r6, #4]
 8001b74:	f7ff fa30 	bl	8000fd8 <__aeabi_f2uiz>
 8001b78:	4d5f      	ldr	r5, [pc, #380]	@ (8001cf8 <ssd1306_SensorView+0x23c>)
 8001b7a:	b2c2      	uxtb	r2, r0
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	a801      	add	r0, sp, #4
 8001b80:	f005 fce2 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001b84:	2301      	movs	r3, #1
 8001b86:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001b8a:	a801      	add	r0, sp, #4
 8001b8c:	f001 fb94 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 36);
 8001b90:	2124      	movs	r1, #36	@ 0x24
 8001b92:	2040      	movs	r0, #64	@ 0x40
 8001b94:	f001 fbaa 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "L:%d",(uint8_t)DHT11_Alarm_L.hum);
 8001b98:	f8d8 0000 	ldr.w	r0, [r8]
 8001b9c:	f7ff fa1c 	bl	8000fd8 <__aeabi_f2uiz>
 8001ba0:	b2c2      	uxtb	r2, r0
 8001ba2:	4639      	mov	r1, r7
 8001ba4:	a801      	add	r0, sp, #4
 8001ba6:	f005 fccf 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001baa:	2301      	movs	r3, #1
 8001bac:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001bb0:	a801      	add	r0, sp, #4
 8001bb2:	f001 fb81 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 36);
 8001bb6:	2124      	movs	r1, #36	@ 0x24
 8001bb8:	2060      	movs	r0, #96	@ 0x60
 8001bba:	f001 fb97 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "H:%d",(uint8_t)DHT11_Alarm_H.hum);
 8001bbe:	6830      	ldr	r0, [r6, #0]
 8001bc0:	f7ff fa0a 	bl	8000fd8 <__aeabi_f2uiz>
 8001bc4:	b2c2      	uxtb	r2, r0
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	a801      	add	r0, sp, #4
 8001bca:	f005 fcbd 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001bd4:	a801      	add	r0, sp, #4
 8001bd6:	f001 fb6f 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 46);
 8001bda:	212e      	movs	r1, #46	@ 0x2e
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f001 fb85 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "SOIL");
 8001be2:	4b46      	ldr	r3, [pc, #280]	@ (8001cfc <ssd1306_SensorView+0x240>)
 8001be4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be8:	9001      	str	r0, [sp, #4]
 8001bea:	f88d 1008 	strb.w	r1, [sp, #8]
	ssd1306_WriteString(msg, Font_7x10, White);
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001bf4:	a801      	add	r0, sp, #4
 8001bf6:	f001 fb5f 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 46);
 8001bfa:	212e      	movs	r1, #46	@ 0x2e
 8001bfc:	2020      	movs	r0, #32
 8001bfe:	f001 fb75 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%d",PUMP[2]);
 8001c02:	4e3f      	ldr	r6, [pc, #252]	@ (8001d00 <ssd1306_SensorView+0x244>)
 8001c04:	4d3f      	ldr	r5, [pc, #252]	@ (8001d04 <ssd1306_SensorView+0x248>)
 8001c06:	88b2      	ldrh	r2, [r6, #4]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	a801      	add	r0, sp, #4
 8001c0c:	f005 fc9c 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001c10:	2301      	movs	r3, #1
 8001c12:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c16:	a801      	add	r0, sp, #4
 8001c18:	f001 fb4e 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 46);
 8001c1c:	212e      	movs	r1, #46	@ 0x2e
 8001c1e:	2040      	movs	r0, #64	@ 0x40
 8001c20:	f001 fb64 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%d",PUMP[3]);
 8001c24:	88f2      	ldrh	r2, [r6, #6]
 8001c26:	4629      	mov	r1, r5
 8001c28:	a801      	add	r0, sp, #4
 8001c2a:	f005 fc8d 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c34:	a801      	add	r0, sp, #4
 8001c36:	f001 fb3f 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 46);
 8001c3a:	212e      	movs	r1, #46	@ 0x2e
 8001c3c:	2060      	movs	r0, #96	@ 0x60
 8001c3e:	f001 fb55 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%d",PUMP[4]);
 8001c42:	8932      	ldrh	r2, [r6, #8]
 8001c44:	4629      	mov	r1, r5
 8001c46:	a801      	add	r0, sp, #4
 8001c48:	f005 fc7e 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c52:	a801      	add	r0, sp, #4
 8001c54:	f001 fb30 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0 , 56);
 8001c58:	2138      	movs	r1, #56	@ 0x38
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f001 fb46 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "<");
 8001c60:	233c      	movs	r3, #60	@ 0x3c
 8001c62:	f8ad 3004 	strh.w	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001c66:	4c28      	ldr	r4, [pc, #160]	@ (8001d08 <ssd1306_SensorView+0x24c>)
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c6e:	a801      	add	r0, sp, #4
 8001c70:	f001 fb22 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(16, 56);
 8001c74:	2138      	movs	r1, #56	@ 0x38
 8001c76:	2010      	movs	r0, #16
 8001c78:	f001 fb38 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%s", settings[FLAG_NowSettingVal]);
 8001c7c:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <ssd1306_SensorView+0x250>)
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <ssd1306_SensorView+0x254>)
 8001c82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c86:	a801      	add	r0, sp, #4
 8001c88:	f005 fdd7 	bl	800783a <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c92:	a801      	add	r0, sp, #4
 8001c94:	f001 fb10 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 8001c98:	2138      	movs	r1, #56	@ 0x38
 8001c9a:	2040      	movs	r0, #64	@ 0x40
 8001c9c:	f001 fb26 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, " \\/");
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <ssd1306_SensorView+0x258>)
 8001ca2:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001caa:	a801      	add	r0, sp, #4
 8001cac:	f001 fb04 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 8001cb0:	2138      	movs	r1, #56	@ 0x38
 8001cb2:	2060      	movs	r0, #96	@ 0x60
 8001cb4:	f001 fb1a 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, " /\\");
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <ssd1306_SensorView+0x25c>)
 8001cba:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001cc2:	a801      	add	r0, sp, #4
 8001cc4:	f001 faf8 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001cc8:	f001 f9e6 	bl	8003098 <ssd1306_UpdateScreen>
}
 8001ccc:	b01a      	add	sp, #104	@ 0x68
 8001cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd2:	bf00      	nop
 8001cd4:	0800afc0 	.word	0x0800afc0
 8001cd8:	200000f4 	.word	0x200000f4
 8001cdc:	2000032c 	.word	0x2000032c
 8001ce0:	0800afc8 	.word	0x0800afc8
 8001ce4:	0800afd0 	.word	0x0800afd0
 8001ce8:	200000e0 	.word	0x200000e0
 8001cec:	0800afd8 	.word	0x0800afd8
 8001cf0:	200000fc 	.word	0x200000fc
 8001cf4:	200000e8 	.word	0x200000e8
 8001cf8:	0800afe0 	.word	0x0800afe0
 8001cfc:	0800afe8 	.word	0x0800afe8
 8001d00:	200003b0 	.word	0x200003b0
 8001d04:	0800afac 	.word	0x0800afac
 8001d08:	20000104 	.word	0x20000104
 8001d0c:	200000a4 	.word	0x200000a4
 8001d10:	200000a8 	.word	0x200000a8
 8001d14:	002f5c20 	.word	0x002f5c20
 8001d18:	005c2f20 	.word	0x005c2f20

08001d1c <ssd1306_PumpView>:

void ssd1306_PumpView(){
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	b09a      	sub	sp, #104	@ 0x68
	uint8_t msg[100];
	ssd1306_Fill(Black);
 8001d20:	2000      	movs	r0, #0
 8001d22:	f001 f9ab 	bl	800307c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001d26:	2100      	movs	r1, #0
 8001d28:	4608      	mov	r0, r1
 8001d2a:	f001 fadf 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "PUMP");
 8001d2e:	ac01      	add	r4, sp, #4
 8001d30:	4b4f      	ldr	r3, [pc, #316]	@ (8001e70 <ssd1306_PumpView+0x154>)
 8001d32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d36:	9001      	str	r0, [sp, #4]
 8001d38:	f88d 1008 	strb.w	r1, [sp, #8]
	ssd1306_WriteString(msg, Font_11x18, White);
 8001d3c:	4d4d      	ldr	r5, [pc, #308]	@ (8001e74 <ssd1306_PumpView+0x158>)
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001d44:	4620      	mov	r0, r4
 8001d46:	f001 fab7 	bl	80032b8 <ssd1306_WriteString>

	ssd1306_SetCursor(70, 0);
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2046      	movs	r0, #70	@ 0x46
 8001d4e:	f001 facd 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%s",TimerStates[FLAG_CurrentTimerStates]);
 8001d52:	4b49      	ldr	r3, [pc, #292]	@ (8001e78 <ssd1306_PumpView+0x15c>)
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	4b49      	ldr	r3, [pc, #292]	@ (8001e7c <ssd1306_PumpView+0x160>)
 8001d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f005 fd6c 	bl	800783a <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001d62:	4a47      	ldr	r2, [pc, #284]	@ (8001e80 <ssd1306_PumpView+0x164>)
 8001d64:	2301      	movs	r3, #1
 8001d66:	ca06      	ldmia	r2, {r1, r2}
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f001 faa5 	bl	80032b8 <ssd1306_WriteString>


	ssd1306_SetCursor(0, 18);
 8001d6e:	2112      	movs	r1, #18
 8001d70:	2000      	movs	r0, #0
 8001d72:	f001 fabb 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "U:%d\r\n", PUMP[0]);
 8001d76:	4e43      	ldr	r6, [pc, #268]	@ (8001e84 <ssd1306_PumpView+0x168>)
 8001d78:	8832      	ldrh	r2, [r6, #0]
 8001d7a:	4943      	ldr	r1, [pc, #268]	@ (8001e88 <ssd1306_PumpView+0x16c>)
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f005 fbe3 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001d82:	2301      	movs	r3, #1
 8001d84:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f001 fa95 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 18);
 8001d8e:	2112      	movs	r1, #18
 8001d90:	2040      	movs	r0, #64	@ 0x40
 8001d92:	f001 faab 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "I:%d\r\n", PUMP[1]);
 8001d96:	8872      	ldrh	r2, [r6, #2]
 8001d98:	493c      	ldr	r1, [pc, #240]	@ (8001e8c <ssd1306_PumpView+0x170>)
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f005 fbd4 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001da0:	2301      	movs	r3, #1
 8001da2:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001da6:	4620      	mov	r0, r4
 8001da8:	f001 fa86 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 8001dac:	2124      	movs	r1, #36	@ 0x24
 8001dae:	2000      	movs	r0, #0
 8001db0:	f001 fa9c 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "Duty:%d", PUMP_PWM);
 8001db4:	4b36      	ldr	r3, [pc, #216]	@ (8001e90 <ssd1306_PumpView+0x174>)
 8001db6:	881a      	ldrh	r2, [r3, #0]
 8001db8:	4936      	ldr	r1, [pc, #216]	@ (8001e94 <ssd1306_PumpView+0x178>)
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f005 fbc4 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f001 fa76 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(110, 36);
 8001dcc:	2124      	movs	r1, #36	@ 0x24
 8001dce:	206e      	movs	r0, #110	@ 0x6e
 8001dd0:	f001 fa8c 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "MAX");
 8001dd4:	4b30      	ldr	r3, [pc, #192]	@ (8001e98 <ssd1306_PumpView+0x17c>)
 8001dd6:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001dd8:	4d30      	ldr	r5, [pc, #192]	@ (8001e9c <ssd1306_PumpView+0x180>)
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001de0:	4620      	mov	r0, r4
 8001de2:	f001 fa69 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(110, 45);
 8001de6:	212d      	movs	r1, #45	@ 0x2d
 8001de8:	206e      	movs	r0, #110	@ 0x6e
 8001dea:	f001 fa7f 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "720");
 8001dee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea0 <ssd1306_PumpView+0x184>)
 8001df0:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001df2:	2301      	movs	r3, #1
 8001df4:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f001 fa5d 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0 , 56);
 8001dfe:	2138      	movs	r1, #56	@ 0x38
 8001e00:	2000      	movs	r0, #0
 8001e02:	f001 fa73 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "<");
 8001e06:	233c      	movs	r3, #60	@ 0x3c
 8001e08:	f8ad 3004 	strh.w	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001e12:	4620      	mov	r0, r4
 8001e14:	f001 fa50 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(16, 56);
 8001e18:	2138      	movs	r1, #56	@ 0x38
 8001e1a:	2010      	movs	r0, #16
 8001e1c:	f001 fa66 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "TimeSet");
 8001e20:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <ssd1306_PumpView+0x188>)
 8001e22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e26:	e884 0003 	stmia.w	r4, {r0, r1}
	ssd1306_WriteString(msg, Font_6x8, White);
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001e30:	4620      	mov	r0, r4
 8001e32:	f001 fa41 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 8001e36:	2138      	movs	r1, #56	@ 0x38
 8001e38:	2040      	movs	r0, #64	@ 0x40
 8001e3a:	f001 fa57 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, " \\/");
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <ssd1306_PumpView+0x18c>)
 8001e40:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001e42:	2301      	movs	r3, #1
 8001e44:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f001 fa35 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 8001e4e:	2138      	movs	r1, #56	@ 0x38
 8001e50:	2060      	movs	r0, #96	@ 0x60
 8001e52:	f001 fa4b 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, " /\\");
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <ssd1306_PumpView+0x190>)
 8001e58:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001e60:	4620      	mov	r0, r4
 8001e62:	f001 fa29 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e66:	f001 f917 	bl	8003098 <ssd1306_UpdateScreen>
}
 8001e6a:	b01a      	add	sp, #104	@ 0x68
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
 8001e6e:	bf00      	nop
 8001e70:	0800af94 	.word	0x0800af94
 8001e74:	200000f4 	.word	0x200000f4
 8001e78:	20000093 	.word	0x20000093
 8001e7c:	20000094 	.word	0x20000094
 8001e80:	200000fc 	.word	0x200000fc
 8001e84:	200003b0 	.word	0x200003b0
 8001e88:	0800aff0 	.word	0x0800aff0
 8001e8c:	0800aff8 	.word	0x0800aff8
 8001e90:	200000f2 	.word	0x200000f2
 8001e94:	0800b000 	.word	0x0800b000
 8001e98:	0058414d 	.word	0x0058414d
 8001e9c:	20000104 	.word	0x20000104
 8001ea0:	00303237 	.word	0x00303237
 8001ea4:	0800b008 	.word	0x0800b008
 8001ea8:	002f5c20 	.word	0x002f5c20
 8001eac:	005c2f20 	.word	0x005c2f20

08001eb0 <ssd1306_BuzzerView>:

void ssd1306_BuzzerView(){
 8001eb0:	b510      	push	{r4, lr}
 8001eb2:	b09a      	sub	sp, #104	@ 0x68
	uint8_t msg[100];
	ssd1306_Fill(Black);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f001 f8e1 	bl	800307c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	f001 fa15 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "BUZZER");
 8001ec2:	4b37      	ldr	r3, [pc, #220]	@ (8001fa0 <ssd1306_BuzzerView+0xf0>)
 8001ec4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ec8:	9001      	str	r0, [sp, #4]
 8001eca:	f8ad 1008 	strh.w	r1, [sp, #8]
 8001ece:	0c09      	lsrs	r1, r1, #16
 8001ed0:	f88d 100a 	strb.w	r1, [sp, #10]
	ssd1306_WriteString(msg, Font_11x18, White);
 8001ed4:	4c33      	ldr	r4, [pc, #204]	@ (8001fa4 <ssd1306_BuzzerView+0xf4>)
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001edc:	a801      	add	r0, sp, #4
 8001ede:	f001 f9eb 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8001ee2:	2112      	movs	r1, #18
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f001 fa01 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "FREQ:%d\r\n",buzzer.frequency );
 8001eea:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa8 <ssd1306_BuzzerView+0xf8>)
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	492f      	ldr	r1, [pc, #188]	@ (8001fac <ssd1306_BuzzerView+0xfc>)
 8001ef0:	a801      	add	r0, sp, #4
 8001ef2:	f005 fb29 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001efc:	a801      	add	r0, sp, #4
 8001efe:	f001 f9db 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 8001f02:	2124      	movs	r1, #36	@ 0x24
 8001f04:	2000      	movs	r0, #0
 8001f06:	f001 f9f1 	bl	80032ec <ssd1306_SetCursor>
    sprintf(msg, "MUTE: %s\r\n", FLAG_MUTE ? "ON" : "OFF");
 8001f0a:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <ssd1306_BuzzerView+0x100>)
 8001f0c:	7819      	ldrb	r1, [r3, #0]
 8001f0e:	4a29      	ldr	r2, [pc, #164]	@ (8001fb4 <ssd1306_BuzzerView+0x104>)
 8001f10:	4b29      	ldr	r3, [pc, #164]	@ (8001fb8 <ssd1306_BuzzerView+0x108>)
 8001f12:	2900      	cmp	r1, #0
 8001f14:	bf18      	it	ne
 8001f16:	461a      	movne	r2, r3
 8001f18:	4928      	ldr	r1, [pc, #160]	@ (8001fbc <ssd1306_BuzzerView+0x10c>)
 8001f1a:	a801      	add	r0, sp, #4
 8001f1c:	f005 fb14 	bl	8007548 <siprintf>
    ssd1306_WriteString(msg, Font_11x18, White);
 8001f20:	2301      	movs	r3, #1
 8001f22:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001f26:	a801      	add	r0, sp, #4
 8001f28:	f001 f9c6 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0 , 56);
 8001f2c:	2138      	movs	r1, #56	@ 0x38
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f001 f9dc 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "<");
 8001f34:	233c      	movs	r3, #60	@ 0x3c
 8001f36:	f8ad 3004 	strh.w	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001f3a:	4c21      	ldr	r4, [pc, #132]	@ (8001fc0 <ssd1306_BuzzerView+0x110>)
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f42:	a801      	add	r0, sp, #4
 8001f44:	f001 f9b8 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(24, 56);
 8001f48:	2138      	movs	r1, #56	@ 0x38
 8001f4a:	2018      	movs	r0, #24
 8001f4c:	f001 f9ce 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "MUTE");
 8001f50:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <ssd1306_BuzzerView+0x114>)
 8001f52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f56:	9001      	str	r0, [sp, #4]
 8001f58:	f88d 1008 	strb.w	r1, [sp, #8]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f62:	a801      	add	r0, sp, #4
 8001f64:	f001 f9a8 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 8001f68:	2138      	movs	r1, #56	@ 0x38
 8001f6a:	2040      	movs	r0, #64	@ 0x40
 8001f6c:	f001 f9be 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, " \\/");
 8001f70:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <ssd1306_BuzzerView+0x118>)
 8001f72:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001f74:	2301      	movs	r3, #1
 8001f76:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f7a:	a801      	add	r0, sp, #4
 8001f7c:	f001 f99c 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 8001f80:	2138      	movs	r1, #56	@ 0x38
 8001f82:	2060      	movs	r0, #96	@ 0x60
 8001f84:	f001 f9b2 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, " /\\");
 8001f88:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <ssd1306_BuzzerView+0x11c>)
 8001f8a:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f92:	a801      	add	r0, sp, #4
 8001f94:	f001 f990 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001f98:	f001 f87e 	bl	8003098 <ssd1306_UpdateScreen>
}
 8001f9c:	b01a      	add	sp, #104	@ 0x68
 8001f9e:	bd10      	pop	{r4, pc}
 8001fa0:	0800b018 	.word	0x0800b018
 8001fa4:	200000f4 	.word	0x200000f4
 8001fa8:	200000bc 	.word	0x200000bc
 8001fac:	0800b020 	.word	0x0800b020
 8001fb0:	200000f0 	.word	0x200000f0
 8001fb4:	0800b014 	.word	0x0800b014
 8001fb8:	0800b010 	.word	0x0800b010
 8001fbc:	0800b02c 	.word	0x0800b02c
 8001fc0:	20000104 	.word	0x20000104
 8001fc4:	0800b038 	.word	0x0800b038
 8001fc8:	002f5c20 	.word	0x002f5c20
 8001fcc:	005c2f20 	.word	0x005c2f20

08001fd0 <ssd1306_ConfigView>:

ssd1306_ConfigView(){
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	b09c      	sub	sp, #112	@ 0x70
	uint8_t msg[100];
	ssd1306_Fill(Black);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f001 f851 	bl	800307c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4608      	mov	r0, r1
 8001fde:	f001 f985 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "CONFIG");
 8001fe2:	4b56      	ldr	r3, [pc, #344]	@ (800213c <ssd1306_ConfigView+0x16c>)
 8001fe4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fe8:	9003      	str	r0, [sp, #12]
 8001fea:	f8ad 1010 	strh.w	r1, [sp, #16]
 8001fee:	0c09      	lsrs	r1, r1, #16
 8001ff0:	f88d 1012 	strb.w	r1, [sp, #18]
	ssd1306_WriteString(msg, Font_11x18, White);
 8001ff4:	4a52      	ldr	r2, [pc, #328]	@ (8002140 <ssd1306_ConfigView+0x170>)
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	ca06      	ldmia	r2, {r1, r2}
 8001ffa:	a803      	add	r0, sp, #12
 8001ffc:	f001 f95c 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(70, 0);
 8002000:	2100      	movs	r1, #0
 8002002:	2046      	movs	r0, #70	@ 0x46
 8002004:	f001 f972 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%s",TimerStates[FLAG_CurrentTimerStates]);
 8002008:	4b4e      	ldr	r3, [pc, #312]	@ (8002144 <ssd1306_ConfigView+0x174>)
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	4b4e      	ldr	r3, [pc, #312]	@ (8002148 <ssd1306_ConfigView+0x178>)
 800200e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002012:	a803      	add	r0, sp, #12
 8002014:	f005 fc11 	bl	800783a <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 8002018:	4d4c      	ldr	r5, [pc, #304]	@ (800214c <ssd1306_ConfigView+0x17c>)
 800201a:	2301      	movs	r3, #1
 800201c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002020:	a803      	add	r0, sp, #12
 8002022:	f001 f949 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8002026:	2112      	movs	r1, #18
 8002028:	2000      	movs	r0, #0
 800202a:	f001 f95f 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "RUN TIME");
 800202e:	4a48      	ldr	r2, [pc, #288]	@ (8002150 <ssd1306_ConfigView+0x180>)
 8002030:	ab03      	add	r3, sp, #12
 8002032:	ca07      	ldmia	r2, {r0, r1, r2}
 8002034:	c303      	stmia	r3!, {r0, r1}
 8002036:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteString(msg, Font_6x8, White);
 8002038:	4c46      	ldr	r4, [pc, #280]	@ (8002154 <ssd1306_ConfigView+0x184>)
 800203a:	2301      	movs	r3, #1
 800203c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002040:	a803      	add	r0, sp, #12
 8002042:	f001 f939 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 26);
 8002046:	211a      	movs	r1, #26
 8002048:	2000      	movs	r0, #0
 800204a:	f001 f94f 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%02u:%02u:%02u", Time.hours, Time.minutes, Time.seconds);
 800204e:	4a42      	ldr	r2, [pc, #264]	@ (8002158 <ssd1306_ConfigView+0x188>)
 8002050:	4e42      	ldr	r6, [pc, #264]	@ (800215c <ssd1306_ConfigView+0x18c>)
 8002052:	6893      	ldr	r3, [r2, #8]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	6853      	ldr	r3, [r2, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	4631      	mov	r1, r6
 800205c:	a803      	add	r0, sp, #12
 800205e:	f005 fa73 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8002062:	2301      	movs	r3, #1
 8002064:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002068:	a803      	add	r0, sp, #12
 800206a:	f001 f925 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 800206e:	2124      	movs	r1, #36	@ 0x24
 8002070:	2000      	movs	r0, #0
 8002072:	f001 f93b 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "SET TIME");
 8002076:	4a3a      	ldr	r2, [pc, #232]	@ (8002160 <ssd1306_ConfigView+0x190>)
 8002078:	ab03      	add	r3, sp, #12
 800207a:	ca07      	ldmia	r2, {r0, r1, r2}
 800207c:	c303      	stmia	r3!, {r0, r1}
 800207e:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteString(msg, Font_6x8, White);
 8002080:	2301      	movs	r3, #1
 8002082:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002086:	a803      	add	r0, sp, #12
 8002088:	f001 f916 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 44);
 800208c:	212c      	movs	r1, #44	@ 0x2c
 800208e:	2000      	movs	r0, #0
 8002090:	f001 f92c 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "%02u:%02u:%02u", ALARM_Time.hours, ALARM_Time.minutes, ALARM_Time.seconds);
 8002094:	4a33      	ldr	r2, [pc, #204]	@ (8002164 <ssd1306_ConfigView+0x194>)
 8002096:	6893      	ldr	r3, [r2, #8]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	6853      	ldr	r3, [r2, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	4631      	mov	r1, r6
 80020a0:	a803      	add	r0, sp, #12
 80020a2:	f005 fa51 	bl	8007548 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 80020a6:	2301      	movs	r3, #1
 80020a8:	e895 0006 	ldmia.w	r5, {r1, r2}
 80020ac:	a803      	add	r0, sp, #12
 80020ae:	f001 f903 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 56);
 80020b2:	2138      	movs	r1, #56	@ 0x38
 80020b4:	2000      	movs	r0, #0
 80020b6:	f001 f919 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "<");
 80020ba:	233c      	movs	r3, #60	@ 0x3c
 80020bc:	f8ad 300c 	strh.w	r3, [sp, #12]
	ssd1306_WriteString(msg, Font_6x8, White);
 80020c0:	2301      	movs	r3, #1
 80020c2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80020c6:	a803      	add	r0, sp, #12
 80020c8:	f001 f8f6 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 56);
 80020cc:	2138      	movs	r1, #56	@ 0x38
 80020ce:	2020      	movs	r0, #32
 80020d0:	f001 f90c 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "+h");
 80020d4:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <ssd1306_ConfigView+0x198>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	f88d 300e 	strb.w	r3, [sp, #14]
	ssd1306_WriteString(msg, Font_6x8, White);
 80020e2:	2301      	movs	r3, #1
 80020e4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80020e8:	a803      	add	r0, sp, #12
 80020ea:	f001 f8e5 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 80020ee:	2138      	movs	r1, #56	@ 0x38
 80020f0:	2040      	movs	r0, #64	@ 0x40
 80020f2:	f001 f8fb 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "+m");
 80020f6:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <ssd1306_ConfigView+0x19c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80020fe:	0c1b      	lsrs	r3, r3, #16
 8002100:	f88d 300e 	strb.w	r3, [sp, #14]
	ssd1306_WriteString(msg, Font_6x8, White);
 8002104:	2301      	movs	r3, #1
 8002106:	e894 0006 	ldmia.w	r4, {r1, r2}
 800210a:	a803      	add	r0, sp, #12
 800210c:	f001 f8d4 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 8002110:	2138      	movs	r1, #56	@ 0x38
 8002112:	2060      	movs	r0, #96	@ 0x60
 8002114:	f001 f8ea 	bl	80032ec <ssd1306_SetCursor>
	sprintf(msg, "+s");
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <ssd1306_ConfigView+0x1a0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	f88d 300e 	strb.w	r3, [sp, #14]
	ssd1306_WriteString(msg, Font_6x8, White);
 8002126:	2301      	movs	r3, #1
 8002128:	e894 0006 	ldmia.w	r4, {r1, r2}
 800212c:	a803      	add	r0, sp, #12
 800212e:	f001 f8c3 	bl	80032b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002132:	f000 ffb1 	bl	8003098 <ssd1306_UpdateScreen>
}
 8002136:	b01c      	add	sp, #112	@ 0x70
 8002138:	bd70      	pop	{r4, r5, r6, pc}
 800213a:	bf00      	nop
 800213c:	0800b040 	.word	0x0800b040
 8002140:	200000f4 	.word	0x200000f4
 8002144:	20000093 	.word	0x20000093
 8002148:	20000094 	.word	0x20000094
 800214c:	200000fc 	.word	0x200000fc
 8002150:	0800af70 	.word	0x0800af70
 8002154:	20000104 	.word	0x20000104
 8002158:	20000318 	.word	0x20000318
 800215c:	0800af7c 	.word	0x0800af7c
 8002160:	0800b048 	.word	0x0800b048
 8002164:	2000030c 	.word	0x2000030c
 8002168:	0800b054 	.word	0x0800b054
 800216c:	0800b058 	.word	0x0800b058
 8002170:	0800b05c 	.word	0x0800b05c

08002174 <KeyHandeler_IndexView>:


void KeyHandeler_WelcomeView(){

}
void KeyHandeler_IndexView(){
 8002174:	b508      	push	{r3, lr}
	if (FLAG_SentKEY0) {
 8002176:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <KeyHandeler_IndexView+0x6c>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b993      	cbnz	r3, 80021a2 <KeyHandeler_IndexView+0x2e>
		CurrentView=V_NETWORK;
		HAL_Delay(200);
		FLAG_SentKEY0=0;
	}else
	if (FLAG_SentKEY1) {
 800217c:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <KeyHandeler_IndexView+0x70>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b9cb      	cbnz	r3, 80021b6 <KeyHandeler_IndexView+0x42>
		CurrentView=V_BUZZER;
		HAL_Delay(200);
		FLAG_SentKEY1=0;
	}else
	if (FLAG_SentKEY2) {
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <KeyHandeler_IndexView+0x74>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	bb03      	cbnz	r3, 80021ca <KeyHandeler_IndexView+0x56>
		CurrentView=V_PUMP;
		HAL_Delay(200);
		FLAG_SentKEY2=0;
	}else
	if (FLAG_SentKEY3) {
 8002188:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <KeyHandeler_IndexView+0x78>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b193      	cbz	r3, 80021b4 <KeyHandeler_IndexView+0x40>
		CurrentView=V_SENSOR;
 800218e:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <KeyHandeler_IndexView+0x7c>)
 8002190:	2203      	movs	r2, #3
 8002192:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 8002194:	20c8      	movs	r0, #200	@ 0xc8
 8002196:	f001 fc21 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY3=0;
 800219a:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <KeyHandeler_IndexView+0x78>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
	}
}
 80021a0:	e008      	b.n	80021b4 <KeyHandeler_IndexView+0x40>
		CurrentView=V_NETWORK;
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <KeyHandeler_IndexView+0x7c>)
 80021a4:	2202      	movs	r2, #2
 80021a6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 80021a8:	20c8      	movs	r0, #200	@ 0xc8
 80021aa:	f001 fc17 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY0=0;
 80021ae:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <KeyHandeler_IndexView+0x6c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
}
 80021b4:	bd08      	pop	{r3, pc}
		CurrentView=V_BUZZER;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <KeyHandeler_IndexView+0x7c>)
 80021b8:	2205      	movs	r2, #5
 80021ba:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 80021bc:	20c8      	movs	r0, #200	@ 0xc8
 80021be:	f001 fc0d 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY1=0;
 80021c2:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <KeyHandeler_IndexView+0x70>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e7f4      	b.n	80021b4 <KeyHandeler_IndexView+0x40>
		CurrentView=V_PUMP;
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <KeyHandeler_IndexView+0x7c>)
 80021cc:	2204      	movs	r2, #4
 80021ce:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 80021d0:	20c8      	movs	r0, #200	@ 0xc8
 80021d2:	f001 fc03 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY2=0;
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <KeyHandeler_IndexView+0x74>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	e7ea      	b.n	80021b4 <KeyHandeler_IndexView+0x40>
 80021de:	bf00      	nop
 80021e0:	20000305 	.word	0x20000305
 80021e4:	20000304 	.word	0x20000304
 80021e8:	20000303 	.word	0x20000303
 80021ec:	20000302 	.word	0x20000302
 80021f0:	200000b8 	.word	0x200000b8

080021f4 <KeyHandeler_NetWorkView>:

void KeyHandeler_NetWorkView(){
 80021f4:	b508      	push	{r3, lr}
	if (FLAG_SentKEY0) {
 80021f6:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <KeyHandeler_NetWorkView+0x78>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b993      	cbnz	r3, 8002222 <KeyHandeler_NetWorkView+0x2e>
		ssd1306_NoticeView("RESET_SERVER");
		ESP_RESET_SERVER();
		HAL_Delay(200);
		FLAG_SentKEY0=0;
	}else
	if (FLAG_SentKEY1) {
 80021fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <KeyHandeler_NetWorkView+0x7c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b9db      	cbnz	r3, 800223a <KeyHandeler_NetWorkView+0x46>
		ssd1306_NoticeView("INIT_BASE");
		ESP_INIT_BASE();
		HAL_Delay(200);
		FLAG_SentKEY1=0;
	}else
	if (FLAG_SentKEY2) {
 8002202:	4b1c      	ldr	r3, [pc, #112]	@ (8002274 <KeyHandeler_NetWorkView+0x80>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	bb23      	cbnz	r3, 8002252 <KeyHandeler_NetWorkView+0x5e>
		ssd1306_NoticeView("INIT_FULL");
		ESP_INIT_FULL();
		HAL_Delay(200);
		FLAG_SentKEY2=0;
	}else
	if (FLAG_SentKEY3) {
 8002208:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <KeyHandeler_NetWorkView+0x84>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b1a3      	cbz	r3, 8002238 <KeyHandeler_NetWorkView+0x44>
		CurrentView=V_INDEX;
 800220e:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <KeyHandeler_NetWorkView+0x88>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 8002214:	20c8      	movs	r0, #200	@ 0xc8
 8002216:	f001 fbe1 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY3=0;
 800221a:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <KeyHandeler_NetWorkView+0x84>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
	}
}
 8002220:	e00a      	b.n	8002238 <KeyHandeler_NetWorkView+0x44>
		ssd1306_NoticeView("RESET_SERVER");
 8002222:	4817      	ldr	r0, [pc, #92]	@ (8002280 <KeyHandeler_NetWorkView+0x8c>)
 8002224:	f7ff fac6 	bl	80017b4 <ssd1306_NoticeView>
		ESP_RESET_SERVER();
 8002228:	f7ff f8bc 	bl	80013a4 <ESP_RESET_SERVER>
		HAL_Delay(200);
 800222c:	20c8      	movs	r0, #200	@ 0xc8
 800222e:	f001 fbd5 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY0=0;
 8002232:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <KeyHandeler_NetWorkView+0x78>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
}
 8002238:	bd08      	pop	{r3, pc}
		ssd1306_NoticeView("INIT_BASE");
 800223a:	4812      	ldr	r0, [pc, #72]	@ (8002284 <KeyHandeler_NetWorkView+0x90>)
 800223c:	f7ff faba 	bl	80017b4 <ssd1306_NoticeView>
		ESP_INIT_BASE();
 8002240:	f7ff f91c 	bl	800147c <ESP_INIT_BASE>
		HAL_Delay(200);
 8002244:	20c8      	movs	r0, #200	@ 0xc8
 8002246:	f001 fbc9 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY1=0;
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <KeyHandeler_NetWorkView+0x7c>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e7f2      	b.n	8002238 <KeyHandeler_NetWorkView+0x44>
		ssd1306_NoticeView("INIT_FULL");
 8002252:	480d      	ldr	r0, [pc, #52]	@ (8002288 <KeyHandeler_NetWorkView+0x94>)
 8002254:	f7ff faae 	bl	80017b4 <ssd1306_NoticeView>
		ESP_INIT_FULL();
 8002258:	f7ff f8ca 	bl	80013f0 <ESP_INIT_FULL>
		HAL_Delay(200);
 800225c:	20c8      	movs	r0, #200	@ 0xc8
 800225e:	f001 fbbd 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY2=0;
 8002262:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <KeyHandeler_NetWorkView+0x80>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e7e6      	b.n	8002238 <KeyHandeler_NetWorkView+0x44>
 800226a:	bf00      	nop
 800226c:	20000305 	.word	0x20000305
 8002270:	20000304 	.word	0x20000304
 8002274:	20000303 	.word	0x20000303
 8002278:	20000302 	.word	0x20000302
 800227c:	200000b8 	.word	0x200000b8
 8002280:	0800b060 	.word	0x0800b060
 8002284:	0800b070 	.word	0x0800b070
 8002288:	0800b07c 	.word	0x0800b07c

0800228c <KeyHandeler_SensorView>:
void KeyHandeler_SensorView(){
 800228c:	b510      	push	{r4, lr}
	if (FLAG_SentKEY0) {
 800228e:	4b43      	ldr	r3, [pc, #268]	@ (800239c <KeyHandeler_SensorView+0x110>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d02d      	beq.n	80022f2 <KeyHandeler_SensorView+0x66>
		switch (FLAG_NowSettingVal) {
 8002296:	4b42      	ldr	r3, [pc, #264]	@ (80023a0 <KeyHandeler_SensorView+0x114>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d80a      	bhi.n	80022b4 <KeyHandeler_SensorView+0x28>
 800229e:	e8df f003 	tbb	[pc, r3]
 80022a2:	1002      	.short	0x1002
 80022a4:	2018      	.short	0x2018
			case 0:
				DHT11_Alarm_H.temp++;
 80022a6:	4c3f      	ldr	r4, [pc, #252]	@ (80023a4 <KeyHandeler_SensorView+0x118>)
 80022a8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80022ac:	6860      	ldr	r0, [r4, #4]
 80022ae:	f7fe fd15 	bl	8000cdc <__addsf3>
 80022b2:	6060      	str	r0, [r4, #4]
				DHT11_Alarm_L.hum++;
				break;
			default:
				break;
		}
		HAL_Delay(200);
 80022b4:	20c8      	movs	r0, #200	@ 0xc8
 80022b6:	f001 fb91 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY0=0;
 80022ba:	4b38      	ldr	r3, [pc, #224]	@ (800239c <KeyHandeler_SensorView+0x110>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
	if (FLAG_SentKEY3) {
		CurrentView=V_INDEX;
		HAL_Delay(200);
		FLAG_SentKEY3=0;
	}
}
 80022c0:	bd10      	pop	{r4, pc}
				DHT11_Alarm_L.temp++;
 80022c2:	4c39      	ldr	r4, [pc, #228]	@ (80023a8 <KeyHandeler_SensorView+0x11c>)
 80022c4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80022c8:	6860      	ldr	r0, [r4, #4]
 80022ca:	f7fe fd07 	bl	8000cdc <__addsf3>
 80022ce:	6060      	str	r0, [r4, #4]
				break;
 80022d0:	e7f0      	b.n	80022b4 <KeyHandeler_SensorView+0x28>
				DHT11_Alarm_H.hum++;
 80022d2:	4c34      	ldr	r4, [pc, #208]	@ (80023a4 <KeyHandeler_SensorView+0x118>)
 80022d4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80022d8:	6820      	ldr	r0, [r4, #0]
 80022da:	f7fe fcff 	bl	8000cdc <__addsf3>
 80022de:	6020      	str	r0, [r4, #0]
				break;
 80022e0:	e7e8      	b.n	80022b4 <KeyHandeler_SensorView+0x28>
				DHT11_Alarm_L.hum++;
 80022e2:	4c31      	ldr	r4, [pc, #196]	@ (80023a8 <KeyHandeler_SensorView+0x11c>)
 80022e4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80022e8:	6820      	ldr	r0, [r4, #0]
 80022ea:	f7fe fcf7 	bl	8000cdc <__addsf3>
 80022ee:	6020      	str	r0, [r4, #0]
				break;
 80022f0:	e7e0      	b.n	80022b4 <KeyHandeler_SensorView+0x28>
	if (FLAG_SentKEY1) {
 80022f2:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <KeyHandeler_SensorView+0x120>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d02d      	beq.n	800235a <KeyHandeler_SensorView+0xce>
		switch (FLAG_NowSettingVal) {
 80022fe:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <KeyHandeler_SensorView+0x114>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d80a      	bhi.n	800231c <KeyHandeler_SensorView+0x90>
 8002306:	e8df f003 	tbb	[pc, r3]
 800230a:	1002      	.short	0x1002
 800230c:	2018      	.short	0x2018
				DHT11_Alarm_H.temp--;
 800230e:	4c25      	ldr	r4, [pc, #148]	@ (80023a4 <KeyHandeler_SensorView+0x118>)
 8002310:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002314:	6860      	ldr	r0, [r4, #4]
 8002316:	f7fe fcdf 	bl	8000cd8 <__aeabi_fsub>
 800231a:	6060      	str	r0, [r4, #4]
		HAL_Delay(200);
 800231c:	20c8      	movs	r0, #200	@ 0xc8
 800231e:	f001 fb5d 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY1=0;
 8002322:	4b22      	ldr	r3, [pc, #136]	@ (80023ac <KeyHandeler_SensorView+0x120>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e7ca      	b.n	80022c0 <KeyHandeler_SensorView+0x34>
				DHT11_Alarm_L.temp--;
 800232a:	4c1f      	ldr	r4, [pc, #124]	@ (80023a8 <KeyHandeler_SensorView+0x11c>)
 800232c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002330:	6860      	ldr	r0, [r4, #4]
 8002332:	f7fe fcd1 	bl	8000cd8 <__aeabi_fsub>
 8002336:	6060      	str	r0, [r4, #4]
				break;
 8002338:	e7f0      	b.n	800231c <KeyHandeler_SensorView+0x90>
				DHT11_Alarm_H.hum--;
 800233a:	4c1a      	ldr	r4, [pc, #104]	@ (80023a4 <KeyHandeler_SensorView+0x118>)
 800233c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002340:	6820      	ldr	r0, [r4, #0]
 8002342:	f7fe fcc9 	bl	8000cd8 <__aeabi_fsub>
 8002346:	6020      	str	r0, [r4, #0]
				break;
 8002348:	e7e8      	b.n	800231c <KeyHandeler_SensorView+0x90>
				DHT11_Alarm_L.hum--;
 800234a:	4c17      	ldr	r4, [pc, #92]	@ (80023a8 <KeyHandeler_SensorView+0x11c>)
 800234c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	f7fe fcc1 	bl	8000cd8 <__aeabi_fsub>
 8002356:	6020      	str	r0, [r4, #0]
				break;
 8002358:	e7e0      	b.n	800231c <KeyHandeler_SensorView+0x90>
	if (FLAG_SentKEY2) {
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <KeyHandeler_SensorView+0x124>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b173      	cbz	r3, 800237e <KeyHandeler_SensorView+0xf2>
		if (FLAG_NowSettingVal++>2) {
 8002360:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <KeyHandeler_SensorView+0x114>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b02      	cmp	r3, #2
 8002366:	bf9c      	itt	ls
 8002368:	3301      	addls	r3, #1
 800236a:	b2da      	uxtbls	r2, r3
 800236c:	4b0c      	ldr	r3, [pc, #48]	@ (80023a0 <KeyHandeler_SensorView+0x114>)
 800236e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 8002370:	20c8      	movs	r0, #200	@ 0xc8
 8002372:	f001 fb33 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY2=0;
 8002376:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <KeyHandeler_SensorView+0x124>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e7a0      	b.n	80022c0 <KeyHandeler_SensorView+0x34>
	if (FLAG_SentKEY3) {
 800237e:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <KeyHandeler_SensorView+0x128>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d09c      	beq.n	80022c0 <KeyHandeler_SensorView+0x34>
		CurrentView=V_INDEX;
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <KeyHandeler_SensorView+0x12c>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 800238c:	20c8      	movs	r0, #200	@ 0xc8
 800238e:	f001 fb25 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY3=0;
 8002392:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <KeyHandeler_SensorView+0x128>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
}
 8002398:	e792      	b.n	80022c0 <KeyHandeler_SensorView+0x34>
 800239a:	bf00      	nop
 800239c:	20000305 	.word	0x20000305
 80023a0:	200000a4 	.word	0x200000a4
 80023a4:	200000e8 	.word	0x200000e8
 80023a8:	200000e0 	.word	0x200000e0
 80023ac:	20000304 	.word	0x20000304
 80023b0:	20000303 	.word	0x20000303
 80023b4:	20000302 	.word	0x20000302
 80023b8:	200000b8 	.word	0x200000b8

080023bc <KeyHandeler_PumpView>:
void KeyHandeler_PumpView(){
 80023bc:	b508      	push	{r3, lr}
	if (FLAG_SentKEY0) {
 80023be:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <KeyHandeler_PumpView+0x98>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b9db      	cbnz	r3, 80023fc <KeyHandeler_PumpView+0x40>
		PUMP_PWM=PUMP_PWM+10;
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PUMP_PWM);
		HAL_Delay(200);
		FLAG_SentKEY0=0;
	}else
	if (FLAG_SentKEY1) {
 80023c4:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <KeyHandeler_PumpView+0x9c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80023cc:	bb2b      	cbnz	r3, 800241a <KeyHandeler_PumpView+0x5e>
		PUMP_PWM=PUMP_PWM-10;
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PUMP_PWM);
		HAL_Delay(200);
		FLAG_SentKEY1=0;
	}else
	if (FLAG_SentKEY2) {
 80023ce:	4b23      	ldr	r3, [pc, #140]	@ (800245c <KeyHandeler_PumpView+0xa0>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d030      	beq.n	8002438 <KeyHandeler_PumpView+0x7c>
		CurrentView=V_CONFIG;
 80023d6:	4b22      	ldr	r3, [pc, #136]	@ (8002460 <KeyHandeler_PumpView+0xa4>)
 80023d8:	2106      	movs	r1, #6
 80023da:	7019      	strb	r1, [r3, #0]
		if (++FLAG_CurrentTimerStates>2) {
 80023dc:	4b21      	ldr	r3, [pc, #132]	@ (8002464 <KeyHandeler_PumpView+0xa8>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	bf98      	it	ls
 80023e8:	461a      	movls	r2, r3
 80023ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002464 <KeyHandeler_PumpView+0xa8>)
 80023ec:	701a      	strb	r2, [r3, #0]
			FLAG_CurrentTimerStates=0;
		}
		HAL_Delay(200);
 80023ee:	20c8      	movs	r0, #200	@ 0xc8
 80023f0:	f001 faf4 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY2=0;
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <KeyHandeler_PumpView+0xa0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e00d      	b.n	8002418 <KeyHandeler_PumpView+0x5c>
		PUMP_PWM=PUMP_PWM+10;
 80023fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002468 <KeyHandeler_PumpView+0xac>)
 80023fe:	8813      	ldrh	r3, [r2, #0]
 8002400:	330a      	adds	r3, #10
 8002402:	b29b      	uxth	r3, r3
 8002404:	8013      	strh	r3, [r2, #0]
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PUMP_PWM);
 8002406:	4a19      	ldr	r2, [pc, #100]	@ (800246c <KeyHandeler_PumpView+0xb0>)
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_Delay(200);
 800240c:	20c8      	movs	r0, #200	@ 0xc8
 800240e:	f001 fae5 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY0=0;
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <KeyHandeler_PumpView+0x98>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
	if (FLAG_SentKEY3) {
		CurrentView=V_INDEX;
		HAL_Delay(200);
		FLAG_SentKEY3=0;
	}
}
 8002418:	bd08      	pop	{r3, pc}
		PUMP_PWM=PUMP_PWM-10;
 800241a:	4a13      	ldr	r2, [pc, #76]	@ (8002468 <KeyHandeler_PumpView+0xac>)
 800241c:	8813      	ldrh	r3, [r2, #0]
 800241e:	3b0a      	subs	r3, #10
 8002420:	b29b      	uxth	r3, r3
 8002422:	8013      	strh	r3, [r2, #0]
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PUMP_PWM);
 8002424:	4a11      	ldr	r2, [pc, #68]	@ (800246c <KeyHandeler_PumpView+0xb0>)
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_Delay(200);
 800242a:	20c8      	movs	r0, #200	@ 0xc8
 800242c:	f001 fad6 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY1=0;
 8002430:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <KeyHandeler_PumpView+0x9c>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	e7ef      	b.n	8002418 <KeyHandeler_PumpView+0x5c>
	if (FLAG_SentKEY3) {
 8002438:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <KeyHandeler_PumpView+0xb4>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0eb      	beq.n	8002418 <KeyHandeler_PumpView+0x5c>
		CurrentView=V_INDEX;
 8002440:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <KeyHandeler_PumpView+0xa4>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 8002446:	20c8      	movs	r0, #200	@ 0xc8
 8002448:	f001 fac8 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY3=0;
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <KeyHandeler_PumpView+0xb4>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
}
 8002452:	e7e1      	b.n	8002418 <KeyHandeler_PumpView+0x5c>
 8002454:	20000305 	.word	0x20000305
 8002458:	20000304 	.word	0x20000304
 800245c:	20000303 	.word	0x20000303
 8002460:	200000b8 	.word	0x200000b8
 8002464:	20000093 	.word	0x20000093
 8002468:	200000f2 	.word	0x200000f2
 800246c:	2000051c 	.word	0x2000051c
 8002470:	20000302 	.word	0x20000302

08002474 <KeyHandeler_BuzzerView>:
void KeyHandeler_BuzzerView(){
 8002474:	b510      	push	{r4, lr}
	if (FLAG_SentKEY0) {
 8002476:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <KeyHandeler_BuzzerView+0x94>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b9bb      	cbnz	r3, 80024ac <KeyHandeler_BuzzerView+0x38>
		buzzer.frequency=buzzer.frequency+10;
		Buzzer_SetFrequency(&buzzer, buzzer.frequency);
		HAL_Delay(200);
		FLAG_SentKEY0=0;
	}else
	if (FLAG_SentKEY1) {
 800247c:	4b23      	ldr	r3, [pc, #140]	@ (800250c <KeyHandeler_BuzzerView+0x98>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
 8002484:	b9fb      	cbnz	r3, 80024c6 <KeyHandeler_BuzzerView+0x52>
		buzzer.frequency=buzzer.frequency-10;
		Buzzer_SetFrequency(&buzzer, buzzer.frequency);
		HAL_Delay(200);
		FLAG_SentKEY1=0;
	}else
	if (FLAG_SentKEY2) {
 8002486:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <KeyHandeler_BuzzerView+0x9c>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	b37b      	cbz	r3, 80024ec <KeyHandeler_BuzzerView+0x78>
		if (FLAG_MUTE) {
 800248c:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <KeyHandeler_BuzzerView+0xa0>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	b333      	cbz	r3, 80024e0 <KeyHandeler_BuzzerView+0x6c>
			Buzzer_SetVolume(&buzzer, 36);
 8002492:	2124      	movs	r1, #36	@ 0x24
 8002494:	4820      	ldr	r0, [pc, #128]	@ (8002518 <KeyHandeler_BuzzerView+0xa4>)
 8002496:	f7ff f925 	bl	80016e4 <Buzzer_SetVolume>
			FLAG_MUTE=0;
 800249a:	4b1e      	ldr	r3, [pc, #120]	@ (8002514 <KeyHandeler_BuzzerView+0xa0>)
 800249c:	701c      	strb	r4, [r3, #0]
		}else {
			Buzzer_SetVolume(&buzzer, 0);
			FLAG_MUTE=1;
		}
		HAL_Delay(200);
 800249e:	20c8      	movs	r0, #200	@ 0xc8
 80024a0:	f001 fa9c 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY2=0;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <KeyHandeler_BuzzerView+0x9c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e00b      	b.n	80024c4 <KeyHandeler_BuzzerView+0x50>
		buzzer.frequency=buzzer.frequency+10;
 80024ac:	481a      	ldr	r0, [pc, #104]	@ (8002518 <KeyHandeler_BuzzerView+0xa4>)
 80024ae:	6881      	ldr	r1, [r0, #8]
 80024b0:	310a      	adds	r1, #10
 80024b2:	6081      	str	r1, [r0, #8]
		Buzzer_SetFrequency(&buzzer, buzzer.frequency);
 80024b4:	f7ff f90a 	bl	80016cc <Buzzer_SetFrequency>
		HAL_Delay(200);
 80024b8:	20c8      	movs	r0, #200	@ 0xc8
 80024ba:	f001 fa8f 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY0=0;
 80024be:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <KeyHandeler_BuzzerView+0x94>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
	if (FLAG_SentKEY3) {
		CurrentView=V_INDEX;
		HAL_Delay(200);
		FLAG_SentKEY3=0;
	}
}
 80024c4:	bd10      	pop	{r4, pc}
		buzzer.frequency=buzzer.frequency-10;
 80024c6:	4814      	ldr	r0, [pc, #80]	@ (8002518 <KeyHandeler_BuzzerView+0xa4>)
 80024c8:	6881      	ldr	r1, [r0, #8]
 80024ca:	390a      	subs	r1, #10
 80024cc:	6081      	str	r1, [r0, #8]
		Buzzer_SetFrequency(&buzzer, buzzer.frequency);
 80024ce:	f7ff f8fd 	bl	80016cc <Buzzer_SetFrequency>
		HAL_Delay(200);
 80024d2:	20c8      	movs	r0, #200	@ 0xc8
 80024d4:	f001 fa82 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY1=0;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <KeyHandeler_BuzzerView+0x98>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e7f1      	b.n	80024c4 <KeyHandeler_BuzzerView+0x50>
			Buzzer_SetVolume(&buzzer, 0);
 80024e0:	2100      	movs	r1, #0
 80024e2:	480d      	ldr	r0, [pc, #52]	@ (8002518 <KeyHandeler_BuzzerView+0xa4>)
 80024e4:	f7ff f8fe 	bl	80016e4 <Buzzer_SetVolume>
 80024e8:	2401      	movs	r4, #1
 80024ea:	e7d6      	b.n	800249a <KeyHandeler_BuzzerView+0x26>
	if (FLAG_SentKEY3) {
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <KeyHandeler_BuzzerView+0xa8>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0e7      	beq.n	80024c4 <KeyHandeler_BuzzerView+0x50>
		CurrentView=V_INDEX;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <KeyHandeler_BuzzerView+0xac>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 80024fa:	20c8      	movs	r0, #200	@ 0xc8
 80024fc:	f001 fa6e 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY3=0;
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <KeyHandeler_BuzzerView+0xa8>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
}
 8002506:	e7dd      	b.n	80024c4 <KeyHandeler_BuzzerView+0x50>
 8002508:	20000305 	.word	0x20000305
 800250c:	20000304 	.word	0x20000304
 8002510:	20000303 	.word	0x20000303
 8002514:	200000f0 	.word	0x200000f0
 8002518:	200000bc 	.word	0x200000bc
 800251c:	20000302 	.word	0x20000302
 8002520:	200000b8 	.word	0x200000b8

08002524 <KeyHandeler_ConfigView>:
void KeyHandeler_ConfigView(){
 8002524:	b508      	push	{r3, lr}
	if (FLAG_SentKEY0) {
 8002526:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <KeyHandeler_ConfigView+0xa4>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b193      	cbz	r3, 8002552 <KeyHandeler_ConfigView+0x2e>
		if (++ALARM_Time.seconds>60) {
 800252c:	4b27      	ldr	r3, [pc, #156]	@ (80025cc <KeyHandeler_ConfigView+0xa8>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	3301      	adds	r3, #1
			ALARM_Time.seconds=0;
 8002532:	2b3d      	cmp	r3, #61	@ 0x3d
 8002534:	bf28      	it	cs
 8002536:	2300      	movcs	r3, #0
 8002538:	4824      	ldr	r0, [pc, #144]	@ (80025cc <KeyHandeler_ConfigView+0xa8>)
 800253a:	6083      	str	r3, [r0, #8]
		}
		ALARM_Time_Second=convertTimeToSeconds(&ALARM_Time);
 800253c:	f7ff f92e 	bl	800179c <convertTimeToSeconds>
 8002540:	4b23      	ldr	r3, [pc, #140]	@ (80025d0 <KeyHandeler_ConfigView+0xac>)
 8002542:	6018      	str	r0, [r3, #0]
		HAL_Delay(200);
 8002544:	20c8      	movs	r0, #200	@ 0xc8
 8002546:	f001 fa49 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY0=0;
 800254a:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <KeyHandeler_ConfigView+0xa4>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
		CurrentView=V_PUMP;
		HAL_Delay(200);
		FLAG_SentKEY3=0;
	}

}
 8002550:	bd08      	pop	{r3, pc}
	if (FLAG_SentKEY1) {
 8002552:	4b20      	ldr	r3, [pc, #128]	@ (80025d4 <KeyHandeler_ConfigView+0xb0>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b193      	cbz	r3, 800257e <KeyHandeler_ConfigView+0x5a>
		if (++ALARM_Time.minutes>60) {
 8002558:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <KeyHandeler_ConfigView+0xa8>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	3301      	adds	r3, #1
			ALARM_Time.minutes=0;
 800255e:	2b3d      	cmp	r3, #61	@ 0x3d
 8002560:	bf28      	it	cs
 8002562:	2300      	movcs	r3, #0
 8002564:	4819      	ldr	r0, [pc, #100]	@ (80025cc <KeyHandeler_ConfigView+0xa8>)
 8002566:	6043      	str	r3, [r0, #4]
		ALARM_Time_Second=convertTimeToSeconds(&ALARM_Time);
 8002568:	f7ff f918 	bl	800179c <convertTimeToSeconds>
 800256c:	4b18      	ldr	r3, [pc, #96]	@ (80025d0 <KeyHandeler_ConfigView+0xac>)
 800256e:	6018      	str	r0, [r3, #0]
		HAL_Delay(200);
 8002570:	20c8      	movs	r0, #200	@ 0xc8
 8002572:	f001 fa33 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY1=0;
 8002576:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <KeyHandeler_ConfigView+0xb0>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e7e8      	b.n	8002550 <KeyHandeler_ConfigView+0x2c>
	if (FLAG_SentKEY2) {
 800257e:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <KeyHandeler_ConfigView+0xb4>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b193      	cbz	r3, 80025aa <KeyHandeler_ConfigView+0x86>
		if (++ALARM_Time.hours>24) {
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <KeyHandeler_ConfigView+0xa8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
			ALARM_Time.hours=0;
 800258a:	2b19      	cmp	r3, #25
 800258c:	bf28      	it	cs
 800258e:	2300      	movcs	r3, #0
 8002590:	480e      	ldr	r0, [pc, #56]	@ (80025cc <KeyHandeler_ConfigView+0xa8>)
 8002592:	6003      	str	r3, [r0, #0]
		ALARM_Time_Second=convertTimeToSeconds(&ALARM_Time);
 8002594:	f7ff f902 	bl	800179c <convertTimeToSeconds>
 8002598:	4b0d      	ldr	r3, [pc, #52]	@ (80025d0 <KeyHandeler_ConfigView+0xac>)
 800259a:	6018      	str	r0, [r3, #0]
		HAL_Delay(200);
 800259c:	20c8      	movs	r0, #200	@ 0xc8
 800259e:	f001 fa1d 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY2=0;
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <KeyHandeler_ConfigView+0xb4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e7d2      	b.n	8002550 <KeyHandeler_ConfigView+0x2c>
	if (FLAG_SentKEY3) {
 80025aa:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <KeyHandeler_ConfigView+0xb8>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ce      	beq.n	8002550 <KeyHandeler_ConfigView+0x2c>
		CurrentView=V_PUMP;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <KeyHandeler_ConfigView+0xbc>)
 80025b4:	2204      	movs	r2, #4
 80025b6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 80025b8:	20c8      	movs	r0, #200	@ 0xc8
 80025ba:	f001 fa0f 	bl	80039dc <HAL_Delay>
		FLAG_SentKEY3=0;
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <KeyHandeler_ConfigView+0xb8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
}
 80025c4:	e7c4      	b.n	8002550 <KeyHandeler_ConfigView+0x2c>
 80025c6:	bf00      	nop
 80025c8:	20000305 	.word	0x20000305
 80025cc:	2000030c 	.word	0x2000030c
 80025d0:	20000308 	.word	0x20000308
 80025d4:	20000304 	.word	0x20000304
 80025d8:	20000303 	.word	0x20000303
 80025dc:	20000302 	.word	0x20000302
 80025e0:	200000b8 	.word	0x200000b8

080025e4 <KeyHandeler>:





void KeyHandeler(uint8_t SWView) {
 80025e4:	b508      	push	{r3, lr}
	if (SWView == V_WELCOME) {
 80025e6:	3801      	subs	r0, #1
 80025e8:	2805      	cmp	r0, #5
 80025ea:	d806      	bhi.n	80025fa <KeyHandeler+0x16>
 80025ec:	e8df f000 	tbb	[pc, r0]
 80025f0:	0c090603 	.word	0x0c090603
 80025f4:	120f      	.short	0x120f
	    KeyHandeler_WelcomeView();
	} else if (SWView == V_INDEX) {
	    KeyHandeler_IndexView();
 80025f6:	f7ff fdbd 	bl	8002174 <KeyHandeler_IndexView>
	} else if (SWView == V_BUZZER) {
	    KeyHandeler_BuzzerView();
	} else if (SWView == V_CONFIG) {
	    KeyHandeler_ConfigView();
	}
}
 80025fa:	bd08      	pop	{r3, pc}
	    KeyHandeler_NetWorkView();
 80025fc:	f7ff fdfa 	bl	80021f4 <KeyHandeler_NetWorkView>
 8002600:	e7fb      	b.n	80025fa <KeyHandeler+0x16>
	    KeyHandeler_SensorView();
 8002602:	f7ff fe43 	bl	800228c <KeyHandeler_SensorView>
 8002606:	e7f8      	b.n	80025fa <KeyHandeler+0x16>
	    KeyHandeler_PumpView();
 8002608:	f7ff fed8 	bl	80023bc <KeyHandeler_PumpView>
 800260c:	e7f5      	b.n	80025fa <KeyHandeler+0x16>
	    KeyHandeler_BuzzerView();
 800260e:	f7ff ff31 	bl	8002474 <KeyHandeler_BuzzerView>
 8002612:	e7f2      	b.n	80025fa <KeyHandeler+0x16>
	    KeyHandeler_ConfigView();
 8002614:	f7ff ff86 	bl	8002524 <KeyHandeler_ConfigView>
}
 8002618:	e7ef      	b.n	80025fa <KeyHandeler+0x16>

0800261a <ShowView>:

void ShowView(uint8_t SWView) {
 800261a:	b508      	push	{r3, lr}
    switch (SWView) {
 800261c:	2806      	cmp	r0, #6
 800261e:	d807      	bhi.n	8002630 <ShowView+0x16>
 8002620:	e8df f000 	tbb	[pc, r0]
 8002624:	0d0a0704 	.word	0x0d0a0704
 8002628:	1310      	.short	0x1310
 800262a:	16          	.byte	0x16
 800262b:	00          	.byte	0x00
        case V_WELCOME:
            ssd1306_WelcomeView();
 800262c:	f7ff f8f2 	bl	8001814 <ssd1306_WelcomeView>

        default:
            // Handle invalid view case
            break;
    }
}
 8002630:	bd08      	pop	{r3, pc}
            ssd1306_IndexView();
 8002632:	f7ff f933 	bl	800189c <ssd1306_IndexView>
            break;
 8002636:	e7fb      	b.n	8002630 <ShowView+0x16>
            ssd1306_NetWorkView();
 8002638:	f7ff f9d8 	bl	80019ec <ssd1306_NetWorkView>
            break;
 800263c:	e7f8      	b.n	8002630 <ShowView+0x16>
            ssd1306_SensorView();
 800263e:	f7ff fa3d 	bl	8001abc <ssd1306_SensorView>
            break;
 8002642:	e7f5      	b.n	8002630 <ShowView+0x16>
            ssd1306_PumpView();
 8002644:	f7ff fb6a 	bl	8001d1c <ssd1306_PumpView>
            break;
 8002648:	e7f2      	b.n	8002630 <ShowView+0x16>
            ssd1306_BuzzerView();
 800264a:	f7ff fc31 	bl	8001eb0 <ssd1306_BuzzerView>
            break;
 800264e:	e7ef      	b.n	8002630 <ShowView+0x16>
		   ssd1306_ConfigView();
 8002650:	f7ff fcbe 	bl	8001fd0 <ssd1306_ConfigView>
}
 8002654:	e7ec      	b.n	8002630 <ShowView+0x16>

08002656 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002656:	b500      	push	{lr}
 8002658:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265a:	2300      	movs	r3, #0
 800265c:	930c      	str	r3, [sp, #48]	@ 0x30
 800265e:	930d      	str	r3, [sp, #52]	@ 0x34
 8002660:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002662:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002664:	9305      	str	r3, [sp, #20]
 8002666:	9306      	str	r3, [sp, #24]
 8002668:	9307      	str	r3, [sp, #28]
 800266a:	9308      	str	r3, [sp, #32]
 800266c:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	9302      	str	r3, [sp, #8]
 8002672:	9303      	str	r3, [sp, #12]
 8002674:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002676:	2201      	movs	r2, #1
 8002678:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800267a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800267e:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002680:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002682:	2202      	movs	r2, #2
 8002684:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002686:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002688:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800268c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800268e:	a80a      	add	r0, sp, #40	@ 0x28
 8002690:	f002 fb7e 	bl	8004d90 <HAL_RCC_OscConfig>
 8002694:	b9c8      	cbnz	r0, 80026ca <SystemClock_Config+0x74>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002696:	230f      	movs	r3, #15
 8002698:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800269a:	2102      	movs	r1, #2
 800269c:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800269e:	2300      	movs	r3, #0
 80026a0:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026a6:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026a8:	9309      	str	r3, [sp, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026aa:	a805      	add	r0, sp, #20
 80026ac:	f002 fdb0 	bl	8005210 <HAL_RCC_ClockConfig>
 80026b0:	b968      	cbnz	r0, 80026ce <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026b2:	2302      	movs	r3, #2
 80026b4:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ba:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026bc:	a801      	add	r0, sp, #4
 80026be:	f002 fe7f 	bl	80053c0 <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	b930      	cbnz	r0, 80026d2 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
}
 80026c4:	b015      	add	sp, #84	@ 0x54
 80026c6:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 80026ca:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026cc:	e7fe      	b.n	80026cc <SystemClock_Config+0x76>
 80026ce:	b672      	cpsid	i
 80026d0:	e7fe      	b.n	80026d0 <SystemClock_Config+0x7a>
 80026d2:	b672      	cpsid	i
 80026d4:	e7fe      	b.n	80026d4 <SystemClock_Config+0x7e>
	...

080026d8 <main>:
{
 80026d8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80026dc:	f2ad 5d4c 	subw	sp, sp, #1356	@ 0x54c
  HAL_Init();
 80026e0:	f001 f958 	bl	8003994 <HAL_Init>
  SystemClock_Config();
 80026e4:	f7ff ffb7 	bl	8002656 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	2400      	movs	r4, #0
 80026ea:	9458      	str	r4, [sp, #352]	@ 0x160
 80026ec:	9459      	str	r4, [sp, #356]	@ 0x164
 80026ee:	945a      	str	r4, [sp, #360]	@ 0x168
 80026f0:	945b      	str	r4, [sp, #364]	@ 0x16c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	4dab      	ldr	r5, [pc, #684]	@ (80029a0 <main+0x2c8>)
 80026f4:	69ab      	ldr	r3, [r5, #24]
 80026f6:	f043 0310 	orr.w	r3, r3, #16
 80026fa:	61ab      	str	r3, [r5, #24]
 80026fc:	69ab      	ldr	r3, [r5, #24]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002704:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002706:	69ab      	ldr	r3, [r5, #24]
 8002708:	f043 0320 	orr.w	r3, r3, #32
 800270c:	61ab      	str	r3, [r5, #24]
 800270e:	69ab      	ldr	r3, [r5, #24]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	9348      	str	r3, [sp, #288]	@ 0x120
 8002716:	9b48      	ldr	r3, [sp, #288]	@ 0x120
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	69ab      	ldr	r3, [r5, #24]
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	61ab      	str	r3, [r5, #24]
 8002720:	69ab      	ldr	r3, [r5, #24]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	9349      	str	r3, [sp, #292]	@ 0x124
 8002728:	9b49      	ldr	r3, [sp, #292]	@ 0x124
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	69ab      	ldr	r3, [r5, #24]
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	61ab      	str	r3, [r5, #24]
 8002732:	69ab      	ldr	r3, [r5, #24]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	934a      	str	r3, [sp, #296]	@ 0x128
 800273a:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800273c:	4f99      	ldr	r7, [pc, #612]	@ (80029a4 <main+0x2cc>)
 800273e:	4622      	mov	r2, r4
 8002740:	2102      	movs	r1, #2
 8002742:	4638      	mov	r0, r7
 8002744:	f002 f80e 	bl	8004764 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002748:	2601      	movs	r6, #1
 800274a:	9658      	str	r6, [sp, #352]	@ 0x160
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274c:	9459      	str	r4, [sp, #356]	@ 0x164
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274e:	965a      	str	r6, [sp, #360]	@ 0x168
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002750:	a958      	add	r1, sp, #352	@ 0x160
 8002752:	4638      	mov	r0, r7
 8002754:	f001 fec0 	bl	80044d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002758:	f04f 0802 	mov.w	r8, #2
 800275c:	f8cd 8160 	str.w	r8, [sp, #352]	@ 0x160
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002760:	9659      	str	r6, [sp, #356]	@ 0x164
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	945a      	str	r4, [sp, #360]	@ 0x168
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	f8cd 816c 	str.w	r8, [sp, #364]	@ 0x16c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	a958      	add	r1, sp, #352	@ 0x160
 800276a:	4638      	mov	r0, r7
 800276c:	f001 feb4 	bl	80044d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002770:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002774:	9358      	str	r3, [sp, #352]	@ 0x160
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002776:	4b8c      	ldr	r3, [pc, #560]	@ (80029a8 <main+0x2d0>)
 8002778:	9359      	str	r3, [sp, #356]	@ 0x164
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800277a:	f8cd 8168 	str.w	r8, [sp, #360]	@ 0x168
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277e:	a958      	add	r1, sp, #352	@ 0x160
 8002780:	4638      	mov	r0, r7
 8002782:	f001 fea9 	bl	80044d8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002786:	4622      	mov	r2, r4
 8002788:	4631      	mov	r1, r6
 800278a:	2028      	movs	r0, #40	@ 0x28
 800278c:	f001 fcba 	bl	8004104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002790:	2028      	movs	r0, #40	@ 0x28
 8002792:	f001 fced 	bl	8004170 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002796:	696b      	ldr	r3, [r5, #20]
 8002798:	4333      	orrs	r3, r6
 800279a:	616b      	str	r3, [r5, #20]
 800279c:	696b      	ldr	r3, [r5, #20]
 800279e:	4033      	ands	r3, r6
 80027a0:	9346      	str	r3, [sp, #280]	@ 0x118
 80027a2:	9b46      	ldr	r3, [sp, #280]	@ 0x118
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027a4:	4622      	mov	r2, r4
 80027a6:	4621      	mov	r1, r4
 80027a8:	200b      	movs	r0, #11
 80027aa:	f001 fcab 	bl	8004104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027ae:	200b      	movs	r0, #11
 80027b0:	f001 fcde 	bl	8004170 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80027b4:	4622      	mov	r2, r4
 80027b6:	4621      	mov	r1, r4
 80027b8:	200c      	movs	r0, #12
 80027ba:	f001 fca3 	bl	8004104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80027be:	200c      	movs	r0, #12
 80027c0:	f001 fcd6 	bl	8004170 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80027c4:	4622      	mov	r2, r4
 80027c6:	4621      	mov	r1, r4
 80027c8:	200d      	movs	r0, #13
 80027ca:	f001 fc9b 	bl	8004104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80027ce:	200d      	movs	r0, #13
 80027d0:	f001 fcce 	bl	8004170 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80027d4:	9458      	str	r4, [sp, #352]	@ 0x160
 80027d6:	9459      	str	r4, [sp, #356]	@ 0x164
 80027d8:	945a      	str	r4, [sp, #360]	@ 0x168
  hadc1.Instance = ADC1;
 80027da:	4874      	ldr	r0, [pc, #464]	@ (80029ac <main+0x2d4>)
 80027dc:	4b74      	ldr	r3, [pc, #464]	@ (80029b0 <main+0x2d8>)
 80027de:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027e4:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027e6:	7306      	strb	r6, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027e8:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 80027ea:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 80027ee:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027f0:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 5;
 80027f2:	2305      	movs	r3, #5
 80027f4:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027f6:	f001 fbed 	bl	8003fd4 <HAL_ADC_Init>
 80027fa:	2800      	cmp	r0, #0
 80027fc:	f040 824a 	bne.w	8002c94 <main+0x5bc>
  sConfig.Channel = ADC_CHANNEL_4;
 8002800:	2304      	movs	r3, #4
 8002802:	9358      	str	r3, [sp, #352]	@ 0x160
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002804:	2301      	movs	r3, #1
 8002806:	9359      	str	r3, [sp, #356]	@ 0x164
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002808:	2307      	movs	r3, #7
 800280a:	935a      	str	r3, [sp, #360]	@ 0x168
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800280c:	a958      	add	r1, sp, #352	@ 0x160
 800280e:	4867      	ldr	r0, [pc, #412]	@ (80029ac <main+0x2d4>)
 8002810:	f001 f9b8 	bl	8003b84 <HAL_ADC_ConfigChannel>
 8002814:	2800      	cmp	r0, #0
 8002816:	f040 823f 	bne.w	8002c98 <main+0x5c0>
  sConfig.Channel = ADC_CHANNEL_5;
 800281a:	2305      	movs	r3, #5
 800281c:	9358      	str	r3, [sp, #352]	@ 0x160
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800281e:	2302      	movs	r3, #2
 8002820:	9359      	str	r3, [sp, #356]	@ 0x164
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002822:	a958      	add	r1, sp, #352	@ 0x160
 8002824:	4861      	ldr	r0, [pc, #388]	@ (80029ac <main+0x2d4>)
 8002826:	f001 f9ad 	bl	8003b84 <HAL_ADC_ConfigChannel>
 800282a:	2800      	cmp	r0, #0
 800282c:	f040 8236 	bne.w	8002c9c <main+0x5c4>
  sConfig.Channel = ADC_CHANNEL_1;
 8002830:	2301      	movs	r3, #1
 8002832:	9358      	str	r3, [sp, #352]	@ 0x160
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002834:	2303      	movs	r3, #3
 8002836:	9359      	str	r3, [sp, #356]	@ 0x164
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002838:	a958      	add	r1, sp, #352	@ 0x160
 800283a:	485c      	ldr	r0, [pc, #368]	@ (80029ac <main+0x2d4>)
 800283c:	f001 f9a2 	bl	8003b84 <HAL_ADC_ConfigChannel>
 8002840:	2800      	cmp	r0, #0
 8002842:	f040 822d 	bne.w	8002ca0 <main+0x5c8>
  sConfig.Channel = ADC_CHANNEL_2;
 8002846:	2302      	movs	r3, #2
 8002848:	9358      	str	r3, [sp, #352]	@ 0x160
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800284a:	2304      	movs	r3, #4
 800284c:	9359      	str	r3, [sp, #356]	@ 0x164
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800284e:	a958      	add	r1, sp, #352	@ 0x160
 8002850:	4856      	ldr	r0, [pc, #344]	@ (80029ac <main+0x2d4>)
 8002852:	f001 f997 	bl	8003b84 <HAL_ADC_ConfigChannel>
 8002856:	2800      	cmp	r0, #0
 8002858:	f040 8224 	bne.w	8002ca4 <main+0x5cc>
  sConfig.Channel = ADC_CHANNEL_3;
 800285c:	2303      	movs	r3, #3
 800285e:	9358      	str	r3, [sp, #352]	@ 0x160
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002860:	2305      	movs	r3, #5
 8002862:	9359      	str	r3, [sp, #356]	@ 0x164
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002864:	a958      	add	r1, sp, #352	@ 0x160
 8002866:	4851      	ldr	r0, [pc, #324]	@ (80029ac <main+0x2d4>)
 8002868:	f001 f98c 	bl	8003b84 <HAL_ADC_ConfigChannel>
 800286c:	2800      	cmp	r0, #0
 800286e:	f040 8239 	bne.w	8002ce4 <main+0x60c>
  hi2c1.Instance = I2C1;
 8002872:	4850      	ldr	r0, [pc, #320]	@ (80029b4 <main+0x2dc>)
 8002874:	4b50      	ldr	r3, [pc, #320]	@ (80029b8 <main+0x2e0>)
 8002876:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002878:	4b50      	ldr	r3, [pc, #320]	@ (80029bc <main+0x2e4>)
 800287a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800287c:	2300      	movs	r3, #0
 800287e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002880:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002886:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002888:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800288a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800288c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800288e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002890:	f002 f906 	bl	8004aa0 <HAL_I2C_Init>
 8002894:	2800      	cmp	r0, #0
 8002896:	f040 8227 	bne.w	8002ce8 <main+0x610>
  huart1.Instance = USART1;
 800289a:	4849      	ldr	r0, [pc, #292]	@ (80029c0 <main+0x2e8>)
 800289c:	4b49      	ldr	r3, [pc, #292]	@ (80029c4 <main+0x2ec>)
 800289e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80028a0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80028a4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028a6:	2300      	movs	r3, #0
 80028a8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028aa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ac:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ae:	220c      	movs	r2, #12
 80028b0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028b6:	f003 fb99 	bl	8005fec <HAL_UART_Init>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	f040 8216 	bne.w	8002cec <main+0x614>
  huart3.Instance = USART3;
 80028c0:	4841      	ldr	r0, [pc, #260]	@ (80029c8 <main+0x2f0>)
 80028c2:	4b42      	ldr	r3, [pc, #264]	@ (80029cc <main+0x2f4>)
 80028c4:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80028c6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80028ca:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028cc:	2300      	movs	r3, #0
 80028ce:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028d0:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028d2:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028d4:	220c      	movs	r2, #12
 80028d6:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028d8:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028da:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028dc:	f003 fb86 	bl	8005fec <HAL_UART_Init>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	f040 8205 	bne.w	8002cf0 <main+0x618>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028e6:	2400      	movs	r4, #0
 80028e8:	944d      	str	r4, [sp, #308]	@ 0x134
 80028ea:	944e      	str	r4, [sp, #312]	@ 0x138
 80028ec:	944f      	str	r4, [sp, #316]	@ 0x13c
 80028ee:	9450      	str	r4, [sp, #320]	@ 0x140
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f0:	944b      	str	r4, [sp, #300]	@ 0x12c
 80028f2:	944c      	str	r4, [sp, #304]	@ 0x130
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028f4:	9451      	str	r4, [sp, #324]	@ 0x144
 80028f6:	9452      	str	r4, [sp, #328]	@ 0x148
 80028f8:	9453      	str	r4, [sp, #332]	@ 0x14c
 80028fa:	9454      	str	r4, [sp, #336]	@ 0x150
 80028fc:	9455      	str	r4, [sp, #340]	@ 0x154
 80028fe:	9456      	str	r4, [sp, #344]	@ 0x158
 8002900:	9457      	str	r4, [sp, #348]	@ 0x15c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002902:	2220      	movs	r2, #32
 8002904:	4621      	mov	r1, r4
 8002906:	a858      	add	r0, sp, #352	@ 0x160
 8002908:	f004 fe81 	bl	800760e <memset>
  htim1.Instance = TIM1;
 800290c:	4830      	ldr	r0, [pc, #192]	@ (80029d0 <main+0x2f8>)
 800290e:	4b31      	ldr	r3, [pc, #196]	@ (80029d4 <main+0x2fc>)
 8002910:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8002912:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002914:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 8002916:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002918:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800291a:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800291c:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800291e:	f002 ffcb 	bl	80058b8 <HAL_TIM_Base_Init>
 8002922:	2800      	cmp	r0, #0
 8002924:	f040 81e6 	bne.w	8002cf4 <main+0x61c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800292c:	934d      	str	r3, [sp, #308]	@ 0x134
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800292e:	a94d      	add	r1, sp, #308	@ 0x134
 8002930:	4827      	ldr	r0, [pc, #156]	@ (80029d0 <main+0x2f8>)
 8002932:	f003 f91c 	bl	8005b6e <HAL_TIM_ConfigClockSource>
 8002936:	2800      	cmp	r0, #0
 8002938:	f040 81de 	bne.w	8002cf8 <main+0x620>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800293c:	4824      	ldr	r0, [pc, #144]	@ (80029d0 <main+0x2f8>)
 800293e:	f003 f813 	bl	8005968 <HAL_TIM_PWM_Init>
 8002942:	2800      	cmp	r0, #0
 8002944:	f040 81da 	bne.w	8002cfc <main+0x624>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	934b      	str	r3, [sp, #300]	@ 0x12c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294c:	934c      	str	r3, [sp, #304]	@ 0x130
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800294e:	a94b      	add	r1, sp, #300	@ 0x12c
 8002950:	481f      	ldr	r0, [pc, #124]	@ (80029d0 <main+0x2f8>)
 8002952:	f003 fa35 	bl	8005dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002956:	2800      	cmp	r0, #0
 8002958:	f040 81d2 	bne.w	8002d00 <main+0x628>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800295c:	2370      	movs	r3, #112	@ 0x70
 800295e:	9351      	str	r3, [sp, #324]	@ 0x144
  sConfigOC.Pulse = 1;
 8002960:	2301      	movs	r3, #1
 8002962:	9352      	str	r3, [sp, #328]	@ 0x148
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002964:	2200      	movs	r2, #0
 8002966:	9253      	str	r2, [sp, #332]	@ 0x14c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002968:	9254      	str	r2, [sp, #336]	@ 0x150
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800296a:	9255      	str	r2, [sp, #340]	@ 0x154
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800296c:	9256      	str	r2, [sp, #344]	@ 0x158
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800296e:	9257      	str	r2, [sp, #348]	@ 0x15c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002970:	a951      	add	r1, sp, #324	@ 0x144
 8002972:	4817      	ldr	r0, [pc, #92]	@ (80029d0 <main+0x2f8>)
 8002974:	f003 f881 	bl	8005a7a <HAL_TIM_PWM_ConfigChannel>
 8002978:	2800      	cmp	r0, #0
 800297a:	f040 81c3 	bne.w	8002d04 <main+0x62c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800297e:	2360      	movs	r3, #96	@ 0x60
 8002980:	9351      	str	r3, [sp, #324]	@ 0x144
  sConfigOC.Pulse = 70;
 8002982:	2346      	movs	r3, #70	@ 0x46
 8002984:	9352      	str	r3, [sp, #328]	@ 0x148
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002986:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800298a:	9356      	str	r3, [sp, #344]	@ 0x158
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800298c:	2204      	movs	r2, #4
 800298e:	a951      	add	r1, sp, #324	@ 0x144
 8002990:	480f      	ldr	r0, [pc, #60]	@ (80029d0 <main+0x2f8>)
 8002992:	f003 f872 	bl	8005a7a <HAL_TIM_PWM_ConfigChannel>
 8002996:	2800      	cmp	r0, #0
 8002998:	f040 81b6 	bne.w	8002d08 <main+0x630>
 800299c:	e01c      	b.n	80029d8 <main+0x300>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40010c00 	.word	0x40010c00
 80029a8:	10110000 	.word	0x10110000
 80029ac:	2000068c 	.word	0x2000068c
 80029b0:	40012400 	.word	0x40012400
 80029b4:	200005f4 	.word	0x200005f4
 80029b8:	40005400 	.word	0x40005400
 80029bc:	00061a80 	.word	0x00061a80
 80029c0:	2000048c 	.word	0x2000048c
 80029c4:	40013800 	.word	0x40013800
 80029c8:	20000444 	.word	0x20000444
 80029cc:	40004800 	.word	0x40004800
 80029d0:	200005ac 	.word	0x200005ac
 80029d4:	40012c00 	.word	0x40012c00
  sConfigOC.Pulse = 1;
 80029d8:	2301      	movs	r3, #1
 80029da:	9352      	str	r3, [sp, #328]	@ 0x148
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	9356      	str	r3, [sp, #344]	@ 0x158
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029e0:	2208      	movs	r2, #8
 80029e2:	a951      	add	r1, sp, #324	@ 0x144
 80029e4:	48b0      	ldr	r0, [pc, #704]	@ (8002ca8 <main+0x5d0>)
 80029e6:	f003 f848 	bl	8005a7a <HAL_TIM_PWM_ConfigChannel>
 80029ea:	2800      	cmp	r0, #0
 80029ec:	f040 818e 	bne.w	8002d0c <main+0x634>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	9358      	str	r3, [sp, #352]	@ 0x160
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029f4:	9359      	str	r3, [sp, #356]	@ 0x164
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029f6:	935a      	str	r3, [sp, #360]	@ 0x168
  sBreakDeadTimeConfig.DeadTime = 0;
 80029f8:	935b      	str	r3, [sp, #364]	@ 0x16c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029fa:	935c      	str	r3, [sp, #368]	@ 0x170
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a00:	925d      	str	r2, [sp, #372]	@ 0x174
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a02:	935f      	str	r3, [sp, #380]	@ 0x17c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a04:	a958      	add	r1, sp, #352	@ 0x160
 8002a06:	48a8      	ldr	r0, [pc, #672]	@ (8002ca8 <main+0x5d0>)
 8002a08:	f003 fa0e 	bl	8005e28 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	f040 817f 	bne.w	8002d10 <main+0x638>
  HAL_TIM_MspPostInit(&htim1);
 8002a12:	48a5      	ldr	r0, [pc, #660]	@ (8002ca8 <main+0x5d0>)
 8002a14:	f000 fd72 	bl	80034fc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9351      	str	r3, [sp, #324]	@ 0x144
 8002a1c:	9352      	str	r3, [sp, #328]	@ 0x148
 8002a1e:	9353      	str	r3, [sp, #332]	@ 0x14c
 8002a20:	9354      	str	r3, [sp, #336]	@ 0x150
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a22:	934d      	str	r3, [sp, #308]	@ 0x134
 8002a24:	934e      	str	r3, [sp, #312]	@ 0x138
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a26:	9358      	str	r3, [sp, #352]	@ 0x160
 8002a28:	9359      	str	r3, [sp, #356]	@ 0x164
 8002a2a:	935a      	str	r3, [sp, #360]	@ 0x168
 8002a2c:	935b      	str	r3, [sp, #364]	@ 0x16c
 8002a2e:	935c      	str	r3, [sp, #368]	@ 0x170
 8002a30:	935d      	str	r3, [sp, #372]	@ 0x174
 8002a32:	935e      	str	r3, [sp, #376]	@ 0x178
  htim3.Instance = TIM3;
 8002a34:	489d      	ldr	r0, [pc, #628]	@ (8002cac <main+0x5d4>)
 8002a36:	4a9e      	ldr	r2, [pc, #632]	@ (8002cb0 <main+0x5d8>)
 8002a38:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8002a3a:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 720;
 8002a3e:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8002a42:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a46:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a48:	f002 ff36 	bl	80058b8 <HAL_TIM_Base_Init>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	f040 8161 	bne.w	8002d14 <main+0x63c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a56:	9351      	str	r3, [sp, #324]	@ 0x144
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a58:	a951      	add	r1, sp, #324	@ 0x144
 8002a5a:	4894      	ldr	r0, [pc, #592]	@ (8002cac <main+0x5d4>)
 8002a5c:	f003 f887 	bl	8005b6e <HAL_TIM_ConfigClockSource>
 8002a60:	2800      	cmp	r0, #0
 8002a62:	f040 8159 	bne.w	8002d18 <main+0x640>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a66:	4891      	ldr	r0, [pc, #580]	@ (8002cac <main+0x5d4>)
 8002a68:	f002 ff7e 	bl	8005968 <HAL_TIM_PWM_Init>
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	f040 8155 	bne.w	8002d1c <main+0x644>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	934d      	str	r3, [sp, #308]	@ 0x134
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a76:	934e      	str	r3, [sp, #312]	@ 0x138
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a78:	a94d      	add	r1, sp, #308	@ 0x134
 8002a7a:	488c      	ldr	r0, [pc, #560]	@ (8002cac <main+0x5d4>)
 8002a7c:	f003 f9a0 	bl	8005dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	f040 814d 	bne.w	8002d20 <main+0x648>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a86:	2360      	movs	r3, #96	@ 0x60
 8002a88:	9358      	str	r3, [sp, #352]	@ 0x160
  sConfigOC.Pulse = 0;
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	9259      	str	r2, [sp, #356]	@ 0x164
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a8e:	925a      	str	r2, [sp, #360]	@ 0x168
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a90:	925c      	str	r2, [sp, #368]	@ 0x170
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a92:	a958      	add	r1, sp, #352	@ 0x160
 8002a94:	4885      	ldr	r0, [pc, #532]	@ (8002cac <main+0x5d4>)
 8002a96:	f002 fff0 	bl	8005a7a <HAL_TIM_PWM_ConfigChannel>
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	f040 8142 	bne.w	8002d24 <main+0x64c>
  HAL_TIM_MspPostInit(&htim3);
 8002aa0:	4882      	ldr	r0, [pc, #520]	@ (8002cac <main+0x5d4>)
 8002aa2:	f000 fd2b 	bl	80034fc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9351      	str	r3, [sp, #324]	@ 0x144
 8002aaa:	9352      	str	r3, [sp, #328]	@ 0x148
 8002aac:	9353      	str	r3, [sp, #332]	@ 0x14c
 8002aae:	9354      	str	r3, [sp, #336]	@ 0x150
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab0:	934d      	str	r3, [sp, #308]	@ 0x134
 8002ab2:	934e      	str	r3, [sp, #312]	@ 0x138
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ab4:	9358      	str	r3, [sp, #352]	@ 0x160
 8002ab6:	9359      	str	r3, [sp, #356]	@ 0x164
 8002ab8:	935a      	str	r3, [sp, #360]	@ 0x168
 8002aba:	935b      	str	r3, [sp, #364]	@ 0x16c
 8002abc:	935c      	str	r3, [sp, #368]	@ 0x170
 8002abe:	935d      	str	r3, [sp, #372]	@ 0x174
 8002ac0:	935e      	str	r3, [sp, #376]	@ 0x178
  htim4.Instance = TIM4;
 8002ac2:	487c      	ldr	r0, [pc, #496]	@ (8002cb4 <main+0x5dc>)
 8002ac4:	4a7c      	ldr	r2, [pc, #496]	@ (8002cb8 <main+0x5e0>)
 8002ac6:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8002ac8:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aca:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 72-1;
 8002acc:	2247      	movs	r2, #71	@ 0x47
 8002ace:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad0:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ad4:	f002 fef0 	bl	80058b8 <HAL_TIM_Base_Init>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	f040 8125 	bne.w	8002d28 <main+0x650>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ae2:	9351      	str	r3, [sp, #324]	@ 0x144
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ae4:	a951      	add	r1, sp, #324	@ 0x144
 8002ae6:	4873      	ldr	r0, [pc, #460]	@ (8002cb4 <main+0x5dc>)
 8002ae8:	f003 f841 	bl	8005b6e <HAL_TIM_ConfigClockSource>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	f040 811d 	bne.w	8002d2c <main+0x654>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002af2:	4870      	ldr	r0, [pc, #448]	@ (8002cb4 <main+0x5dc>)
 8002af4:	f002 ff0c 	bl	8005910 <HAL_TIM_OC_Init>
 8002af8:	2800      	cmp	r0, #0
 8002afa:	f040 8119 	bne.w	8002d30 <main+0x658>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	934d      	str	r3, [sp, #308]	@ 0x134
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b02:	934e      	str	r3, [sp, #312]	@ 0x138
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b04:	a94d      	add	r1, sp, #308	@ 0x134
 8002b06:	486b      	ldr	r0, [pc, #428]	@ (8002cb4 <main+0x5dc>)
 8002b08:	f003 f95a 	bl	8005dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	f040 8111 	bne.w	8002d34 <main+0x65c>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002b12:	2330      	movs	r3, #48	@ 0x30
 8002b14:	9358      	str	r3, [sp, #352]	@ 0x160
  sConfigOC.Pulse = 36;
 8002b16:	2324      	movs	r3, #36	@ 0x24
 8002b18:	9359      	str	r3, [sp, #356]	@ 0x164
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	935a      	str	r3, [sp, #360]	@ 0x168
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b1e:	935c      	str	r3, [sp, #368]	@ 0x170
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b20:	220c      	movs	r2, #12
 8002b22:	a958      	add	r1, sp, #352	@ 0x160
 8002b24:	4863      	ldr	r0, [pc, #396]	@ (8002cb4 <main+0x5dc>)
 8002b26:	f002 ff79 	bl	8005a1c <HAL_TIM_OC_ConfigChannel>
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	f040 8104 	bne.w	8002d38 <main+0x660>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b30:	2300      	movs	r3, #0
 8002b32:	9358      	str	r3, [sp, #352]	@ 0x160
 8002b34:	9359      	str	r3, [sp, #356]	@ 0x164
 8002b36:	935a      	str	r3, [sp, #360]	@ 0x168
 8002b38:	935b      	str	r3, [sp, #364]	@ 0x16c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3a:	9351      	str	r3, [sp, #324]	@ 0x144
 8002b3c:	9352      	str	r3, [sp, #328]	@ 0x148
  htim2.Instance = TIM2;
 8002b3e:	485f      	ldr	r0, [pc, #380]	@ (8002cbc <main+0x5e4>)
 8002b40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b44:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 7200-1;
 8002b46:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002b4a:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 10000-1;
 8002b4e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002b52:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b54:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b56:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b58:	f002 feae 	bl	80058b8 <HAL_TIM_Base_Init>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f040 80ed 	bne.w	8002d3c <main+0x664>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b66:	9358      	str	r3, [sp, #352]	@ 0x160
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b68:	a958      	add	r1, sp, #352	@ 0x160
 8002b6a:	4854      	ldr	r0, [pc, #336]	@ (8002cbc <main+0x5e4>)
 8002b6c:	f002 ffff 	bl	8005b6e <HAL_TIM_ConfigClockSource>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	f040 80e5 	bne.w	8002d40 <main+0x668>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	9351      	str	r3, [sp, #324]	@ 0x144
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7a:	9352      	str	r3, [sp, #328]	@ 0x148
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b7c:	a951      	add	r1, sp, #324	@ 0x144
 8002b7e:	484f      	ldr	r0, [pc, #316]	@ (8002cbc <main+0x5e4>)
 8002b80:	f003 f91e 	bl	8005dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	f040 80dd 	bne.w	8002d44 <main+0x66c>
  HAL_ADC_Start(&hadc1);
 8002b8a:	4d4d      	ldr	r5, [pc, #308]	@ (8002cc0 <main+0x5e8>)
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f001 f8e9 	bl	8003d64 <HAL_ADC_Start>
  ssd1306_Init();
 8002b92:	f000 fa9f 	bl	80030d4 <ssd1306_Init>
  ssd1306_WelcomeView();
 8002b96:	f7fe fe3d 	bl	8001814 <ssd1306_WelcomeView>
  HAL_TIM_Base_Start_IT(&htim2);
 8002b9a:	4848      	ldr	r0, [pc, #288]	@ (8002cbc <main+0x5e4>)
 8002b9c:	f002 fd46 	bl	800562c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8002ba0:	4c41      	ldr	r4, [pc, #260]	@ (8002ca8 <main+0x5d0>)
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f002 fd14 	bl	80055d0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4620      	mov	r0, r4
 8002bac:	f003 f8a4 	bl	8005cf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f003 f8a0 	bl	8005cf8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8002bb8:	4c3c      	ldr	r4, [pc, #240]	@ (8002cac <main+0x5d4>)
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f002 fd08 	bl	80055d0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f003 f898 	bl	8005cf8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 8002bc8:	483a      	ldr	r0, [pc, #232]	@ (8002cb4 <main+0x5dc>)
 8002bca:	f002 fd01 	bl	80055d0 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)PUMP, 5);
 8002bce:	2205      	movs	r2, #5
 8002bd0:	493c      	ldr	r1, [pc, #240]	@ (8002cc4 <main+0x5ec>)
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	f001 f938 	bl	8003e48 <HAL_ADC_Start_DMA>
  ESP_UART_Init(&huart3);
 8002bd8:	483b      	ldr	r0, [pc, #236]	@ (8002cc8 <main+0x5f0>)
 8002bda:	f7fe fa8d 	bl	80010f8 <ESP_UART_Init>
  ESP_INIT_BASE();
 8002bde:	f7fe fc4d 	bl	800147c <ESP_INIT_BASE>
  HAL_Delay(100);
 8002be2:	2064      	movs	r0, #100	@ 0x64
 8002be4:	f000 fefa 	bl	80039dc <HAL_Delay>
	WiFiInfo=ESP_CheckWiFi();
 8002be8:	a838      	add	r0, sp, #224	@ 0xe0
 8002bea:	f7fe facb 	bl	8001184 <ESP_CheckWiFi>
 8002bee:	ac38      	add	r4, sp, #224	@ 0xe0
 8002bf0:	4e36      	ldr	r6, [pc, #216]	@ (8002ccc <main+0x5f4>)
 8002bf2:	af44      	add	r7, sp, #272	@ 0x110
 8002bf4:	4635      	mov	r5, r6
 8002bf6:	6820      	ldr	r0, [r4, #0]
 8002bf8:	6861      	ldr	r1, [r4, #4]
 8002bfa:	68a2      	ldr	r2, [r4, #8]
 8002bfc:	68e3      	ldr	r3, [r4, #12]
 8002bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c00:	3410      	adds	r4, #16
 8002c02:	462e      	mov	r6, r5
 8002c04:	42bc      	cmp	r4, r7
 8002c06:	d1f5      	bne.n	8002bf4 <main+0x51c>
 8002c08:	6820      	ldr	r0, [r4, #0]
 8002c0a:	6028      	str	r0, [r5, #0]
 8002c0c:	7923      	ldrb	r3, [r4, #4]
 8002c0e:	712b      	strb	r3, [r5, #4]
	  HAL_Delay(100);
 8002c10:	2064      	movs	r0, #100	@ 0x64
 8002c12:	f000 fee3 	bl	80039dc <HAL_Delay>
	IPInfo=ESP_GetIPInfo();
 8002c16:	a826      	add	r0, sp, #152	@ 0x98
 8002c18:	f7fe fb2a 	bl	8001270 <ESP_GetIPInfo>
 8002c1c:	2244      	movs	r2, #68	@ 0x44
 8002c1e:	a926      	add	r1, sp, #152	@ 0x98
 8002c20:	482b      	ldr	r0, [pc, #172]	@ (8002cd0 <main+0x5f8>)
 8002c22:	f004 fe20 	bl	8007866 <memcpy>
  ssd1306_NetWorkView();
 8002c26:	f7fe fee1 	bl	80019ec <ssd1306_NetWorkView>
  Buzzer_Init(&buzzer);
 8002c2a:	4c2a      	ldr	r4, [pc, #168]	@ (8002cd4 <main+0x5fc>)
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7fe fd6d 	bl	800170c <Buzzer_Init>
  Buzzer_SetVolume(&buzzer, 36);
 8002c32:	2124      	movs	r1, #36	@ 0x24
 8002c34:	4620      	mov	r0, r4
 8002c36:	f7fe fd55 	bl	80016e4 <Buzzer_SetVolume>
  HAL_Delay(100);
 8002c3a:	2064      	movs	r0, #100	@ 0x64
 8002c3c:	f000 fece 	bl	80039dc <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 200);
 8002c40:	21c8      	movs	r1, #200	@ 0xc8
 8002c42:	4620      	mov	r0, r4
 8002c44:	f7fe fd42 	bl	80016cc <Buzzer_SetFrequency>
  HAL_Delay(100);
 8002c48:	2064      	movs	r0, #100	@ 0x64
 8002c4a:	f000 fec7 	bl	80039dc <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 300);
 8002c4e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002c52:	4620      	mov	r0, r4
 8002c54:	f7fe fd3a 	bl	80016cc <Buzzer_SetFrequency>
  HAL_Delay(100);
 8002c58:	2064      	movs	r0, #100	@ 0x64
 8002c5a:	f000 febf 	bl	80039dc <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 400);
 8002c5e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c62:	4620      	mov	r0, r4
 8002c64:	f7fe fd32 	bl	80016cc <Buzzer_SetFrequency>
  HAL_Delay(100);
 8002c68:	2064      	movs	r0, #100	@ 0x64
 8002c6a:	f000 feb7 	bl	80039dc <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 500);
 8002c6e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002c72:	4620      	mov	r0, r4
 8002c74:	f7fe fd2a 	bl	80016cc <Buzzer_SetFrequency>
  HAL_Delay(100);
 8002c78:	2064      	movs	r0, #100	@ 0x64
 8002c7a:	f000 feaf 	bl	80039dc <HAL_Delay>
  Buzzer_SetVolume(&buzzer, 0);
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7fe fd2f 	bl	80016e4 <Buzzer_SetVolume>
  HAL_Delay(100);
 8002c86:	2064      	movs	r0, #100	@ 0x64
 8002c88:	f000 fea8 	bl	80039dc <HAL_Delay>
			sprintf(msg,
 8002c8c:	4e12      	ldr	r6, [pc, #72]	@ (8002cd8 <main+0x600>)
 8002c8e:	4f13      	ldr	r7, [pc, #76]	@ (8002cdc <main+0x604>)
 8002c90:	4c13      	ldr	r4, [pc, #76]	@ (8002ce0 <main+0x608>)
 8002c92:	e172      	b.n	8002f7a <main+0x8a2>
 8002c94:	b672      	cpsid	i
  while (1)
 8002c96:	e7fe      	b.n	8002c96 <main+0x5be>
 8002c98:	b672      	cpsid	i
 8002c9a:	e7fe      	b.n	8002c9a <main+0x5c2>
 8002c9c:	b672      	cpsid	i
 8002c9e:	e7fe      	b.n	8002c9e <main+0x5c6>
 8002ca0:	b672      	cpsid	i
 8002ca2:	e7fe      	b.n	8002ca2 <main+0x5ca>
 8002ca4:	b672      	cpsid	i
 8002ca6:	e7fe      	b.n	8002ca6 <main+0x5ce>
 8002ca8:	200005ac 	.word	0x200005ac
 8002cac:	2000051c 	.word	0x2000051c
 8002cb0:	40000400 	.word	0x40000400
 8002cb4:	200004d4 	.word	0x200004d4
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	20000564 	.word	0x20000564
 8002cc0:	2000068c 	.word	0x2000068c
 8002cc4:	200003b0 	.word	0x200003b0
 8002cc8:	20000444 	.word	0x20000444
 8002ccc:	20000378 	.word	0x20000378
 8002cd0:	20000334 	.word	0x20000334
 8002cd4:	200000bc 	.word	0x200000bc
 8002cd8:	20000092 	.word	0x20000092
 8002cdc:	200000a3 	.word	0x200000a3
 8002ce0:	200000b8 	.word	0x200000b8
 8002ce4:	b672      	cpsid	i
 8002ce6:	e7fe      	b.n	8002ce6 <main+0x60e>
 8002ce8:	b672      	cpsid	i
 8002cea:	e7fe      	b.n	8002cea <main+0x612>
 8002cec:	b672      	cpsid	i
 8002cee:	e7fe      	b.n	8002cee <main+0x616>
 8002cf0:	b672      	cpsid	i
 8002cf2:	e7fe      	b.n	8002cf2 <main+0x61a>
 8002cf4:	b672      	cpsid	i
 8002cf6:	e7fe      	b.n	8002cf6 <main+0x61e>
 8002cf8:	b672      	cpsid	i
 8002cfa:	e7fe      	b.n	8002cfa <main+0x622>
 8002cfc:	b672      	cpsid	i
 8002cfe:	e7fe      	b.n	8002cfe <main+0x626>
 8002d00:	b672      	cpsid	i
 8002d02:	e7fe      	b.n	8002d02 <main+0x62a>
 8002d04:	b672      	cpsid	i
 8002d06:	e7fe      	b.n	8002d06 <main+0x62e>
 8002d08:	b672      	cpsid	i
 8002d0a:	e7fe      	b.n	8002d0a <main+0x632>
 8002d0c:	b672      	cpsid	i
 8002d0e:	e7fe      	b.n	8002d0e <main+0x636>
 8002d10:	b672      	cpsid	i
 8002d12:	e7fe      	b.n	8002d12 <main+0x63a>
 8002d14:	b672      	cpsid	i
 8002d16:	e7fe      	b.n	8002d16 <main+0x63e>
 8002d18:	b672      	cpsid	i
 8002d1a:	e7fe      	b.n	8002d1a <main+0x642>
 8002d1c:	b672      	cpsid	i
 8002d1e:	e7fe      	b.n	8002d1e <main+0x646>
 8002d20:	b672      	cpsid	i
 8002d22:	e7fe      	b.n	8002d22 <main+0x64a>
 8002d24:	b672      	cpsid	i
 8002d26:	e7fe      	b.n	8002d26 <main+0x64e>
 8002d28:	b672      	cpsid	i
 8002d2a:	e7fe      	b.n	8002d2a <main+0x652>
 8002d2c:	b672      	cpsid	i
 8002d2e:	e7fe      	b.n	8002d2e <main+0x656>
 8002d30:	b672      	cpsid	i
 8002d32:	e7fe      	b.n	8002d32 <main+0x65a>
 8002d34:	b672      	cpsid	i
 8002d36:	e7fe      	b.n	8002d36 <main+0x65e>
 8002d38:	b672      	cpsid	i
 8002d3a:	e7fe      	b.n	8002d3a <main+0x662>
 8002d3c:	b672      	cpsid	i
 8002d3e:	e7fe      	b.n	8002d3e <main+0x666>
 8002d40:	b672      	cpsid	i
 8002d42:	e7fe      	b.n	8002d42 <main+0x66a>
 8002d44:	b672      	cpsid	i
 8002d46:	e7fe      	b.n	8002d46 <main+0x66e>
			DHT11_Info = DHT_getData(&DHT11_Sensor);
 8002d48:	4d9b      	ldr	r5, [pc, #620]	@ (8002fb8 <main+0x8e0>)
 8002d4a:	f10d 0898 	add.w	r8, sp, #152	@ 0x98
 8002d4e:	499b      	ldr	r1, [pc, #620]	@ (8002fbc <main+0x8e4>)
 8002d50:	4640      	mov	r0, r8
 8002d52:	f7fe fba9 	bl	80014a8 <DHT_getData>
 8002d56:	e898 0003 	ldmia.w	r8, {r0, r1}
 8002d5a:	e885 0003 	stmia.w	r5, {r0, r1}
			FLAG_DHT_ALARM=check_DHT11_Alarm(DHT11_Info, DHT11_Alarm_H, DHT11_Alarm_L);
 8002d5e:	f8d5 8000 	ldr.w	r8, [r5]
 8002d62:	686d      	ldr	r5, [r5, #4]
 8002d64:	4b96      	ldr	r3, [pc, #600]	@ (8002fc0 <main+0x8e8>)
 8002d66:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8002d6a:	4a96      	ldr	r2, [pc, #600]	@ (8002fc4 <main+0x8ec>)
 8002d6c:	f8d2 9000 	ldr.w	r9, [r2]
 8002d70:	f8d2 a004 	ldr.w	sl, [r2, #4]
    if (current_data.hum > alarm_high.hum || current_data.hum < alarm_low.hum ||
 8002d74:	6819      	ldr	r1, [r3, #0]
 8002d76:	4640      	mov	r0, r8
 8002d78:	f7fe f924 	bl	8000fc4 <__aeabi_fcmpgt>
 8002d7c:	b998      	cbnz	r0, 8002da6 <main+0x6ce>
 8002d7e:	4649      	mov	r1, r9
 8002d80:	4640      	mov	r0, r8
 8002d82:	f7fe f901 	bl	8000f88 <__aeabi_fcmplt>
 8002d86:	b9a8      	cbnz	r0, 8002db4 <main+0x6dc>
 8002d88:	4659      	mov	r1, fp
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f7fe f91a 	bl	8000fc4 <__aeabi_fcmpgt>
 8002d90:	b990      	cbnz	r0, 8002db8 <main+0x6e0>
        current_data.temp > alarm_high.temp || current_data.temp < alarm_low.temp) {
 8002d92:	4651      	mov	r1, sl
 8002d94:	4628      	mov	r0, r5
 8002d96:	f7fe f8f7 	bl	8000f88 <__aeabi_fcmplt>
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	bf14      	ite	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	2300      	moveq	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	e000      	b.n	8002da8 <main+0x6d0>
        return 1;
 8002da6:	2301      	movs	r3, #1
			FLAG_DHT_ALARM=check_DHT11_Alarm(DHT11_Info, DHT11_Alarm_H, DHT11_Alarm_L);
 8002da8:	4a87      	ldr	r2, [pc, #540]	@ (8002fc8 <main+0x8f0>)
 8002daa:	7013      	strb	r3, [r2, #0]
			FLAG_CheckDHT=0;
 8002dac:	4b87      	ldr	r3, [pc, #540]	@ (8002fcc <main+0x8f4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e0e7      	b.n	8002f84 <main+0x8ac>
        return 1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e7f7      	b.n	8002da8 <main+0x6d0>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e7f5      	b.n	8002da8 <main+0x6d0>
			sprintf(msg,
 8002dbc:	4b84      	ldr	r3, [pc, #528]	@ (8002fd0 <main+0x8f8>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	9323      	str	r3, [sp, #140]	@ 0x8c
 8002dc4:	4b83      	ldr	r3, [pc, #524]	@ (8002fd4 <main+0x8fc>)
 8002dc6:	f893 8000 	ldrb.w	r8, [r3]
 8002dca:	fa5f f888 	uxtb.w	r8, r8
 8002dce:	4b82      	ldr	r3, [pc, #520]	@ (8002fd8 <main+0x900>)
 8002dd0:	f893 9000 	ldrb.w	r9, [r3]
 8002dd4:	fa5f f989 	uxtb.w	r9, r9
 8002dd8:	4b80      	ldr	r3, [pc, #512]	@ (8002fdc <main+0x904>)
 8002dda:	f893 a000 	ldrb.w	sl, [r3]
 8002dde:	fa5f fa8a 	uxtb.w	sl, sl
			    DHT11_Info.temp, DHT11_Info.hum, PUMP_PWM, PUMP[0], PUMP[1],PUMP[3], PUMP[4],PUMP[5],
 8002de2:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 8002fb8 <main+0x8e0>
			sprintf(msg,
 8002de6:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002dea:	f7fd fbd1 	bl	8000590 <__aeabi_f2d>
 8002dee:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
 8002df2:	7833      	ldrb	r3, [r6, #0]
 8002df4:	9321      	str	r3, [sp, #132]	@ 0x84
 8002df6:	4b7a      	ldr	r3, [pc, #488]	@ (8002fe0 <main+0x908>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	9320      	str	r3, [sp, #128]	@ 0x80
 8002dfc:	f8cd a07c 	str.w	sl, [sp, #124]	@ 0x7c
 8002e00:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
 8002e04:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
 8002e08:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002e0a:	931c      	str	r3, [sp, #112]	@ 0x70
 8002e0c:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 8002fe4 <main+0x90c>
 8002e10:	f898 3000 	ldrb.w	r3, [r8]
 8002e14:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002e16:	4b6c      	ldr	r3, [pc, #432]	@ (8002fc8 <main+0x8f0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e1c:	4b72      	ldr	r3, [pc, #456]	@ (8002fe8 <main+0x910>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	9319      	str	r3, [sp, #100]	@ 0x64
 8002e22:	9518      	str	r5, [sp, #96]	@ 0x60
 8002e24:	4b69      	ldr	r3, [pc, #420]	@ (8002fcc <main+0x8f4>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	9317      	str	r3, [sp, #92]	@ 0x5c
 8002e2a:	783b      	ldrb	r3, [r7, #0]
 8002e2c:	9316      	str	r3, [sp, #88]	@ 0x58
 8002e2e:	4b6f      	ldr	r3, [pc, #444]	@ (8002fec <main+0x914>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	9315      	str	r3, [sp, #84]	@ 0x54
 8002e34:	4b6e      	ldr	r3, [pc, #440]	@ (8002ff0 <main+0x918>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	9314      	str	r3, [sp, #80]	@ 0x50
			    DHT11_Alarm_H.temp, DHT11_Alarm_L.temp, DHT11_Alarm_H.hum, DHT11_Alarm_L.hum,
 8002e3a:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8002fc4 <main+0x8ec>
			sprintf(msg,
 8002e3e:	f8d9 0000 	ldr.w	r0, [r9]
 8002e42:	f7fd fba5 	bl	8000590 <__aeabi_f2d>
 8002e46:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
			    DHT11_Alarm_H.temp, DHT11_Alarm_L.temp, DHT11_Alarm_H.hum, DHT11_Alarm_L.hum,
 8002e4a:	4d5d      	ldr	r5, [pc, #372]	@ (8002fc0 <main+0x8e8>)
			sprintf(msg,
 8002e4c:	6828      	ldr	r0, [r5, #0]
 8002e4e:	f7fd fb9f 	bl	8000590 <__aeabi_f2d>
 8002e52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002e56:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8002e5a:	f7fd fb99 	bl	8000590 <__aeabi_f2d>
 8002e5e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8002e62:	6868      	ldr	r0, [r5, #4]
 8002e64:	f7fd fb94 	bl	8000590 <__aeabi_f2d>
 8002e68:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8002e6c:	4b61      	ldr	r3, [pc, #388]	@ (8002ff4 <main+0x91c>)
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	920b      	str	r2, [sp, #44]	@ 0x2c
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	920a      	str	r2, [sp, #40]	@ 0x28
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e7a:	7823      	ldrb	r3, [r4, #0]
 8002e7c:	9308      	str	r3, [sp, #32]
			    DHT11_Info.temp, DHT11_Info.hum, PUMP_PWM, PUMP[0], PUMP[1],PUMP[3], PUMP[4],PUMP[5],
 8002e7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff8 <main+0x920>)
			sprintf(msg,
 8002e80:	895a      	ldrh	r2, [r3, #10]
 8002e82:	9207      	str	r2, [sp, #28]
 8002e84:	891a      	ldrh	r2, [r3, #8]
 8002e86:	9206      	str	r2, [sp, #24]
 8002e88:	88da      	ldrh	r2, [r3, #6]
 8002e8a:	9205      	str	r2, [sp, #20]
 8002e8c:	885a      	ldrh	r2, [r3, #2]
 8002e8e:	9204      	str	r2, [sp, #16]
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	9303      	str	r3, [sp, #12]
 8002e94:	4b59      	ldr	r3, [pc, #356]	@ (8002ffc <main+0x924>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	9302      	str	r3, [sp, #8]
 8002e9a:	f8db 0000 	ldr.w	r0, [fp]
 8002e9e:	f7fd fb77 	bl	8000590 <__aeabi_f2d>
 8002ea2:	e9cd 0100 	strd	r0, r1, [sp]
 8002ea6:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 8002eaa:	4955      	ldr	r1, [pc, #340]	@ (8003000 <main+0x928>)
 8002eac:	a858      	add	r0, sp, #352	@ 0x160
 8002eae:	f004 fb4b 	bl	8007548 <siprintf>
			ESP_SendTCP(0,msg);
 8002eb2:	a958      	add	r1, sp, #352	@ 0x160
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fe f8f5 	bl	80010a4 <ESP_SendTCP>
			  if(FLAG_CurrentTimerStates==1) {
 8002eba:	f898 3000 	ldrb.w	r3, [r8]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d015      	beq.n	8002eee <main+0x816>
			  if(FLAG_CurrentTimerStates==0) {
 8002ec2:	b95b      	cbnz	r3, 8002edc <main+0x804>
			 		if (ALARM_Time_Second>CNT_TIMER2) {
 8002ec4:	4b4f      	ldr	r3, [pc, #316]	@ (8003004 <main+0x92c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a4f      	ldr	r2, [pc, #316]	@ (8003008 <main+0x930>)
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	429a      	cmp	r2, r3
			 			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002ece:	4b4f      	ldr	r3, [pc, #316]	@ (800300c <main+0x934>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	bf8e      	itee	hi
 8002ed4:	2200      	movhi	r2, #0
			 			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PUMP_PWM);
 8002ed6:	4a49      	ldrls	r2, [pc, #292]	@ (8002ffc <main+0x924>)
 8002ed8:	8812      	ldrhls	r2, [r2, #0]
 8002eda:	635a      	str	r2, [r3, #52]	@ 0x34
				convertSecondsToTime(CNT_TIMER2, &Time);
 8002edc:	4b49      	ldr	r3, [pc, #292]	@ (8003004 <main+0x92c>)
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	494b      	ldr	r1, [pc, #300]	@ (8003010 <main+0x938>)
 8002ee2:	f7fe fc3f 	bl	8001764 <convertSecondsToTime>
			  FLAG_SentTCP=0;
 8002ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8003014 <main+0x93c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e04f      	b.n	8002f8e <main+0x8b6>
			 		if (ALARM_Time_Second>CNT_TIMER2) {
 8002eee:	4b45      	ldr	r3, [pc, #276]	@ (8003004 <main+0x92c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a45      	ldr	r2, [pc, #276]	@ (8003008 <main+0x930>)
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	429a      	cmp	r2, r3
			 			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PUMP_PWM);
 8002ef8:	4b44      	ldr	r3, [pc, #272]	@ (800300c <main+0x934>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	bf86      	itte	hi
 8002efe:	4a3f      	ldrhi	r2, [pc, #252]	@ (8002ffc <main+0x924>)
 8002f00:	8812      	ldrhhi	r2, [r2, #0]
			 			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002f02:	2200      	movls	r2, #0
 8002f04:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f06:	e7e9      	b.n	8002edc <main+0x804>
			WiFiInfo=ESP_CheckWiFi();
 8002f08:	a826      	add	r0, sp, #152	@ 0x98
 8002f0a:	f7fe f93b 	bl	8001184 <ESP_CheckWiFi>
 8002f0e:	ad26      	add	r5, sp, #152	@ 0x98
 8002f10:	f8df e104 	ldr.w	lr, [pc, #260]	@ 8003018 <main+0x940>
 8002f14:	f10d 08c8 	add.w	r8, sp, #200	@ 0xc8
 8002f18:	46f4      	mov	ip, lr
 8002f1a:	6828      	ldr	r0, [r5, #0]
 8002f1c:	6869      	ldr	r1, [r5, #4]
 8002f1e:	68aa      	ldr	r2, [r5, #8]
 8002f20:	68eb      	ldr	r3, [r5, #12]
 8002f22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002f26:	3510      	adds	r5, #16
 8002f28:	46e6      	mov	lr, ip
 8002f2a:	4545      	cmp	r5, r8
 8002f2c:	d1f4      	bne.n	8002f18 <main+0x840>
 8002f2e:	6828      	ldr	r0, [r5, #0]
 8002f30:	f8cc 0000 	str.w	r0, [ip]
 8002f34:	792b      	ldrb	r3, [r5, #4]
 8002f36:	f88c 3004 	strb.w	r3, [ip, #4]
			HAL_Delay(100);
 8002f3a:	2064      	movs	r0, #100	@ 0x64
 8002f3c:	f000 fd4e 	bl	80039dc <HAL_Delay>
		    IPInfo=ESP_GetIPInfo();
 8002f40:	a826      	add	r0, sp, #152	@ 0x98
 8002f42:	f7fe f995 	bl	8001270 <ESP_GetIPInfo>
 8002f46:	2244      	movs	r2, #68	@ 0x44
 8002f48:	a926      	add	r1, sp, #152	@ 0x98
 8002f4a:	4834      	ldr	r0, [pc, #208]	@ (800301c <main+0x944>)
 8002f4c:	f004 fc8b 	bl	8007866 <memcpy>
			FLAG_CheckWifi=0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	703b      	strb	r3, [r7, #0]
 8002f54:	e01e      	b.n	8002f94 <main+0x8bc>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_LED1_VAL);
 8002f56:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <main+0x908>)
 8002f58:	8813      	ldrh	r3, [r2, #0]
 8002f5a:	4931      	ldr	r1, [pc, #196]	@ (8003020 <main+0x948>)
 8002f5c:	6809      	ldr	r1, [r1, #0]
 8002f5e:	634b      	str	r3, [r1, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_LED1_VAL);
 8002f60:	638b      	str	r3, [r1, #56]	@ 0x38
			if (--PWM_LED1_VAL==0) {
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	8013      	strh	r3, [r2, #0]
 8002f68:	b90b      	cbnz	r3, 8002f6e <main+0x896>
				PWM_LED_Inverse=1;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	7033      	strb	r3, [r6, #0]
		KeyHandeler(CurrentView);
 8002f6e:	7820      	ldrb	r0, [r4, #0]
 8002f70:	f7ff fb38 	bl	80025e4 <KeyHandeler>
		ShowView(CurrentView);
 8002f74:	7820      	ldrb	r0, [r4, #0]
 8002f76:	f7ff fb50 	bl	800261a <ShowView>
	  if (FLAG_CheckDHT) {
 8002f7a:	4b14      	ldr	r3, [pc, #80]	@ (8002fcc <main+0x8f4>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f47f aee2 	bne.w	8002d48 <main+0x670>
		if (FLAG_SentTCP) {
 8002f84:	4b23      	ldr	r3, [pc, #140]	@ (8003014 <main+0x93c>)
 8002f86:	781d      	ldrb	r5, [r3, #0]
 8002f88:	2d00      	cmp	r5, #0
 8002f8a:	f47f af17 	bne.w	8002dbc <main+0x6e4>
		if (FLAG_CheckWifi) {
 8002f8e:	783b      	ldrb	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1b9      	bne.n	8002f08 <main+0x830>
		if (PWM_LED_Inverse) {
 8002f94:	7833      	ldrb	r3, [r6, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0dd      	beq.n	8002f56 <main+0x87e>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_LED1_VAL);
 8002f9a:	4a11      	ldr	r2, [pc, #68]	@ (8002fe0 <main+0x908>)
 8002f9c:	8813      	ldrh	r3, [r2, #0]
 8002f9e:	4920      	ldr	r1, [pc, #128]	@ (8003020 <main+0x948>)
 8002fa0:	6809      	ldr	r1, [r1, #0]
 8002fa2:	634b      	str	r3, [r1, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_LED1_VAL);
 8002fa4:	638b      	str	r3, [r1, #56]	@ 0x38
			if (++PWM_LED1_VAL==72) {
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	8013      	strh	r3, [r2, #0]
 8002fac:	2b48      	cmp	r3, #72	@ 0x48
 8002fae:	d1de      	bne.n	8002f6e <main+0x896>
				PWM_LED_Inverse=0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	7033      	strb	r3, [r6, #0]
 8002fb4:	e7db      	b.n	8002f6e <main+0x896>
 8002fb6:	bf00      	nop
 8002fb8:	2000032c 	.word	0x2000032c
 8002fbc:	200000cc 	.word	0x200000cc
 8002fc0:	200000e8 	.word	0x200000e8
 8002fc4:	200000e0 	.word	0x200000e0
 8002fc8:	20000328 	.word	0x20000328
 8002fcc:	200000a2 	.word	0x200000a2
 8002fd0:	20000305 	.word	0x20000305
 8002fd4:	20000304 	.word	0x20000304
 8002fd8:	20000303 	.word	0x20000303
 8002fdc:	20000302 	.word	0x20000302
 8002fe0:	20000300 	.word	0x20000300
 8002fe4:	20000093 	.word	0x20000093
 8002fe8:	200000a0 	.word	0x200000a0
 8002fec:	200000a4 	.word	0x200000a4
 8002ff0:	200000f0 	.word	0x200000f0
 8002ff4:	2000030c 	.word	0x2000030c
 8002ff8:	200003b0 	.word	0x200003b0
 8002ffc:	200000f2 	.word	0x200000f2
 8003000:	0800b088 	.word	0x0800b088
 8003004:	20000324 	.word	0x20000324
 8003008:	20000308 	.word	0x20000308
 800300c:	2000051c 	.word	0x2000051c
 8003010:	20000318 	.word	0x20000318
 8003014:	200000a1 	.word	0x200000a1
 8003018:	20000378 	.word	0x20000378
 800301c:	20000334 	.word	0x20000334
 8003020:	200005ac 	.word	0x200005ac

08003024 <Error_Handler>:
 8003024:	b672      	cpsid	i
  while (1)
 8003026:	e7fe      	b.n	8003026 <Error_Handler+0x2>

08003028 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003028:	b500      	push	{lr}
 800302a:	b087      	sub	sp, #28
 800302c:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	9302      	str	r3, [sp, #8]
 8003036:	2301      	movs	r3, #1
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	f10d 0217 	add.w	r2, sp, #23
 800303e:	9200      	str	r2, [sp, #0]
 8003040:	2200      	movs	r2, #0
 8003042:	2178      	movs	r1, #120	@ 0x78
 8003044:	4802      	ldr	r0, [pc, #8]	@ (8003050 <ssd1306_WriteCommand+0x28>)
 8003046:	f001 fded 	bl	8004c24 <HAL_I2C_Mem_Write>
}
 800304a:	b007      	add	sp, #28
 800304c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003050:	200005f4 	.word	0x200005f4

08003054 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003054:	b500      	push	{lr}
 8003056:	b085      	sub	sp, #20
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003058:	f04f 33ff 	mov.w	r3, #4294967295
 800305c:	9302      	str	r3, [sp, #8]
 800305e:	b289      	uxth	r1, r1
 8003060:	9101      	str	r1, [sp, #4]
 8003062:	9000      	str	r0, [sp, #0]
 8003064:	2301      	movs	r3, #1
 8003066:	2240      	movs	r2, #64	@ 0x40
 8003068:	2178      	movs	r1, #120	@ 0x78
 800306a:	4803      	ldr	r0, [pc, #12]	@ (8003078 <ssd1306_WriteData+0x24>)
 800306c:	f001 fdda 	bl	8004c24 <HAL_I2C_Mem_Write>
}
 8003070:	b005      	add	sp, #20
 8003072:	f85d fb04 	ldr.w	pc, [sp], #4
 8003076:	bf00      	nop
 8003078:	200005f4 	.word	0x200005f4

0800307c <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800307c:	4a05      	ldr	r2, [pc, #20]	@ (8003094 <ssd1306_Fill+0x18>)
 800307e:	f502 6180 	add.w	r1, r2, #1024	@ 0x400
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003082:	1e03      	subs	r3, r0, #0
 8003084:	bf18      	it	ne
 8003086:	2301      	movne	r3, #1
 8003088:	425b      	negs	r3, r3
 800308a:	f802 3f01 	strb.w	r3, [r2, #1]!
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800308e:	428a      	cmp	r2, r1
 8003090:	d1f7      	bne.n	8003082 <ssd1306_Fill+0x6>
    }
}
 8003092:	4770      	bx	lr
 8003094:	200006c3 	.word	0x200006c3

08003098 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800309c:	4d0c      	ldr	r5, [pc, #48]	@ (80030d0 <ssd1306_UpdateScreen+0x38>)
void ssd1306_UpdateScreen(void) {
 800309e:	24b0      	movs	r4, #176	@ 0xb0
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
 80030a0:	f04f 0800 	mov.w	r8, #0
        ssd1306_WriteCommand(0x10);
 80030a4:	2710      	movs	r7, #16
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80030a6:	2680      	movs	r6, #128	@ 0x80
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7ff ffbd 	bl	8003028 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80030ae:	4640      	mov	r0, r8
 80030b0:	f7ff ffba 	bl	8003028 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80030b4:	4638      	mov	r0, r7
 80030b6:	f7ff ffb7 	bl	8003028 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80030ba:	4631      	mov	r1, r6
 80030bc:	4628      	mov	r0, r5
 80030be:	f7ff ffc9 	bl	8003054 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80030c2:	3401      	adds	r4, #1
 80030c4:	b2e4      	uxtb	r4, r4
 80030c6:	3580      	adds	r5, #128	@ 0x80
 80030c8:	2cb8      	cmp	r4, #184	@ 0xb8
 80030ca:	d1ed      	bne.n	80030a8 <ssd1306_UpdateScreen+0x10>
    }
}
 80030cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030d0:	200006c4 	.word	0x200006c4

080030d4 <ssd1306_Init>:
void ssd1306_Init(void) {
 80030d4:	b508      	push	{r3, lr}
    HAL_Delay(100);
 80030d6:	2064      	movs	r0, #100	@ 0x64
 80030d8:	f000 fc80 	bl	80039dc <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 80030dc:	20ae      	movs	r0, #174	@ 0xae
 80030de:	f7ff ffa3 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80030e2:	2020      	movs	r0, #32
 80030e4:	f7ff ffa0 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7ff ff9d 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80030ee:	20b0      	movs	r0, #176	@ 0xb0
 80030f0:	f7ff ff9a 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80030f4:	20c8      	movs	r0, #200	@ 0xc8
 80030f6:	f7ff ff97 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 80030fa:	2000      	movs	r0, #0
 80030fc:	f7ff ff94 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003100:	2010      	movs	r0, #16
 8003102:	f7ff ff91 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003106:	2040      	movs	r0, #64	@ 0x40
 8003108:	f7ff ff8e 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800310c:	2081      	movs	r0, #129	@ 0x81
 800310e:	f7ff ff8b 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8003112:	20ff      	movs	r0, #255	@ 0xff
 8003114:	f7ff ff88 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003118:	20a1      	movs	r0, #161	@ 0xa1
 800311a:	f7ff ff85 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 800311e:	20a6      	movs	r0, #166	@ 0xa6
 8003120:	f7ff ff82 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003124:	20a8      	movs	r0, #168	@ 0xa8
 8003126:	f7ff ff7f 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 800312a:	203f      	movs	r0, #63	@ 0x3f
 800312c:	f7ff ff7c 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003130:	20a4      	movs	r0, #164	@ 0xa4
 8003132:	f7ff ff79 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003136:	20d3      	movs	r0, #211	@ 0xd3
 8003138:	f7ff ff76 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800313c:	2000      	movs	r0, #0
 800313e:	f7ff ff73 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003142:	20d5      	movs	r0, #213	@ 0xd5
 8003144:	f7ff ff70 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003148:	20f0      	movs	r0, #240	@ 0xf0
 800314a:	f7ff ff6d 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800314e:	20d9      	movs	r0, #217	@ 0xd9
 8003150:	f7ff ff6a 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003154:	2022      	movs	r0, #34	@ 0x22
 8003156:	f7ff ff67 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800315a:	20da      	movs	r0, #218	@ 0xda
 800315c:	f7ff ff64 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8003160:	2012      	movs	r0, #18
 8003162:	f7ff ff61 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003166:	20db      	movs	r0, #219	@ 0xdb
 8003168:	f7ff ff5e 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800316c:	2020      	movs	r0, #32
 800316e:	f7ff ff5b 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003172:	208d      	movs	r0, #141	@ 0x8d
 8003174:	f7ff ff58 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003178:	2014      	movs	r0, #20
 800317a:	f7ff ff55 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800317e:	20af      	movs	r0, #175	@ 0xaf
 8003180:	f7ff ff52 	bl	8003028 <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 8003184:	2000      	movs	r0, #0
 8003186:	f7ff ff79 	bl	800307c <ssd1306_Fill>
    ssd1306_UpdateScreen();
 800318a:	f7ff ff85 	bl	8003098 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 800318e:	4b03      	ldr	r3, [pc, #12]	@ (800319c <ssd1306_Init+0xc8>)
 8003190:	2200      	movs	r2, #0
 8003192:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003194:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8003196:	2201      	movs	r2, #1
 8003198:	715a      	strb	r2, [r3, #5]
}
 800319a:	bd08      	pop	{r3, pc}
 800319c:	200006bc 	.word	0x200006bc

080031a0 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80031a0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80031a4:	d122      	bne.n	80031ec <ssd1306_DrawPixel+0x4c>
 80031a6:	293f      	cmp	r1, #63	@ 0x3f
 80031a8:	d820      	bhi.n	80031ec <ssd1306_DrawPixel+0x4c>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80031aa:	4b11      	ldr	r3, [pc, #68]	@ (80031f0 <ssd1306_DrawPixel+0x50>)
 80031ac:	791b      	ldrb	r3, [r3, #4]
 80031ae:	b17b      	cbz	r3, 80031d0 <ssd1306_DrawPixel+0x30>
        color = (SSD1306_COLOR)!color;
    }
    
    // Draw in the right color
    if(color == White) {
 80031b0:	b182      	cbz	r2, 80031d4 <ssd1306_DrawPixel+0x34>
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80031b2:	b410      	push	{r4}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80031b4:	08cb      	lsrs	r3, r1, #3
 80031b6:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80031ba:	4c0e      	ldr	r4, [pc, #56]	@ (80031f4 <ssd1306_DrawPixel+0x54>)
 80031bc:	f001 0107 	and.w	r1, r1, #7
 80031c0:	2201      	movs	r2, #1
 80031c2:	408a      	lsls	r2, r1
 80031c4:	5c23      	ldrb	r3, [r4, r0]
 80031c6:	ea23 0302 	bic.w	r3, r3, r2
 80031ca:	5423      	strb	r3, [r4, r0]
    }
}
 80031cc:	bc10      	pop	{r4}
 80031ce:	4770      	bx	lr
    if(color == White) {
 80031d0:	2a01      	cmp	r2, #1
 80031d2:	d1ee      	bne.n	80031b2 <ssd1306_DrawPixel+0x12>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80031d4:	08cb      	lsrs	r3, r1, #3
 80031d6:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80031da:	4a06      	ldr	r2, [pc, #24]	@ (80031f4 <ssd1306_DrawPixel+0x54>)
 80031dc:	f001 0107 	and.w	r1, r1, #7
 80031e0:	2301      	movs	r3, #1
 80031e2:	408b      	lsls	r3, r1
 80031e4:	5c11      	ldrb	r1, [r2, r0]
 80031e6:	430b      	orrs	r3, r1
 80031e8:	5413      	strb	r3, [r2, r0]
 80031ea:	4770      	bx	lr
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	200006bc 	.word	0x200006bc
 80031f4:	200006c4 	.word	0x200006c4

080031f8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80031f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fc:	b085      	sub	sp, #20
 80031fe:	4682      	mov	sl, r0
 8003200:	a804      	add	r0, sp, #16
 8003202:	e900 0006 	stmdb	r0, {r1, r2}
 8003206:	461f      	mov	r7, r3
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003208:	f1aa 0320 	sub.w	r3, sl, #32
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b5e      	cmp	r3, #94	@ 0x5e
 8003210:	d847      	bhi.n	80032a2 <ssd1306_WriteChar+0xaa>
 8003212:	f89d 6008 	ldrb.w	r6, [sp, #8]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003216:	4b27      	ldr	r3, [pc, #156]	@ (80032b4 <ssd1306_WriteChar+0xbc>)
 8003218:	f8b3 8000 	ldrh.w	r8, [r3]
 800321c:	eb08 0306 	add.w	r3, r8, r6
 8003220:	2b80      	cmp	r3, #128	@ 0x80
 8003222:	dc42      	bgt.n	80032aa <ssd1306_WriteChar+0xb2>
 8003224:	f89d 2009 	ldrb.w	r2, [sp, #9]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003228:	4b22      	ldr	r3, [pc, #136]	@ (80032b4 <ssd1306_WriteChar+0xbc>)
 800322a:	885d      	ldrh	r5, [r3, #2]
 800322c:	18ab      	adds	r3, r5, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800322e:	2b40      	cmp	r3, #64	@ 0x40
 8003230:	dc3d      	bgt.n	80032ae <ssd1306_WriteChar+0xb6>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003232:	b38a      	cbz	r2, 8003298 <ssd1306_WriteChar+0xa0>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003234:	f1aa 0920 	sub.w	r9, sl, #32
 8003238:	fb02 f909 	mul.w	r9, r2, r9
 800323c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8003240:	b2ed      	uxtb	r5, r5
    for(i = 0; i < Font.FontHeight; i++) {
 8003242:	f04f 0b00 	mov.w	fp, #0
 8003246:	9200      	str	r2, [sp, #0]
 8003248:	f8cd a004 	str.w	sl, [sp, #4]
 800324c:	46ca      	mov	sl, r9
 800324e:	46a9      	mov	r9, r5
 8003250:	465d      	mov	r5, fp
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003252:	9903      	ldr	r1, [sp, #12]
 8003254:	f831 b00a 	ldrh.w	fp, [r1, sl]
        for(j = 0; j < Font.FontWidth; j++) {
 8003258:	b196      	cbz	r6, 8003280 <ssd1306_WriteChar+0x88>
 800325a:	2400      	movs	r4, #0
            if((b << j) & 0x8000)  {
 800325c:	fa0b f304 	lsl.w	r3, fp, r4
 8003260:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003264:	eb08 0004 	add.w	r0, r8, r4
 8003268:	bf12      	itee	ne
 800326a:	463a      	movne	r2, r7
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800326c:	fab7 f287 	clzeq	r2, r7
 8003270:	0952      	lsreq	r2, r2, #5
 8003272:	4649      	mov	r1, r9
 8003274:	b2c0      	uxtb	r0, r0
 8003276:	f7ff ff93 	bl	80031a0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800327a:	3401      	adds	r4, #1
 800327c:	42b4      	cmp	r4, r6
 800327e:	d1ed      	bne.n	800325c <ssd1306_WriteChar+0x64>
    for(i = 0; i < Font.FontHeight; i++) {
 8003280:	3501      	adds	r5, #1
 8003282:	f10a 0a02 	add.w	sl, sl, #2
 8003286:	f109 0901 	add.w	r9, r9, #1
 800328a:	fa5f f989 	uxtb.w	r9, r9
 800328e:	9b00      	ldr	r3, [sp, #0]
 8003290:	42ab      	cmp	r3, r5
 8003292:	d1de      	bne.n	8003252 <ssd1306_WriteChar+0x5a>
 8003294:	f8dd a004 	ldr.w	sl, [sp, #4]
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003298:	4446      	add	r6, r8
 800329a:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <ssd1306_WriteChar+0xbc>)
 800329c:	801e      	strh	r6, [r3, #0]
    
    // Return written char for validation
    return ch;
 800329e:	4650      	mov	r0, sl
 80032a0:	e000      	b.n	80032a4 <ssd1306_WriteChar+0xac>
        return 0;
 80032a2:	2000      	movs	r0, #0
}
 80032a4:	b005      	add	sp, #20
 80032a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 80032aa:	2000      	movs	r0, #0
 80032ac:	e7fa      	b.n	80032a4 <ssd1306_WriteChar+0xac>
 80032ae:	2000      	movs	r0, #0
 80032b0:	e7f8      	b.n	80032a4 <ssd1306_WriteChar+0xac>
 80032b2:	bf00      	nop
 80032b4:	200006bc 	.word	0x200006bc

080032b8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	4604      	mov	r4, r0
 80032be:	a802      	add	r0, sp, #8
 80032c0:	e900 0006 	stmdb	r0, {r1, r2}
    // Write until null-byte
    while (*str) {
 80032c4:	7820      	ldrb	r0, [r4, #0]
 80032c6:	b170      	cbz	r0, 80032e6 <ssd1306_WriteString+0x2e>
 80032c8:	461e      	mov	r6, r3
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80032ca:	466d      	mov	r5, sp
 80032cc:	4633      	mov	r3, r6
 80032ce:	e895 0006 	ldmia.w	r5, {r1, r2}
 80032d2:	f7ff ff91 	bl	80031f8 <ssd1306_WriteChar>
 80032d6:	4602      	mov	r2, r0
 80032d8:	7820      	ldrb	r0, [r4, #0]
 80032da:	4282      	cmp	r2, r0
 80032dc:	d103      	bne.n	80032e6 <ssd1306_WriteString+0x2e>
    while (*str) {
 80032de:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d1f2      	bne.n	80032cc <ssd1306_WriteString+0x14>
        str++;
    }
    
    // Everything ok
    return *str;
}
 80032e6:	b002      	add	sp, #8
 80032e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080032ec <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 80032ec:	4b01      	ldr	r3, [pc, #4]	@ (80032f4 <ssd1306_SetCursor+0x8>)
 80032ee:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 80032f0:	8059      	strh	r1, [r3, #2]
}
 80032f2:	4770      	bx	lr
 80032f4:	200006bc 	.word	0x200006bc

080032f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <HAL_MspInit+0x3c>)
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	619a      	str	r2, [r3, #24]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	f002 0201 	and.w	r2, r2, #1
 800330a:	9200      	str	r2, [sp, #0]
 800330c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003314:	61da      	str	r2, [r3, #28]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003320:	4a05      	ldr	r2, [pc, #20]	@ (8003338 <HAL_MspInit+0x40>)
 8003322:	6853      	ldr	r3, [r2, #4]
 8003324:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003328:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800332c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800332e:	b002      	add	sp, #8
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	40010000 	.word	0x40010000

0800333c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800333c:	b510      	push	{r4, lr}
 800333e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	2300      	movs	r3, #0
 8003342:	9302      	str	r3, [sp, #8]
 8003344:	9303      	str	r3, [sp, #12]
 8003346:	9304      	str	r3, [sp, #16]
 8003348:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 800334a:	6802      	ldr	r2, [r0, #0]
 800334c:	4b22      	ldr	r3, [pc, #136]	@ (80033d8 <HAL_ADC_MspInit+0x9c>)
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003352:	b006      	add	sp, #24
 8003354:	bd10      	pop	{r4, pc}
 8003356:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003358:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003362:	619a      	str	r2, [r3, #24]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800336a:	9200      	str	r2, [sp, #0]
 800336c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	f042 0204 	orr.w	r2, r2, #4
 8003374:	619a      	str	r2, [r3, #24]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003380:	233e      	movs	r3, #62	@ 0x3e
 8003382:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003384:	2303      	movs	r3, #3
 8003386:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003388:	a902      	add	r1, sp, #8
 800338a:	4814      	ldr	r0, [pc, #80]	@ (80033dc <HAL_ADC_MspInit+0xa0>)
 800338c:	f001 f8a4 	bl	80044d8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8003390:	4813      	ldr	r0, [pc, #76]	@ (80033e0 <HAL_ADC_MspInit+0xa4>)
 8003392:	4b14      	ldr	r3, [pc, #80]	@ (80033e4 <HAL_ADC_MspInit+0xa8>)
 8003394:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003396:	2300      	movs	r3, #0
 8003398:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800339a:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800339c:	2280      	movs	r2, #128	@ 0x80
 800339e:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033a4:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033aa:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033ac:	2220      	movs	r2, #32
 80033ae:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033b0:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033b2:	f000 feff 	bl	80041b4 <HAL_DMA_Init>
 80033b6:	b958      	cbnz	r0, 80033d0 <HAL_ADC_MspInit+0x94>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033b8:	4b09      	ldr	r3, [pc, #36]	@ (80033e0 <HAL_ADC_MspInit+0xa4>)
 80033ba:	6223      	str	r3, [r4, #32]
 80033bc:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	4611      	mov	r1, r2
 80033c2:	2012      	movs	r0, #18
 80033c4:	f000 fe9e 	bl	8004104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80033c8:	2012      	movs	r0, #18
 80033ca:	f000 fed1 	bl	8004170 <HAL_NVIC_EnableIRQ>
}
 80033ce:	e7c0      	b.n	8003352 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80033d0:	f7ff fe28 	bl	8003024 <Error_Handler>
 80033d4:	e7f0      	b.n	80033b8 <HAL_ADC_MspInit+0x7c>
 80033d6:	bf00      	nop
 80033d8:	40012400 	.word	0x40012400
 80033dc:	40010800 	.word	0x40010800
 80033e0:	20000648 	.word	0x20000648
 80033e4:	40020008 	.word	0x40020008

080033e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033e8:	b510      	push	{r4, lr}
 80033ea:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	2300      	movs	r3, #0
 80033ee:	9302      	str	r3, [sp, #8]
 80033f0:	9303      	str	r3, [sp, #12]
 80033f2:	9304      	str	r3, [sp, #16]
 80033f4:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 80033f6:	6802      	ldr	r2, [r0, #0]
 80033f8:	4b15      	ldr	r3, [pc, #84]	@ (8003450 <HAL_I2C_MspInit+0x68>)
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033fe:	b006      	add	sp, #24
 8003400:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003402:	4c14      	ldr	r4, [pc, #80]	@ (8003454 <HAL_I2C_MspInit+0x6c>)
 8003404:	69a3      	ldr	r3, [r4, #24]
 8003406:	f043 0308 	orr.w	r3, r3, #8
 800340a:	61a3      	str	r3, [r4, #24]
 800340c:	69a3      	ldr	r3, [r4, #24]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003416:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800341a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800341c:	2312      	movs	r3, #18
 800341e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003420:	2303      	movs	r3, #3
 8003422:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	a902      	add	r1, sp, #8
 8003426:	480c      	ldr	r0, [pc, #48]	@ (8003458 <HAL_I2C_MspInit+0x70>)
 8003428:	f001 f856 	bl	80044d8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800342c:	4a0b      	ldr	r2, [pc, #44]	@ (800345c <HAL_I2C_MspInit+0x74>)
 800342e:	6853      	ldr	r3, [r2, #4]
 8003430:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 800343a:	69e3      	ldr	r3, [r4, #28]
 800343c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003440:	61e3      	str	r3, [r4, #28]
 8003442:	69e3      	ldr	r3, [r4, #28]
 8003444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	9b01      	ldr	r3, [sp, #4]
}
 800344c:	e7d7      	b.n	80033fe <HAL_I2C_MspInit+0x16>
 800344e:	bf00      	nop
 8003450:	40005400 	.word	0x40005400
 8003454:	40021000 	.word	0x40021000
 8003458:	40010c00 	.word	0x40010c00
 800345c:	40010000 	.word	0x40010000

08003460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003460:	b500      	push	{lr}
 8003462:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8003464:	6803      	ldr	r3, [r0, #0]
 8003466:	4a21      	ldr	r2, [pc, #132]	@ (80034ec <HAL_TIM_Base_MspInit+0x8c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003470:	d01d      	beq.n	80034ae <HAL_TIM_Base_MspInit+0x4e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003472:	4a1f      	ldr	r2, [pc, #124]	@ (80034f0 <HAL_TIM_Base_MspInit+0x90>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d02e      	beq.n	80034d6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8003478:	4a1e      	ldr	r2, [pc, #120]	@ (80034f4 <HAL_TIM_Base_MspInit+0x94>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d114      	bne.n	80034a8 <HAL_TIM_Base_MspInit+0x48>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800347e:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <HAL_TIM_Base_MspInit+0x98>)
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	f042 0204 	orr.w	r2, r2, #4
 8003486:	61da      	str	r2, [r3, #28]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	9303      	str	r3, [sp, #12]
 8003490:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003492:	e009      	b.n	80034a8 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003494:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <HAL_TIM_Base_MspInit+0x98>)
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800349c:	619a      	str	r2, [r3, #24]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	9b00      	ldr	r3, [sp, #0]
}
 80034a8:	b005      	add	sp, #20
 80034aa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ae:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	61da      	str	r2, [r3, #28]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2102      	movs	r1, #2
 80034c8:	201c      	movs	r0, #28
 80034ca:	f000 fe1b 	bl	8004104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034ce:	201c      	movs	r0, #28
 80034d0:	f000 fe4e 	bl	8004170 <HAL_NVIC_EnableIRQ>
 80034d4:	e7e8      	b.n	80034a8 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d6:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <HAL_TIM_Base_MspInit+0x98>)
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	f042 0202 	orr.w	r2, r2, #2
 80034de:	61da      	str	r2, [r3, #28]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	9b02      	ldr	r3, [sp, #8]
 80034ea:	e7dd      	b.n	80034a8 <HAL_TIM_Base_MspInit+0x48>
 80034ec:	40012c00 	.word	0x40012c00
 80034f0:	40000400 	.word	0x40000400
 80034f4:	40000800 	.word	0x40000800
 80034f8:	40021000 	.word	0x40021000

080034fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034fc:	b500      	push	{lr}
 80034fe:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003500:	2300      	movs	r3, #0
 8003502:	9302      	str	r3, [sp, #8]
 8003504:	9303      	str	r3, [sp, #12]
 8003506:	9304      	str	r3, [sp, #16]
 8003508:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 800350a:	6803      	ldr	r3, [r0, #0]
 800350c:	4a18      	ldr	r2, [pc, #96]	@ (8003570 <HAL_TIM_MspPostInit+0x74>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d005      	beq.n	800351e <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8003512:	4a18      	ldr	r2, [pc, #96]	@ (8003574 <HAL_TIM_MspPostInit+0x78>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d017      	beq.n	8003548 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003518:	b007      	add	sp, #28
 800351a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800351e:	4b16      	ldr	r3, [pc, #88]	@ (8003578 <HAL_TIM_MspPostInit+0x7c>)
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	f042 0204 	orr.w	r2, r2, #4
 8003526:	619a      	str	r2, [r3, #24]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|BEEP_Pin;
 8003532:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003536:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003538:	2302      	movs	r3, #2
 800353a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353e:	a902      	add	r1, sp, #8
 8003540:	480e      	ldr	r0, [pc, #56]	@ (800357c <HAL_TIM_MspPostInit+0x80>)
 8003542:	f000 ffc9 	bl	80044d8 <HAL_GPIO_Init>
 8003546:	e7e7      	b.n	8003518 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_TIM_MspPostInit+0x7c>)
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	f042 0204 	orr.w	r2, r2, #4
 8003550:	619a      	str	r2, [r3, #24]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 800355c:	2340      	movs	r3, #64	@ 0x40
 800355e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003564:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8003566:	a902      	add	r1, sp, #8
 8003568:	4804      	ldr	r0, [pc, #16]	@ (800357c <HAL_TIM_MspPostInit+0x80>)
 800356a:	f000 ffb5 	bl	80044d8 <HAL_GPIO_Init>
}
 800356e:	e7d3      	b.n	8003518 <HAL_TIM_MspPostInit+0x1c>
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40000400 	.word	0x40000400
 8003578:	40021000 	.word	0x40021000
 800357c:	40010800 	.word	0x40010800

08003580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	2300      	movs	r3, #0
 8003586:	9304      	str	r3, [sp, #16]
 8003588:	9305      	str	r3, [sp, #20]
 800358a:	9306      	str	r3, [sp, #24]
 800358c:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800358e:	6803      	ldr	r3, [r0, #0]
 8003590:	4a4a      	ldr	r2, [pc, #296]	@ (80036bc <HAL_UART_MspInit+0x13c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d005      	beq.n	80035a2 <HAL_UART_MspInit+0x22>
 8003596:	4604      	mov	r4, r0

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8003598:	4a49      	ldr	r2, [pc, #292]	@ (80036c0 <HAL_UART_MspInit+0x140>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d030      	beq.n	8003600 <HAL_UART_MspInit+0x80>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800359e:	b008      	add	sp, #32
 80035a0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80035a2:	4b48      	ldr	r3, [pc, #288]	@ (80036c4 <HAL_UART_MspInit+0x144>)
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035aa:	619a      	str	r2, [r3, #24]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80035b2:	9200      	str	r2, [sp, #0]
 80035b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	f042 0208 	orr.w	r2, r2, #8
 80035bc:	619a      	str	r2, [r3, #24]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035c8:	2340      	movs	r3, #64	@ 0x40
 80035ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035d0:	2303      	movs	r3, #3
 80035d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d4:	4c3c      	ldr	r4, [pc, #240]	@ (80036c8 <HAL_UART_MspInit+0x148>)
 80035d6:	a904      	add	r1, sp, #16
 80035d8:	4620      	mov	r0, r4
 80035da:	f000 ff7d 	bl	80044d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035de:	2380      	movs	r3, #128	@ 0x80
 80035e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e2:	2300      	movs	r3, #0
 80035e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e8:	a904      	add	r1, sp, #16
 80035ea:	4620      	mov	r0, r4
 80035ec:	f000 ff74 	bl	80044d8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80035f0:	4a36      	ldr	r2, [pc, #216]	@ (80036cc <HAL_UART_MspInit+0x14c>)
 80035f2:	6853      	ldr	r3, [r2, #4]
 80035f4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	6053      	str	r3, [r2, #4]
 80035fe:	e7ce      	b.n	800359e <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003600:	4b30      	ldr	r3, [pc, #192]	@ (80036c4 <HAL_UART_MspInit+0x144>)
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003608:	61da      	str	r2, [r3, #28]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8003610:	9202      	str	r2, [sp, #8]
 8003612:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	f042 0208 	orr.w	r2, r2, #8
 800361a:	619a      	str	r2, [r3, #24]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	9303      	str	r3, [sp, #12]
 8003624:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800362a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362c:	2302      	movs	r3, #2
 800362e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003630:	2303      	movs	r3, #3
 8003632:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003634:	4e24      	ldr	r6, [pc, #144]	@ (80036c8 <HAL_UART_MspInit+0x148>)
 8003636:	a904      	add	r1, sp, #16
 8003638:	4630      	mov	r0, r6
 800363a:	f000 ff4d 	bl	80044d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800363e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003642:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003644:	2500      	movs	r5, #0
 8003646:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364a:	a904      	add	r1, sp, #16
 800364c:	4630      	mov	r0, r6
 800364e:	f000 ff43 	bl	80044d8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003652:	481f      	ldr	r0, [pc, #124]	@ (80036d0 <HAL_UART_MspInit+0x150>)
 8003654:	4b1f      	ldr	r3, [pc, #124]	@ (80036d4 <HAL_UART_MspInit+0x154>)
 8003656:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003658:	2310      	movs	r3, #16
 800365a:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800365c:	6085      	str	r5, [r0, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003662:	6105      	str	r5, [r0, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003664:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003666:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003668:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800366a:	f000 fda3 	bl	80041b4 <HAL_DMA_Init>
 800366e:	b9f0      	cbnz	r0, 80036ae <HAL_UART_MspInit+0x12e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003670:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <HAL_UART_MspInit+0x150>)
 8003672:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003674:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003676:	4818      	ldr	r0, [pc, #96]	@ (80036d8 <HAL_UART_MspInit+0x158>)
 8003678:	4b18      	ldr	r3, [pc, #96]	@ (80036dc <HAL_UART_MspInit+0x15c>)
 800367a:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800367c:	2300      	movs	r3, #0
 800367e:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003680:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003682:	2280      	movs	r2, #128	@ 0x80
 8003684:	60c2      	str	r2, [r0, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003686:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003688:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800368a:	2220      	movs	r2, #32
 800368c:	6182      	str	r2, [r0, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800368e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003690:	f000 fd90 	bl	80041b4 <HAL_DMA_Init>
 8003694:	b970      	cbnz	r0, 80036b4 <HAL_UART_MspInit+0x134>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003696:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <HAL_UART_MspInit+0x158>)
 8003698:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800369a:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800369c:	2200      	movs	r2, #0
 800369e:	4611      	mov	r1, r2
 80036a0:	2027      	movs	r0, #39	@ 0x27
 80036a2:	f000 fd2f 	bl	8004104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036a6:	2027      	movs	r0, #39	@ 0x27
 80036a8:	f000 fd62 	bl	8004170 <HAL_NVIC_EnableIRQ>
}
 80036ac:	e777      	b.n	800359e <HAL_UART_MspInit+0x1e>
      Error_Handler();
 80036ae:	f7ff fcb9 	bl	8003024 <Error_Handler>
 80036b2:	e7dd      	b.n	8003670 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80036b4:	f7ff fcb6 	bl	8003024 <Error_Handler>
 80036b8:	e7ed      	b.n	8003696 <HAL_UART_MspInit+0x116>
 80036ba:	bf00      	nop
 80036bc:	40013800 	.word	0x40013800
 80036c0:	40004800 	.word	0x40004800
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40010c00 	.word	0x40010c00
 80036cc:	40010000 	.word	0x40010000
 80036d0:	20000400 	.word	0x20000400
 80036d4:	4002001c 	.word	0x4002001c
 80036d8:	200003bc 	.word	0x200003bc
 80036dc:	40020030 	.word	0x40020030

080036e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036e0:	e7fe      	b.n	80036e0 <NMI_Handler>

080036e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036e2:	e7fe      	b.n	80036e2 <HardFault_Handler>

080036e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036e4:	e7fe      	b.n	80036e4 <MemManage_Handler>

080036e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036e6:	e7fe      	b.n	80036e6 <BusFault_Handler>

080036e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e8:	e7fe      	b.n	80036e8 <UsageFault_Handler>

080036ea <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ea:	4770      	bx	lr

080036ec <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036ec:	4770      	bx	lr

080036ee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ee:	4770      	bx	lr

080036f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036f2:	f000 f961 	bl	80039b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036f6:	bd08      	pop	{r3, pc}

080036f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036fa:	4802      	ldr	r0, [pc, #8]	@ (8003704 <DMA1_Channel1_IRQHandler+0xc>)
 80036fc:	f000 fe4c 	bl	8004398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003700:	bd08      	pop	{r3, pc}
 8003702:	bf00      	nop
 8003704:	20000648 	.word	0x20000648

08003708 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800370a:	4802      	ldr	r0, [pc, #8]	@ (8003714 <DMA1_Channel2_IRQHandler+0xc>)
 800370c:	f000 fe44 	bl	8004398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003710:	bd08      	pop	{r3, pc}
 8003712:	bf00      	nop
 8003714:	20000400 	.word	0x20000400

08003718 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003718:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800371a:	4802      	ldr	r0, [pc, #8]	@ (8003724 <DMA1_Channel3_IRQHandler+0xc>)
 800371c:	f000 fe3c 	bl	8004398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003720:	bd08      	pop	{r3, pc}
 8003722:	bf00      	nop
 8003724:	200003bc 	.word	0x200003bc

08003728 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003728:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800372a:	4802      	ldr	r0, [pc, #8]	@ (8003734 <ADC1_2_IRQHandler+0xc>)
 800372c:	f000 f99b 	bl	8003a66 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003730:	bd08      	pop	{r3, pc}
 8003732:	bf00      	nop
 8003734:	2000068c 	.word	0x2000068c

08003738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003738:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */


	CNT_TIMER2++;
 800373a:	4b10      	ldr	r3, [pc, #64]	@ (800377c <TIM2_IRQHandler+0x44>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	3201      	adds	r2, #1
 8003740:	601a      	str	r2, [r3, #0]

	if (CNT_TIMER2%2==0) {
 8003742:	f012 0f01 	tst.w	r2, #1
 8003746:	d103      	bne.n	8003750 <TIM2_IRQHandler+0x18>
		FLAG_CheckDHT++;
 8003748:	490d      	ldr	r1, [pc, #52]	@ (8003780 <TIM2_IRQHandler+0x48>)
 800374a:	780b      	ldrb	r3, [r1, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	700b      	strb	r3, [r1, #0]
	}

		FLAG_SentTCP++;
 8003750:	490c      	ldr	r1, [pc, #48]	@ (8003784 <TIM2_IRQHandler+0x4c>)
 8003752:	780b      	ldrb	r3, [r1, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	700b      	strb	r3, [r1, #0]


	if (CNT_TIMER2%20==0) {
 8003758:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <TIM2_IRQHandler+0x50>)
 800375a:	fba3 1302 	umull	r1, r3, r3, r2
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003764:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8003768:	d103      	bne.n	8003772 <TIM2_IRQHandler+0x3a>
		FLAG_CheckWifi++;
 800376a:	4a08      	ldr	r2, [pc, #32]	@ (800378c <TIM2_IRQHandler+0x54>)
 800376c:	7813      	ldrb	r3, [r2, #0]
 800376e:	3301      	adds	r3, #1
 8003770:	7013      	strb	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003772:	4807      	ldr	r0, [pc, #28]	@ (8003790 <TIM2_IRQHandler+0x58>)
 8003774:	f001 ff95 	bl	80056a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003778:	bd08      	pop	{r3, pc}
 800377a:	bf00      	nop
 800377c:	20000324 	.word	0x20000324
 8003780:	200000a2 	.word	0x200000a2
 8003784:	200000a1 	.word	0x200000a1
 8003788:	cccccccd 	.word	0xcccccccd
 800378c:	200000a3 	.word	0x200000a3
 8003790:	20000564 	.word	0x20000564

08003794 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003794:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003796:	4802      	ldr	r0, [pc, #8]	@ (80037a0 <USART3_IRQHandler+0xc>)
 8003798:	f002 fda4 	bl	80062e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800379c:	bd08      	pop	{r3, pc}
 800379e:	bf00      	nop
 80037a0:	20000444 	.word	0x20000444

080037a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET)
 80037a6:	4b22      	ldr	r3, [pc, #136]	@ (8003830 <EXTI15_10_IRQHandler+0x8c>)
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80037ae:	d007      	beq.n	80037c0 <EXTI15_10_IRQHandler+0x1c>
	    {
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 80037b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003830 <EXTI15_10_IRQHandler+0x8c>)
 80037b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037b6:	615a      	str	r2, [r3, #20]
	        FLAG_SentKEY0++;
 80037b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003834 <EXTI15_10_IRQHandler+0x90>)
 80037ba:	7813      	ldrb	r3, [r2, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	7013      	strb	r3, [r2, #0]
	    }
	    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 80037c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003830 <EXTI15_10_IRQHandler+0x8c>)
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80037c8:	d007      	beq.n	80037da <EXTI15_10_IRQHandler+0x36>
	    {
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 80037ca:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <EXTI15_10_IRQHandler+0x8c>)
 80037cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037d0:	615a      	str	r2, [r3, #20]
	        FLAG_SentKEY1++;
 80037d2:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <EXTI15_10_IRQHandler+0x94>)
 80037d4:	7813      	ldrb	r3, [r2, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	7013      	strb	r3, [r2, #0]
	    }
	    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET)
 80037da:	4b15      	ldr	r3, [pc, #84]	@ (8003830 <EXTI15_10_IRQHandler+0x8c>)
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80037e2:	d007      	beq.n	80037f4 <EXTI15_10_IRQHandler+0x50>
	    {
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 80037e4:	4b12      	ldr	r3, [pc, #72]	@ (8003830 <EXTI15_10_IRQHandler+0x8c>)
 80037e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037ea:	615a      	str	r2, [r3, #20]
	        FLAG_SentKEY2++;
 80037ec:	4a13      	ldr	r2, [pc, #76]	@ (800383c <EXTI15_10_IRQHandler+0x98>)
 80037ee:	7813      	ldrb	r3, [r2, #0]
 80037f0:	3301      	adds	r3, #1
 80037f2:	7013      	strb	r3, [r2, #0]
	    }
	    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET)
 80037f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003830 <EXTI15_10_IRQHandler+0x8c>)
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80037fc:	d007      	beq.n	800380e <EXTI15_10_IRQHandler+0x6a>
	    {
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);
 80037fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003830 <EXTI15_10_IRQHandler+0x8c>)
 8003800:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003804:	615a      	str	r2, [r3, #20]
	        FLAG_SentKEY3++;
 8003806:	4a0e      	ldr	r2, [pc, #56]	@ (8003840 <EXTI15_10_IRQHandler+0x9c>)
 8003808:	7813      	ldrb	r3, [r2, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	7013      	strb	r3, [r2, #0]
	    }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800380e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003812:	f000 ffaf 	bl	8004774 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003816:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800381a:	f000 ffab 	bl	8004774 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800381e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003822:	f000 ffa7 	bl	8004774 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003826:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800382a:	f000 ffa3 	bl	8004774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800382e:	bd08      	pop	{r3, pc}
 8003830:	40010400 	.word	0x40010400
 8003834:	20000305 	.word	0x20000305
 8003838:	20000304 	.word	0x20000304
 800383c:	20000303 	.word	0x20000303
 8003840:	20000302 	.word	0x20000302

08003844 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003844:	2001      	movs	r0, #1
 8003846:	4770      	bx	lr

08003848 <_kill>:

int _kill(int pid, int sig)
{
 8003848:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800384a:	f003 ffc9 	bl	80077e0 <__errno>
 800384e:	2316      	movs	r3, #22
 8003850:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003852:	f04f 30ff 	mov.w	r0, #4294967295
 8003856:	bd08      	pop	{r3, pc}

08003858 <_exit>:

void _exit (int status)
{
 8003858:	b508      	push	{r3, lr}
  errno = EINVAL;
 800385a:	f003 ffc1 	bl	80077e0 <__errno>
 800385e:	2316      	movs	r3, #22
 8003860:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8003862:	e7fe      	b.n	8003862 <_exit+0xa>

08003864 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003864:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003866:	1e16      	subs	r6, r2, #0
 8003868:	dd07      	ble.n	800387a <_read+0x16>
 800386a:	460c      	mov	r4, r1
 800386c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800386e:	f3af 8000 	nop.w
 8003872:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003876:	42a5      	cmp	r5, r4
 8003878:	d1f9      	bne.n	800386e <_read+0xa>
  }

  return len;
}
 800387a:	4630      	mov	r0, r6
 800387c:	bd70      	pop	{r4, r5, r6, pc}

0800387e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800387e:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003880:	1e16      	subs	r6, r2, #0
 8003882:	dd07      	ble.n	8003894 <_write+0x16>
 8003884:	460c      	mov	r4, r1
 8003886:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8003888:	f814 0b01 	ldrb.w	r0, [r4], #1
 800388c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003890:	42a5      	cmp	r5, r4
 8003892:	d1f9      	bne.n	8003888 <_write+0xa>
  }
  return len;
}
 8003894:	4630      	mov	r0, r6
 8003896:	bd70      	pop	{r4, r5, r6, pc}

08003898 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	4770      	bx	lr

0800389e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800389e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038a2:	604b      	str	r3, [r1, #4]
  return 0;
}
 80038a4:	2000      	movs	r0, #0
 80038a6:	4770      	bx	lr

080038a8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80038a8:	2001      	movs	r0, #1
 80038aa:	4770      	bx	lr

080038ac <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80038ac:	2000      	movs	r0, #0
 80038ae:	4770      	bx	lr

080038b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b0:	b508      	push	{r3, lr}
 80038b2:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038b4:	4a0c      	ldr	r2, [pc, #48]	@ (80038e8 <_sbrk+0x38>)
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	b152      	cbz	r2, 80038d0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ba:	4a0b      	ldr	r2, [pc, #44]	@ (80038e8 <_sbrk+0x38>)
 80038bc:	6810      	ldr	r0, [r2, #0]
 80038be:	4403      	add	r3, r0
 80038c0:	4a0a      	ldr	r2, [pc, #40]	@ (80038ec <_sbrk+0x3c>)
 80038c2:	490b      	ldr	r1, [pc, #44]	@ (80038f0 <_sbrk+0x40>)
 80038c4:	1a52      	subs	r2, r2, r1
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d806      	bhi.n	80038d8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80038ca:	4a07      	ldr	r2, [pc, #28]	@ (80038e8 <_sbrk+0x38>)
 80038cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80038ce:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80038d0:	4a05      	ldr	r2, [pc, #20]	@ (80038e8 <_sbrk+0x38>)
 80038d2:	4908      	ldr	r1, [pc, #32]	@ (80038f4 <_sbrk+0x44>)
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	e7f0      	b.n	80038ba <_sbrk+0xa>
    errno = ENOMEM;
 80038d8:	f003 ff82 	bl	80077e0 <__errno>
 80038dc:	230c      	movs	r3, #12
 80038de:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	e7f3      	b.n	80038ce <_sbrk+0x1e>
 80038e6:	bf00      	nop
 80038e8:	20000ac4 	.word	0x20000ac4
 80038ec:	20005000 	.word	0x20005000
 80038f0:	00000400 	.word	0x00000400
 80038f4:	20000c18 	.word	0x20000c18

080038f8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038f8:	4770      	bx	lr
	...

080038fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038fc:	f7ff fffc 	bl	80038f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8003900:	480b      	ldr	r0, [pc, #44]	@ (8003930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003902:	490c      	ldr	r1, [pc, #48]	@ (8003934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003904:	4a0c      	ldr	r2, [pc, #48]	@ (8003938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003908:	e002      	b.n	8003910 <LoopCopyDataInit>

0800390a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800390a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800390c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800390e:	3304      	adds	r3, #4

08003910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003914:	d3f9      	bcc.n	800390a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003916:	4a09      	ldr	r2, [pc, #36]	@ (800393c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003918:	4c09      	ldr	r4, [pc, #36]	@ (8003940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800391a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800391c:	e001      	b.n	8003922 <LoopFillZerobss>

0800391e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800391e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003920:	3204      	adds	r2, #4

08003922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003924:	d3fb      	bcc.n	800391e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003926:	f003 ff61 	bl	80077ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800392a:	f7fe fed5 	bl	80026d8 <main>
  bx lr
 800392e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8003930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003934:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8003938:	0800d1f4 	.word	0x0800d1f4
  ldr r2, =_sbss
 800393c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8003940:	20000c18 	.word	0x20000c18

08003944 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003944:	e7fe      	b.n	8003944 <CAN1_RX1_IRQHandler>
	...

08003948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003948:	b510      	push	{r4, lr}
 800394a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800394c:	4b0e      	ldr	r3, [pc, #56]	@ (8003988 <HAL_InitTick+0x40>)
 800394e:	781a      	ldrb	r2, [r3, #0]
 8003950:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003954:	fbb3 f3f2 	udiv	r3, r3, r2
 8003958:	4a0c      	ldr	r2, [pc, #48]	@ (800398c <HAL_InitTick+0x44>)
 800395a:	6810      	ldr	r0, [r2, #0]
 800395c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003960:	f000 fc14 	bl	800418c <HAL_SYSTICK_Config>
 8003964:	b968      	cbnz	r0, 8003982 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003966:	2c0f      	cmp	r4, #15
 8003968:	d901      	bls.n	800396e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800396a:	2001      	movs	r0, #1
 800396c:	e00a      	b.n	8003984 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800396e:	2200      	movs	r2, #0
 8003970:	4621      	mov	r1, r4
 8003972:	f04f 30ff 	mov.w	r0, #4294967295
 8003976:	f000 fbc5 	bl	8004104 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800397a:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <HAL_InitTick+0x48>)
 800397c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800397e:	2000      	movs	r0, #0
 8003980:	e000      	b.n	8003984 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8003982:	2001      	movs	r0, #1
}
 8003984:	bd10      	pop	{r4, pc}
 8003986:	bf00      	nop
 8003988:	20000110 	.word	0x20000110
 800398c:	2000010c 	.word	0x2000010c
 8003990:	20000114 	.word	0x20000114

08003994 <HAL_Init>:
{
 8003994:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003996:	4a07      	ldr	r2, [pc, #28]	@ (80039b4 <HAL_Init+0x20>)
 8003998:	6813      	ldr	r3, [r2, #0]
 800399a:	f043 0310 	orr.w	r3, r3, #16
 800399e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a0:	2003      	movs	r0, #3
 80039a2:	f000 fb9d 	bl	80040e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80039a6:	200f      	movs	r0, #15
 80039a8:	f7ff ffce 	bl	8003948 <HAL_InitTick>
  HAL_MspInit();
 80039ac:	f7ff fca4 	bl	80032f8 <HAL_MspInit>
}
 80039b0:	2000      	movs	r0, #0
 80039b2:	bd08      	pop	{r3, pc}
 80039b4:	40022000 	.word	0x40022000

080039b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80039b8:	4a03      	ldr	r2, [pc, #12]	@ (80039c8 <HAL_IncTick+0x10>)
 80039ba:	6811      	ldr	r1, [r2, #0]
 80039bc:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <HAL_IncTick+0x14>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	440b      	add	r3, r1
 80039c2:	6013      	str	r3, [r2, #0]
}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000ac8 	.word	0x20000ac8
 80039cc:	20000110 	.word	0x20000110

080039d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80039d0:	4b01      	ldr	r3, [pc, #4]	@ (80039d8 <HAL_GetTick+0x8>)
 80039d2:	6818      	ldr	r0, [r3, #0]
}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000ac8 	.word	0x20000ac8

080039dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff fff6 	bl	80039d0 <HAL_GetTick>
 80039e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80039ea:	d002      	beq.n	80039f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ec:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <HAL_Delay+0x24>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039f2:	f7ff ffed 	bl	80039d0 <HAL_GetTick>
 80039f6:	1b40      	subs	r0, r0, r5
 80039f8:	42a0      	cmp	r0, r4
 80039fa:	d3fa      	bcc.n	80039f2 <HAL_Delay+0x16>
  {
  }
}
 80039fc:	bd38      	pop	{r3, r4, r5, pc}
 80039fe:	bf00      	nop
 8003a00:	20000110 	.word	0x20000110

08003a04 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a04:	4770      	bx	lr

08003a06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a06:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a08:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a0c:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8003a10:	d11e      	bne.n	8003a50 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a18:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	6892      	ldr	r2, [r2, #8]
 8003a1e:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8003a22:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8003a26:	d003      	beq.n	8003a30 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ffeb 	bl	8003a04 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003a2e:	bd08      	pop	{r3, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a30:	7b1a      	ldrb	r2, [r3, #12]
 8003a32:	2a00      	cmp	r2, #0
 8003a34:	d1f8      	bne.n	8003a28 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a3c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a40:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8003a44:	d1f0      	bne.n	8003a28 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a4e:	e7eb      	b.n	8003a28 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a54:	4798      	blx	r3
}
 8003a56:	e7ea      	b.n	8003a2e <ADC_DMAConvCplt+0x28>

08003a58 <HAL_ADC_ConvHalfCpltCallback>:
}
 8003a58:	4770      	bx	lr

08003a5a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a5a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a5c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003a5e:	f7ff fffb 	bl	8003a58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a62:	bd08      	pop	{r3, pc}

08003a64 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8003a64:	4770      	bx	lr

08003a66 <HAL_ADC_IRQHandler>:
{
 8003a66:	b570      	push	{r4, r5, r6, lr}
 8003a68:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 8003a6a:	6803      	ldr	r3, [r0, #0]
 8003a6c:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003a6e:	685d      	ldr	r5, [r3, #4]
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003a70:	f015 0f20 	tst.w	r5, #32
 8003a74:	d017      	beq.n	8003aa6 <HAL_ADC_IRQHandler+0x40>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003a76:	f016 0f02 	tst.w	r6, #2
 8003a7a:	d014      	beq.n	8003aa6 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a7c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003a7e:	f012 0f10 	tst.w	r2, #16
 8003a82:	d103      	bne.n	8003a8c <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003a84:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a8a:	6282      	str	r2, [r0, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8003a92:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8003a96:	d033      	beq.n	8003b00 <HAL_ADC_IRQHandler+0x9a>
      HAL_ADC_ConvCpltCallback(hadc);
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f7ff ffb3 	bl	8003a04 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	f06f 0212 	mvn.w	r2, #18
 8003aa4:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003aa6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003aaa:	d022      	beq.n	8003af2 <HAL_ADC_IRQHandler+0x8c>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003aac:	f016 0f04 	tst.w	r6, #4
 8003ab0:	d01f      	beq.n	8003af2 <HAL_ADC_IRQHandler+0x8c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ab2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003ab4:	f013 0f10 	tst.w	r3, #16
 8003ab8:	d103      	bne.n	8003ac2 <HAL_ADC_IRQHandler+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003aba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003abc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ac0:	62a3      	str	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	6893      	ldr	r3, [r2, #8]
 8003ac6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003aca:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003ace:	d02e      	beq.n	8003b2e <HAL_ADC_IRQHandler+0xc8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003ad0:	6853      	ldr	r3, [r2, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003ad2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003ad6:	d105      	bne.n	8003ae4 <HAL_ADC_IRQHandler+0x7e>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003ad8:	6893      	ldr	r3, [r2, #8]
 8003ada:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003ade:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003ae2:	d021      	beq.n	8003b28 <HAL_ADC_IRQHandler+0xc2>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f000 faf9 	bl	80040dc <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	f06f 020c 	mvn.w	r2, #12
 8003af0:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003af2:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8003af6:	d002      	beq.n	8003afe <HAL_ADC_IRQHandler+0x98>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003af8:	f016 0f01 	tst.w	r6, #1
 8003afc:	d128      	bne.n	8003b50 <HAL_ADC_IRQHandler+0xea>
}
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b00:	7b22      	ldrb	r2, [r4, #12]
 8003b02:	2a00      	cmp	r2, #0
 8003b04:	d1c8      	bne.n	8003a98 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	f022 0220 	bic.w	r2, r2, #32
 8003b0c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b0e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b14:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b18:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003b1c:	d1bc      	bne.n	8003a98 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b26:	e7b7      	b.n	8003a98 <HAL_ADC_IRQHandler+0x32>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003b28:	7b23      	ldrb	r3, [r4, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1da      	bne.n	8003ae4 <HAL_ADC_IRQHandler+0x7e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b2e:	6853      	ldr	r3, [r2, #4]
 8003b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b34:	6053      	str	r3, [r2, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003b36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b3c:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003b3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b40:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003b44:	d1ce      	bne.n	8003ae4 <HAL_ADC_IRQHandler+0x7e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b4e:	e7c9      	b.n	8003ae4 <HAL_ADC_IRQHandler+0x7e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b50:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b56:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f7ff ff83 	bl	8003a64 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	f06f 0201 	mvn.w	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	e7ca      	b.n	8003afe <HAL_ADC_IRQHandler+0x98>

08003b68 <HAL_ADC_ErrorCallback>:
}
 8003b68:	4770      	bx	lr

08003b6a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b6a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b6c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b6e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b74:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b76:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b7e:	f7ff fff3 	bl	8003b68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b82:	bd08      	pop	{r3, pc}

08003b84 <HAL_ADC_ConfigChannel>:
{ 
 8003b84:	b430      	push	{r4, r5}
 8003b86:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8003b88:	2200      	movs	r2, #0
 8003b8a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003b8c:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003b90:	2a01      	cmp	r2, #1
 8003b92:	f000 8093 	beq.w	8003cbc <HAL_ADC_ConfigChannel+0x138>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8003b9e:	684a      	ldr	r2, [r1, #4]
 8003ba0:	2a06      	cmp	r2, #6
 8003ba2:	d82d      	bhi.n	8003c00 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003ba4:	6804      	ldr	r4, [r0, #0]
 8003ba6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003ba8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003bac:	3a05      	subs	r2, #5
 8003bae:	f04f 0c1f 	mov.w	ip, #31
 8003bb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8003bb6:	ea20 000c 	bic.w	r0, r0, ip
 8003bba:	680d      	ldr	r5, [r1, #0]
 8003bbc:	fa05 f202 	lsl.w	r2, r5, r2
 8003bc0:	4302      	orrs	r2, r0
 8003bc2:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003bc4:	680a      	ldr	r2, [r1, #0]
 8003bc6:	2a09      	cmp	r2, #9
 8003bc8:	d938      	bls.n	8003c3c <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003bca:	681c      	ldr	r4, [r3, #0]
 8003bcc:	68e0      	ldr	r0, [r4, #12]
 8003bce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003bd2:	3a1e      	subs	r2, #30
 8003bd4:	f04f 0c07 	mov.w	ip, #7
 8003bd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8003bdc:	ea20 000c 	bic.w	r0, r0, ip
 8003be0:	688d      	ldr	r5, [r1, #8]
 8003be2:	fa05 f202 	lsl.w	r2, r5, r2
 8003be6:	4302      	orrs	r2, r0
 8003be8:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003bea:	680a      	ldr	r2, [r1, #0]
 8003bec:	3a10      	subs	r2, #16
 8003bee:	2a01      	cmp	r2, #1
 8003bf0:	d934      	bls.n	8003c5c <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003bfa:	b002      	add	sp, #8
 8003bfc:	bc30      	pop	{r4, r5}
 8003bfe:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8003c00:	2a0c      	cmp	r2, #12
 8003c02:	d80d      	bhi.n	8003c20 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c04:	6805      	ldr	r5, [r0, #0]
 8003c06:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8003c08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003c0c:	3a23      	subs	r2, #35	@ 0x23
 8003c0e:	241f      	movs	r4, #31
 8003c10:	4094      	lsls	r4, r2
 8003c12:	ea20 0004 	bic.w	r0, r0, r4
 8003c16:	680c      	ldr	r4, [r1, #0]
 8003c18:	4094      	lsls	r4, r2
 8003c1a:	4320      	orrs	r0, r4
 8003c1c:	6328      	str	r0, [r5, #48]	@ 0x30
 8003c1e:	e7d1      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003c20:	6805      	ldr	r5, [r0, #0]
 8003c22:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8003c24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003c28:	3a41      	subs	r2, #65	@ 0x41
 8003c2a:	241f      	movs	r4, #31
 8003c2c:	4094      	lsls	r4, r2
 8003c2e:	ea20 0004 	bic.w	r0, r0, r4
 8003c32:	680c      	ldr	r4, [r1, #0]
 8003c34:	4094      	lsls	r4, r2
 8003c36:	4320      	orrs	r0, r4
 8003c38:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8003c3a:	e7c3      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003c3c:	681c      	ldr	r4, [r3, #0]
 8003c3e:	6920      	ldr	r0, [r4, #16]
 8003c40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003c44:	f04f 0c07 	mov.w	ip, #7
 8003c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8003c4c:	ea20 000c 	bic.w	r0, r0, ip
 8003c50:	688d      	ldr	r5, [r1, #8]
 8003c52:	fa05 f202 	lsl.w	r2, r5, r2
 8003c56:	4302      	orrs	r2, r0
 8003c58:	6122      	str	r2, [r4, #16]
 8003c5a:	e7c6      	b.n	8003bea <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	4a18      	ldr	r2, [pc, #96]	@ (8003cc0 <HAL_ADC_ConfigChannel+0x13c>)
 8003c60:	4290      	cmp	r0, r2
 8003c62:	d005      	beq.n	8003c70 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c66:	f042 0220 	orr.w	r2, r2, #32
 8003c6a:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	e7c1      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003c70:	6892      	ldr	r2, [r2, #8]
 8003c72:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 8003c76:	d11d      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003c78:	4811      	ldr	r0, [pc, #68]	@ (8003cc0 <HAL_ADC_ConfigChannel+0x13c>)
 8003c7a:	6882      	ldr	r2, [r0, #8]
 8003c7c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003c80:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c82:	680a      	ldr	r2, [r1, #0]
 8003c84:	2a10      	cmp	r2, #16
 8003c86:	d001      	beq.n	8003c8c <HAL_ADC_ConfigChannel+0x108>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e7b3      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x140>)
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	490d      	ldr	r1, [pc, #52]	@ (8003cc8 <HAL_ADC_ConfigChannel+0x144>)
 8003c92:	fba1 1202 	umull	r1, r2, r1, r2
 8003c96:	0c92      	lsrs	r2, r2, #18
 8003c98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003c9c:	0052      	lsls	r2, r2, #1
 8003c9e:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003ca0:	9a01      	ldr	r2, [sp, #4]
 8003ca2:	b14a      	cbz	r2, 8003cb8 <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 8003ca4:	9a01      	ldr	r2, [sp, #4]
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003caa:	9a01      	ldr	r2, [sp, #4]
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	d1f9      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	e79f      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x70>
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	e79d      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x70>
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e79b      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003cbc:	2002      	movs	r0, #2
 8003cbe:	e79c      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x76>
 8003cc0:	40012400 	.word	0x40012400
 8003cc4:	2000010c 	.word	0x2000010c
 8003cc8:	431bde83 	.word	0x431bde83

08003ccc <ADC_Enable>:
{
 8003ccc:	b530      	push	{r4, r5, lr}
 8003cce:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003cd4:	6803      	ldr	r3, [r0, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	f012 0f01 	tst.w	r2, #1
 8003cdc:	d13b      	bne.n	8003d56 <ADC_Enable+0x8a>
 8003cde:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d5c <ADC_Enable+0x90>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1c      	ldr	r2, [pc, #112]	@ (8003d60 <ADC_Enable+0x94>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0c9b      	lsrs	r3, r3, #18
 8003cf4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003cf6:	9b01      	ldr	r3, [sp, #4]
 8003cf8:	b12b      	cbz	r3, 8003d06 <ADC_Enable+0x3a>
      wait_loop_index--;
 8003cfa:	9b01      	ldr	r3, [sp, #4]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003d00:	9b01      	ldr	r3, [sp, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f9      	bne.n	8003cfa <ADC_Enable+0x2e>
    tickstart = HAL_GetTick();
 8003d06:	f7ff fe63 	bl	80039d0 <HAL_GetTick>
 8003d0a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f013 0f01 	tst.w	r3, #1
 8003d14:	d006      	beq.n	8003d24 <ADC_Enable+0x58>
  return HAL_OK;
 8003d16:	2000      	movs	r0, #0
 8003d18:	e01e      	b.n	8003d58 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f013 0f01 	tst.w	r3, #1
 8003d22:	d116      	bne.n	8003d52 <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d24:	f7ff fe54 	bl	80039d0 <HAL_GetTick>
 8003d28:	1b43      	subs	r3, r0, r5
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d9f5      	bls.n	8003d1a <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f013 0f01 	tst.w	r3, #1
 8003d36:	d1f0      	bne.n	8003d1a <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d3a:	f043 0310 	orr.w	r3, r3, #16
 8003d3e:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e002      	b.n	8003d58 <ADC_Enable+0x8c>
  return HAL_OK;
 8003d52:	2000      	movs	r0, #0
 8003d54:	e000      	b.n	8003d58 <ADC_Enable+0x8c>
 8003d56:	2000      	movs	r0, #0
}
 8003d58:	b003      	add	sp, #12
 8003d5a:	bd30      	pop	{r4, r5, pc}
 8003d5c:	2000010c 	.word	0x2000010c
 8003d60:	431bde83 	.word	0x431bde83

08003d64 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8003d64:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d066      	beq.n	8003e3a <HAL_ADC_Start+0xd6>
{
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003d70:	2301      	movs	r3, #1
 8003d72:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8003d76:	f7ff ffa9 	bl	8003ccc <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d159      	bne.n	8003e32 <HAL_ADC_Start+0xce>
    ADC_STATE_CLR_SET(hadc->State,
 8003d7e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d8c:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	4a2b      	ldr	r2, [pc, #172]	@ (8003e40 <HAL_ADC_Start+0xdc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d028      	beq.n	8003de8 <HAL_ADC_Start+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d96:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003d98:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003d9c:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003da4:	d005      	beq.n	8003db2 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003da6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003da8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003dac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003db0:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003db2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003db4:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003db8:	bf1a      	itte	ne
 8003dba:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 8003dbc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003dc0:	2200      	moveq	r2, #0
 8003dc2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003dca:	f06f 0202 	mvn.w	r2, #2
 8003dce:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8003dd8:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8003ddc:	d01a      	beq.n	8003e14 <HAL_ADC_Start+0xb0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	e027      	b.n	8003e38 <HAL_ADC_Start+0xd4>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003de8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8003dec:	6852      	ldr	r2, [r2, #4]
 8003dee:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8003df2:	d0d0      	beq.n	8003d96 <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003df4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003df6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003dfa:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003dfc:	4a11      	ldr	r2, [pc, #68]	@ (8003e44 <HAL_ADC_Start+0xe0>)
 8003dfe:	6852      	ldr	r2, [r2, #4]
 8003e00:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003e04:	d0d5      	beq.n	8003db2 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e06:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003e08:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003e0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e10:	62a2      	str	r2, [r4, #40]	@ 0x28
 8003e12:	e7ce      	b.n	8003db2 <HAL_ADC_Start+0x4e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003e14:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <HAL_ADC_Start+0xdc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_ADC_Start+0xc0>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003e20:	609a      	str	r2, [r3, #8]
 8003e22:	e009      	b.n	8003e38 <HAL_ADC_Start+0xd4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003e24:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8003e28:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003e2a:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8003e2e:	d1d6      	bne.n	8003dde <HAL_ADC_Start+0x7a>
 8003e30:	e7f3      	b.n	8003e1a <HAL_ADC_Start+0xb6>
    __HAL_UNLOCK(hadc);
 8003e32:	2300      	movs	r3, #0
 8003e34:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8003e38:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003e3a:	2002      	movs	r0, #2
}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40012800 	.word	0x40012800
 8003e44:	40012400 	.word	0x40012400

08003e48 <HAL_ADC_Start_DMA>:
{
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	460d      	mov	r5, r1
 8003e4e:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003e50:	6801      	ldr	r1, [r0, #0]
 8003e52:	4842      	ldr	r0, [pc, #264]	@ (8003f5c <HAL_ADC_Start_DMA+0x114>)
 8003e54:	4281      	cmp	r1, r0
 8003e56:	d05d      	beq.n	8003f14 <HAL_ADC_Start_DMA+0xcc>
 8003e58:	4b41      	ldr	r3, [pc, #260]	@ (8003f60 <HAL_ADC_Start_DMA+0x118>)
 8003e5a:	4299      	cmp	r1, r3
 8003e5c:	d05a      	beq.n	8003f14 <HAL_ADC_Start_DMA+0xcc>
    __HAL_LOCK(hadc);
 8003e5e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d077      	beq.n	8003f56 <HAL_ADC_Start_DMA+0x10e>
 8003e66:	2301      	movs	r3, #1
 8003e68:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f7ff ff2d 	bl	8003ccc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003e72:	4607      	mov	r7, r0
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d16a      	bne.n	8003f4e <HAL_ADC_Start_DMA+0x106>
      ADC_STATE_CLR_SET(hadc->State,
 8003e78:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003e7a:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8003e7e:	f021 0101 	bic.w	r1, r1, #1
 8003e82:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8003e86:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e88:	6822      	ldr	r2, [r4, #0]
 8003e8a:	4b35      	ldr	r3, [pc, #212]	@ (8003f60 <HAL_ADC_Start_DMA+0x118>)
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d048      	beq.n	8003f22 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e90:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003e92:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003e96:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e98:	6853      	ldr	r3, [r2, #4]
 8003e9a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003e9e:	d005      	beq.n	8003eac <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ea0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003ea2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ea6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003eaa:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003eae:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003eb2:	bf1a      	itte	ne
 8003eb4:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
 8003eb6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ec4:	6a23      	ldr	r3, [r4, #32]
 8003ec6:	4a27      	ldr	r2, [pc, #156]	@ (8003f64 <HAL_ADC_Start_DMA+0x11c>)
 8003ec8:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003eca:	6a23      	ldr	r3, [r4, #32]
 8003ecc:	4a26      	ldr	r2, [pc, #152]	@ (8003f68 <HAL_ADC_Start_DMA+0x120>)
 8003ece:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ed0:	6a23      	ldr	r3, [r4, #32]
 8003ed2:	4a26      	ldr	r2, [pc, #152]	@ (8003f6c <HAL_ADC_Start_DMA+0x124>)
 8003ed4:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	f06f 0202 	mvn.w	r2, #2
 8003edc:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	6893      	ldr	r3, [r2, #8]
 8003ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee6:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ee8:	6821      	ldr	r1, [r4, #0]
 8003eea:	4633      	mov	r3, r6
 8003eec:	462a      	mov	r2, r5
 8003eee:	314c      	adds	r1, #76	@ 0x4c
 8003ef0:	6a20      	ldr	r0, [r4, #32]
 8003ef2:	f000 f995 	bl	8004220 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8003efe:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	bf0c      	ite	eq
 8003f06:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003f0a:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	4638      	mov	r0, r7
 8003f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003f14:	4b11      	ldr	r3, [pc, #68]	@ (8003f5c <HAL_ADC_Start_DMA+0x114>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8003f1c:	d09f      	beq.n	8003e5e <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8003f1e:	2701      	movs	r7, #1
 8003f20:	e7f6      	b.n	8003f10 <HAL_ADC_Start_DMA+0xc8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003f22:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8003f2c:	d0b0      	beq.n	8003e90 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003f30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f34:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003f36:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <HAL_ADC_Start_DMA+0x114>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003f3e:	d0b5      	beq.n	8003eac <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f40:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003f42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f4c:	e7ae      	b.n	8003eac <HAL_ADC_Start_DMA+0x64>
      __HAL_UNLOCK(hadc);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8003f54:	e7dc      	b.n	8003f10 <HAL_ADC_Start_DMA+0xc8>
    __HAL_LOCK(hadc);
 8003f56:	2702      	movs	r7, #2
 8003f58:	e7da      	b.n	8003f10 <HAL_ADC_Start_DMA+0xc8>
 8003f5a:	bf00      	nop
 8003f5c:	40012400 	.word	0x40012400
 8003f60:	40012800 	.word	0x40012800
 8003f64:	08003a07 	.word	0x08003a07
 8003f68:	08003a5b 	.word	0x08003a5b
 8003f6c:	08003b6b 	.word	0x08003b6b

08003f70 <ADC_ConversionStop_Disable>:
{
 8003f70:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003f72:	6803      	ldr	r3, [r0, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	f012 0f01 	tst.w	r2, #1
 8003f7a:	d101      	bne.n	8003f80 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8003f7c:	2000      	movs	r0, #0
}
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003f8a:	f7ff fd21 	bl	80039d0 <HAL_GetTick>
 8003f8e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f013 0f01 	tst.w	r3, #1
 8003f98:	d106      	bne.n	8003fa8 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e7ef      	b.n	8003f7e <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f013 0f01 	tst.w	r3, #1
 8003fa6:	d013      	beq.n	8003fd0 <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fa8:	f7ff fd12 	bl	80039d0 <HAL_GetTick>
 8003fac:	1b43      	subs	r3, r0, r5
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d9f5      	bls.n	8003f9e <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f013 0f01 	tst.w	r3, #1
 8003fba:	d0f0      	beq.n	8003f9e <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fbc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003fbe:	f043 0310 	orr.w	r3, r3, #16
 8003fc2:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8003fcc:	2001      	movs	r0, #1
 8003fce:	e7d6      	b.n	8003f7e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e7d4      	b.n	8003f7e <ADC_ConversionStop_Disable+0xe>

08003fd4 <HAL_ADC_Init>:
  if(hadc == NULL)
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d07a      	beq.n	80040ce <HAL_ADC_Init+0xfa>
{
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fdc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d04f      	beq.n	8004082 <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f7ff ffc4 	bl	8003f70 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003fe8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003fea:	f013 0310 	ands.w	r3, r3, #16
 8003fee:	d168      	bne.n	80040c2 <HAL_ADC_Init+0xee>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d166      	bne.n	80040c2 <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 8003ff4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003ff6:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8003ffa:	f022 0202 	bic.w	r2, r2, #2
 8003ffe:	f042 0202 	orr.w	r2, r2, #2
 8004002:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004004:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004006:	6862      	ldr	r2, [r4, #4]
 8004008:	69e5      	ldr	r5, [r4, #28]
 800400a:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800400c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004010:	68a5      	ldr	r5, [r4, #8]
 8004012:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8004016:	d004      	beq.n	8004022 <HAL_ADC_Init+0x4e>
 8004018:	2d01      	cmp	r5, #1
 800401a:	bf14      	ite	ne
 800401c:	2500      	movne	r5, #0
 800401e:	2501      	moveq	r5, #1
 8004020:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004022:	7d26      	ldrb	r6, [r4, #20]
 8004024:	2e01      	cmp	r6, #1
 8004026:	d032      	beq.n	800408e <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 8004028:	6826      	ldr	r6, [r4, #0]
 800402a:	6871      	ldr	r1, [r6, #4]
 800402c:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8004030:	4329      	orrs	r1, r5
 8004032:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8004034:	6825      	ldr	r5, [r4, #0]
 8004036:	68ae      	ldr	r6, [r5, #8]
 8004038:	4926      	ldr	r1, [pc, #152]	@ (80040d4 <HAL_ADC_Init+0x100>)
 800403a:	4031      	ands	r1, r6
 800403c:	4311      	orrs	r1, r2
 800403e:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004040:	68a1      	ldr	r1, [r4, #8]
 8004042:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004046:	d001      	beq.n	800404c <HAL_ADC_Init+0x78>
 8004048:	2901      	cmp	r1, #1
 800404a:	d102      	bne.n	8004052 <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800404c:	6923      	ldr	r3, [r4, #16]
 800404e:	3b01      	subs	r3, #1
 8004050:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8004052:	6825      	ldr	r5, [r4, #0]
 8004054:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8004056:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 800405a:	430b      	orrs	r3, r1
 800405c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	6899      	ldr	r1, [r3, #8]
 8004062:	4b1d      	ldr	r3, [pc, #116]	@ (80040d8 <HAL_ADC_Init+0x104>)
 8004064:	400b      	ands	r3, r1
 8004066:	429a      	cmp	r2, r3
 8004068:	d022      	beq.n	80040b0 <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 800406a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800406c:	f023 0312 	bic.w	r3, r3, #18
 8004070:	f043 0310 	orr.w	r3, r3, #16
 8004074:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004076:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 800407e:	2001      	movs	r0, #1
 8004080:	e024      	b.n	80040cc <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 8004082:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8004084:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8004088:	f7ff f958 	bl	800333c <HAL_ADC_MspInit>
 800408c:	e7a9      	b.n	8003fe2 <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800408e:	b931      	cbnz	r1, 800409e <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004090:	69a1      	ldr	r1, [r4, #24]
 8004092:	3901      	subs	r1, #1
 8004094:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8004098:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 800409c:	e7c4      	b.n	8004028 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800409e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80040a0:	f041 0120 	orr.w	r1, r1, #32
 80040a4:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80040a8:	f041 0101 	orr.w	r1, r1, #1
 80040ac:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80040ae:	e7bb      	b.n	8004028 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 80040b0:	2300      	movs	r3, #0
 80040b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80040b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040c0:	e004      	b.n	80040cc <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80040c4:	f043 0310 	orr.w	r3, r3, #16
 80040c8:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 80040ca:	2001      	movs	r0, #1
}
 80040cc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80040ce:	2001      	movs	r0, #1
}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	ffe1f7fd 	.word	0xffe1f7fd
 80040d8:	ff1f0efe 	.word	0xff1f0efe

080040dc <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80040dc:	4770      	bx	lr
	...

080040e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e0:	4907      	ldr	r1, [pc, #28]	@ (8004100 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80040e2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80040e4:	0203      	lsls	r3, r0, #8
 80040e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ee:	0412      	lsls	r2, r2, #16
 80040f0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80040fc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80040fe:	4770      	bx	lr
 8004100:	e000ed00 	.word	0xe000ed00

08004104 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004104:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004106:	4b18      	ldr	r3, [pc, #96]	@ (8004168 <HAL_NVIC_SetPriority+0x64>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800410e:	f1c3 0c07 	rsb	ip, r3, #7
 8004112:	f1bc 0f04 	cmp.w	ip, #4
 8004116:	bf28      	it	cs
 8004118:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411c:	f103 0e04 	add.w	lr, r3, #4
 8004120:	f1be 0f06 	cmp.w	lr, #6
 8004124:	bf8c      	ite	hi
 8004126:	3b03      	subhi	r3, #3
 8004128:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800412a:	f04f 3eff 	mov.w	lr, #4294967295
 800412e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004132:	ea21 010c 	bic.w	r1, r1, ip
 8004136:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004138:	fa0e fe03 	lsl.w	lr, lr, r3
 800413c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004140:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004142:	2800      	cmp	r0, #0
 8004144:	db09      	blt.n	800415a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004146:	0109      	lsls	r1, r1, #4
 8004148:	b2c9      	uxtb	r1, r1
 800414a:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800414e:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004152:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004156:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415a:	f000 000f 	and.w	r0, r0, #15
 800415e:	0109      	lsls	r1, r1, #4
 8004160:	b2c9      	uxtb	r1, r1
 8004162:	4b02      	ldr	r3, [pc, #8]	@ (800416c <HAL_NVIC_SetPriority+0x68>)
 8004164:	5419      	strb	r1, [r3, r0]
 8004166:	e7f6      	b.n	8004156 <HAL_NVIC_SetPriority+0x52>
 8004168:	e000ed00 	.word	0xe000ed00
 800416c:	e000ed14 	.word	0xe000ed14

08004170 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004170:	2800      	cmp	r0, #0
 8004172:	db07      	blt.n	8004184 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004174:	0941      	lsrs	r1, r0, #5
 8004176:	f000 001f 	and.w	r0, r0, #31
 800417a:	2301      	movs	r3, #1
 800417c:	4083      	lsls	r3, r0
 800417e:	4a02      	ldr	r2, [pc, #8]	@ (8004188 <HAL_NVIC_EnableIRQ+0x18>)
 8004180:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	e000e100 	.word	0xe000e100

0800418c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800418c:	3801      	subs	r0, #1
 800418e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004192:	d20b      	bcs.n	80041ac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004194:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004198:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419a:	4a05      	ldr	r2, [pc, #20]	@ (80041b0 <HAL_SYSTICK_Config+0x24>)
 800419c:	21f0      	movs	r1, #240	@ 0xf0
 800419e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041a2:	2000      	movs	r0, #0
 80041a4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041a6:	2207      	movs	r2, #7
 80041a8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041aa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80041ac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80041ae:	4770      	bx	lr
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041b4:	b360      	cbz	r0, 8004210 <HAL_DMA_Init+0x5c>
{
 80041b6:	b410      	push	{r4}
 80041b8:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041ba:	6801      	ldr	r1, [r0, #0]
 80041bc:	4b15      	ldr	r3, [pc, #84]	@ (8004214 <HAL_DMA_Init+0x60>)
 80041be:	440b      	add	r3, r1
 80041c0:	4815      	ldr	r0, [pc, #84]	@ (8004218 <HAL_DMA_Init+0x64>)
 80041c2:	fba0 0303 	umull	r0, r3, r0, r3
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80041cc:	4b13      	ldr	r3, [pc, #76]	@ (800421c <HAL_DMA_Init+0x68>)
 80041ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041d0:	2302      	movs	r3, #2
 80041d2:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041d6:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041d8:	f420 507f 	bic.w	r0, r0, #16320	@ 0x3fc0
 80041dc:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041e0:	6853      	ldr	r3, [r2, #4]
 80041e2:	6894      	ldr	r4, [r2, #8]
 80041e4:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e6:	68d4      	ldr	r4, [r2, #12]
 80041e8:	4323      	orrs	r3, r4
 80041ea:	6914      	ldr	r4, [r2, #16]
 80041ec:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ee:	6954      	ldr	r4, [r2, #20]
 80041f0:	4323      	orrs	r3, r4
 80041f2:	6994      	ldr	r4, [r2, #24]
 80041f4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80041f6:	69d4      	ldr	r4, [r2, #28]
 80041f8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80041fa:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041fc:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041fe:	2000      	movs	r0, #0
 8004200:	6390      	str	r0, [r2, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004202:	2301      	movs	r3, #1
 8004204:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004208:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 800420c:	bc10      	pop	{r4}
 800420e:	4770      	bx	lr
    return HAL_ERROR;
 8004210:	2001      	movs	r0, #1
}
 8004212:	4770      	bx	lr
 8004214:	bffdfff8 	.word	0xbffdfff8
 8004218:	cccccccd 	.word	0xcccccccd
 800421c:	40020000 	.word	0x40020000

08004220 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004220:	f890 c020 	ldrb.w	ip, [r0, #32]
 8004224:	f1bc 0f01 	cmp.w	ip, #1
 8004228:	d047      	beq.n	80042ba <HAL_DMA_Start_IT+0x9a>
 800422a:	f04f 0c01 	mov.w	ip, #1
 800422e:	f880 c020 	strb.w	ip, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004232:	f890 c021 	ldrb.w	ip, [r0, #33]	@ 0x21
 8004236:	fa5f fc8c 	uxtb.w	ip, ip
 800423a:	f1bc 0f01 	cmp.w	ip, #1
 800423e:	d004      	beq.n	800424a <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004240:	2300      	movs	r3, #0
 8004242:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004246:	2002      	movs	r0, #2
 8004248:	4770      	bx	lr
{
 800424a:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 800424c:	2402      	movs	r4, #2
 800424e:	f880 4021 	strb.w	r4, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004252:	2400      	movs	r4, #0
 8004254:	6384      	str	r4, [r0, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8004256:	6805      	ldr	r5, [r0, #0]
 8004258:	682c      	ldr	r4, [r5, #0]
 800425a:	f024 0401 	bic.w	r4, r4, #1
 800425e:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004260:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8004262:	2401      	movs	r4, #1
 8004264:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8004266:	40b4      	lsls	r4, r6
 8004268:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800426a:	6804      	ldr	r4, [r0, #0]
 800426c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800426e:	6843      	ldr	r3, [r0, #4]
 8004270:	2b10      	cmp	r3, #16
 8004272:	d012      	beq.n	800429a <HAL_DMA_Start_IT+0x7a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004274:	6803      	ldr	r3, [r0, #0]
 8004276:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004278:	6803      	ldr	r3, [r0, #0]
 800427a:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800427c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800427e:	b18b      	cbz	r3, 80042a4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004280:	6802      	ldr	r2, [r0, #0]
 8004282:	6813      	ldr	r3, [r2, #0]
 8004284:	f043 030e 	orr.w	r3, r3, #14
 8004288:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800428a:	6802      	ldr	r2, [r0, #0]
 800428c:	6813      	ldr	r3, [r2, #0]
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004294:	2000      	movs	r0, #0
}
 8004296:	bc70      	pop	{r4, r5, r6}
 8004298:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800429a:	6803      	ldr	r3, [r0, #0]
 800429c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800429e:	6803      	ldr	r3, [r0, #0]
 80042a0:	60d9      	str	r1, [r3, #12]
 80042a2:	e7eb      	b.n	800427c <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042a4:	6802      	ldr	r2, [r0, #0]
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	f023 0304 	bic.w	r3, r3, #4
 80042ac:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042ae:	6802      	ldr	r2, [r0, #0]
 80042b0:	6813      	ldr	r3, [r2, #0]
 80042b2:	f043 030a 	orr.w	r3, r3, #10
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e7e7      	b.n	800428a <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 80042ba:	2002      	movs	r0, #2
}
 80042bc:	4770      	bx	lr

080042be <HAL_DMA_Abort>:
{
 80042be:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042c0:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	2a02      	cmp	r2, #2
 80042c8:	d006      	beq.n	80042d8 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ca:	2204      	movs	r2, #4
 80042cc:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80042ce:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2020 	strb.w	r2, [r3, #32]
}
 80042d6:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042d8:	6801      	ldr	r1, [r0, #0]
 80042da:	680a      	ldr	r2, [r1, #0]
 80042dc:	f022 020e 	bic.w	r2, r2, #14
 80042e0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80042e2:	6801      	ldr	r1, [r0, #0]
 80042e4:	680a      	ldr	r2, [r1, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042ec:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80042ee:	2101      	movs	r1, #1
 80042f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042f2:	fa01 f202 	lsl.w	r2, r1, r2
 80042f6:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80042f8:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 80042fc:	2000      	movs	r0, #0
 80042fe:	e7e7      	b.n	80042d0 <HAL_DMA_Abort+0x12>

08004300 <HAL_DMA_Abort_IT>:
{  
 8004300:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004302:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d003      	beq.n	8004314 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800430c:	2304      	movs	r3, #4
 800430e:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8004310:	2001      	movs	r0, #1
}
 8004312:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004314:	6802      	ldr	r2, [r0, #0]
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	f023 030e 	bic.w	r3, r3, #14
 800431c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800431e:	6802      	ldr	r2, [r0, #0]
 8004320:	6813      	ldr	r3, [r2, #0]
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004328:	6803      	ldr	r3, [r0, #0]
 800432a:	4a19      	ldr	r2, [pc, #100]	@ (8004390 <HAL_DMA_Abort_IT+0x90>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <HAL_DMA_Abort_IT+0x58>
 8004330:	3214      	adds	r2, #20
 8004332:	4293      	cmp	r3, r2
 8004334:	d01e      	beq.n	8004374 <HAL_DMA_Abort_IT+0x74>
 8004336:	3214      	adds	r2, #20
 8004338:	4293      	cmp	r3, r2
 800433a:	d01d      	beq.n	8004378 <HAL_DMA_Abort_IT+0x78>
 800433c:	3214      	adds	r2, #20
 800433e:	4293      	cmp	r3, r2
 8004340:	d01d      	beq.n	800437e <HAL_DMA_Abort_IT+0x7e>
 8004342:	3214      	adds	r2, #20
 8004344:	4293      	cmp	r3, r2
 8004346:	d01d      	beq.n	8004384 <HAL_DMA_Abort_IT+0x84>
 8004348:	3214      	adds	r2, #20
 800434a:	4293      	cmp	r3, r2
 800434c:	bf14      	ite	ne
 800434e:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8004352:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8004356:	e000      	b.n	800435a <HAL_DMA_Abort_IT+0x5a>
 8004358:	2301      	movs	r3, #1
 800435a:	4a0e      	ldr	r2, [pc, #56]	@ (8004394 <HAL_DMA_Abort_IT+0x94>)
 800435c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800435e:	2301      	movs	r3, #1
 8004360:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8004364:	2300      	movs	r3, #0
 8004366:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800436a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800436c:	b16b      	cbz	r3, 800438a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800436e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2000      	movs	r0, #0
 8004372:	e7ce      	b.n	8004312 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004374:	2310      	movs	r3, #16
 8004376:	e7f0      	b.n	800435a <HAL_DMA_Abort_IT+0x5a>
 8004378:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800437c:	e7ed      	b.n	800435a <HAL_DMA_Abort_IT+0x5a>
 800437e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004382:	e7ea      	b.n	800435a <HAL_DMA_Abort_IT+0x5a>
 8004384:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004388:	e7e7      	b.n	800435a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2000      	movs	r0, #0
 800438c:	e7c1      	b.n	8004312 <HAL_DMA_Abort_IT+0x12>
 800438e:	bf00      	nop
 8004390:	40020008 	.word	0x40020008
 8004394:	40020000 	.word	0x40020000

08004398 <HAL_DMA_IRQHandler>:
{
 8004398:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800439a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800439c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800439e:	6804      	ldr	r4, [r0, #0]
 80043a0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80043a2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80043a4:	2304      	movs	r3, #4
 80043a6:	408b      	lsls	r3, r1
 80043a8:	4213      	tst	r3, r2
 80043aa:	d034      	beq.n	8004416 <HAL_DMA_IRQHandler+0x7e>
 80043ac:	f015 0f04 	tst.w	r5, #4
 80043b0:	d031      	beq.n	8004416 <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	f013 0f20 	tst.w	r3, #32
 80043b8:	d103      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	f023 0304 	bic.w	r3, r3, #4
 80043c0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80043c2:	6803      	ldr	r3, [r0, #0]
 80043c4:	4a42      	ldr	r2, [pc, #264]	@ (80044d0 <HAL_DMA_IRQHandler+0x138>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x5a>
 80043ca:	3214      	adds	r2, #20
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d017      	beq.n	8004400 <HAL_DMA_IRQHandler+0x68>
 80043d0:	3214      	adds	r2, #20
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d016      	beq.n	8004404 <HAL_DMA_IRQHandler+0x6c>
 80043d6:	3214      	adds	r2, #20
 80043d8:	4293      	cmp	r3, r2
 80043da:	d016      	beq.n	800440a <HAL_DMA_IRQHandler+0x72>
 80043dc:	3214      	adds	r2, #20
 80043de:	4293      	cmp	r3, r2
 80043e0:	d016      	beq.n	8004410 <HAL_DMA_IRQHandler+0x78>
 80043e2:	3214      	adds	r2, #20
 80043e4:	4293      	cmp	r3, r2
 80043e6:	bf14      	ite	ne
 80043e8:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 80043ec:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 80043f0:	e000      	b.n	80043f4 <HAL_DMA_IRQHandler+0x5c>
 80043f2:	2304      	movs	r3, #4
 80043f4:	4a37      	ldr	r2, [pc, #220]	@ (80044d4 <HAL_DMA_IRQHandler+0x13c>)
 80043f6:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80043f8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80043fa:	b103      	cbz	r3, 80043fe <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 80043fc:	4798      	blx	r3
}
 80043fe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004400:	2340      	movs	r3, #64	@ 0x40
 8004402:	e7f7      	b.n	80043f4 <HAL_DMA_IRQHandler+0x5c>
 8004404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004408:	e7f4      	b.n	80043f4 <HAL_DMA_IRQHandler+0x5c>
 800440a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800440e:	e7f1      	b.n	80043f4 <HAL_DMA_IRQHandler+0x5c>
 8004410:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004414:	e7ee      	b.n	80043f4 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004416:	2302      	movs	r3, #2
 8004418:	408b      	lsls	r3, r1
 800441a:	4213      	tst	r3, r2
 800441c:	d03b      	beq.n	8004496 <HAL_DMA_IRQHandler+0xfe>
 800441e:	f015 0f02 	tst.w	r5, #2
 8004422:	d038      	beq.n	8004496 <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	f013 0f20 	tst.w	r3, #32
 800442a:	d106      	bne.n	800443a <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	f023 030a 	bic.w	r3, r3, #10
 8004432:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004434:	2301      	movs	r3, #1
 8004436:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800443a:	6803      	ldr	r3, [r0, #0]
 800443c:	4a24      	ldr	r2, [pc, #144]	@ (80044d0 <HAL_DMA_IRQHandler+0x138>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <HAL_DMA_IRQHandler+0xd2>
 8004442:	3214      	adds	r2, #20
 8004444:	4293      	cmp	r3, r2
 8004446:	d01b      	beq.n	8004480 <HAL_DMA_IRQHandler+0xe8>
 8004448:	3214      	adds	r2, #20
 800444a:	4293      	cmp	r3, r2
 800444c:	d01a      	beq.n	8004484 <HAL_DMA_IRQHandler+0xec>
 800444e:	3214      	adds	r2, #20
 8004450:	4293      	cmp	r3, r2
 8004452:	d01a      	beq.n	800448a <HAL_DMA_IRQHandler+0xf2>
 8004454:	3214      	adds	r2, #20
 8004456:	4293      	cmp	r3, r2
 8004458:	d01a      	beq.n	8004490 <HAL_DMA_IRQHandler+0xf8>
 800445a:	3214      	adds	r2, #20
 800445c:	4293      	cmp	r3, r2
 800445e:	bf14      	ite	ne
 8004460:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8004464:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8004468:	e000      	b.n	800446c <HAL_DMA_IRQHandler+0xd4>
 800446a:	2302      	movs	r3, #2
 800446c:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <HAL_DMA_IRQHandler+0x13c>)
 800446e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8004470:	2300      	movs	r3, #0
 8004472:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8004476:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0c0      	beq.n	80043fe <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 800447c:	4798      	blx	r3
 800447e:	e7be      	b.n	80043fe <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004480:	2320      	movs	r3, #32
 8004482:	e7f3      	b.n	800446c <HAL_DMA_IRQHandler+0xd4>
 8004484:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004488:	e7f0      	b.n	800446c <HAL_DMA_IRQHandler+0xd4>
 800448a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800448e:	e7ed      	b.n	800446c <HAL_DMA_IRQHandler+0xd4>
 8004490:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004494:	e7ea      	b.n	800446c <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004496:	2308      	movs	r3, #8
 8004498:	408b      	lsls	r3, r1
 800449a:	4213      	tst	r3, r2
 800449c:	d0af      	beq.n	80043fe <HAL_DMA_IRQHandler+0x66>
 800449e:	f015 0f08 	tst.w	r5, #8
 80044a2:	d0ac      	beq.n	80043fe <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	f023 030e 	bic.w	r3, r3, #14
 80044aa:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044ac:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80044ae:	2301      	movs	r3, #1
 80044b0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80044b2:	fa03 f202 	lsl.w	r2, r3, r2
 80044b6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044b8:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80044ba:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80044be:	2300      	movs	r3, #0
 80044c0:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80044c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d099      	beq.n	80043fe <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80044ca:	4798      	blx	r3
  return;
 80044cc:	e797      	b.n	80043fe <HAL_DMA_IRQHandler+0x66>
 80044ce:	bf00      	nop
 80044d0:	40020008 	.word	0x40020008
 80044d4:	40020000 	.word	0x40020000

080044d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044dc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044de:	f8d1 9000 	ldr.w	r9, [r1]
 80044e2:	f1b9 0f00 	cmp.w	r9, #0
 80044e6:	f000 8126 	beq.w	8004736 <HAL_GPIO_Init+0x25e>
 80044ea:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80044ec:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044ee:	4d93      	ldr	r5, [pc, #588]	@ (800473c <HAL_GPIO_Init+0x264>)
      switch (GPIO_Init->Mode)
 80044f0:	4c93      	ldr	r4, [pc, #588]	@ (8004740 <HAL_GPIO_Init+0x268>)
 80044f2:	4e94      	ldr	r6, [pc, #592]	@ (8004744 <HAL_GPIO_Init+0x26c>)
 80044f4:	f8df e250 	ldr.w	lr, [pc, #592]	@ 8004748 <HAL_GPIO_Init+0x270>
 80044f8:	4694      	mov	ip, r2
 80044fa:	e0be      	b.n	800467a <HAL_GPIO_Init+0x1a2>
 80044fc:	45a1      	cmp	r9, r4
 80044fe:	d00d      	beq.n	800451c <HAL_GPIO_Init+0x44>
 8004500:	d904      	bls.n	800450c <HAL_GPIO_Init+0x34>
 8004502:	45b1      	cmp	r9, r6
 8004504:	d00a      	beq.n	800451c <HAL_GPIO_Init+0x44>
 8004506:	45f1      	cmp	r9, lr
 8004508:	d008      	beq.n	800451c <HAL_GPIO_Init+0x44>
 800450a:	e01b      	b.n	8004544 <HAL_GPIO_Init+0x6c>
 800450c:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 800474c <HAL_GPIO_Init+0x274>
 8004510:	45d1      	cmp	r9, sl
 8004512:	d003      	beq.n	800451c <HAL_GPIO_Init+0x44>
 8004514:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 8004518:	45d1      	cmp	r9, sl
 800451a:	d10f      	bne.n	800453c <HAL_GPIO_Init+0x64>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800451c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004520:	f1bc 0f00 	cmp.w	ip, #0
 8004524:	f000 80fb 	beq.w	800471e <HAL_GPIO_Init+0x246>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004528:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 800452c:	bf0c      	ite	eq
 800452e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8004532:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004536:	f04f 0c08 	mov.w	ip, #8
 800453a:	e003      	b.n	8004544 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 800453c:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 8004540:	45d1      	cmp	r9, sl
 8004542:	d0eb      	beq.n	800451c <HAL_GPIO_Init+0x44>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004544:	2fff      	cmp	r7, #255	@ 0xff
 8004546:	bf99      	ittee	ls
 8004548:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800454a:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800454c:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004550:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004554:	f8d9 8000 	ldr.w	r8, [r9]
 8004558:	f04f 0b0f 	mov.w	fp, #15
 800455c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8004560:	ea28 080b 	bic.w	r8, r8, fp
 8004564:	fa0c fa0a 	lsl.w	sl, ip, sl
 8004568:	ea48 080a 	orr.w	r8, r8, sl
 800456c:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004570:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004574:	f018 5f80 	tst.w	r8, #268435456	@ 0x10000000
 8004578:	d078      	beq.n	800466c <HAL_GPIO_Init+0x194>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800457a:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800457e:	f048 0801 	orr.w	r8, r8, #1
 8004582:	f8c5 8018 	str.w	r8, [r5, #24]
 8004586:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800458a:	f008 0801 	and.w	r8, r8, #1
 800458e:	f8cd 8004 	str.w	r8, [sp, #4]
 8004592:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8004596:	f023 0803 	bic.w	r8, r3, #3
 800459a:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 800459e:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
 80045a2:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045a6:	f003 0b03 	and.w	fp, r3, #3
 80045aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80045ae:	f04f 090f 	mov.w	r9, #15
 80045b2:	fa09 f90b 	lsl.w	r9, r9, fp
 80045b6:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045ba:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 8004750 <HAL_GPIO_Init+0x278>
 80045be:	4548      	cmp	r0, r9
 80045c0:	f000 80b0 	beq.w	8004724 <HAL_GPIO_Init+0x24c>
 80045c4:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 80045c8:	4548      	cmp	r0, r9
 80045ca:	f000 80ae 	beq.w	800472a <HAL_GPIO_Init+0x252>
 80045ce:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 80045d2:	4548      	cmp	r0, r9
 80045d4:	f000 80ac 	beq.w	8004730 <HAL_GPIO_Init+0x258>
 80045d8:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 80045dc:	4548      	cmp	r0, r9
 80045de:	bf14      	ite	ne
 80045e0:	f04f 0904 	movne.w	r9, #4
 80045e4:	f04f 0903 	moveq.w	r9, #3
 80045e8:	fa09 f90b 	lsl.w	r9, r9, fp
 80045ec:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 80045f0:	f8c8 9008 	str.w	r9, [r8, #8]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80045f8:	f418 1f80 	tst.w	r8, #1048576	@ 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80045fc:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 8004754 <HAL_GPIO_Init+0x27c>
 8004600:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8004604:	bf14      	ite	ne
 8004606:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800460a:	ea28 0807 	biceq.w	r8, r8, r7
 800460e:	f8c9 8008 	str.w	r8, [r9, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004612:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004616:	f418 1f00 	tst.w	r8, #2097152	@ 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800461a:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8004754 <HAL_GPIO_Init+0x27c>
 800461e:	f8d9 800c 	ldr.w	r8, [r9, #12]
 8004622:	bf14      	ite	ne
 8004624:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004628:	ea28 0807 	biceq.w	r8, r8, r7
 800462c:	f8c9 800c 	str.w	r8, [r9, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004630:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004634:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004638:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 8004754 <HAL_GPIO_Init+0x27c>
 800463c:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8004640:	bf14      	ite	ne
 8004642:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004646:	ea28 0807 	biceq.w	r8, r8, r7
 800464a:	f8c9 8004 	str.w	r8, [r9, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800464e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004652:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004656:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8004754 <HAL_GPIO_Init+0x27c>
 800465a:	f8d9 8000 	ldr.w	r8, [r9]
 800465e:	bf14      	ite	ne
 8004660:	ea48 0707 	orrne.w	r7, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004664:	ea28 0707 	biceq.w	r7, r8, r7
 8004668:	f8c9 7000 	str.w	r7, [r9]
        }
      }
    }

	position++;
 800466c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800466e:	f8d1 9000 	ldr.w	r9, [r1]
 8004672:	3204      	adds	r2, #4
 8004674:	fa39 f703 	lsrs.w	r7, r9, r3
 8004678:	d05d      	beq.n	8004736 <HAL_GPIO_Init+0x25e>
    ioposition = (0x01uL << position);
 800467a:	f04f 0801 	mov.w	r8, #1
 800467e:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004682:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8004686:	ea38 0909 	bics.w	r9, r8, r9
 800468a:	d1ef      	bne.n	800466c <HAL_GPIO_Init+0x194>
      switch (GPIO_Init->Mode)
 800468c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8004690:	f1b9 0f12 	cmp.w	r9, #18
 8004694:	f63f af32 	bhi.w	80044fc <HAL_GPIO_Init+0x24>
 8004698:	f1b9 0f12 	cmp.w	r9, #18
 800469c:	f63f af52 	bhi.w	8004544 <HAL_GPIO_Init+0x6c>
 80046a0:	f20f 0a04 	addw	sl, pc, #4
 80046a4:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 80046a8:	0800451d 	.word	0x0800451d
 80046ac:	080046f5 	.word	0x080046f5
 80046b0:	08004705 	.word	0x08004705
 80046b4:	08004719 	.word	0x08004719
 80046b8:	08004545 	.word	0x08004545
 80046bc:	08004545 	.word	0x08004545
 80046c0:	08004545 	.word	0x08004545
 80046c4:	08004545 	.word	0x08004545
 80046c8:	08004545 	.word	0x08004545
 80046cc:	08004545 	.word	0x08004545
 80046d0:	08004545 	.word	0x08004545
 80046d4:	08004545 	.word	0x08004545
 80046d8:	08004545 	.word	0x08004545
 80046dc:	08004545 	.word	0x08004545
 80046e0:	08004545 	.word	0x08004545
 80046e4:	08004545 	.word	0x08004545
 80046e8:	08004545 	.word	0x08004545
 80046ec:	080046fb 	.word	0x080046fb
 80046f0:	0800470f 	.word	0x0800470f
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046f4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 80046f8:	e724      	b.n	8004544 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046fa:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80046fe:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8004702:	e71f      	b.n	8004544 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004704:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004708:	f10c 0c08 	add.w	ip, ip, #8
          break;
 800470c:	e71a      	b.n	8004544 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800470e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004712:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8004716:	e715      	b.n	8004544 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 8004718:	f04f 0c00 	mov.w	ip, #0
 800471c:	e712      	b.n	8004544 <HAL_GPIO_Init+0x6c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800471e:	f04f 0c04 	mov.w	ip, #4
 8004722:	e70f      	b.n	8004544 <HAL_GPIO_Init+0x6c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004724:	f04f 0900 	mov.w	r9, #0
 8004728:	e75e      	b.n	80045e8 <HAL_GPIO_Init+0x110>
 800472a:	f04f 0901 	mov.w	r9, #1
 800472e:	e75b      	b.n	80045e8 <HAL_GPIO_Init+0x110>
 8004730:	f04f 0902 	mov.w	r9, #2
 8004734:	e758      	b.n	80045e8 <HAL_GPIO_Init+0x110>
  }
}
 8004736:	b003      	add	sp, #12
 8004738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	10220000 	.word	0x10220000
 8004744:	10310000 	.word	0x10310000
 8004748:	10320000 	.word	0x10320000
 800474c:	10120000 	.word	0x10120000
 8004750:	40010800 	.word	0x40010800
 8004754:	40010400 	.word	0x40010400

08004758 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004758:	6883      	ldr	r3, [r0, #8]
 800475a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800475c:	bf14      	ite	ne
 800475e:	2001      	movne	r0, #1
 8004760:	2000      	moveq	r0, #0
 8004762:	4770      	bx	lr

08004764 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004764:	b10a      	cbz	r2, 800476a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004766:	6101      	str	r1, [r0, #16]
 8004768:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800476a:	0409      	lsls	r1, r1, #16
 800476c:	6101      	str	r1, [r0, #16]
  }
}
 800476e:	4770      	bx	lr

08004770 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004770:	4770      	bx	lr
	...

08004774 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004774:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004776:	4b05      	ldr	r3, [pc, #20]	@ (800478c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	4203      	tst	r3, r0
 800477c:	d100      	bne.n	8004780 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800477e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004780:	4b02      	ldr	r3, [pc, #8]	@ (800478c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004782:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004784:	f7ff fff4 	bl	8004770 <HAL_GPIO_EXTI_Callback>
}
 8004788:	e7f9      	b.n	800477e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800478a:	bf00      	nop
 800478c:	40010400 	.word	0x40010400

08004790 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004790:	6803      	ldr	r3, [r0, #0]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8004798:	d101      	bne.n	800479e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800479a:	2000      	movs	r0, #0
}
 800479c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800479e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047a2:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047a8:	2220      	movs	r2, #32
 80047aa:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ae:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047b2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80047b4:	f042 0204 	orr.w	r2, r2, #4
 80047b8:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80047ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80047be:	2001      	movs	r0, #1
 80047c0:	4770      	bx	lr

080047c2 <I2C_WaitOnFlagUntilTimeout>:
{
 80047c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c6:	4605      	mov	r5, r0
 80047c8:	460c      	mov	r4, r1
 80047ca:	4616      	mov	r6, r2
 80047cc:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ce:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80047d2:	f1b8 0f01 	cmp.w	r8, #1
 80047d6:	682b      	ldr	r3, [r5, #0]
 80047d8:	bf0c      	ite	eq
 80047da:	695b      	ldreq	r3, [r3, #20]
 80047dc:	699b      	ldrne	r3, [r3, #24]
 80047de:	ea24 0c03 	bic.w	ip, r4, r3
 80047e2:	fa1f fc8c 	uxth.w	ip, ip
 80047e6:	fabc fc8c 	clz	ip, ip
 80047ea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80047ee:	4566      	cmp	r6, ip
 80047f0:	d127      	bne.n	8004842 <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 80047f2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80047f6:	d0ec      	beq.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f8:	f7ff f8ea 	bl	80039d0 <HAL_GetTick>
 80047fc:	9b06      	ldr	r3, [sp, #24]
 80047fe:	1ac0      	subs	r0, r0, r3
 8004800:	42b8      	cmp	r0, r7
 8004802:	d801      	bhi.n	8004808 <I2C_WaitOnFlagUntilTimeout+0x46>
 8004804:	2f00      	cmp	r7, #0
 8004806:	d1e4      	bne.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004808:	f1b8 0f01 	cmp.w	r8, #1
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	bf0c      	ite	eq
 8004810:	695b      	ldreq	r3, [r3, #20]
 8004812:	699b      	ldrne	r3, [r3, #24]
 8004814:	ea24 0303 	bic.w	r3, r4, r3
 8004818:	b29b      	uxth	r3, r3
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	429e      	cmp	r6, r3
 8004822:	d1d6      	bne.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004824:	2300      	movs	r3, #0
 8004826:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004828:	2220      	movs	r2, #32
 800482a:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800482e:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004832:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8004834:	f042 0220 	orr.w	r2, r2, #32
 8004838:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800483a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 800483e:	2001      	movs	r0, #1
 8004840:	e000      	b.n	8004844 <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 8004842:	2000      	movs	r0, #0
}
 8004844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004848 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800484c:	4605      	mov	r5, r0
 800484e:	460e      	mov	r6, r1
 8004850:	4617      	mov	r7, r2
 8004852:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004854:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8004858:	f1b8 0f01 	cmp.w	r8, #1
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	bf0c      	ite	eq
 8004860:	695c      	ldreq	r4, [r3, #20]
 8004862:	699c      	ldrne	r4, [r3, #24]
 8004864:	ea26 0404 	bic.w	r4, r6, r4
 8004868:	b2a4      	uxth	r4, r4
 800486a:	3c00      	subs	r4, #0
 800486c:	bf18      	it	ne
 800486e:	2401      	movne	r4, #1
 8004870:	2c00      	cmp	r4, #0
 8004872:	d044      	beq.n	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800487c:	d127      	bne.n	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 800487e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004882:	d0e9      	beq.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004884:	f7ff f8a4 	bl	80039d0 <HAL_GetTick>
 8004888:	eba0 0009 	sub.w	r0, r0, r9
 800488c:	42b8      	cmp	r0, r7
 800488e:	d801      	bhi.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 8004890:	2f00      	cmp	r7, #0
 8004892:	d1e1      	bne.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004894:	f1b8 0f01 	cmp.w	r8, #1
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	bf0c      	ite	eq
 800489c:	695b      	ldreq	r3, [r3, #20]
 800489e:	699b      	ldrne	r3, [r3, #24]
 80048a0:	ea26 0303 	bic.w	r3, r6, r3
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b00      	subs	r3, #0
 80048a8:	bf18      	it	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0d3      	beq.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048b4:	2220      	movs	r2, #32
 80048b6:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ba:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048be:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80048c0:	f042 0220 	orr.w	r2, r2, #32
 80048c4:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80048c6:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80048ca:	2001      	movs	r0, #1
 80048cc:	e015      	b.n	80048fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048dc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048de:	2300      	movs	r3, #0
 80048e0:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048e2:	2220      	movs	r2, #32
 80048e4:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e8:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ec:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80048ee:	f042 0204 	orr.w	r2, r2, #4
 80048f2:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80048f4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80048f8:	2001      	movs	r0, #1
}
 80048fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80048fe:	2000      	movs	r0, #0
 8004900:	e7fb      	b.n	80048fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

08004902 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004902:	b570      	push	{r4, r5, r6, lr}
 8004904:	4604      	mov	r4, r0
 8004906:	460d      	mov	r5, r1
 8004908:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004912:	d121      	bne.n	8004958 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004914:	4620      	mov	r0, r4
 8004916:	f7ff ff3b 	bl	8004790 <I2C_IsAcknowledgeFailed>
 800491a:	b9f8      	cbnz	r0, 800495c <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800491c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004920:	d0f3      	beq.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7ff f855 	bl	80039d0 <HAL_GetTick>
 8004926:	1b80      	subs	r0, r0, r6
 8004928:	42a8      	cmp	r0, r5
 800492a:	d801      	bhi.n	8004930 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800492c:	2d00      	cmp	r5, #0
 800492e:	d1ec      	bne.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004938:	d1e7      	bne.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800493a:	2300      	movs	r3, #0
 800493c:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800493e:	2220      	movs	r2, #32
 8004940:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004944:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004948:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800494a:	f042 0220 	orr.w	r2, r2, #32
 800494e:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8004950:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8004954:	2001      	movs	r0, #1
 8004956:	e000      	b.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8004958:	2000      	movs	r0, #0
}
 800495a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800495c:	2001      	movs	r0, #1
 800495e:	e7fc      	b.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08004960 <I2C_RequestMemoryWrite>:
{
 8004960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004964:	b085      	sub	sp, #20
 8004966:	4604      	mov	r4, r0
 8004968:	460d      	mov	r5, r1
 800496a:	4691      	mov	r9, r2
 800496c:	461f      	mov	r7, r3
 800496e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8004972:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004974:	6803      	ldr	r3, [r0, #0]
 8004976:	6819      	ldr	r1, [r3, #0]
 8004978:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800497c:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800497e:	9600      	str	r6, [sp, #0]
 8004980:	4643      	mov	r3, r8
 8004982:	2200      	movs	r2, #0
 8004984:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004988:	f7ff ff1b 	bl	80047c2 <I2C_WaitOnFlagUntilTimeout>
 800498c:	b970      	cbnz	r0, 80049ac <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8004994:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004996:	4633      	mov	r3, r6
 8004998:	4642      	mov	r2, r8
 800499a:	4928      	ldr	r1, [pc, #160]	@ (8004a3c <I2C_RequestMemoryWrite+0xdc>)
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff ff53 	bl	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049a2:	b168      	cbz	r0, 80049c0 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80049a4:	2001      	movs	r0, #1
}
 80049a6:	b005      	add	sp, #20
 80049a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80049b4:	d040      	beq.n	8004a38 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80049ba:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80049bc:	2003      	movs	r0, #3
 80049be:	e7f2      	b.n	80049a6 <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	9303      	str	r3, [sp, #12]
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	9203      	str	r2, [sp, #12]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	9303      	str	r3, [sp, #12]
 80049ce:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d0:	4632      	mov	r2, r6
 80049d2:	4641      	mov	r1, r8
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7ff ff94 	bl	8004902 <I2C_WaitOnTXEFlagUntilTimeout>
 80049da:	b930      	cbnz	r0, 80049ea <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049dc:	2f01      	cmp	r7, #1
 80049de:	d110      	bne.n	8004a02 <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	fa5f f689 	uxtb.w	r6, r9
 80049e6:	611e      	str	r6, [r3, #16]
 80049e8:	e7dd      	b.n	80049a6 <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d001      	beq.n	80049f4 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80049f0:	2001      	movs	r0, #1
 80049f2:	e7d8      	b.n	80049a6 <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049fc:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80049fe:	2001      	movs	r0, #1
 8004a00:	e7d1      	b.n	80049a6 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8004a08:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a0a:	4632      	mov	r2, r6
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f7ff ff77 	bl	8004902 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a14:	b920      	cbnz	r0, 8004a20 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	fa5f f689 	uxtb.w	r6, r9
 8004a1c:	611e      	str	r6, [r3, #16]
 8004a1e:	e7c2      	b.n	80049a6 <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d001      	beq.n	8004a2a <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 8004a26:	2001      	movs	r0, #1
 8004a28:	e7bd      	b.n	80049a6 <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2a:	6822      	ldr	r2, [r4, #0]
 8004a2c:	6813      	ldr	r3, [r2, #0]
 8004a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a32:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004a34:	2001      	movs	r0, #1
 8004a36:	e7b6      	b.n	80049a6 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8004a38:	2003      	movs	r0, #3
 8004a3a:	e7b4      	b.n	80049a6 <I2C_RequestMemoryWrite+0x46>
 8004a3c:	00010002 	.word	0x00010002

08004a40 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	4604      	mov	r4, r0
 8004a44:	460d      	mov	r5, r1
 8004a46:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f013 0f04 	tst.w	r3, #4
 8004a50:	d121      	bne.n	8004a96 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a52:	4620      	mov	r0, r4
 8004a54:	f7ff fe9c 	bl	8004790 <I2C_IsAcknowledgeFailed>
 8004a58:	b9f8      	cbnz	r0, 8004a9a <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004a5e:	d0f3      	beq.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a60:	f7fe ffb6 	bl	80039d0 <HAL_GetTick>
 8004a64:	1b80      	subs	r0, r0, r6
 8004a66:	42a8      	cmp	r0, r5
 8004a68:	d801      	bhi.n	8004a6e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	d1ec      	bne.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f013 0f04 	tst.w	r3, #4
 8004a76:	d1e7      	bne.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a82:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a86:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004a88:	f042 0220 	orr.w	r2, r2, #32
 8004a8c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8004a8e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8004a92:	2001      	movs	r0, #1
 8004a94:	e000      	b.n	8004a98 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8004a96:	2000      	movs	r0, #0
}
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	e7fc      	b.n	8004a98 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
	...

08004aa0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	f000 80b1 	beq.w	8004c08 <HAL_I2C_Init+0x168>
{
 8004aa6:	b538      	push	{r3, r4, r5, lr}
 8004aa8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aaa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d074      	beq.n	8004b9c <HAL_I2C_Init+0xfc>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab2:	2324      	movs	r3, #36	@ 0x24
 8004ab4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004ab8:	6822      	ldr	r2, [r4, #0]
 8004aba:	6813      	ldr	r3, [r2, #0]
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ac2:	6822      	ldr	r2, [r4, #0]
 8004ac4:	6813      	ldr	r3, [r2, #0]
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aca:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	6813      	ldr	r3, [r2, #0]
 8004ad0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ad4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ad6:	f000 fc53 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ada:	6862      	ldr	r2, [r4, #4]
 8004adc:	4b4c      	ldr	r3, [pc, #304]	@ (8004c10 <HAL_I2C_Init+0x170>)
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d861      	bhi.n	8004ba6 <HAL_I2C_Init+0x106>
 8004ae2:	4b4c      	ldr	r3, [pc, #304]	@ (8004c14 <HAL_I2C_Init+0x174>)
 8004ae4:	4298      	cmp	r0, r3
 8004ae6:	f240 8091 	bls.w	8004c0c <HAL_I2C_Init+0x16c>
  freqrange = I2C_FREQRANGE(pclk1);
 8004aea:	494b      	ldr	r1, [pc, #300]	@ (8004c18 <HAL_I2C_Init+0x178>)
 8004aec:	fba1 3100 	umull	r3, r1, r1, r0
 8004af0:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004af2:	6825      	ldr	r5, [r4, #0]
 8004af4:	686a      	ldr	r2, [r5, #4]
 8004af6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004afa:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8004afe:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b00:	6821      	ldr	r1, [r4, #0]
 8004b02:	6a0a      	ldr	r2, [r1, #32]
 8004b04:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004b08:	4d41      	ldr	r5, [pc, #260]	@ (8004c10 <HAL_I2C_Init+0x170>)
 8004b0a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8004b0e:	45ac      	cmp	ip, r5
 8004b10:	d84e      	bhi.n	8004bb0 <HAL_I2C_Init+0x110>
 8004b12:	3301      	adds	r3, #1
 8004b14:	4313      	orrs	r3, r2
 8004b16:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b18:	6821      	ldr	r1, [r4, #0]
 8004b1a:	69ca      	ldr	r2, [r1, #28]
 8004b1c:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8004b20:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b24:	6865      	ldr	r5, [r4, #4]
 8004b26:	4b3a      	ldr	r3, [pc, #232]	@ (8004c10 <HAL_I2C_Init+0x170>)
 8004b28:	429d      	cmp	r5, r3
 8004b2a:	d84b      	bhi.n	8004bc4 <HAL_I2C_Init+0x124>
 8004b2c:	1e43      	subs	r3, r0, #1
 8004b2e:	006d      	lsls	r5, r5, #1
 8004b30:	fbb3 f3f5 	udiv	r3, r3, r5
 8004b34:	3301      	adds	r3, #1
 8004b36:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004b3a:	4203      	tst	r3, r0
 8004b3c:	d05e      	beq.n	8004bfc <HAL_I2C_Init+0x15c>
 8004b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b42:	431a      	orrs	r2, r3
 8004b44:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b46:	6821      	ldr	r1, [r4, #0]
 8004b48:	680a      	ldr	r2, [r1, #0]
 8004b4a:	69e3      	ldr	r3, [r4, #28]
 8004b4c:	6a20      	ldr	r0, [r4, #32]
 8004b4e:	4303      	orrs	r3, r0
 8004b50:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004b54:	4313      	orrs	r3, r2
 8004b56:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b58:	6821      	ldr	r1, [r4, #0]
 8004b5a:	688a      	ldr	r2, [r1, #8]
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	68e0      	ldr	r0, [r4, #12]
 8004b60:	4303      	orrs	r3, r0
 8004b62:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 8004b66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b6e:	6821      	ldr	r1, [r4, #0]
 8004b70:	68ca      	ldr	r2, [r1, #12]
 8004b72:	6963      	ldr	r3, [r4, #20]
 8004b74:	69a0      	ldr	r0, [r4, #24]
 8004b76:	4303      	orrs	r3, r0
 8004b78:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004b80:	6822      	ldr	r2, [r4, #0]
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b8e:	2320      	movs	r3, #32
 8004b90:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b94:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b96:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004b9c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004ba0:	f7fe fc22 	bl	80033e8 <HAL_I2C_MspInit>
 8004ba4:	e785      	b.n	8004ab2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <HAL_I2C_Init+0x17c>)
 8004ba8:	4298      	cmp	r0, r3
 8004baa:	d89e      	bhi.n	8004aea <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004bac:	2001      	movs	r0, #1
 8004bae:	e7f4      	b.n	8004b9a <HAL_I2C_Init+0xfa>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bb0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8004bb4:	fb05 f303 	mul.w	r3, r5, r3
 8004bb8:	4d19      	ldr	r5, [pc, #100]	@ (8004c20 <HAL_I2C_Init+0x180>)
 8004bba:	fba5 5303 	umull	r5, r3, r5, r3
 8004bbe:	099b      	lsrs	r3, r3, #6
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	e7a7      	b.n	8004b14 <HAL_I2C_Init+0x74>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bc4:	68a3      	ldr	r3, [r4, #8]
 8004bc6:	b95b      	cbnz	r3, 8004be0 <HAL_I2C_Init+0x140>
 8004bc8:	1e43      	subs	r3, r0, #1
 8004bca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bce:	fbb3 f3f5 	udiv	r3, r3, r5
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd8:	b193      	cbz	r3, 8004c00 <HAL_I2C_Init+0x160>
 8004bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bde:	e7b0      	b.n	8004b42 <HAL_I2C_Init+0xa2>
 8004be0:	1e43      	subs	r3, r0, #1
 8004be2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004be6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004bea:	fbb3 f3f5 	udiv	r3, r3, r5
 8004bee:	3301      	adds	r3, #1
 8004bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf4:	b133      	cbz	r3, 8004c04 <HAL_I2C_Init+0x164>
 8004bf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bfa:	e7a2      	b.n	8004b42 <HAL_I2C_Init+0xa2>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	e7a0      	b.n	8004b42 <HAL_I2C_Init+0xa2>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e79e      	b.n	8004b42 <HAL_I2C_Init+0xa2>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e79c      	b.n	8004b42 <HAL_I2C_Init+0xa2>
    return HAL_ERROR;
 8004c08:	2001      	movs	r0, #1
}
 8004c0a:	4770      	bx	lr
    return HAL_ERROR;
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	e7c4      	b.n	8004b9a <HAL_I2C_Init+0xfa>
 8004c10:	000186a0 	.word	0x000186a0
 8004c14:	001e847f 	.word	0x001e847f
 8004c18:	431bde83 	.word	0x431bde83
 8004c1c:	003d08ff 	.word	0x003d08ff
 8004c20:	10624dd3 	.word	0x10624dd3

08004c24 <HAL_I2C_Mem_Write>:
{
 8004c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	460f      	mov	r7, r1
 8004c2e:	4690      	mov	r8, r2
 8004c30:	4699      	mov	r9, r3
 8004c32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8004c34:	f7fe fecc 	bl	80039d0 <HAL_GetTick>
 8004c38:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c3a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8004c3e:	b2c0      	uxtb	r0, r0
 8004c40:	2820      	cmp	r0, #32
 8004c42:	d003      	beq.n	8004c4c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8004c44:	2002      	movs	r0, #2
}
 8004c46:	b003      	add	sp, #12
 8004c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c4c:	9500      	str	r5, [sp, #0]
 8004c4e:	2319      	movs	r3, #25
 8004c50:	2201      	movs	r2, #1
 8004c52:	494d      	ldr	r1, [pc, #308]	@ (8004d88 <HAL_I2C_Mem_Write+0x164>)
 8004c54:	4620      	mov	r0, r4
 8004c56:	f7ff fdb4 	bl	80047c2 <I2C_WaitOnFlagUntilTimeout>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	f040 808d 	bne.w	8004d7a <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8004c60:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	f000 808a 	beq.w	8004d7e <HAL_I2C_Mem_Write+0x15a>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	f012 0f01 	tst.w	r2, #1
 8004c78:	d103      	bne.n	8004c82 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	f042 0201 	orr.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	6813      	ldr	r3, [r2, #0]
 8004c86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c8a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c8c:	2321      	movs	r3, #33	@ 0x21
 8004c8e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c92:	2340      	movs	r3, #64	@ 0x40
 8004c94:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8004c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c9e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ca0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8004ca4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ca6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004ca8:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004caa:	4b38      	ldr	r3, [pc, #224]	@ (8004d8c <HAL_I2C_Mem_Write+0x168>)
 8004cac:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cae:	9501      	str	r5, [sp, #4]
 8004cb0:	9600      	str	r6, [sp, #0]
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	4639      	mov	r1, r7
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f7ff fe51 	bl	8004960 <I2C_RequestMemoryWrite>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d15f      	bne.n	8004d82 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 8004cc2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004cc4:	b9d3      	cbnz	r3, 8004cfc <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc6:	462a      	mov	r2, r5
 8004cc8:	4631      	mov	r1, r6
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f7ff feb8 	bl	8004a40 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d044      	beq.n	8004d5e <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d03a      	beq.n	8004d50 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 8004cda:	2001      	movs	r0, #1
 8004cdc:	e7b3      	b.n	8004c46 <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d001      	beq.n	8004ce8 <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	e7ae      	b.n	8004c46 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	6822      	ldr	r2, [r4, #0]
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cf0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	e7a7      	b.n	8004c46 <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 8004cf6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0e4      	beq.n	8004cc6 <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cfc:	462a      	mov	r2, r5
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4620      	mov	r0, r4
 8004d02:	f7ff fdfe 	bl	8004902 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d1e9      	bne.n	8004cde <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004d0e:	7812      	ldrb	r2, [r2, #0]
 8004d10:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d12:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004d18:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004d20:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8004d22:	3901      	subs	r1, #1
 8004d24:	b289      	uxth	r1, r1
 8004d26:	8561      	strh	r1, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d28:	6822      	ldr	r2, [r4, #0]
 8004d2a:	6951      	ldr	r1, [r2, #20]
 8004d2c:	f011 0f04 	tst.w	r1, #4
 8004d30:	d0e1      	beq.n	8004cf6 <HAL_I2C_Mem_Write+0xd2>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0c7      	beq.n	8004cc6 <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d36:	7843      	ldrb	r3, [r0, #1]
 8004d38:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8004d3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8004d40:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004d42:	3b01      	subs	r3, #1
 8004d44:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8004d46:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8004d4e:	e7d2      	b.n	8004cf6 <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d58:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	e773      	b.n	8004c46 <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d66:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	2320      	movs	r3, #32
 8004d6a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8004d74:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8004d78:	e765      	b.n	8004c46 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8004d7a:	2002      	movs	r0, #2
 8004d7c:	e763      	b.n	8004c46 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8004d7e:	2002      	movs	r0, #2
 8004d80:	e761      	b.n	8004c46 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8004d82:	2001      	movs	r0, #1
 8004d84:	e75f      	b.n	8004c46 <HAL_I2C_Mem_Write+0x22>
 8004d86:	bf00      	nop
 8004d88:	00100002 	.word	0x00100002
 8004d8c:	ffff0000 	.word	0xffff0000

08004d90 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d90:	2800      	cmp	r0, #0
 8004d92:	f000 8201 	beq.w	8005198 <HAL_RCC_OscConfig+0x408>
{
 8004d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9e:	6803      	ldr	r3, [r0, #0]
 8004da0:	f013 0f01 	tst.w	r3, #1
 8004da4:	d02c      	beq.n	8004e00 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004da6:	4b9f      	ldr	r3, [pc, #636]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d01d      	beq.n	8004dee <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004db2:	4b9c      	ldr	r3, [pc, #624]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d012      	beq.n	8004de4 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc4:	d041      	beq.n	8004e4a <HAL_RCC_OscConfig+0xba>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d155      	bne.n	8004e76 <HAL_RCC_OscConfig+0xe6>
 8004dca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004dce:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e037      	b.n	8004e54 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004de4:	4b8f      	ldr	r3, [pc, #572]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004dec:	d0e7      	beq.n	8004dbe <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dee:	4b8d      	ldr	r3, [pc, #564]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004df6:	d003      	beq.n	8004e00 <HAL_RCC_OscConfig+0x70>
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 81ce 	beq.w	800519c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	f013 0f02 	tst.w	r3, #2
 8004e06:	d075      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e08:	4b86      	ldr	r3, [pc, #536]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f013 0f0c 	tst.w	r3, #12
 8004e10:	d05f      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e12:	4b84      	ldr	r3, [pc, #528]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d054      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 808a 	beq.w	8004f3a <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e26:	4b80      	ldr	r3, [pc, #512]	@ (8005028 <HAL_RCC_OscConfig+0x298>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7fe fdd0 	bl	80039d0 <HAL_GetTick>
 8004e30:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e32:	4e7c      	ldr	r6, [pc, #496]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004e34:	6833      	ldr	r3, [r6, #0]
 8004e36:	f013 0f02 	tst.w	r3, #2
 8004e3a:	d175      	bne.n	8004f28 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3c:	f7fe fdc8 	bl	80039d0 <HAL_GetTick>
 8004e40:	1b40      	subs	r0, r0, r5
 8004e42:	2802      	cmp	r0, #2
 8004e44:	d9f6      	bls.n	8004e34 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8004e46:	2003      	movs	r0, #3
 8004e48:	e1ad      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e4a:	4a76      	ldr	r2, [pc, #472]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004e4c:	6813      	ldr	r3, [r2, #0]
 8004e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e52:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e54:	6863      	ldr	r3, [r4, #4]
 8004e56:	b343      	cbz	r3, 8004eaa <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8004e58:	f7fe fdba 	bl	80039d0 <HAL_GetTick>
 8004e5c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5e:	4e71      	ldr	r6, [pc, #452]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004e60:	6833      	ldr	r3, [r6, #0]
 8004e62:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004e66:	d1cb      	bne.n	8004e00 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e68:	f7fe fdb2 	bl	80039d0 <HAL_GetTick>
 8004e6c:	1b40      	subs	r0, r0, r5
 8004e6e:	2864      	cmp	r0, #100	@ 0x64
 8004e70:	d9f6      	bls.n	8004e60 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8004e72:	2003      	movs	r0, #3
 8004e74:	e197      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e7a:	d009      	beq.n	8004e90 <HAL_RCC_OscConfig+0x100>
 8004e7c:	4b69      	ldr	r3, [pc, #420]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e7e1      	b.n	8004e54 <HAL_RCC_OscConfig+0xc4>
 8004e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e94:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e7d4      	b.n	8004e54 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8004eaa:	f7fe fd91 	bl	80039d0 <HAL_GetTick>
 8004eae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb0:	4e5c      	ldr	r6, [pc, #368]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004eb2:	6833      	ldr	r3, [r6, #0]
 8004eb4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004eb8:	d0a2      	beq.n	8004e00 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eba:	f7fe fd89 	bl	80039d0 <HAL_GetTick>
 8004ebe:	1b40      	subs	r0, r0, r5
 8004ec0:	2864      	cmp	r0, #100	@ 0x64
 8004ec2:	d9f6      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8004ec4:	2003      	movs	r0, #3
 8004ec6:	e16e      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ec8:	4b56      	ldr	r3, [pc, #344]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004ed0:	d1a5      	bne.n	8004e1e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed2:	4b54      	ldr	r3, [pc, #336]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f013 0f02 	tst.w	r3, #2
 8004eda:	d003      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x154>
 8004edc:	6923      	ldr	r3, [r4, #16]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	f040 815e 	bne.w	80051a0 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee4:	4a4f      	ldr	r2, [pc, #316]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004ee6:	6813      	ldr	r3, [r2, #0]
 8004ee8:	6961      	ldr	r1, [r4, #20]
 8004eea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004eee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ef2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	f013 0f08 	tst.w	r3, #8
 8004efa:	d03d      	beq.n	8004f78 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004efc:	69a3      	ldr	r3, [r4, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d066      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f02:	4b49      	ldr	r3, [pc, #292]	@ (8005028 <HAL_RCC_OscConfig+0x298>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0a:	f7fe fd61 	bl	80039d0 <HAL_GetTick>
 8004f0e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f10:	4e44      	ldr	r6, [pc, #272]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004f12:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004f14:	f013 0f02 	tst.w	r3, #2
 8004f18:	d121      	bne.n	8004f5e <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f1a:	f7fe fd59 	bl	80039d0 <HAL_GetTick>
 8004f1e:	1b40      	subs	r0, r0, r5
 8004f20:	2802      	cmp	r0, #2
 8004f22:	d9f6      	bls.n	8004f12 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8004f24:	2003      	movs	r0, #3
 8004f26:	e13e      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f28:	4a3e      	ldr	r2, [pc, #248]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004f2a:	6813      	ldr	r3, [r2, #0]
 8004f2c:	6961      	ldr	r1, [r4, #20]
 8004f2e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004f32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	e7dc      	b.n	8004ef4 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8004f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8005028 <HAL_RCC_OscConfig+0x298>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004f40:	f7fe fd46 	bl	80039d0 <HAL_GetTick>
 8004f44:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f46:	4e37      	ldr	r6, [pc, #220]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004f48:	6833      	ldr	r3, [r6, #0]
 8004f4a:	f013 0f02 	tst.w	r3, #2
 8004f4e:	d0d1      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fe fd3e 	bl	80039d0 <HAL_GetTick>
 8004f54:	1b40      	subs	r0, r0, r5
 8004f56:	2802      	cmp	r0, #2
 8004f58:	d9f6      	bls.n	8004f48 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8004f5a:	2003      	movs	r0, #3
 8004f5c:	e123      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f5e:	4b33      	ldr	r3, [pc, #204]	@ (800502c <HAL_RCC_OscConfig+0x29c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a33      	ldr	r2, [pc, #204]	@ (8005030 <HAL_RCC_OscConfig+0x2a0>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	0a5b      	lsrs	r3, r3, #9
 8004f6a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004f6c:	bf00      	nop
  }
  while (Delay --);
 8004f6e:	9b01      	ldr	r3, [sp, #4]
 8004f70:	1e5a      	subs	r2, r3, #1
 8004f72:	9201      	str	r2, [sp, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f9      	bne.n	8004f6c <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	f013 0f04 	tst.w	r3, #4
 8004f7e:	f000 809b 	beq.w	80050b8 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f82:	4b28      	ldr	r3, [pc, #160]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004f8a:	d134      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8c:	4b25      	ldr	r3, [pc, #148]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004f94:	61da      	str	r2, [r3, #28]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8004fa0:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa2:	4b24      	ldr	r3, [pc, #144]	@ (8005034 <HAL_RCC_OscConfig+0x2a4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004faa:	d026      	beq.n	8004ffa <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fac:	68e3      	ldr	r3, [r4, #12]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d042      	beq.n	8005038 <HAL_RCC_OscConfig+0x2a8>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d158      	bne.n	8005068 <HAL_RCC_OscConfig+0x2d8>
 8004fb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fba:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	621a      	str	r2, [r3, #32]
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	f022 0204 	bic.w	r2, r2, #4
 8004fcc:	621a      	str	r2, [r3, #32]
 8004fce:	e038      	b.n	8005042 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8004fd0:	4b15      	ldr	r3, [pc, #84]	@ (8005028 <HAL_RCC_OscConfig+0x298>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004fd8:	f7fe fcfa 	bl	80039d0 <HAL_GetTick>
 8004fdc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fde:	4e11      	ldr	r6, [pc, #68]	@ (8005024 <HAL_RCC_OscConfig+0x294>)
 8004fe0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004fe2:	f013 0f02 	tst.w	r3, #2
 8004fe6:	d0c7      	beq.n	8004f78 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe8:	f7fe fcf2 	bl	80039d0 <HAL_GetTick>
 8004fec:	1b40      	subs	r0, r0, r5
 8004fee:	2802      	cmp	r0, #2
 8004ff0:	d9f6      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8004ff2:	2003      	movs	r0, #3
 8004ff4:	e0d7      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	e7d3      	b.n	8004fa2 <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <HAL_RCC_OscConfig+0x2a4>)
 8004ffc:	6813      	ldr	r3, [r2, #0]
 8004ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005002:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005004:	f7fe fce4 	bl	80039d0 <HAL_GetTick>
 8005008:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500a:	4f0a      	ldr	r7, [pc, #40]	@ (8005034 <HAL_RCC_OscConfig+0x2a4>)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005012:	d1cb      	bne.n	8004fac <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005014:	f7fe fcdc 	bl	80039d0 <HAL_GetTick>
 8005018:	1b80      	subs	r0, r0, r6
 800501a:	2864      	cmp	r0, #100	@ 0x64
 800501c:	d9f6      	bls.n	800500c <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800501e:	2003      	movs	r0, #3
 8005020:	e0c1      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
 8005028:	42420000 	.word	0x42420000
 800502c:	2000010c 	.word	0x2000010c
 8005030:	10624dd3 	.word	0x10624dd3
 8005034:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005038:	4a5e      	ldr	r2, [pc, #376]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 800503a:	6a13      	ldr	r3, [r2, #32]
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005042:	68e3      	ldr	r3, [r4, #12]
 8005044:	b333      	cbz	r3, 8005094 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8005046:	f7fe fcc3 	bl	80039d0 <HAL_GetTick>
 800504a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504c:	4f59      	ldr	r7, [pc, #356]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	f013 0f02 	tst.w	r3, #2
 8005058:	d12d      	bne.n	80050b6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505a:	f7fe fcb9 	bl	80039d0 <HAL_GetTick>
 800505e:	1b80      	subs	r0, r0, r6
 8005060:	4540      	cmp	r0, r8
 8005062:	d9f6      	bls.n	8005052 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8005064:	2003      	movs	r0, #3
 8005066:	e09e      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005068:	2b05      	cmp	r3, #5
 800506a:	d009      	beq.n	8005080 <HAL_RCC_OscConfig+0x2f0>
 800506c:	4b51      	ldr	r3, [pc, #324]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 800506e:	6a1a      	ldr	r2, [r3, #32]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	621a      	str	r2, [r3, #32]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	f022 0204 	bic.w	r2, r2, #4
 800507c:	621a      	str	r2, [r3, #32]
 800507e:	e7e0      	b.n	8005042 <HAL_RCC_OscConfig+0x2b2>
 8005080:	4b4c      	ldr	r3, [pc, #304]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	f042 0204 	orr.w	r2, r2, #4
 8005088:	621a      	str	r2, [r3, #32]
 800508a:	6a1a      	ldr	r2, [r3, #32]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	621a      	str	r2, [r3, #32]
 8005092:	e7d6      	b.n	8005042 <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8005094:	f7fe fc9c 	bl	80039d0 <HAL_GetTick>
 8005098:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509a:	4f46      	ldr	r7, [pc, #280]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	f013 0f02 	tst.w	r3, #2
 80050a6:	d006      	beq.n	80050b6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a8:	f7fe fc92 	bl	80039d0 <HAL_GetTick>
 80050ac:	1b80      	subs	r0, r0, r6
 80050ae:	4540      	cmp	r0, r8
 80050b0:	d9f6      	bls.n	80050a0 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80050b2:	2003      	movs	r0, #3
 80050b4:	e077      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80050b6:	b9e5      	cbnz	r5, 80050f2 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b8:	69e3      	ldr	r3, [r4, #28]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d072      	beq.n	80051a4 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050be:	4a3d      	ldr	r2, [pc, #244]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 80050c0:	6852      	ldr	r2, [r2, #4]
 80050c2:	f002 020c 	and.w	r2, r2, #12
 80050c6:	2a08      	cmp	r2, #8
 80050c8:	d056      	beq.n	8005178 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d017      	beq.n	80050fe <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80050ce:	4b3a      	ldr	r3, [pc, #232]	@ (80051b8 <HAL_RCC_OscConfig+0x428>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80050d4:	f7fe fc7c 	bl	80039d0 <HAL_GetTick>
 80050d8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050da:	4d36      	ldr	r5, [pc, #216]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80050e2:	d047      	beq.n	8005174 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e4:	f7fe fc74 	bl	80039d0 <HAL_GetTick>
 80050e8:	1b00      	subs	r0, r0, r4
 80050ea:	2802      	cmp	r0, #2
 80050ec:	d9f6      	bls.n	80050dc <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80050ee:	2003      	movs	r0, #3
 80050f0:	e059      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f2:	4a30      	ldr	r2, [pc, #192]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 80050f4:	69d3      	ldr	r3, [r2, #28]
 80050f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	61d3      	str	r3, [r2, #28]
 80050fc:	e7dc      	b.n	80050b8 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80050fe:	4b2e      	ldr	r3, [pc, #184]	@ (80051b8 <HAL_RCC_OscConfig+0x428>)
 8005100:	2200      	movs	r2, #0
 8005102:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005104:	f7fe fc64 	bl	80039d0 <HAL_GetTick>
 8005108:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800510a:	4e2a      	ldr	r6, [pc, #168]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 800510c:	6833      	ldr	r3, [r6, #0]
 800510e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005112:	d006      	beq.n	8005122 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005114:	f7fe fc5c 	bl	80039d0 <HAL_GetTick>
 8005118:	1b40      	subs	r0, r0, r5
 800511a:	2802      	cmp	r0, #2
 800511c:	d9f6      	bls.n	800510c <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800511e:	2003      	movs	r0, #3
 8005120:	e041      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005122:	6a23      	ldr	r3, [r4, #32]
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005128:	d01a      	beq.n	8005160 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512a:	4922      	ldr	r1, [pc, #136]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 800512c:	684a      	ldr	r2, [r1, #4]
 800512e:	6a23      	ldr	r3, [r4, #32]
 8005130:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005132:	4303      	orrs	r3, r0
 8005134:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8005138:	4313      	orrs	r3, r2
 800513a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800513c:	4b1e      	ldr	r3, [pc, #120]	@ (80051b8 <HAL_RCC_OscConfig+0x428>)
 800513e:	2201      	movs	r2, #1
 8005140:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005142:	f7fe fc45 	bl	80039d0 <HAL_GetTick>
 8005146:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005148:	4d1a      	ldr	r5, [pc, #104]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 800514a:	682b      	ldr	r3, [r5, #0]
 800514c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005150:	d10e      	bne.n	8005170 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005152:	f7fe fc3d 	bl	80039d0 <HAL_GetTick>
 8005156:	1b00      	subs	r0, r0, r4
 8005158:	2802      	cmp	r0, #2
 800515a:	d9f6      	bls.n	800514a <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 800515c:	2003      	movs	r0, #3
 800515e:	e022      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005160:	4a14      	ldr	r2, [pc, #80]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 8005162:	6853      	ldr	r3, [r2, #4]
 8005164:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005168:	68a1      	ldr	r1, [r4, #8]
 800516a:	430b      	orrs	r3, r1
 800516c:	6053      	str	r3, [r2, #4]
 800516e:	e7dc      	b.n	800512a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8005170:	2000      	movs	r0, #0
 8005172:	e018      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
 8005174:	2000      	movs	r0, #0
 8005176:	e016      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005178:	2b01      	cmp	r3, #1
 800517a:	d017      	beq.n	80051ac <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 800517c:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <HAL_RCC_OscConfig+0x424>)
 800517e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005180:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8005184:	6a22      	ldr	r2, [r4, #32]
 8005186:	4291      	cmp	r1, r2
 8005188:	d112      	bne.n	80051b0 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800518a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005190:	1a18      	subs	r0, r3, r0
 8005192:	bf18      	it	ne
 8005194:	2001      	movne	r0, #1
 8005196:	e006      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8005198:	2001      	movs	r0, #1
}
 800519a:	4770      	bx	lr
        return HAL_ERROR;
 800519c:	2001      	movs	r0, #1
 800519e:	e002      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80051a0:	2001      	movs	r0, #1
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80051a4:	2000      	movs	r0, #0
}
 80051a6:	b002      	add	sp, #8
 80051a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80051ac:	2001      	movs	r0, #1
 80051ae:	e7fa      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80051b0:	2001      	movs	r0, #1
 80051b2:	e7f8      	b.n	80051a6 <HAL_RCC_OscConfig+0x416>
 80051b4:	40021000 	.word	0x40021000
 80051b8:	42420000 	.word	0x42420000

080051bc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80051bc:	4b0f      	ldr	r3, [pc, #60]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x40>)
 80051be:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80051c0:	f003 020c 	and.w	r2, r3, #12
 80051c4:	2a08      	cmp	r2, #8
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80051c8:	480d      	ldr	r0, [pc, #52]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80051ca:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051cc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80051d0:	490c      	ldr	r1, [pc, #48]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x48>)
 80051d2:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051d4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80051d8:	d00b      	beq.n	80051f2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051da:	4b08      	ldr	r3, [pc, #32]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x40>)
 80051dc:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051de:	4a08      	ldr	r2, [pc, #32]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x44>)
 80051e0:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051e4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80051e8:	4a07      	ldr	r2, [pc, #28]	@ (8005208 <HAL_RCC_GetSysClockFreq+0x4c>)
 80051ea:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80051f0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051f2:	4b06      	ldr	r3, [pc, #24]	@ (800520c <HAL_RCC_GetSysClockFreq+0x50>)
 80051f4:	fb03 f000 	mul.w	r0, r3, r0
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000
 8005200:	007a1200 	.word	0x007a1200
 8005204:	0800cd4c 	.word	0x0800cd4c
 8005208:	0800cd48 	.word	0x0800cd48
 800520c:	003d0900 	.word	0x003d0900

08005210 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005210:	2800      	cmp	r0, #0
 8005212:	f000 80a2 	beq.w	800535a <HAL_RCC_ClockConfig+0x14a>
{
 8005216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521a:	460d      	mov	r5, r1
 800521c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800521e:	4b53      	ldr	r3, [pc, #332]	@ (800536c <HAL_RCC_ClockConfig+0x15c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	428b      	cmp	r3, r1
 8005228:	d20b      	bcs.n	8005242 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522a:	4a50      	ldr	r2, [pc, #320]	@ (800536c <HAL_RCC_ClockConfig+0x15c>)
 800522c:	6813      	ldr	r3, [r2, #0]
 800522e:	f023 0307 	bic.w	r3, r3, #7
 8005232:	430b      	orrs	r3, r1
 8005234:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005236:	6813      	ldr	r3, [r2, #0]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	428b      	cmp	r3, r1
 800523e:	f040 808e 	bne.w	800535e <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	f013 0f02 	tst.w	r3, #2
 8005248:	d017      	beq.n	800527a <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800524a:	f013 0f04 	tst.w	r3, #4
 800524e:	d004      	beq.n	800525a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005250:	4a47      	ldr	r2, [pc, #284]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
 8005252:	6853      	ldr	r3, [r2, #4]
 8005254:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005258:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	f013 0f08 	tst.w	r3, #8
 8005260:	d004      	beq.n	800526c <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005262:	4a43      	ldr	r2, [pc, #268]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
 8005264:	6853      	ldr	r3, [r2, #4]
 8005266:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800526a:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526c:	4a40      	ldr	r2, [pc, #256]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
 800526e:	6853      	ldr	r3, [r2, #4]
 8005270:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005274:	68a1      	ldr	r1, [r4, #8]
 8005276:	430b      	orrs	r3, r1
 8005278:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	f013 0f01 	tst.w	r3, #1
 8005280:	d031      	beq.n	80052e6 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	2a01      	cmp	r2, #1
 8005286:	d020      	beq.n	80052ca <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005288:	2a02      	cmp	r2, #2
 800528a:	d025      	beq.n	80052d8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528c:	4b38      	ldr	r3, [pc, #224]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f013 0f02 	tst.w	r3, #2
 8005294:	d065      	beq.n	8005362 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005296:	4936      	ldr	r1, [pc, #216]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
 8005298:	684b      	ldr	r3, [r1, #4]
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	4313      	orrs	r3, r2
 80052a0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80052a2:	f7fe fb95 	bl	80039d0 <HAL_GetTick>
 80052a6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a8:	4f31      	ldr	r7, [pc, #196]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052aa:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f003 030c 	and.w	r3, r3, #12
 80052b4:	6862      	ldr	r2, [r4, #4]
 80052b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80052ba:	d014      	beq.n	80052e6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052bc:	f7fe fb88 	bl	80039d0 <HAL_GetTick>
 80052c0:	1b80      	subs	r0, r0, r6
 80052c2:	4540      	cmp	r0, r8
 80052c4:	d9f3      	bls.n	80052ae <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80052c6:	2003      	movs	r0, #3
 80052c8:	e045      	b.n	8005356 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	4b29      	ldr	r3, [pc, #164]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80052d2:	d1e0      	bne.n	8005296 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80052d4:	2001      	movs	r0, #1
 80052d6:	e03e      	b.n	8005356 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d8:	4b25      	ldr	r3, [pc, #148]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80052e0:	d1d9      	bne.n	8005296 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80052e2:	2001      	movs	r0, #1
 80052e4:	e037      	b.n	8005356 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e6:	4b21      	ldr	r3, [pc, #132]	@ (800536c <HAL_RCC_ClockConfig+0x15c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	42ab      	cmp	r3, r5
 80052f0:	d90a      	bls.n	8005308 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f2:	4a1e      	ldr	r2, [pc, #120]	@ (800536c <HAL_RCC_ClockConfig+0x15c>)
 80052f4:	6813      	ldr	r3, [r2, #0]
 80052f6:	f023 0307 	bic.w	r3, r3, #7
 80052fa:	432b      	orrs	r3, r5
 80052fc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	6813      	ldr	r3, [r2, #0]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	42ab      	cmp	r3, r5
 8005306:	d12e      	bne.n	8005366 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	f013 0f04 	tst.w	r3, #4
 800530e:	d006      	beq.n	800531e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005310:	4a17      	ldr	r2, [pc, #92]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
 8005312:	6853      	ldr	r3, [r2, #4]
 8005314:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005318:	68e1      	ldr	r1, [r4, #12]
 800531a:	430b      	orrs	r3, r1
 800531c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	f013 0f08 	tst.w	r3, #8
 8005324:	d007      	beq.n	8005336 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005326:	4a12      	ldr	r2, [pc, #72]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
 8005328:	6853      	ldr	r3, [r2, #4]
 800532a:	6921      	ldr	r1, [r4, #16]
 800532c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005330:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005334:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005336:	f7ff ff41 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <HAL_RCC_ClockConfig+0x160>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005342:	4a0c      	ldr	r2, [pc, #48]	@ (8005374 <HAL_RCC_ClockConfig+0x164>)
 8005344:	5cd3      	ldrb	r3, [r2, r3]
 8005346:	40d8      	lsrs	r0, r3
 8005348:	4b0b      	ldr	r3, [pc, #44]	@ (8005378 <HAL_RCC_ClockConfig+0x168>)
 800534a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800534c:	4b0b      	ldr	r3, [pc, #44]	@ (800537c <HAL_RCC_ClockConfig+0x16c>)
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	f7fe fafa 	bl	8003948 <HAL_InitTick>
  return HAL_OK;
 8005354:	2000      	movs	r0, #0
}
 8005356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800535a:	2001      	movs	r0, #1
}
 800535c:	4770      	bx	lr
    return HAL_ERROR;
 800535e:	2001      	movs	r0, #1
 8005360:	e7f9      	b.n	8005356 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8005362:	2001      	movs	r0, #1
 8005364:	e7f7      	b.n	8005356 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8005366:	2001      	movs	r0, #1
 8005368:	e7f5      	b.n	8005356 <HAL_RCC_ClockConfig+0x146>
 800536a:	bf00      	nop
 800536c:	40022000 	.word	0x40022000
 8005370:	40021000 	.word	0x40021000
 8005374:	0800cd38 	.word	0x0800cd38
 8005378:	2000010c 	.word	0x2000010c
 800537c:	20000114 	.word	0x20000114

08005380 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005380:	4b04      	ldr	r3, [pc, #16]	@ (8005394 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005388:	4a03      	ldr	r2, [pc, #12]	@ (8005398 <HAL_RCC_GetPCLK1Freq+0x18>)
 800538a:	5cd3      	ldrb	r3, [r2, r3]
 800538c:	4a03      	ldr	r2, [pc, #12]	@ (800539c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800538e:	6810      	ldr	r0, [r2, #0]
}
 8005390:	40d8      	lsrs	r0, r3
 8005392:	4770      	bx	lr
 8005394:	40021000 	.word	0x40021000
 8005398:	0800cd30 	.word	0x0800cd30
 800539c:	2000010c 	.word	0x2000010c

080053a0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053a0:	4b04      	ldr	r3, [pc, #16]	@ (80053b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80053a8:	4a03      	ldr	r2, [pc, #12]	@ (80053b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80053aa:	5cd3      	ldrb	r3, [r2, r3]
 80053ac:	4a03      	ldr	r2, [pc, #12]	@ (80053bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80053ae:	6810      	ldr	r0, [r2, #0]
}
 80053b0:	40d8      	lsrs	r0, r3
 80053b2:	4770      	bx	lr
 80053b4:	40021000 	.word	0x40021000
 80053b8:	0800cd30 	.word	0x0800cd30
 80053bc:	2000010c 	.word	0x2000010c

080053c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80053c8:	6803      	ldr	r3, [r0, #0]
 80053ca:	f013 0f01 	tst.w	r3, #1
 80053ce:	d036      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053d0:	4b3f      	ldr	r3, [pc, #252]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80053d8:	d149      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	4b3d      	ldr	r3, [pc, #244]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80053dc:	69da      	ldr	r2, [r3, #28]
 80053de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80053e2:	61da      	str	r2, [r3, #28]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80053ee:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f0:	4b38      	ldr	r3, [pc, #224]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80053f8:	d03b      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053fa:	4b35      	ldr	r3, [pc, #212]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80053fc:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053fe:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005402:	d013      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005404:	6862      	ldr	r2, [r4, #4]
 8005406:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800540a:	429a      	cmp	r2, r3
 800540c:	d00e      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800540e:	4a30      	ldr	r2, [pc, #192]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8005410:	6a13      	ldr	r3, [r2, #32]
 8005412:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005416:	4930      	ldr	r1, [pc, #192]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8005418:	2601      	movs	r6, #1
 800541a:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800541e:	2600      	movs	r6, #0
 8005420:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005424:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005426:	f013 0f01 	tst.w	r3, #1
 800542a:	d136      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800542c:	4a28      	ldr	r2, [pc, #160]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800542e:	6a13      	ldr	r3, [r2, #32]
 8005430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005434:	6861      	ldr	r1, [r4, #4]
 8005436:	430b      	orrs	r3, r1
 8005438:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800543a:	2d00      	cmp	r5, #0
 800543c:	d13e      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	f013 0f02 	tst.w	r3, #2
 8005444:	d006      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005446:	4a22      	ldr	r2, [pc, #136]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8005448:	6853      	ldr	r3, [r2, #4]
 800544a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800544e:	68a1      	ldr	r1, [r4, #8]
 8005450:	430b      	orrs	r3, r1
 8005452:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	f013 0f10 	tst.w	r3, #16
 800545a:	d034      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800545c:	4a1c      	ldr	r2, [pc, #112]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800545e:	6853      	ldr	r3, [r2, #4]
 8005460:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005464:	68e1      	ldr	r1, [r4, #12]
 8005466:	430b      	orrs	r3, r1
 8005468:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800546a:	2000      	movs	r0, #0
 800546c:	e02c      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 800546e:	2500      	movs	r5, #0
 8005470:	e7be      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005472:	4a18      	ldr	r2, [pc, #96]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8005474:	6813      	ldr	r3, [r2, #0]
 8005476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800547a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800547c:	f7fe faa8 	bl	80039d0 <HAL_GetTick>
 8005480:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	4f14      	ldr	r7, [pc, #80]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800548a:	d1b6      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548c:	f7fe faa0 	bl	80039d0 <HAL_GetTick>
 8005490:	1b80      	subs	r0, r0, r6
 8005492:	2864      	cmp	r0, #100	@ 0x64
 8005494:	d9f6      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8005496:	2003      	movs	r0, #3
 8005498:	e016      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 800549a:	f7fe fa99 	bl	80039d0 <HAL_GetTick>
 800549e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a0:	4f0b      	ldr	r7, [pc, #44]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f013 0f02 	tst.w	r3, #2
 80054ac:	d1be      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fe fa8f 	bl	80039d0 <HAL_GetTick>
 80054b2:	1b80      	subs	r0, r0, r6
 80054b4:	4540      	cmp	r0, r8
 80054b6:	d9f6      	bls.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 80054b8:	2003      	movs	r0, #3
 80054ba:	e005      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 80054bc:	69d3      	ldr	r3, [r2, #28]
 80054be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054c2:	61d3      	str	r3, [r2, #28]
 80054c4:	e7bb      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 80054c6:	2000      	movs	r0, #0
}
 80054c8:	b002      	add	sp, #8
 80054ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40007000 	.word	0x40007000
 80054d8:	42420000 	.word	0x42420000

080054dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054de:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e0:	6a02      	ldr	r2, [r0, #32]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ea:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ec:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f0:	680d      	ldr	r5, [r1, #0]
 80054f2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054f4:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054f8:	688d      	ldr	r5, [r1, #8]
 80054fa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054fc:	4d0b      	ldr	r5, [pc, #44]	@ (800552c <TIM_OC1_SetConfig+0x50>)
 80054fe:	42a8      	cmp	r0, r5
 8005500:	d006      	beq.n	8005510 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005502:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005504:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005506:	684a      	ldr	r2, [r1, #4]
 8005508:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550a:	6203      	str	r3, [r0, #32]
}
 800550c:	bc70      	pop	{r4, r5, r6}
 800550e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8005510:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005514:	68cd      	ldr	r5, [r1, #12]
 8005516:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005518:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800551c:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005520:	694d      	ldr	r5, [r1, #20]
 8005522:	698e      	ldr	r6, [r1, #24]
 8005524:	4335      	orrs	r5, r6
 8005526:	432c      	orrs	r4, r5
 8005528:	e7eb      	b.n	8005502 <TIM_OC1_SetConfig+0x26>
 800552a:	bf00      	nop
 800552c:	40012c00 	.word	0x40012c00

08005530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005530:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005534:	6a02      	ldr	r2, [r0, #32]
 8005536:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800553a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005540:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005544:	680d      	ldr	r5, [r1, #0]
 8005546:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005548:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800554c:	688d      	ldr	r5, [r1, #8]
 800554e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005552:	4d0c      	ldr	r5, [pc, #48]	@ (8005584 <TIM_OC3_SetConfig+0x54>)
 8005554:	42a8      	cmp	r0, r5
 8005556:	d006      	beq.n	8005566 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005558:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800555c:	684a      	ldr	r2, [r1, #4]
 800555e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	6203      	str	r3, [r0, #32]
}
 8005562:	bc70      	pop	{r4, r5, r6}
 8005564:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8005566:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800556a:	68cd      	ldr	r5, [r1, #12]
 800556c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005574:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005578:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557a:	698e      	ldr	r6, [r1, #24]
 800557c:	4335      	orrs	r5, r6
 800557e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8005582:	e7e9      	b.n	8005558 <TIM_OC3_SetConfig+0x28>
 8005584:	40012c00 	.word	0x40012c00

08005588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800558c:	6a02      	ldr	r2, [r0, #32]
 800558e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005592:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005596:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005598:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559c:	680d      	ldr	r5, [r1, #0]
 800559e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055a6:	688d      	ldr	r5, [r1, #8]
 80055a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ac:	4d07      	ldr	r5, [pc, #28]	@ (80055cc <TIM_OC4_SetConfig+0x44>)
 80055ae:	42a8      	cmp	r0, r5
 80055b0:	d006      	beq.n	80055c0 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055b4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b6:	684a      	ldr	r2, [r1, #4]
 80055b8:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ba:	6203      	str	r3, [r0, #32]
}
 80055bc:	bc30      	pop	{r4, r5}
 80055be:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055c0:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055c4:	694d      	ldr	r5, [r1, #20]
 80055c6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80055ca:	e7f2      	b.n	80055b2 <TIM_OC4_SetConfig+0x2a>
 80055cc:	40012c00 	.word	0x40012c00

080055d0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80055d0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d122      	bne.n	8005620 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80055da:	2302      	movs	r3, #2
 80055dc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e0:	6803      	ldr	r3, [r0, #0]
 80055e2:	4a11      	ldr	r2, [pc, #68]	@ (8005628 <HAL_TIM_Base_Start+0x58>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d010      	beq.n	800560a <HAL_TIM_Base_Start+0x3a>
 80055e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ec:	d00d      	beq.n	800560a <HAL_TIM_Base_Start+0x3a>
 80055ee:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_TIM_Base_Start+0x3a>
 80055f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d005      	beq.n	800560a <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005606:	2000      	movs	r0, #0
 8005608:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	2a06      	cmp	r2, #6
 8005612:	d007      	beq.n	8005624 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800561c:	2000      	movs	r0, #0
 800561e:	4770      	bx	lr
    return HAL_ERROR;
 8005620:	2001      	movs	r0, #1
 8005622:	4770      	bx	lr
  return HAL_OK;
 8005624:	2000      	movs	r0, #0
}
 8005626:	4770      	bx	lr
 8005628:	40012c00 	.word	0x40012c00

0800562c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800562c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b01      	cmp	r3, #1
 8005634:	d127      	bne.n	8005686 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005636:	2302      	movs	r3, #2
 8005638:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800563c:	6802      	ldr	r2, [r0, #0]
 800563e:	68d3      	ldr	r3, [r2, #12]
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005646:	6803      	ldr	r3, [r0, #0]
 8005648:	4a11      	ldr	r2, [pc, #68]	@ (8005690 <HAL_TIM_Base_Start_IT+0x64>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d010      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x44>
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005652:	d00d      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x44>
 8005654:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005658:	4293      	cmp	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x44>
 800565c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005660:	4293      	cmp	r3, r2
 8005662:	d005      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800566c:	2000      	movs	r0, #0
 800566e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005676:	2a06      	cmp	r2, #6
 8005678:	d007      	beq.n	800568a <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	f042 0201 	orr.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005682:	2000      	movs	r0, #0
 8005684:	4770      	bx	lr
    return HAL_ERROR;
 8005686:	2001      	movs	r0, #1
 8005688:	4770      	bx	lr
  return HAL_OK;
 800568a:	2000      	movs	r0, #0
}
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40012c00 	.word	0x40012c00

08005694 <HAL_TIM_OC_MspInit>:
}
 8005694:	4770      	bx	lr

08005696 <HAL_TIM_PWM_MspInit>:
}
 8005696:	4770      	bx	lr

08005698 <HAL_TIM_PeriodElapsedCallback>:
}
 8005698:	4770      	bx	lr

0800569a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800569a:	4770      	bx	lr

0800569c <HAL_TIM_IC_CaptureCallback>:
}
 800569c:	4770      	bx	lr

0800569e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800569e:	4770      	bx	lr

080056a0 <HAL_TIM_TriggerCallback>:
}
 80056a0:	4770      	bx	lr

080056a2 <HAL_TIM_IRQHandler>:
{
 80056a2:	b510      	push	{r4, lr}
 80056a4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a6:	6803      	ldr	r3, [r0, #0]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	f012 0f02 	tst.w	r2, #2
 80056ae:	d011      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	f012 0f02 	tst.w	r2, #2
 80056b6:	d00d      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056b8:	f06f 0202 	mvn.w	r2, #2
 80056bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056be:	2301      	movs	r3, #1
 80056c0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056c2:	6803      	ldr	r3, [r0, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f013 0f03 	tst.w	r3, #3
 80056ca:	d070      	beq.n	80057ae <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80056cc:	f7ff ffe6 	bl	800569c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d0:	2300      	movs	r3, #0
 80056d2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	f012 0f04 	tst.w	r2, #4
 80056dc:	d012      	beq.n	8005704 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	f012 0f04 	tst.w	r2, #4
 80056e4:	d00e      	beq.n	8005704 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056e6:	f06f 0204 	mvn.w	r2, #4
 80056ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ec:	2302      	movs	r3, #2
 80056ee:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80056f8:	d05f      	beq.n	80057ba <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80056fa:	4620      	mov	r0, r4
 80056fc:	f7ff ffce 	bl	800569c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005700:	2300      	movs	r3, #0
 8005702:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	f012 0f08 	tst.w	r2, #8
 800570c:	d012      	beq.n	8005734 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	f012 0f08 	tst.w	r2, #8
 8005714:	d00e      	beq.n	8005734 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005716:	f06f 0208 	mvn.w	r2, #8
 800571a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571c:	2304      	movs	r3, #4
 800571e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f013 0f03 	tst.w	r3, #3
 8005728:	d04e      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800572a:	4620      	mov	r0, r4
 800572c:	f7ff ffb6 	bl	800569c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005730:	2300      	movs	r3, #0
 8005732:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	f012 0f10 	tst.w	r2, #16
 800573c:	d012      	beq.n	8005764 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	f012 0f10 	tst.w	r2, #16
 8005744:	d00e      	beq.n	8005764 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005746:	f06f 0210 	mvn.w	r2, #16
 800574a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800574c:	2308      	movs	r3, #8
 800574e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005758:	d03d      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	4620      	mov	r0, r4
 800575c:	f7ff ff9e 	bl	800569c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005760:	2300      	movs	r3, #0
 8005762:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	f012 0f01 	tst.w	r2, #1
 800576c:	d003      	beq.n	8005776 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	f012 0f01 	tst.w	r2, #1
 8005774:	d136      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800577e:	d003      	beq.n	8005788 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8005786:	d134      	bne.n	80057f2 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005798:	d132      	bne.n	8005800 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	f012 0f20 	tst.w	r2, #32
 80057a2:	d003      	beq.n	80057ac <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	f012 0f20 	tst.w	r2, #32
 80057aa:	d130      	bne.n	800580e <HAL_TIM_IRQHandler+0x16c>
}
 80057ac:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	f7ff ff74 	bl	800569a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b2:	4620      	mov	r0, r4
 80057b4:	f7ff ff73 	bl	800569e <HAL_TIM_PWM_PulseFinishedCallback>
 80057b8:	e78a      	b.n	80056d0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	4620      	mov	r0, r4
 80057bc:	f7ff ff6d 	bl	800569a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	4620      	mov	r0, r4
 80057c2:	f7ff ff6c 	bl	800569e <HAL_TIM_PWM_PulseFinishedCallback>
 80057c6:	e79b      	b.n	8005700 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff ff66 	bl	800569a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7ff ff65 	bl	800569e <HAL_TIM_PWM_PulseFinishedCallback>
 80057d4:	e7ac      	b.n	8005730 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7ff ff5f 	bl	800569a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	4620      	mov	r0, r4
 80057de:	f7ff ff5e 	bl	800569e <HAL_TIM_PWM_PulseFinishedCallback>
 80057e2:	e7bd      	b.n	8005760 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057e4:	f06f 0201 	mvn.w	r2, #1
 80057e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff ff54 	bl	8005698 <HAL_TIM_PeriodElapsedCallback>
 80057f0:	e7c1      	b.n	8005776 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057f2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80057f8:	4620      	mov	r0, r4
 80057fa:	f000 fb3f 	bl	8005e7c <HAL_TIMEx_BreakCallback>
 80057fe:	e7c3      	b.n	8005788 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005800:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005804:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005806:	4620      	mov	r0, r4
 8005808:	f7ff ff4a 	bl	80056a0 <HAL_TIM_TriggerCallback>
 800580c:	e7c5      	b.n	800579a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800580e:	f06f 0220 	mvn.w	r2, #32
 8005812:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005814:	4620      	mov	r0, r4
 8005816:	f000 fb30 	bl	8005e7a <HAL_TIMEx_CommutCallback>
}
 800581a:	e7c7      	b.n	80057ac <HAL_TIM_IRQHandler+0x10a>

0800581c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800581c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800581e:	4a25      	ldr	r2, [pc, #148]	@ (80058b4 <TIM_Base_SetConfig+0x98>)
 8005820:	4290      	cmp	r0, r2
 8005822:	d014      	beq.n	800584e <TIM_Base_SetConfig+0x32>
 8005824:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005828:	d026      	beq.n	8005878 <TIM_Base_SetConfig+0x5c>
 800582a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800582e:	4290      	cmp	r0, r2
 8005830:	d036      	beq.n	80058a0 <TIM_Base_SetConfig+0x84>
 8005832:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005836:	4290      	cmp	r0, r2
 8005838:	d037      	beq.n	80058aa <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800583a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800583e:	694a      	ldr	r2, [r1, #20]
 8005840:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005842:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005844:	688b      	ldr	r3, [r1, #8]
 8005846:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005848:	680b      	ldr	r3, [r1, #0]
 800584a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800584c:	e025      	b.n	800589a <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800584e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005852:	684a      	ldr	r2, [r1, #4]
 8005854:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800585a:	68ca      	ldr	r2, [r1, #12]
 800585c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800585e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005862:	694a      	ldr	r2, [r1, #20]
 8005864:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005866:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005868:	688b      	ldr	r3, [r1, #8]
 800586a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800586c:	680b      	ldr	r3, [r1, #0]
 800586e:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005870:	690a      	ldr	r2, [r1, #16]
 8005872:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <TIM_Base_SetConfig+0x98>)
 8005874:	631a      	str	r2, [r3, #48]	@ 0x30
 8005876:	e010      	b.n	800589a <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800587c:	684a      	ldr	r2, [r1, #4]
 800587e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005884:	68ca      	ldr	r2, [r1, #12]
 8005886:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005888:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800588c:	694a      	ldr	r2, [r1, #20]
 800588e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005890:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005892:	688b      	ldr	r3, [r1, #8]
 8005894:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005896:	680b      	ldr	r3, [r1, #0]
 8005898:	6283      	str	r3, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800589a:	2301      	movs	r3, #1
 800589c:	6143      	str	r3, [r0, #20]
}
 800589e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80058a4:	684a      	ldr	r2, [r1, #4]
 80058a6:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a8:	e7ea      	b.n	8005880 <TIM_Base_SetConfig+0x64>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80058ae:	684a      	ldr	r2, [r1, #4]
 80058b0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b2:	e7e5      	b.n	8005880 <TIM_Base_SetConfig+0x64>
 80058b4:	40012c00 	.word	0x40012c00

080058b8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80058b8:	b340      	cbz	r0, 800590c <HAL_TIM_Base_Init+0x54>
{
 80058ba:	b510      	push	{r4, lr}
 80058bc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80058be:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80058c2:	b1f3      	cbz	r3, 8005902 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	2302      	movs	r3, #2
 80058c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ca:	4621      	mov	r1, r4
 80058cc:	f851 0b04 	ldr.w	r0, [r1], #4
 80058d0:	f7ff ffa4 	bl	800581c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058da:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80058de:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80058e2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80058e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80058f6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80058fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80058fe:	2000      	movs	r0, #0
}
 8005900:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005902:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005906:	f7fd fdab 	bl	8003460 <HAL_TIM_Base_MspInit>
 800590a:	e7db      	b.n	80058c4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800590c:	2001      	movs	r0, #1
}
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8005910:	b340      	cbz	r0, 8005964 <HAL_TIM_OC_Init+0x54>
{
 8005912:	b510      	push	{r4, lr}
 8005914:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005916:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800591a:	b1f3      	cbz	r3, 800595a <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	2302      	movs	r3, #2
 800591e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005922:	4621      	mov	r1, r4
 8005924:	f851 0b04 	ldr.w	r0, [r1], #4
 8005928:	f7ff ff78 	bl	800581c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592c:	2301      	movs	r3, #1
 800592e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005932:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005936:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800593a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800593e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005942:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005946:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800594a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800594e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005952:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005956:	2000      	movs	r0, #0
}
 8005958:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800595a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 800595e:	f7ff fe99 	bl	8005694 <HAL_TIM_OC_MspInit>
 8005962:	e7db      	b.n	800591c <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8005964:	2001      	movs	r0, #1
}
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005968:	b340      	cbz	r0, 80059bc <HAL_TIM_PWM_Init+0x54>
{
 800596a:	b510      	push	{r4, lr}
 800596c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800596e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005972:	b1f3      	cbz	r3, 80059b2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	2302      	movs	r3, #2
 8005976:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800597a:	4621      	mov	r1, r4
 800597c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005980:	f7ff ff4c 	bl	800581c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005984:	2301      	movs	r3, #1
 8005986:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800598e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005992:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005996:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800599e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80059a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80059aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80059ae:	2000      	movs	r0, #0
}
 80059b0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80059b2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80059b6:	f7ff fe6e 	bl	8005696 <HAL_TIM_PWM_MspInit>
 80059ba:	e7db      	b.n	8005974 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80059bc:	2001      	movs	r0, #1
}
 80059be:	4770      	bx	lr

080059c0 <TIM_OC2_SetConfig>:
{
 80059c0:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 80059c2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c4:	6a02      	ldr	r2, [r0, #32]
 80059c6:	f022 0210 	bic.w	r2, r2, #16
 80059ca:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80059cc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80059ce:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059d0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d4:	680d      	ldr	r5, [r1, #0]
 80059d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80059da:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059de:	688d      	ldr	r5, [r1, #8]
 80059e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059e4:	4d0c      	ldr	r5, [pc, #48]	@ (8005a18 <TIM_OC2_SetConfig+0x58>)
 80059e6:	42a8      	cmp	r0, r5
 80059e8:	d006      	beq.n	80059f8 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80059ea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80059ec:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80059ee:	684a      	ldr	r2, [r1, #4]
 80059f0:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80059f2:	6203      	str	r3, [r0, #32]
}
 80059f4:	bc70      	pop	{r4, r5, r6}
 80059f6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80059f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059fc:	68cd      	ldr	r5, [r1, #12]
 80059fe:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a06:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a0a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a0c:	698e      	ldr	r6, [r1, #24]
 8005a0e:	4335      	orrs	r5, r6
 8005a10:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005a14:	e7e9      	b.n	80059ea <TIM_OC2_SetConfig+0x2a>
 8005a16:	bf00      	nop
 8005a18:	40012c00 	.word	0x40012c00

08005a1c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005a1c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d028      	beq.n	8005a76 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005a2e:	2a0c      	cmp	r2, #12
 8005a30:	d81c      	bhi.n	8005a6c <HAL_TIM_OC_ConfigChannel+0x50>
 8005a32:	e8df f002 	tbb	[pc, r2]
 8005a36:	1b07      	.short	0x1b07
 8005a38:	1b0c1b1b 	.word	0x1b0c1b1b
 8005a3c:	1b111b1b 	.word	0x1b111b1b
 8005a40:	1b1b      	.short	0x1b1b
 8005a42:	16          	.byte	0x16
 8005a43:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a44:	6800      	ldr	r0, [r0, #0]
 8005a46:	f7ff fd49 	bl	80054dc <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005a4a:	2000      	movs	r0, #0
      break;
 8005a4c:	e00f      	b.n	8005a6e <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a4e:	6800      	ldr	r0, [r0, #0]
 8005a50:	f7ff ffb6 	bl	80059c0 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005a54:	2000      	movs	r0, #0
      break;
 8005a56:	e00a      	b.n	8005a6e <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a58:	6800      	ldr	r0, [r0, #0]
 8005a5a:	f7ff fd69 	bl	8005530 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2000      	movs	r0, #0
      break;
 8005a60:	e005      	b.n	8005a6e <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a62:	6800      	ldr	r0, [r0, #0]
 8005a64:	f7ff fd90 	bl	8005588 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005a68:	2000      	movs	r0, #0
      break;
 8005a6a:	e000      	b.n	8005a6e <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8005a6c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005a74:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8005a76:	2002      	movs	r0, #2
}
 8005a78:	4770      	bx	lr

08005a7a <HAL_TIM_PWM_ConfigChannel>:
{
 8005a7a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005a7c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d066      	beq.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005a8e:	2a0c      	cmp	r2, #12
 8005a90:	d85a      	bhi.n	8005b48 <HAL_TIM_PWM_ConfigChannel+0xce>
 8005a92:	e8df f002 	tbb	[pc, r2]
 8005a96:	5907      	.short	0x5907
 8005a98:	591b5959 	.word	0x591b5959
 8005a9c:	59305959 	.word	0x59305959
 8005aa0:	5959      	.short	0x5959
 8005aa2:	44          	.byte	0x44
 8005aa3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aa4:	6800      	ldr	r0, [r0, #0]
 8005aa6:	f7ff fd19 	bl	80054dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	6993      	ldr	r3, [r2, #24]
 8005aae:	f043 0308 	orr.w	r3, r3, #8
 8005ab2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	6993      	ldr	r3, [r2, #24]
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	6993      	ldr	r3, [r2, #24]
 8005ac2:	6929      	ldr	r1, [r5, #16]
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac8:	2000      	movs	r0, #0
      break;
 8005aca:	e03e      	b.n	8005b4a <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005acc:	6800      	ldr	r0, [r0, #0]
 8005ace:	f7ff ff77 	bl	80059c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	6993      	ldr	r3, [r2, #24]
 8005ad6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005ada:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	6993      	ldr	r3, [r2, #24]
 8005ae0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ae4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	6993      	ldr	r3, [r2, #24]
 8005aea:	6929      	ldr	r1, [r5, #16]
 8005aec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005af0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005af2:	2000      	movs	r0, #0
      break;
 8005af4:	e029      	b.n	8005b4a <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005af6:	6800      	ldr	r0, [r0, #0]
 8005af8:	f7ff fd1a 	bl	8005530 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005afc:	6822      	ldr	r2, [r4, #0]
 8005afe:	69d3      	ldr	r3, [r2, #28]
 8005b00:	f043 0308 	orr.w	r3, r3, #8
 8005b04:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	69d3      	ldr	r3, [r2, #28]
 8005b0a:	f023 0304 	bic.w	r3, r3, #4
 8005b0e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	69d3      	ldr	r3, [r2, #28]
 8005b14:	6929      	ldr	r1, [r5, #16]
 8005b16:	430b      	orrs	r3, r1
 8005b18:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2000      	movs	r0, #0
      break;
 8005b1c:	e015      	b.n	8005b4a <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b1e:	6800      	ldr	r0, [r0, #0]
 8005b20:	f7ff fd32 	bl	8005588 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	69d3      	ldr	r3, [r2, #28]
 8005b28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b2c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b2e:	6822      	ldr	r2, [r4, #0]
 8005b30:	69d3      	ldr	r3, [r2, #28]
 8005b32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b36:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b38:	6822      	ldr	r2, [r4, #0]
 8005b3a:	69d3      	ldr	r3, [r2, #28]
 8005b3c:	6929      	ldr	r1, [r5, #16]
 8005b3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b42:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005b44:	2000      	movs	r0, #0
      break;
 8005b46:	e000      	b.n	8005b4a <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8005b48:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005b50:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005b52:	2002      	movs	r0, #2
 8005b54:	e7fc      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0xd6>

08005b56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b56:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b58:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b5a:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005b64:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b68:	6082      	str	r2, [r0, #8]
}
 8005b6a:	bc10      	pop	{r4}
 8005b6c:	4770      	bx	lr

08005b6e <HAL_TIM_ConfigClockSource>:
{
 8005b6e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005b70:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	f000 80ad 	beq.w	8005cd4 <HAL_TIM_ConfigClockSource+0x166>
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005b82:	2302      	movs	r3, #2
 8005b84:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005b88:	6802      	ldr	r2, [r0, #0]
 8005b8a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b90:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005b94:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005b96:	680b      	ldr	r3, [r1, #0]
 8005b98:	2b60      	cmp	r3, #96	@ 0x60
 8005b9a:	d060      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0xf0>
 8005b9c:	d83d      	bhi.n	8005c1a <HAL_TIM_ConfigClockSource+0xac>
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d079      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x128>
 8005ba2:	d91c      	bls.n	8005bde <HAL_TIM_ConfigClockSource+0x70>
 8005ba4:	2b50      	cmp	r3, #80	@ 0x50
 8005ba6:	d136      	bne.n	8005c16 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba8:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8005baa:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005bac:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005bae:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb0:	6a1a      	ldr	r2, [r3, #32]
 8005bb2:	f022 0201 	bic.w	r2, r2, #1
 8005bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bba:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bbe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bc2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005bc6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8005bc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bca:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bcc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005bce:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bd4:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8005bd8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bda:	2000      	movs	r0, #0
}
 8005bdc:	e012      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d002      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x7a>
 8005be2:	d90b      	bls.n	8005bfc <HAL_TIM_ConfigClockSource+0x8e>
 8005be4:	2b30      	cmp	r3, #48	@ 0x30
 8005be6:	d114      	bne.n	8005c12 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005be8:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005bea:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8005bf6:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf8:	2000      	movs	r0, #0
}
 8005bfa:	e003      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8005bfc:	f033 0210 	bics.w	r2, r3, #16
 8005c00:	d0f2      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x7a>
 8005c02:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8005c12:	2001      	movs	r0, #1
 8005c14:	e7f6      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x96>
 8005c16:	2001      	movs	r0, #1
 8005c18:	e7f4      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x96>
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1e:	d055      	beq.n	8005ccc <HAL_TIM_ConfigClockSource+0x15e>
 8005c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c24:	d10c      	bne.n	8005c40 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8005c26:	68cb      	ldr	r3, [r1, #12]
 8005c28:	684a      	ldr	r2, [r1, #4]
 8005c2a:	6889      	ldr	r1, [r1, #8]
 8005c2c:	6800      	ldr	r0, [r0, #0]
 8005c2e:	f7ff ff92 	bl	8005b56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	6893      	ldr	r3, [r2, #8]
 8005c36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c3a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3c:	2000      	movs	r0, #0
      break;
 8005c3e:	e7e1      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8005c40:	2b70      	cmp	r3, #112	@ 0x70
 8005c42:	d145      	bne.n	8005cd0 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8005c44:	68cb      	ldr	r3, [r1, #12]
 8005c46:	684a      	ldr	r2, [r1, #4]
 8005c48:	6889      	ldr	r1, [r1, #8]
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	f7ff ff83 	bl	8005b56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c50:	6822      	ldr	r2, [r4, #0]
 8005c52:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005c58:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2000      	movs	r0, #0
      break;
 8005c5c:	e7d2      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c5e:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c60:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005c62:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005c64:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c66:	6a19      	ldr	r1, [r3, #32]
 8005c68:	f021 0110 	bic.w	r1, r1, #16
 8005c6c:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c6e:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c70:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c74:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c7c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005c80:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c82:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c84:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005c86:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c8c:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005c90:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c92:	2000      	movs	r0, #0
}
 8005c94:	e7b6      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c96:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c98:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005c9a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005c9c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9e:	6a1a      	ldr	r2, [r3, #32]
 8005ca0:	f022 0201 	bic.w	r2, r2, #1
 8005ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ca8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cac:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cb0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005cb4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8005cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cb8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cba:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005cbc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cc2:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005cc6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc8:	2000      	movs	r0, #0
}
 8005cca:	e79b      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8005ccc:	2000      	movs	r0, #0
 8005cce:	e799      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	e797      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8005cd4:	2002      	movs	r0, #2
 8005cd6:	e79b      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0xa2>

08005cd8 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd8:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cdc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cde:	f04f 0c01 	mov.w	ip, #1
 8005ce2:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8005ce6:	ea23 030c 	bic.w	r3, r3, ip
 8005cea:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cec:	6a03      	ldr	r3, [r0, #32]
 8005cee:	408a      	lsls	r2, r1
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	6202      	str	r2, [r0, #32]
}
 8005cf4:	4770      	bx	lr
	...

08005cf8 <HAL_TIM_PWM_Start>:
{
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	bb01      	cbnz	r1, 8005d42 <HAL_TIM_PWM_Start+0x4a>
 8005d00:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d152      	bne.n	8005db0 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d10:	2201      	movs	r2, #1
 8005d12:	4601      	mov	r1, r0
 8005d14:	6820      	ldr	r0, [r4, #0]
 8005d16:	f7ff ffdf 	bl	8005cd8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	4a26      	ldr	r2, [pc, #152]	@ (8005db8 <HAL_TIM_PWM_Start+0xc0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d034      	beq.n	8005d8c <HAL_TIM_PWM_Start+0x94>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d26:	d038      	beq.n	8005d9a <HAL_TIM_PWM_Start+0xa2>
 8005d28:	4a24      	ldr	r2, [pc, #144]	@ (8005dbc <HAL_TIM_PWM_Start+0xc4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d035      	beq.n	8005d9a <HAL_TIM_PWM_Start+0xa2>
 8005d2e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d031      	beq.n	8005d9a <HAL_TIM_PWM_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	f042 0201 	orr.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005d3e:	2000      	movs	r0, #0
 8005d40:	e035      	b.n	8005dae <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d42:	2904      	cmp	r1, #4
 8005d44:	d00c      	beq.n	8005d60 <HAL_TIM_PWM_Start+0x68>
 8005d46:	2908      	cmp	r1, #8
 8005d48:	bf0c      	ite	eq
 8005d4a:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 8005d4e:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	bf18      	it	ne
 8005d58:	2301      	movne	r3, #1
 8005d5a:	b143      	cbz	r3, 8005d6e <HAL_TIM_PWM_Start+0x76>
    return HAL_ERROR;
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	e026      	b.n	8005dae <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d60:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	bf18      	it	ne
 8005d6a:	2301      	movne	r3, #1
 8005d6c:	e7f5      	b.n	8005d5a <HAL_TIM_PWM_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d6e:	2804      	cmp	r0, #4
 8005d70:	d008      	beq.n	8005d84 <HAL_TIM_PWM_Start+0x8c>
 8005d72:	2808      	cmp	r0, #8
 8005d74:	f04f 0302 	mov.w	r3, #2
 8005d78:	bf0c      	ite	eq
 8005d7a:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8005d7e:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8005d82:	e7c5      	b.n	8005d10 <HAL_TIM_PWM_Start+0x18>
 8005d84:	2302      	movs	r3, #2
 8005d86:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005d8a:	e7c1      	b.n	8005d10 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8005d8c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8005d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d92:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d1c3      	bne.n	8005d22 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da0:	2a06      	cmp	r2, #6
 8005da2:	d007      	beq.n	8005db4 <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005dac:	2000      	movs	r0, #0
}
 8005dae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005db0:	2001      	movs	r0, #1
 8005db2:	e7fc      	b.n	8005dae <HAL_TIM_PWM_Start+0xb6>
  return HAL_OK;
 8005db4:	2000      	movs	r0, #0
 8005db6:	e7fa      	b.n	8005dae <HAL_TIM_PWM_Start+0xb6>
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40000400 	.word	0x40000400

08005dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005dc4:	2a01      	cmp	r2, #1
 8005dc6:	d02b      	beq.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8005dc8:	b430      	push	{r4, r5}
 8005dca:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dd8:	6804      	ldr	r4, [r0, #0]
 8005dda:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ddc:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dde:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de2:	680d      	ldr	r5, [r1, #0]
 8005de4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de6:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4c0e      	ldr	r4, [pc, #56]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8005dec:	42a2      	cmp	r2, r4
 8005dee:	d00a      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8005df0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005df4:	d007      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8005df6:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8005dfa:	42a2      	cmp	r2, r4
 8005dfc:	d003      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8005dfe:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8005e02:	42a2      	cmp	r2, r4
 8005e04:	d104      	bne.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e06:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e0a:	6849      	ldr	r1, [r1, #4]
 8005e0c:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e0e:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e16:	2000      	movs	r0, #0
 8005e18:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005e1c:	bc30      	pop	{r4, r5}
 8005e1e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005e20:	2002      	movs	r0, #2
}
 8005e22:	4770      	bx	lr
 8005e24:	40012c00 	.word	0x40012c00

08005e28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e28:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d021      	beq.n	8005e76 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8005e32:	2301      	movs	r3, #1
 8005e34:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e38:	68cb      	ldr	r3, [r1, #12]
 8005e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e3e:	6888      	ldr	r0, [r1, #8]
 8005e40:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e46:	6848      	ldr	r0, [r1, #4]
 8005e48:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e4e:	6808      	ldr	r0, [r1, #0]
 8005e50:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e56:	6908      	ldr	r0, [r1, #16]
 8005e58:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e5e:	6948      	ldr	r0, [r1, #20]
 8005e60:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e66:	69c9      	ldr	r1, [r1, #28]
 8005e68:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e6a:	6811      	ldr	r1, [r2, #0]
 8005e6c:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005e74:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005e76:	2002      	movs	r0, #2
}
 8005e78:	4770      	bx	lr

08005e7a <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e7c:	4770      	bx	lr

08005e7e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e7e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	f102 030c 	add.w	r3, r2, #12
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	320c      	adds	r2, #12
 8005e8e:	e842 3100 	strex	r1, r3, [r2]
 8005e92:	2900      	cmp	r1, #0
 8005e94:	d1f3      	bne.n	8005e7e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	f102 0314 	add.w	r3, r2, #20
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	3214      	adds	r2, #20
 8005ea6:	e842 3100 	strex	r1, r3, [r2]
 8005eaa:	2900      	cmp	r1, #0
 8005eac:	d1f3      	bne.n	8005e96 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d005      	beq.n	8005ec0 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8005ebe:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	f102 030c 	add.w	r3, r2, #12
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	320c      	adds	r2, #12
 8005ed0:	e842 3100 	strex	r1, r3, [r2]
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	d1f3      	bne.n	8005ec0 <UART_EndRxTransfer+0x42>
 8005ed8:	e7ec      	b.n	8005eb4 <UART_EndRxTransfer+0x36>
	...

08005edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005edc:	b510      	push	{r4, lr}
 8005ede:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee0:	6802      	ldr	r2, [r0, #0]
 8005ee2:	6913      	ldr	r3, [r2, #16]
 8005ee4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005ee8:	68c1      	ldr	r1, [r0, #12]
 8005eea:	430b      	orrs	r3, r1
 8005eec:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8005eee:	6801      	ldr	r1, [r0, #0]
 8005ef0:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ef2:	6883      	ldr	r3, [r0, #8]
 8005ef4:	6900      	ldr	r0, [r0, #16]
 8005ef6:	4303      	orrs	r3, r0
 8005ef8:	6960      	ldr	r0, [r4, #20]
 8005efa:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8005efc:	f422 52b0 	bic.w	r2, r2, #5632	@ 0x1600
 8005f00:	f022 020c 	bic.w	r2, r2, #12
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	6953      	ldr	r3, [r2, #20]
 8005f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f10:	69a1      	ldr	r1, [r4, #24]
 8005f12:	430b      	orrs	r3, r1
 8005f14:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	4b11      	ldr	r3, [pc, #68]	@ (8005f60 <UART_SetConfig+0x84>)
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d01b      	beq.n	8005f56 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f1e:	f7ff fa2f 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8005f22:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f2c:	6862      	ldr	r2, [r4, #4]
 8005f2e:	0092      	lsls	r2, r2, #2
 8005f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f34:	6820      	ldr	r0, [r4, #0]
 8005f36:	490b      	ldr	r1, [pc, #44]	@ (8005f64 <UART_SetConfig+0x88>)
 8005f38:	fba1 4203 	umull	r4, r2, r1, r3
 8005f3c:	0952      	lsrs	r2, r2, #5
 8005f3e:	2464      	movs	r4, #100	@ 0x64
 8005f40:	fb04 3312 	mls	r3, r4, r2, r3
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	3332      	adds	r3, #50	@ 0x32
 8005f48:	fba1 1303 	umull	r1, r3, r1, r3
 8005f4c:	0112      	lsls	r2, r2, #4
 8005f4e:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 8005f52:	6082      	str	r2, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f54:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f56:	f7ff fa23 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	e7e2      	b.n	8005f24 <UART_SetConfig+0x48>
 8005f5e:	bf00      	nop
 8005f60:	40013800 	.word	0x40013800
 8005f64:	51eb851f 	.word	0x51eb851f

08005f68 <UART_WaitOnFlagUntilTimeout>:
{
 8005f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	460e      	mov	r6, r1
 8005f70:	4615      	mov	r5, r2
 8005f72:	4699      	mov	r9, r3
 8005f74:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f76:	f8d8 3000 	ldr.w	r3, [r8]
 8005f7a:	681c      	ldr	r4, [r3, #0]
 8005f7c:	ea36 0404 	bics.w	r4, r6, r4
 8005f80:	bf0c      	ite	eq
 8005f82:	2401      	moveq	r4, #1
 8005f84:	2400      	movne	r4, #0
 8005f86:	42ac      	cmp	r4, r5
 8005f88:	d12d      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8005f8a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005f8e:	d0f4      	beq.n	8005f7a <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f90:	b12f      	cbz	r7, 8005f9e <UART_WaitOnFlagUntilTimeout+0x36>
 8005f92:	f7fd fd1d 	bl	80039d0 <HAL_GetTick>
 8005f96:	eba0 0009 	sub.w	r0, r0, r9
 8005f9a:	42b8      	cmp	r0, r7
 8005f9c:	d9eb      	bls.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f9e:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	f102 030c 	add.w	r3, r2, #12
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	320c      	adds	r2, #12
 8005fb0:	e842 3100 	strex	r1, r3, [r2]
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	d1f2      	bne.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x36>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb8:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	f102 0314 	add.w	r3, r2, #20
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	3214      	adds	r2, #20
 8005fca:	e842 3100 	strex	r1, r3, [r2]
 8005fce:	2900      	cmp	r1, #0
 8005fd0:	d1f2      	bne.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x50>
        huart->gState  = HAL_UART_STATE_READY;
 8005fd2:	2320      	movs	r3, #32
 8005fd4:	f888 3041 	strb.w	r3, [r8, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	f888 3042 	strb.w	r3, [r8, #66]	@ 0x42
        __HAL_UNLOCK(huart);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
        return HAL_TIMEOUT;
 8005fe2:	2003      	movs	r0, #3
 8005fe4:	e000      	b.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8005fe6:	2000      	movs	r0, #0
}
 8005fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005fec <HAL_UART_Init>:
  if (huart == NULL)
 8005fec:	b360      	cbz	r0, 8006048 <HAL_UART_Init+0x5c>
{
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005ff6:	b313      	cbz	r3, 800603e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8005ff8:	2324      	movs	r3, #36	@ 0x24
 8005ffa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8005ffe:	6822      	ldr	r2, [r4, #0]
 8006000:	68d3      	ldr	r3, [r2, #12]
 8006002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006006:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006008:	4620      	mov	r0, r4
 800600a:	f7ff ff67 	bl	8005edc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	6913      	ldr	r3, [r2, #16]
 8006012:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8006016:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006018:	6822      	ldr	r2, [r4, #0]
 800601a:	6953      	ldr	r3, [r2, #20]
 800601c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8006020:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006022:	6822      	ldr	r2, [r4, #0]
 8006024:	68d3      	ldr	r3, [r2, #12]
 8006026:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800602a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602c:	2000      	movs	r0, #0
 800602e:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006030:	2320      	movs	r3, #32
 8006032:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006036:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800603a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800603c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800603e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8006042:	f7fd fa9d 	bl	8003580 <HAL_UART_MspInit>
 8006046:	e7d7      	b.n	8005ff8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006048:	2001      	movs	r0, #1
}
 800604a:	4770      	bx	lr

0800604c <HAL_UART_Transmit>:
{
 800604c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006054:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b20      	cmp	r3, #32
 800605c:	d151      	bne.n	8006102 <HAL_UART_Transmit+0xb6>
 800605e:	4604      	mov	r4, r0
 8006060:	460d      	mov	r5, r1
 8006062:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006064:	2900      	cmp	r1, #0
 8006066:	d050      	beq.n	800610a <HAL_UART_Transmit+0xbe>
 8006068:	b90a      	cbnz	r2, 800606e <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800606a:	2001      	movs	r0, #1
 800606c:	e04a      	b.n	8006104 <HAL_UART_Transmit+0xb8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606e:	2300      	movs	r3, #0
 8006070:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006072:	2321      	movs	r3, #33	@ 0x21
 8006074:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8006078:	f7fd fcaa 	bl	80039d0 <HAL_GetTick>
 800607c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800607e:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006082:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006086:	68a3      	ldr	r3, [r4, #8]
 8006088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800608c:	d009      	beq.n	80060a2 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 800608e:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8006092:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006094:	b29b      	uxth	r3, r3
 8006096:	b343      	cbz	r3, 80060ea <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006098:	f04f 0900 	mov.w	r9, #0
 800609c:	f04f 0880 	mov.w	r8, #128	@ 0x80
 80060a0:	e014      	b.n	80060cc <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a2:	6923      	ldr	r3, [r4, #16]
 80060a4:	b113      	cbz	r3, 80060ac <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 80060a6:	f04f 0a00 	mov.w	sl, #0
 80060aa:	e7f2      	b.n	8006092 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 80060ac:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80060ae:	2500      	movs	r5, #0
 80060b0:	e7ef      	b.n	8006092 <HAL_UART_Transmit+0x46>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80060b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060bc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80060be:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80060c0:	3a01      	subs	r2, #1
 80060c2:	b292      	uxth	r2, r2
 80060c4:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80060c6:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	b173      	cbz	r3, 80060ea <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060cc:	9600      	str	r6, [sp, #0]
 80060ce:	463b      	mov	r3, r7
 80060d0:	464a      	mov	r2, r9
 80060d2:	4641      	mov	r1, r8
 80060d4:	4620      	mov	r0, r4
 80060d6:	f7ff ff47 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 80060da:	b9c0      	cbnz	r0, 800610e <HAL_UART_Transmit+0xc2>
      if (pdata8bits == NULL)
 80060dc:	2d00      	cmp	r5, #0
 80060de:	d0e8      	beq.n	80060b2 <HAL_UART_Transmit+0x66>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80060e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060e8:	e7e9      	b.n	80060be <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060ea:	9600      	str	r6, [sp, #0]
 80060ec:	463b      	mov	r3, r7
 80060ee:	2200      	movs	r2, #0
 80060f0:	2140      	movs	r1, #64	@ 0x40
 80060f2:	4620      	mov	r0, r4
 80060f4:	f7ff ff38 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 80060f8:	b958      	cbnz	r0, 8006112 <HAL_UART_Transmit+0xc6>
    huart->gState = HAL_UART_STATE_READY;
 80060fa:	2320      	movs	r3, #32
 80060fc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8006100:	e000      	b.n	8006104 <HAL_UART_Transmit+0xb8>
    return HAL_BUSY;
 8006102:	2002      	movs	r0, #2
}
 8006104:	b002      	add	sp, #8
 8006106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800610a:	2001      	movs	r0, #1
 800610c:	e7fa      	b.n	8006104 <HAL_UART_Transmit+0xb8>
        return HAL_TIMEOUT;
 800610e:	2003      	movs	r0, #3
 8006110:	e7f8      	b.n	8006104 <HAL_UART_Transmit+0xb8>
      return HAL_TIMEOUT;
 8006112:	2003      	movs	r0, #3
 8006114:	e7f6      	b.n	8006104 <HAL_UART_Transmit+0xb8>

08006116 <HAL_UART_Receive>:
{
 8006116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800611e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b20      	cmp	r3, #32
 8006126:	d15a      	bne.n	80061de <HAL_UART_Receive+0xc8>
 8006128:	4604      	mov	r4, r0
 800612a:	460d      	mov	r5, r1
 800612c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800612e:	2900      	cmp	r1, #0
 8006130:	d059      	beq.n	80061e6 <HAL_UART_Receive+0xd0>
 8006132:	b90a      	cbnz	r2, 8006138 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8006134:	2001      	movs	r0, #1
 8006136:	e053      	b.n	80061e0 <HAL_UART_Receive+0xca>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	2300      	movs	r3, #0
 800613a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800613c:	2222      	movs	r2, #34	@ 0x22
 800613e:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006142:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8006144:	f7fd fc44 	bl	80039d0 <HAL_GetTick>
 8006148:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800614a:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800614e:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006158:	d00a      	beq.n	8006170 <HAL_UART_Receive+0x5a>
      pdata16bits = NULL;
 800615a:	f04f 0a00 	mov.w	sl, #0
    while (huart->RxXferCount > 0U)
 800615e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d036      	beq.n	80061d4 <HAL_UART_Receive+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006166:	f04f 0900 	mov.w	r9, #0
 800616a:	f04f 0820 	mov.w	r8, #32
 800616e:	e01a      	b.n	80061a6 <HAL_UART_Receive+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	b113      	cbz	r3, 800617a <HAL_UART_Receive+0x64>
      pdata16bits = NULL;
 8006174:	f04f 0a00 	mov.w	sl, #0
 8006178:	e7f1      	b.n	800615e <HAL_UART_Receive+0x48>
      pdata16bits = (uint16_t *) pData;
 800617a:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 800617c:	2500      	movs	r5, #0
 800617e:	e7ee      	b.n	800615e <HAL_UART_Receive+0x48>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006188:	f82a 3b02 	strh.w	r3, [sl], #2
        pdata16bits++;
 800618c:	e004      	b.n	8006198 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8006198:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 800619a:	3a01      	subs	r2, #1
 800619c:	b292      	uxth	r2, r2
 800619e:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80061a0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	b1b3      	cbz	r3, 80061d4 <HAL_UART_Receive+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061a6:	9600      	str	r6, [sp, #0]
 80061a8:	463b      	mov	r3, r7
 80061aa:	464a      	mov	r2, r9
 80061ac:	4641      	mov	r1, r8
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7ff feda 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 80061b4:	b9c8      	cbnz	r0, 80061ea <HAL_UART_Receive+0xd4>
      if (pdata8bits == NULL)
 80061b6:	2d00      	cmp	r5, #0
 80061b8:	d0e2      	beq.n	8006180 <HAL_UART_Receive+0x6a>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061ba:	68a3      	ldr	r3, [r4, #8]
 80061bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c0:	d0e5      	beq.n	800618e <HAL_UART_Receive+0x78>
 80061c2:	b913      	cbnz	r3, 80061ca <HAL_UART_Receive+0xb4>
 80061c4:	6923      	ldr	r3, [r4, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0e1      	beq.n	800618e <HAL_UART_Receive+0x78>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061d2:	e7df      	b.n	8006194 <HAL_UART_Receive+0x7e>
    huart->RxState = HAL_UART_STATE_READY;
 80061d4:	2320      	movs	r3, #32
 80061d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 80061da:	2000      	movs	r0, #0
 80061dc:	e000      	b.n	80061e0 <HAL_UART_Receive+0xca>
    return HAL_BUSY;
 80061de:	2002      	movs	r0, #2
}
 80061e0:	b002      	add	sp, #8
 80061e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80061e6:	2001      	movs	r0, #1
 80061e8:	e7fa      	b.n	80061e0 <HAL_UART_Receive+0xca>
        return HAL_TIMEOUT;
 80061ea:	2003      	movs	r0, #3
 80061ec:	e7f8      	b.n	80061e0 <HAL_UART_Receive+0xca>

080061ee <HAL_UART_TxCpltCallback>:
}
 80061ee:	4770      	bx	lr

080061f0 <HAL_UART_RxCpltCallback>:
}
 80061f0:	4770      	bx	lr

080061f2 <HAL_UART_ErrorCallback>:
}
 80061f2:	4770      	bx	lr

080061f4 <UART_DMAAbortOnError>:
{
 80061f4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80061fc:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80061fe:	f7ff fff8 	bl	80061f2 <HAL_UART_ErrorCallback>
}
 8006202:	bd08      	pop	{r3, pc}

08006204 <HAL_UARTEx_RxEventCallback>:
}
 8006204:	4770      	bx	lr

08006206 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006206:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b22      	cmp	r3, #34	@ 0x22
 800620e:	d11d      	bne.n	800624c <UART_Receive_IT+0x46>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006210:	6883      	ldr	r3, [r0, #8]
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006216:	d006      	beq.n	8006226 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006218:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800621a:	b17b      	cbz	r3, 800623c <UART_Receive_IT+0x36>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800621c:	6803      	ldr	r3, [r0, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006224:	e01a      	b.n	800625c <UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006226:	6903      	ldr	r3, [r0, #16]
 8006228:	b9a3      	cbnz	r3, 8006254 <UART_Receive_IT+0x4e>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800622a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800622c:	6803      	ldr	r3, [r0, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006234:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006236:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006238:	3302      	adds	r3, #2
 800623a:	e012      	b.n	8006262 <UART_Receive_IT+0x5c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800623c:	6903      	ldr	r3, [r0, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1ec      	bne.n	800621c <UART_Receive_IT+0x16>
 8006242:	e008      	b.n	8006256 <UART_Receive_IT+0x50>
        HAL_UART_RxCpltCallback(huart);
 8006244:	f7ff ffd4 	bl	80061f0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8006248:	2000      	movs	r0, #0
 800624a:	e048      	b.n	80062de <UART_Receive_IT+0xd8>
    return HAL_BUSY;
 800624c:	2002      	movs	r0, #2
 800624e:	4770      	bx	lr
    return HAL_OK;
 8006250:	2000      	movs	r0, #0
}
 8006252:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006254:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006256:	6803      	ldr	r3, [r0, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800625e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006260:	3301      	adds	r3, #1
      huart->pRxBuffPtr += 2U;
 8006262:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8006264:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8006266:	3b01      	subs	r3, #1
 8006268:	b29b      	uxth	r3, r3
 800626a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1ef      	bne.n	8006250 <UART_Receive_IT+0x4a>
{
 8006270:	b500      	push	{lr}
 8006272:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006274:	6802      	ldr	r2, [r0, #0]
 8006276:	68d3      	ldr	r3, [r2, #12]
 8006278:	f023 0320 	bic.w	r3, r3, #32
 800627c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800627e:	6802      	ldr	r2, [r0, #0]
 8006280:	68d3      	ldr	r3, [r2, #12]
 8006282:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006286:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006288:	6802      	ldr	r2, [r0, #0]
 800628a:	6953      	ldr	r3, [r2, #20]
 800628c:	f023 0301 	bic.w	r3, r3, #1
 8006290:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006292:	2320      	movs	r3, #32
 8006294:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006298:	2300      	movs	r3, #0
 800629a:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d1d0      	bne.n	8006244 <UART_Receive_IT+0x3e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	2300      	movs	r3, #0
 80062a4:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	f102 030c 	add.w	r3, r2, #12
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	320c      	adds	r2, #12
 80062b6:	e842 3100 	strex	r1, r3, [r2]
 80062ba:	2900      	cmp	r1, #0
 80062bc:	d1f3      	bne.n	80062a6 <UART_Receive_IT+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062be:	6803      	ldr	r3, [r0, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	f012 0f10 	tst.w	r2, #16
 80062c6:	d006      	beq.n	80062d6 <UART_Receive_IT+0xd0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062c8:	2200      	movs	r2, #0
 80062ca:	9201      	str	r2, [sp, #4]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	9201      	str	r2, [sp, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	9301      	str	r3, [sp, #4]
 80062d4:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062d6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80062d8:	f7ff ff94 	bl	8006204 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80062dc:	2000      	movs	r0, #0
}
 80062de:	b003      	add	sp, #12
 80062e0:	f85d fb04 	ldr.w	pc, [sp], #4

080062e4 <HAL_UART_IRQHandler>:
{
 80062e4:	b510      	push	{r4, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062ea:	6802      	ldr	r2, [r0, #0]
 80062ec:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ee:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062f0:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80062f2:	f013 0f0f 	tst.w	r3, #15
 80062f6:	d109      	bne.n	800630c <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062f8:	f013 0f20 	tst.w	r3, #32
 80062fc:	d00d      	beq.n	800631a <HAL_UART_IRQHandler+0x36>
 80062fe:	f010 0f20 	tst.w	r0, #32
 8006302:	d00a      	beq.n	800631a <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8006304:	4620      	mov	r0, r4
 8006306:	f7ff ff7e 	bl	8006206 <UART_Receive_IT>
      return;
 800630a:	e018      	b.n	800633e <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800630c:	f001 0101 	and.w	r1, r1, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006310:	f400 7c90 	and.w	ip, r0, #288	@ 0x120
 8006314:	ea5c 0c01 	orrs.w	ip, ip, r1
 8006318:	d113      	bne.n	8006342 <HAL_UART_IRQHandler+0x5e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800631a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800631c:	2901      	cmp	r1, #1
 800631e:	f000 8081 	beq.w	8006424 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006322:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006326:	d003      	beq.n	8006330 <HAL_UART_IRQHandler+0x4c>
 8006328:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800632c:	f040 811a 	bne.w	8006564 <HAL_UART_IRQHandler+0x280>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006330:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006334:	d003      	beq.n	800633e <HAL_UART_IRQHandler+0x5a>
 8006336:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800633a:	f040 8140 	bne.w	80065be <HAL_UART_IRQHandler+0x2da>
}
 800633e:	b002      	add	sp, #8
 8006340:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006342:	f013 0f01 	tst.w	r3, #1
 8006346:	d006      	beq.n	8006356 <HAL_UART_IRQHandler+0x72>
 8006348:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800634c:	d003      	beq.n	8006356 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800634e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006350:	f042 0201 	orr.w	r2, r2, #1
 8006354:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006356:	f013 0f04 	tst.w	r3, #4
 800635a:	d00b      	beq.n	8006374 <HAL_UART_IRQHandler+0x90>
 800635c:	b191      	cbz	r1, 8006384 <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800635e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006360:	f042 0202 	orr.w	r2, r2, #2
 8006364:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006366:	f013 0f02 	tst.w	r3, #2
 800636a:	d107      	bne.n	800637c <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800636c:	f013 0f08 	tst.w	r3, #8
 8006370:	d10f      	bne.n	8006392 <HAL_UART_IRQHandler+0xae>
 8006372:	e012      	b.n	800639a <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006374:	f013 0f02 	tst.w	r3, #2
 8006378:	d004      	beq.n	8006384 <HAL_UART_IRQHandler+0xa0>
 800637a:	b119      	cbz	r1, 8006384 <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800637c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800637e:	f042 0204 	orr.w	r2, r2, #4
 8006382:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006384:	f013 0f08 	tst.w	r3, #8
 8006388:	d007      	beq.n	800639a <HAL_UART_IRQHandler+0xb6>
 800638a:	f000 0220 	and.w	r2, r0, #32
 800638e:	430a      	orrs	r2, r1
 8006390:	d003      	beq.n	800639a <HAL_UART_IRQHandler+0xb6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006392:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006394:	f042 0208 	orr.w	r2, r2, #8
 8006398:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800639a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800639c:	2a00      	cmp	r2, #0
 800639e:	d0ce      	beq.n	800633e <HAL_UART_IRQHandler+0x5a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063a0:	f013 0f20 	tst.w	r3, #32
 80063a4:	d002      	beq.n	80063ac <HAL_UART_IRQHandler+0xc8>
 80063a6:	f010 0f20 	tst.w	r0, #32
 80063aa:	d10e      	bne.n	80063ca <HAL_UART_IRQHandler+0xe6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063b0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063b6:	f002 0208 	and.w	r2, r2, #8
 80063ba:	4313      	orrs	r3, r2
 80063bc:	d109      	bne.n	80063d2 <HAL_UART_IRQHandler+0xee>
        HAL_UART_ErrorCallback(huart);
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff ff17 	bl	80061f2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	6463      	str	r3, [r4, #68]	@ 0x44
 80063c8:	e7b9      	b.n	800633e <HAL_UART_IRQHandler+0x5a>
        UART_Receive_IT(huart);
 80063ca:	4620      	mov	r0, r4
 80063cc:	f7ff ff1b 	bl	8006206 <UART_Receive_IT>
 80063d0:	e7ec      	b.n	80063ac <HAL_UART_IRQHandler+0xc8>
        UART_EndRxTransfer(huart);
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7ff fd53 	bl	8005e7e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80063e0:	d01c      	beq.n	800641c <HAL_UART_IRQHandler+0x138>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	f102 0314 	add.w	r3, r2, #20
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	3214      	adds	r2, #20
 80063f2:	e842 3100 	strex	r1, r3, [r2]
 80063f6:	2900      	cmp	r1, #0
 80063f8:	d1f3      	bne.n	80063e2 <HAL_UART_IRQHandler+0xfe>
          if (huart->hdmarx != NULL)
 80063fa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80063fc:	b153      	cbz	r3, 8006414 <HAL_UART_IRQHandler+0x130>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063fe:	4a75      	ldr	r2, [pc, #468]	@ (80065d4 <HAL_UART_IRQHandler+0x2f0>)
 8006400:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006402:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006404:	f7fd ff7c 	bl	8004300 <HAL_DMA_Abort_IT>
 8006408:	2800      	cmp	r0, #0
 800640a:	d098      	beq.n	800633e <HAL_UART_IRQHandler+0x5a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800640c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800640e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006410:	4798      	blx	r3
 8006412:	e794      	b.n	800633e <HAL_UART_IRQHandler+0x5a>
            HAL_UART_ErrorCallback(huart);
 8006414:	4620      	mov	r0, r4
 8006416:	f7ff feec 	bl	80061f2 <HAL_UART_ErrorCallback>
 800641a:	e790      	b.n	800633e <HAL_UART_IRQHandler+0x5a>
          HAL_UART_ErrorCallback(huart);
 800641c:	4620      	mov	r0, r4
 800641e:	f7ff fee8 	bl	80061f2 <HAL_UART_ErrorCallback>
 8006422:	e78c      	b.n	800633e <HAL_UART_IRQHandler+0x5a>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006424:	f013 0f10 	tst.w	r3, #16
 8006428:	f43f af7b 	beq.w	8006322 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800642c:	f010 0f10 	tst.w	r0, #16
 8006430:	f43f af77 	beq.w	8006322 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006434:	2300      	movs	r3, #0
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	6813      	ldr	r3, [r2, #0]
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	6853      	ldr	r3, [r2, #4]
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006442:	6953      	ldr	r3, [r2, #20]
 8006444:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006448:	d050      	beq.n	80064ec <HAL_UART_IRQHandler+0x208>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800644a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800644c:	6813      	ldr	r3, [r2, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006452:	2b00      	cmp	r3, #0
 8006454:	f43f af73 	beq.w	800633e <HAL_UART_IRQHandler+0x5a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006458:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800645a:	4299      	cmp	r1, r3
 800645c:	f67f af6f 	bls.w	800633e <HAL_UART_IRQHandler+0x5a>
        huart->RxXferCount = nb_remaining_rx_data;
 8006460:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006462:	6993      	ldr	r3, [r2, #24]
 8006464:	2b20      	cmp	r3, #32
 8006466:	d037      	beq.n	80064d8 <HAL_UART_IRQHandler+0x1f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006468:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	f102 030c 	add.w	r3, r2, #12
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	320c      	adds	r2, #12
 8006478:	e842 3100 	strex	r1, r3, [r2]
 800647c:	2900      	cmp	r1, #0
 800647e:	d1f3      	bne.n	8006468 <HAL_UART_IRQHandler+0x184>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006480:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	f102 0314 	add.w	r3, r2, #20
 8006486:	e853 3f00 	ldrex	r3, [r3]
 800648a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	3214      	adds	r2, #20
 8006490:	e842 3100 	strex	r1, r3, [r2]
 8006494:	2900      	cmp	r1, #0
 8006496:	d1f3      	bne.n	8006480 <HAL_UART_IRQHandler+0x19c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006498:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	f102 0314 	add.w	r3, r2, #20
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	3214      	adds	r2, #20
 80064a8:	e842 3100 	strex	r1, r3, [r2]
 80064ac:	2900      	cmp	r1, #0
 80064ae:	d1f3      	bne.n	8006498 <HAL_UART_IRQHandler+0x1b4>
          huart->RxState = HAL_UART_STATE_READY;
 80064b0:	2320      	movs	r3, #32
 80064b2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b6:	2300      	movs	r3, #0
 80064b8:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	f102 030c 	add.w	r3, r2, #12
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	320c      	adds	r2, #12
 80064ca:	e842 3100 	strex	r1, r3, [r2]
 80064ce:	2900      	cmp	r1, #0
 80064d0:	d1f3      	bne.n	80064ba <HAL_UART_IRQHandler+0x1d6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064d2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80064d4:	f7fd fef3 	bl	80042be <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064d8:	2302      	movs	r3, #2
 80064da:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064dc:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80064de:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80064e0:	1ac9      	subs	r1, r1, r3
 80064e2:	b289      	uxth	r1, r1
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7ff fe8d 	bl	8006204 <HAL_UARTEx_RxEventCallback>
 80064ea:	e728      	b.n	800633e <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064ec:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80064ee:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 80064f0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f43f af22 	beq.w	800633e <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064fa:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80064fc:	1a89      	subs	r1, r1, r2
 80064fe:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006500:	2900      	cmp	r1, #0
 8006502:	f43f af1c 	beq.w	800633e <HAL_UART_IRQHandler+0x5a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006506:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	f102 030c 	add.w	r3, r2, #12
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	320c      	adds	r2, #12
 8006516:	e842 3000 	strex	r0, r3, [r2]
 800651a:	2800      	cmp	r0, #0
 800651c:	d1f3      	bne.n	8006506 <HAL_UART_IRQHandler+0x222>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	f102 0314 	add.w	r3, r2, #20
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	3214      	adds	r2, #20
 800652e:	e842 3000 	strex	r0, r3, [r2]
 8006532:	2800      	cmp	r0, #0
 8006534:	d1f3      	bne.n	800651e <HAL_UART_IRQHandler+0x23a>
        huart->RxState = HAL_UART_STATE_READY;
 8006536:	2320      	movs	r3, #32
 8006538:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653c:	2300      	movs	r3, #0
 800653e:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006540:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	f102 030c 	add.w	r3, r2, #12
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	320c      	adds	r2, #12
 8006550:	e842 3000 	strex	r0, r3, [r2]
 8006554:	2800      	cmp	r0, #0
 8006556:	d1f3      	bne.n	8006540 <HAL_UART_IRQHandler+0x25c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006558:	2302      	movs	r3, #2
 800655a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800655c:	4620      	mov	r0, r4
 800655e:	f7ff fe51 	bl	8006204 <HAL_UARTEx_RxEventCallback>
 8006562:	e6ec      	b.n	800633e <HAL_UART_IRQHandler+0x5a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006564:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b21      	cmp	r3, #33	@ 0x21
 800656c:	f47f aee7 	bne.w	800633e <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006570:	68a3      	ldr	r3, [r4, #8]
 8006572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006576:	d016      	beq.n	80065a6 <HAL_UART_IRQHandler+0x2c2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006578:	6a23      	ldr	r3, [r4, #32]
 800657a:	1c59      	adds	r1, r3, #1
 800657c:	6221      	str	r1, [r4, #32]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8006582:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006584:	3b01      	subs	r3, #1
 8006586:	b29b      	uxth	r3, r3
 8006588:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800658a:	2b00      	cmp	r3, #0
 800658c:	f47f aed7 	bne.w	800633e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	68d3      	ldr	r3, [r2, #12]
 8006594:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006598:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	68d3      	ldr	r3, [r2, #12]
 800659e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065a2:	60d3      	str	r3, [r2, #12]
 80065a4:	e6cb      	b.n	800633e <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a6:	6923      	ldr	r3, [r4, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <HAL_UART_IRQHandler+0x294>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065ac:	6a23      	ldr	r3, [r4, #32]
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b4:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80065b6:	6a23      	ldr	r3, [r4, #32]
 80065b8:	3302      	adds	r3, #2
 80065ba:	6223      	str	r3, [r4, #32]
 80065bc:	e7e1      	b.n	8006582 <HAL_UART_IRQHandler+0x29e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065be:	68d3      	ldr	r3, [r2, #12]
 80065c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c4:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80065c6:	2320      	movs	r3, #32
 80065c8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80065cc:	4620      	mov	r0, r4
 80065ce:	f7ff fe0e 	bl	80061ee <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80065d2:	e6b4      	b.n	800633e <HAL_UART_IRQHandler+0x5a>
 80065d4:	080061f5 	.word	0x080061f5

080065d8 <atoi>:
 80065d8:	220a      	movs	r2, #10
 80065da:	2100      	movs	r1, #0
 80065dc:	f000 b87c 	b.w	80066d8 <strtol>

080065e0 <_strtol_l.constprop.0>:
 80065e0:	2b24      	cmp	r3, #36	@ 0x24
 80065e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e6:	4686      	mov	lr, r0
 80065e8:	4690      	mov	r8, r2
 80065ea:	d801      	bhi.n	80065f0 <_strtol_l.constprop.0+0x10>
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d106      	bne.n	80065fe <_strtol_l.constprop.0+0x1e>
 80065f0:	f001 f8f6 	bl	80077e0 <__errno>
 80065f4:	2316      	movs	r3, #22
 80065f6:	6003      	str	r3, [r0, #0]
 80065f8:	2000      	movs	r0, #0
 80065fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fe:	460d      	mov	r5, r1
 8006600:	4833      	ldr	r0, [pc, #204]	@ (80066d0 <_strtol_l.constprop.0+0xf0>)
 8006602:	462a      	mov	r2, r5
 8006604:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006608:	5d06      	ldrb	r6, [r0, r4]
 800660a:	f016 0608 	ands.w	r6, r6, #8
 800660e:	d1f8      	bne.n	8006602 <_strtol_l.constprop.0+0x22>
 8006610:	2c2d      	cmp	r4, #45	@ 0x2d
 8006612:	d12d      	bne.n	8006670 <_strtol_l.constprop.0+0x90>
 8006614:	2601      	movs	r6, #1
 8006616:	782c      	ldrb	r4, [r5, #0]
 8006618:	1c95      	adds	r5, r2, #2
 800661a:	f033 0210 	bics.w	r2, r3, #16
 800661e:	d109      	bne.n	8006634 <_strtol_l.constprop.0+0x54>
 8006620:	2c30      	cmp	r4, #48	@ 0x30
 8006622:	d12a      	bne.n	800667a <_strtol_l.constprop.0+0x9a>
 8006624:	782a      	ldrb	r2, [r5, #0]
 8006626:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800662a:	2a58      	cmp	r2, #88	@ 0x58
 800662c:	d125      	bne.n	800667a <_strtol_l.constprop.0+0x9a>
 800662e:	2310      	movs	r3, #16
 8006630:	786c      	ldrb	r4, [r5, #1]
 8006632:	3502      	adds	r5, #2
 8006634:	2200      	movs	r2, #0
 8006636:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800663a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800663e:	fbbc f9f3 	udiv	r9, ip, r3
 8006642:	4610      	mov	r0, r2
 8006644:	fb03 ca19 	mls	sl, r3, r9, ip
 8006648:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800664c:	2f09      	cmp	r7, #9
 800664e:	d81b      	bhi.n	8006688 <_strtol_l.constprop.0+0xa8>
 8006650:	463c      	mov	r4, r7
 8006652:	42a3      	cmp	r3, r4
 8006654:	dd27      	ble.n	80066a6 <_strtol_l.constprop.0+0xc6>
 8006656:	1c57      	adds	r7, r2, #1
 8006658:	d007      	beq.n	800666a <_strtol_l.constprop.0+0x8a>
 800665a:	4581      	cmp	r9, r0
 800665c:	d320      	bcc.n	80066a0 <_strtol_l.constprop.0+0xc0>
 800665e:	d101      	bne.n	8006664 <_strtol_l.constprop.0+0x84>
 8006660:	45a2      	cmp	sl, r4
 8006662:	db1d      	blt.n	80066a0 <_strtol_l.constprop.0+0xc0>
 8006664:	2201      	movs	r2, #1
 8006666:	fb00 4003 	mla	r0, r0, r3, r4
 800666a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800666e:	e7eb      	b.n	8006648 <_strtol_l.constprop.0+0x68>
 8006670:	2c2b      	cmp	r4, #43	@ 0x2b
 8006672:	bf04      	itt	eq
 8006674:	782c      	ldrbeq	r4, [r5, #0]
 8006676:	1c95      	addeq	r5, r2, #2
 8006678:	e7cf      	b.n	800661a <_strtol_l.constprop.0+0x3a>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1da      	bne.n	8006634 <_strtol_l.constprop.0+0x54>
 800667e:	2c30      	cmp	r4, #48	@ 0x30
 8006680:	bf0c      	ite	eq
 8006682:	2308      	moveq	r3, #8
 8006684:	230a      	movne	r3, #10
 8006686:	e7d5      	b.n	8006634 <_strtol_l.constprop.0+0x54>
 8006688:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800668c:	2f19      	cmp	r7, #25
 800668e:	d801      	bhi.n	8006694 <_strtol_l.constprop.0+0xb4>
 8006690:	3c37      	subs	r4, #55	@ 0x37
 8006692:	e7de      	b.n	8006652 <_strtol_l.constprop.0+0x72>
 8006694:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006698:	2f19      	cmp	r7, #25
 800669a:	d804      	bhi.n	80066a6 <_strtol_l.constprop.0+0xc6>
 800669c:	3c57      	subs	r4, #87	@ 0x57
 800669e:	e7d8      	b.n	8006652 <_strtol_l.constprop.0+0x72>
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295
 80066a4:	e7e1      	b.n	800666a <_strtol_l.constprop.0+0x8a>
 80066a6:	1c53      	adds	r3, r2, #1
 80066a8:	d108      	bne.n	80066bc <_strtol_l.constprop.0+0xdc>
 80066aa:	2322      	movs	r3, #34	@ 0x22
 80066ac:	4660      	mov	r0, ip
 80066ae:	f8ce 3000 	str.w	r3, [lr]
 80066b2:	f1b8 0f00 	cmp.w	r8, #0
 80066b6:	d0a0      	beq.n	80065fa <_strtol_l.constprop.0+0x1a>
 80066b8:	1e69      	subs	r1, r5, #1
 80066ba:	e006      	b.n	80066ca <_strtol_l.constprop.0+0xea>
 80066bc:	b106      	cbz	r6, 80066c0 <_strtol_l.constprop.0+0xe0>
 80066be:	4240      	negs	r0, r0
 80066c0:	f1b8 0f00 	cmp.w	r8, #0
 80066c4:	d099      	beq.n	80065fa <_strtol_l.constprop.0+0x1a>
 80066c6:	2a00      	cmp	r2, #0
 80066c8:	d1f6      	bne.n	80066b8 <_strtol_l.constprop.0+0xd8>
 80066ca:	f8c8 1000 	str.w	r1, [r8]
 80066ce:	e794      	b.n	80065fa <_strtol_l.constprop.0+0x1a>
 80066d0:	0800cd5d 	.word	0x0800cd5d

080066d4 <_strtol_r>:
 80066d4:	f7ff bf84 	b.w	80065e0 <_strtol_l.constprop.0>

080066d8 <strtol>:
 80066d8:	4613      	mov	r3, r2
 80066da:	460a      	mov	r2, r1
 80066dc:	4601      	mov	r1, r0
 80066de:	4802      	ldr	r0, [pc, #8]	@ (80066e8 <strtol+0x10>)
 80066e0:	6800      	ldr	r0, [r0, #0]
 80066e2:	f7ff bf7d 	b.w	80065e0 <_strtol_l.constprop.0>
 80066e6:	bf00      	nop
 80066e8:	20000124 	.word	0x20000124

080066ec <__cvt>:
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f2:	461d      	mov	r5, r3
 80066f4:	bfbb      	ittet	lt
 80066f6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80066fa:	461d      	movlt	r5, r3
 80066fc:	2300      	movge	r3, #0
 80066fe:	232d      	movlt	r3, #45	@ 0x2d
 8006700:	b088      	sub	sp, #32
 8006702:	4614      	mov	r4, r2
 8006704:	bfb8      	it	lt
 8006706:	4614      	movlt	r4, r2
 8006708:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800670a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800670c:	7013      	strb	r3, [r2, #0]
 800670e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006710:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006714:	f023 0820 	bic.w	r8, r3, #32
 8006718:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800671c:	d005      	beq.n	800672a <__cvt+0x3e>
 800671e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006722:	d100      	bne.n	8006726 <__cvt+0x3a>
 8006724:	3601      	adds	r6, #1
 8006726:	2302      	movs	r3, #2
 8006728:	e000      	b.n	800672c <__cvt+0x40>
 800672a:	2303      	movs	r3, #3
 800672c:	aa07      	add	r2, sp, #28
 800672e:	9204      	str	r2, [sp, #16]
 8006730:	aa06      	add	r2, sp, #24
 8006732:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006736:	e9cd 3600 	strd	r3, r6, [sp]
 800673a:	4622      	mov	r2, r4
 800673c:	462b      	mov	r3, r5
 800673e:	f001 f94b 	bl	80079d8 <_dtoa_r>
 8006742:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006746:	4607      	mov	r7, r0
 8006748:	d119      	bne.n	800677e <__cvt+0x92>
 800674a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800674c:	07db      	lsls	r3, r3, #31
 800674e:	d50e      	bpl.n	800676e <__cvt+0x82>
 8006750:	eb00 0906 	add.w	r9, r0, r6
 8006754:	2200      	movs	r2, #0
 8006756:	2300      	movs	r3, #0
 8006758:	4620      	mov	r0, r4
 800675a:	4629      	mov	r1, r5
 800675c:	f7fa f9d8 	bl	8000b10 <__aeabi_dcmpeq>
 8006760:	b108      	cbz	r0, 8006766 <__cvt+0x7a>
 8006762:	f8cd 901c 	str.w	r9, [sp, #28]
 8006766:	2230      	movs	r2, #48	@ 0x30
 8006768:	9b07      	ldr	r3, [sp, #28]
 800676a:	454b      	cmp	r3, r9
 800676c:	d31e      	bcc.n	80067ac <__cvt+0xc0>
 800676e:	4638      	mov	r0, r7
 8006770:	9b07      	ldr	r3, [sp, #28]
 8006772:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006774:	1bdb      	subs	r3, r3, r7
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	b008      	add	sp, #32
 800677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006782:	eb00 0906 	add.w	r9, r0, r6
 8006786:	d1e5      	bne.n	8006754 <__cvt+0x68>
 8006788:	7803      	ldrb	r3, [r0, #0]
 800678a:	2b30      	cmp	r3, #48	@ 0x30
 800678c:	d10a      	bne.n	80067a4 <__cvt+0xb8>
 800678e:	2200      	movs	r2, #0
 8006790:	2300      	movs	r3, #0
 8006792:	4620      	mov	r0, r4
 8006794:	4629      	mov	r1, r5
 8006796:	f7fa f9bb 	bl	8000b10 <__aeabi_dcmpeq>
 800679a:	b918      	cbnz	r0, 80067a4 <__cvt+0xb8>
 800679c:	f1c6 0601 	rsb	r6, r6, #1
 80067a0:	f8ca 6000 	str.w	r6, [sl]
 80067a4:	f8da 3000 	ldr.w	r3, [sl]
 80067a8:	4499      	add	r9, r3
 80067aa:	e7d3      	b.n	8006754 <__cvt+0x68>
 80067ac:	1c59      	adds	r1, r3, #1
 80067ae:	9107      	str	r1, [sp, #28]
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e7d9      	b.n	8006768 <__cvt+0x7c>

080067b4 <__exponent>:
 80067b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067b6:	2900      	cmp	r1, #0
 80067b8:	bfb6      	itet	lt
 80067ba:	232d      	movlt	r3, #45	@ 0x2d
 80067bc:	232b      	movge	r3, #43	@ 0x2b
 80067be:	4249      	neglt	r1, r1
 80067c0:	2909      	cmp	r1, #9
 80067c2:	7002      	strb	r2, [r0, #0]
 80067c4:	7043      	strb	r3, [r0, #1]
 80067c6:	dd29      	ble.n	800681c <__exponent+0x68>
 80067c8:	f10d 0307 	add.w	r3, sp, #7
 80067cc:	461d      	mov	r5, r3
 80067ce:	270a      	movs	r7, #10
 80067d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80067d4:	461a      	mov	r2, r3
 80067d6:	fb07 1416 	mls	r4, r7, r6, r1
 80067da:	3430      	adds	r4, #48	@ 0x30
 80067dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80067e0:	460c      	mov	r4, r1
 80067e2:	2c63      	cmp	r4, #99	@ 0x63
 80067e4:	4631      	mov	r1, r6
 80067e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80067ea:	dcf1      	bgt.n	80067d0 <__exponent+0x1c>
 80067ec:	3130      	adds	r1, #48	@ 0x30
 80067ee:	1e94      	subs	r4, r2, #2
 80067f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067f4:	4623      	mov	r3, r4
 80067f6:	1c41      	adds	r1, r0, #1
 80067f8:	42ab      	cmp	r3, r5
 80067fa:	d30a      	bcc.n	8006812 <__exponent+0x5e>
 80067fc:	f10d 0309 	add.w	r3, sp, #9
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	42ac      	cmp	r4, r5
 8006804:	bf88      	it	hi
 8006806:	2300      	movhi	r3, #0
 8006808:	3302      	adds	r3, #2
 800680a:	4403      	add	r3, r0
 800680c:	1a18      	subs	r0, r3, r0
 800680e:	b003      	add	sp, #12
 8006810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006812:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006816:	f801 6f01 	strb.w	r6, [r1, #1]!
 800681a:	e7ed      	b.n	80067f8 <__exponent+0x44>
 800681c:	2330      	movs	r3, #48	@ 0x30
 800681e:	3130      	adds	r1, #48	@ 0x30
 8006820:	7083      	strb	r3, [r0, #2]
 8006822:	70c1      	strb	r1, [r0, #3]
 8006824:	1d03      	adds	r3, r0, #4
 8006826:	e7f1      	b.n	800680c <__exponent+0x58>

08006828 <_printf_float>:
 8006828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	b091      	sub	sp, #68	@ 0x44
 800682e:	460c      	mov	r4, r1
 8006830:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006834:	4616      	mov	r6, r2
 8006836:	461f      	mov	r7, r3
 8006838:	4605      	mov	r5, r0
 800683a:	f000 ff87 	bl	800774c <_localeconv_r>
 800683e:	6803      	ldr	r3, [r0, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	9308      	str	r3, [sp, #32]
 8006844:	f7f9 fc84 	bl	8000150 <strlen>
 8006848:	2300      	movs	r3, #0
 800684a:	930e      	str	r3, [sp, #56]	@ 0x38
 800684c:	f8d8 3000 	ldr.w	r3, [r8]
 8006850:	9009      	str	r0, [sp, #36]	@ 0x24
 8006852:	3307      	adds	r3, #7
 8006854:	f023 0307 	bic.w	r3, r3, #7
 8006858:	f103 0208 	add.w	r2, r3, #8
 800685c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006860:	f8d4 b000 	ldr.w	fp, [r4]
 8006864:	f8c8 2000 	str.w	r2, [r8]
 8006868:	e9d3 8900 	ldrd	r8, r9, [r3]
 800686c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006870:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006872:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006876:	f04f 32ff 	mov.w	r2, #4294967295
 800687a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800687e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006882:	4b9c      	ldr	r3, [pc, #624]	@ (8006af4 <_printf_float+0x2cc>)
 8006884:	f7fa f976 	bl	8000b74 <__aeabi_dcmpun>
 8006888:	bb70      	cbnz	r0, 80068e8 <_printf_float+0xc0>
 800688a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800688e:	f04f 32ff 	mov.w	r2, #4294967295
 8006892:	4b98      	ldr	r3, [pc, #608]	@ (8006af4 <_printf_float+0x2cc>)
 8006894:	f7fa f950 	bl	8000b38 <__aeabi_dcmple>
 8006898:	bb30      	cbnz	r0, 80068e8 <_printf_float+0xc0>
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7fa f93f 	bl	8000b24 <__aeabi_dcmplt>
 80068a6:	b110      	cbz	r0, 80068ae <_printf_float+0x86>
 80068a8:	232d      	movs	r3, #45	@ 0x2d
 80068aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068ae:	4a92      	ldr	r2, [pc, #584]	@ (8006af8 <_printf_float+0x2d0>)
 80068b0:	4b92      	ldr	r3, [pc, #584]	@ (8006afc <_printf_float+0x2d4>)
 80068b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80068b6:	bf94      	ite	ls
 80068b8:	4690      	movls	r8, r2
 80068ba:	4698      	movhi	r8, r3
 80068bc:	2303      	movs	r3, #3
 80068be:	f04f 0900 	mov.w	r9, #0
 80068c2:	6123      	str	r3, [r4, #16]
 80068c4:	f02b 0304 	bic.w	r3, fp, #4
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	4633      	mov	r3, r6
 80068cc:	4621      	mov	r1, r4
 80068ce:	4628      	mov	r0, r5
 80068d0:	9700      	str	r7, [sp, #0]
 80068d2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80068d4:	f000 f9d4 	bl	8006c80 <_printf_common>
 80068d8:	3001      	adds	r0, #1
 80068da:	f040 8090 	bne.w	80069fe <_printf_float+0x1d6>
 80068de:	f04f 30ff 	mov.w	r0, #4294967295
 80068e2:	b011      	add	sp, #68	@ 0x44
 80068e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e8:	4642      	mov	r2, r8
 80068ea:	464b      	mov	r3, r9
 80068ec:	4640      	mov	r0, r8
 80068ee:	4649      	mov	r1, r9
 80068f0:	f7fa f940 	bl	8000b74 <__aeabi_dcmpun>
 80068f4:	b148      	cbz	r0, 800690a <_printf_float+0xe2>
 80068f6:	464b      	mov	r3, r9
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bfb8      	it	lt
 80068fc:	232d      	movlt	r3, #45	@ 0x2d
 80068fe:	4a80      	ldr	r2, [pc, #512]	@ (8006b00 <_printf_float+0x2d8>)
 8006900:	bfb8      	it	lt
 8006902:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006906:	4b7f      	ldr	r3, [pc, #508]	@ (8006b04 <_printf_float+0x2dc>)
 8006908:	e7d3      	b.n	80068b2 <_printf_float+0x8a>
 800690a:	6863      	ldr	r3, [r4, #4]
 800690c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	d13f      	bne.n	8006994 <_printf_float+0x16c>
 8006914:	2306      	movs	r3, #6
 8006916:	6063      	str	r3, [r4, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	9206      	str	r2, [sp, #24]
 8006922:	aa0e      	add	r2, sp, #56	@ 0x38
 8006924:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006928:	aa0d      	add	r2, sp, #52	@ 0x34
 800692a:	9203      	str	r2, [sp, #12]
 800692c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006930:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006934:	6863      	ldr	r3, [r4, #4]
 8006936:	4642      	mov	r2, r8
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4628      	mov	r0, r5
 800693c:	464b      	mov	r3, r9
 800693e:	910a      	str	r1, [sp, #40]	@ 0x28
 8006940:	f7ff fed4 	bl	80066ec <__cvt>
 8006944:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006946:	4680      	mov	r8, r0
 8006948:	2947      	cmp	r1, #71	@ 0x47
 800694a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800694c:	d128      	bne.n	80069a0 <_printf_float+0x178>
 800694e:	1cc8      	adds	r0, r1, #3
 8006950:	db02      	blt.n	8006958 <_printf_float+0x130>
 8006952:	6863      	ldr	r3, [r4, #4]
 8006954:	4299      	cmp	r1, r3
 8006956:	dd40      	ble.n	80069da <_printf_float+0x1b2>
 8006958:	f1aa 0a02 	sub.w	sl, sl, #2
 800695c:	fa5f fa8a 	uxtb.w	sl, sl
 8006960:	4652      	mov	r2, sl
 8006962:	3901      	subs	r1, #1
 8006964:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006968:	910d      	str	r1, [sp, #52]	@ 0x34
 800696a:	f7ff ff23 	bl	80067b4 <__exponent>
 800696e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006970:	4681      	mov	r9, r0
 8006972:	1813      	adds	r3, r2, r0
 8006974:	2a01      	cmp	r2, #1
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	dc02      	bgt.n	8006980 <_printf_float+0x158>
 800697a:	6822      	ldr	r2, [r4, #0]
 800697c:	07d2      	lsls	r2, r2, #31
 800697e:	d501      	bpl.n	8006984 <_printf_float+0x15c>
 8006980:	3301      	adds	r3, #1
 8006982:	6123      	str	r3, [r4, #16]
 8006984:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006988:	2b00      	cmp	r3, #0
 800698a:	d09e      	beq.n	80068ca <_printf_float+0xa2>
 800698c:	232d      	movs	r3, #45	@ 0x2d
 800698e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006992:	e79a      	b.n	80068ca <_printf_float+0xa2>
 8006994:	2947      	cmp	r1, #71	@ 0x47
 8006996:	d1bf      	bne.n	8006918 <_printf_float+0xf0>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1bd      	bne.n	8006918 <_printf_float+0xf0>
 800699c:	2301      	movs	r3, #1
 800699e:	e7ba      	b.n	8006916 <_printf_float+0xee>
 80069a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069a4:	d9dc      	bls.n	8006960 <_printf_float+0x138>
 80069a6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80069aa:	d118      	bne.n	80069de <_printf_float+0x1b6>
 80069ac:	2900      	cmp	r1, #0
 80069ae:	6863      	ldr	r3, [r4, #4]
 80069b0:	dd0b      	ble.n	80069ca <_printf_float+0x1a2>
 80069b2:	6121      	str	r1, [r4, #16]
 80069b4:	b913      	cbnz	r3, 80069bc <_printf_float+0x194>
 80069b6:	6822      	ldr	r2, [r4, #0]
 80069b8:	07d0      	lsls	r0, r2, #31
 80069ba:	d502      	bpl.n	80069c2 <_printf_float+0x19a>
 80069bc:	3301      	adds	r3, #1
 80069be:	440b      	add	r3, r1
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	f04f 0900 	mov.w	r9, #0
 80069c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80069c8:	e7dc      	b.n	8006984 <_printf_float+0x15c>
 80069ca:	b913      	cbnz	r3, 80069d2 <_printf_float+0x1aa>
 80069cc:	6822      	ldr	r2, [r4, #0]
 80069ce:	07d2      	lsls	r2, r2, #31
 80069d0:	d501      	bpl.n	80069d6 <_printf_float+0x1ae>
 80069d2:	3302      	adds	r3, #2
 80069d4:	e7f4      	b.n	80069c0 <_printf_float+0x198>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e7f2      	b.n	80069c0 <_printf_float+0x198>
 80069da:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80069de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069e0:	4299      	cmp	r1, r3
 80069e2:	db05      	blt.n	80069f0 <_printf_float+0x1c8>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	6121      	str	r1, [r4, #16]
 80069e8:	07d8      	lsls	r0, r3, #31
 80069ea:	d5ea      	bpl.n	80069c2 <_printf_float+0x19a>
 80069ec:	1c4b      	adds	r3, r1, #1
 80069ee:	e7e7      	b.n	80069c0 <_printf_float+0x198>
 80069f0:	2900      	cmp	r1, #0
 80069f2:	bfcc      	ite	gt
 80069f4:	2201      	movgt	r2, #1
 80069f6:	f1c1 0202 	rsble	r2, r1, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	e7e0      	b.n	80069c0 <_printf_float+0x198>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	055a      	lsls	r2, r3, #21
 8006a02:	d407      	bmi.n	8006a14 <_printf_float+0x1ec>
 8006a04:	6923      	ldr	r3, [r4, #16]
 8006a06:	4642      	mov	r2, r8
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d12b      	bne.n	8006a6a <_printf_float+0x242>
 8006a12:	e764      	b.n	80068de <_printf_float+0xb6>
 8006a14:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a18:	f240 80dc 	bls.w	8006bd4 <_printf_float+0x3ac>
 8006a1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a20:	2200      	movs	r2, #0
 8006a22:	2300      	movs	r3, #0
 8006a24:	f7fa f874 	bl	8000b10 <__aeabi_dcmpeq>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d033      	beq.n	8006a94 <_printf_float+0x26c>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	4a35      	ldr	r2, [pc, #212]	@ (8006b08 <_printf_float+0x2e0>)
 8006a34:	47b8      	blx	r7
 8006a36:	3001      	adds	r0, #1
 8006a38:	f43f af51 	beq.w	80068de <_printf_float+0xb6>
 8006a3c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006a40:	4543      	cmp	r3, r8
 8006a42:	db02      	blt.n	8006a4a <_printf_float+0x222>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	07d8      	lsls	r0, r3, #31
 8006a48:	d50f      	bpl.n	8006a6a <_printf_float+0x242>
 8006a4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b8      	blx	r7
 8006a54:	3001      	adds	r0, #1
 8006a56:	f43f af42 	beq.w	80068de <_printf_float+0xb6>
 8006a5a:	f04f 0900 	mov.w	r9, #0
 8006a5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a62:	f104 0a1a 	add.w	sl, r4, #26
 8006a66:	45c8      	cmp	r8, r9
 8006a68:	dc09      	bgt.n	8006a7e <_printf_float+0x256>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	079b      	lsls	r3, r3, #30
 8006a6e:	f100 8102 	bmi.w	8006c76 <_printf_float+0x44e>
 8006a72:	68e0      	ldr	r0, [r4, #12]
 8006a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a76:	4298      	cmp	r0, r3
 8006a78:	bfb8      	it	lt
 8006a7a:	4618      	movlt	r0, r3
 8006a7c:	e731      	b.n	80068e2 <_printf_float+0xba>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4652      	mov	r2, sl
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f af28 	beq.w	80068de <_printf_float+0xb6>
 8006a8e:	f109 0901 	add.w	r9, r9, #1
 8006a92:	e7e8      	b.n	8006a66 <_printf_float+0x23e>
 8006a94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dc38      	bgt.n	8006b0c <_printf_float+0x2e4>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	4a19      	ldr	r2, [pc, #100]	@ (8006b08 <_printf_float+0x2e0>)
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f43f af1a 	beq.w	80068de <_printf_float+0xb6>
 8006aaa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006aae:	ea59 0303 	orrs.w	r3, r9, r3
 8006ab2:	d102      	bne.n	8006aba <_printf_float+0x292>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	07d9      	lsls	r1, r3, #31
 8006ab8:	d5d7      	bpl.n	8006a6a <_printf_float+0x242>
 8006aba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006abe:	4631      	mov	r1, r6
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f43f af0a 	beq.w	80068de <_printf_float+0xb6>
 8006aca:	f04f 0a00 	mov.w	sl, #0
 8006ace:	f104 0b1a 	add.w	fp, r4, #26
 8006ad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ad4:	425b      	negs	r3, r3
 8006ad6:	4553      	cmp	r3, sl
 8006ad8:	dc01      	bgt.n	8006ade <_printf_float+0x2b6>
 8006ada:	464b      	mov	r3, r9
 8006adc:	e793      	b.n	8006a06 <_printf_float+0x1de>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	465a      	mov	r2, fp
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b8      	blx	r7
 8006ae8:	3001      	adds	r0, #1
 8006aea:	f43f aef8 	beq.w	80068de <_printf_float+0xb6>
 8006aee:	f10a 0a01 	add.w	sl, sl, #1
 8006af2:	e7ee      	b.n	8006ad2 <_printf_float+0x2aa>
 8006af4:	7fefffff 	.word	0x7fefffff
 8006af8:	0800ce5d 	.word	0x0800ce5d
 8006afc:	0800ce61 	.word	0x0800ce61
 8006b00:	0800ce65 	.word	0x0800ce65
 8006b04:	0800ce69 	.word	0x0800ce69
 8006b08:	0800ce6d 	.word	0x0800ce6d
 8006b0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b0e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006b12:	4553      	cmp	r3, sl
 8006b14:	bfa8      	it	ge
 8006b16:	4653      	movge	r3, sl
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	4699      	mov	r9, r3
 8006b1c:	dc36      	bgt.n	8006b8c <_printf_float+0x364>
 8006b1e:	f04f 0b00 	mov.w	fp, #0
 8006b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b26:	f104 021a 	add.w	r2, r4, #26
 8006b2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b2e:	eba3 0309 	sub.w	r3, r3, r9
 8006b32:	455b      	cmp	r3, fp
 8006b34:	dc31      	bgt.n	8006b9a <_printf_float+0x372>
 8006b36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b38:	459a      	cmp	sl, r3
 8006b3a:	dc3a      	bgt.n	8006bb2 <_printf_float+0x38a>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	07da      	lsls	r2, r3, #31
 8006b40:	d437      	bmi.n	8006bb2 <_printf_float+0x38a>
 8006b42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b44:	ebaa 0903 	sub.w	r9, sl, r3
 8006b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b4a:	ebaa 0303 	sub.w	r3, sl, r3
 8006b4e:	4599      	cmp	r9, r3
 8006b50:	bfa8      	it	ge
 8006b52:	4699      	movge	r9, r3
 8006b54:	f1b9 0f00 	cmp.w	r9, #0
 8006b58:	dc33      	bgt.n	8006bc2 <_printf_float+0x39a>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b62:	f104 0b1a 	add.w	fp, r4, #26
 8006b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b68:	ebaa 0303 	sub.w	r3, sl, r3
 8006b6c:	eba3 0309 	sub.w	r3, r3, r9
 8006b70:	4543      	cmp	r3, r8
 8006b72:	f77f af7a 	ble.w	8006a6a <_printf_float+0x242>
 8006b76:	2301      	movs	r3, #1
 8006b78:	465a      	mov	r2, fp
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	47b8      	blx	r7
 8006b80:	3001      	adds	r0, #1
 8006b82:	f43f aeac 	beq.w	80068de <_printf_float+0xb6>
 8006b86:	f108 0801 	add.w	r8, r8, #1
 8006b8a:	e7ec      	b.n	8006b66 <_printf_float+0x33e>
 8006b8c:	4642      	mov	r2, r8
 8006b8e:	4631      	mov	r1, r6
 8006b90:	4628      	mov	r0, r5
 8006b92:	47b8      	blx	r7
 8006b94:	3001      	adds	r0, #1
 8006b96:	d1c2      	bne.n	8006b1e <_printf_float+0x2f6>
 8006b98:	e6a1      	b.n	80068de <_printf_float+0xb6>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	920a      	str	r2, [sp, #40]	@ 0x28
 8006ba2:	47b8      	blx	r7
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	f43f ae9a 	beq.w	80068de <_printf_float+0xb6>
 8006baa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bac:	f10b 0b01 	add.w	fp, fp, #1
 8006bb0:	e7bb      	b.n	8006b2a <_printf_float+0x302>
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d1c0      	bne.n	8006b42 <_printf_float+0x31a>
 8006bc0:	e68d      	b.n	80068de <_printf_float+0xb6>
 8006bc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4628      	mov	r0, r5
 8006bca:	4442      	add	r2, r8
 8006bcc:	47b8      	blx	r7
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d1c3      	bne.n	8006b5a <_printf_float+0x332>
 8006bd2:	e684      	b.n	80068de <_printf_float+0xb6>
 8006bd4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006bd8:	f1ba 0f01 	cmp.w	sl, #1
 8006bdc:	dc01      	bgt.n	8006be2 <_printf_float+0x3ba>
 8006bde:	07db      	lsls	r3, r3, #31
 8006be0:	d536      	bpl.n	8006c50 <_printf_float+0x428>
 8006be2:	2301      	movs	r3, #1
 8006be4:	4642      	mov	r2, r8
 8006be6:	4631      	mov	r1, r6
 8006be8:	4628      	mov	r0, r5
 8006bea:	47b8      	blx	r7
 8006bec:	3001      	adds	r0, #1
 8006bee:	f43f ae76 	beq.w	80068de <_printf_float+0xb6>
 8006bf2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f43f ae6e 	beq.w	80068de <_printf_float+0xb6>
 8006c02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c06:	2200      	movs	r2, #0
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c0e:	f7f9 ff7f 	bl	8000b10 <__aeabi_dcmpeq>
 8006c12:	b9c0      	cbnz	r0, 8006c46 <_printf_float+0x41e>
 8006c14:	4653      	mov	r3, sl
 8006c16:	f108 0201 	add.w	r2, r8, #1
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b8      	blx	r7
 8006c20:	3001      	adds	r0, #1
 8006c22:	d10c      	bne.n	8006c3e <_printf_float+0x416>
 8006c24:	e65b      	b.n	80068de <_printf_float+0xb6>
 8006c26:	2301      	movs	r3, #1
 8006c28:	465a      	mov	r2, fp
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	47b8      	blx	r7
 8006c30:	3001      	adds	r0, #1
 8006c32:	f43f ae54 	beq.w	80068de <_printf_float+0xb6>
 8006c36:	f108 0801 	add.w	r8, r8, #1
 8006c3a:	45d0      	cmp	r8, sl
 8006c3c:	dbf3      	blt.n	8006c26 <_printf_float+0x3fe>
 8006c3e:	464b      	mov	r3, r9
 8006c40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c44:	e6e0      	b.n	8006a08 <_printf_float+0x1e0>
 8006c46:	f04f 0800 	mov.w	r8, #0
 8006c4a:	f104 0b1a 	add.w	fp, r4, #26
 8006c4e:	e7f4      	b.n	8006c3a <_printf_float+0x412>
 8006c50:	2301      	movs	r3, #1
 8006c52:	4642      	mov	r2, r8
 8006c54:	e7e1      	b.n	8006c1a <_printf_float+0x3f2>
 8006c56:	2301      	movs	r3, #1
 8006c58:	464a      	mov	r2, r9
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	f43f ae3c 	beq.w	80068de <_printf_float+0xb6>
 8006c66:	f108 0801 	add.w	r8, r8, #1
 8006c6a:	68e3      	ldr	r3, [r4, #12]
 8006c6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006c6e:	1a5b      	subs	r3, r3, r1
 8006c70:	4543      	cmp	r3, r8
 8006c72:	dcf0      	bgt.n	8006c56 <_printf_float+0x42e>
 8006c74:	e6fd      	b.n	8006a72 <_printf_float+0x24a>
 8006c76:	f04f 0800 	mov.w	r8, #0
 8006c7a:	f104 0919 	add.w	r9, r4, #25
 8006c7e:	e7f4      	b.n	8006c6a <_printf_float+0x442>

08006c80 <_printf_common>:
 8006c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c84:	4616      	mov	r6, r2
 8006c86:	4698      	mov	r8, r3
 8006c88:	688a      	ldr	r2, [r1, #8]
 8006c8a:	690b      	ldr	r3, [r1, #16]
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	bfb8      	it	lt
 8006c92:	4613      	movlt	r3, r2
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ca0:	b10a      	cbz	r2, 8006ca6 <_printf_common+0x26>
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	6033      	str	r3, [r6, #0]
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	0699      	lsls	r1, r3, #26
 8006caa:	bf42      	ittt	mi
 8006cac:	6833      	ldrmi	r3, [r6, #0]
 8006cae:	3302      	addmi	r3, #2
 8006cb0:	6033      	strmi	r3, [r6, #0]
 8006cb2:	6825      	ldr	r5, [r4, #0]
 8006cb4:	f015 0506 	ands.w	r5, r5, #6
 8006cb8:	d106      	bne.n	8006cc8 <_printf_common+0x48>
 8006cba:	f104 0a19 	add.w	sl, r4, #25
 8006cbe:	68e3      	ldr	r3, [r4, #12]
 8006cc0:	6832      	ldr	r2, [r6, #0]
 8006cc2:	1a9b      	subs	r3, r3, r2
 8006cc4:	42ab      	cmp	r3, r5
 8006cc6:	dc2b      	bgt.n	8006d20 <_printf_common+0xa0>
 8006cc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ccc:	6822      	ldr	r2, [r4, #0]
 8006cce:	3b00      	subs	r3, #0
 8006cd0:	bf18      	it	ne
 8006cd2:	2301      	movne	r3, #1
 8006cd4:	0692      	lsls	r2, r2, #26
 8006cd6:	d430      	bmi.n	8006d3a <_printf_common+0xba>
 8006cd8:	4641      	mov	r1, r8
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ce0:	47c8      	blx	r9
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d023      	beq.n	8006d2e <_printf_common+0xae>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	6922      	ldr	r2, [r4, #16]
 8006cea:	f003 0306 	and.w	r3, r3, #6
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	bf14      	ite	ne
 8006cf2:	2500      	movne	r5, #0
 8006cf4:	6833      	ldreq	r3, [r6, #0]
 8006cf6:	f04f 0600 	mov.w	r6, #0
 8006cfa:	bf08      	it	eq
 8006cfc:	68e5      	ldreq	r5, [r4, #12]
 8006cfe:	f104 041a 	add.w	r4, r4, #26
 8006d02:	bf08      	it	eq
 8006d04:	1aed      	subeq	r5, r5, r3
 8006d06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d0a:	bf08      	it	eq
 8006d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bfc4      	itt	gt
 8006d14:	1a9b      	subgt	r3, r3, r2
 8006d16:	18ed      	addgt	r5, r5, r3
 8006d18:	42b5      	cmp	r5, r6
 8006d1a:	d11a      	bne.n	8006d52 <_printf_common+0xd2>
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	e008      	b.n	8006d32 <_printf_common+0xb2>
 8006d20:	2301      	movs	r3, #1
 8006d22:	4652      	mov	r2, sl
 8006d24:	4641      	mov	r1, r8
 8006d26:	4638      	mov	r0, r7
 8006d28:	47c8      	blx	r9
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d103      	bne.n	8006d36 <_printf_common+0xb6>
 8006d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	3501      	adds	r5, #1
 8006d38:	e7c1      	b.n	8006cbe <_printf_common+0x3e>
 8006d3a:	2030      	movs	r0, #48	@ 0x30
 8006d3c:	18e1      	adds	r1, r4, r3
 8006d3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d48:	4422      	add	r2, r4
 8006d4a:	3302      	adds	r3, #2
 8006d4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d50:	e7c2      	b.n	8006cd8 <_printf_common+0x58>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4622      	mov	r2, r4
 8006d56:	4641      	mov	r1, r8
 8006d58:	4638      	mov	r0, r7
 8006d5a:	47c8      	blx	r9
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d0e6      	beq.n	8006d2e <_printf_common+0xae>
 8006d60:	3601      	adds	r6, #1
 8006d62:	e7d9      	b.n	8006d18 <_printf_common+0x98>

08006d64 <_printf_i>:
 8006d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	7e0f      	ldrb	r7, [r1, #24]
 8006d6a:	4691      	mov	r9, r2
 8006d6c:	2f78      	cmp	r7, #120	@ 0x78
 8006d6e:	4680      	mov	r8, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	469a      	mov	sl, r3
 8006d74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d7a:	d807      	bhi.n	8006d8c <_printf_i+0x28>
 8006d7c:	2f62      	cmp	r7, #98	@ 0x62
 8006d7e:	d80a      	bhi.n	8006d96 <_printf_i+0x32>
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	f000 80d3 	beq.w	8006f2c <_printf_i+0x1c8>
 8006d86:	2f58      	cmp	r7, #88	@ 0x58
 8006d88:	f000 80ba 	beq.w	8006f00 <_printf_i+0x19c>
 8006d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d94:	e03a      	b.n	8006e0c <_printf_i+0xa8>
 8006d96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d9a:	2b15      	cmp	r3, #21
 8006d9c:	d8f6      	bhi.n	8006d8c <_printf_i+0x28>
 8006d9e:	a101      	add	r1, pc, #4	@ (adr r1, 8006da4 <_printf_i+0x40>)
 8006da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006da4:	08006dfd 	.word	0x08006dfd
 8006da8:	08006e11 	.word	0x08006e11
 8006dac:	08006d8d 	.word	0x08006d8d
 8006db0:	08006d8d 	.word	0x08006d8d
 8006db4:	08006d8d 	.word	0x08006d8d
 8006db8:	08006d8d 	.word	0x08006d8d
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006d8d 	.word	0x08006d8d
 8006dc4:	08006d8d 	.word	0x08006d8d
 8006dc8:	08006d8d 	.word	0x08006d8d
 8006dcc:	08006d8d 	.word	0x08006d8d
 8006dd0:	08006f13 	.word	0x08006f13
 8006dd4:	08006e3b 	.word	0x08006e3b
 8006dd8:	08006ecd 	.word	0x08006ecd
 8006ddc:	08006d8d 	.word	0x08006d8d
 8006de0:	08006d8d 	.word	0x08006d8d
 8006de4:	08006f35 	.word	0x08006f35
 8006de8:	08006d8d 	.word	0x08006d8d
 8006dec:	08006e3b 	.word	0x08006e3b
 8006df0:	08006d8d 	.word	0x08006d8d
 8006df4:	08006d8d 	.word	0x08006d8d
 8006df8:	08006ed5 	.word	0x08006ed5
 8006dfc:	6833      	ldr	r3, [r6, #0]
 8006dfe:	1d1a      	adds	r2, r3, #4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6032      	str	r2, [r6, #0]
 8006e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e09e      	b.n	8006f4e <_printf_i+0x1ea>
 8006e10:	6833      	ldr	r3, [r6, #0]
 8006e12:	6820      	ldr	r0, [r4, #0]
 8006e14:	1d19      	adds	r1, r3, #4
 8006e16:	6031      	str	r1, [r6, #0]
 8006e18:	0606      	lsls	r6, r0, #24
 8006e1a:	d501      	bpl.n	8006e20 <_printf_i+0xbc>
 8006e1c:	681d      	ldr	r5, [r3, #0]
 8006e1e:	e003      	b.n	8006e28 <_printf_i+0xc4>
 8006e20:	0645      	lsls	r5, r0, #25
 8006e22:	d5fb      	bpl.n	8006e1c <_printf_i+0xb8>
 8006e24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	da03      	bge.n	8006e34 <_printf_i+0xd0>
 8006e2c:	232d      	movs	r3, #45	@ 0x2d
 8006e2e:	426d      	negs	r5, r5
 8006e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e34:	230a      	movs	r3, #10
 8006e36:	4859      	ldr	r0, [pc, #356]	@ (8006f9c <_printf_i+0x238>)
 8006e38:	e011      	b.n	8006e5e <_printf_i+0xfa>
 8006e3a:	6821      	ldr	r1, [r4, #0]
 8006e3c:	6833      	ldr	r3, [r6, #0]
 8006e3e:	0608      	lsls	r0, r1, #24
 8006e40:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e44:	d402      	bmi.n	8006e4c <_printf_i+0xe8>
 8006e46:	0649      	lsls	r1, r1, #25
 8006e48:	bf48      	it	mi
 8006e4a:	b2ad      	uxthmi	r5, r5
 8006e4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e4e:	6033      	str	r3, [r6, #0]
 8006e50:	bf14      	ite	ne
 8006e52:	230a      	movne	r3, #10
 8006e54:	2308      	moveq	r3, #8
 8006e56:	4851      	ldr	r0, [pc, #324]	@ (8006f9c <_printf_i+0x238>)
 8006e58:	2100      	movs	r1, #0
 8006e5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e5e:	6866      	ldr	r6, [r4, #4]
 8006e60:	2e00      	cmp	r6, #0
 8006e62:	bfa8      	it	ge
 8006e64:	6821      	ldrge	r1, [r4, #0]
 8006e66:	60a6      	str	r6, [r4, #8]
 8006e68:	bfa4      	itt	ge
 8006e6a:	f021 0104 	bicge.w	r1, r1, #4
 8006e6e:	6021      	strge	r1, [r4, #0]
 8006e70:	b90d      	cbnz	r5, 8006e76 <_printf_i+0x112>
 8006e72:	2e00      	cmp	r6, #0
 8006e74:	d04b      	beq.n	8006f0e <_printf_i+0x1aa>
 8006e76:	4616      	mov	r6, r2
 8006e78:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e7c:	fb03 5711 	mls	r7, r3, r1, r5
 8006e80:	5dc7      	ldrb	r7, [r0, r7]
 8006e82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e86:	462f      	mov	r7, r5
 8006e88:	42bb      	cmp	r3, r7
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	d9f4      	bls.n	8006e78 <_printf_i+0x114>
 8006e8e:	2b08      	cmp	r3, #8
 8006e90:	d10b      	bne.n	8006eaa <_printf_i+0x146>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	07df      	lsls	r7, r3, #31
 8006e96:	d508      	bpl.n	8006eaa <_printf_i+0x146>
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	6861      	ldr	r1, [r4, #4]
 8006e9c:	4299      	cmp	r1, r3
 8006e9e:	bfde      	ittt	le
 8006ea0:	2330      	movle	r3, #48	@ 0x30
 8006ea2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ea6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006eaa:	1b92      	subs	r2, r2, r6
 8006eac:	6122      	str	r2, [r4, #16]
 8006eae:	464b      	mov	r3, r9
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	f8cd a000 	str.w	sl, [sp]
 8006eb8:	aa03      	add	r2, sp, #12
 8006eba:	f7ff fee1 	bl	8006c80 <_printf_common>
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d14a      	bne.n	8006f58 <_printf_i+0x1f4>
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	b004      	add	sp, #16
 8006ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	f043 0320 	orr.w	r3, r3, #32
 8006ed2:	6023      	str	r3, [r4, #0]
 8006ed4:	2778      	movs	r7, #120	@ 0x78
 8006ed6:	4832      	ldr	r0, [pc, #200]	@ (8006fa0 <_printf_i+0x23c>)
 8006ed8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	6831      	ldr	r1, [r6, #0]
 8006ee0:	061f      	lsls	r7, r3, #24
 8006ee2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ee6:	d402      	bmi.n	8006eee <_printf_i+0x18a>
 8006ee8:	065f      	lsls	r7, r3, #25
 8006eea:	bf48      	it	mi
 8006eec:	b2ad      	uxthmi	r5, r5
 8006eee:	6031      	str	r1, [r6, #0]
 8006ef0:	07d9      	lsls	r1, r3, #31
 8006ef2:	bf44      	itt	mi
 8006ef4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ef8:	6023      	strmi	r3, [r4, #0]
 8006efa:	b11d      	cbz	r5, 8006f04 <_printf_i+0x1a0>
 8006efc:	2310      	movs	r3, #16
 8006efe:	e7ab      	b.n	8006e58 <_printf_i+0xf4>
 8006f00:	4826      	ldr	r0, [pc, #152]	@ (8006f9c <_printf_i+0x238>)
 8006f02:	e7e9      	b.n	8006ed8 <_printf_i+0x174>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	f023 0320 	bic.w	r3, r3, #32
 8006f0a:	6023      	str	r3, [r4, #0]
 8006f0c:	e7f6      	b.n	8006efc <_printf_i+0x198>
 8006f0e:	4616      	mov	r6, r2
 8006f10:	e7bd      	b.n	8006e8e <_printf_i+0x12a>
 8006f12:	6833      	ldr	r3, [r6, #0]
 8006f14:	6825      	ldr	r5, [r4, #0]
 8006f16:	1d18      	adds	r0, r3, #4
 8006f18:	6961      	ldr	r1, [r4, #20]
 8006f1a:	6030      	str	r0, [r6, #0]
 8006f1c:	062e      	lsls	r6, r5, #24
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	d501      	bpl.n	8006f26 <_printf_i+0x1c2>
 8006f22:	6019      	str	r1, [r3, #0]
 8006f24:	e002      	b.n	8006f2c <_printf_i+0x1c8>
 8006f26:	0668      	lsls	r0, r5, #25
 8006f28:	d5fb      	bpl.n	8006f22 <_printf_i+0x1be>
 8006f2a:	8019      	strh	r1, [r3, #0]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4616      	mov	r6, r2
 8006f30:	6123      	str	r3, [r4, #16]
 8006f32:	e7bc      	b.n	8006eae <_printf_i+0x14a>
 8006f34:	6833      	ldr	r3, [r6, #0]
 8006f36:	2100      	movs	r1, #0
 8006f38:	1d1a      	adds	r2, r3, #4
 8006f3a:	6032      	str	r2, [r6, #0]
 8006f3c:	681e      	ldr	r6, [r3, #0]
 8006f3e:	6862      	ldr	r2, [r4, #4]
 8006f40:	4630      	mov	r0, r6
 8006f42:	f000 fc82 	bl	800784a <memchr>
 8006f46:	b108      	cbz	r0, 8006f4c <_printf_i+0x1e8>
 8006f48:	1b80      	subs	r0, r0, r6
 8006f4a:	6060      	str	r0, [r4, #4]
 8006f4c:	6863      	ldr	r3, [r4, #4]
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	2300      	movs	r3, #0
 8006f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f56:	e7aa      	b.n	8006eae <_printf_i+0x14a>
 8006f58:	4632      	mov	r2, r6
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	6923      	ldr	r3, [r4, #16]
 8006f60:	47d0      	blx	sl
 8006f62:	3001      	adds	r0, #1
 8006f64:	d0ad      	beq.n	8006ec2 <_printf_i+0x15e>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	079b      	lsls	r3, r3, #30
 8006f6a:	d413      	bmi.n	8006f94 <_printf_i+0x230>
 8006f6c:	68e0      	ldr	r0, [r4, #12]
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	4298      	cmp	r0, r3
 8006f72:	bfb8      	it	lt
 8006f74:	4618      	movlt	r0, r3
 8006f76:	e7a6      	b.n	8006ec6 <_printf_i+0x162>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	4640      	mov	r0, r8
 8006f80:	47d0      	blx	sl
 8006f82:	3001      	adds	r0, #1
 8006f84:	d09d      	beq.n	8006ec2 <_printf_i+0x15e>
 8006f86:	3501      	adds	r5, #1
 8006f88:	68e3      	ldr	r3, [r4, #12]
 8006f8a:	9903      	ldr	r1, [sp, #12]
 8006f8c:	1a5b      	subs	r3, r3, r1
 8006f8e:	42ab      	cmp	r3, r5
 8006f90:	dcf2      	bgt.n	8006f78 <_printf_i+0x214>
 8006f92:	e7eb      	b.n	8006f6c <_printf_i+0x208>
 8006f94:	2500      	movs	r5, #0
 8006f96:	f104 0619 	add.w	r6, r4, #25
 8006f9a:	e7f5      	b.n	8006f88 <_printf_i+0x224>
 8006f9c:	0800ce6f 	.word	0x0800ce6f
 8006fa0:	0800ce80 	.word	0x0800ce80

08006fa4 <_scanf_float>:
 8006fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa8:	b087      	sub	sp, #28
 8006faa:	9303      	str	r3, [sp, #12]
 8006fac:	688b      	ldr	r3, [r1, #8]
 8006fae:	4617      	mov	r7, r2
 8006fb0:	1e5a      	subs	r2, r3, #1
 8006fb2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006fb6:	bf82      	ittt	hi
 8006fb8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006fbc:	eb03 0b05 	addhi.w	fp, r3, r5
 8006fc0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006fc4:	460a      	mov	r2, r1
 8006fc6:	f04f 0500 	mov.w	r5, #0
 8006fca:	bf88      	it	hi
 8006fcc:	608b      	strhi	r3, [r1, #8]
 8006fce:	680b      	ldr	r3, [r1, #0]
 8006fd0:	4680      	mov	r8, r0
 8006fd2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006fd6:	f842 3b1c 	str.w	r3, [r2], #28
 8006fda:	460c      	mov	r4, r1
 8006fdc:	bf98      	it	ls
 8006fde:	f04f 0b00 	movls.w	fp, #0
 8006fe2:	4616      	mov	r6, r2
 8006fe4:	46aa      	mov	sl, r5
 8006fe6:	46a9      	mov	r9, r5
 8006fe8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006fec:	9201      	str	r2, [sp, #4]
 8006fee:	9502      	str	r5, [sp, #8]
 8006ff0:	68a2      	ldr	r2, [r4, #8]
 8006ff2:	b152      	cbz	r2, 800700a <_scanf_float+0x66>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b4e      	cmp	r3, #78	@ 0x4e
 8006ffa:	d865      	bhi.n	80070c8 <_scanf_float+0x124>
 8006ffc:	2b40      	cmp	r3, #64	@ 0x40
 8006ffe:	d83d      	bhi.n	800707c <_scanf_float+0xd8>
 8007000:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007004:	b2c8      	uxtb	r0, r1
 8007006:	280e      	cmp	r0, #14
 8007008:	d93b      	bls.n	8007082 <_scanf_float+0xde>
 800700a:	f1b9 0f00 	cmp.w	r9, #0
 800700e:	d003      	beq.n	8007018 <_scanf_float+0x74>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	f10a 3aff 	add.w	sl, sl, #4294967295
 800701c:	f1ba 0f01 	cmp.w	sl, #1
 8007020:	f200 8118 	bhi.w	8007254 <_scanf_float+0x2b0>
 8007024:	9b01      	ldr	r3, [sp, #4]
 8007026:	429e      	cmp	r6, r3
 8007028:	f200 8109 	bhi.w	800723e <_scanf_float+0x29a>
 800702c:	2001      	movs	r0, #1
 800702e:	b007      	add	sp, #28
 8007030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007034:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007038:	2a0d      	cmp	r2, #13
 800703a:	d8e6      	bhi.n	800700a <_scanf_float+0x66>
 800703c:	a101      	add	r1, pc, #4	@ (adr r1, 8007044 <_scanf_float+0xa0>)
 800703e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007042:	bf00      	nop
 8007044:	0800718b 	.word	0x0800718b
 8007048:	0800700b 	.word	0x0800700b
 800704c:	0800700b 	.word	0x0800700b
 8007050:	0800700b 	.word	0x0800700b
 8007054:	080071eb 	.word	0x080071eb
 8007058:	080071c3 	.word	0x080071c3
 800705c:	0800700b 	.word	0x0800700b
 8007060:	0800700b 	.word	0x0800700b
 8007064:	08007199 	.word	0x08007199
 8007068:	0800700b 	.word	0x0800700b
 800706c:	0800700b 	.word	0x0800700b
 8007070:	0800700b 	.word	0x0800700b
 8007074:	0800700b 	.word	0x0800700b
 8007078:	08007151 	.word	0x08007151
 800707c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007080:	e7da      	b.n	8007038 <_scanf_float+0x94>
 8007082:	290e      	cmp	r1, #14
 8007084:	d8c1      	bhi.n	800700a <_scanf_float+0x66>
 8007086:	a001      	add	r0, pc, #4	@ (adr r0, 800708c <_scanf_float+0xe8>)
 8007088:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800708c:	08007141 	.word	0x08007141
 8007090:	0800700b 	.word	0x0800700b
 8007094:	08007141 	.word	0x08007141
 8007098:	080071d7 	.word	0x080071d7
 800709c:	0800700b 	.word	0x0800700b
 80070a0:	080070e9 	.word	0x080070e9
 80070a4:	08007127 	.word	0x08007127
 80070a8:	08007127 	.word	0x08007127
 80070ac:	08007127 	.word	0x08007127
 80070b0:	08007127 	.word	0x08007127
 80070b4:	08007127 	.word	0x08007127
 80070b8:	08007127 	.word	0x08007127
 80070bc:	08007127 	.word	0x08007127
 80070c0:	08007127 	.word	0x08007127
 80070c4:	08007127 	.word	0x08007127
 80070c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80070ca:	d809      	bhi.n	80070e0 <_scanf_float+0x13c>
 80070cc:	2b60      	cmp	r3, #96	@ 0x60
 80070ce:	d8b1      	bhi.n	8007034 <_scanf_float+0x90>
 80070d0:	2b54      	cmp	r3, #84	@ 0x54
 80070d2:	d07b      	beq.n	80071cc <_scanf_float+0x228>
 80070d4:	2b59      	cmp	r3, #89	@ 0x59
 80070d6:	d198      	bne.n	800700a <_scanf_float+0x66>
 80070d8:	2d07      	cmp	r5, #7
 80070da:	d196      	bne.n	800700a <_scanf_float+0x66>
 80070dc:	2508      	movs	r5, #8
 80070de:	e02c      	b.n	800713a <_scanf_float+0x196>
 80070e0:	2b74      	cmp	r3, #116	@ 0x74
 80070e2:	d073      	beq.n	80071cc <_scanf_float+0x228>
 80070e4:	2b79      	cmp	r3, #121	@ 0x79
 80070e6:	e7f6      	b.n	80070d6 <_scanf_float+0x132>
 80070e8:	6821      	ldr	r1, [r4, #0]
 80070ea:	05c8      	lsls	r0, r1, #23
 80070ec:	d51b      	bpl.n	8007126 <_scanf_float+0x182>
 80070ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80070f2:	6021      	str	r1, [r4, #0]
 80070f4:	f109 0901 	add.w	r9, r9, #1
 80070f8:	f1bb 0f00 	cmp.w	fp, #0
 80070fc:	d003      	beq.n	8007106 <_scanf_float+0x162>
 80070fe:	3201      	adds	r2, #1
 8007100:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007104:	60a2      	str	r2, [r4, #8]
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	3b01      	subs	r3, #1
 800710a:	60a3      	str	r3, [r4, #8]
 800710c:	6923      	ldr	r3, [r4, #16]
 800710e:	3301      	adds	r3, #1
 8007110:	6123      	str	r3, [r4, #16]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3b01      	subs	r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	607b      	str	r3, [r7, #4]
 800711a:	f340 8087 	ble.w	800722c <_scanf_float+0x288>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	3301      	adds	r3, #1
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	e764      	b.n	8006ff0 <_scanf_float+0x4c>
 8007126:	eb1a 0105 	adds.w	r1, sl, r5
 800712a:	f47f af6e 	bne.w	800700a <_scanf_float+0x66>
 800712e:	460d      	mov	r5, r1
 8007130:	468a      	mov	sl, r1
 8007132:	6822      	ldr	r2, [r4, #0]
 8007134:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007138:	6022      	str	r2, [r4, #0]
 800713a:	f806 3b01 	strb.w	r3, [r6], #1
 800713e:	e7e2      	b.n	8007106 <_scanf_float+0x162>
 8007140:	6822      	ldr	r2, [r4, #0]
 8007142:	0610      	lsls	r0, r2, #24
 8007144:	f57f af61 	bpl.w	800700a <_scanf_float+0x66>
 8007148:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800714c:	6022      	str	r2, [r4, #0]
 800714e:	e7f4      	b.n	800713a <_scanf_float+0x196>
 8007150:	f1ba 0f00 	cmp.w	sl, #0
 8007154:	d10e      	bne.n	8007174 <_scanf_float+0x1d0>
 8007156:	f1b9 0f00 	cmp.w	r9, #0
 800715a:	d10e      	bne.n	800717a <_scanf_float+0x1d6>
 800715c:	6822      	ldr	r2, [r4, #0]
 800715e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007162:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007166:	d108      	bne.n	800717a <_scanf_float+0x1d6>
 8007168:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800716c:	f04f 0a01 	mov.w	sl, #1
 8007170:	6022      	str	r2, [r4, #0]
 8007172:	e7e2      	b.n	800713a <_scanf_float+0x196>
 8007174:	f1ba 0f02 	cmp.w	sl, #2
 8007178:	d055      	beq.n	8007226 <_scanf_float+0x282>
 800717a:	2d01      	cmp	r5, #1
 800717c:	d002      	beq.n	8007184 <_scanf_float+0x1e0>
 800717e:	2d04      	cmp	r5, #4
 8007180:	f47f af43 	bne.w	800700a <_scanf_float+0x66>
 8007184:	3501      	adds	r5, #1
 8007186:	b2ed      	uxtb	r5, r5
 8007188:	e7d7      	b.n	800713a <_scanf_float+0x196>
 800718a:	f1ba 0f01 	cmp.w	sl, #1
 800718e:	f47f af3c 	bne.w	800700a <_scanf_float+0x66>
 8007192:	f04f 0a02 	mov.w	sl, #2
 8007196:	e7d0      	b.n	800713a <_scanf_float+0x196>
 8007198:	b97d      	cbnz	r5, 80071ba <_scanf_float+0x216>
 800719a:	f1b9 0f00 	cmp.w	r9, #0
 800719e:	f47f af37 	bne.w	8007010 <_scanf_float+0x6c>
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80071a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80071ac:	f040 8103 	bne.w	80073b6 <_scanf_float+0x412>
 80071b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071b4:	2501      	movs	r5, #1
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	e7bf      	b.n	800713a <_scanf_float+0x196>
 80071ba:	2d03      	cmp	r5, #3
 80071bc:	d0e2      	beq.n	8007184 <_scanf_float+0x1e0>
 80071be:	2d05      	cmp	r5, #5
 80071c0:	e7de      	b.n	8007180 <_scanf_float+0x1dc>
 80071c2:	2d02      	cmp	r5, #2
 80071c4:	f47f af21 	bne.w	800700a <_scanf_float+0x66>
 80071c8:	2503      	movs	r5, #3
 80071ca:	e7b6      	b.n	800713a <_scanf_float+0x196>
 80071cc:	2d06      	cmp	r5, #6
 80071ce:	f47f af1c 	bne.w	800700a <_scanf_float+0x66>
 80071d2:	2507      	movs	r5, #7
 80071d4:	e7b1      	b.n	800713a <_scanf_float+0x196>
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	0591      	lsls	r1, r2, #22
 80071da:	f57f af16 	bpl.w	800700a <_scanf_float+0x66>
 80071de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80071e2:	6022      	str	r2, [r4, #0]
 80071e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80071e8:	e7a7      	b.n	800713a <_scanf_float+0x196>
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80071f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80071f4:	d006      	beq.n	8007204 <_scanf_float+0x260>
 80071f6:	0550      	lsls	r0, r2, #21
 80071f8:	f57f af07 	bpl.w	800700a <_scanf_float+0x66>
 80071fc:	f1b9 0f00 	cmp.w	r9, #0
 8007200:	f000 80d9 	beq.w	80073b6 <_scanf_float+0x412>
 8007204:	0591      	lsls	r1, r2, #22
 8007206:	bf58      	it	pl
 8007208:	9902      	ldrpl	r1, [sp, #8]
 800720a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800720e:	bf58      	it	pl
 8007210:	eba9 0101 	subpl.w	r1, r9, r1
 8007214:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007218:	f04f 0900 	mov.w	r9, #0
 800721c:	bf58      	it	pl
 800721e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007222:	6022      	str	r2, [r4, #0]
 8007224:	e789      	b.n	800713a <_scanf_float+0x196>
 8007226:	f04f 0a03 	mov.w	sl, #3
 800722a:	e786      	b.n	800713a <_scanf_float+0x196>
 800722c:	4639      	mov	r1, r7
 800722e:	4640      	mov	r0, r8
 8007230:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007234:	4798      	blx	r3
 8007236:	2800      	cmp	r0, #0
 8007238:	f43f aeda 	beq.w	8006ff0 <_scanf_float+0x4c>
 800723c:	e6e5      	b.n	800700a <_scanf_float+0x66>
 800723e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007242:	463a      	mov	r2, r7
 8007244:	4640      	mov	r0, r8
 8007246:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800724a:	4798      	blx	r3
 800724c:	6923      	ldr	r3, [r4, #16]
 800724e:	3b01      	subs	r3, #1
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	e6e7      	b.n	8007024 <_scanf_float+0x80>
 8007254:	1e6b      	subs	r3, r5, #1
 8007256:	2b06      	cmp	r3, #6
 8007258:	d824      	bhi.n	80072a4 <_scanf_float+0x300>
 800725a:	2d02      	cmp	r5, #2
 800725c:	d836      	bhi.n	80072cc <_scanf_float+0x328>
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	429e      	cmp	r6, r3
 8007262:	f67f aee3 	bls.w	800702c <_scanf_float+0x88>
 8007266:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800726a:	463a      	mov	r2, r7
 800726c:	4640      	mov	r0, r8
 800726e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007272:	4798      	blx	r3
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	3b01      	subs	r3, #1
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	e7f0      	b.n	800725e <_scanf_float+0x2ba>
 800727c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007280:	463a      	mov	r2, r7
 8007282:	4640      	mov	r0, r8
 8007284:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007288:	4798      	blx	r3
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	3b01      	subs	r3, #1
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007294:	fa5f fa8a 	uxtb.w	sl, sl
 8007298:	f1ba 0f02 	cmp.w	sl, #2
 800729c:	d1ee      	bne.n	800727c <_scanf_float+0x2d8>
 800729e:	3d03      	subs	r5, #3
 80072a0:	b2ed      	uxtb	r5, r5
 80072a2:	1b76      	subs	r6, r6, r5
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	05da      	lsls	r2, r3, #23
 80072a8:	d530      	bpl.n	800730c <_scanf_float+0x368>
 80072aa:	055b      	lsls	r3, r3, #21
 80072ac:	d511      	bpl.n	80072d2 <_scanf_float+0x32e>
 80072ae:	9b01      	ldr	r3, [sp, #4]
 80072b0:	429e      	cmp	r6, r3
 80072b2:	f67f aebb 	bls.w	800702c <_scanf_float+0x88>
 80072b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072ba:	463a      	mov	r2, r7
 80072bc:	4640      	mov	r0, r8
 80072be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072c2:	4798      	blx	r3
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	e7f0      	b.n	80072ae <_scanf_float+0x30a>
 80072cc:	46aa      	mov	sl, r5
 80072ce:	46b3      	mov	fp, r6
 80072d0:	e7de      	b.n	8007290 <_scanf_float+0x2ec>
 80072d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	2965      	cmp	r1, #101	@ 0x65
 80072da:	f103 33ff 	add.w	r3, r3, #4294967295
 80072de:	f106 35ff 	add.w	r5, r6, #4294967295
 80072e2:	6123      	str	r3, [r4, #16]
 80072e4:	d00c      	beq.n	8007300 <_scanf_float+0x35c>
 80072e6:	2945      	cmp	r1, #69	@ 0x45
 80072e8:	d00a      	beq.n	8007300 <_scanf_float+0x35c>
 80072ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072ee:	463a      	mov	r2, r7
 80072f0:	4640      	mov	r0, r8
 80072f2:	4798      	blx	r3
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	1eb5      	subs	r5, r6, #2
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	463a      	mov	r2, r7
 8007302:	4640      	mov	r0, r8
 8007304:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007308:	4798      	blx	r3
 800730a:	462e      	mov	r6, r5
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	f012 0210 	ands.w	r2, r2, #16
 8007312:	d001      	beq.n	8007318 <_scanf_float+0x374>
 8007314:	2000      	movs	r0, #0
 8007316:	e68a      	b.n	800702e <_scanf_float+0x8a>
 8007318:	7032      	strb	r2, [r6, #0]
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007324:	d11c      	bne.n	8007360 <_scanf_float+0x3bc>
 8007326:	9b02      	ldr	r3, [sp, #8]
 8007328:	454b      	cmp	r3, r9
 800732a:	eba3 0209 	sub.w	r2, r3, r9
 800732e:	d123      	bne.n	8007378 <_scanf_float+0x3d4>
 8007330:	2200      	movs	r2, #0
 8007332:	4640      	mov	r0, r8
 8007334:	9901      	ldr	r1, [sp, #4]
 8007336:	f002 fcb7 	bl	8009ca8 <_strtod_r>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	6825      	ldr	r5, [r4, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f015 0f02 	tst.w	r5, #2
 8007344:	4606      	mov	r6, r0
 8007346:	460f      	mov	r7, r1
 8007348:	f103 0204 	add.w	r2, r3, #4
 800734c:	d01f      	beq.n	800738e <_scanf_float+0x3ea>
 800734e:	9903      	ldr	r1, [sp, #12]
 8007350:	600a      	str	r2, [r1, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	e9c3 6700 	strd	r6, r7, [r3]
 8007358:	68e3      	ldr	r3, [r4, #12]
 800735a:	3301      	adds	r3, #1
 800735c:	60e3      	str	r3, [r4, #12]
 800735e:	e7d9      	b.n	8007314 <_scanf_float+0x370>
 8007360:	9b04      	ldr	r3, [sp, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0e4      	beq.n	8007330 <_scanf_float+0x38c>
 8007366:	9905      	ldr	r1, [sp, #20]
 8007368:	230a      	movs	r3, #10
 800736a:	4640      	mov	r0, r8
 800736c:	3101      	adds	r1, #1
 800736e:	f7ff f9b1 	bl	80066d4 <_strtol_r>
 8007372:	9b04      	ldr	r3, [sp, #16]
 8007374:	9e05      	ldr	r6, [sp, #20]
 8007376:	1ac2      	subs	r2, r0, r3
 8007378:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800737c:	429e      	cmp	r6, r3
 800737e:	bf28      	it	cs
 8007380:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007384:	4630      	mov	r0, r6
 8007386:	490d      	ldr	r1, [pc, #52]	@ (80073bc <_scanf_float+0x418>)
 8007388:	f000 f8de 	bl	8007548 <siprintf>
 800738c:	e7d0      	b.n	8007330 <_scanf_float+0x38c>
 800738e:	076d      	lsls	r5, r5, #29
 8007390:	d4dd      	bmi.n	800734e <_scanf_float+0x3aa>
 8007392:	9d03      	ldr	r5, [sp, #12]
 8007394:	602a      	str	r2, [r5, #0]
 8007396:	681d      	ldr	r5, [r3, #0]
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	f7f9 fbea 	bl	8000b74 <__aeabi_dcmpun>
 80073a0:	b120      	cbz	r0, 80073ac <_scanf_float+0x408>
 80073a2:	4807      	ldr	r0, [pc, #28]	@ (80073c0 <_scanf_float+0x41c>)
 80073a4:	f000 fa6e 	bl	8007884 <nanf>
 80073a8:	6028      	str	r0, [r5, #0]
 80073aa:	e7d5      	b.n	8007358 <_scanf_float+0x3b4>
 80073ac:	4630      	mov	r0, r6
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f9 fc3e 	bl	8000c30 <__aeabi_d2f>
 80073b4:	e7f8      	b.n	80073a8 <_scanf_float+0x404>
 80073b6:	f04f 0900 	mov.w	r9, #0
 80073ba:	e62d      	b.n	8007018 <_scanf_float+0x74>
 80073bc:	0800ce91 	.word	0x0800ce91
 80073c0:	0800cf42 	.word	0x0800cf42

080073c4 <std>:
 80073c4:	2300      	movs	r3, #0
 80073c6:	b510      	push	{r4, lr}
 80073c8:	4604      	mov	r4, r0
 80073ca:	e9c0 3300 	strd	r3, r3, [r0]
 80073ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073d2:	6083      	str	r3, [r0, #8]
 80073d4:	8181      	strh	r1, [r0, #12]
 80073d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80073d8:	81c2      	strh	r2, [r0, #14]
 80073da:	6183      	str	r3, [r0, #24]
 80073dc:	4619      	mov	r1, r3
 80073de:	2208      	movs	r2, #8
 80073e0:	305c      	adds	r0, #92	@ 0x5c
 80073e2:	f000 f914 	bl	800760e <memset>
 80073e6:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <std+0x58>)
 80073e8:	6224      	str	r4, [r4, #32]
 80073ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80073ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007420 <std+0x5c>)
 80073ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80073f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007424 <std+0x60>)
 80073f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80073f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <std+0x64>)
 80073f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80073f8:	4b0c      	ldr	r3, [pc, #48]	@ (800742c <std+0x68>)
 80073fa:	429c      	cmp	r4, r3
 80073fc:	d006      	beq.n	800740c <std+0x48>
 80073fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007402:	4294      	cmp	r4, r2
 8007404:	d002      	beq.n	800740c <std+0x48>
 8007406:	33d0      	adds	r3, #208	@ 0xd0
 8007408:	429c      	cmp	r4, r3
 800740a:	d105      	bne.n	8007418 <std+0x54>
 800740c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007414:	f000 ba0e 	b.w	8007834 <__retarget_lock_init_recursive>
 8007418:	bd10      	pop	{r4, pc}
 800741a:	bf00      	nop
 800741c:	08007589 	.word	0x08007589
 8007420:	080075ab 	.word	0x080075ab
 8007424:	080075e3 	.word	0x080075e3
 8007428:	08007607 	.word	0x08007607
 800742c:	20000acc 	.word	0x20000acc

08007430 <stdio_exit_handler>:
 8007430:	4a02      	ldr	r2, [pc, #8]	@ (800743c <stdio_exit_handler+0xc>)
 8007432:	4903      	ldr	r1, [pc, #12]	@ (8007440 <stdio_exit_handler+0x10>)
 8007434:	4803      	ldr	r0, [pc, #12]	@ (8007444 <stdio_exit_handler+0x14>)
 8007436:	f000 b869 	b.w	800750c <_fwalk_sglue>
 800743a:	bf00      	nop
 800743c:	20000118 	.word	0x20000118
 8007440:	0800a065 	.word	0x0800a065
 8007444:	20000128 	.word	0x20000128

08007448 <cleanup_stdio>:
 8007448:	6841      	ldr	r1, [r0, #4]
 800744a:	4b0c      	ldr	r3, [pc, #48]	@ (800747c <cleanup_stdio+0x34>)
 800744c:	b510      	push	{r4, lr}
 800744e:	4299      	cmp	r1, r3
 8007450:	4604      	mov	r4, r0
 8007452:	d001      	beq.n	8007458 <cleanup_stdio+0x10>
 8007454:	f002 fe06 	bl	800a064 <_fflush_r>
 8007458:	68a1      	ldr	r1, [r4, #8]
 800745a:	4b09      	ldr	r3, [pc, #36]	@ (8007480 <cleanup_stdio+0x38>)
 800745c:	4299      	cmp	r1, r3
 800745e:	d002      	beq.n	8007466 <cleanup_stdio+0x1e>
 8007460:	4620      	mov	r0, r4
 8007462:	f002 fdff 	bl	800a064 <_fflush_r>
 8007466:	68e1      	ldr	r1, [r4, #12]
 8007468:	4b06      	ldr	r3, [pc, #24]	@ (8007484 <cleanup_stdio+0x3c>)
 800746a:	4299      	cmp	r1, r3
 800746c:	d004      	beq.n	8007478 <cleanup_stdio+0x30>
 800746e:	4620      	mov	r0, r4
 8007470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007474:	f002 bdf6 	b.w	800a064 <_fflush_r>
 8007478:	bd10      	pop	{r4, pc}
 800747a:	bf00      	nop
 800747c:	20000acc 	.word	0x20000acc
 8007480:	20000b34 	.word	0x20000b34
 8007484:	20000b9c 	.word	0x20000b9c

08007488 <global_stdio_init.part.0>:
 8007488:	b510      	push	{r4, lr}
 800748a:	4b0b      	ldr	r3, [pc, #44]	@ (80074b8 <global_stdio_init.part.0+0x30>)
 800748c:	4c0b      	ldr	r4, [pc, #44]	@ (80074bc <global_stdio_init.part.0+0x34>)
 800748e:	4a0c      	ldr	r2, [pc, #48]	@ (80074c0 <global_stdio_init.part.0+0x38>)
 8007490:	4620      	mov	r0, r4
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	2104      	movs	r1, #4
 8007496:	2200      	movs	r2, #0
 8007498:	f7ff ff94 	bl	80073c4 <std>
 800749c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074a0:	2201      	movs	r2, #1
 80074a2:	2109      	movs	r1, #9
 80074a4:	f7ff ff8e 	bl	80073c4 <std>
 80074a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074ac:	2202      	movs	r2, #2
 80074ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b2:	2112      	movs	r1, #18
 80074b4:	f7ff bf86 	b.w	80073c4 <std>
 80074b8:	20000c04 	.word	0x20000c04
 80074bc:	20000acc 	.word	0x20000acc
 80074c0:	08007431 	.word	0x08007431

080074c4 <__sfp_lock_acquire>:
 80074c4:	4801      	ldr	r0, [pc, #4]	@ (80074cc <__sfp_lock_acquire+0x8>)
 80074c6:	f000 b9b6 	b.w	8007836 <__retarget_lock_acquire_recursive>
 80074ca:	bf00      	nop
 80074cc:	20000c0d 	.word	0x20000c0d

080074d0 <__sfp_lock_release>:
 80074d0:	4801      	ldr	r0, [pc, #4]	@ (80074d8 <__sfp_lock_release+0x8>)
 80074d2:	f000 b9b1 	b.w	8007838 <__retarget_lock_release_recursive>
 80074d6:	bf00      	nop
 80074d8:	20000c0d 	.word	0x20000c0d

080074dc <__sinit>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	f7ff fff0 	bl	80074c4 <__sfp_lock_acquire>
 80074e4:	6a23      	ldr	r3, [r4, #32]
 80074e6:	b11b      	cbz	r3, 80074f0 <__sinit+0x14>
 80074e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ec:	f7ff bff0 	b.w	80074d0 <__sfp_lock_release>
 80074f0:	4b04      	ldr	r3, [pc, #16]	@ (8007504 <__sinit+0x28>)
 80074f2:	6223      	str	r3, [r4, #32]
 80074f4:	4b04      	ldr	r3, [pc, #16]	@ (8007508 <__sinit+0x2c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f5      	bne.n	80074e8 <__sinit+0xc>
 80074fc:	f7ff ffc4 	bl	8007488 <global_stdio_init.part.0>
 8007500:	e7f2      	b.n	80074e8 <__sinit+0xc>
 8007502:	bf00      	nop
 8007504:	08007449 	.word	0x08007449
 8007508:	20000c04 	.word	0x20000c04

0800750c <_fwalk_sglue>:
 800750c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007510:	4607      	mov	r7, r0
 8007512:	4688      	mov	r8, r1
 8007514:	4614      	mov	r4, r2
 8007516:	2600      	movs	r6, #0
 8007518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800751c:	f1b9 0901 	subs.w	r9, r9, #1
 8007520:	d505      	bpl.n	800752e <_fwalk_sglue+0x22>
 8007522:	6824      	ldr	r4, [r4, #0]
 8007524:	2c00      	cmp	r4, #0
 8007526:	d1f7      	bne.n	8007518 <_fwalk_sglue+0xc>
 8007528:	4630      	mov	r0, r6
 800752a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752e:	89ab      	ldrh	r3, [r5, #12]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d907      	bls.n	8007544 <_fwalk_sglue+0x38>
 8007534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007538:	3301      	adds	r3, #1
 800753a:	d003      	beq.n	8007544 <_fwalk_sglue+0x38>
 800753c:	4629      	mov	r1, r5
 800753e:	4638      	mov	r0, r7
 8007540:	47c0      	blx	r8
 8007542:	4306      	orrs	r6, r0
 8007544:	3568      	adds	r5, #104	@ 0x68
 8007546:	e7e9      	b.n	800751c <_fwalk_sglue+0x10>

08007548 <siprintf>:
 8007548:	b40e      	push	{r1, r2, r3}
 800754a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800754e:	b500      	push	{lr}
 8007550:	b09c      	sub	sp, #112	@ 0x70
 8007552:	ab1d      	add	r3, sp, #116	@ 0x74
 8007554:	9002      	str	r0, [sp, #8]
 8007556:	9006      	str	r0, [sp, #24]
 8007558:	9107      	str	r1, [sp, #28]
 800755a:	9104      	str	r1, [sp, #16]
 800755c:	4808      	ldr	r0, [pc, #32]	@ (8007580 <siprintf+0x38>)
 800755e:	4909      	ldr	r1, [pc, #36]	@ (8007584 <siprintf+0x3c>)
 8007560:	f853 2b04 	ldr.w	r2, [r3], #4
 8007564:	9105      	str	r1, [sp, #20]
 8007566:	6800      	ldr	r0, [r0, #0]
 8007568:	a902      	add	r1, sp, #8
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	f002 fbfe 	bl	8009d6c <_svfiprintf_r>
 8007570:	2200      	movs	r2, #0
 8007572:	9b02      	ldr	r3, [sp, #8]
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	b01c      	add	sp, #112	@ 0x70
 8007578:	f85d eb04 	ldr.w	lr, [sp], #4
 800757c:	b003      	add	sp, #12
 800757e:	4770      	bx	lr
 8007580:	20000124 	.word	0x20000124
 8007584:	ffff0208 	.word	0xffff0208

08007588 <__sread>:
 8007588:	b510      	push	{r4, lr}
 800758a:	460c      	mov	r4, r1
 800758c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007590:	f000 f902 	bl	8007798 <_read_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	bfab      	itete	ge
 8007598:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800759a:	89a3      	ldrhlt	r3, [r4, #12]
 800759c:	181b      	addge	r3, r3, r0
 800759e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075a2:	bfac      	ite	ge
 80075a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075a6:	81a3      	strhlt	r3, [r4, #12]
 80075a8:	bd10      	pop	{r4, pc}

080075aa <__swrite>:
 80075aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ae:	461f      	mov	r7, r3
 80075b0:	898b      	ldrh	r3, [r1, #12]
 80075b2:	4605      	mov	r5, r0
 80075b4:	05db      	lsls	r3, r3, #23
 80075b6:	460c      	mov	r4, r1
 80075b8:	4616      	mov	r6, r2
 80075ba:	d505      	bpl.n	80075c8 <__swrite+0x1e>
 80075bc:	2302      	movs	r3, #2
 80075be:	2200      	movs	r2, #0
 80075c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c4:	f000 f8d6 	bl	8007774 <_lseek_r>
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	4632      	mov	r2, r6
 80075cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075d0:	81a3      	strh	r3, [r4, #12]
 80075d2:	4628      	mov	r0, r5
 80075d4:	463b      	mov	r3, r7
 80075d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075de:	f000 b8ed 	b.w	80077bc <_write_r>

080075e2 <__sseek>:
 80075e2:	b510      	push	{r4, lr}
 80075e4:	460c      	mov	r4, r1
 80075e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ea:	f000 f8c3 	bl	8007774 <_lseek_r>
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	bf15      	itete	ne
 80075f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80075fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80075fe:	81a3      	strheq	r3, [r4, #12]
 8007600:	bf18      	it	ne
 8007602:	81a3      	strhne	r3, [r4, #12]
 8007604:	bd10      	pop	{r4, pc}

08007606 <__sclose>:
 8007606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760a:	f000 b8a3 	b.w	8007754 <_close_r>

0800760e <memset>:
 800760e:	4603      	mov	r3, r0
 8007610:	4402      	add	r2, r0
 8007612:	4293      	cmp	r3, r2
 8007614:	d100      	bne.n	8007618 <memset+0xa>
 8007616:	4770      	bx	lr
 8007618:	f803 1b01 	strb.w	r1, [r3], #1
 800761c:	e7f9      	b.n	8007612 <memset+0x4>

0800761e <strcspn>:
 800761e:	4603      	mov	r3, r0
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	461e      	mov	r6, r3
 8007624:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007628:	b144      	cbz	r4, 800763c <strcspn+0x1e>
 800762a:	1e4a      	subs	r2, r1, #1
 800762c:	e001      	b.n	8007632 <strcspn+0x14>
 800762e:	42a5      	cmp	r5, r4
 8007630:	d004      	beq.n	800763c <strcspn+0x1e>
 8007632:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007636:	2d00      	cmp	r5, #0
 8007638:	d1f9      	bne.n	800762e <strcspn+0x10>
 800763a:	e7f2      	b.n	8007622 <strcspn+0x4>
 800763c:	1a30      	subs	r0, r6, r0
 800763e:	bd70      	pop	{r4, r5, r6, pc}

08007640 <strncpy>:
 8007640:	4603      	mov	r3, r0
 8007642:	b510      	push	{r4, lr}
 8007644:	3901      	subs	r1, #1
 8007646:	b132      	cbz	r2, 8007656 <strncpy+0x16>
 8007648:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800764c:	3a01      	subs	r2, #1
 800764e:	f803 4b01 	strb.w	r4, [r3], #1
 8007652:	2c00      	cmp	r4, #0
 8007654:	d1f7      	bne.n	8007646 <strncpy+0x6>
 8007656:	2100      	movs	r1, #0
 8007658:	441a      	add	r2, r3
 800765a:	4293      	cmp	r3, r2
 800765c:	d100      	bne.n	8007660 <strncpy+0x20>
 800765e:	bd10      	pop	{r4, pc}
 8007660:	f803 1b01 	strb.w	r1, [r3], #1
 8007664:	e7f9      	b.n	800765a <strncpy+0x1a>
	...

08007668 <strtok>:
 8007668:	4b16      	ldr	r3, [pc, #88]	@ (80076c4 <strtok+0x5c>)
 800766a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766e:	681f      	ldr	r7, [r3, #0]
 8007670:	4605      	mov	r5, r0
 8007672:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007674:	460e      	mov	r6, r1
 8007676:	b9ec      	cbnz	r4, 80076b4 <strtok+0x4c>
 8007678:	2050      	movs	r0, #80	@ 0x50
 800767a:	f000 ffbd 	bl	80085f8 <malloc>
 800767e:	4602      	mov	r2, r0
 8007680:	6478      	str	r0, [r7, #68]	@ 0x44
 8007682:	b920      	cbnz	r0, 800768e <strtok+0x26>
 8007684:	215b      	movs	r1, #91	@ 0x5b
 8007686:	4b10      	ldr	r3, [pc, #64]	@ (80076c8 <strtok+0x60>)
 8007688:	4810      	ldr	r0, [pc, #64]	@ (80076cc <strtok+0x64>)
 800768a:	f000 f8ff 	bl	800788c <__assert_func>
 800768e:	e9c0 4400 	strd	r4, r4, [r0]
 8007692:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007696:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800769a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800769e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80076a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80076a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80076aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80076ae:	6184      	str	r4, [r0, #24]
 80076b0:	7704      	strb	r4, [r0, #28]
 80076b2:	6244      	str	r4, [r0, #36]	@ 0x24
 80076b4:	4631      	mov	r1, r6
 80076b6:	4628      	mov	r0, r5
 80076b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076ba:	2301      	movs	r3, #1
 80076bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076c0:	f000 b806 	b.w	80076d0 <__strtok_r>
 80076c4:	20000124 	.word	0x20000124
 80076c8:	0800ce96 	.word	0x0800ce96
 80076cc:	0800cead 	.word	0x0800cead

080076d0 <__strtok_r>:
 80076d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076d2:	4604      	mov	r4, r0
 80076d4:	b908      	cbnz	r0, 80076da <__strtok_r+0xa>
 80076d6:	6814      	ldr	r4, [r2, #0]
 80076d8:	b144      	cbz	r4, 80076ec <__strtok_r+0x1c>
 80076da:	460f      	mov	r7, r1
 80076dc:	4620      	mov	r0, r4
 80076de:	f814 5b01 	ldrb.w	r5, [r4], #1
 80076e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80076e6:	b91e      	cbnz	r6, 80076f0 <__strtok_r+0x20>
 80076e8:	b965      	cbnz	r5, 8007704 <__strtok_r+0x34>
 80076ea:	6015      	str	r5, [r2, #0]
 80076ec:	2000      	movs	r0, #0
 80076ee:	e005      	b.n	80076fc <__strtok_r+0x2c>
 80076f0:	42b5      	cmp	r5, r6
 80076f2:	d1f6      	bne.n	80076e2 <__strtok_r+0x12>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f0      	bne.n	80076da <__strtok_r+0xa>
 80076f8:	6014      	str	r4, [r2, #0]
 80076fa:	7003      	strb	r3, [r0, #0]
 80076fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076fe:	461c      	mov	r4, r3
 8007700:	e00c      	b.n	800771c <__strtok_r+0x4c>
 8007702:	b915      	cbnz	r5, 800770a <__strtok_r+0x3a>
 8007704:	460e      	mov	r6, r1
 8007706:	f814 3b01 	ldrb.w	r3, [r4], #1
 800770a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800770e:	42ab      	cmp	r3, r5
 8007710:	d1f7      	bne.n	8007702 <__strtok_r+0x32>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f3      	beq.n	80076fe <__strtok_r+0x2e>
 8007716:	2300      	movs	r3, #0
 8007718:	f804 3c01 	strb.w	r3, [r4, #-1]
 800771c:	6014      	str	r4, [r2, #0]
 800771e:	e7ed      	b.n	80076fc <__strtok_r+0x2c>

08007720 <strstr>:
 8007720:	780a      	ldrb	r2, [r1, #0]
 8007722:	b570      	push	{r4, r5, r6, lr}
 8007724:	b96a      	cbnz	r2, 8007742 <strstr+0x22>
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	429a      	cmp	r2, r3
 800772a:	d109      	bne.n	8007740 <strstr+0x20>
 800772c:	460c      	mov	r4, r1
 800772e:	4605      	mov	r5, r0
 8007730:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0f6      	beq.n	8007726 <strstr+0x6>
 8007738:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800773c:	429e      	cmp	r6, r3
 800773e:	d0f7      	beq.n	8007730 <strstr+0x10>
 8007740:	3001      	adds	r0, #1
 8007742:	7803      	ldrb	r3, [r0, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1ef      	bne.n	8007728 <strstr+0x8>
 8007748:	4618      	mov	r0, r3
 800774a:	e7ec      	b.n	8007726 <strstr+0x6>

0800774c <_localeconv_r>:
 800774c:	4800      	ldr	r0, [pc, #0]	@ (8007750 <_localeconv_r+0x4>)
 800774e:	4770      	bx	lr
 8007750:	20000264 	.word	0x20000264

08007754 <_close_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	2300      	movs	r3, #0
 8007758:	4d05      	ldr	r5, [pc, #20]	@ (8007770 <_close_r+0x1c>)
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	f7fc f89a 	bl	8003898 <_close>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_close_r+0x1a>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_close_r+0x1a>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	20000c08 	.word	0x20000c08

08007774 <_lseek_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	4611      	mov	r1, r2
 800777c:	2200      	movs	r2, #0
 800777e:	4d05      	ldr	r5, [pc, #20]	@ (8007794 <_lseek_r+0x20>)
 8007780:	602a      	str	r2, [r5, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	f7fc f892 	bl	80038ac <_lseek>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_lseek_r+0x1e>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_lseek_r+0x1e>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	20000c08 	.word	0x20000c08

08007798 <_read_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	4611      	mov	r1, r2
 80077a0:	2200      	movs	r2, #0
 80077a2:	4d05      	ldr	r5, [pc, #20]	@ (80077b8 <_read_r+0x20>)
 80077a4:	602a      	str	r2, [r5, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	f7fc f85c 	bl	8003864 <_read>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_read_r+0x1e>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_read_r+0x1e>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	20000c08 	.word	0x20000c08

080077bc <_write_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	4611      	mov	r1, r2
 80077c4:	2200      	movs	r2, #0
 80077c6:	4d05      	ldr	r5, [pc, #20]	@ (80077dc <_write_r+0x20>)
 80077c8:	602a      	str	r2, [r5, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	f7fc f857 	bl	800387e <_write>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_write_r+0x1e>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b103      	cbz	r3, 80077da <_write_r+0x1e>
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	20000c08 	.word	0x20000c08

080077e0 <__errno>:
 80077e0:	4b01      	ldr	r3, [pc, #4]	@ (80077e8 <__errno+0x8>)
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20000124 	.word	0x20000124

080077ec <__libc_init_array>:
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	2600      	movs	r6, #0
 80077f0:	4d0c      	ldr	r5, [pc, #48]	@ (8007824 <__libc_init_array+0x38>)
 80077f2:	4c0d      	ldr	r4, [pc, #52]	@ (8007828 <__libc_init_array+0x3c>)
 80077f4:	1b64      	subs	r4, r4, r5
 80077f6:	10a4      	asrs	r4, r4, #2
 80077f8:	42a6      	cmp	r6, r4
 80077fa:	d109      	bne.n	8007810 <__libc_init_array+0x24>
 80077fc:	f003 faf4 	bl	800ade8 <_init>
 8007800:	2600      	movs	r6, #0
 8007802:	4d0a      	ldr	r5, [pc, #40]	@ (800782c <__libc_init_array+0x40>)
 8007804:	4c0a      	ldr	r4, [pc, #40]	@ (8007830 <__libc_init_array+0x44>)
 8007806:	1b64      	subs	r4, r4, r5
 8007808:	10a4      	asrs	r4, r4, #2
 800780a:	42a6      	cmp	r6, r4
 800780c:	d105      	bne.n	800781a <__libc_init_array+0x2e>
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	f855 3b04 	ldr.w	r3, [r5], #4
 8007814:	4798      	blx	r3
 8007816:	3601      	adds	r6, #1
 8007818:	e7ee      	b.n	80077f8 <__libc_init_array+0xc>
 800781a:	f855 3b04 	ldr.w	r3, [r5], #4
 800781e:	4798      	blx	r3
 8007820:	3601      	adds	r6, #1
 8007822:	e7f2      	b.n	800780a <__libc_init_array+0x1e>
 8007824:	0800d1ec 	.word	0x0800d1ec
 8007828:	0800d1ec 	.word	0x0800d1ec
 800782c:	0800d1ec 	.word	0x0800d1ec
 8007830:	0800d1f0 	.word	0x0800d1f0

08007834 <__retarget_lock_init_recursive>:
 8007834:	4770      	bx	lr

08007836 <__retarget_lock_acquire_recursive>:
 8007836:	4770      	bx	lr

08007838 <__retarget_lock_release_recursive>:
 8007838:	4770      	bx	lr

0800783a <strcpy>:
 800783a:	4603      	mov	r3, r0
 800783c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007840:	f803 2b01 	strb.w	r2, [r3], #1
 8007844:	2a00      	cmp	r2, #0
 8007846:	d1f9      	bne.n	800783c <strcpy+0x2>
 8007848:	4770      	bx	lr

0800784a <memchr>:
 800784a:	4603      	mov	r3, r0
 800784c:	b510      	push	{r4, lr}
 800784e:	b2c9      	uxtb	r1, r1
 8007850:	4402      	add	r2, r0
 8007852:	4293      	cmp	r3, r2
 8007854:	4618      	mov	r0, r3
 8007856:	d101      	bne.n	800785c <memchr+0x12>
 8007858:	2000      	movs	r0, #0
 800785a:	e003      	b.n	8007864 <memchr+0x1a>
 800785c:	7804      	ldrb	r4, [r0, #0]
 800785e:	3301      	adds	r3, #1
 8007860:	428c      	cmp	r4, r1
 8007862:	d1f6      	bne.n	8007852 <memchr+0x8>
 8007864:	bd10      	pop	{r4, pc}

08007866 <memcpy>:
 8007866:	440a      	add	r2, r1
 8007868:	4291      	cmp	r1, r2
 800786a:	f100 33ff 	add.w	r3, r0, #4294967295
 800786e:	d100      	bne.n	8007872 <memcpy+0xc>
 8007870:	4770      	bx	lr
 8007872:	b510      	push	{r4, lr}
 8007874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007878:	4291      	cmp	r1, r2
 800787a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800787e:	d1f9      	bne.n	8007874 <memcpy+0xe>
 8007880:	bd10      	pop	{r4, pc}
	...

08007884 <nanf>:
 8007884:	4800      	ldr	r0, [pc, #0]	@ (8007888 <nanf+0x4>)
 8007886:	4770      	bx	lr
 8007888:	7fc00000 	.word	0x7fc00000

0800788c <__assert_func>:
 800788c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800788e:	4614      	mov	r4, r2
 8007890:	461a      	mov	r2, r3
 8007892:	4b09      	ldr	r3, [pc, #36]	@ (80078b8 <__assert_func+0x2c>)
 8007894:	4605      	mov	r5, r0
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68d8      	ldr	r0, [r3, #12]
 800789a:	b954      	cbnz	r4, 80078b2 <__assert_func+0x26>
 800789c:	4b07      	ldr	r3, [pc, #28]	@ (80078bc <__assert_func+0x30>)
 800789e:	461c      	mov	r4, r3
 80078a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078a4:	9100      	str	r1, [sp, #0]
 80078a6:	462b      	mov	r3, r5
 80078a8:	4905      	ldr	r1, [pc, #20]	@ (80078c0 <__assert_func+0x34>)
 80078aa:	f002 fc03 	bl	800a0b4 <fiprintf>
 80078ae:	f002 fc55 	bl	800a15c <abort>
 80078b2:	4b04      	ldr	r3, [pc, #16]	@ (80078c4 <__assert_func+0x38>)
 80078b4:	e7f4      	b.n	80078a0 <__assert_func+0x14>
 80078b6:	bf00      	nop
 80078b8:	20000124 	.word	0x20000124
 80078bc:	0800cf42 	.word	0x0800cf42
 80078c0:	0800cf14 	.word	0x0800cf14
 80078c4:	0800cf07 	.word	0x0800cf07

080078c8 <quorem>:
 80078c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	6903      	ldr	r3, [r0, #16]
 80078ce:	690c      	ldr	r4, [r1, #16]
 80078d0:	4607      	mov	r7, r0
 80078d2:	42a3      	cmp	r3, r4
 80078d4:	db7e      	blt.n	80079d4 <quorem+0x10c>
 80078d6:	3c01      	subs	r4, #1
 80078d8:	00a3      	lsls	r3, r4, #2
 80078da:	f100 0514 	add.w	r5, r0, #20
 80078de:	f101 0814 	add.w	r8, r1, #20
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078f2:	3301      	adds	r3, #1
 80078f4:	429a      	cmp	r2, r3
 80078f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80078fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078fe:	d32e      	bcc.n	800795e <quorem+0x96>
 8007900:	f04f 0a00 	mov.w	sl, #0
 8007904:	46c4      	mov	ip, r8
 8007906:	46ae      	mov	lr, r5
 8007908:	46d3      	mov	fp, sl
 800790a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800790e:	b298      	uxth	r0, r3
 8007910:	fb06 a000 	mla	r0, r6, r0, sl
 8007914:	0c1b      	lsrs	r3, r3, #16
 8007916:	0c02      	lsrs	r2, r0, #16
 8007918:	fb06 2303 	mla	r3, r6, r3, r2
 800791c:	f8de 2000 	ldr.w	r2, [lr]
 8007920:	b280      	uxth	r0, r0
 8007922:	b292      	uxth	r2, r2
 8007924:	1a12      	subs	r2, r2, r0
 8007926:	445a      	add	r2, fp
 8007928:	f8de 0000 	ldr.w	r0, [lr]
 800792c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007930:	b29b      	uxth	r3, r3
 8007932:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007936:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800793a:	b292      	uxth	r2, r2
 800793c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007940:	45e1      	cmp	r9, ip
 8007942:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007946:	f84e 2b04 	str.w	r2, [lr], #4
 800794a:	d2de      	bcs.n	800790a <quorem+0x42>
 800794c:	9b00      	ldr	r3, [sp, #0]
 800794e:	58eb      	ldr	r3, [r5, r3]
 8007950:	b92b      	cbnz	r3, 800795e <quorem+0x96>
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	3b04      	subs	r3, #4
 8007956:	429d      	cmp	r5, r3
 8007958:	461a      	mov	r2, r3
 800795a:	d32f      	bcc.n	80079bc <quorem+0xf4>
 800795c:	613c      	str	r4, [r7, #16]
 800795e:	4638      	mov	r0, r7
 8007960:	f001 f9c2 	bl	8008ce8 <__mcmp>
 8007964:	2800      	cmp	r0, #0
 8007966:	db25      	blt.n	80079b4 <quorem+0xec>
 8007968:	4629      	mov	r1, r5
 800796a:	2000      	movs	r0, #0
 800796c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007970:	f8d1 c000 	ldr.w	ip, [r1]
 8007974:	fa1f fe82 	uxth.w	lr, r2
 8007978:	fa1f f38c 	uxth.w	r3, ip
 800797c:	eba3 030e 	sub.w	r3, r3, lr
 8007980:	4403      	add	r3, r0
 8007982:	0c12      	lsrs	r2, r2, #16
 8007984:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007988:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800798c:	b29b      	uxth	r3, r3
 800798e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007992:	45c1      	cmp	r9, r8
 8007994:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007998:	f841 3b04 	str.w	r3, [r1], #4
 800799c:	d2e6      	bcs.n	800796c <quorem+0xa4>
 800799e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079a6:	b922      	cbnz	r2, 80079b2 <quorem+0xea>
 80079a8:	3b04      	subs	r3, #4
 80079aa:	429d      	cmp	r5, r3
 80079ac:	461a      	mov	r2, r3
 80079ae:	d30b      	bcc.n	80079c8 <quorem+0x100>
 80079b0:	613c      	str	r4, [r7, #16]
 80079b2:	3601      	adds	r6, #1
 80079b4:	4630      	mov	r0, r6
 80079b6:	b003      	add	sp, #12
 80079b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	3b04      	subs	r3, #4
 80079c0:	2a00      	cmp	r2, #0
 80079c2:	d1cb      	bne.n	800795c <quorem+0x94>
 80079c4:	3c01      	subs	r4, #1
 80079c6:	e7c6      	b.n	8007956 <quorem+0x8e>
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	3b04      	subs	r3, #4
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	d1ef      	bne.n	80079b0 <quorem+0xe8>
 80079d0:	3c01      	subs	r4, #1
 80079d2:	e7ea      	b.n	80079aa <quorem+0xe2>
 80079d4:	2000      	movs	r0, #0
 80079d6:	e7ee      	b.n	80079b6 <quorem+0xee>

080079d8 <_dtoa_r>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	4614      	mov	r4, r2
 80079de:	461d      	mov	r5, r3
 80079e0:	69c7      	ldr	r7, [r0, #28]
 80079e2:	b097      	sub	sp, #92	@ 0x5c
 80079e4:	4683      	mov	fp, r0
 80079e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80079ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80079ec:	b97f      	cbnz	r7, 8007a0e <_dtoa_r+0x36>
 80079ee:	2010      	movs	r0, #16
 80079f0:	f000 fe02 	bl	80085f8 <malloc>
 80079f4:	4602      	mov	r2, r0
 80079f6:	f8cb 001c 	str.w	r0, [fp, #28]
 80079fa:	b920      	cbnz	r0, 8007a06 <_dtoa_r+0x2e>
 80079fc:	21ef      	movs	r1, #239	@ 0xef
 80079fe:	4ba8      	ldr	r3, [pc, #672]	@ (8007ca0 <_dtoa_r+0x2c8>)
 8007a00:	48a8      	ldr	r0, [pc, #672]	@ (8007ca4 <_dtoa_r+0x2cc>)
 8007a02:	f7ff ff43 	bl	800788c <__assert_func>
 8007a06:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a0a:	6007      	str	r7, [r0, #0]
 8007a0c:	60c7      	str	r7, [r0, #12]
 8007a0e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	b159      	cbz	r1, 8007a2e <_dtoa_r+0x56>
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	2301      	movs	r3, #1
 8007a1a:	4093      	lsls	r3, r2
 8007a1c:	604a      	str	r2, [r1, #4]
 8007a1e:	608b      	str	r3, [r1, #8]
 8007a20:	4658      	mov	r0, fp
 8007a22:	f000 fedf 	bl	80087e4 <_Bfree>
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	1e2b      	subs	r3, r5, #0
 8007a30:	bfaf      	iteee	ge
 8007a32:	2300      	movge	r3, #0
 8007a34:	2201      	movlt	r2, #1
 8007a36:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a3a:	9303      	strlt	r3, [sp, #12]
 8007a3c:	bfa8      	it	ge
 8007a3e:	6033      	strge	r3, [r6, #0]
 8007a40:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a44:	4b98      	ldr	r3, [pc, #608]	@ (8007ca8 <_dtoa_r+0x2d0>)
 8007a46:	bfb8      	it	lt
 8007a48:	6032      	strlt	r2, [r6, #0]
 8007a4a:	ea33 0308 	bics.w	r3, r3, r8
 8007a4e:	d112      	bne.n	8007a76 <_dtoa_r+0x9e>
 8007a50:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a54:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a5c:	4323      	orrs	r3, r4
 8007a5e:	f000 8550 	beq.w	8008502 <_dtoa_r+0xb2a>
 8007a62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a64:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007cac <_dtoa_r+0x2d4>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8552 	beq.w	8008512 <_dtoa_r+0xb3a>
 8007a6e:	f10a 0303 	add.w	r3, sl, #3
 8007a72:	f000 bd4c 	b.w	800850e <_dtoa_r+0xb36>
 8007a76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a7a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a82:	2200      	movs	r2, #0
 8007a84:	2300      	movs	r3, #0
 8007a86:	f7f9 f843 	bl	8000b10 <__aeabi_dcmpeq>
 8007a8a:	4607      	mov	r7, r0
 8007a8c:	b158      	cbz	r0, 8007aa6 <_dtoa_r+0xce>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a96:	b113      	cbz	r3, 8007a9e <_dtoa_r+0xc6>
 8007a98:	4b85      	ldr	r3, [pc, #532]	@ (8007cb0 <_dtoa_r+0x2d8>)
 8007a9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007cb4 <_dtoa_r+0x2dc>
 8007aa2:	f000 bd36 	b.w	8008512 <_dtoa_r+0xb3a>
 8007aa6:	ab14      	add	r3, sp, #80	@ 0x50
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	ab15      	add	r3, sp, #84	@ 0x54
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	4658      	mov	r0, fp
 8007ab0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ab4:	f001 fa30 	bl	8008f18 <__d2b>
 8007ab8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007abc:	4681      	mov	r9, r0
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	d077      	beq.n	8007bb2 <_dtoa_r+0x1da>
 8007ac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ac8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ad0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ad4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ad8:	9712      	str	r7, [sp, #72]	@ 0x48
 8007ada:	4619      	mov	r1, r3
 8007adc:	2200      	movs	r2, #0
 8007ade:	4b76      	ldr	r3, [pc, #472]	@ (8007cb8 <_dtoa_r+0x2e0>)
 8007ae0:	f7f8 fbf6 	bl	80002d0 <__aeabi_dsub>
 8007ae4:	a368      	add	r3, pc, #416	@ (adr r3, 8007c88 <_dtoa_r+0x2b0>)
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	f7f8 fda9 	bl	8000640 <__aeabi_dmul>
 8007aee:	a368      	add	r3, pc, #416	@ (adr r3, 8007c90 <_dtoa_r+0x2b8>)
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 fbee 	bl	80002d4 <__adddf3>
 8007af8:	4604      	mov	r4, r0
 8007afa:	4630      	mov	r0, r6
 8007afc:	460d      	mov	r5, r1
 8007afe:	f7f8 fd35 	bl	800056c <__aeabi_i2d>
 8007b02:	a365      	add	r3, pc, #404	@ (adr r3, 8007c98 <_dtoa_r+0x2c0>)
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f7f8 fd9a 	bl	8000640 <__aeabi_dmul>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4620      	mov	r0, r4
 8007b12:	4629      	mov	r1, r5
 8007b14:	f7f8 fbde 	bl	80002d4 <__adddf3>
 8007b18:	4604      	mov	r4, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	f7f9 f840 	bl	8000ba0 <__aeabi_d2iz>
 8007b20:	2200      	movs	r2, #0
 8007b22:	4607      	mov	r7, r0
 8007b24:	2300      	movs	r3, #0
 8007b26:	4620      	mov	r0, r4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 fffb 	bl	8000b24 <__aeabi_dcmplt>
 8007b2e:	b140      	cbz	r0, 8007b42 <_dtoa_r+0x16a>
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7f8 fd1b 	bl	800056c <__aeabi_i2d>
 8007b36:	4622      	mov	r2, r4
 8007b38:	462b      	mov	r3, r5
 8007b3a:	f7f8 ffe9 	bl	8000b10 <__aeabi_dcmpeq>
 8007b3e:	b900      	cbnz	r0, 8007b42 <_dtoa_r+0x16a>
 8007b40:	3f01      	subs	r7, #1
 8007b42:	2f16      	cmp	r7, #22
 8007b44:	d853      	bhi.n	8007bee <_dtoa_r+0x216>
 8007b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8007cbc <_dtoa_r+0x2e4>)
 8007b4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	f7f8 ffe6 	bl	8000b24 <__aeabi_dcmplt>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d04a      	beq.n	8007bf2 <_dtoa_r+0x21a>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	3f01      	subs	r7, #1
 8007b60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b64:	1b9b      	subs	r3, r3, r6
 8007b66:	1e5a      	subs	r2, r3, #1
 8007b68:	bf46      	itte	mi
 8007b6a:	f1c3 0801 	rsbmi	r8, r3, #1
 8007b6e:	2300      	movmi	r3, #0
 8007b70:	f04f 0800 	movpl.w	r8, #0
 8007b74:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b76:	bf48      	it	mi
 8007b78:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007b7a:	2f00      	cmp	r7, #0
 8007b7c:	db3b      	blt.n	8007bf6 <_dtoa_r+0x21e>
 8007b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b80:	970e      	str	r7, [sp, #56]	@ 0x38
 8007b82:	443b      	add	r3, r7
 8007b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b86:	2300      	movs	r3, #0
 8007b88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b8c:	2b09      	cmp	r3, #9
 8007b8e:	d866      	bhi.n	8007c5e <_dtoa_r+0x286>
 8007b90:	2b05      	cmp	r3, #5
 8007b92:	bfc4      	itt	gt
 8007b94:	3b04      	subgt	r3, #4
 8007b96:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007b98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b9a:	bfc8      	it	gt
 8007b9c:	2400      	movgt	r4, #0
 8007b9e:	f1a3 0302 	sub.w	r3, r3, #2
 8007ba2:	bfd8      	it	le
 8007ba4:	2401      	movle	r4, #1
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d864      	bhi.n	8007c74 <_dtoa_r+0x29c>
 8007baa:	e8df f003 	tbb	[pc, r3]
 8007bae:	382b      	.short	0x382b
 8007bb0:	5636      	.short	0x5636
 8007bb2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007bb6:	441e      	add	r6, r3
 8007bb8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	bfc1      	itttt	gt
 8007bc0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bc4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007bc8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007bcc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bd0:	bfd6      	itet	le
 8007bd2:	f1c3 0320 	rsble	r3, r3, #32
 8007bd6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007bda:	fa04 f003 	lslle.w	r0, r4, r3
 8007bde:	f7f8 fcb5 	bl	800054c <__aeabi_ui2d>
 8007be2:	2201      	movs	r2, #1
 8007be4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007be8:	3e01      	subs	r6, #1
 8007bea:	9212      	str	r2, [sp, #72]	@ 0x48
 8007bec:	e775      	b.n	8007ada <_dtoa_r+0x102>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e7b6      	b.n	8007b60 <_dtoa_r+0x188>
 8007bf2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007bf4:	e7b5      	b.n	8007b62 <_dtoa_r+0x18a>
 8007bf6:	427b      	negs	r3, r7
 8007bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	eba8 0807 	sub.w	r8, r8, r7
 8007c00:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c02:	e7c2      	b.n	8007b8a <_dtoa_r+0x1b2>
 8007c04:	2300      	movs	r3, #0
 8007c06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dc35      	bgt.n	8007c7a <_dtoa_r+0x2a2>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	461a      	mov	r2, r3
 8007c12:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c16:	9221      	str	r2, [sp, #132]	@ 0x84
 8007c18:	e00b      	b.n	8007c32 <_dtoa_r+0x25a>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e7f3      	b.n	8007c06 <_dtoa_r+0x22e>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c24:	18fb      	adds	r3, r7, r3
 8007c26:	9308      	str	r3, [sp, #32]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	9307      	str	r3, [sp, #28]
 8007c2e:	bfb8      	it	lt
 8007c30:	2301      	movlt	r3, #1
 8007c32:	2100      	movs	r1, #0
 8007c34:	2204      	movs	r2, #4
 8007c36:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007c3a:	f102 0514 	add.w	r5, r2, #20
 8007c3e:	429d      	cmp	r5, r3
 8007c40:	d91f      	bls.n	8007c82 <_dtoa_r+0x2aa>
 8007c42:	6041      	str	r1, [r0, #4]
 8007c44:	4658      	mov	r0, fp
 8007c46:	f000 fd8d 	bl	8008764 <_Balloc>
 8007c4a:	4682      	mov	sl, r0
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d139      	bne.n	8007cc4 <_dtoa_r+0x2ec>
 8007c50:	4602      	mov	r2, r0
 8007c52:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c56:	4b1a      	ldr	r3, [pc, #104]	@ (8007cc0 <_dtoa_r+0x2e8>)
 8007c58:	e6d2      	b.n	8007a00 <_dtoa_r+0x28>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e7e0      	b.n	8007c20 <_dtoa_r+0x248>
 8007c5e:	2401      	movs	r4, #1
 8007c60:	2300      	movs	r3, #0
 8007c62:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c64:	9320      	str	r3, [sp, #128]	@ 0x80
 8007c66:	f04f 33ff 	mov.w	r3, #4294967295
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c70:	2312      	movs	r3, #18
 8007c72:	e7d0      	b.n	8007c16 <_dtoa_r+0x23e>
 8007c74:	2301      	movs	r3, #1
 8007c76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c78:	e7f5      	b.n	8007c66 <_dtoa_r+0x28e>
 8007c7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c80:	e7d7      	b.n	8007c32 <_dtoa_r+0x25a>
 8007c82:	3101      	adds	r1, #1
 8007c84:	0052      	lsls	r2, r2, #1
 8007c86:	e7d8      	b.n	8007c3a <_dtoa_r+0x262>
 8007c88:	636f4361 	.word	0x636f4361
 8007c8c:	3fd287a7 	.word	0x3fd287a7
 8007c90:	8b60c8b3 	.word	0x8b60c8b3
 8007c94:	3fc68a28 	.word	0x3fc68a28
 8007c98:	509f79fb 	.word	0x509f79fb
 8007c9c:	3fd34413 	.word	0x3fd34413
 8007ca0:	0800ce96 	.word	0x0800ce96
 8007ca4:	0800cf50 	.word	0x0800cf50
 8007ca8:	7ff00000 	.word	0x7ff00000
 8007cac:	0800cf4c 	.word	0x0800cf4c
 8007cb0:	0800ce6e 	.word	0x0800ce6e
 8007cb4:	0800ce6d 	.word	0x0800ce6d
 8007cb8:	3ff80000 	.word	0x3ff80000
 8007cbc:	0800d048 	.word	0x0800d048
 8007cc0:	0800cfa8 	.word	0x0800cfa8
 8007cc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cc8:	6018      	str	r0, [r3, #0]
 8007cca:	9b07      	ldr	r3, [sp, #28]
 8007ccc:	2b0e      	cmp	r3, #14
 8007cce:	f200 80a4 	bhi.w	8007e1a <_dtoa_r+0x442>
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	f000 80a1 	beq.w	8007e1a <_dtoa_r+0x442>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	dd33      	ble.n	8007d44 <_dtoa_r+0x36c>
 8007cdc:	4b86      	ldr	r3, [pc, #536]	@ (8007ef8 <_dtoa_r+0x520>)
 8007cde:	f007 020f 	and.w	r2, r7, #15
 8007ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce6:	05f8      	lsls	r0, r7, #23
 8007ce8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007cf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007cf4:	d516      	bpl.n	8007d24 <_dtoa_r+0x34c>
 8007cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cfa:	4b80      	ldr	r3, [pc, #512]	@ (8007efc <_dtoa_r+0x524>)
 8007cfc:	2603      	movs	r6, #3
 8007cfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d02:	f7f8 fdc7 	bl	8000894 <__aeabi_ddiv>
 8007d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d0a:	f004 040f 	and.w	r4, r4, #15
 8007d0e:	4d7b      	ldr	r5, [pc, #492]	@ (8007efc <_dtoa_r+0x524>)
 8007d10:	b954      	cbnz	r4, 8007d28 <_dtoa_r+0x350>
 8007d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d1a:	f7f8 fdbb 	bl	8000894 <__aeabi_ddiv>
 8007d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d22:	e028      	b.n	8007d76 <_dtoa_r+0x39e>
 8007d24:	2602      	movs	r6, #2
 8007d26:	e7f2      	b.n	8007d0e <_dtoa_r+0x336>
 8007d28:	07e1      	lsls	r1, r4, #31
 8007d2a:	d508      	bpl.n	8007d3e <_dtoa_r+0x366>
 8007d2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d34:	f7f8 fc84 	bl	8000640 <__aeabi_dmul>
 8007d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	1064      	asrs	r4, r4, #1
 8007d40:	3508      	adds	r5, #8
 8007d42:	e7e5      	b.n	8007d10 <_dtoa_r+0x338>
 8007d44:	f000 80d2 	beq.w	8007eec <_dtoa_r+0x514>
 8007d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d4c:	427c      	negs	r4, r7
 8007d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8007ef8 <_dtoa_r+0x520>)
 8007d50:	f004 020f 	and.w	r2, r4, #15
 8007d54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	f7f8 fc70 	bl	8000640 <__aeabi_dmul>
 8007d60:	2602      	movs	r6, #2
 8007d62:	2300      	movs	r3, #0
 8007d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d68:	4d64      	ldr	r5, [pc, #400]	@ (8007efc <_dtoa_r+0x524>)
 8007d6a:	1124      	asrs	r4, r4, #4
 8007d6c:	2c00      	cmp	r4, #0
 8007d6e:	f040 80b2 	bne.w	8007ed6 <_dtoa_r+0x4fe>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1d3      	bne.n	8007d1e <_dtoa_r+0x346>
 8007d76:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80b7 	beq.w	8007ef0 <_dtoa_r+0x518>
 8007d82:	2200      	movs	r2, #0
 8007d84:	4620      	mov	r0, r4
 8007d86:	4629      	mov	r1, r5
 8007d88:	4b5d      	ldr	r3, [pc, #372]	@ (8007f00 <_dtoa_r+0x528>)
 8007d8a:	f7f8 fecb 	bl	8000b24 <__aeabi_dcmplt>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f000 80ae 	beq.w	8007ef0 <_dtoa_r+0x518>
 8007d94:	9b07      	ldr	r3, [sp, #28]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 80aa 	beq.w	8007ef0 <_dtoa_r+0x518>
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dd37      	ble.n	8007e12 <_dtoa_r+0x43a>
 8007da2:	1e7b      	subs	r3, r7, #1
 8007da4:	4620      	mov	r0, r4
 8007da6:	9304      	str	r3, [sp, #16]
 8007da8:	2200      	movs	r2, #0
 8007daa:	4629      	mov	r1, r5
 8007dac:	4b55      	ldr	r3, [pc, #340]	@ (8007f04 <_dtoa_r+0x52c>)
 8007dae:	f7f8 fc47 	bl	8000640 <__aeabi_dmul>
 8007db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db6:	9c08      	ldr	r4, [sp, #32]
 8007db8:	3601      	adds	r6, #1
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7f8 fbd6 	bl	800056c <__aeabi_i2d>
 8007dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dc4:	f7f8 fc3c 	bl	8000640 <__aeabi_dmul>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4b4f      	ldr	r3, [pc, #316]	@ (8007f08 <_dtoa_r+0x530>)
 8007dcc:	f7f8 fa82 	bl	80002d4 <__adddf3>
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dd6:	2c00      	cmp	r4, #0
 8007dd8:	f040 809a 	bne.w	8007f10 <_dtoa_r+0x538>
 8007ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de0:	2200      	movs	r2, #0
 8007de2:	4b4a      	ldr	r3, [pc, #296]	@ (8007f0c <_dtoa_r+0x534>)
 8007de4:	f7f8 fa74 	bl	80002d0 <__aeabi_dsub>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007df0:	462a      	mov	r2, r5
 8007df2:	4633      	mov	r3, r6
 8007df4:	f7f8 feb4 	bl	8000b60 <__aeabi_dcmpgt>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	f040 828e 	bne.w	800831a <_dtoa_r+0x942>
 8007dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e02:	462a      	mov	r2, r5
 8007e04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e08:	f7f8 fe8c 	bl	8000b24 <__aeabi_dcmplt>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f040 8127 	bne.w	8008060 <_dtoa_r+0x688>
 8007e12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007e16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f2c0 8163 	blt.w	80080e8 <_dtoa_r+0x710>
 8007e22:	2f0e      	cmp	r7, #14
 8007e24:	f300 8160 	bgt.w	80080e8 <_dtoa_r+0x710>
 8007e28:	4b33      	ldr	r3, [pc, #204]	@ (8007ef8 <_dtoa_r+0x520>)
 8007e2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	da03      	bge.n	8007e44 <_dtoa_r+0x46c>
 8007e3c:	9b07      	ldr	r3, [sp, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f340 8100 	ble.w	8008044 <_dtoa_r+0x66c>
 8007e44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e48:	4656      	mov	r6, sl
 8007e4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7f8 fd1f 	bl	8000894 <__aeabi_ddiv>
 8007e56:	f7f8 fea3 	bl	8000ba0 <__aeabi_d2iz>
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	f7f8 fb86 	bl	800056c <__aeabi_i2d>
 8007e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e64:	f7f8 fbec 	bl	8000640 <__aeabi_dmul>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	4629      	mov	r1, r5
 8007e70:	f7f8 fa2e 	bl	80002d0 <__aeabi_dsub>
 8007e74:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e78:	9d07      	ldr	r5, [sp, #28]
 8007e7a:	f806 4b01 	strb.w	r4, [r6], #1
 8007e7e:	eba6 040a 	sub.w	r4, r6, sl
 8007e82:	42a5      	cmp	r5, r4
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	f040 8116 	bne.w	80080b8 <_dtoa_r+0x6e0>
 8007e8c:	f7f8 fa22 	bl	80002d4 <__adddf3>
 8007e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e94:	4604      	mov	r4, r0
 8007e96:	460d      	mov	r5, r1
 8007e98:	f7f8 fe62 	bl	8000b60 <__aeabi_dcmpgt>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f040 80f8 	bne.w	8008092 <_dtoa_r+0x6ba>
 8007ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7f8 fe31 	bl	8000b10 <__aeabi_dcmpeq>
 8007eae:	b118      	cbz	r0, 8007eb8 <_dtoa_r+0x4e0>
 8007eb0:	f018 0f01 	tst.w	r8, #1
 8007eb4:	f040 80ed 	bne.w	8008092 <_dtoa_r+0x6ba>
 8007eb8:	4649      	mov	r1, r9
 8007eba:	4658      	mov	r0, fp
 8007ebc:	f000 fc92 	bl	80087e4 <_Bfree>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	7033      	strb	r3, [r6, #0]
 8007ec4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007ec6:	3701      	adds	r7, #1
 8007ec8:	601f      	str	r7, [r3, #0]
 8007eca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8320 	beq.w	8008512 <_dtoa_r+0xb3a>
 8007ed2:	601e      	str	r6, [r3, #0]
 8007ed4:	e31d      	b.n	8008512 <_dtoa_r+0xb3a>
 8007ed6:	07e2      	lsls	r2, r4, #31
 8007ed8:	d505      	bpl.n	8007ee6 <_dtoa_r+0x50e>
 8007eda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ede:	f7f8 fbaf 	bl	8000640 <__aeabi_dmul>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	3601      	adds	r6, #1
 8007ee6:	1064      	asrs	r4, r4, #1
 8007ee8:	3508      	adds	r5, #8
 8007eea:	e73f      	b.n	8007d6c <_dtoa_r+0x394>
 8007eec:	2602      	movs	r6, #2
 8007eee:	e742      	b.n	8007d76 <_dtoa_r+0x39e>
 8007ef0:	9c07      	ldr	r4, [sp, #28]
 8007ef2:	9704      	str	r7, [sp, #16]
 8007ef4:	e761      	b.n	8007dba <_dtoa_r+0x3e2>
 8007ef6:	bf00      	nop
 8007ef8:	0800d048 	.word	0x0800d048
 8007efc:	0800d020 	.word	0x0800d020
 8007f00:	3ff00000 	.word	0x3ff00000
 8007f04:	40240000 	.word	0x40240000
 8007f08:	401c0000 	.word	0x401c0000
 8007f0c:	40140000 	.word	0x40140000
 8007f10:	4b70      	ldr	r3, [pc, #448]	@ (80080d4 <_dtoa_r+0x6fc>)
 8007f12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f1c:	4454      	add	r4, sl
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	d045      	beq.n	8007fae <_dtoa_r+0x5d6>
 8007f22:	2000      	movs	r0, #0
 8007f24:	496c      	ldr	r1, [pc, #432]	@ (80080d8 <_dtoa_r+0x700>)
 8007f26:	f7f8 fcb5 	bl	8000894 <__aeabi_ddiv>
 8007f2a:	4633      	mov	r3, r6
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	f7f8 f9cf 	bl	80002d0 <__aeabi_dsub>
 8007f32:	4656      	mov	r6, sl
 8007f34:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f3c:	f7f8 fe30 	bl	8000ba0 <__aeabi_d2iz>
 8007f40:	4605      	mov	r5, r0
 8007f42:	f7f8 fb13 	bl	800056c <__aeabi_i2d>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f4e:	f7f8 f9bf 	bl	80002d0 <__aeabi_dsub>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	3530      	adds	r5, #48	@ 0x30
 8007f58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f60:	f806 5b01 	strb.w	r5, [r6], #1
 8007f64:	f7f8 fdde 	bl	8000b24 <__aeabi_dcmplt>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d163      	bne.n	8008034 <_dtoa_r+0x65c>
 8007f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f70:	2000      	movs	r0, #0
 8007f72:	495a      	ldr	r1, [pc, #360]	@ (80080dc <_dtoa_r+0x704>)
 8007f74:	f7f8 f9ac 	bl	80002d0 <__aeabi_dsub>
 8007f78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f7c:	f7f8 fdd2 	bl	8000b24 <__aeabi_dcmplt>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	f040 8087 	bne.w	8008094 <_dtoa_r+0x6bc>
 8007f86:	42a6      	cmp	r6, r4
 8007f88:	f43f af43 	beq.w	8007e12 <_dtoa_r+0x43a>
 8007f8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f90:	2200      	movs	r2, #0
 8007f92:	4b53      	ldr	r3, [pc, #332]	@ (80080e0 <_dtoa_r+0x708>)
 8007f94:	f7f8 fb54 	bl	8000640 <__aeabi_dmul>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80080e0 <_dtoa_r+0x708>)
 8007fa4:	f7f8 fb4c 	bl	8000640 <__aeabi_dmul>
 8007fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fac:	e7c4      	b.n	8007f38 <_dtoa_r+0x560>
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f7f8 fb45 	bl	8000640 <__aeabi_dmul>
 8007fb6:	4656      	mov	r6, sl
 8007fb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fbc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc2:	f7f8 fded 	bl	8000ba0 <__aeabi_d2iz>
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	f7f8 fad0 	bl	800056c <__aeabi_i2d>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd4:	f7f8 f97c 	bl	80002d0 <__aeabi_dsub>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	3530      	adds	r5, #48	@ 0x30
 8007fde:	f806 5b01 	strb.w	r5, [r6], #1
 8007fe2:	42a6      	cmp	r6, r4
 8007fe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	d124      	bne.n	8008038 <_dtoa_r+0x660>
 8007fee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ff2:	4b39      	ldr	r3, [pc, #228]	@ (80080d8 <_dtoa_r+0x700>)
 8007ff4:	f7f8 f96e 	bl	80002d4 <__adddf3>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008000:	f7f8 fdae 	bl	8000b60 <__aeabi_dcmpgt>
 8008004:	2800      	cmp	r0, #0
 8008006:	d145      	bne.n	8008094 <_dtoa_r+0x6bc>
 8008008:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800800c:	2000      	movs	r0, #0
 800800e:	4932      	ldr	r1, [pc, #200]	@ (80080d8 <_dtoa_r+0x700>)
 8008010:	f7f8 f95e 	bl	80002d0 <__aeabi_dsub>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801c:	f7f8 fd82 	bl	8000b24 <__aeabi_dcmplt>
 8008020:	2800      	cmp	r0, #0
 8008022:	f43f aef6 	beq.w	8007e12 <_dtoa_r+0x43a>
 8008026:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008028:	1e73      	subs	r3, r6, #1
 800802a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800802c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008030:	2b30      	cmp	r3, #48	@ 0x30
 8008032:	d0f8      	beq.n	8008026 <_dtoa_r+0x64e>
 8008034:	9f04      	ldr	r7, [sp, #16]
 8008036:	e73f      	b.n	8007eb8 <_dtoa_r+0x4e0>
 8008038:	4b29      	ldr	r3, [pc, #164]	@ (80080e0 <_dtoa_r+0x708>)
 800803a:	f7f8 fb01 	bl	8000640 <__aeabi_dmul>
 800803e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008042:	e7bc      	b.n	8007fbe <_dtoa_r+0x5e6>
 8008044:	d10c      	bne.n	8008060 <_dtoa_r+0x688>
 8008046:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800804a:	2200      	movs	r2, #0
 800804c:	4b25      	ldr	r3, [pc, #148]	@ (80080e4 <_dtoa_r+0x70c>)
 800804e:	f7f8 faf7 	bl	8000640 <__aeabi_dmul>
 8008052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008056:	f7f8 fd79 	bl	8000b4c <__aeabi_dcmpge>
 800805a:	2800      	cmp	r0, #0
 800805c:	f000 815b 	beq.w	8008316 <_dtoa_r+0x93e>
 8008060:	2400      	movs	r4, #0
 8008062:	4625      	mov	r5, r4
 8008064:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008066:	4656      	mov	r6, sl
 8008068:	43db      	mvns	r3, r3
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	2700      	movs	r7, #0
 800806e:	4621      	mov	r1, r4
 8008070:	4658      	mov	r0, fp
 8008072:	f000 fbb7 	bl	80087e4 <_Bfree>
 8008076:	2d00      	cmp	r5, #0
 8008078:	d0dc      	beq.n	8008034 <_dtoa_r+0x65c>
 800807a:	b12f      	cbz	r7, 8008088 <_dtoa_r+0x6b0>
 800807c:	42af      	cmp	r7, r5
 800807e:	d003      	beq.n	8008088 <_dtoa_r+0x6b0>
 8008080:	4639      	mov	r1, r7
 8008082:	4658      	mov	r0, fp
 8008084:	f000 fbae 	bl	80087e4 <_Bfree>
 8008088:	4629      	mov	r1, r5
 800808a:	4658      	mov	r0, fp
 800808c:	f000 fbaa 	bl	80087e4 <_Bfree>
 8008090:	e7d0      	b.n	8008034 <_dtoa_r+0x65c>
 8008092:	9704      	str	r7, [sp, #16]
 8008094:	4633      	mov	r3, r6
 8008096:	461e      	mov	r6, r3
 8008098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800809c:	2a39      	cmp	r2, #57	@ 0x39
 800809e:	d107      	bne.n	80080b0 <_dtoa_r+0x6d8>
 80080a0:	459a      	cmp	sl, r3
 80080a2:	d1f8      	bne.n	8008096 <_dtoa_r+0x6be>
 80080a4:	9a04      	ldr	r2, [sp, #16]
 80080a6:	3201      	adds	r2, #1
 80080a8:	9204      	str	r2, [sp, #16]
 80080aa:	2230      	movs	r2, #48	@ 0x30
 80080ac:	f88a 2000 	strb.w	r2, [sl]
 80080b0:	781a      	ldrb	r2, [r3, #0]
 80080b2:	3201      	adds	r2, #1
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e7bd      	b.n	8008034 <_dtoa_r+0x65c>
 80080b8:	2200      	movs	r2, #0
 80080ba:	4b09      	ldr	r3, [pc, #36]	@ (80080e0 <_dtoa_r+0x708>)
 80080bc:	f7f8 fac0 	bl	8000640 <__aeabi_dmul>
 80080c0:	2200      	movs	r2, #0
 80080c2:	2300      	movs	r3, #0
 80080c4:	4604      	mov	r4, r0
 80080c6:	460d      	mov	r5, r1
 80080c8:	f7f8 fd22 	bl	8000b10 <__aeabi_dcmpeq>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f43f aebc 	beq.w	8007e4a <_dtoa_r+0x472>
 80080d2:	e6f1      	b.n	8007eb8 <_dtoa_r+0x4e0>
 80080d4:	0800d048 	.word	0x0800d048
 80080d8:	3fe00000 	.word	0x3fe00000
 80080dc:	3ff00000 	.word	0x3ff00000
 80080e0:	40240000 	.word	0x40240000
 80080e4:	40140000 	.word	0x40140000
 80080e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	f000 80db 	beq.w	80082a6 <_dtoa_r+0x8ce>
 80080f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80080f2:	2a01      	cmp	r2, #1
 80080f4:	f300 80bf 	bgt.w	8008276 <_dtoa_r+0x89e>
 80080f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80080fa:	2a00      	cmp	r2, #0
 80080fc:	f000 80b7 	beq.w	800826e <_dtoa_r+0x896>
 8008100:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008104:	4646      	mov	r6, r8
 8008106:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800810a:	2101      	movs	r1, #1
 800810c:	441a      	add	r2, r3
 800810e:	4658      	mov	r0, fp
 8008110:	4498      	add	r8, r3
 8008112:	9209      	str	r2, [sp, #36]	@ 0x24
 8008114:	f000 fc64 	bl	80089e0 <__i2b>
 8008118:	4605      	mov	r5, r0
 800811a:	b15e      	cbz	r6, 8008134 <_dtoa_r+0x75c>
 800811c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	dd08      	ble.n	8008134 <_dtoa_r+0x75c>
 8008122:	42b3      	cmp	r3, r6
 8008124:	bfa8      	it	ge
 8008126:	4633      	movge	r3, r6
 8008128:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800812a:	eba8 0803 	sub.w	r8, r8, r3
 800812e:	1af6      	subs	r6, r6, r3
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	9309      	str	r3, [sp, #36]	@ 0x24
 8008134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008136:	b1f3      	cbz	r3, 8008176 <_dtoa_r+0x79e>
 8008138:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 80b7 	beq.w	80082ae <_dtoa_r+0x8d6>
 8008140:	b18c      	cbz	r4, 8008166 <_dtoa_r+0x78e>
 8008142:	4629      	mov	r1, r5
 8008144:	4622      	mov	r2, r4
 8008146:	4658      	mov	r0, fp
 8008148:	f000 fd08 	bl	8008b5c <__pow5mult>
 800814c:	464a      	mov	r2, r9
 800814e:	4601      	mov	r1, r0
 8008150:	4605      	mov	r5, r0
 8008152:	4658      	mov	r0, fp
 8008154:	f000 fc5a 	bl	8008a0c <__multiply>
 8008158:	4649      	mov	r1, r9
 800815a:	9004      	str	r0, [sp, #16]
 800815c:	4658      	mov	r0, fp
 800815e:	f000 fb41 	bl	80087e4 <_Bfree>
 8008162:	9b04      	ldr	r3, [sp, #16]
 8008164:	4699      	mov	r9, r3
 8008166:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008168:	1b1a      	subs	r2, r3, r4
 800816a:	d004      	beq.n	8008176 <_dtoa_r+0x79e>
 800816c:	4649      	mov	r1, r9
 800816e:	4658      	mov	r0, fp
 8008170:	f000 fcf4 	bl	8008b5c <__pow5mult>
 8008174:	4681      	mov	r9, r0
 8008176:	2101      	movs	r1, #1
 8008178:	4658      	mov	r0, fp
 800817a:	f000 fc31 	bl	80089e0 <__i2b>
 800817e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008180:	4604      	mov	r4, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 81c9 	beq.w	800851a <_dtoa_r+0xb42>
 8008188:	461a      	mov	r2, r3
 800818a:	4601      	mov	r1, r0
 800818c:	4658      	mov	r0, fp
 800818e:	f000 fce5 	bl	8008b5c <__pow5mult>
 8008192:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008194:	4604      	mov	r4, r0
 8008196:	2b01      	cmp	r3, #1
 8008198:	f300 808f 	bgt.w	80082ba <_dtoa_r+0x8e2>
 800819c:	9b02      	ldr	r3, [sp, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f040 8087 	bne.w	80082b2 <_dtoa_r+0x8da>
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f040 8083 	bne.w	80082b6 <_dtoa_r+0x8de>
 80081b0:	9b03      	ldr	r3, [sp, #12]
 80081b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081b6:	0d1b      	lsrs	r3, r3, #20
 80081b8:	051b      	lsls	r3, r3, #20
 80081ba:	b12b      	cbz	r3, 80081c8 <_dtoa_r+0x7f0>
 80081bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081be:	f108 0801 	add.w	r8, r8, #1
 80081c2:	3301      	adds	r3, #1
 80081c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c6:	2301      	movs	r3, #1
 80081c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 81aa 	beq.w	8008526 <_dtoa_r+0xb4e>
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081d8:	6918      	ldr	r0, [r3, #16]
 80081da:	f000 fbb5 	bl	8008948 <__hi0bits>
 80081de:	f1c0 0020 	rsb	r0, r0, #32
 80081e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e4:	4418      	add	r0, r3
 80081e6:	f010 001f 	ands.w	r0, r0, #31
 80081ea:	d071      	beq.n	80082d0 <_dtoa_r+0x8f8>
 80081ec:	f1c0 0320 	rsb	r3, r0, #32
 80081f0:	2b04      	cmp	r3, #4
 80081f2:	dd65      	ble.n	80082c0 <_dtoa_r+0x8e8>
 80081f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f6:	f1c0 001c 	rsb	r0, r0, #28
 80081fa:	4403      	add	r3, r0
 80081fc:	4480      	add	r8, r0
 80081fe:	4406      	add	r6, r0
 8008200:	9309      	str	r3, [sp, #36]	@ 0x24
 8008202:	f1b8 0f00 	cmp.w	r8, #0
 8008206:	dd05      	ble.n	8008214 <_dtoa_r+0x83c>
 8008208:	4649      	mov	r1, r9
 800820a:	4642      	mov	r2, r8
 800820c:	4658      	mov	r0, fp
 800820e:	f000 fcff 	bl	8008c10 <__lshift>
 8008212:	4681      	mov	r9, r0
 8008214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008216:	2b00      	cmp	r3, #0
 8008218:	dd05      	ble.n	8008226 <_dtoa_r+0x84e>
 800821a:	4621      	mov	r1, r4
 800821c:	461a      	mov	r2, r3
 800821e:	4658      	mov	r0, fp
 8008220:	f000 fcf6 	bl	8008c10 <__lshift>
 8008224:	4604      	mov	r4, r0
 8008226:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d053      	beq.n	80082d4 <_dtoa_r+0x8fc>
 800822c:	4621      	mov	r1, r4
 800822e:	4648      	mov	r0, r9
 8008230:	f000 fd5a 	bl	8008ce8 <__mcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	da4d      	bge.n	80082d4 <_dtoa_r+0x8fc>
 8008238:	1e7b      	subs	r3, r7, #1
 800823a:	4649      	mov	r1, r9
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	220a      	movs	r2, #10
 8008240:	2300      	movs	r3, #0
 8008242:	4658      	mov	r0, fp
 8008244:	f000 faf0 	bl	8008828 <__multadd>
 8008248:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800824a:	4681      	mov	r9, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 816c 	beq.w	800852a <_dtoa_r+0xb52>
 8008252:	2300      	movs	r3, #0
 8008254:	4629      	mov	r1, r5
 8008256:	220a      	movs	r2, #10
 8008258:	4658      	mov	r0, fp
 800825a:	f000 fae5 	bl	8008828 <__multadd>
 800825e:	9b08      	ldr	r3, [sp, #32]
 8008260:	4605      	mov	r5, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	dc61      	bgt.n	800832a <_dtoa_r+0x952>
 8008266:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008268:	2b02      	cmp	r3, #2
 800826a:	dc3b      	bgt.n	80082e4 <_dtoa_r+0x90c>
 800826c:	e05d      	b.n	800832a <_dtoa_r+0x952>
 800826e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008270:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008274:	e746      	b.n	8008104 <_dtoa_r+0x72c>
 8008276:	9b07      	ldr	r3, [sp, #28]
 8008278:	1e5c      	subs	r4, r3, #1
 800827a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800827c:	42a3      	cmp	r3, r4
 800827e:	bfbf      	itttt	lt
 8008280:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008282:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008284:	1ae3      	sublt	r3, r4, r3
 8008286:	18d2      	addlt	r2, r2, r3
 8008288:	bfa8      	it	ge
 800828a:	1b1c      	subge	r4, r3, r4
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	bfbe      	ittt	lt
 8008290:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008292:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008294:	2400      	movlt	r4, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	bfb5      	itete	lt
 800829a:	eba8 0603 	sublt.w	r6, r8, r3
 800829e:	4646      	movge	r6, r8
 80082a0:	2300      	movlt	r3, #0
 80082a2:	9b07      	ldrge	r3, [sp, #28]
 80082a4:	e730      	b.n	8008108 <_dtoa_r+0x730>
 80082a6:	4646      	mov	r6, r8
 80082a8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80082ac:	e735      	b.n	800811a <_dtoa_r+0x742>
 80082ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082b0:	e75c      	b.n	800816c <_dtoa_r+0x794>
 80082b2:	2300      	movs	r3, #0
 80082b4:	e788      	b.n	80081c8 <_dtoa_r+0x7f0>
 80082b6:	9b02      	ldr	r3, [sp, #8]
 80082b8:	e786      	b.n	80081c8 <_dtoa_r+0x7f0>
 80082ba:	2300      	movs	r3, #0
 80082bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80082be:	e788      	b.n	80081d2 <_dtoa_r+0x7fa>
 80082c0:	d09f      	beq.n	8008202 <_dtoa_r+0x82a>
 80082c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082c4:	331c      	adds	r3, #28
 80082c6:	441a      	add	r2, r3
 80082c8:	4498      	add	r8, r3
 80082ca:	441e      	add	r6, r3
 80082cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80082ce:	e798      	b.n	8008202 <_dtoa_r+0x82a>
 80082d0:	4603      	mov	r3, r0
 80082d2:	e7f6      	b.n	80082c2 <_dtoa_r+0x8ea>
 80082d4:	9b07      	ldr	r3, [sp, #28]
 80082d6:	9704      	str	r7, [sp, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	dc20      	bgt.n	800831e <_dtoa_r+0x946>
 80082dc:	9308      	str	r3, [sp, #32]
 80082de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	dd1e      	ble.n	8008322 <_dtoa_r+0x94a>
 80082e4:	9b08      	ldr	r3, [sp, #32]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f47f aebc 	bne.w	8008064 <_dtoa_r+0x68c>
 80082ec:	4621      	mov	r1, r4
 80082ee:	2205      	movs	r2, #5
 80082f0:	4658      	mov	r0, fp
 80082f2:	f000 fa99 	bl	8008828 <__multadd>
 80082f6:	4601      	mov	r1, r0
 80082f8:	4604      	mov	r4, r0
 80082fa:	4648      	mov	r0, r9
 80082fc:	f000 fcf4 	bl	8008ce8 <__mcmp>
 8008300:	2800      	cmp	r0, #0
 8008302:	f77f aeaf 	ble.w	8008064 <_dtoa_r+0x68c>
 8008306:	2331      	movs	r3, #49	@ 0x31
 8008308:	4656      	mov	r6, sl
 800830a:	f806 3b01 	strb.w	r3, [r6], #1
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	3301      	adds	r3, #1
 8008312:	9304      	str	r3, [sp, #16]
 8008314:	e6aa      	b.n	800806c <_dtoa_r+0x694>
 8008316:	9c07      	ldr	r4, [sp, #28]
 8008318:	9704      	str	r7, [sp, #16]
 800831a:	4625      	mov	r5, r4
 800831c:	e7f3      	b.n	8008306 <_dtoa_r+0x92e>
 800831e:	9b07      	ldr	r3, [sp, #28]
 8008320:	9308      	str	r3, [sp, #32]
 8008322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 8104 	beq.w	8008532 <_dtoa_r+0xb5a>
 800832a:	2e00      	cmp	r6, #0
 800832c:	dd05      	ble.n	800833a <_dtoa_r+0x962>
 800832e:	4629      	mov	r1, r5
 8008330:	4632      	mov	r2, r6
 8008332:	4658      	mov	r0, fp
 8008334:	f000 fc6c 	bl	8008c10 <__lshift>
 8008338:	4605      	mov	r5, r0
 800833a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800833c:	2b00      	cmp	r3, #0
 800833e:	d05a      	beq.n	80083f6 <_dtoa_r+0xa1e>
 8008340:	4658      	mov	r0, fp
 8008342:	6869      	ldr	r1, [r5, #4]
 8008344:	f000 fa0e 	bl	8008764 <_Balloc>
 8008348:	4606      	mov	r6, r0
 800834a:	b928      	cbnz	r0, 8008358 <_dtoa_r+0x980>
 800834c:	4602      	mov	r2, r0
 800834e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008352:	4b83      	ldr	r3, [pc, #524]	@ (8008560 <_dtoa_r+0xb88>)
 8008354:	f7ff bb54 	b.w	8007a00 <_dtoa_r+0x28>
 8008358:	692a      	ldr	r2, [r5, #16]
 800835a:	f105 010c 	add.w	r1, r5, #12
 800835e:	3202      	adds	r2, #2
 8008360:	0092      	lsls	r2, r2, #2
 8008362:	300c      	adds	r0, #12
 8008364:	f7ff fa7f 	bl	8007866 <memcpy>
 8008368:	2201      	movs	r2, #1
 800836a:	4631      	mov	r1, r6
 800836c:	4658      	mov	r0, fp
 800836e:	f000 fc4f 	bl	8008c10 <__lshift>
 8008372:	462f      	mov	r7, r5
 8008374:	4605      	mov	r5, r0
 8008376:	f10a 0301 	add.w	r3, sl, #1
 800837a:	9307      	str	r3, [sp, #28]
 800837c:	9b08      	ldr	r3, [sp, #32]
 800837e:	4453      	add	r3, sl
 8008380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008382:	9b02      	ldr	r3, [sp, #8]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	930a      	str	r3, [sp, #40]	@ 0x28
 800838a:	9b07      	ldr	r3, [sp, #28]
 800838c:	4621      	mov	r1, r4
 800838e:	3b01      	subs	r3, #1
 8008390:	4648      	mov	r0, r9
 8008392:	9302      	str	r3, [sp, #8]
 8008394:	f7ff fa98 	bl	80078c8 <quorem>
 8008398:	4639      	mov	r1, r7
 800839a:	9008      	str	r0, [sp, #32]
 800839c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083a0:	4648      	mov	r0, r9
 80083a2:	f000 fca1 	bl	8008ce8 <__mcmp>
 80083a6:	462a      	mov	r2, r5
 80083a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80083aa:	4621      	mov	r1, r4
 80083ac:	4658      	mov	r0, fp
 80083ae:	f000 fcb7 	bl	8008d20 <__mdiff>
 80083b2:	68c2      	ldr	r2, [r0, #12]
 80083b4:	4606      	mov	r6, r0
 80083b6:	bb02      	cbnz	r2, 80083fa <_dtoa_r+0xa22>
 80083b8:	4601      	mov	r1, r0
 80083ba:	4648      	mov	r0, r9
 80083bc:	f000 fc94 	bl	8008ce8 <__mcmp>
 80083c0:	4602      	mov	r2, r0
 80083c2:	4631      	mov	r1, r6
 80083c4:	4658      	mov	r0, fp
 80083c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80083c8:	f000 fa0c 	bl	80087e4 <_Bfree>
 80083cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083d0:	9e07      	ldr	r6, [sp, #28]
 80083d2:	ea43 0102 	orr.w	r1, r3, r2
 80083d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083d8:	4319      	orrs	r1, r3
 80083da:	d110      	bne.n	80083fe <_dtoa_r+0xa26>
 80083dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083e0:	d029      	beq.n	8008436 <_dtoa_r+0xa5e>
 80083e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd02      	ble.n	80083ee <_dtoa_r+0xa16>
 80083e8:	9b08      	ldr	r3, [sp, #32]
 80083ea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80083ee:	9b02      	ldr	r3, [sp, #8]
 80083f0:	f883 8000 	strb.w	r8, [r3]
 80083f4:	e63b      	b.n	800806e <_dtoa_r+0x696>
 80083f6:	4628      	mov	r0, r5
 80083f8:	e7bb      	b.n	8008372 <_dtoa_r+0x99a>
 80083fa:	2201      	movs	r2, #1
 80083fc:	e7e1      	b.n	80083c2 <_dtoa_r+0x9ea>
 80083fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008400:	2b00      	cmp	r3, #0
 8008402:	db04      	blt.n	800840e <_dtoa_r+0xa36>
 8008404:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008406:	430b      	orrs	r3, r1
 8008408:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800840a:	430b      	orrs	r3, r1
 800840c:	d120      	bne.n	8008450 <_dtoa_r+0xa78>
 800840e:	2a00      	cmp	r2, #0
 8008410:	dded      	ble.n	80083ee <_dtoa_r+0xa16>
 8008412:	4649      	mov	r1, r9
 8008414:	2201      	movs	r2, #1
 8008416:	4658      	mov	r0, fp
 8008418:	f000 fbfa 	bl	8008c10 <__lshift>
 800841c:	4621      	mov	r1, r4
 800841e:	4681      	mov	r9, r0
 8008420:	f000 fc62 	bl	8008ce8 <__mcmp>
 8008424:	2800      	cmp	r0, #0
 8008426:	dc03      	bgt.n	8008430 <_dtoa_r+0xa58>
 8008428:	d1e1      	bne.n	80083ee <_dtoa_r+0xa16>
 800842a:	f018 0f01 	tst.w	r8, #1
 800842e:	d0de      	beq.n	80083ee <_dtoa_r+0xa16>
 8008430:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008434:	d1d8      	bne.n	80083e8 <_dtoa_r+0xa10>
 8008436:	2339      	movs	r3, #57	@ 0x39
 8008438:	9a02      	ldr	r2, [sp, #8]
 800843a:	7013      	strb	r3, [r2, #0]
 800843c:	4633      	mov	r3, r6
 800843e:	461e      	mov	r6, r3
 8008440:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008444:	3b01      	subs	r3, #1
 8008446:	2a39      	cmp	r2, #57	@ 0x39
 8008448:	d052      	beq.n	80084f0 <_dtoa_r+0xb18>
 800844a:	3201      	adds	r2, #1
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e60e      	b.n	800806e <_dtoa_r+0x696>
 8008450:	2a00      	cmp	r2, #0
 8008452:	dd07      	ble.n	8008464 <_dtoa_r+0xa8c>
 8008454:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008458:	d0ed      	beq.n	8008436 <_dtoa_r+0xa5e>
 800845a:	9a02      	ldr	r2, [sp, #8]
 800845c:	f108 0301 	add.w	r3, r8, #1
 8008460:	7013      	strb	r3, [r2, #0]
 8008462:	e604      	b.n	800806e <_dtoa_r+0x696>
 8008464:	9b07      	ldr	r3, [sp, #28]
 8008466:	9a07      	ldr	r2, [sp, #28]
 8008468:	f803 8c01 	strb.w	r8, [r3, #-1]
 800846c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800846e:	4293      	cmp	r3, r2
 8008470:	d028      	beq.n	80084c4 <_dtoa_r+0xaec>
 8008472:	4649      	mov	r1, r9
 8008474:	2300      	movs	r3, #0
 8008476:	220a      	movs	r2, #10
 8008478:	4658      	mov	r0, fp
 800847a:	f000 f9d5 	bl	8008828 <__multadd>
 800847e:	42af      	cmp	r7, r5
 8008480:	4681      	mov	r9, r0
 8008482:	f04f 0300 	mov.w	r3, #0
 8008486:	f04f 020a 	mov.w	r2, #10
 800848a:	4639      	mov	r1, r7
 800848c:	4658      	mov	r0, fp
 800848e:	d107      	bne.n	80084a0 <_dtoa_r+0xac8>
 8008490:	f000 f9ca 	bl	8008828 <__multadd>
 8008494:	4607      	mov	r7, r0
 8008496:	4605      	mov	r5, r0
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	3301      	adds	r3, #1
 800849c:	9307      	str	r3, [sp, #28]
 800849e:	e774      	b.n	800838a <_dtoa_r+0x9b2>
 80084a0:	f000 f9c2 	bl	8008828 <__multadd>
 80084a4:	4629      	mov	r1, r5
 80084a6:	4607      	mov	r7, r0
 80084a8:	2300      	movs	r3, #0
 80084aa:	220a      	movs	r2, #10
 80084ac:	4658      	mov	r0, fp
 80084ae:	f000 f9bb 	bl	8008828 <__multadd>
 80084b2:	4605      	mov	r5, r0
 80084b4:	e7f0      	b.n	8008498 <_dtoa_r+0xac0>
 80084b6:	9b08      	ldr	r3, [sp, #32]
 80084b8:	2700      	movs	r7, #0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	bfcc      	ite	gt
 80084be:	461e      	movgt	r6, r3
 80084c0:	2601      	movle	r6, #1
 80084c2:	4456      	add	r6, sl
 80084c4:	4649      	mov	r1, r9
 80084c6:	2201      	movs	r2, #1
 80084c8:	4658      	mov	r0, fp
 80084ca:	f000 fba1 	bl	8008c10 <__lshift>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4681      	mov	r9, r0
 80084d2:	f000 fc09 	bl	8008ce8 <__mcmp>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	dcb0      	bgt.n	800843c <_dtoa_r+0xa64>
 80084da:	d102      	bne.n	80084e2 <_dtoa_r+0xb0a>
 80084dc:	f018 0f01 	tst.w	r8, #1
 80084e0:	d1ac      	bne.n	800843c <_dtoa_r+0xa64>
 80084e2:	4633      	mov	r3, r6
 80084e4:	461e      	mov	r6, r3
 80084e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084ea:	2a30      	cmp	r2, #48	@ 0x30
 80084ec:	d0fa      	beq.n	80084e4 <_dtoa_r+0xb0c>
 80084ee:	e5be      	b.n	800806e <_dtoa_r+0x696>
 80084f0:	459a      	cmp	sl, r3
 80084f2:	d1a4      	bne.n	800843e <_dtoa_r+0xa66>
 80084f4:	9b04      	ldr	r3, [sp, #16]
 80084f6:	3301      	adds	r3, #1
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	2331      	movs	r3, #49	@ 0x31
 80084fc:	f88a 3000 	strb.w	r3, [sl]
 8008500:	e5b5      	b.n	800806e <_dtoa_r+0x696>
 8008502:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008504:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008564 <_dtoa_r+0xb8c>
 8008508:	b11b      	cbz	r3, 8008512 <_dtoa_r+0xb3a>
 800850a:	f10a 0308 	add.w	r3, sl, #8
 800850e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	4650      	mov	r0, sl
 8008514:	b017      	add	sp, #92	@ 0x5c
 8008516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800851c:	2b01      	cmp	r3, #1
 800851e:	f77f ae3d 	ble.w	800819c <_dtoa_r+0x7c4>
 8008522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008524:	930a      	str	r3, [sp, #40]	@ 0x28
 8008526:	2001      	movs	r0, #1
 8008528:	e65b      	b.n	80081e2 <_dtoa_r+0x80a>
 800852a:	9b08      	ldr	r3, [sp, #32]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f77f aed6 	ble.w	80082de <_dtoa_r+0x906>
 8008532:	4656      	mov	r6, sl
 8008534:	4621      	mov	r1, r4
 8008536:	4648      	mov	r0, r9
 8008538:	f7ff f9c6 	bl	80078c8 <quorem>
 800853c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008540:	9b08      	ldr	r3, [sp, #32]
 8008542:	f806 8b01 	strb.w	r8, [r6], #1
 8008546:	eba6 020a 	sub.w	r2, r6, sl
 800854a:	4293      	cmp	r3, r2
 800854c:	ddb3      	ble.n	80084b6 <_dtoa_r+0xade>
 800854e:	4649      	mov	r1, r9
 8008550:	2300      	movs	r3, #0
 8008552:	220a      	movs	r2, #10
 8008554:	4658      	mov	r0, fp
 8008556:	f000 f967 	bl	8008828 <__multadd>
 800855a:	4681      	mov	r9, r0
 800855c:	e7ea      	b.n	8008534 <_dtoa_r+0xb5c>
 800855e:	bf00      	nop
 8008560:	0800cfa8 	.word	0x0800cfa8
 8008564:	0800cf43 	.word	0x0800cf43

08008568 <_free_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4605      	mov	r5, r0
 800856c:	2900      	cmp	r1, #0
 800856e:	d040      	beq.n	80085f2 <_free_r+0x8a>
 8008570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008574:	1f0c      	subs	r4, r1, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	bfb8      	it	lt
 800857a:	18e4      	addlt	r4, r4, r3
 800857c:	f000 f8e6 	bl	800874c <__malloc_lock>
 8008580:	4a1c      	ldr	r2, [pc, #112]	@ (80085f4 <_free_r+0x8c>)
 8008582:	6813      	ldr	r3, [r2, #0]
 8008584:	b933      	cbnz	r3, 8008594 <_free_r+0x2c>
 8008586:	6063      	str	r3, [r4, #4]
 8008588:	6014      	str	r4, [r2, #0]
 800858a:	4628      	mov	r0, r5
 800858c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008590:	f000 b8e2 	b.w	8008758 <__malloc_unlock>
 8008594:	42a3      	cmp	r3, r4
 8008596:	d908      	bls.n	80085aa <_free_r+0x42>
 8008598:	6820      	ldr	r0, [r4, #0]
 800859a:	1821      	adds	r1, r4, r0
 800859c:	428b      	cmp	r3, r1
 800859e:	bf01      	itttt	eq
 80085a0:	6819      	ldreq	r1, [r3, #0]
 80085a2:	685b      	ldreq	r3, [r3, #4]
 80085a4:	1809      	addeq	r1, r1, r0
 80085a6:	6021      	streq	r1, [r4, #0]
 80085a8:	e7ed      	b.n	8008586 <_free_r+0x1e>
 80085aa:	461a      	mov	r2, r3
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	b10b      	cbz	r3, 80085b4 <_free_r+0x4c>
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	d9fa      	bls.n	80085aa <_free_r+0x42>
 80085b4:	6811      	ldr	r1, [r2, #0]
 80085b6:	1850      	adds	r0, r2, r1
 80085b8:	42a0      	cmp	r0, r4
 80085ba:	d10b      	bne.n	80085d4 <_free_r+0x6c>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	4401      	add	r1, r0
 80085c0:	1850      	adds	r0, r2, r1
 80085c2:	4283      	cmp	r3, r0
 80085c4:	6011      	str	r1, [r2, #0]
 80085c6:	d1e0      	bne.n	800858a <_free_r+0x22>
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	4408      	add	r0, r1
 80085ce:	6010      	str	r0, [r2, #0]
 80085d0:	6053      	str	r3, [r2, #4]
 80085d2:	e7da      	b.n	800858a <_free_r+0x22>
 80085d4:	d902      	bls.n	80085dc <_free_r+0x74>
 80085d6:	230c      	movs	r3, #12
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	e7d6      	b.n	800858a <_free_r+0x22>
 80085dc:	6820      	ldr	r0, [r4, #0]
 80085de:	1821      	adds	r1, r4, r0
 80085e0:	428b      	cmp	r3, r1
 80085e2:	bf01      	itttt	eq
 80085e4:	6819      	ldreq	r1, [r3, #0]
 80085e6:	685b      	ldreq	r3, [r3, #4]
 80085e8:	1809      	addeq	r1, r1, r0
 80085ea:	6021      	streq	r1, [r4, #0]
 80085ec:	6063      	str	r3, [r4, #4]
 80085ee:	6054      	str	r4, [r2, #4]
 80085f0:	e7cb      	b.n	800858a <_free_r+0x22>
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	20000c14 	.word	0x20000c14

080085f8 <malloc>:
 80085f8:	4b02      	ldr	r3, [pc, #8]	@ (8008604 <malloc+0xc>)
 80085fa:	4601      	mov	r1, r0
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	f000 b825 	b.w	800864c <_malloc_r>
 8008602:	bf00      	nop
 8008604:	20000124 	.word	0x20000124

08008608 <sbrk_aligned>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	4e0f      	ldr	r6, [pc, #60]	@ (8008648 <sbrk_aligned+0x40>)
 800860c:	460c      	mov	r4, r1
 800860e:	6831      	ldr	r1, [r6, #0]
 8008610:	4605      	mov	r5, r0
 8008612:	b911      	cbnz	r1, 800861a <sbrk_aligned+0x12>
 8008614:	f001 fd8c 	bl	800a130 <_sbrk_r>
 8008618:	6030      	str	r0, [r6, #0]
 800861a:	4621      	mov	r1, r4
 800861c:	4628      	mov	r0, r5
 800861e:	f001 fd87 	bl	800a130 <_sbrk_r>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	d103      	bne.n	800862e <sbrk_aligned+0x26>
 8008626:	f04f 34ff 	mov.w	r4, #4294967295
 800862a:	4620      	mov	r0, r4
 800862c:	bd70      	pop	{r4, r5, r6, pc}
 800862e:	1cc4      	adds	r4, r0, #3
 8008630:	f024 0403 	bic.w	r4, r4, #3
 8008634:	42a0      	cmp	r0, r4
 8008636:	d0f8      	beq.n	800862a <sbrk_aligned+0x22>
 8008638:	1a21      	subs	r1, r4, r0
 800863a:	4628      	mov	r0, r5
 800863c:	f001 fd78 	bl	800a130 <_sbrk_r>
 8008640:	3001      	adds	r0, #1
 8008642:	d1f2      	bne.n	800862a <sbrk_aligned+0x22>
 8008644:	e7ef      	b.n	8008626 <sbrk_aligned+0x1e>
 8008646:	bf00      	nop
 8008648:	20000c10 	.word	0x20000c10

0800864c <_malloc_r>:
 800864c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008650:	1ccd      	adds	r5, r1, #3
 8008652:	f025 0503 	bic.w	r5, r5, #3
 8008656:	3508      	adds	r5, #8
 8008658:	2d0c      	cmp	r5, #12
 800865a:	bf38      	it	cc
 800865c:	250c      	movcc	r5, #12
 800865e:	2d00      	cmp	r5, #0
 8008660:	4606      	mov	r6, r0
 8008662:	db01      	blt.n	8008668 <_malloc_r+0x1c>
 8008664:	42a9      	cmp	r1, r5
 8008666:	d904      	bls.n	8008672 <_malloc_r+0x26>
 8008668:	230c      	movs	r3, #12
 800866a:	6033      	str	r3, [r6, #0]
 800866c:	2000      	movs	r0, #0
 800866e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008748 <_malloc_r+0xfc>
 8008676:	f000 f869 	bl	800874c <__malloc_lock>
 800867a:	f8d8 3000 	ldr.w	r3, [r8]
 800867e:	461c      	mov	r4, r3
 8008680:	bb44      	cbnz	r4, 80086d4 <_malloc_r+0x88>
 8008682:	4629      	mov	r1, r5
 8008684:	4630      	mov	r0, r6
 8008686:	f7ff ffbf 	bl	8008608 <sbrk_aligned>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	4604      	mov	r4, r0
 800868e:	d158      	bne.n	8008742 <_malloc_r+0xf6>
 8008690:	f8d8 4000 	ldr.w	r4, [r8]
 8008694:	4627      	mov	r7, r4
 8008696:	2f00      	cmp	r7, #0
 8008698:	d143      	bne.n	8008722 <_malloc_r+0xd6>
 800869a:	2c00      	cmp	r4, #0
 800869c:	d04b      	beq.n	8008736 <_malloc_r+0xea>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	4639      	mov	r1, r7
 80086a2:	4630      	mov	r0, r6
 80086a4:	eb04 0903 	add.w	r9, r4, r3
 80086a8:	f001 fd42 	bl	800a130 <_sbrk_r>
 80086ac:	4581      	cmp	r9, r0
 80086ae:	d142      	bne.n	8008736 <_malloc_r+0xea>
 80086b0:	6821      	ldr	r1, [r4, #0]
 80086b2:	4630      	mov	r0, r6
 80086b4:	1a6d      	subs	r5, r5, r1
 80086b6:	4629      	mov	r1, r5
 80086b8:	f7ff ffa6 	bl	8008608 <sbrk_aligned>
 80086bc:	3001      	adds	r0, #1
 80086be:	d03a      	beq.n	8008736 <_malloc_r+0xea>
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	442b      	add	r3, r5
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	f8d8 3000 	ldr.w	r3, [r8]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	bb62      	cbnz	r2, 8008728 <_malloc_r+0xdc>
 80086ce:	f8c8 7000 	str.w	r7, [r8]
 80086d2:	e00f      	b.n	80086f4 <_malloc_r+0xa8>
 80086d4:	6822      	ldr	r2, [r4, #0]
 80086d6:	1b52      	subs	r2, r2, r5
 80086d8:	d420      	bmi.n	800871c <_malloc_r+0xd0>
 80086da:	2a0b      	cmp	r2, #11
 80086dc:	d917      	bls.n	800870e <_malloc_r+0xc2>
 80086de:	1961      	adds	r1, r4, r5
 80086e0:	42a3      	cmp	r3, r4
 80086e2:	6025      	str	r5, [r4, #0]
 80086e4:	bf18      	it	ne
 80086e6:	6059      	strne	r1, [r3, #4]
 80086e8:	6863      	ldr	r3, [r4, #4]
 80086ea:	bf08      	it	eq
 80086ec:	f8c8 1000 	streq.w	r1, [r8]
 80086f0:	5162      	str	r2, [r4, r5]
 80086f2:	604b      	str	r3, [r1, #4]
 80086f4:	4630      	mov	r0, r6
 80086f6:	f000 f82f 	bl	8008758 <__malloc_unlock>
 80086fa:	f104 000b 	add.w	r0, r4, #11
 80086fe:	1d23      	adds	r3, r4, #4
 8008700:	f020 0007 	bic.w	r0, r0, #7
 8008704:	1ac2      	subs	r2, r0, r3
 8008706:	bf1c      	itt	ne
 8008708:	1a1b      	subne	r3, r3, r0
 800870a:	50a3      	strne	r3, [r4, r2]
 800870c:	e7af      	b.n	800866e <_malloc_r+0x22>
 800870e:	6862      	ldr	r2, [r4, #4]
 8008710:	42a3      	cmp	r3, r4
 8008712:	bf0c      	ite	eq
 8008714:	f8c8 2000 	streq.w	r2, [r8]
 8008718:	605a      	strne	r2, [r3, #4]
 800871a:	e7eb      	b.n	80086f4 <_malloc_r+0xa8>
 800871c:	4623      	mov	r3, r4
 800871e:	6864      	ldr	r4, [r4, #4]
 8008720:	e7ae      	b.n	8008680 <_malloc_r+0x34>
 8008722:	463c      	mov	r4, r7
 8008724:	687f      	ldr	r7, [r7, #4]
 8008726:	e7b6      	b.n	8008696 <_malloc_r+0x4a>
 8008728:	461a      	mov	r2, r3
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	42a3      	cmp	r3, r4
 800872e:	d1fb      	bne.n	8008728 <_malloc_r+0xdc>
 8008730:	2300      	movs	r3, #0
 8008732:	6053      	str	r3, [r2, #4]
 8008734:	e7de      	b.n	80086f4 <_malloc_r+0xa8>
 8008736:	230c      	movs	r3, #12
 8008738:	4630      	mov	r0, r6
 800873a:	6033      	str	r3, [r6, #0]
 800873c:	f000 f80c 	bl	8008758 <__malloc_unlock>
 8008740:	e794      	b.n	800866c <_malloc_r+0x20>
 8008742:	6005      	str	r5, [r0, #0]
 8008744:	e7d6      	b.n	80086f4 <_malloc_r+0xa8>
 8008746:	bf00      	nop
 8008748:	20000c14 	.word	0x20000c14

0800874c <__malloc_lock>:
 800874c:	4801      	ldr	r0, [pc, #4]	@ (8008754 <__malloc_lock+0x8>)
 800874e:	f7ff b872 	b.w	8007836 <__retarget_lock_acquire_recursive>
 8008752:	bf00      	nop
 8008754:	20000c0c 	.word	0x20000c0c

08008758 <__malloc_unlock>:
 8008758:	4801      	ldr	r0, [pc, #4]	@ (8008760 <__malloc_unlock+0x8>)
 800875a:	f7ff b86d 	b.w	8007838 <__retarget_lock_release_recursive>
 800875e:	bf00      	nop
 8008760:	20000c0c 	.word	0x20000c0c

08008764 <_Balloc>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	69c6      	ldr	r6, [r0, #28]
 8008768:	4604      	mov	r4, r0
 800876a:	460d      	mov	r5, r1
 800876c:	b976      	cbnz	r6, 800878c <_Balloc+0x28>
 800876e:	2010      	movs	r0, #16
 8008770:	f7ff ff42 	bl	80085f8 <malloc>
 8008774:	4602      	mov	r2, r0
 8008776:	61e0      	str	r0, [r4, #28]
 8008778:	b920      	cbnz	r0, 8008784 <_Balloc+0x20>
 800877a:	216b      	movs	r1, #107	@ 0x6b
 800877c:	4b17      	ldr	r3, [pc, #92]	@ (80087dc <_Balloc+0x78>)
 800877e:	4818      	ldr	r0, [pc, #96]	@ (80087e0 <_Balloc+0x7c>)
 8008780:	f7ff f884 	bl	800788c <__assert_func>
 8008784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008788:	6006      	str	r6, [r0, #0]
 800878a:	60c6      	str	r6, [r0, #12]
 800878c:	69e6      	ldr	r6, [r4, #28]
 800878e:	68f3      	ldr	r3, [r6, #12]
 8008790:	b183      	cbz	r3, 80087b4 <_Balloc+0x50>
 8008792:	69e3      	ldr	r3, [r4, #28]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800879a:	b9b8      	cbnz	r0, 80087cc <_Balloc+0x68>
 800879c:	2101      	movs	r1, #1
 800879e:	fa01 f605 	lsl.w	r6, r1, r5
 80087a2:	1d72      	adds	r2, r6, #5
 80087a4:	4620      	mov	r0, r4
 80087a6:	0092      	lsls	r2, r2, #2
 80087a8:	f001 fcdf 	bl	800a16a <_calloc_r>
 80087ac:	b160      	cbz	r0, 80087c8 <_Balloc+0x64>
 80087ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087b2:	e00e      	b.n	80087d2 <_Balloc+0x6e>
 80087b4:	2221      	movs	r2, #33	@ 0x21
 80087b6:	2104      	movs	r1, #4
 80087b8:	4620      	mov	r0, r4
 80087ba:	f001 fcd6 	bl	800a16a <_calloc_r>
 80087be:	69e3      	ldr	r3, [r4, #28]
 80087c0:	60f0      	str	r0, [r6, #12]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e4      	bne.n	8008792 <_Balloc+0x2e>
 80087c8:	2000      	movs	r0, #0
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
 80087cc:	6802      	ldr	r2, [r0, #0]
 80087ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087d2:	2300      	movs	r3, #0
 80087d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087d8:	e7f7      	b.n	80087ca <_Balloc+0x66>
 80087da:	bf00      	nop
 80087dc:	0800ce96 	.word	0x0800ce96
 80087e0:	0800cfb9 	.word	0x0800cfb9

080087e4 <_Bfree>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	69c6      	ldr	r6, [r0, #28]
 80087e8:	4605      	mov	r5, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	b976      	cbnz	r6, 800880c <_Bfree+0x28>
 80087ee:	2010      	movs	r0, #16
 80087f0:	f7ff ff02 	bl	80085f8 <malloc>
 80087f4:	4602      	mov	r2, r0
 80087f6:	61e8      	str	r0, [r5, #28]
 80087f8:	b920      	cbnz	r0, 8008804 <_Bfree+0x20>
 80087fa:	218f      	movs	r1, #143	@ 0x8f
 80087fc:	4b08      	ldr	r3, [pc, #32]	@ (8008820 <_Bfree+0x3c>)
 80087fe:	4809      	ldr	r0, [pc, #36]	@ (8008824 <_Bfree+0x40>)
 8008800:	f7ff f844 	bl	800788c <__assert_func>
 8008804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008808:	6006      	str	r6, [r0, #0]
 800880a:	60c6      	str	r6, [r0, #12]
 800880c:	b13c      	cbz	r4, 800881e <_Bfree+0x3a>
 800880e:	69eb      	ldr	r3, [r5, #28]
 8008810:	6862      	ldr	r2, [r4, #4]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008818:	6021      	str	r1, [r4, #0]
 800881a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	0800ce96 	.word	0x0800ce96
 8008824:	0800cfb9 	.word	0x0800cfb9

08008828 <__multadd>:
 8008828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800882c:	4607      	mov	r7, r0
 800882e:	460c      	mov	r4, r1
 8008830:	461e      	mov	r6, r3
 8008832:	2000      	movs	r0, #0
 8008834:	690d      	ldr	r5, [r1, #16]
 8008836:	f101 0c14 	add.w	ip, r1, #20
 800883a:	f8dc 3000 	ldr.w	r3, [ip]
 800883e:	3001      	adds	r0, #1
 8008840:	b299      	uxth	r1, r3
 8008842:	fb02 6101 	mla	r1, r2, r1, r6
 8008846:	0c1e      	lsrs	r6, r3, #16
 8008848:	0c0b      	lsrs	r3, r1, #16
 800884a:	fb02 3306 	mla	r3, r2, r6, r3
 800884e:	b289      	uxth	r1, r1
 8008850:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008854:	4285      	cmp	r5, r0
 8008856:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800885a:	f84c 1b04 	str.w	r1, [ip], #4
 800885e:	dcec      	bgt.n	800883a <__multadd+0x12>
 8008860:	b30e      	cbz	r6, 80088a6 <__multadd+0x7e>
 8008862:	68a3      	ldr	r3, [r4, #8]
 8008864:	42ab      	cmp	r3, r5
 8008866:	dc19      	bgt.n	800889c <__multadd+0x74>
 8008868:	6861      	ldr	r1, [r4, #4]
 800886a:	4638      	mov	r0, r7
 800886c:	3101      	adds	r1, #1
 800886e:	f7ff ff79 	bl	8008764 <_Balloc>
 8008872:	4680      	mov	r8, r0
 8008874:	b928      	cbnz	r0, 8008882 <__multadd+0x5a>
 8008876:	4602      	mov	r2, r0
 8008878:	21ba      	movs	r1, #186	@ 0xba
 800887a:	4b0c      	ldr	r3, [pc, #48]	@ (80088ac <__multadd+0x84>)
 800887c:	480c      	ldr	r0, [pc, #48]	@ (80088b0 <__multadd+0x88>)
 800887e:	f7ff f805 	bl	800788c <__assert_func>
 8008882:	6922      	ldr	r2, [r4, #16]
 8008884:	f104 010c 	add.w	r1, r4, #12
 8008888:	3202      	adds	r2, #2
 800888a:	0092      	lsls	r2, r2, #2
 800888c:	300c      	adds	r0, #12
 800888e:	f7fe ffea 	bl	8007866 <memcpy>
 8008892:	4621      	mov	r1, r4
 8008894:	4638      	mov	r0, r7
 8008896:	f7ff ffa5 	bl	80087e4 <_Bfree>
 800889a:	4644      	mov	r4, r8
 800889c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088a0:	3501      	adds	r5, #1
 80088a2:	615e      	str	r6, [r3, #20]
 80088a4:	6125      	str	r5, [r4, #16]
 80088a6:	4620      	mov	r0, r4
 80088a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ac:	0800cfa8 	.word	0x0800cfa8
 80088b0:	0800cfb9 	.word	0x0800cfb9

080088b4 <__s2b>:
 80088b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b8:	4615      	mov	r5, r2
 80088ba:	2209      	movs	r2, #9
 80088bc:	461f      	mov	r7, r3
 80088be:	3308      	adds	r3, #8
 80088c0:	460c      	mov	r4, r1
 80088c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80088c6:	4606      	mov	r6, r0
 80088c8:	2201      	movs	r2, #1
 80088ca:	2100      	movs	r1, #0
 80088cc:	429a      	cmp	r2, r3
 80088ce:	db09      	blt.n	80088e4 <__s2b+0x30>
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff ff47 	bl	8008764 <_Balloc>
 80088d6:	b940      	cbnz	r0, 80088ea <__s2b+0x36>
 80088d8:	4602      	mov	r2, r0
 80088da:	21d3      	movs	r1, #211	@ 0xd3
 80088dc:	4b18      	ldr	r3, [pc, #96]	@ (8008940 <__s2b+0x8c>)
 80088de:	4819      	ldr	r0, [pc, #100]	@ (8008944 <__s2b+0x90>)
 80088e0:	f7fe ffd4 	bl	800788c <__assert_func>
 80088e4:	0052      	lsls	r2, r2, #1
 80088e6:	3101      	adds	r1, #1
 80088e8:	e7f0      	b.n	80088cc <__s2b+0x18>
 80088ea:	9b08      	ldr	r3, [sp, #32]
 80088ec:	2d09      	cmp	r5, #9
 80088ee:	6143      	str	r3, [r0, #20]
 80088f0:	f04f 0301 	mov.w	r3, #1
 80088f4:	6103      	str	r3, [r0, #16]
 80088f6:	dd16      	ble.n	8008926 <__s2b+0x72>
 80088f8:	f104 0909 	add.w	r9, r4, #9
 80088fc:	46c8      	mov	r8, r9
 80088fe:	442c      	add	r4, r5
 8008900:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008904:	4601      	mov	r1, r0
 8008906:	220a      	movs	r2, #10
 8008908:	4630      	mov	r0, r6
 800890a:	3b30      	subs	r3, #48	@ 0x30
 800890c:	f7ff ff8c 	bl	8008828 <__multadd>
 8008910:	45a0      	cmp	r8, r4
 8008912:	d1f5      	bne.n	8008900 <__s2b+0x4c>
 8008914:	f1a5 0408 	sub.w	r4, r5, #8
 8008918:	444c      	add	r4, r9
 800891a:	1b2d      	subs	r5, r5, r4
 800891c:	1963      	adds	r3, r4, r5
 800891e:	42bb      	cmp	r3, r7
 8008920:	db04      	blt.n	800892c <__s2b+0x78>
 8008922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008926:	2509      	movs	r5, #9
 8008928:	340a      	adds	r4, #10
 800892a:	e7f6      	b.n	800891a <__s2b+0x66>
 800892c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008930:	4601      	mov	r1, r0
 8008932:	220a      	movs	r2, #10
 8008934:	4630      	mov	r0, r6
 8008936:	3b30      	subs	r3, #48	@ 0x30
 8008938:	f7ff ff76 	bl	8008828 <__multadd>
 800893c:	e7ee      	b.n	800891c <__s2b+0x68>
 800893e:	bf00      	nop
 8008940:	0800cfa8 	.word	0x0800cfa8
 8008944:	0800cfb9 	.word	0x0800cfb9

08008948 <__hi0bits>:
 8008948:	4603      	mov	r3, r0
 800894a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800894e:	bf3a      	itte	cc
 8008950:	0403      	lslcc	r3, r0, #16
 8008952:	2010      	movcc	r0, #16
 8008954:	2000      	movcs	r0, #0
 8008956:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800895a:	bf3c      	itt	cc
 800895c:	021b      	lslcc	r3, r3, #8
 800895e:	3008      	addcc	r0, #8
 8008960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008964:	bf3c      	itt	cc
 8008966:	011b      	lslcc	r3, r3, #4
 8008968:	3004      	addcc	r0, #4
 800896a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800896e:	bf3c      	itt	cc
 8008970:	009b      	lslcc	r3, r3, #2
 8008972:	3002      	addcc	r0, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	db05      	blt.n	8008984 <__hi0bits+0x3c>
 8008978:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800897c:	f100 0001 	add.w	r0, r0, #1
 8008980:	bf08      	it	eq
 8008982:	2020      	moveq	r0, #32
 8008984:	4770      	bx	lr

08008986 <__lo0bits>:
 8008986:	6803      	ldr	r3, [r0, #0]
 8008988:	4602      	mov	r2, r0
 800898a:	f013 0007 	ands.w	r0, r3, #7
 800898e:	d00b      	beq.n	80089a8 <__lo0bits+0x22>
 8008990:	07d9      	lsls	r1, r3, #31
 8008992:	d421      	bmi.n	80089d8 <__lo0bits+0x52>
 8008994:	0798      	lsls	r0, r3, #30
 8008996:	bf49      	itett	mi
 8008998:	085b      	lsrmi	r3, r3, #1
 800899a:	089b      	lsrpl	r3, r3, #2
 800899c:	2001      	movmi	r0, #1
 800899e:	6013      	strmi	r3, [r2, #0]
 80089a0:	bf5c      	itt	pl
 80089a2:	2002      	movpl	r0, #2
 80089a4:	6013      	strpl	r3, [r2, #0]
 80089a6:	4770      	bx	lr
 80089a8:	b299      	uxth	r1, r3
 80089aa:	b909      	cbnz	r1, 80089b0 <__lo0bits+0x2a>
 80089ac:	2010      	movs	r0, #16
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	b2d9      	uxtb	r1, r3
 80089b2:	b909      	cbnz	r1, 80089b8 <__lo0bits+0x32>
 80089b4:	3008      	adds	r0, #8
 80089b6:	0a1b      	lsrs	r3, r3, #8
 80089b8:	0719      	lsls	r1, r3, #28
 80089ba:	bf04      	itt	eq
 80089bc:	091b      	lsreq	r3, r3, #4
 80089be:	3004      	addeq	r0, #4
 80089c0:	0799      	lsls	r1, r3, #30
 80089c2:	bf04      	itt	eq
 80089c4:	089b      	lsreq	r3, r3, #2
 80089c6:	3002      	addeq	r0, #2
 80089c8:	07d9      	lsls	r1, r3, #31
 80089ca:	d403      	bmi.n	80089d4 <__lo0bits+0x4e>
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	f100 0001 	add.w	r0, r0, #1
 80089d2:	d003      	beq.n	80089dc <__lo0bits+0x56>
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	4770      	bx	lr
 80089d8:	2000      	movs	r0, #0
 80089da:	4770      	bx	lr
 80089dc:	2020      	movs	r0, #32
 80089de:	4770      	bx	lr

080089e0 <__i2b>:
 80089e0:	b510      	push	{r4, lr}
 80089e2:	460c      	mov	r4, r1
 80089e4:	2101      	movs	r1, #1
 80089e6:	f7ff febd 	bl	8008764 <_Balloc>
 80089ea:	4602      	mov	r2, r0
 80089ec:	b928      	cbnz	r0, 80089fa <__i2b+0x1a>
 80089ee:	f240 1145 	movw	r1, #325	@ 0x145
 80089f2:	4b04      	ldr	r3, [pc, #16]	@ (8008a04 <__i2b+0x24>)
 80089f4:	4804      	ldr	r0, [pc, #16]	@ (8008a08 <__i2b+0x28>)
 80089f6:	f7fe ff49 	bl	800788c <__assert_func>
 80089fa:	2301      	movs	r3, #1
 80089fc:	6144      	str	r4, [r0, #20]
 80089fe:	6103      	str	r3, [r0, #16]
 8008a00:	bd10      	pop	{r4, pc}
 8008a02:	bf00      	nop
 8008a04:	0800cfa8 	.word	0x0800cfa8
 8008a08:	0800cfb9 	.word	0x0800cfb9

08008a0c <__multiply>:
 8008a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a10:	4614      	mov	r4, r2
 8008a12:	690a      	ldr	r2, [r1, #16]
 8008a14:	6923      	ldr	r3, [r4, #16]
 8008a16:	460f      	mov	r7, r1
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	bfa2      	ittt	ge
 8008a1c:	4623      	movge	r3, r4
 8008a1e:	460c      	movge	r4, r1
 8008a20:	461f      	movge	r7, r3
 8008a22:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a26:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a2a:	68a3      	ldr	r3, [r4, #8]
 8008a2c:	6861      	ldr	r1, [r4, #4]
 8008a2e:	eb0a 0609 	add.w	r6, sl, r9
 8008a32:	42b3      	cmp	r3, r6
 8008a34:	b085      	sub	sp, #20
 8008a36:	bfb8      	it	lt
 8008a38:	3101      	addlt	r1, #1
 8008a3a:	f7ff fe93 	bl	8008764 <_Balloc>
 8008a3e:	b930      	cbnz	r0, 8008a4e <__multiply+0x42>
 8008a40:	4602      	mov	r2, r0
 8008a42:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a46:	4b43      	ldr	r3, [pc, #268]	@ (8008b54 <__multiply+0x148>)
 8008a48:	4843      	ldr	r0, [pc, #268]	@ (8008b58 <__multiply+0x14c>)
 8008a4a:	f7fe ff1f 	bl	800788c <__assert_func>
 8008a4e:	f100 0514 	add.w	r5, r0, #20
 8008a52:	462b      	mov	r3, r5
 8008a54:	2200      	movs	r2, #0
 8008a56:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a5a:	4543      	cmp	r3, r8
 8008a5c:	d321      	bcc.n	8008aa2 <__multiply+0x96>
 8008a5e:	f107 0114 	add.w	r1, r7, #20
 8008a62:	f104 0214 	add.w	r2, r4, #20
 8008a66:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008a6a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008a6e:	9302      	str	r3, [sp, #8]
 8008a70:	1b13      	subs	r3, r2, r4
 8008a72:	3b15      	subs	r3, #21
 8008a74:	f023 0303 	bic.w	r3, r3, #3
 8008a78:	3304      	adds	r3, #4
 8008a7a:	f104 0715 	add.w	r7, r4, #21
 8008a7e:	42ba      	cmp	r2, r7
 8008a80:	bf38      	it	cc
 8008a82:	2304      	movcc	r3, #4
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	9b02      	ldr	r3, [sp, #8]
 8008a88:	9103      	str	r1, [sp, #12]
 8008a8a:	428b      	cmp	r3, r1
 8008a8c:	d80c      	bhi.n	8008aa8 <__multiply+0x9c>
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	dd03      	ble.n	8008a9a <__multiply+0x8e>
 8008a92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d05a      	beq.n	8008b50 <__multiply+0x144>
 8008a9a:	6106      	str	r6, [r0, #16]
 8008a9c:	b005      	add	sp, #20
 8008a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa2:	f843 2b04 	str.w	r2, [r3], #4
 8008aa6:	e7d8      	b.n	8008a5a <__multiply+0x4e>
 8008aa8:	f8b1 a000 	ldrh.w	sl, [r1]
 8008aac:	f1ba 0f00 	cmp.w	sl, #0
 8008ab0:	d023      	beq.n	8008afa <__multiply+0xee>
 8008ab2:	46a9      	mov	r9, r5
 8008ab4:	f04f 0c00 	mov.w	ip, #0
 8008ab8:	f104 0e14 	add.w	lr, r4, #20
 8008abc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ac0:	f8d9 3000 	ldr.w	r3, [r9]
 8008ac4:	fa1f fb87 	uxth.w	fp, r7
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ace:	4463      	add	r3, ip
 8008ad0:	f8d9 c000 	ldr.w	ip, [r9]
 8008ad4:	0c3f      	lsrs	r7, r7, #16
 8008ad6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008ada:	fb0a c707 	mla	r7, sl, r7, ip
 8008ade:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ae8:	4572      	cmp	r2, lr
 8008aea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008aee:	f849 3b04 	str.w	r3, [r9], #4
 8008af2:	d8e3      	bhi.n	8008abc <__multiply+0xb0>
 8008af4:	9b01      	ldr	r3, [sp, #4]
 8008af6:	f845 c003 	str.w	ip, [r5, r3]
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	3104      	adds	r1, #4
 8008afe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b02:	f1b9 0f00 	cmp.w	r9, #0
 8008b06:	d021      	beq.n	8008b4c <__multiply+0x140>
 8008b08:	46ae      	mov	lr, r5
 8008b0a:	f04f 0a00 	mov.w	sl, #0
 8008b0e:	682b      	ldr	r3, [r5, #0]
 8008b10:	f104 0c14 	add.w	ip, r4, #20
 8008b14:	f8bc b000 	ldrh.w	fp, [ip]
 8008b18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	fb09 770b 	mla	r7, r9, fp, r7
 8008b22:	4457      	add	r7, sl
 8008b24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b28:	f84e 3b04 	str.w	r3, [lr], #4
 8008b2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b34:	f8be 3000 	ldrh.w	r3, [lr]
 8008b38:	4562      	cmp	r2, ip
 8008b3a:	fb09 330a 	mla	r3, r9, sl, r3
 8008b3e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b46:	d8e5      	bhi.n	8008b14 <__multiply+0x108>
 8008b48:	9f01      	ldr	r7, [sp, #4]
 8008b4a:	51eb      	str	r3, [r5, r7]
 8008b4c:	3504      	adds	r5, #4
 8008b4e:	e79a      	b.n	8008a86 <__multiply+0x7a>
 8008b50:	3e01      	subs	r6, #1
 8008b52:	e79c      	b.n	8008a8e <__multiply+0x82>
 8008b54:	0800cfa8 	.word	0x0800cfa8
 8008b58:	0800cfb9 	.word	0x0800cfb9

08008b5c <__pow5mult>:
 8008b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b60:	4615      	mov	r5, r2
 8008b62:	f012 0203 	ands.w	r2, r2, #3
 8008b66:	4607      	mov	r7, r0
 8008b68:	460e      	mov	r6, r1
 8008b6a:	d007      	beq.n	8008b7c <__pow5mult+0x20>
 8008b6c:	4c25      	ldr	r4, [pc, #148]	@ (8008c04 <__pow5mult+0xa8>)
 8008b6e:	3a01      	subs	r2, #1
 8008b70:	2300      	movs	r3, #0
 8008b72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b76:	f7ff fe57 	bl	8008828 <__multadd>
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	10ad      	asrs	r5, r5, #2
 8008b7e:	d03d      	beq.n	8008bfc <__pow5mult+0xa0>
 8008b80:	69fc      	ldr	r4, [r7, #28]
 8008b82:	b97c      	cbnz	r4, 8008ba4 <__pow5mult+0x48>
 8008b84:	2010      	movs	r0, #16
 8008b86:	f7ff fd37 	bl	80085f8 <malloc>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	61f8      	str	r0, [r7, #28]
 8008b8e:	b928      	cbnz	r0, 8008b9c <__pow5mult+0x40>
 8008b90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008b94:	4b1c      	ldr	r3, [pc, #112]	@ (8008c08 <__pow5mult+0xac>)
 8008b96:	481d      	ldr	r0, [pc, #116]	@ (8008c0c <__pow5mult+0xb0>)
 8008b98:	f7fe fe78 	bl	800788c <__assert_func>
 8008b9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ba0:	6004      	str	r4, [r0, #0]
 8008ba2:	60c4      	str	r4, [r0, #12]
 8008ba4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ba8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bac:	b94c      	cbnz	r4, 8008bc2 <__pow5mult+0x66>
 8008bae:	f240 2171 	movw	r1, #625	@ 0x271
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	f7ff ff14 	bl	80089e0 <__i2b>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bc0:	6003      	str	r3, [r0, #0]
 8008bc2:	f04f 0900 	mov.w	r9, #0
 8008bc6:	07eb      	lsls	r3, r5, #31
 8008bc8:	d50a      	bpl.n	8008be0 <__pow5mult+0x84>
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4622      	mov	r2, r4
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f7ff ff1c 	bl	8008a0c <__multiply>
 8008bd4:	4680      	mov	r8, r0
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f7ff fe03 	bl	80087e4 <_Bfree>
 8008bde:	4646      	mov	r6, r8
 8008be0:	106d      	asrs	r5, r5, #1
 8008be2:	d00b      	beq.n	8008bfc <__pow5mult+0xa0>
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	b938      	cbnz	r0, 8008bf8 <__pow5mult+0x9c>
 8008be8:	4622      	mov	r2, r4
 8008bea:	4621      	mov	r1, r4
 8008bec:	4638      	mov	r0, r7
 8008bee:	f7ff ff0d 	bl	8008a0c <__multiply>
 8008bf2:	6020      	str	r0, [r4, #0]
 8008bf4:	f8c0 9000 	str.w	r9, [r0]
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	e7e4      	b.n	8008bc6 <__pow5mult+0x6a>
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c02:	bf00      	nop
 8008c04:	0800d014 	.word	0x0800d014
 8008c08:	0800ce96 	.word	0x0800ce96
 8008c0c:	0800cfb9 	.word	0x0800cfb9

08008c10 <__lshift>:
 8008c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c14:	460c      	mov	r4, r1
 8008c16:	4607      	mov	r7, r0
 8008c18:	4691      	mov	r9, r2
 8008c1a:	6923      	ldr	r3, [r4, #16]
 8008c1c:	6849      	ldr	r1, [r1, #4]
 8008c1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c22:	68a3      	ldr	r3, [r4, #8]
 8008c24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c28:	f108 0601 	add.w	r6, r8, #1
 8008c2c:	42b3      	cmp	r3, r6
 8008c2e:	db0b      	blt.n	8008c48 <__lshift+0x38>
 8008c30:	4638      	mov	r0, r7
 8008c32:	f7ff fd97 	bl	8008764 <_Balloc>
 8008c36:	4605      	mov	r5, r0
 8008c38:	b948      	cbnz	r0, 8008c4e <__lshift+0x3e>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c40:	4b27      	ldr	r3, [pc, #156]	@ (8008ce0 <__lshift+0xd0>)
 8008c42:	4828      	ldr	r0, [pc, #160]	@ (8008ce4 <__lshift+0xd4>)
 8008c44:	f7fe fe22 	bl	800788c <__assert_func>
 8008c48:	3101      	adds	r1, #1
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	e7ee      	b.n	8008c2c <__lshift+0x1c>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f100 0114 	add.w	r1, r0, #20
 8008c54:	f100 0210 	add.w	r2, r0, #16
 8008c58:	4618      	mov	r0, r3
 8008c5a:	4553      	cmp	r3, sl
 8008c5c:	db33      	blt.n	8008cc6 <__lshift+0xb6>
 8008c5e:	6920      	ldr	r0, [r4, #16]
 8008c60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c64:	f104 0314 	add.w	r3, r4, #20
 8008c68:	f019 091f 	ands.w	r9, r9, #31
 8008c6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c74:	d02b      	beq.n	8008cce <__lshift+0xbe>
 8008c76:	468a      	mov	sl, r1
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	fa00 f009 	lsl.w	r0, r0, r9
 8008c84:	4310      	orrs	r0, r2
 8008c86:	f84a 0b04 	str.w	r0, [sl], #4
 8008c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c8e:	459c      	cmp	ip, r3
 8008c90:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c94:	d8f3      	bhi.n	8008c7e <__lshift+0x6e>
 8008c96:	ebac 0304 	sub.w	r3, ip, r4
 8008c9a:	3b15      	subs	r3, #21
 8008c9c:	f023 0303 	bic.w	r3, r3, #3
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	f104 0015 	add.w	r0, r4, #21
 8008ca6:	4584      	cmp	ip, r0
 8008ca8:	bf38      	it	cc
 8008caa:	2304      	movcc	r3, #4
 8008cac:	50ca      	str	r2, [r1, r3]
 8008cae:	b10a      	cbz	r2, 8008cb4 <__lshift+0xa4>
 8008cb0:	f108 0602 	add.w	r6, r8, #2
 8008cb4:	3e01      	subs	r6, #1
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	4621      	mov	r1, r4
 8008cba:	612e      	str	r6, [r5, #16]
 8008cbc:	f7ff fd92 	bl	80087e4 <_Bfree>
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cca:	3301      	adds	r3, #1
 8008ccc:	e7c5      	b.n	8008c5a <__lshift+0x4a>
 8008cce:	3904      	subs	r1, #4
 8008cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd4:	459c      	cmp	ip, r3
 8008cd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cda:	d8f9      	bhi.n	8008cd0 <__lshift+0xc0>
 8008cdc:	e7ea      	b.n	8008cb4 <__lshift+0xa4>
 8008cde:	bf00      	nop
 8008ce0:	0800cfa8 	.word	0x0800cfa8
 8008ce4:	0800cfb9 	.word	0x0800cfb9

08008ce8 <__mcmp>:
 8008ce8:	4603      	mov	r3, r0
 8008cea:	690a      	ldr	r2, [r1, #16]
 8008cec:	6900      	ldr	r0, [r0, #16]
 8008cee:	b530      	push	{r4, r5, lr}
 8008cf0:	1a80      	subs	r0, r0, r2
 8008cf2:	d10e      	bne.n	8008d12 <__mcmp+0x2a>
 8008cf4:	3314      	adds	r3, #20
 8008cf6:	3114      	adds	r1, #20
 8008cf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008cfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d08:	4295      	cmp	r5, r2
 8008d0a:	d003      	beq.n	8008d14 <__mcmp+0x2c>
 8008d0c:	d205      	bcs.n	8008d1a <__mcmp+0x32>
 8008d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d12:	bd30      	pop	{r4, r5, pc}
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	d3f3      	bcc.n	8008d00 <__mcmp+0x18>
 8008d18:	e7fb      	b.n	8008d12 <__mcmp+0x2a>
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	e7f9      	b.n	8008d12 <__mcmp+0x2a>
	...

08008d20 <__mdiff>:
 8008d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	4689      	mov	r9, r1
 8008d26:	4606      	mov	r6, r0
 8008d28:	4611      	mov	r1, r2
 8008d2a:	4648      	mov	r0, r9
 8008d2c:	4614      	mov	r4, r2
 8008d2e:	f7ff ffdb 	bl	8008ce8 <__mcmp>
 8008d32:	1e05      	subs	r5, r0, #0
 8008d34:	d112      	bne.n	8008d5c <__mdiff+0x3c>
 8008d36:	4629      	mov	r1, r5
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7ff fd13 	bl	8008764 <_Balloc>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	b928      	cbnz	r0, 8008d4e <__mdiff+0x2e>
 8008d42:	f240 2137 	movw	r1, #567	@ 0x237
 8008d46:	4b3e      	ldr	r3, [pc, #248]	@ (8008e40 <__mdiff+0x120>)
 8008d48:	483e      	ldr	r0, [pc, #248]	@ (8008e44 <__mdiff+0x124>)
 8008d4a:	f7fe fd9f 	bl	800788c <__assert_func>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d54:	4610      	mov	r0, r2
 8008d56:	b003      	add	sp, #12
 8008d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5c:	bfbc      	itt	lt
 8008d5e:	464b      	movlt	r3, r9
 8008d60:	46a1      	movlt	r9, r4
 8008d62:	4630      	mov	r0, r6
 8008d64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d68:	bfba      	itte	lt
 8008d6a:	461c      	movlt	r4, r3
 8008d6c:	2501      	movlt	r5, #1
 8008d6e:	2500      	movge	r5, #0
 8008d70:	f7ff fcf8 	bl	8008764 <_Balloc>
 8008d74:	4602      	mov	r2, r0
 8008d76:	b918      	cbnz	r0, 8008d80 <__mdiff+0x60>
 8008d78:	f240 2145 	movw	r1, #581	@ 0x245
 8008d7c:	4b30      	ldr	r3, [pc, #192]	@ (8008e40 <__mdiff+0x120>)
 8008d7e:	e7e3      	b.n	8008d48 <__mdiff+0x28>
 8008d80:	f100 0b14 	add.w	fp, r0, #20
 8008d84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008d88:	f109 0310 	add.w	r3, r9, #16
 8008d8c:	60c5      	str	r5, [r0, #12]
 8008d8e:	f04f 0c00 	mov.w	ip, #0
 8008d92:	f109 0514 	add.w	r5, r9, #20
 8008d96:	46d9      	mov	r9, fp
 8008d98:	6926      	ldr	r6, [r4, #16]
 8008d9a:	f104 0e14 	add.w	lr, r4, #20
 8008d9e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008da2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	9b01      	ldr	r3, [sp, #4]
 8008daa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008dae:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008db2:	b281      	uxth	r1, r0
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	fa1f f38a 	uxth.w	r3, sl
 8008dba:	1a5b      	subs	r3, r3, r1
 8008dbc:	0c00      	lsrs	r0, r0, #16
 8008dbe:	4463      	add	r3, ip
 8008dc0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008dc4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008dce:	4576      	cmp	r6, lr
 8008dd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008dd4:	f849 3b04 	str.w	r3, [r9], #4
 8008dd8:	d8e6      	bhi.n	8008da8 <__mdiff+0x88>
 8008dda:	1b33      	subs	r3, r6, r4
 8008ddc:	3b15      	subs	r3, #21
 8008dde:	f023 0303 	bic.w	r3, r3, #3
 8008de2:	3415      	adds	r4, #21
 8008de4:	3304      	adds	r3, #4
 8008de6:	42a6      	cmp	r6, r4
 8008de8:	bf38      	it	cc
 8008dea:	2304      	movcc	r3, #4
 8008dec:	441d      	add	r5, r3
 8008dee:	445b      	add	r3, fp
 8008df0:	461e      	mov	r6, r3
 8008df2:	462c      	mov	r4, r5
 8008df4:	4544      	cmp	r4, r8
 8008df6:	d30e      	bcc.n	8008e16 <__mdiff+0xf6>
 8008df8:	f108 0103 	add.w	r1, r8, #3
 8008dfc:	1b49      	subs	r1, r1, r5
 8008dfe:	f021 0103 	bic.w	r1, r1, #3
 8008e02:	3d03      	subs	r5, #3
 8008e04:	45a8      	cmp	r8, r5
 8008e06:	bf38      	it	cc
 8008e08:	2100      	movcc	r1, #0
 8008e0a:	440b      	add	r3, r1
 8008e0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e10:	b199      	cbz	r1, 8008e3a <__mdiff+0x11a>
 8008e12:	6117      	str	r7, [r2, #16]
 8008e14:	e79e      	b.n	8008d54 <__mdiff+0x34>
 8008e16:	46e6      	mov	lr, ip
 8008e18:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e1c:	fa1f fc81 	uxth.w	ip, r1
 8008e20:	44f4      	add	ip, lr
 8008e22:	0c08      	lsrs	r0, r1, #16
 8008e24:	4471      	add	r1, lr
 8008e26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e2a:	b289      	uxth	r1, r1
 8008e2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e34:	f846 1b04 	str.w	r1, [r6], #4
 8008e38:	e7dc      	b.n	8008df4 <__mdiff+0xd4>
 8008e3a:	3f01      	subs	r7, #1
 8008e3c:	e7e6      	b.n	8008e0c <__mdiff+0xec>
 8008e3e:	bf00      	nop
 8008e40:	0800cfa8 	.word	0x0800cfa8
 8008e44:	0800cfb9 	.word	0x0800cfb9

08008e48 <__ulp>:
 8008e48:	4b0e      	ldr	r3, [pc, #56]	@ (8008e84 <__ulp+0x3c>)
 8008e4a:	400b      	ands	r3, r1
 8008e4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dc08      	bgt.n	8008e66 <__ulp+0x1e>
 8008e54:	425b      	negs	r3, r3
 8008e56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008e5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e5e:	da04      	bge.n	8008e6a <__ulp+0x22>
 8008e60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008e64:	4113      	asrs	r3, r2
 8008e66:	2200      	movs	r2, #0
 8008e68:	e008      	b.n	8008e7c <__ulp+0x34>
 8008e6a:	f1a2 0314 	sub.w	r3, r2, #20
 8008e6e:	2b1e      	cmp	r3, #30
 8008e70:	bfd6      	itet	le
 8008e72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008e76:	2201      	movgt	r2, #1
 8008e78:	40da      	lsrle	r2, r3
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	7ff00000 	.word	0x7ff00000

08008e88 <__b2d>:
 8008e88:	6902      	ldr	r2, [r0, #16]
 8008e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8c:	f100 0614 	add.w	r6, r0, #20
 8008e90:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008e94:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008e98:	4f1e      	ldr	r7, [pc, #120]	@ (8008f14 <__b2d+0x8c>)
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f7ff fd54 	bl	8008948 <__hi0bits>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f1c0 0020 	rsb	r0, r0, #32
 8008ea6:	2b0a      	cmp	r3, #10
 8008ea8:	f1a2 0504 	sub.w	r5, r2, #4
 8008eac:	6008      	str	r0, [r1, #0]
 8008eae:	dc12      	bgt.n	8008ed6 <__b2d+0x4e>
 8008eb0:	42ae      	cmp	r6, r5
 8008eb2:	bf2c      	ite	cs
 8008eb4:	2200      	movcs	r2, #0
 8008eb6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008eba:	f1c3 0c0b 	rsb	ip, r3, #11
 8008ebe:	3315      	adds	r3, #21
 8008ec0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008ec4:	fa04 f303 	lsl.w	r3, r4, r3
 8008ec8:	fa22 f20c 	lsr.w	r2, r2, ip
 8008ecc:	ea4e 0107 	orr.w	r1, lr, r7
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed6:	42ae      	cmp	r6, r5
 8008ed8:	bf36      	itet	cc
 8008eda:	f1a2 0508 	subcc.w	r5, r2, #8
 8008ede:	2200      	movcs	r2, #0
 8008ee0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008ee4:	3b0b      	subs	r3, #11
 8008ee6:	d012      	beq.n	8008f0e <__b2d+0x86>
 8008ee8:	f1c3 0720 	rsb	r7, r3, #32
 8008eec:	fa22 f107 	lsr.w	r1, r2, r7
 8008ef0:	409c      	lsls	r4, r3
 8008ef2:	430c      	orrs	r4, r1
 8008ef4:	42b5      	cmp	r5, r6
 8008ef6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008efa:	bf94      	ite	ls
 8008efc:	2400      	movls	r4, #0
 8008efe:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008f02:	409a      	lsls	r2, r3
 8008f04:	40fc      	lsrs	r4, r7
 8008f06:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008f0a:	4322      	orrs	r2, r4
 8008f0c:	e7e1      	b.n	8008ed2 <__b2d+0x4a>
 8008f0e:	ea44 0107 	orr.w	r1, r4, r7
 8008f12:	e7de      	b.n	8008ed2 <__b2d+0x4a>
 8008f14:	3ff00000 	.word	0x3ff00000

08008f18 <__d2b>:
 8008f18:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	4690      	mov	r8, r2
 8008f20:	4699      	mov	r9, r3
 8008f22:	9e08      	ldr	r6, [sp, #32]
 8008f24:	f7ff fc1e 	bl	8008764 <_Balloc>
 8008f28:	4604      	mov	r4, r0
 8008f2a:	b930      	cbnz	r0, 8008f3a <__d2b+0x22>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f32:	4b23      	ldr	r3, [pc, #140]	@ (8008fc0 <__d2b+0xa8>)
 8008f34:	4823      	ldr	r0, [pc, #140]	@ (8008fc4 <__d2b+0xac>)
 8008f36:	f7fe fca9 	bl	800788c <__assert_func>
 8008f3a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f42:	b10d      	cbz	r5, 8008f48 <__d2b+0x30>
 8008f44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	f1b8 0300 	subs.w	r3, r8, #0
 8008f4e:	d024      	beq.n	8008f9a <__d2b+0x82>
 8008f50:	4668      	mov	r0, sp
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	f7ff fd17 	bl	8008986 <__lo0bits>
 8008f58:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f5c:	b1d8      	cbz	r0, 8008f96 <__d2b+0x7e>
 8008f5e:	f1c0 0320 	rsb	r3, r0, #32
 8008f62:	fa02 f303 	lsl.w	r3, r2, r3
 8008f66:	430b      	orrs	r3, r1
 8008f68:	40c2      	lsrs	r2, r0
 8008f6a:	6163      	str	r3, [r4, #20]
 8008f6c:	9201      	str	r2, [sp, #4]
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	bf0c      	ite	eq
 8008f74:	2201      	moveq	r2, #1
 8008f76:	2202      	movne	r2, #2
 8008f78:	61a3      	str	r3, [r4, #24]
 8008f7a:	6122      	str	r2, [r4, #16]
 8008f7c:	b1ad      	cbz	r5, 8008faa <__d2b+0x92>
 8008f7e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f82:	4405      	add	r5, r0
 8008f84:	6035      	str	r5, [r6, #0]
 8008f86:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f8c:	6018      	str	r0, [r3, #0]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	b002      	add	sp, #8
 8008f92:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008f96:	6161      	str	r1, [r4, #20]
 8008f98:	e7e9      	b.n	8008f6e <__d2b+0x56>
 8008f9a:	a801      	add	r0, sp, #4
 8008f9c:	f7ff fcf3 	bl	8008986 <__lo0bits>
 8008fa0:	9b01      	ldr	r3, [sp, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	6163      	str	r3, [r4, #20]
 8008fa6:	3020      	adds	r0, #32
 8008fa8:	e7e7      	b.n	8008f7a <__d2b+0x62>
 8008faa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008fae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fb2:	6030      	str	r0, [r6, #0]
 8008fb4:	6918      	ldr	r0, [r3, #16]
 8008fb6:	f7ff fcc7 	bl	8008948 <__hi0bits>
 8008fba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fbe:	e7e4      	b.n	8008f8a <__d2b+0x72>
 8008fc0:	0800cfa8 	.word	0x0800cfa8
 8008fc4:	0800cfb9 	.word	0x0800cfb9

08008fc8 <__ratio>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	b085      	sub	sp, #20
 8008fce:	e9cd 1000 	strd	r1, r0, [sp]
 8008fd2:	a902      	add	r1, sp, #8
 8008fd4:	f7ff ff58 	bl	8008e88 <__b2d>
 8008fd8:	468b      	mov	fp, r1
 8008fda:	4606      	mov	r6, r0
 8008fdc:	460f      	mov	r7, r1
 8008fde:	9800      	ldr	r0, [sp, #0]
 8008fe0:	a903      	add	r1, sp, #12
 8008fe2:	f7ff ff51 	bl	8008e88 <__b2d>
 8008fe6:	460d      	mov	r5, r1
 8008fe8:	9b01      	ldr	r3, [sp, #4]
 8008fea:	4689      	mov	r9, r1
 8008fec:	6919      	ldr	r1, [r3, #16]
 8008fee:	9b00      	ldr	r3, [sp, #0]
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	1ac9      	subs	r1, r1, r3
 8008ff8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008ffc:	1a9b      	subs	r3, r3, r2
 8008ffe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfcd      	iteet	gt
 8009006:	463a      	movgt	r2, r7
 8009008:	462a      	movle	r2, r5
 800900a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800900e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009012:	bfd8      	it	le
 8009014:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009018:	464b      	mov	r3, r9
 800901a:	4622      	mov	r2, r4
 800901c:	4659      	mov	r1, fp
 800901e:	f7f7 fc39 	bl	8000894 <__aeabi_ddiv>
 8009022:	b005      	add	sp, #20
 8009024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009028 <__copybits>:
 8009028:	3901      	subs	r1, #1
 800902a:	b570      	push	{r4, r5, r6, lr}
 800902c:	1149      	asrs	r1, r1, #5
 800902e:	6914      	ldr	r4, [r2, #16]
 8009030:	3101      	adds	r1, #1
 8009032:	f102 0314 	add.w	r3, r2, #20
 8009036:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800903a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800903e:	1f05      	subs	r5, r0, #4
 8009040:	42a3      	cmp	r3, r4
 8009042:	d30c      	bcc.n	800905e <__copybits+0x36>
 8009044:	1aa3      	subs	r3, r4, r2
 8009046:	3b11      	subs	r3, #17
 8009048:	f023 0303 	bic.w	r3, r3, #3
 800904c:	3211      	adds	r2, #17
 800904e:	42a2      	cmp	r2, r4
 8009050:	bf88      	it	hi
 8009052:	2300      	movhi	r3, #0
 8009054:	4418      	add	r0, r3
 8009056:	2300      	movs	r3, #0
 8009058:	4288      	cmp	r0, r1
 800905a:	d305      	bcc.n	8009068 <__copybits+0x40>
 800905c:	bd70      	pop	{r4, r5, r6, pc}
 800905e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009062:	f845 6f04 	str.w	r6, [r5, #4]!
 8009066:	e7eb      	b.n	8009040 <__copybits+0x18>
 8009068:	f840 3b04 	str.w	r3, [r0], #4
 800906c:	e7f4      	b.n	8009058 <__copybits+0x30>

0800906e <__any_on>:
 800906e:	f100 0214 	add.w	r2, r0, #20
 8009072:	6900      	ldr	r0, [r0, #16]
 8009074:	114b      	asrs	r3, r1, #5
 8009076:	4298      	cmp	r0, r3
 8009078:	b510      	push	{r4, lr}
 800907a:	db11      	blt.n	80090a0 <__any_on+0x32>
 800907c:	dd0a      	ble.n	8009094 <__any_on+0x26>
 800907e:	f011 011f 	ands.w	r1, r1, #31
 8009082:	d007      	beq.n	8009094 <__any_on+0x26>
 8009084:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009088:	fa24 f001 	lsr.w	r0, r4, r1
 800908c:	fa00 f101 	lsl.w	r1, r0, r1
 8009090:	428c      	cmp	r4, r1
 8009092:	d10b      	bne.n	80090ac <__any_on+0x3e>
 8009094:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009098:	4293      	cmp	r3, r2
 800909a:	d803      	bhi.n	80090a4 <__any_on+0x36>
 800909c:	2000      	movs	r0, #0
 800909e:	bd10      	pop	{r4, pc}
 80090a0:	4603      	mov	r3, r0
 80090a2:	e7f7      	b.n	8009094 <__any_on+0x26>
 80090a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090a8:	2900      	cmp	r1, #0
 80090aa:	d0f5      	beq.n	8009098 <__any_on+0x2a>
 80090ac:	2001      	movs	r0, #1
 80090ae:	e7f6      	b.n	800909e <__any_on+0x30>

080090b0 <sulp>:
 80090b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b4:	460f      	mov	r7, r1
 80090b6:	4690      	mov	r8, r2
 80090b8:	f7ff fec6 	bl	8008e48 <__ulp>
 80090bc:	4604      	mov	r4, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	f1b8 0f00 	cmp.w	r8, #0
 80090c4:	d011      	beq.n	80090ea <sulp+0x3a>
 80090c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80090ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dd0b      	ble.n	80090ea <sulp+0x3a>
 80090d2:	2400      	movs	r4, #0
 80090d4:	051b      	lsls	r3, r3, #20
 80090d6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80090da:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80090de:	4622      	mov	r2, r4
 80090e0:	462b      	mov	r3, r5
 80090e2:	f7f7 faad 	bl	8000640 <__aeabi_dmul>
 80090e6:	4604      	mov	r4, r0
 80090e8:	460d      	mov	r5, r1
 80090ea:	4620      	mov	r0, r4
 80090ec:	4629      	mov	r1, r5
 80090ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f2:	0000      	movs	r0, r0
 80090f4:	0000      	movs	r0, r0
	...

080090f8 <_strtod_l>:
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	b09f      	sub	sp, #124	@ 0x7c
 80090fe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009100:	2200      	movs	r2, #0
 8009102:	460c      	mov	r4, r1
 8009104:	921a      	str	r2, [sp, #104]	@ 0x68
 8009106:	f04f 0a00 	mov.w	sl, #0
 800910a:	f04f 0b00 	mov.w	fp, #0
 800910e:	460a      	mov	r2, r1
 8009110:	9005      	str	r0, [sp, #20]
 8009112:	9219      	str	r2, [sp, #100]	@ 0x64
 8009114:	7811      	ldrb	r1, [r2, #0]
 8009116:	292b      	cmp	r1, #43	@ 0x2b
 8009118:	d048      	beq.n	80091ac <_strtod_l+0xb4>
 800911a:	d836      	bhi.n	800918a <_strtod_l+0x92>
 800911c:	290d      	cmp	r1, #13
 800911e:	d830      	bhi.n	8009182 <_strtod_l+0x8a>
 8009120:	2908      	cmp	r1, #8
 8009122:	d830      	bhi.n	8009186 <_strtod_l+0x8e>
 8009124:	2900      	cmp	r1, #0
 8009126:	d039      	beq.n	800919c <_strtod_l+0xa4>
 8009128:	2200      	movs	r2, #0
 800912a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800912c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800912e:	782a      	ldrb	r2, [r5, #0]
 8009130:	2a30      	cmp	r2, #48	@ 0x30
 8009132:	f040 80b1 	bne.w	8009298 <_strtod_l+0x1a0>
 8009136:	786a      	ldrb	r2, [r5, #1]
 8009138:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800913c:	2a58      	cmp	r2, #88	@ 0x58
 800913e:	d16c      	bne.n	800921a <_strtod_l+0x122>
 8009140:	9302      	str	r3, [sp, #8]
 8009142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009144:	4a8e      	ldr	r2, [pc, #568]	@ (8009380 <_strtod_l+0x288>)
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	ab1a      	add	r3, sp, #104	@ 0x68
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	9805      	ldr	r0, [sp, #20]
 800914e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009150:	a919      	add	r1, sp, #100	@ 0x64
 8009152:	f001 f887 	bl	800a264 <__gethex>
 8009156:	f010 060f 	ands.w	r6, r0, #15
 800915a:	4604      	mov	r4, r0
 800915c:	d005      	beq.n	800916a <_strtod_l+0x72>
 800915e:	2e06      	cmp	r6, #6
 8009160:	d126      	bne.n	80091b0 <_strtod_l+0xb8>
 8009162:	2300      	movs	r3, #0
 8009164:	3501      	adds	r5, #1
 8009166:	9519      	str	r5, [sp, #100]	@ 0x64
 8009168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800916a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800916c:	2b00      	cmp	r3, #0
 800916e:	f040 8584 	bne.w	8009c7a <_strtod_l+0xb82>
 8009172:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009174:	b1bb      	cbz	r3, 80091a6 <_strtod_l+0xae>
 8009176:	4650      	mov	r0, sl
 8009178:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800917c:	b01f      	add	sp, #124	@ 0x7c
 800917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009182:	2920      	cmp	r1, #32
 8009184:	d1d0      	bne.n	8009128 <_strtod_l+0x30>
 8009186:	3201      	adds	r2, #1
 8009188:	e7c3      	b.n	8009112 <_strtod_l+0x1a>
 800918a:	292d      	cmp	r1, #45	@ 0x2d
 800918c:	d1cc      	bne.n	8009128 <_strtod_l+0x30>
 800918e:	2101      	movs	r1, #1
 8009190:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009192:	1c51      	adds	r1, r2, #1
 8009194:	9119      	str	r1, [sp, #100]	@ 0x64
 8009196:	7852      	ldrb	r2, [r2, #1]
 8009198:	2a00      	cmp	r2, #0
 800919a:	d1c7      	bne.n	800912c <_strtod_l+0x34>
 800919c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800919e:	9419      	str	r4, [sp, #100]	@ 0x64
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f040 8568 	bne.w	8009c76 <_strtod_l+0xb7e>
 80091a6:	4650      	mov	r0, sl
 80091a8:	4659      	mov	r1, fp
 80091aa:	e7e7      	b.n	800917c <_strtod_l+0x84>
 80091ac:	2100      	movs	r1, #0
 80091ae:	e7ef      	b.n	8009190 <_strtod_l+0x98>
 80091b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091b2:	b13a      	cbz	r2, 80091c4 <_strtod_l+0xcc>
 80091b4:	2135      	movs	r1, #53	@ 0x35
 80091b6:	a81c      	add	r0, sp, #112	@ 0x70
 80091b8:	f7ff ff36 	bl	8009028 <__copybits>
 80091bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091be:	9805      	ldr	r0, [sp, #20]
 80091c0:	f7ff fb10 	bl	80087e4 <_Bfree>
 80091c4:	3e01      	subs	r6, #1
 80091c6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80091c8:	2e04      	cmp	r6, #4
 80091ca:	d806      	bhi.n	80091da <_strtod_l+0xe2>
 80091cc:	e8df f006 	tbb	[pc, r6]
 80091d0:	201d0314 	.word	0x201d0314
 80091d4:	14          	.byte	0x14
 80091d5:	00          	.byte	0x00
 80091d6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80091da:	05e1      	lsls	r1, r4, #23
 80091dc:	bf48      	it	mi
 80091de:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80091e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091e6:	0d1b      	lsrs	r3, r3, #20
 80091e8:	051b      	lsls	r3, r3, #20
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1bd      	bne.n	800916a <_strtod_l+0x72>
 80091ee:	f7fe faf7 	bl	80077e0 <__errno>
 80091f2:	2322      	movs	r3, #34	@ 0x22
 80091f4:	6003      	str	r3, [r0, #0]
 80091f6:	e7b8      	b.n	800916a <_strtod_l+0x72>
 80091f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80091fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009200:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009204:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009208:	e7e7      	b.n	80091da <_strtod_l+0xe2>
 800920a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009384 <_strtod_l+0x28c>
 800920e:	e7e4      	b.n	80091da <_strtod_l+0xe2>
 8009210:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009214:	f04f 3aff 	mov.w	sl, #4294967295
 8009218:	e7df      	b.n	80091da <_strtod_l+0xe2>
 800921a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009220:	785b      	ldrb	r3, [r3, #1]
 8009222:	2b30      	cmp	r3, #48	@ 0x30
 8009224:	d0f9      	beq.n	800921a <_strtod_l+0x122>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d09f      	beq.n	800916a <_strtod_l+0x72>
 800922a:	2301      	movs	r3, #1
 800922c:	9309      	str	r3, [sp, #36]	@ 0x24
 800922e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009230:	220a      	movs	r2, #10
 8009232:	930c      	str	r3, [sp, #48]	@ 0x30
 8009234:	2300      	movs	r3, #0
 8009236:	461f      	mov	r7, r3
 8009238:	9308      	str	r3, [sp, #32]
 800923a:	930a      	str	r3, [sp, #40]	@ 0x28
 800923c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800923e:	7805      	ldrb	r5, [r0, #0]
 8009240:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009244:	b2d9      	uxtb	r1, r3
 8009246:	2909      	cmp	r1, #9
 8009248:	d928      	bls.n	800929c <_strtod_l+0x1a4>
 800924a:	2201      	movs	r2, #1
 800924c:	494e      	ldr	r1, [pc, #312]	@ (8009388 <_strtod_l+0x290>)
 800924e:	f000 ff5d 	bl	800a10c <strncmp>
 8009252:	2800      	cmp	r0, #0
 8009254:	d032      	beq.n	80092bc <_strtod_l+0x1c4>
 8009256:	2000      	movs	r0, #0
 8009258:	462a      	mov	r2, r5
 800925a:	4681      	mov	r9, r0
 800925c:	463d      	mov	r5, r7
 800925e:	4603      	mov	r3, r0
 8009260:	2a65      	cmp	r2, #101	@ 0x65
 8009262:	d001      	beq.n	8009268 <_strtod_l+0x170>
 8009264:	2a45      	cmp	r2, #69	@ 0x45
 8009266:	d114      	bne.n	8009292 <_strtod_l+0x19a>
 8009268:	b91d      	cbnz	r5, 8009272 <_strtod_l+0x17a>
 800926a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800926c:	4302      	orrs	r2, r0
 800926e:	d095      	beq.n	800919c <_strtod_l+0xa4>
 8009270:	2500      	movs	r5, #0
 8009272:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009274:	1c62      	adds	r2, r4, #1
 8009276:	9219      	str	r2, [sp, #100]	@ 0x64
 8009278:	7862      	ldrb	r2, [r4, #1]
 800927a:	2a2b      	cmp	r2, #43	@ 0x2b
 800927c:	d077      	beq.n	800936e <_strtod_l+0x276>
 800927e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009280:	d07b      	beq.n	800937a <_strtod_l+0x282>
 8009282:	f04f 0c00 	mov.w	ip, #0
 8009286:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800928a:	2909      	cmp	r1, #9
 800928c:	f240 8082 	bls.w	8009394 <_strtod_l+0x29c>
 8009290:	9419      	str	r4, [sp, #100]	@ 0x64
 8009292:	f04f 0800 	mov.w	r8, #0
 8009296:	e0a2      	b.n	80093de <_strtod_l+0x2e6>
 8009298:	2300      	movs	r3, #0
 800929a:	e7c7      	b.n	800922c <_strtod_l+0x134>
 800929c:	2f08      	cmp	r7, #8
 800929e:	bfd5      	itete	le
 80092a0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80092a2:	9908      	ldrgt	r1, [sp, #32]
 80092a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80092a8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80092ac:	f100 0001 	add.w	r0, r0, #1
 80092b0:	bfd4      	ite	le
 80092b2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80092b4:	9308      	strgt	r3, [sp, #32]
 80092b6:	3701      	adds	r7, #1
 80092b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80092ba:	e7bf      	b.n	800923c <_strtod_l+0x144>
 80092bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80092c2:	785a      	ldrb	r2, [r3, #1]
 80092c4:	b37f      	cbz	r7, 8009326 <_strtod_l+0x22e>
 80092c6:	4681      	mov	r9, r0
 80092c8:	463d      	mov	r5, r7
 80092ca:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80092ce:	2b09      	cmp	r3, #9
 80092d0:	d912      	bls.n	80092f8 <_strtod_l+0x200>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e7c4      	b.n	8009260 <_strtod_l+0x168>
 80092d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092d8:	3001      	adds	r0, #1
 80092da:	1c5a      	adds	r2, r3, #1
 80092dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80092de:	785a      	ldrb	r2, [r3, #1]
 80092e0:	2a30      	cmp	r2, #48	@ 0x30
 80092e2:	d0f8      	beq.n	80092d6 <_strtod_l+0x1de>
 80092e4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80092e8:	2b08      	cmp	r3, #8
 80092ea:	f200 84cb 	bhi.w	8009c84 <_strtod_l+0xb8c>
 80092ee:	4681      	mov	r9, r0
 80092f0:	2000      	movs	r0, #0
 80092f2:	4605      	mov	r5, r0
 80092f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80092f8:	3a30      	subs	r2, #48	@ 0x30
 80092fa:	f100 0301 	add.w	r3, r0, #1
 80092fe:	d02a      	beq.n	8009356 <_strtod_l+0x25e>
 8009300:	4499      	add	r9, r3
 8009302:	210a      	movs	r1, #10
 8009304:	462b      	mov	r3, r5
 8009306:	eb00 0c05 	add.w	ip, r0, r5
 800930a:	4563      	cmp	r3, ip
 800930c:	d10d      	bne.n	800932a <_strtod_l+0x232>
 800930e:	1c69      	adds	r1, r5, #1
 8009310:	4401      	add	r1, r0
 8009312:	4428      	add	r0, r5
 8009314:	2808      	cmp	r0, #8
 8009316:	dc16      	bgt.n	8009346 <_strtod_l+0x24e>
 8009318:	230a      	movs	r3, #10
 800931a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800931c:	fb03 2300 	mla	r3, r3, r0, r2
 8009320:	930a      	str	r3, [sp, #40]	@ 0x28
 8009322:	2300      	movs	r3, #0
 8009324:	e018      	b.n	8009358 <_strtod_l+0x260>
 8009326:	4638      	mov	r0, r7
 8009328:	e7da      	b.n	80092e0 <_strtod_l+0x1e8>
 800932a:	2b08      	cmp	r3, #8
 800932c:	f103 0301 	add.w	r3, r3, #1
 8009330:	dc03      	bgt.n	800933a <_strtod_l+0x242>
 8009332:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009334:	434e      	muls	r6, r1
 8009336:	960a      	str	r6, [sp, #40]	@ 0x28
 8009338:	e7e7      	b.n	800930a <_strtod_l+0x212>
 800933a:	2b10      	cmp	r3, #16
 800933c:	bfde      	ittt	le
 800933e:	9e08      	ldrle	r6, [sp, #32]
 8009340:	434e      	mulle	r6, r1
 8009342:	9608      	strle	r6, [sp, #32]
 8009344:	e7e1      	b.n	800930a <_strtod_l+0x212>
 8009346:	280f      	cmp	r0, #15
 8009348:	dceb      	bgt.n	8009322 <_strtod_l+0x22a>
 800934a:	230a      	movs	r3, #10
 800934c:	9808      	ldr	r0, [sp, #32]
 800934e:	fb03 2300 	mla	r3, r3, r0, r2
 8009352:	9308      	str	r3, [sp, #32]
 8009354:	e7e5      	b.n	8009322 <_strtod_l+0x22a>
 8009356:	4629      	mov	r1, r5
 8009358:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800935a:	460d      	mov	r5, r1
 800935c:	1c50      	adds	r0, r2, #1
 800935e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009360:	7852      	ldrb	r2, [r2, #1]
 8009362:	4618      	mov	r0, r3
 8009364:	e7b1      	b.n	80092ca <_strtod_l+0x1d2>
 8009366:	f04f 0900 	mov.w	r9, #0
 800936a:	2301      	movs	r3, #1
 800936c:	e77d      	b.n	800926a <_strtod_l+0x172>
 800936e:	f04f 0c00 	mov.w	ip, #0
 8009372:	1ca2      	adds	r2, r4, #2
 8009374:	9219      	str	r2, [sp, #100]	@ 0x64
 8009376:	78a2      	ldrb	r2, [r4, #2]
 8009378:	e785      	b.n	8009286 <_strtod_l+0x18e>
 800937a:	f04f 0c01 	mov.w	ip, #1
 800937e:	e7f8      	b.n	8009372 <_strtod_l+0x27a>
 8009380:	0800d128 	.word	0x0800d128
 8009384:	7ff00000 	.word	0x7ff00000
 8009388:	0800d110 	.word	0x0800d110
 800938c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800938e:	1c51      	adds	r1, r2, #1
 8009390:	9119      	str	r1, [sp, #100]	@ 0x64
 8009392:	7852      	ldrb	r2, [r2, #1]
 8009394:	2a30      	cmp	r2, #48	@ 0x30
 8009396:	d0f9      	beq.n	800938c <_strtod_l+0x294>
 8009398:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800939c:	2908      	cmp	r1, #8
 800939e:	f63f af78 	bhi.w	8009292 <_strtod_l+0x19a>
 80093a2:	f04f 080a 	mov.w	r8, #10
 80093a6:	3a30      	subs	r2, #48	@ 0x30
 80093a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80093aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80093ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093b0:	1c56      	adds	r6, r2, #1
 80093b2:	9619      	str	r6, [sp, #100]	@ 0x64
 80093b4:	7852      	ldrb	r2, [r2, #1]
 80093b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80093ba:	f1be 0f09 	cmp.w	lr, #9
 80093be:	d939      	bls.n	8009434 <_strtod_l+0x33c>
 80093c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80093c6:	1a76      	subs	r6, r6, r1
 80093c8:	2e08      	cmp	r6, #8
 80093ca:	dc03      	bgt.n	80093d4 <_strtod_l+0x2dc>
 80093cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80093ce:	4588      	cmp	r8, r1
 80093d0:	bfa8      	it	ge
 80093d2:	4688      	movge	r8, r1
 80093d4:	f1bc 0f00 	cmp.w	ip, #0
 80093d8:	d001      	beq.n	80093de <_strtod_l+0x2e6>
 80093da:	f1c8 0800 	rsb	r8, r8, #0
 80093de:	2d00      	cmp	r5, #0
 80093e0:	d14e      	bne.n	8009480 <_strtod_l+0x388>
 80093e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093e4:	4308      	orrs	r0, r1
 80093e6:	f47f aec0 	bne.w	800916a <_strtod_l+0x72>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f47f aed6 	bne.w	800919c <_strtod_l+0xa4>
 80093f0:	2a69      	cmp	r2, #105	@ 0x69
 80093f2:	d028      	beq.n	8009446 <_strtod_l+0x34e>
 80093f4:	dc25      	bgt.n	8009442 <_strtod_l+0x34a>
 80093f6:	2a49      	cmp	r2, #73	@ 0x49
 80093f8:	d025      	beq.n	8009446 <_strtod_l+0x34e>
 80093fa:	2a4e      	cmp	r2, #78	@ 0x4e
 80093fc:	f47f aece 	bne.w	800919c <_strtod_l+0xa4>
 8009400:	499a      	ldr	r1, [pc, #616]	@ (800966c <_strtod_l+0x574>)
 8009402:	a819      	add	r0, sp, #100	@ 0x64
 8009404:	f001 f950 	bl	800a6a8 <__match>
 8009408:	2800      	cmp	r0, #0
 800940a:	f43f aec7 	beq.w	800919c <_strtod_l+0xa4>
 800940e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b28      	cmp	r3, #40	@ 0x28
 8009414:	d12e      	bne.n	8009474 <_strtod_l+0x37c>
 8009416:	4996      	ldr	r1, [pc, #600]	@ (8009670 <_strtod_l+0x578>)
 8009418:	aa1c      	add	r2, sp, #112	@ 0x70
 800941a:	a819      	add	r0, sp, #100	@ 0x64
 800941c:	f001 f958 	bl	800a6d0 <__hexnan>
 8009420:	2805      	cmp	r0, #5
 8009422:	d127      	bne.n	8009474 <_strtod_l+0x37c>
 8009424:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009426:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800942a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800942e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009432:	e69a      	b.n	800916a <_strtod_l+0x72>
 8009434:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009436:	fb08 2101 	mla	r1, r8, r1, r2
 800943a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800943e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009440:	e7b5      	b.n	80093ae <_strtod_l+0x2b6>
 8009442:	2a6e      	cmp	r2, #110	@ 0x6e
 8009444:	e7da      	b.n	80093fc <_strtod_l+0x304>
 8009446:	498b      	ldr	r1, [pc, #556]	@ (8009674 <_strtod_l+0x57c>)
 8009448:	a819      	add	r0, sp, #100	@ 0x64
 800944a:	f001 f92d 	bl	800a6a8 <__match>
 800944e:	2800      	cmp	r0, #0
 8009450:	f43f aea4 	beq.w	800919c <_strtod_l+0xa4>
 8009454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009456:	4988      	ldr	r1, [pc, #544]	@ (8009678 <_strtod_l+0x580>)
 8009458:	3b01      	subs	r3, #1
 800945a:	a819      	add	r0, sp, #100	@ 0x64
 800945c:	9319      	str	r3, [sp, #100]	@ 0x64
 800945e:	f001 f923 	bl	800a6a8 <__match>
 8009462:	b910      	cbnz	r0, 800946a <_strtod_l+0x372>
 8009464:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009466:	3301      	adds	r3, #1
 8009468:	9319      	str	r3, [sp, #100]	@ 0x64
 800946a:	f04f 0a00 	mov.w	sl, #0
 800946e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800967c <_strtod_l+0x584>
 8009472:	e67a      	b.n	800916a <_strtod_l+0x72>
 8009474:	4882      	ldr	r0, [pc, #520]	@ (8009680 <_strtod_l+0x588>)
 8009476:	f000 fe6b 	bl	800a150 <nan>
 800947a:	4682      	mov	sl, r0
 800947c:	468b      	mov	fp, r1
 800947e:	e674      	b.n	800916a <_strtod_l+0x72>
 8009480:	eba8 0309 	sub.w	r3, r8, r9
 8009484:	2f00      	cmp	r7, #0
 8009486:	bf08      	it	eq
 8009488:	462f      	moveq	r7, r5
 800948a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800948c:	2d10      	cmp	r5, #16
 800948e:	462c      	mov	r4, r5
 8009490:	9309      	str	r3, [sp, #36]	@ 0x24
 8009492:	bfa8      	it	ge
 8009494:	2410      	movge	r4, #16
 8009496:	f7f7 f859 	bl	800054c <__aeabi_ui2d>
 800949a:	2d09      	cmp	r5, #9
 800949c:	4682      	mov	sl, r0
 800949e:	468b      	mov	fp, r1
 80094a0:	dc11      	bgt.n	80094c6 <_strtod_l+0x3ce>
 80094a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f43f ae60 	beq.w	800916a <_strtod_l+0x72>
 80094aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ac:	dd76      	ble.n	800959c <_strtod_l+0x4a4>
 80094ae:	2b16      	cmp	r3, #22
 80094b0:	dc5d      	bgt.n	800956e <_strtod_l+0x476>
 80094b2:	4974      	ldr	r1, [pc, #464]	@ (8009684 <_strtod_l+0x58c>)
 80094b4:	4652      	mov	r2, sl
 80094b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094ba:	465b      	mov	r3, fp
 80094bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094c0:	f7f7 f8be 	bl	8000640 <__aeabi_dmul>
 80094c4:	e7d9      	b.n	800947a <_strtod_l+0x382>
 80094c6:	4b6f      	ldr	r3, [pc, #444]	@ (8009684 <_strtod_l+0x58c>)
 80094c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80094d0:	f7f7 f8b6 	bl	8000640 <__aeabi_dmul>
 80094d4:	4682      	mov	sl, r0
 80094d6:	9808      	ldr	r0, [sp, #32]
 80094d8:	468b      	mov	fp, r1
 80094da:	f7f7 f837 	bl	800054c <__aeabi_ui2d>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4650      	mov	r0, sl
 80094e4:	4659      	mov	r1, fp
 80094e6:	f7f6 fef5 	bl	80002d4 <__adddf3>
 80094ea:	2d0f      	cmp	r5, #15
 80094ec:	4682      	mov	sl, r0
 80094ee:	468b      	mov	fp, r1
 80094f0:	ddd7      	ble.n	80094a2 <_strtod_l+0x3aa>
 80094f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f4:	1b2c      	subs	r4, r5, r4
 80094f6:	441c      	add	r4, r3
 80094f8:	2c00      	cmp	r4, #0
 80094fa:	f340 8096 	ble.w	800962a <_strtod_l+0x532>
 80094fe:	f014 030f 	ands.w	r3, r4, #15
 8009502:	d00a      	beq.n	800951a <_strtod_l+0x422>
 8009504:	495f      	ldr	r1, [pc, #380]	@ (8009684 <_strtod_l+0x58c>)
 8009506:	4652      	mov	r2, sl
 8009508:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800950c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009510:	465b      	mov	r3, fp
 8009512:	f7f7 f895 	bl	8000640 <__aeabi_dmul>
 8009516:	4682      	mov	sl, r0
 8009518:	468b      	mov	fp, r1
 800951a:	f034 040f 	bics.w	r4, r4, #15
 800951e:	d073      	beq.n	8009608 <_strtod_l+0x510>
 8009520:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009524:	dd48      	ble.n	80095b8 <_strtod_l+0x4c0>
 8009526:	2400      	movs	r4, #0
 8009528:	46a0      	mov	r8, r4
 800952a:	46a1      	mov	r9, r4
 800952c:	940a      	str	r4, [sp, #40]	@ 0x28
 800952e:	2322      	movs	r3, #34	@ 0x22
 8009530:	f04f 0a00 	mov.w	sl, #0
 8009534:	9a05      	ldr	r2, [sp, #20]
 8009536:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800967c <_strtod_l+0x584>
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	f43f ae13 	beq.w	800916a <_strtod_l+0x72>
 8009544:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009546:	9805      	ldr	r0, [sp, #20]
 8009548:	f7ff f94c 	bl	80087e4 <_Bfree>
 800954c:	4649      	mov	r1, r9
 800954e:	9805      	ldr	r0, [sp, #20]
 8009550:	f7ff f948 	bl	80087e4 <_Bfree>
 8009554:	4641      	mov	r1, r8
 8009556:	9805      	ldr	r0, [sp, #20]
 8009558:	f7ff f944 	bl	80087e4 <_Bfree>
 800955c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800955e:	9805      	ldr	r0, [sp, #20]
 8009560:	f7ff f940 	bl	80087e4 <_Bfree>
 8009564:	4621      	mov	r1, r4
 8009566:	9805      	ldr	r0, [sp, #20]
 8009568:	f7ff f93c 	bl	80087e4 <_Bfree>
 800956c:	e5fd      	b.n	800916a <_strtod_l+0x72>
 800956e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009570:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009574:	4293      	cmp	r3, r2
 8009576:	dbbc      	blt.n	80094f2 <_strtod_l+0x3fa>
 8009578:	4c42      	ldr	r4, [pc, #264]	@ (8009684 <_strtod_l+0x58c>)
 800957a:	f1c5 050f 	rsb	r5, r5, #15
 800957e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009582:	4652      	mov	r2, sl
 8009584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009588:	465b      	mov	r3, fp
 800958a:	f7f7 f859 	bl	8000640 <__aeabi_dmul>
 800958e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009590:	1b5d      	subs	r5, r3, r5
 8009592:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009596:	e9d4 2300 	ldrd	r2, r3, [r4]
 800959a:	e791      	b.n	80094c0 <_strtod_l+0x3c8>
 800959c:	3316      	adds	r3, #22
 800959e:	dba8      	blt.n	80094f2 <_strtod_l+0x3fa>
 80095a0:	4b38      	ldr	r3, [pc, #224]	@ (8009684 <_strtod_l+0x58c>)
 80095a2:	eba9 0808 	sub.w	r8, r9, r8
 80095a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80095aa:	4650      	mov	r0, sl
 80095ac:	e9d8 2300 	ldrd	r2, r3, [r8]
 80095b0:	4659      	mov	r1, fp
 80095b2:	f7f7 f96f 	bl	8000894 <__aeabi_ddiv>
 80095b6:	e760      	b.n	800947a <_strtod_l+0x382>
 80095b8:	4b33      	ldr	r3, [pc, #204]	@ (8009688 <_strtod_l+0x590>)
 80095ba:	4650      	mov	r0, sl
 80095bc:	9308      	str	r3, [sp, #32]
 80095be:	2300      	movs	r3, #0
 80095c0:	4659      	mov	r1, fp
 80095c2:	461e      	mov	r6, r3
 80095c4:	1124      	asrs	r4, r4, #4
 80095c6:	2c01      	cmp	r4, #1
 80095c8:	dc21      	bgt.n	800960e <_strtod_l+0x516>
 80095ca:	b10b      	cbz	r3, 80095d0 <_strtod_l+0x4d8>
 80095cc:	4682      	mov	sl, r0
 80095ce:	468b      	mov	fp, r1
 80095d0:	492d      	ldr	r1, [pc, #180]	@ (8009688 <_strtod_l+0x590>)
 80095d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80095d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80095da:	4652      	mov	r2, sl
 80095dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e0:	465b      	mov	r3, fp
 80095e2:	f7f7 f82d 	bl	8000640 <__aeabi_dmul>
 80095e6:	4b25      	ldr	r3, [pc, #148]	@ (800967c <_strtod_l+0x584>)
 80095e8:	460a      	mov	r2, r1
 80095ea:	400b      	ands	r3, r1
 80095ec:	4927      	ldr	r1, [pc, #156]	@ (800968c <_strtod_l+0x594>)
 80095ee:	4682      	mov	sl, r0
 80095f0:	428b      	cmp	r3, r1
 80095f2:	d898      	bhi.n	8009526 <_strtod_l+0x42e>
 80095f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80095f8:	428b      	cmp	r3, r1
 80095fa:	bf86      	itte	hi
 80095fc:	f04f 3aff 	movhi.w	sl, #4294967295
 8009600:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009690 <_strtod_l+0x598>
 8009604:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009608:	2300      	movs	r3, #0
 800960a:	9308      	str	r3, [sp, #32]
 800960c:	e07a      	b.n	8009704 <_strtod_l+0x60c>
 800960e:	07e2      	lsls	r2, r4, #31
 8009610:	d505      	bpl.n	800961e <_strtod_l+0x526>
 8009612:	9b08      	ldr	r3, [sp, #32]
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f7 f812 	bl	8000640 <__aeabi_dmul>
 800961c:	2301      	movs	r3, #1
 800961e:	9a08      	ldr	r2, [sp, #32]
 8009620:	3601      	adds	r6, #1
 8009622:	3208      	adds	r2, #8
 8009624:	1064      	asrs	r4, r4, #1
 8009626:	9208      	str	r2, [sp, #32]
 8009628:	e7cd      	b.n	80095c6 <_strtod_l+0x4ce>
 800962a:	d0ed      	beq.n	8009608 <_strtod_l+0x510>
 800962c:	4264      	negs	r4, r4
 800962e:	f014 020f 	ands.w	r2, r4, #15
 8009632:	d00a      	beq.n	800964a <_strtod_l+0x552>
 8009634:	4b13      	ldr	r3, [pc, #76]	@ (8009684 <_strtod_l+0x58c>)
 8009636:	4650      	mov	r0, sl
 8009638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800963c:	4659      	mov	r1, fp
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	f7f7 f927 	bl	8000894 <__aeabi_ddiv>
 8009646:	4682      	mov	sl, r0
 8009648:	468b      	mov	fp, r1
 800964a:	1124      	asrs	r4, r4, #4
 800964c:	d0dc      	beq.n	8009608 <_strtod_l+0x510>
 800964e:	2c1f      	cmp	r4, #31
 8009650:	dd20      	ble.n	8009694 <_strtod_l+0x59c>
 8009652:	2400      	movs	r4, #0
 8009654:	46a0      	mov	r8, r4
 8009656:	46a1      	mov	r9, r4
 8009658:	940a      	str	r4, [sp, #40]	@ 0x28
 800965a:	2322      	movs	r3, #34	@ 0x22
 800965c:	9a05      	ldr	r2, [sp, #20]
 800965e:	f04f 0a00 	mov.w	sl, #0
 8009662:	f04f 0b00 	mov.w	fp, #0
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	e768      	b.n	800953c <_strtod_l+0x444>
 800966a:	bf00      	nop
 800966c:	0800ce6a 	.word	0x0800ce6a
 8009670:	0800d114 	.word	0x0800d114
 8009674:	0800ce62 	.word	0x0800ce62
 8009678:	0800cf46 	.word	0x0800cf46
 800967c:	7ff00000 	.word	0x7ff00000
 8009680:	0800cf42 	.word	0x0800cf42
 8009684:	0800d048 	.word	0x0800d048
 8009688:	0800d020 	.word	0x0800d020
 800968c:	7ca00000 	.word	0x7ca00000
 8009690:	7fefffff 	.word	0x7fefffff
 8009694:	f014 0310 	ands.w	r3, r4, #16
 8009698:	bf18      	it	ne
 800969a:	236a      	movne	r3, #106	@ 0x6a
 800969c:	4650      	mov	r0, sl
 800969e:	9308      	str	r3, [sp, #32]
 80096a0:	4659      	mov	r1, fp
 80096a2:	2300      	movs	r3, #0
 80096a4:	4ea9      	ldr	r6, [pc, #676]	@ (800994c <_strtod_l+0x854>)
 80096a6:	07e2      	lsls	r2, r4, #31
 80096a8:	d504      	bpl.n	80096b4 <_strtod_l+0x5bc>
 80096aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096ae:	f7f6 ffc7 	bl	8000640 <__aeabi_dmul>
 80096b2:	2301      	movs	r3, #1
 80096b4:	1064      	asrs	r4, r4, #1
 80096b6:	f106 0608 	add.w	r6, r6, #8
 80096ba:	d1f4      	bne.n	80096a6 <_strtod_l+0x5ae>
 80096bc:	b10b      	cbz	r3, 80096c2 <_strtod_l+0x5ca>
 80096be:	4682      	mov	sl, r0
 80096c0:	468b      	mov	fp, r1
 80096c2:	9b08      	ldr	r3, [sp, #32]
 80096c4:	b1b3      	cbz	r3, 80096f4 <_strtod_l+0x5fc>
 80096c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80096ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	4659      	mov	r1, fp
 80096d2:	dd0f      	ble.n	80096f4 <_strtod_l+0x5fc>
 80096d4:	2b1f      	cmp	r3, #31
 80096d6:	dd57      	ble.n	8009788 <_strtod_l+0x690>
 80096d8:	2b34      	cmp	r3, #52	@ 0x34
 80096da:	bfd8      	it	le
 80096dc:	f04f 33ff 	movle.w	r3, #4294967295
 80096e0:	f04f 0a00 	mov.w	sl, #0
 80096e4:	bfcf      	iteee	gt
 80096e6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80096ea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80096ee:	4093      	lslle	r3, r2
 80096f0:	ea03 0b01 	andle.w	fp, r3, r1
 80096f4:	2200      	movs	r2, #0
 80096f6:	2300      	movs	r3, #0
 80096f8:	4650      	mov	r0, sl
 80096fa:	4659      	mov	r1, fp
 80096fc:	f7f7 fa08 	bl	8000b10 <__aeabi_dcmpeq>
 8009700:	2800      	cmp	r0, #0
 8009702:	d1a6      	bne.n	8009652 <_strtod_l+0x55a>
 8009704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009706:	463a      	mov	r2, r7
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800970c:	462b      	mov	r3, r5
 800970e:	9805      	ldr	r0, [sp, #20]
 8009710:	f7ff f8d0 	bl	80088b4 <__s2b>
 8009714:	900a      	str	r0, [sp, #40]	@ 0x28
 8009716:	2800      	cmp	r0, #0
 8009718:	f43f af05 	beq.w	8009526 <_strtod_l+0x42e>
 800971c:	2400      	movs	r4, #0
 800971e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009720:	eba9 0308 	sub.w	r3, r9, r8
 8009724:	2a00      	cmp	r2, #0
 8009726:	bfa8      	it	ge
 8009728:	2300      	movge	r3, #0
 800972a:	46a0      	mov	r8, r4
 800972c:	9312      	str	r3, [sp, #72]	@ 0x48
 800972e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009732:	9316      	str	r3, [sp, #88]	@ 0x58
 8009734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009736:	9805      	ldr	r0, [sp, #20]
 8009738:	6859      	ldr	r1, [r3, #4]
 800973a:	f7ff f813 	bl	8008764 <_Balloc>
 800973e:	4681      	mov	r9, r0
 8009740:	2800      	cmp	r0, #0
 8009742:	f43f aef4 	beq.w	800952e <_strtod_l+0x436>
 8009746:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009748:	300c      	adds	r0, #12
 800974a:	691a      	ldr	r2, [r3, #16]
 800974c:	f103 010c 	add.w	r1, r3, #12
 8009750:	3202      	adds	r2, #2
 8009752:	0092      	lsls	r2, r2, #2
 8009754:	f7fe f887 	bl	8007866 <memcpy>
 8009758:	ab1c      	add	r3, sp, #112	@ 0x70
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	4652      	mov	r2, sl
 8009762:	465b      	mov	r3, fp
 8009764:	9805      	ldr	r0, [sp, #20]
 8009766:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800976a:	f7ff fbd5 	bl	8008f18 <__d2b>
 800976e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009770:	2800      	cmp	r0, #0
 8009772:	f43f aedc 	beq.w	800952e <_strtod_l+0x436>
 8009776:	2101      	movs	r1, #1
 8009778:	9805      	ldr	r0, [sp, #20]
 800977a:	f7ff f931 	bl	80089e0 <__i2b>
 800977e:	4680      	mov	r8, r0
 8009780:	b948      	cbnz	r0, 8009796 <_strtod_l+0x69e>
 8009782:	f04f 0800 	mov.w	r8, #0
 8009786:	e6d2      	b.n	800952e <_strtod_l+0x436>
 8009788:	f04f 32ff 	mov.w	r2, #4294967295
 800978c:	fa02 f303 	lsl.w	r3, r2, r3
 8009790:	ea03 0a0a 	and.w	sl, r3, sl
 8009794:	e7ae      	b.n	80096f4 <_strtod_l+0x5fc>
 8009796:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009798:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800979a:	2d00      	cmp	r5, #0
 800979c:	bfab      	itete	ge
 800979e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80097a0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80097a2:	18ef      	addge	r7, r5, r3
 80097a4:	1b5e      	sublt	r6, r3, r5
 80097a6:	9b08      	ldr	r3, [sp, #32]
 80097a8:	bfa8      	it	ge
 80097aa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80097ac:	eba5 0503 	sub.w	r5, r5, r3
 80097b0:	4415      	add	r5, r2
 80097b2:	4b67      	ldr	r3, [pc, #412]	@ (8009950 <_strtod_l+0x858>)
 80097b4:	f105 35ff 	add.w	r5, r5, #4294967295
 80097b8:	bfb8      	it	lt
 80097ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80097bc:	429d      	cmp	r5, r3
 80097be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80097c2:	da50      	bge.n	8009866 <_strtod_l+0x76e>
 80097c4:	1b5b      	subs	r3, r3, r5
 80097c6:	2b1f      	cmp	r3, #31
 80097c8:	f04f 0101 	mov.w	r1, #1
 80097cc:	eba2 0203 	sub.w	r2, r2, r3
 80097d0:	dc3d      	bgt.n	800984e <_strtod_l+0x756>
 80097d2:	fa01 f303 	lsl.w	r3, r1, r3
 80097d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097d8:	2300      	movs	r3, #0
 80097da:	9310      	str	r3, [sp, #64]	@ 0x40
 80097dc:	18bd      	adds	r5, r7, r2
 80097de:	9b08      	ldr	r3, [sp, #32]
 80097e0:	42af      	cmp	r7, r5
 80097e2:	4416      	add	r6, r2
 80097e4:	441e      	add	r6, r3
 80097e6:	463b      	mov	r3, r7
 80097e8:	bfa8      	it	ge
 80097ea:	462b      	movge	r3, r5
 80097ec:	42b3      	cmp	r3, r6
 80097ee:	bfa8      	it	ge
 80097f0:	4633      	movge	r3, r6
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bfc2      	ittt	gt
 80097f6:	1aed      	subgt	r5, r5, r3
 80097f8:	1af6      	subgt	r6, r6, r3
 80097fa:	1aff      	subgt	r7, r7, r3
 80097fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dd16      	ble.n	8009830 <_strtod_l+0x738>
 8009802:	4641      	mov	r1, r8
 8009804:	461a      	mov	r2, r3
 8009806:	9805      	ldr	r0, [sp, #20]
 8009808:	f7ff f9a8 	bl	8008b5c <__pow5mult>
 800980c:	4680      	mov	r8, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	d0b7      	beq.n	8009782 <_strtod_l+0x68a>
 8009812:	4601      	mov	r1, r0
 8009814:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009816:	9805      	ldr	r0, [sp, #20]
 8009818:	f7ff f8f8 	bl	8008a0c <__multiply>
 800981c:	900e      	str	r0, [sp, #56]	@ 0x38
 800981e:	2800      	cmp	r0, #0
 8009820:	f43f ae85 	beq.w	800952e <_strtod_l+0x436>
 8009824:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009826:	9805      	ldr	r0, [sp, #20]
 8009828:	f7fe ffdc 	bl	80087e4 <_Bfree>
 800982c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800982e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009830:	2d00      	cmp	r5, #0
 8009832:	dc1d      	bgt.n	8009870 <_strtod_l+0x778>
 8009834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009836:	2b00      	cmp	r3, #0
 8009838:	dd23      	ble.n	8009882 <_strtod_l+0x78a>
 800983a:	4649      	mov	r1, r9
 800983c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800983e:	9805      	ldr	r0, [sp, #20]
 8009840:	f7ff f98c 	bl	8008b5c <__pow5mult>
 8009844:	4681      	mov	r9, r0
 8009846:	b9e0      	cbnz	r0, 8009882 <_strtod_l+0x78a>
 8009848:	f04f 0900 	mov.w	r9, #0
 800984c:	e66f      	b.n	800952e <_strtod_l+0x436>
 800984e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009852:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009856:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800985a:	35e2      	adds	r5, #226	@ 0xe2
 800985c:	fa01 f305 	lsl.w	r3, r1, r5
 8009860:	9310      	str	r3, [sp, #64]	@ 0x40
 8009862:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009864:	e7ba      	b.n	80097dc <_strtod_l+0x6e4>
 8009866:	2300      	movs	r3, #0
 8009868:	9310      	str	r3, [sp, #64]	@ 0x40
 800986a:	2301      	movs	r3, #1
 800986c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800986e:	e7b5      	b.n	80097dc <_strtod_l+0x6e4>
 8009870:	462a      	mov	r2, r5
 8009872:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009874:	9805      	ldr	r0, [sp, #20]
 8009876:	f7ff f9cb 	bl	8008c10 <__lshift>
 800987a:	901a      	str	r0, [sp, #104]	@ 0x68
 800987c:	2800      	cmp	r0, #0
 800987e:	d1d9      	bne.n	8009834 <_strtod_l+0x73c>
 8009880:	e655      	b.n	800952e <_strtod_l+0x436>
 8009882:	2e00      	cmp	r6, #0
 8009884:	dd07      	ble.n	8009896 <_strtod_l+0x79e>
 8009886:	4649      	mov	r1, r9
 8009888:	4632      	mov	r2, r6
 800988a:	9805      	ldr	r0, [sp, #20]
 800988c:	f7ff f9c0 	bl	8008c10 <__lshift>
 8009890:	4681      	mov	r9, r0
 8009892:	2800      	cmp	r0, #0
 8009894:	d0d8      	beq.n	8009848 <_strtod_l+0x750>
 8009896:	2f00      	cmp	r7, #0
 8009898:	dd08      	ble.n	80098ac <_strtod_l+0x7b4>
 800989a:	4641      	mov	r1, r8
 800989c:	463a      	mov	r2, r7
 800989e:	9805      	ldr	r0, [sp, #20]
 80098a0:	f7ff f9b6 	bl	8008c10 <__lshift>
 80098a4:	4680      	mov	r8, r0
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f43f ae41 	beq.w	800952e <_strtod_l+0x436>
 80098ac:	464a      	mov	r2, r9
 80098ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098b0:	9805      	ldr	r0, [sp, #20]
 80098b2:	f7ff fa35 	bl	8008d20 <__mdiff>
 80098b6:	4604      	mov	r4, r0
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f43f ae38 	beq.w	800952e <_strtod_l+0x436>
 80098be:	68c3      	ldr	r3, [r0, #12]
 80098c0:	4641      	mov	r1, r8
 80098c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098c4:	2300      	movs	r3, #0
 80098c6:	60c3      	str	r3, [r0, #12]
 80098c8:	f7ff fa0e 	bl	8008ce8 <__mcmp>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	da45      	bge.n	800995c <_strtod_l+0x864>
 80098d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098d2:	ea53 030a 	orrs.w	r3, r3, sl
 80098d6:	d16b      	bne.n	80099b0 <_strtod_l+0x8b8>
 80098d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d167      	bne.n	80099b0 <_strtod_l+0x8b8>
 80098e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098e4:	0d1b      	lsrs	r3, r3, #20
 80098e6:	051b      	lsls	r3, r3, #20
 80098e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80098ec:	d960      	bls.n	80099b0 <_strtod_l+0x8b8>
 80098ee:	6963      	ldr	r3, [r4, #20]
 80098f0:	b913      	cbnz	r3, 80098f8 <_strtod_l+0x800>
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	dd5b      	ble.n	80099b0 <_strtod_l+0x8b8>
 80098f8:	4621      	mov	r1, r4
 80098fa:	2201      	movs	r2, #1
 80098fc:	9805      	ldr	r0, [sp, #20]
 80098fe:	f7ff f987 	bl	8008c10 <__lshift>
 8009902:	4641      	mov	r1, r8
 8009904:	4604      	mov	r4, r0
 8009906:	f7ff f9ef 	bl	8008ce8 <__mcmp>
 800990a:	2800      	cmp	r0, #0
 800990c:	dd50      	ble.n	80099b0 <_strtod_l+0x8b8>
 800990e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009912:	9a08      	ldr	r2, [sp, #32]
 8009914:	0d1b      	lsrs	r3, r3, #20
 8009916:	051b      	lsls	r3, r3, #20
 8009918:	2a00      	cmp	r2, #0
 800991a:	d06a      	beq.n	80099f2 <_strtod_l+0x8fa>
 800991c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009920:	d867      	bhi.n	80099f2 <_strtod_l+0x8fa>
 8009922:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009926:	f67f ae98 	bls.w	800965a <_strtod_l+0x562>
 800992a:	4650      	mov	r0, sl
 800992c:	4659      	mov	r1, fp
 800992e:	4b09      	ldr	r3, [pc, #36]	@ (8009954 <_strtod_l+0x85c>)
 8009930:	2200      	movs	r2, #0
 8009932:	f7f6 fe85 	bl	8000640 <__aeabi_dmul>
 8009936:	4b08      	ldr	r3, [pc, #32]	@ (8009958 <_strtod_l+0x860>)
 8009938:	4682      	mov	sl, r0
 800993a:	400b      	ands	r3, r1
 800993c:	468b      	mov	fp, r1
 800993e:	2b00      	cmp	r3, #0
 8009940:	f47f ae00 	bne.w	8009544 <_strtod_l+0x44c>
 8009944:	2322      	movs	r3, #34	@ 0x22
 8009946:	9a05      	ldr	r2, [sp, #20]
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	e5fb      	b.n	8009544 <_strtod_l+0x44c>
 800994c:	0800d140 	.word	0x0800d140
 8009950:	fffffc02 	.word	0xfffffc02
 8009954:	39500000 	.word	0x39500000
 8009958:	7ff00000 	.word	0x7ff00000
 800995c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009960:	d165      	bne.n	8009a2e <_strtod_l+0x936>
 8009962:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009968:	b35a      	cbz	r2, 80099c2 <_strtod_l+0x8ca>
 800996a:	4a99      	ldr	r2, [pc, #612]	@ (8009bd0 <_strtod_l+0xad8>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d12b      	bne.n	80099c8 <_strtod_l+0x8d0>
 8009970:	9b08      	ldr	r3, [sp, #32]
 8009972:	4651      	mov	r1, sl
 8009974:	b303      	cbz	r3, 80099b8 <_strtod_l+0x8c0>
 8009976:	465a      	mov	r2, fp
 8009978:	4b96      	ldr	r3, [pc, #600]	@ (8009bd4 <_strtod_l+0xadc>)
 800997a:	4013      	ands	r3, r2
 800997c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009980:	f04f 32ff 	mov.w	r2, #4294967295
 8009984:	d81b      	bhi.n	80099be <_strtod_l+0x8c6>
 8009986:	0d1b      	lsrs	r3, r3, #20
 8009988:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800998c:	fa02 f303 	lsl.w	r3, r2, r3
 8009990:	4299      	cmp	r1, r3
 8009992:	d119      	bne.n	80099c8 <_strtod_l+0x8d0>
 8009994:	4b90      	ldr	r3, [pc, #576]	@ (8009bd8 <_strtod_l+0xae0>)
 8009996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009998:	429a      	cmp	r2, r3
 800999a:	d102      	bne.n	80099a2 <_strtod_l+0x8aa>
 800999c:	3101      	adds	r1, #1
 800999e:	f43f adc6 	beq.w	800952e <_strtod_l+0x436>
 80099a2:	f04f 0a00 	mov.w	sl, #0
 80099a6:	4b8b      	ldr	r3, [pc, #556]	@ (8009bd4 <_strtod_l+0xadc>)
 80099a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099aa:	401a      	ands	r2, r3
 80099ac:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80099b0:	9b08      	ldr	r3, [sp, #32]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1b9      	bne.n	800992a <_strtod_l+0x832>
 80099b6:	e5c5      	b.n	8009544 <_strtod_l+0x44c>
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295
 80099bc:	e7e8      	b.n	8009990 <_strtod_l+0x898>
 80099be:	4613      	mov	r3, r2
 80099c0:	e7e6      	b.n	8009990 <_strtod_l+0x898>
 80099c2:	ea53 030a 	orrs.w	r3, r3, sl
 80099c6:	d0a2      	beq.n	800990e <_strtod_l+0x816>
 80099c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099ca:	b1db      	cbz	r3, 8009a04 <_strtod_l+0x90c>
 80099cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099ce:	4213      	tst	r3, r2
 80099d0:	d0ee      	beq.n	80099b0 <_strtod_l+0x8b8>
 80099d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099d4:	4650      	mov	r0, sl
 80099d6:	4659      	mov	r1, fp
 80099d8:	9a08      	ldr	r2, [sp, #32]
 80099da:	b1bb      	cbz	r3, 8009a0c <_strtod_l+0x914>
 80099dc:	f7ff fb68 	bl	80090b0 <sulp>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099e8:	f7f6 fc74 	bl	80002d4 <__adddf3>
 80099ec:	4682      	mov	sl, r0
 80099ee:	468b      	mov	fp, r1
 80099f0:	e7de      	b.n	80099b0 <_strtod_l+0x8b8>
 80099f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80099f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80099fa:	f04f 3aff 	mov.w	sl, #4294967295
 80099fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a02:	e7d5      	b.n	80099b0 <_strtod_l+0x8b8>
 8009a04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a06:	ea13 0f0a 	tst.w	r3, sl
 8009a0a:	e7e1      	b.n	80099d0 <_strtod_l+0x8d8>
 8009a0c:	f7ff fb50 	bl	80090b0 <sulp>
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a18:	f7f6 fc5a 	bl	80002d0 <__aeabi_dsub>
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2300      	movs	r3, #0
 8009a20:	4682      	mov	sl, r0
 8009a22:	468b      	mov	fp, r1
 8009a24:	f7f7 f874 	bl	8000b10 <__aeabi_dcmpeq>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d0c1      	beq.n	80099b0 <_strtod_l+0x8b8>
 8009a2c:	e615      	b.n	800965a <_strtod_l+0x562>
 8009a2e:	4641      	mov	r1, r8
 8009a30:	4620      	mov	r0, r4
 8009a32:	f7ff fac9 	bl	8008fc8 <__ratio>
 8009a36:	2200      	movs	r2, #0
 8009a38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	f7f7 f87a 	bl	8000b38 <__aeabi_dcmple>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d06d      	beq.n	8009b24 <_strtod_l+0xa2c>
 8009a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d178      	bne.n	8009b40 <_strtod_l+0xa48>
 8009a4e:	f1ba 0f00 	cmp.w	sl, #0
 8009a52:	d156      	bne.n	8009b02 <_strtod_l+0xa0a>
 8009a54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d158      	bne.n	8009b10 <_strtod_l+0xa18>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4630      	mov	r0, r6
 8009a62:	4639      	mov	r1, r7
 8009a64:	4b5d      	ldr	r3, [pc, #372]	@ (8009bdc <_strtod_l+0xae4>)
 8009a66:	f7f7 f85d 	bl	8000b24 <__aeabi_dcmplt>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d157      	bne.n	8009b1e <_strtod_l+0xa26>
 8009a6e:	4630      	mov	r0, r6
 8009a70:	4639      	mov	r1, r7
 8009a72:	2200      	movs	r2, #0
 8009a74:	4b5a      	ldr	r3, [pc, #360]	@ (8009be0 <_strtod_l+0xae8>)
 8009a76:	f7f6 fde3 	bl	8000640 <__aeabi_dmul>
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460f      	mov	r7, r1
 8009a7e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009a82:	9606      	str	r6, [sp, #24]
 8009a84:	9307      	str	r3, [sp, #28]
 8009a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a8a:	4d52      	ldr	r5, [pc, #328]	@ (8009bd4 <_strtod_l+0xadc>)
 8009a8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a92:	401d      	ands	r5, r3
 8009a94:	4b53      	ldr	r3, [pc, #332]	@ (8009be4 <_strtod_l+0xaec>)
 8009a96:	429d      	cmp	r5, r3
 8009a98:	f040 80aa 	bne.w	8009bf0 <_strtod_l+0xaf8>
 8009a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a9e:	4650      	mov	r0, sl
 8009aa0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009aa4:	4659      	mov	r1, fp
 8009aa6:	f7ff f9cf 	bl	8008e48 <__ulp>
 8009aaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009aae:	f7f6 fdc7 	bl	8000640 <__aeabi_dmul>
 8009ab2:	4652      	mov	r2, sl
 8009ab4:	465b      	mov	r3, fp
 8009ab6:	f7f6 fc0d 	bl	80002d4 <__adddf3>
 8009aba:	460b      	mov	r3, r1
 8009abc:	4945      	ldr	r1, [pc, #276]	@ (8009bd4 <_strtod_l+0xadc>)
 8009abe:	4a4a      	ldr	r2, [pc, #296]	@ (8009be8 <_strtod_l+0xaf0>)
 8009ac0:	4019      	ands	r1, r3
 8009ac2:	4291      	cmp	r1, r2
 8009ac4:	4682      	mov	sl, r0
 8009ac6:	d942      	bls.n	8009b4e <_strtod_l+0xa56>
 8009ac8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009aca:	4b43      	ldr	r3, [pc, #268]	@ (8009bd8 <_strtod_l+0xae0>)
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d103      	bne.n	8009ad8 <_strtod_l+0x9e0>
 8009ad0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	f43f ad2b 	beq.w	800952e <_strtod_l+0x436>
 8009ad8:	f04f 3aff 	mov.w	sl, #4294967295
 8009adc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009bd8 <_strtod_l+0xae0>
 8009ae0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ae2:	9805      	ldr	r0, [sp, #20]
 8009ae4:	f7fe fe7e 	bl	80087e4 <_Bfree>
 8009ae8:	4649      	mov	r1, r9
 8009aea:	9805      	ldr	r0, [sp, #20]
 8009aec:	f7fe fe7a 	bl	80087e4 <_Bfree>
 8009af0:	4641      	mov	r1, r8
 8009af2:	9805      	ldr	r0, [sp, #20]
 8009af4:	f7fe fe76 	bl	80087e4 <_Bfree>
 8009af8:	4621      	mov	r1, r4
 8009afa:	9805      	ldr	r0, [sp, #20]
 8009afc:	f7fe fe72 	bl	80087e4 <_Bfree>
 8009b00:	e618      	b.n	8009734 <_strtod_l+0x63c>
 8009b02:	f1ba 0f01 	cmp.w	sl, #1
 8009b06:	d103      	bne.n	8009b10 <_strtod_l+0xa18>
 8009b08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f43f ada5 	beq.w	800965a <_strtod_l+0x562>
 8009b10:	2200      	movs	r2, #0
 8009b12:	4b36      	ldr	r3, [pc, #216]	@ (8009bec <_strtod_l+0xaf4>)
 8009b14:	2600      	movs	r6, #0
 8009b16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b1a:	4f30      	ldr	r7, [pc, #192]	@ (8009bdc <_strtod_l+0xae4>)
 8009b1c:	e7b3      	b.n	8009a86 <_strtod_l+0x98e>
 8009b1e:	2600      	movs	r6, #0
 8009b20:	4f2f      	ldr	r7, [pc, #188]	@ (8009be0 <_strtod_l+0xae8>)
 8009b22:	e7ac      	b.n	8009a7e <_strtod_l+0x986>
 8009b24:	4630      	mov	r0, r6
 8009b26:	4639      	mov	r1, r7
 8009b28:	4b2d      	ldr	r3, [pc, #180]	@ (8009be0 <_strtod_l+0xae8>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f7f6 fd88 	bl	8000640 <__aeabi_dmul>
 8009b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b32:	4606      	mov	r6, r0
 8009b34:	460f      	mov	r7, r1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0a1      	beq.n	8009a7e <_strtod_l+0x986>
 8009b3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b3e:	e7a2      	b.n	8009a86 <_strtod_l+0x98e>
 8009b40:	2200      	movs	r2, #0
 8009b42:	4b26      	ldr	r3, [pc, #152]	@ (8009bdc <_strtod_l+0xae4>)
 8009b44:	4616      	mov	r6, r2
 8009b46:	461f      	mov	r7, r3
 8009b48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b4c:	e79b      	b.n	8009a86 <_strtod_l+0x98e>
 8009b4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b52:	9b08      	ldr	r3, [sp, #32]
 8009b54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1c1      	bne.n	8009ae0 <_strtod_l+0x9e8>
 8009b5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b60:	0d1b      	lsrs	r3, r3, #20
 8009b62:	051b      	lsls	r3, r3, #20
 8009b64:	429d      	cmp	r5, r3
 8009b66:	d1bb      	bne.n	8009ae0 <_strtod_l+0x9e8>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f7 fa54 	bl	8001018 <__aeabi_d2lz>
 8009b70:	f7f6 fd38 	bl	80005e4 <__aeabi_l2d>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4630      	mov	r0, r6
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	f7f6 fba8 	bl	80002d0 <__aeabi_dsub>
 8009b80:	460b      	mov	r3, r1
 8009b82:	4602      	mov	r2, r0
 8009b84:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009b88:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b8e:	ea46 060a 	orr.w	r6, r6, sl
 8009b92:	431e      	orrs	r6, r3
 8009b94:	d069      	beq.n	8009c6a <_strtod_l+0xb72>
 8009b96:	a30a      	add	r3, pc, #40	@ (adr r3, 8009bc0 <_strtod_l+0xac8>)
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	f7f6 ffc2 	bl	8000b24 <__aeabi_dcmplt>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	f47f accf 	bne.w	8009544 <_strtod_l+0x44c>
 8009ba6:	a308      	add	r3, pc, #32	@ (adr r3, 8009bc8 <_strtod_l+0xad0>)
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bb0:	f7f6 ffd6 	bl	8000b60 <__aeabi_dcmpgt>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d093      	beq.n	8009ae0 <_strtod_l+0x9e8>
 8009bb8:	e4c4      	b.n	8009544 <_strtod_l+0x44c>
 8009bba:	bf00      	nop
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	94a03595 	.word	0x94a03595
 8009bc4:	3fdfffff 	.word	0x3fdfffff
 8009bc8:	35afe535 	.word	0x35afe535
 8009bcc:	3fe00000 	.word	0x3fe00000
 8009bd0:	000fffff 	.word	0x000fffff
 8009bd4:	7ff00000 	.word	0x7ff00000
 8009bd8:	7fefffff 	.word	0x7fefffff
 8009bdc:	3ff00000 	.word	0x3ff00000
 8009be0:	3fe00000 	.word	0x3fe00000
 8009be4:	7fe00000 	.word	0x7fe00000
 8009be8:	7c9fffff 	.word	0x7c9fffff
 8009bec:	bff00000 	.word	0xbff00000
 8009bf0:	9b08      	ldr	r3, [sp, #32]
 8009bf2:	b323      	cbz	r3, 8009c3e <_strtod_l+0xb46>
 8009bf4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009bf8:	d821      	bhi.n	8009c3e <_strtod_l+0xb46>
 8009bfa:	a327      	add	r3, pc, #156	@ (adr r3, 8009c98 <_strtod_l+0xba0>)
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	4630      	mov	r0, r6
 8009c02:	4639      	mov	r1, r7
 8009c04:	f7f6 ff98 	bl	8000b38 <__aeabi_dcmple>
 8009c08:	b1a0      	cbz	r0, 8009c34 <_strtod_l+0xb3c>
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f7f6 ffef 	bl	8000bf0 <__aeabi_d2uiz>
 8009c12:	2801      	cmp	r0, #1
 8009c14:	bf38      	it	cc
 8009c16:	2001      	movcc	r0, #1
 8009c18:	f7f6 fc98 	bl	800054c <__aeabi_ui2d>
 8009c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c1e:	4606      	mov	r6, r0
 8009c20:	460f      	mov	r7, r1
 8009c22:	b9fb      	cbnz	r3, 8009c64 <_strtod_l+0xb6c>
 8009c24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c28:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c2a:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c36:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c3a:	1b5b      	subs	r3, r3, r5
 8009c3c:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c42:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c46:	f7ff f8ff 	bl	8008e48 <__ulp>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4650      	mov	r0, sl
 8009c50:	4659      	mov	r1, fp
 8009c52:	f7f6 fcf5 	bl	8000640 <__aeabi_dmul>
 8009c56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c5a:	f7f6 fb3b 	bl	80002d4 <__adddf3>
 8009c5e:	4682      	mov	sl, r0
 8009c60:	468b      	mov	fp, r1
 8009c62:	e776      	b.n	8009b52 <_strtod_l+0xa5a>
 8009c64:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009c68:	e7e0      	b.n	8009c2c <_strtod_l+0xb34>
 8009c6a:	a30d      	add	r3, pc, #52	@ (adr r3, 8009ca0 <_strtod_l+0xba8>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	f7f6 ff58 	bl	8000b24 <__aeabi_dcmplt>
 8009c74:	e79e      	b.n	8009bb4 <_strtod_l+0xabc>
 8009c76:	2300      	movs	r3, #0
 8009c78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c7c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	f7ff ba77 	b.w	8009172 <_strtod_l+0x7a>
 8009c84:	2a65      	cmp	r2, #101	@ 0x65
 8009c86:	f43f ab6e 	beq.w	8009366 <_strtod_l+0x26e>
 8009c8a:	2a45      	cmp	r2, #69	@ 0x45
 8009c8c:	f43f ab6b 	beq.w	8009366 <_strtod_l+0x26e>
 8009c90:	2301      	movs	r3, #1
 8009c92:	f7ff bba6 	b.w	80093e2 <_strtod_l+0x2ea>
 8009c96:	bf00      	nop
 8009c98:	ffc00000 	.word	0xffc00000
 8009c9c:	41dfffff 	.word	0x41dfffff
 8009ca0:	94a03595 	.word	0x94a03595
 8009ca4:	3fcfffff 	.word	0x3fcfffff

08009ca8 <_strtod_r>:
 8009ca8:	4b01      	ldr	r3, [pc, #4]	@ (8009cb0 <_strtod_r+0x8>)
 8009caa:	f7ff ba25 	b.w	80090f8 <_strtod_l>
 8009cae:	bf00      	nop
 8009cb0:	20000174 	.word	0x20000174

08009cb4 <__ssputs_r>:
 8009cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb8:	461f      	mov	r7, r3
 8009cba:	688e      	ldr	r6, [r1, #8]
 8009cbc:	4682      	mov	sl, r0
 8009cbe:	42be      	cmp	r6, r7
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	4690      	mov	r8, r2
 8009cc4:	680b      	ldr	r3, [r1, #0]
 8009cc6:	d82d      	bhi.n	8009d24 <__ssputs_r+0x70>
 8009cc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ccc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cd0:	d026      	beq.n	8009d20 <__ssputs_r+0x6c>
 8009cd2:	6965      	ldr	r5, [r4, #20]
 8009cd4:	6909      	ldr	r1, [r1, #16]
 8009cd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cda:	eba3 0901 	sub.w	r9, r3, r1
 8009cde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ce2:	1c7b      	adds	r3, r7, #1
 8009ce4:	444b      	add	r3, r9
 8009ce6:	106d      	asrs	r5, r5, #1
 8009ce8:	429d      	cmp	r5, r3
 8009cea:	bf38      	it	cc
 8009cec:	461d      	movcc	r5, r3
 8009cee:	0553      	lsls	r3, r2, #21
 8009cf0:	d527      	bpl.n	8009d42 <__ssputs_r+0x8e>
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	f7fe fcaa 	bl	800864c <_malloc_r>
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	b360      	cbz	r0, 8009d56 <__ssputs_r+0xa2>
 8009cfc:	464a      	mov	r2, r9
 8009cfe:	6921      	ldr	r1, [r4, #16]
 8009d00:	f7fd fdb1 	bl	8007866 <memcpy>
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d0e:	81a3      	strh	r3, [r4, #12]
 8009d10:	6126      	str	r6, [r4, #16]
 8009d12:	444e      	add	r6, r9
 8009d14:	6026      	str	r6, [r4, #0]
 8009d16:	463e      	mov	r6, r7
 8009d18:	6165      	str	r5, [r4, #20]
 8009d1a:	eba5 0509 	sub.w	r5, r5, r9
 8009d1e:	60a5      	str	r5, [r4, #8]
 8009d20:	42be      	cmp	r6, r7
 8009d22:	d900      	bls.n	8009d26 <__ssputs_r+0x72>
 8009d24:	463e      	mov	r6, r7
 8009d26:	4632      	mov	r2, r6
 8009d28:	4641      	mov	r1, r8
 8009d2a:	6820      	ldr	r0, [r4, #0]
 8009d2c:	f000 f9d4 	bl	800a0d8 <memmove>
 8009d30:	2000      	movs	r0, #0
 8009d32:	68a3      	ldr	r3, [r4, #8]
 8009d34:	1b9b      	subs	r3, r3, r6
 8009d36:	60a3      	str	r3, [r4, #8]
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	4433      	add	r3, r6
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d42:	462a      	mov	r2, r5
 8009d44:	f000 fd71 	bl	800a82a <_realloc_r>
 8009d48:	4606      	mov	r6, r0
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d1e0      	bne.n	8009d10 <__ssputs_r+0x5c>
 8009d4e:	4650      	mov	r0, sl
 8009d50:	6921      	ldr	r1, [r4, #16]
 8009d52:	f7fe fc09 	bl	8008568 <_free_r>
 8009d56:	230c      	movs	r3, #12
 8009d58:	f8ca 3000 	str.w	r3, [sl]
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d66:	81a3      	strh	r3, [r4, #12]
 8009d68:	e7e9      	b.n	8009d3e <__ssputs_r+0x8a>
	...

08009d6c <_svfiprintf_r>:
 8009d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d70:	4698      	mov	r8, r3
 8009d72:	898b      	ldrh	r3, [r1, #12]
 8009d74:	4607      	mov	r7, r0
 8009d76:	061b      	lsls	r3, r3, #24
 8009d78:	460d      	mov	r5, r1
 8009d7a:	4614      	mov	r4, r2
 8009d7c:	b09d      	sub	sp, #116	@ 0x74
 8009d7e:	d510      	bpl.n	8009da2 <_svfiprintf_r+0x36>
 8009d80:	690b      	ldr	r3, [r1, #16]
 8009d82:	b973      	cbnz	r3, 8009da2 <_svfiprintf_r+0x36>
 8009d84:	2140      	movs	r1, #64	@ 0x40
 8009d86:	f7fe fc61 	bl	800864c <_malloc_r>
 8009d8a:	6028      	str	r0, [r5, #0]
 8009d8c:	6128      	str	r0, [r5, #16]
 8009d8e:	b930      	cbnz	r0, 8009d9e <_svfiprintf_r+0x32>
 8009d90:	230c      	movs	r3, #12
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	b01d      	add	sp, #116	@ 0x74
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	2340      	movs	r3, #64	@ 0x40
 8009da0:	616b      	str	r3, [r5, #20]
 8009da2:	2300      	movs	r3, #0
 8009da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009da6:	2320      	movs	r3, #32
 8009da8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dac:	2330      	movs	r3, #48	@ 0x30
 8009dae:	f04f 0901 	mov.w	r9, #1
 8009db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009db6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009f50 <_svfiprintf_r+0x1e4>
 8009dba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dbe:	4623      	mov	r3, r4
 8009dc0:	469a      	mov	sl, r3
 8009dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dc6:	b10a      	cbz	r2, 8009dcc <_svfiprintf_r+0x60>
 8009dc8:	2a25      	cmp	r2, #37	@ 0x25
 8009dca:	d1f9      	bne.n	8009dc0 <_svfiprintf_r+0x54>
 8009dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8009dd0:	d00b      	beq.n	8009dea <_svfiprintf_r+0x7e>
 8009dd2:	465b      	mov	r3, fp
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff ff6b 	bl	8009cb4 <__ssputs_r>
 8009dde:	3001      	adds	r0, #1
 8009de0:	f000 80a7 	beq.w	8009f32 <_svfiprintf_r+0x1c6>
 8009de4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009de6:	445a      	add	r2, fp
 8009de8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dea:	f89a 3000 	ldrb.w	r3, [sl]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f000 809f 	beq.w	8009f32 <_svfiprintf_r+0x1c6>
 8009df4:	2300      	movs	r3, #0
 8009df6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dfe:	f10a 0a01 	add.w	sl, sl, #1
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	9307      	str	r3, [sp, #28]
 8009e06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e0c:	4654      	mov	r4, sl
 8009e0e:	2205      	movs	r2, #5
 8009e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e14:	484e      	ldr	r0, [pc, #312]	@ (8009f50 <_svfiprintf_r+0x1e4>)
 8009e16:	f7fd fd18 	bl	800784a <memchr>
 8009e1a:	9a04      	ldr	r2, [sp, #16]
 8009e1c:	b9d8      	cbnz	r0, 8009e56 <_svfiprintf_r+0xea>
 8009e1e:	06d0      	lsls	r0, r2, #27
 8009e20:	bf44      	itt	mi
 8009e22:	2320      	movmi	r3, #32
 8009e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e28:	0711      	lsls	r1, r2, #28
 8009e2a:	bf44      	itt	mi
 8009e2c:	232b      	movmi	r3, #43	@ 0x2b
 8009e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e32:	f89a 3000 	ldrb.w	r3, [sl]
 8009e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e38:	d015      	beq.n	8009e66 <_svfiprintf_r+0xfa>
 8009e3a:	4654      	mov	r4, sl
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f04f 0c0a 	mov.w	ip, #10
 8009e42:	9a07      	ldr	r2, [sp, #28]
 8009e44:	4621      	mov	r1, r4
 8009e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e4a:	3b30      	subs	r3, #48	@ 0x30
 8009e4c:	2b09      	cmp	r3, #9
 8009e4e:	d94b      	bls.n	8009ee8 <_svfiprintf_r+0x17c>
 8009e50:	b1b0      	cbz	r0, 8009e80 <_svfiprintf_r+0x114>
 8009e52:	9207      	str	r2, [sp, #28]
 8009e54:	e014      	b.n	8009e80 <_svfiprintf_r+0x114>
 8009e56:	eba0 0308 	sub.w	r3, r0, r8
 8009e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	46a2      	mov	sl, r4
 8009e62:	9304      	str	r3, [sp, #16]
 8009e64:	e7d2      	b.n	8009e0c <_svfiprintf_r+0xa0>
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	1d19      	adds	r1, r3, #4
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	9103      	str	r1, [sp, #12]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	bfbb      	ittet	lt
 8009e72:	425b      	neglt	r3, r3
 8009e74:	f042 0202 	orrlt.w	r2, r2, #2
 8009e78:	9307      	strge	r3, [sp, #28]
 8009e7a:	9307      	strlt	r3, [sp, #28]
 8009e7c:	bfb8      	it	lt
 8009e7e:	9204      	strlt	r2, [sp, #16]
 8009e80:	7823      	ldrb	r3, [r4, #0]
 8009e82:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e84:	d10a      	bne.n	8009e9c <_svfiprintf_r+0x130>
 8009e86:	7863      	ldrb	r3, [r4, #1]
 8009e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e8a:	d132      	bne.n	8009ef2 <_svfiprintf_r+0x186>
 8009e8c:	9b03      	ldr	r3, [sp, #12]
 8009e8e:	3402      	adds	r4, #2
 8009e90:	1d1a      	adds	r2, r3, #4
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	9203      	str	r2, [sp, #12]
 8009e96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e9a:	9305      	str	r3, [sp, #20]
 8009e9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009f54 <_svfiprintf_r+0x1e8>
 8009ea0:	2203      	movs	r2, #3
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	7821      	ldrb	r1, [r4, #0]
 8009ea6:	f7fd fcd0 	bl	800784a <memchr>
 8009eaa:	b138      	cbz	r0, 8009ebc <_svfiprintf_r+0x150>
 8009eac:	2240      	movs	r2, #64	@ 0x40
 8009eae:	9b04      	ldr	r3, [sp, #16]
 8009eb0:	eba0 000a 	sub.w	r0, r0, sl
 8009eb4:	4082      	lsls	r2, r0
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	3401      	adds	r4, #1
 8009eba:	9304      	str	r3, [sp, #16]
 8009ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec0:	2206      	movs	r2, #6
 8009ec2:	4825      	ldr	r0, [pc, #148]	@ (8009f58 <_svfiprintf_r+0x1ec>)
 8009ec4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ec8:	f7fd fcbf 	bl	800784a <memchr>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d036      	beq.n	8009f3e <_svfiprintf_r+0x1d2>
 8009ed0:	4b22      	ldr	r3, [pc, #136]	@ (8009f5c <_svfiprintf_r+0x1f0>)
 8009ed2:	bb1b      	cbnz	r3, 8009f1c <_svfiprintf_r+0x1b0>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	3307      	adds	r3, #7
 8009ed8:	f023 0307 	bic.w	r3, r3, #7
 8009edc:	3308      	adds	r3, #8
 8009ede:	9303      	str	r3, [sp, #12]
 8009ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee2:	4433      	add	r3, r6
 8009ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ee6:	e76a      	b.n	8009dbe <_svfiprintf_r+0x52>
 8009ee8:	460c      	mov	r4, r1
 8009eea:	2001      	movs	r0, #1
 8009eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ef0:	e7a8      	b.n	8009e44 <_svfiprintf_r+0xd8>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f04f 0c0a 	mov.w	ip, #10
 8009ef8:	4619      	mov	r1, r3
 8009efa:	3401      	adds	r4, #1
 8009efc:	9305      	str	r3, [sp, #20]
 8009efe:	4620      	mov	r0, r4
 8009f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f04:	3a30      	subs	r2, #48	@ 0x30
 8009f06:	2a09      	cmp	r2, #9
 8009f08:	d903      	bls.n	8009f12 <_svfiprintf_r+0x1a6>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0c6      	beq.n	8009e9c <_svfiprintf_r+0x130>
 8009f0e:	9105      	str	r1, [sp, #20]
 8009f10:	e7c4      	b.n	8009e9c <_svfiprintf_r+0x130>
 8009f12:	4604      	mov	r4, r0
 8009f14:	2301      	movs	r3, #1
 8009f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f1a:	e7f0      	b.n	8009efe <_svfiprintf_r+0x192>
 8009f1c:	ab03      	add	r3, sp, #12
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	462a      	mov	r2, r5
 8009f22:	4638      	mov	r0, r7
 8009f24:	4b0e      	ldr	r3, [pc, #56]	@ (8009f60 <_svfiprintf_r+0x1f4>)
 8009f26:	a904      	add	r1, sp, #16
 8009f28:	f7fc fc7e 	bl	8006828 <_printf_float>
 8009f2c:	1c42      	adds	r2, r0, #1
 8009f2e:	4606      	mov	r6, r0
 8009f30:	d1d6      	bne.n	8009ee0 <_svfiprintf_r+0x174>
 8009f32:	89ab      	ldrh	r3, [r5, #12]
 8009f34:	065b      	lsls	r3, r3, #25
 8009f36:	f53f af2d 	bmi.w	8009d94 <_svfiprintf_r+0x28>
 8009f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f3c:	e72c      	b.n	8009d98 <_svfiprintf_r+0x2c>
 8009f3e:	ab03      	add	r3, sp, #12
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	462a      	mov	r2, r5
 8009f44:	4638      	mov	r0, r7
 8009f46:	4b06      	ldr	r3, [pc, #24]	@ (8009f60 <_svfiprintf_r+0x1f4>)
 8009f48:	a904      	add	r1, sp, #16
 8009f4a:	f7fc ff0b 	bl	8006d64 <_printf_i>
 8009f4e:	e7ed      	b.n	8009f2c <_svfiprintf_r+0x1c0>
 8009f50:	0800d168 	.word	0x0800d168
 8009f54:	0800d16e 	.word	0x0800d16e
 8009f58:	0800d172 	.word	0x0800d172
 8009f5c:	08006829 	.word	0x08006829
 8009f60:	08009cb5 	.word	0x08009cb5

08009f64 <__sflush_r>:
 8009f64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6a:	0716      	lsls	r6, r2, #28
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	d454      	bmi.n	800a01c <__sflush_r+0xb8>
 8009f72:	684b      	ldr	r3, [r1, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dc02      	bgt.n	8009f7e <__sflush_r+0x1a>
 8009f78:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dd48      	ble.n	800a010 <__sflush_r+0xac>
 8009f7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f80:	2e00      	cmp	r6, #0
 8009f82:	d045      	beq.n	800a010 <__sflush_r+0xac>
 8009f84:	2300      	movs	r3, #0
 8009f86:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f8a:	682f      	ldr	r7, [r5, #0]
 8009f8c:	6a21      	ldr	r1, [r4, #32]
 8009f8e:	602b      	str	r3, [r5, #0]
 8009f90:	d030      	beq.n	8009ff4 <__sflush_r+0x90>
 8009f92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	0759      	lsls	r1, r3, #29
 8009f98:	d505      	bpl.n	8009fa6 <__sflush_r+0x42>
 8009f9a:	6863      	ldr	r3, [r4, #4]
 8009f9c:	1ad2      	subs	r2, r2, r3
 8009f9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fa0:	b10b      	cbz	r3, 8009fa6 <__sflush_r+0x42>
 8009fa2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fa4:	1ad2      	subs	r2, r2, r3
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	4628      	mov	r0, r5
 8009faa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fac:	6a21      	ldr	r1, [r4, #32]
 8009fae:	47b0      	blx	r6
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	89a3      	ldrh	r3, [r4, #12]
 8009fb4:	d106      	bne.n	8009fc4 <__sflush_r+0x60>
 8009fb6:	6829      	ldr	r1, [r5, #0]
 8009fb8:	291d      	cmp	r1, #29
 8009fba:	d82b      	bhi.n	800a014 <__sflush_r+0xb0>
 8009fbc:	4a28      	ldr	r2, [pc, #160]	@ (800a060 <__sflush_r+0xfc>)
 8009fbe:	410a      	asrs	r2, r1
 8009fc0:	07d6      	lsls	r6, r2, #31
 8009fc2:	d427      	bmi.n	800a014 <__sflush_r+0xb0>
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	6062      	str	r2, [r4, #4]
 8009fc8:	6922      	ldr	r2, [r4, #16]
 8009fca:	04d9      	lsls	r1, r3, #19
 8009fcc:	6022      	str	r2, [r4, #0]
 8009fce:	d504      	bpl.n	8009fda <__sflush_r+0x76>
 8009fd0:	1c42      	adds	r2, r0, #1
 8009fd2:	d101      	bne.n	8009fd8 <__sflush_r+0x74>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b903      	cbnz	r3, 8009fda <__sflush_r+0x76>
 8009fd8:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fdc:	602f      	str	r7, [r5, #0]
 8009fde:	b1b9      	cbz	r1, 800a010 <__sflush_r+0xac>
 8009fe0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fe4:	4299      	cmp	r1, r3
 8009fe6:	d002      	beq.n	8009fee <__sflush_r+0x8a>
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f7fe fabd 	bl	8008568 <_free_r>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ff2:	e00d      	b.n	800a010 <__sflush_r+0xac>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	47b0      	blx	r6
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	1c50      	adds	r0, r2, #1
 8009ffe:	d1c9      	bne.n	8009f94 <__sflush_r+0x30>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0c6      	beq.n	8009f94 <__sflush_r+0x30>
 800a006:	2b1d      	cmp	r3, #29
 800a008:	d001      	beq.n	800a00e <__sflush_r+0xaa>
 800a00a:	2b16      	cmp	r3, #22
 800a00c:	d11d      	bne.n	800a04a <__sflush_r+0xe6>
 800a00e:	602f      	str	r7, [r5, #0]
 800a010:	2000      	movs	r0, #0
 800a012:	e021      	b.n	800a058 <__sflush_r+0xf4>
 800a014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a018:	b21b      	sxth	r3, r3
 800a01a:	e01a      	b.n	800a052 <__sflush_r+0xee>
 800a01c:	690f      	ldr	r7, [r1, #16]
 800a01e:	2f00      	cmp	r7, #0
 800a020:	d0f6      	beq.n	800a010 <__sflush_r+0xac>
 800a022:	0793      	lsls	r3, r2, #30
 800a024:	bf18      	it	ne
 800a026:	2300      	movne	r3, #0
 800a028:	680e      	ldr	r6, [r1, #0]
 800a02a:	bf08      	it	eq
 800a02c:	694b      	ldreq	r3, [r1, #20]
 800a02e:	1bf6      	subs	r6, r6, r7
 800a030:	600f      	str	r7, [r1, #0]
 800a032:	608b      	str	r3, [r1, #8]
 800a034:	2e00      	cmp	r6, #0
 800a036:	ddeb      	ble.n	800a010 <__sflush_r+0xac>
 800a038:	4633      	mov	r3, r6
 800a03a:	463a      	mov	r2, r7
 800a03c:	4628      	mov	r0, r5
 800a03e:	6a21      	ldr	r1, [r4, #32]
 800a040:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a044:	47e0      	blx	ip
 800a046:	2800      	cmp	r0, #0
 800a048:	dc07      	bgt.n	800a05a <__sflush_r+0xf6>
 800a04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a052:	f04f 30ff 	mov.w	r0, #4294967295
 800a056:	81a3      	strh	r3, [r4, #12]
 800a058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a05a:	4407      	add	r7, r0
 800a05c:	1a36      	subs	r6, r6, r0
 800a05e:	e7e9      	b.n	800a034 <__sflush_r+0xd0>
 800a060:	dfbffffe 	.word	0xdfbffffe

0800a064 <_fflush_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	690b      	ldr	r3, [r1, #16]
 800a068:	4605      	mov	r5, r0
 800a06a:	460c      	mov	r4, r1
 800a06c:	b913      	cbnz	r3, 800a074 <_fflush_r+0x10>
 800a06e:	2500      	movs	r5, #0
 800a070:	4628      	mov	r0, r5
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	b118      	cbz	r0, 800a07e <_fflush_r+0x1a>
 800a076:	6a03      	ldr	r3, [r0, #32]
 800a078:	b90b      	cbnz	r3, 800a07e <_fflush_r+0x1a>
 800a07a:	f7fd fa2f 	bl	80074dc <__sinit>
 800a07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0f3      	beq.n	800a06e <_fflush_r+0xa>
 800a086:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a088:	07d0      	lsls	r0, r2, #31
 800a08a:	d404      	bmi.n	800a096 <_fflush_r+0x32>
 800a08c:	0599      	lsls	r1, r3, #22
 800a08e:	d402      	bmi.n	800a096 <_fflush_r+0x32>
 800a090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a092:	f7fd fbd0 	bl	8007836 <__retarget_lock_acquire_recursive>
 800a096:	4628      	mov	r0, r5
 800a098:	4621      	mov	r1, r4
 800a09a:	f7ff ff63 	bl	8009f64 <__sflush_r>
 800a09e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	07da      	lsls	r2, r3, #31
 800a0a4:	d4e4      	bmi.n	800a070 <_fflush_r+0xc>
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	059b      	lsls	r3, r3, #22
 800a0aa:	d4e1      	bmi.n	800a070 <_fflush_r+0xc>
 800a0ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0ae:	f7fd fbc3 	bl	8007838 <__retarget_lock_release_recursive>
 800a0b2:	e7dd      	b.n	800a070 <_fflush_r+0xc>

0800a0b4 <fiprintf>:
 800a0b4:	b40e      	push	{r1, r2, r3}
 800a0b6:	b503      	push	{r0, r1, lr}
 800a0b8:	4601      	mov	r1, r0
 800a0ba:	ab03      	add	r3, sp, #12
 800a0bc:	4805      	ldr	r0, [pc, #20]	@ (800a0d4 <fiprintf+0x20>)
 800a0be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0c2:	6800      	ldr	r0, [r0, #0]
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	f000 fc13 	bl	800a8f0 <_vfiprintf_r>
 800a0ca:	b002      	add	sp, #8
 800a0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0d0:	b003      	add	sp, #12
 800a0d2:	4770      	bx	lr
 800a0d4:	20000124 	.word	0x20000124

0800a0d8 <memmove>:
 800a0d8:	4288      	cmp	r0, r1
 800a0da:	b510      	push	{r4, lr}
 800a0dc:	eb01 0402 	add.w	r4, r1, r2
 800a0e0:	d902      	bls.n	800a0e8 <memmove+0x10>
 800a0e2:	4284      	cmp	r4, r0
 800a0e4:	4623      	mov	r3, r4
 800a0e6:	d807      	bhi.n	800a0f8 <memmove+0x20>
 800a0e8:	1e43      	subs	r3, r0, #1
 800a0ea:	42a1      	cmp	r1, r4
 800a0ec:	d008      	beq.n	800a100 <memmove+0x28>
 800a0ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0f6:	e7f8      	b.n	800a0ea <memmove+0x12>
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	4402      	add	r2, r0
 800a0fc:	428a      	cmp	r2, r1
 800a0fe:	d100      	bne.n	800a102 <memmove+0x2a>
 800a100:	bd10      	pop	{r4, pc}
 800a102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a10a:	e7f7      	b.n	800a0fc <memmove+0x24>

0800a10c <strncmp>:
 800a10c:	b510      	push	{r4, lr}
 800a10e:	b16a      	cbz	r2, 800a12c <strncmp+0x20>
 800a110:	3901      	subs	r1, #1
 800a112:	1884      	adds	r4, r0, r2
 800a114:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a118:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d103      	bne.n	800a128 <strncmp+0x1c>
 800a120:	42a0      	cmp	r0, r4
 800a122:	d001      	beq.n	800a128 <strncmp+0x1c>
 800a124:	2a00      	cmp	r2, #0
 800a126:	d1f5      	bne.n	800a114 <strncmp+0x8>
 800a128:	1ad0      	subs	r0, r2, r3
 800a12a:	bd10      	pop	{r4, pc}
 800a12c:	4610      	mov	r0, r2
 800a12e:	e7fc      	b.n	800a12a <strncmp+0x1e>

0800a130 <_sbrk_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	2300      	movs	r3, #0
 800a134:	4d05      	ldr	r5, [pc, #20]	@ (800a14c <_sbrk_r+0x1c>)
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	602b      	str	r3, [r5, #0]
 800a13c:	f7f9 fbb8 	bl	80038b0 <_sbrk>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_sbrk_r+0x1a>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_sbrk_r+0x1a>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	20000c08 	.word	0x20000c08

0800a150 <nan>:
 800a150:	2000      	movs	r0, #0
 800a152:	4901      	ldr	r1, [pc, #4]	@ (800a158 <nan+0x8>)
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	7ff80000 	.word	0x7ff80000

0800a15c <abort>:
 800a15c:	2006      	movs	r0, #6
 800a15e:	b508      	push	{r3, lr}
 800a160:	f000 fd9a 	bl	800ac98 <raise>
 800a164:	2001      	movs	r0, #1
 800a166:	f7f9 fb77 	bl	8003858 <_exit>

0800a16a <_calloc_r>:
 800a16a:	b570      	push	{r4, r5, r6, lr}
 800a16c:	fba1 5402 	umull	r5, r4, r1, r2
 800a170:	b93c      	cbnz	r4, 800a182 <_calloc_r+0x18>
 800a172:	4629      	mov	r1, r5
 800a174:	f7fe fa6a 	bl	800864c <_malloc_r>
 800a178:	4606      	mov	r6, r0
 800a17a:	b928      	cbnz	r0, 800a188 <_calloc_r+0x1e>
 800a17c:	2600      	movs	r6, #0
 800a17e:	4630      	mov	r0, r6
 800a180:	bd70      	pop	{r4, r5, r6, pc}
 800a182:	220c      	movs	r2, #12
 800a184:	6002      	str	r2, [r0, #0]
 800a186:	e7f9      	b.n	800a17c <_calloc_r+0x12>
 800a188:	462a      	mov	r2, r5
 800a18a:	4621      	mov	r1, r4
 800a18c:	f7fd fa3f 	bl	800760e <memset>
 800a190:	e7f5      	b.n	800a17e <_calloc_r+0x14>

0800a192 <rshift>:
 800a192:	6903      	ldr	r3, [r0, #16]
 800a194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a198:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a19c:	f100 0414 	add.w	r4, r0, #20
 800a1a0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1a4:	dd46      	ble.n	800a234 <rshift+0xa2>
 800a1a6:	f011 011f 	ands.w	r1, r1, #31
 800a1aa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1ae:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1b2:	d10c      	bne.n	800a1ce <rshift+0x3c>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	f100 0710 	add.w	r7, r0, #16
 800a1ba:	42b1      	cmp	r1, r6
 800a1bc:	d335      	bcc.n	800a22a <rshift+0x98>
 800a1be:	1a9b      	subs	r3, r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	1eea      	subs	r2, r5, #3
 800a1c4:	4296      	cmp	r6, r2
 800a1c6:	bf38      	it	cc
 800a1c8:	2300      	movcc	r3, #0
 800a1ca:	4423      	add	r3, r4
 800a1cc:	e015      	b.n	800a1fa <rshift+0x68>
 800a1ce:	46a1      	mov	r9, r4
 800a1d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1d4:	f1c1 0820 	rsb	r8, r1, #32
 800a1d8:	40cf      	lsrs	r7, r1
 800a1da:	f105 0e04 	add.w	lr, r5, #4
 800a1de:	4576      	cmp	r6, lr
 800a1e0:	46f4      	mov	ip, lr
 800a1e2:	d816      	bhi.n	800a212 <rshift+0x80>
 800a1e4:	1a9a      	subs	r2, r3, r2
 800a1e6:	0092      	lsls	r2, r2, #2
 800a1e8:	3a04      	subs	r2, #4
 800a1ea:	3501      	adds	r5, #1
 800a1ec:	42ae      	cmp	r6, r5
 800a1ee:	bf38      	it	cc
 800a1f0:	2200      	movcc	r2, #0
 800a1f2:	18a3      	adds	r3, r4, r2
 800a1f4:	50a7      	str	r7, [r4, r2]
 800a1f6:	b107      	cbz	r7, 800a1fa <rshift+0x68>
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	eba3 0204 	sub.w	r2, r3, r4
 800a200:	bf08      	it	eq
 800a202:	2300      	moveq	r3, #0
 800a204:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a208:	6102      	str	r2, [r0, #16]
 800a20a:	bf08      	it	eq
 800a20c:	6143      	streq	r3, [r0, #20]
 800a20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a212:	f8dc c000 	ldr.w	ip, [ip]
 800a216:	fa0c fc08 	lsl.w	ip, ip, r8
 800a21a:	ea4c 0707 	orr.w	r7, ip, r7
 800a21e:	f849 7b04 	str.w	r7, [r9], #4
 800a222:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a226:	40cf      	lsrs	r7, r1
 800a228:	e7d9      	b.n	800a1de <rshift+0x4c>
 800a22a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a22e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a232:	e7c2      	b.n	800a1ba <rshift+0x28>
 800a234:	4623      	mov	r3, r4
 800a236:	e7e0      	b.n	800a1fa <rshift+0x68>

0800a238 <__hexdig_fun>:
 800a238:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a23c:	2b09      	cmp	r3, #9
 800a23e:	d802      	bhi.n	800a246 <__hexdig_fun+0xe>
 800a240:	3820      	subs	r0, #32
 800a242:	b2c0      	uxtb	r0, r0
 800a244:	4770      	bx	lr
 800a246:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a24a:	2b05      	cmp	r3, #5
 800a24c:	d801      	bhi.n	800a252 <__hexdig_fun+0x1a>
 800a24e:	3847      	subs	r0, #71	@ 0x47
 800a250:	e7f7      	b.n	800a242 <__hexdig_fun+0xa>
 800a252:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a256:	2b05      	cmp	r3, #5
 800a258:	d801      	bhi.n	800a25e <__hexdig_fun+0x26>
 800a25a:	3827      	subs	r0, #39	@ 0x27
 800a25c:	e7f1      	b.n	800a242 <__hexdig_fun+0xa>
 800a25e:	2000      	movs	r0, #0
 800a260:	4770      	bx	lr
	...

0800a264 <__gethex>:
 800a264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a268:	468a      	mov	sl, r1
 800a26a:	4690      	mov	r8, r2
 800a26c:	b085      	sub	sp, #20
 800a26e:	9302      	str	r3, [sp, #8]
 800a270:	680b      	ldr	r3, [r1, #0]
 800a272:	9001      	str	r0, [sp, #4]
 800a274:	1c9c      	adds	r4, r3, #2
 800a276:	46a1      	mov	r9, r4
 800a278:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a27c:	2830      	cmp	r0, #48	@ 0x30
 800a27e:	d0fa      	beq.n	800a276 <__gethex+0x12>
 800a280:	eba9 0303 	sub.w	r3, r9, r3
 800a284:	f1a3 0b02 	sub.w	fp, r3, #2
 800a288:	f7ff ffd6 	bl	800a238 <__hexdig_fun>
 800a28c:	4605      	mov	r5, r0
 800a28e:	2800      	cmp	r0, #0
 800a290:	d168      	bne.n	800a364 <__gethex+0x100>
 800a292:	2201      	movs	r2, #1
 800a294:	4648      	mov	r0, r9
 800a296:	499f      	ldr	r1, [pc, #636]	@ (800a514 <__gethex+0x2b0>)
 800a298:	f7ff ff38 	bl	800a10c <strncmp>
 800a29c:	4607      	mov	r7, r0
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d167      	bne.n	800a372 <__gethex+0x10e>
 800a2a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a2a6:	4626      	mov	r6, r4
 800a2a8:	f7ff ffc6 	bl	800a238 <__hexdig_fun>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d062      	beq.n	800a376 <__gethex+0x112>
 800a2b0:	4623      	mov	r3, r4
 800a2b2:	7818      	ldrb	r0, [r3, #0]
 800a2b4:	4699      	mov	r9, r3
 800a2b6:	2830      	cmp	r0, #48	@ 0x30
 800a2b8:	f103 0301 	add.w	r3, r3, #1
 800a2bc:	d0f9      	beq.n	800a2b2 <__gethex+0x4e>
 800a2be:	f7ff ffbb 	bl	800a238 <__hexdig_fun>
 800a2c2:	fab0 f580 	clz	r5, r0
 800a2c6:	f04f 0b01 	mov.w	fp, #1
 800a2ca:	096d      	lsrs	r5, r5, #5
 800a2cc:	464a      	mov	r2, r9
 800a2ce:	4616      	mov	r6, r2
 800a2d0:	7830      	ldrb	r0, [r6, #0]
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	f7ff ffb0 	bl	800a238 <__hexdig_fun>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d1f8      	bne.n	800a2ce <__gethex+0x6a>
 800a2dc:	2201      	movs	r2, #1
 800a2de:	4630      	mov	r0, r6
 800a2e0:	498c      	ldr	r1, [pc, #560]	@ (800a514 <__gethex+0x2b0>)
 800a2e2:	f7ff ff13 	bl	800a10c <strncmp>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d13f      	bne.n	800a36a <__gethex+0x106>
 800a2ea:	b944      	cbnz	r4, 800a2fe <__gethex+0x9a>
 800a2ec:	1c74      	adds	r4, r6, #1
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	4616      	mov	r6, r2
 800a2f2:	7830      	ldrb	r0, [r6, #0]
 800a2f4:	3201      	adds	r2, #1
 800a2f6:	f7ff ff9f 	bl	800a238 <__hexdig_fun>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d1f8      	bne.n	800a2f0 <__gethex+0x8c>
 800a2fe:	1ba4      	subs	r4, r4, r6
 800a300:	00a7      	lsls	r7, r4, #2
 800a302:	7833      	ldrb	r3, [r6, #0]
 800a304:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a308:	2b50      	cmp	r3, #80	@ 0x50
 800a30a:	d13e      	bne.n	800a38a <__gethex+0x126>
 800a30c:	7873      	ldrb	r3, [r6, #1]
 800a30e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a310:	d033      	beq.n	800a37a <__gethex+0x116>
 800a312:	2b2d      	cmp	r3, #45	@ 0x2d
 800a314:	d034      	beq.n	800a380 <__gethex+0x11c>
 800a316:	2400      	movs	r4, #0
 800a318:	1c71      	adds	r1, r6, #1
 800a31a:	7808      	ldrb	r0, [r1, #0]
 800a31c:	f7ff ff8c 	bl	800a238 <__hexdig_fun>
 800a320:	1e43      	subs	r3, r0, #1
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b18      	cmp	r3, #24
 800a326:	d830      	bhi.n	800a38a <__gethex+0x126>
 800a328:	f1a0 0210 	sub.w	r2, r0, #16
 800a32c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a330:	f7ff ff82 	bl	800a238 <__hexdig_fun>
 800a334:	f100 3cff 	add.w	ip, r0, #4294967295
 800a338:	fa5f fc8c 	uxtb.w	ip, ip
 800a33c:	f1bc 0f18 	cmp.w	ip, #24
 800a340:	f04f 030a 	mov.w	r3, #10
 800a344:	d91e      	bls.n	800a384 <__gethex+0x120>
 800a346:	b104      	cbz	r4, 800a34a <__gethex+0xe6>
 800a348:	4252      	negs	r2, r2
 800a34a:	4417      	add	r7, r2
 800a34c:	f8ca 1000 	str.w	r1, [sl]
 800a350:	b1ed      	cbz	r5, 800a38e <__gethex+0x12a>
 800a352:	f1bb 0f00 	cmp.w	fp, #0
 800a356:	bf0c      	ite	eq
 800a358:	2506      	moveq	r5, #6
 800a35a:	2500      	movne	r5, #0
 800a35c:	4628      	mov	r0, r5
 800a35e:	b005      	add	sp, #20
 800a360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a364:	2500      	movs	r5, #0
 800a366:	462c      	mov	r4, r5
 800a368:	e7b0      	b.n	800a2cc <__gethex+0x68>
 800a36a:	2c00      	cmp	r4, #0
 800a36c:	d1c7      	bne.n	800a2fe <__gethex+0x9a>
 800a36e:	4627      	mov	r7, r4
 800a370:	e7c7      	b.n	800a302 <__gethex+0x9e>
 800a372:	464e      	mov	r6, r9
 800a374:	462f      	mov	r7, r5
 800a376:	2501      	movs	r5, #1
 800a378:	e7c3      	b.n	800a302 <__gethex+0x9e>
 800a37a:	2400      	movs	r4, #0
 800a37c:	1cb1      	adds	r1, r6, #2
 800a37e:	e7cc      	b.n	800a31a <__gethex+0xb6>
 800a380:	2401      	movs	r4, #1
 800a382:	e7fb      	b.n	800a37c <__gethex+0x118>
 800a384:	fb03 0002 	mla	r0, r3, r2, r0
 800a388:	e7ce      	b.n	800a328 <__gethex+0xc4>
 800a38a:	4631      	mov	r1, r6
 800a38c:	e7de      	b.n	800a34c <__gethex+0xe8>
 800a38e:	4629      	mov	r1, r5
 800a390:	eba6 0309 	sub.w	r3, r6, r9
 800a394:	3b01      	subs	r3, #1
 800a396:	2b07      	cmp	r3, #7
 800a398:	dc0a      	bgt.n	800a3b0 <__gethex+0x14c>
 800a39a:	9801      	ldr	r0, [sp, #4]
 800a39c:	f7fe f9e2 	bl	8008764 <_Balloc>
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	b940      	cbnz	r0, 800a3b6 <__gethex+0x152>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	21e4      	movs	r1, #228	@ 0xe4
 800a3a8:	4b5b      	ldr	r3, [pc, #364]	@ (800a518 <__gethex+0x2b4>)
 800a3aa:	485c      	ldr	r0, [pc, #368]	@ (800a51c <__gethex+0x2b8>)
 800a3ac:	f7fd fa6e 	bl	800788c <__assert_func>
 800a3b0:	3101      	adds	r1, #1
 800a3b2:	105b      	asrs	r3, r3, #1
 800a3b4:	e7ef      	b.n	800a396 <__gethex+0x132>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f100 0a14 	add.w	sl, r0, #20
 800a3bc:	4655      	mov	r5, sl
 800a3be:	469b      	mov	fp, r3
 800a3c0:	45b1      	cmp	r9, r6
 800a3c2:	d337      	bcc.n	800a434 <__gethex+0x1d0>
 800a3c4:	f845 bb04 	str.w	fp, [r5], #4
 800a3c8:	eba5 050a 	sub.w	r5, r5, sl
 800a3cc:	10ad      	asrs	r5, r5, #2
 800a3ce:	6125      	str	r5, [r4, #16]
 800a3d0:	4658      	mov	r0, fp
 800a3d2:	f7fe fab9 	bl	8008948 <__hi0bits>
 800a3d6:	016d      	lsls	r5, r5, #5
 800a3d8:	f8d8 6000 	ldr.w	r6, [r8]
 800a3dc:	1a2d      	subs	r5, r5, r0
 800a3de:	42b5      	cmp	r5, r6
 800a3e0:	dd54      	ble.n	800a48c <__gethex+0x228>
 800a3e2:	1bad      	subs	r5, r5, r6
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f7fe fe41 	bl	800906e <__any_on>
 800a3ec:	4681      	mov	r9, r0
 800a3ee:	b178      	cbz	r0, 800a410 <__gethex+0x1ac>
 800a3f0:	f04f 0901 	mov.w	r9, #1
 800a3f4:	1e6b      	subs	r3, r5, #1
 800a3f6:	1159      	asrs	r1, r3, #5
 800a3f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a3fc:	f003 021f 	and.w	r2, r3, #31
 800a400:	fa09 f202 	lsl.w	r2, r9, r2
 800a404:	420a      	tst	r2, r1
 800a406:	d003      	beq.n	800a410 <__gethex+0x1ac>
 800a408:	454b      	cmp	r3, r9
 800a40a:	dc36      	bgt.n	800a47a <__gethex+0x216>
 800a40c:	f04f 0902 	mov.w	r9, #2
 800a410:	4629      	mov	r1, r5
 800a412:	4620      	mov	r0, r4
 800a414:	f7ff febd 	bl	800a192 <rshift>
 800a418:	442f      	add	r7, r5
 800a41a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a41e:	42bb      	cmp	r3, r7
 800a420:	da42      	bge.n	800a4a8 <__gethex+0x244>
 800a422:	4621      	mov	r1, r4
 800a424:	9801      	ldr	r0, [sp, #4]
 800a426:	f7fe f9dd 	bl	80087e4 <_Bfree>
 800a42a:	2300      	movs	r3, #0
 800a42c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a42e:	25a3      	movs	r5, #163	@ 0xa3
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	e793      	b.n	800a35c <__gethex+0xf8>
 800a434:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a438:	2a2e      	cmp	r2, #46	@ 0x2e
 800a43a:	d012      	beq.n	800a462 <__gethex+0x1fe>
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	d104      	bne.n	800a44a <__gethex+0x1e6>
 800a440:	f845 bb04 	str.w	fp, [r5], #4
 800a444:	f04f 0b00 	mov.w	fp, #0
 800a448:	465b      	mov	r3, fp
 800a44a:	7830      	ldrb	r0, [r6, #0]
 800a44c:	9303      	str	r3, [sp, #12]
 800a44e:	f7ff fef3 	bl	800a238 <__hexdig_fun>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	f000 000f 	and.w	r0, r0, #15
 800a458:	4098      	lsls	r0, r3
 800a45a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a45e:	3304      	adds	r3, #4
 800a460:	e7ae      	b.n	800a3c0 <__gethex+0x15c>
 800a462:	45b1      	cmp	r9, r6
 800a464:	d8ea      	bhi.n	800a43c <__gethex+0x1d8>
 800a466:	2201      	movs	r2, #1
 800a468:	4630      	mov	r0, r6
 800a46a:	492a      	ldr	r1, [pc, #168]	@ (800a514 <__gethex+0x2b0>)
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	f7ff fe4d 	bl	800a10c <strncmp>
 800a472:	9b03      	ldr	r3, [sp, #12]
 800a474:	2800      	cmp	r0, #0
 800a476:	d1e1      	bne.n	800a43c <__gethex+0x1d8>
 800a478:	e7a2      	b.n	800a3c0 <__gethex+0x15c>
 800a47a:	4620      	mov	r0, r4
 800a47c:	1ea9      	subs	r1, r5, #2
 800a47e:	f7fe fdf6 	bl	800906e <__any_on>
 800a482:	2800      	cmp	r0, #0
 800a484:	d0c2      	beq.n	800a40c <__gethex+0x1a8>
 800a486:	f04f 0903 	mov.w	r9, #3
 800a48a:	e7c1      	b.n	800a410 <__gethex+0x1ac>
 800a48c:	da09      	bge.n	800a4a2 <__gethex+0x23e>
 800a48e:	1b75      	subs	r5, r6, r5
 800a490:	4621      	mov	r1, r4
 800a492:	462a      	mov	r2, r5
 800a494:	9801      	ldr	r0, [sp, #4]
 800a496:	f7fe fbbb 	bl	8008c10 <__lshift>
 800a49a:	4604      	mov	r4, r0
 800a49c:	1b7f      	subs	r7, r7, r5
 800a49e:	f100 0a14 	add.w	sl, r0, #20
 800a4a2:	f04f 0900 	mov.w	r9, #0
 800a4a6:	e7b8      	b.n	800a41a <__gethex+0x1b6>
 800a4a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4ac:	42bd      	cmp	r5, r7
 800a4ae:	dd6f      	ble.n	800a590 <__gethex+0x32c>
 800a4b0:	1bed      	subs	r5, r5, r7
 800a4b2:	42ae      	cmp	r6, r5
 800a4b4:	dc34      	bgt.n	800a520 <__gethex+0x2bc>
 800a4b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d022      	beq.n	800a504 <__gethex+0x2a0>
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d024      	beq.n	800a50c <__gethex+0x2a8>
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d115      	bne.n	800a4f2 <__gethex+0x28e>
 800a4c6:	42ae      	cmp	r6, r5
 800a4c8:	d113      	bne.n	800a4f2 <__gethex+0x28e>
 800a4ca:	2e01      	cmp	r6, #1
 800a4cc:	d10b      	bne.n	800a4e6 <__gethex+0x282>
 800a4ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a4d2:	9a02      	ldr	r2, [sp, #8]
 800a4d4:	2562      	movs	r5, #98	@ 0x62
 800a4d6:	6013      	str	r3, [r2, #0]
 800a4d8:	2301      	movs	r3, #1
 800a4da:	6123      	str	r3, [r4, #16]
 800a4dc:	f8ca 3000 	str.w	r3, [sl]
 800a4e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4e2:	601c      	str	r4, [r3, #0]
 800a4e4:	e73a      	b.n	800a35c <__gethex+0xf8>
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	1e71      	subs	r1, r6, #1
 800a4ea:	f7fe fdc0 	bl	800906e <__any_on>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d1ed      	bne.n	800a4ce <__gethex+0x26a>
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	9801      	ldr	r0, [sp, #4]
 800a4f6:	f7fe f975 	bl	80087e4 <_Bfree>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4fe:	2550      	movs	r5, #80	@ 0x50
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	e72b      	b.n	800a35c <__gethex+0xf8>
 800a504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1f3      	bne.n	800a4f2 <__gethex+0x28e>
 800a50a:	e7e0      	b.n	800a4ce <__gethex+0x26a>
 800a50c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1dd      	bne.n	800a4ce <__gethex+0x26a>
 800a512:	e7ee      	b.n	800a4f2 <__gethex+0x28e>
 800a514:	0800d110 	.word	0x0800d110
 800a518:	0800cfa8 	.word	0x0800cfa8
 800a51c:	0800d181 	.word	0x0800d181
 800a520:	1e6f      	subs	r7, r5, #1
 800a522:	f1b9 0f00 	cmp.w	r9, #0
 800a526:	d130      	bne.n	800a58a <__gethex+0x326>
 800a528:	b127      	cbz	r7, 800a534 <__gethex+0x2d0>
 800a52a:	4639      	mov	r1, r7
 800a52c:	4620      	mov	r0, r4
 800a52e:	f7fe fd9e 	bl	800906e <__any_on>
 800a532:	4681      	mov	r9, r0
 800a534:	2301      	movs	r3, #1
 800a536:	4629      	mov	r1, r5
 800a538:	1b76      	subs	r6, r6, r5
 800a53a:	2502      	movs	r5, #2
 800a53c:	117a      	asrs	r2, r7, #5
 800a53e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a542:	f007 071f 	and.w	r7, r7, #31
 800a546:	40bb      	lsls	r3, r7
 800a548:	4213      	tst	r3, r2
 800a54a:	4620      	mov	r0, r4
 800a54c:	bf18      	it	ne
 800a54e:	f049 0902 	orrne.w	r9, r9, #2
 800a552:	f7ff fe1e 	bl	800a192 <rshift>
 800a556:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a55a:	f1b9 0f00 	cmp.w	r9, #0
 800a55e:	d047      	beq.n	800a5f0 <__gethex+0x38c>
 800a560:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a564:	2b02      	cmp	r3, #2
 800a566:	d015      	beq.n	800a594 <__gethex+0x330>
 800a568:	2b03      	cmp	r3, #3
 800a56a:	d017      	beq.n	800a59c <__gethex+0x338>
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d109      	bne.n	800a584 <__gethex+0x320>
 800a570:	f019 0f02 	tst.w	r9, #2
 800a574:	d006      	beq.n	800a584 <__gethex+0x320>
 800a576:	f8da 3000 	ldr.w	r3, [sl]
 800a57a:	ea49 0903 	orr.w	r9, r9, r3
 800a57e:	f019 0f01 	tst.w	r9, #1
 800a582:	d10e      	bne.n	800a5a2 <__gethex+0x33e>
 800a584:	f045 0510 	orr.w	r5, r5, #16
 800a588:	e032      	b.n	800a5f0 <__gethex+0x38c>
 800a58a:	f04f 0901 	mov.w	r9, #1
 800a58e:	e7d1      	b.n	800a534 <__gethex+0x2d0>
 800a590:	2501      	movs	r5, #1
 800a592:	e7e2      	b.n	800a55a <__gethex+0x2f6>
 800a594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a596:	f1c3 0301 	rsb	r3, r3, #1
 800a59a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a59c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0f0      	beq.n	800a584 <__gethex+0x320>
 800a5a2:	f04f 0c00 	mov.w	ip, #0
 800a5a6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5aa:	f104 0314 	add.w	r3, r4, #20
 800a5ae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a5b2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a5c0:	d01b      	beq.n	800a5fa <__gethex+0x396>
 800a5c2:	3201      	adds	r2, #1
 800a5c4:	6002      	str	r2, [r0, #0]
 800a5c6:	2d02      	cmp	r5, #2
 800a5c8:	f104 0314 	add.w	r3, r4, #20
 800a5cc:	d13c      	bne.n	800a648 <__gethex+0x3e4>
 800a5ce:	f8d8 2000 	ldr.w	r2, [r8]
 800a5d2:	3a01      	subs	r2, #1
 800a5d4:	42b2      	cmp	r2, r6
 800a5d6:	d109      	bne.n	800a5ec <__gethex+0x388>
 800a5d8:	2201      	movs	r2, #1
 800a5da:	1171      	asrs	r1, r6, #5
 800a5dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a5e0:	f006 061f 	and.w	r6, r6, #31
 800a5e4:	fa02 f606 	lsl.w	r6, r2, r6
 800a5e8:	421e      	tst	r6, r3
 800a5ea:	d13a      	bne.n	800a662 <__gethex+0x3fe>
 800a5ec:	f045 0520 	orr.w	r5, r5, #32
 800a5f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5f2:	601c      	str	r4, [r3, #0]
 800a5f4:	9b02      	ldr	r3, [sp, #8]
 800a5f6:	601f      	str	r7, [r3, #0]
 800a5f8:	e6b0      	b.n	800a35c <__gethex+0xf8>
 800a5fa:	4299      	cmp	r1, r3
 800a5fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a600:	d8d9      	bhi.n	800a5b6 <__gethex+0x352>
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	459b      	cmp	fp, r3
 800a606:	db17      	blt.n	800a638 <__gethex+0x3d4>
 800a608:	6861      	ldr	r1, [r4, #4]
 800a60a:	9801      	ldr	r0, [sp, #4]
 800a60c:	3101      	adds	r1, #1
 800a60e:	f7fe f8a9 	bl	8008764 <_Balloc>
 800a612:	4681      	mov	r9, r0
 800a614:	b918      	cbnz	r0, 800a61e <__gethex+0x3ba>
 800a616:	4602      	mov	r2, r0
 800a618:	2184      	movs	r1, #132	@ 0x84
 800a61a:	4b19      	ldr	r3, [pc, #100]	@ (800a680 <__gethex+0x41c>)
 800a61c:	e6c5      	b.n	800a3aa <__gethex+0x146>
 800a61e:	6922      	ldr	r2, [r4, #16]
 800a620:	f104 010c 	add.w	r1, r4, #12
 800a624:	3202      	adds	r2, #2
 800a626:	0092      	lsls	r2, r2, #2
 800a628:	300c      	adds	r0, #12
 800a62a:	f7fd f91c 	bl	8007866 <memcpy>
 800a62e:	4621      	mov	r1, r4
 800a630:	9801      	ldr	r0, [sp, #4]
 800a632:	f7fe f8d7 	bl	80087e4 <_Bfree>
 800a636:	464c      	mov	r4, r9
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	1c5a      	adds	r2, r3, #1
 800a63c:	6122      	str	r2, [r4, #16]
 800a63e:	2201      	movs	r2, #1
 800a640:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a644:	615a      	str	r2, [r3, #20]
 800a646:	e7be      	b.n	800a5c6 <__gethex+0x362>
 800a648:	6922      	ldr	r2, [r4, #16]
 800a64a:	455a      	cmp	r2, fp
 800a64c:	dd0b      	ble.n	800a666 <__gethex+0x402>
 800a64e:	2101      	movs	r1, #1
 800a650:	4620      	mov	r0, r4
 800a652:	f7ff fd9e 	bl	800a192 <rshift>
 800a656:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a65a:	3701      	adds	r7, #1
 800a65c:	42bb      	cmp	r3, r7
 800a65e:	f6ff aee0 	blt.w	800a422 <__gethex+0x1be>
 800a662:	2501      	movs	r5, #1
 800a664:	e7c2      	b.n	800a5ec <__gethex+0x388>
 800a666:	f016 061f 	ands.w	r6, r6, #31
 800a66a:	d0fa      	beq.n	800a662 <__gethex+0x3fe>
 800a66c:	4453      	add	r3, sl
 800a66e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a672:	f7fe f969 	bl	8008948 <__hi0bits>
 800a676:	f1c6 0620 	rsb	r6, r6, #32
 800a67a:	42b0      	cmp	r0, r6
 800a67c:	dbe7      	blt.n	800a64e <__gethex+0x3ea>
 800a67e:	e7f0      	b.n	800a662 <__gethex+0x3fe>
 800a680:	0800cfa8 	.word	0x0800cfa8

0800a684 <L_shift>:
 800a684:	f1c2 0208 	rsb	r2, r2, #8
 800a688:	0092      	lsls	r2, r2, #2
 800a68a:	b570      	push	{r4, r5, r6, lr}
 800a68c:	f1c2 0620 	rsb	r6, r2, #32
 800a690:	6843      	ldr	r3, [r0, #4]
 800a692:	6804      	ldr	r4, [r0, #0]
 800a694:	fa03 f506 	lsl.w	r5, r3, r6
 800a698:	432c      	orrs	r4, r5
 800a69a:	40d3      	lsrs	r3, r2
 800a69c:	6004      	str	r4, [r0, #0]
 800a69e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6a2:	4288      	cmp	r0, r1
 800a6a4:	d3f4      	bcc.n	800a690 <L_shift+0xc>
 800a6a6:	bd70      	pop	{r4, r5, r6, pc}

0800a6a8 <__match>:
 800a6a8:	b530      	push	{r4, r5, lr}
 800a6aa:	6803      	ldr	r3, [r0, #0]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6b2:	b914      	cbnz	r4, 800a6ba <__match+0x12>
 800a6b4:	6003      	str	r3, [r0, #0]
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	bd30      	pop	{r4, r5, pc}
 800a6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a6c2:	2d19      	cmp	r5, #25
 800a6c4:	bf98      	it	ls
 800a6c6:	3220      	addls	r2, #32
 800a6c8:	42a2      	cmp	r2, r4
 800a6ca:	d0f0      	beq.n	800a6ae <__match+0x6>
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	e7f3      	b.n	800a6b8 <__match+0x10>

0800a6d0 <__hexnan>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	2500      	movs	r5, #0
 800a6d6:	680b      	ldr	r3, [r1, #0]
 800a6d8:	4682      	mov	sl, r0
 800a6da:	115e      	asrs	r6, r3, #5
 800a6dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a6e0:	f013 031f 	ands.w	r3, r3, #31
 800a6e4:	bf18      	it	ne
 800a6e6:	3604      	addne	r6, #4
 800a6e8:	1f37      	subs	r7, r6, #4
 800a6ea:	4690      	mov	r8, r2
 800a6ec:	46b9      	mov	r9, r7
 800a6ee:	463c      	mov	r4, r7
 800a6f0:	46ab      	mov	fp, r5
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	6801      	ldr	r1, [r0, #0]
 800a6f6:	9301      	str	r3, [sp, #4]
 800a6f8:	f846 5c04 	str.w	r5, [r6, #-4]
 800a6fc:	9502      	str	r5, [sp, #8]
 800a6fe:	784a      	ldrb	r2, [r1, #1]
 800a700:	1c4b      	adds	r3, r1, #1
 800a702:	9303      	str	r3, [sp, #12]
 800a704:	b342      	cbz	r2, 800a758 <__hexnan+0x88>
 800a706:	4610      	mov	r0, r2
 800a708:	9105      	str	r1, [sp, #20]
 800a70a:	9204      	str	r2, [sp, #16]
 800a70c:	f7ff fd94 	bl	800a238 <__hexdig_fun>
 800a710:	2800      	cmp	r0, #0
 800a712:	d151      	bne.n	800a7b8 <__hexnan+0xe8>
 800a714:	9a04      	ldr	r2, [sp, #16]
 800a716:	9905      	ldr	r1, [sp, #20]
 800a718:	2a20      	cmp	r2, #32
 800a71a:	d818      	bhi.n	800a74e <__hexnan+0x7e>
 800a71c:	9b02      	ldr	r3, [sp, #8]
 800a71e:	459b      	cmp	fp, r3
 800a720:	dd13      	ble.n	800a74a <__hexnan+0x7a>
 800a722:	454c      	cmp	r4, r9
 800a724:	d206      	bcs.n	800a734 <__hexnan+0x64>
 800a726:	2d07      	cmp	r5, #7
 800a728:	dc04      	bgt.n	800a734 <__hexnan+0x64>
 800a72a:	462a      	mov	r2, r5
 800a72c:	4649      	mov	r1, r9
 800a72e:	4620      	mov	r0, r4
 800a730:	f7ff ffa8 	bl	800a684 <L_shift>
 800a734:	4544      	cmp	r4, r8
 800a736:	d952      	bls.n	800a7de <__hexnan+0x10e>
 800a738:	2300      	movs	r3, #0
 800a73a:	f1a4 0904 	sub.w	r9, r4, #4
 800a73e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a742:	461d      	mov	r5, r3
 800a744:	464c      	mov	r4, r9
 800a746:	f8cd b008 	str.w	fp, [sp, #8]
 800a74a:	9903      	ldr	r1, [sp, #12]
 800a74c:	e7d7      	b.n	800a6fe <__hexnan+0x2e>
 800a74e:	2a29      	cmp	r2, #41	@ 0x29
 800a750:	d157      	bne.n	800a802 <__hexnan+0x132>
 800a752:	3102      	adds	r1, #2
 800a754:	f8ca 1000 	str.w	r1, [sl]
 800a758:	f1bb 0f00 	cmp.w	fp, #0
 800a75c:	d051      	beq.n	800a802 <__hexnan+0x132>
 800a75e:	454c      	cmp	r4, r9
 800a760:	d206      	bcs.n	800a770 <__hexnan+0xa0>
 800a762:	2d07      	cmp	r5, #7
 800a764:	dc04      	bgt.n	800a770 <__hexnan+0xa0>
 800a766:	462a      	mov	r2, r5
 800a768:	4649      	mov	r1, r9
 800a76a:	4620      	mov	r0, r4
 800a76c:	f7ff ff8a 	bl	800a684 <L_shift>
 800a770:	4544      	cmp	r4, r8
 800a772:	d936      	bls.n	800a7e2 <__hexnan+0x112>
 800a774:	4623      	mov	r3, r4
 800a776:	f1a8 0204 	sub.w	r2, r8, #4
 800a77a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a77e:	429f      	cmp	r7, r3
 800a780:	f842 1f04 	str.w	r1, [r2, #4]!
 800a784:	d2f9      	bcs.n	800a77a <__hexnan+0xaa>
 800a786:	1b3b      	subs	r3, r7, r4
 800a788:	f023 0303 	bic.w	r3, r3, #3
 800a78c:	3304      	adds	r3, #4
 800a78e:	3401      	adds	r4, #1
 800a790:	3e03      	subs	r6, #3
 800a792:	42b4      	cmp	r4, r6
 800a794:	bf88      	it	hi
 800a796:	2304      	movhi	r3, #4
 800a798:	2200      	movs	r2, #0
 800a79a:	4443      	add	r3, r8
 800a79c:	f843 2b04 	str.w	r2, [r3], #4
 800a7a0:	429f      	cmp	r7, r3
 800a7a2:	d2fb      	bcs.n	800a79c <__hexnan+0xcc>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	b91b      	cbnz	r3, 800a7b0 <__hexnan+0xe0>
 800a7a8:	4547      	cmp	r7, r8
 800a7aa:	d128      	bne.n	800a7fe <__hexnan+0x12e>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	603b      	str	r3, [r7, #0]
 800a7b0:	2005      	movs	r0, #5
 800a7b2:	b007      	add	sp, #28
 800a7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b8:	3501      	adds	r5, #1
 800a7ba:	2d08      	cmp	r5, #8
 800a7bc:	f10b 0b01 	add.w	fp, fp, #1
 800a7c0:	dd06      	ble.n	800a7d0 <__hexnan+0x100>
 800a7c2:	4544      	cmp	r4, r8
 800a7c4:	d9c1      	bls.n	800a74a <__hexnan+0x7a>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	2501      	movs	r5, #1
 800a7ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7ce:	3c04      	subs	r4, #4
 800a7d0:	6822      	ldr	r2, [r4, #0]
 800a7d2:	f000 000f 	and.w	r0, r0, #15
 800a7d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a7da:	6020      	str	r0, [r4, #0]
 800a7dc:	e7b5      	b.n	800a74a <__hexnan+0x7a>
 800a7de:	2508      	movs	r5, #8
 800a7e0:	e7b3      	b.n	800a74a <__hexnan+0x7a>
 800a7e2:	9b01      	ldr	r3, [sp, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0dd      	beq.n	800a7a4 <__hexnan+0xd4>
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ec:	f1c3 0320 	rsb	r3, r3, #32
 800a7f0:	40da      	lsrs	r2, r3
 800a7f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a7fc:	e7d2      	b.n	800a7a4 <__hexnan+0xd4>
 800a7fe:	3f04      	subs	r7, #4
 800a800:	e7d0      	b.n	800a7a4 <__hexnan+0xd4>
 800a802:	2004      	movs	r0, #4
 800a804:	e7d5      	b.n	800a7b2 <__hexnan+0xe2>

0800a806 <__ascii_mbtowc>:
 800a806:	b082      	sub	sp, #8
 800a808:	b901      	cbnz	r1, 800a80c <__ascii_mbtowc+0x6>
 800a80a:	a901      	add	r1, sp, #4
 800a80c:	b142      	cbz	r2, 800a820 <__ascii_mbtowc+0x1a>
 800a80e:	b14b      	cbz	r3, 800a824 <__ascii_mbtowc+0x1e>
 800a810:	7813      	ldrb	r3, [r2, #0]
 800a812:	600b      	str	r3, [r1, #0]
 800a814:	7812      	ldrb	r2, [r2, #0]
 800a816:	1e10      	subs	r0, r2, #0
 800a818:	bf18      	it	ne
 800a81a:	2001      	movne	r0, #1
 800a81c:	b002      	add	sp, #8
 800a81e:	4770      	bx	lr
 800a820:	4610      	mov	r0, r2
 800a822:	e7fb      	b.n	800a81c <__ascii_mbtowc+0x16>
 800a824:	f06f 0001 	mvn.w	r0, #1
 800a828:	e7f8      	b.n	800a81c <__ascii_mbtowc+0x16>

0800a82a <_realloc_r>:
 800a82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a82e:	4680      	mov	r8, r0
 800a830:	4615      	mov	r5, r2
 800a832:	460c      	mov	r4, r1
 800a834:	b921      	cbnz	r1, 800a840 <_realloc_r+0x16>
 800a836:	4611      	mov	r1, r2
 800a838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a83c:	f7fd bf06 	b.w	800864c <_malloc_r>
 800a840:	b92a      	cbnz	r2, 800a84e <_realloc_r+0x24>
 800a842:	f7fd fe91 	bl	8008568 <_free_r>
 800a846:	2400      	movs	r4, #0
 800a848:	4620      	mov	r0, r4
 800a84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a84e:	f000 fa3f 	bl	800acd0 <_malloc_usable_size_r>
 800a852:	4285      	cmp	r5, r0
 800a854:	4606      	mov	r6, r0
 800a856:	d802      	bhi.n	800a85e <_realloc_r+0x34>
 800a858:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a85c:	d8f4      	bhi.n	800a848 <_realloc_r+0x1e>
 800a85e:	4629      	mov	r1, r5
 800a860:	4640      	mov	r0, r8
 800a862:	f7fd fef3 	bl	800864c <_malloc_r>
 800a866:	4607      	mov	r7, r0
 800a868:	2800      	cmp	r0, #0
 800a86a:	d0ec      	beq.n	800a846 <_realloc_r+0x1c>
 800a86c:	42b5      	cmp	r5, r6
 800a86e:	462a      	mov	r2, r5
 800a870:	4621      	mov	r1, r4
 800a872:	bf28      	it	cs
 800a874:	4632      	movcs	r2, r6
 800a876:	f7fc fff6 	bl	8007866 <memcpy>
 800a87a:	4621      	mov	r1, r4
 800a87c:	4640      	mov	r0, r8
 800a87e:	f7fd fe73 	bl	8008568 <_free_r>
 800a882:	463c      	mov	r4, r7
 800a884:	e7e0      	b.n	800a848 <_realloc_r+0x1e>

0800a886 <__ascii_wctomb>:
 800a886:	4603      	mov	r3, r0
 800a888:	4608      	mov	r0, r1
 800a88a:	b141      	cbz	r1, 800a89e <__ascii_wctomb+0x18>
 800a88c:	2aff      	cmp	r2, #255	@ 0xff
 800a88e:	d904      	bls.n	800a89a <__ascii_wctomb+0x14>
 800a890:	228a      	movs	r2, #138	@ 0x8a
 800a892:	f04f 30ff 	mov.w	r0, #4294967295
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	4770      	bx	lr
 800a89a:	2001      	movs	r0, #1
 800a89c:	700a      	strb	r2, [r1, #0]
 800a89e:	4770      	bx	lr

0800a8a0 <__sfputc_r>:
 800a8a0:	6893      	ldr	r3, [r2, #8]
 800a8a2:	b410      	push	{r4}
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	6093      	str	r3, [r2, #8]
 800a8aa:	da07      	bge.n	800a8bc <__sfputc_r+0x1c>
 800a8ac:	6994      	ldr	r4, [r2, #24]
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	db01      	blt.n	800a8b6 <__sfputc_r+0x16>
 800a8b2:	290a      	cmp	r1, #10
 800a8b4:	d102      	bne.n	800a8bc <__sfputc_r+0x1c>
 800a8b6:	bc10      	pop	{r4}
 800a8b8:	f000 b932 	b.w	800ab20 <__swbuf_r>
 800a8bc:	6813      	ldr	r3, [r2, #0]
 800a8be:	1c58      	adds	r0, r3, #1
 800a8c0:	6010      	str	r0, [r2, #0]
 800a8c2:	7019      	strb	r1, [r3, #0]
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	bc10      	pop	{r4}
 800a8c8:	4770      	bx	lr

0800a8ca <__sfputs_r>:
 800a8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	460f      	mov	r7, r1
 800a8d0:	4614      	mov	r4, r2
 800a8d2:	18d5      	adds	r5, r2, r3
 800a8d4:	42ac      	cmp	r4, r5
 800a8d6:	d101      	bne.n	800a8dc <__sfputs_r+0x12>
 800a8d8:	2000      	movs	r0, #0
 800a8da:	e007      	b.n	800a8ec <__sfputs_r+0x22>
 800a8dc:	463a      	mov	r2, r7
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e4:	f7ff ffdc 	bl	800a8a0 <__sfputc_r>
 800a8e8:	1c43      	adds	r3, r0, #1
 800a8ea:	d1f3      	bne.n	800a8d4 <__sfputs_r+0xa>
 800a8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8f0 <_vfiprintf_r>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	4614      	mov	r4, r2
 800a8f8:	4698      	mov	r8, r3
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	b09d      	sub	sp, #116	@ 0x74
 800a8fe:	b118      	cbz	r0, 800a908 <_vfiprintf_r+0x18>
 800a900:	6a03      	ldr	r3, [r0, #32]
 800a902:	b90b      	cbnz	r3, 800a908 <_vfiprintf_r+0x18>
 800a904:	f7fc fdea 	bl	80074dc <__sinit>
 800a908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a90a:	07d9      	lsls	r1, r3, #31
 800a90c:	d405      	bmi.n	800a91a <_vfiprintf_r+0x2a>
 800a90e:	89ab      	ldrh	r3, [r5, #12]
 800a910:	059a      	lsls	r2, r3, #22
 800a912:	d402      	bmi.n	800a91a <_vfiprintf_r+0x2a>
 800a914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a916:	f7fc ff8e 	bl	8007836 <__retarget_lock_acquire_recursive>
 800a91a:	89ab      	ldrh	r3, [r5, #12]
 800a91c:	071b      	lsls	r3, r3, #28
 800a91e:	d501      	bpl.n	800a924 <_vfiprintf_r+0x34>
 800a920:	692b      	ldr	r3, [r5, #16]
 800a922:	b99b      	cbnz	r3, 800a94c <_vfiprintf_r+0x5c>
 800a924:	4629      	mov	r1, r5
 800a926:	4630      	mov	r0, r6
 800a928:	f000 f938 	bl	800ab9c <__swsetup_r>
 800a92c:	b170      	cbz	r0, 800a94c <_vfiprintf_r+0x5c>
 800a92e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a930:	07dc      	lsls	r4, r3, #31
 800a932:	d504      	bpl.n	800a93e <_vfiprintf_r+0x4e>
 800a934:	f04f 30ff 	mov.w	r0, #4294967295
 800a938:	b01d      	add	sp, #116	@ 0x74
 800a93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93e:	89ab      	ldrh	r3, [r5, #12]
 800a940:	0598      	lsls	r0, r3, #22
 800a942:	d4f7      	bmi.n	800a934 <_vfiprintf_r+0x44>
 800a944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a946:	f7fc ff77 	bl	8007838 <__retarget_lock_release_recursive>
 800a94a:	e7f3      	b.n	800a934 <_vfiprintf_r+0x44>
 800a94c:	2300      	movs	r3, #0
 800a94e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a950:	2320      	movs	r3, #32
 800a952:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a956:	2330      	movs	r3, #48	@ 0x30
 800a958:	f04f 0901 	mov.w	r9, #1
 800a95c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a960:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ab0c <_vfiprintf_r+0x21c>
 800a964:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a968:	4623      	mov	r3, r4
 800a96a:	469a      	mov	sl, r3
 800a96c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a970:	b10a      	cbz	r2, 800a976 <_vfiprintf_r+0x86>
 800a972:	2a25      	cmp	r2, #37	@ 0x25
 800a974:	d1f9      	bne.n	800a96a <_vfiprintf_r+0x7a>
 800a976:	ebba 0b04 	subs.w	fp, sl, r4
 800a97a:	d00b      	beq.n	800a994 <_vfiprintf_r+0xa4>
 800a97c:	465b      	mov	r3, fp
 800a97e:	4622      	mov	r2, r4
 800a980:	4629      	mov	r1, r5
 800a982:	4630      	mov	r0, r6
 800a984:	f7ff ffa1 	bl	800a8ca <__sfputs_r>
 800a988:	3001      	adds	r0, #1
 800a98a:	f000 80a7 	beq.w	800aadc <_vfiprintf_r+0x1ec>
 800a98e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a990:	445a      	add	r2, fp
 800a992:	9209      	str	r2, [sp, #36]	@ 0x24
 800a994:	f89a 3000 	ldrb.w	r3, [sl]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 809f 	beq.w	800aadc <_vfiprintf_r+0x1ec>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9a8:	f10a 0a01 	add.w	sl, sl, #1
 800a9ac:	9304      	str	r3, [sp, #16]
 800a9ae:	9307      	str	r3, [sp, #28]
 800a9b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9b6:	4654      	mov	r4, sl
 800a9b8:	2205      	movs	r2, #5
 800a9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9be:	4853      	ldr	r0, [pc, #332]	@ (800ab0c <_vfiprintf_r+0x21c>)
 800a9c0:	f7fc ff43 	bl	800784a <memchr>
 800a9c4:	9a04      	ldr	r2, [sp, #16]
 800a9c6:	b9d8      	cbnz	r0, 800aa00 <_vfiprintf_r+0x110>
 800a9c8:	06d1      	lsls	r1, r2, #27
 800a9ca:	bf44      	itt	mi
 800a9cc:	2320      	movmi	r3, #32
 800a9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9d2:	0713      	lsls	r3, r2, #28
 800a9d4:	bf44      	itt	mi
 800a9d6:	232b      	movmi	r3, #43	@ 0x2b
 800a9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a9e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9e2:	d015      	beq.n	800aa10 <_vfiprintf_r+0x120>
 800a9e4:	4654      	mov	r4, sl
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	f04f 0c0a 	mov.w	ip, #10
 800a9ec:	9a07      	ldr	r2, [sp, #28]
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9f4:	3b30      	subs	r3, #48	@ 0x30
 800a9f6:	2b09      	cmp	r3, #9
 800a9f8:	d94b      	bls.n	800aa92 <_vfiprintf_r+0x1a2>
 800a9fa:	b1b0      	cbz	r0, 800aa2a <_vfiprintf_r+0x13a>
 800a9fc:	9207      	str	r2, [sp, #28]
 800a9fe:	e014      	b.n	800aa2a <_vfiprintf_r+0x13a>
 800aa00:	eba0 0308 	sub.w	r3, r0, r8
 800aa04:	fa09 f303 	lsl.w	r3, r9, r3
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	46a2      	mov	sl, r4
 800aa0c:	9304      	str	r3, [sp, #16]
 800aa0e:	e7d2      	b.n	800a9b6 <_vfiprintf_r+0xc6>
 800aa10:	9b03      	ldr	r3, [sp, #12]
 800aa12:	1d19      	adds	r1, r3, #4
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	9103      	str	r1, [sp, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	bfbb      	ittet	lt
 800aa1c:	425b      	neglt	r3, r3
 800aa1e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa22:	9307      	strge	r3, [sp, #28]
 800aa24:	9307      	strlt	r3, [sp, #28]
 800aa26:	bfb8      	it	lt
 800aa28:	9204      	strlt	r2, [sp, #16]
 800aa2a:	7823      	ldrb	r3, [r4, #0]
 800aa2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa2e:	d10a      	bne.n	800aa46 <_vfiprintf_r+0x156>
 800aa30:	7863      	ldrb	r3, [r4, #1]
 800aa32:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa34:	d132      	bne.n	800aa9c <_vfiprintf_r+0x1ac>
 800aa36:	9b03      	ldr	r3, [sp, #12]
 800aa38:	3402      	adds	r4, #2
 800aa3a:	1d1a      	adds	r2, r3, #4
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	9203      	str	r2, [sp, #12]
 800aa40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ab10 <_vfiprintf_r+0x220>
 800aa4a:	2203      	movs	r2, #3
 800aa4c:	4650      	mov	r0, sl
 800aa4e:	7821      	ldrb	r1, [r4, #0]
 800aa50:	f7fc fefb 	bl	800784a <memchr>
 800aa54:	b138      	cbz	r0, 800aa66 <_vfiprintf_r+0x176>
 800aa56:	2240      	movs	r2, #64	@ 0x40
 800aa58:	9b04      	ldr	r3, [sp, #16]
 800aa5a:	eba0 000a 	sub.w	r0, r0, sl
 800aa5e:	4082      	lsls	r2, r0
 800aa60:	4313      	orrs	r3, r2
 800aa62:	3401      	adds	r4, #1
 800aa64:	9304      	str	r3, [sp, #16]
 800aa66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa6a:	2206      	movs	r2, #6
 800aa6c:	4829      	ldr	r0, [pc, #164]	@ (800ab14 <_vfiprintf_r+0x224>)
 800aa6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa72:	f7fc feea 	bl	800784a <memchr>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d03f      	beq.n	800aafa <_vfiprintf_r+0x20a>
 800aa7a:	4b27      	ldr	r3, [pc, #156]	@ (800ab18 <_vfiprintf_r+0x228>)
 800aa7c:	bb1b      	cbnz	r3, 800aac6 <_vfiprintf_r+0x1d6>
 800aa7e:	9b03      	ldr	r3, [sp, #12]
 800aa80:	3307      	adds	r3, #7
 800aa82:	f023 0307 	bic.w	r3, r3, #7
 800aa86:	3308      	adds	r3, #8
 800aa88:	9303      	str	r3, [sp, #12]
 800aa8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa8c:	443b      	add	r3, r7
 800aa8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa90:	e76a      	b.n	800a968 <_vfiprintf_r+0x78>
 800aa92:	460c      	mov	r4, r1
 800aa94:	2001      	movs	r0, #1
 800aa96:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa9a:	e7a8      	b.n	800a9ee <_vfiprintf_r+0xfe>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f04f 0c0a 	mov.w	ip, #10
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	3401      	adds	r4, #1
 800aaa6:	9305      	str	r3, [sp, #20]
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaae:	3a30      	subs	r2, #48	@ 0x30
 800aab0:	2a09      	cmp	r2, #9
 800aab2:	d903      	bls.n	800aabc <_vfiprintf_r+0x1cc>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d0c6      	beq.n	800aa46 <_vfiprintf_r+0x156>
 800aab8:	9105      	str	r1, [sp, #20]
 800aaba:	e7c4      	b.n	800aa46 <_vfiprintf_r+0x156>
 800aabc:	4604      	mov	r4, r0
 800aabe:	2301      	movs	r3, #1
 800aac0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aac4:	e7f0      	b.n	800aaa8 <_vfiprintf_r+0x1b8>
 800aac6:	ab03      	add	r3, sp, #12
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	462a      	mov	r2, r5
 800aacc:	4630      	mov	r0, r6
 800aace:	4b13      	ldr	r3, [pc, #76]	@ (800ab1c <_vfiprintf_r+0x22c>)
 800aad0:	a904      	add	r1, sp, #16
 800aad2:	f7fb fea9 	bl	8006828 <_printf_float>
 800aad6:	4607      	mov	r7, r0
 800aad8:	1c78      	adds	r0, r7, #1
 800aada:	d1d6      	bne.n	800aa8a <_vfiprintf_r+0x19a>
 800aadc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aade:	07d9      	lsls	r1, r3, #31
 800aae0:	d405      	bmi.n	800aaee <_vfiprintf_r+0x1fe>
 800aae2:	89ab      	ldrh	r3, [r5, #12]
 800aae4:	059a      	lsls	r2, r3, #22
 800aae6:	d402      	bmi.n	800aaee <_vfiprintf_r+0x1fe>
 800aae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaea:	f7fc fea5 	bl	8007838 <__retarget_lock_release_recursive>
 800aaee:	89ab      	ldrh	r3, [r5, #12]
 800aaf0:	065b      	lsls	r3, r3, #25
 800aaf2:	f53f af1f 	bmi.w	800a934 <_vfiprintf_r+0x44>
 800aaf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aaf8:	e71e      	b.n	800a938 <_vfiprintf_r+0x48>
 800aafa:	ab03      	add	r3, sp, #12
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	462a      	mov	r2, r5
 800ab00:	4630      	mov	r0, r6
 800ab02:	4b06      	ldr	r3, [pc, #24]	@ (800ab1c <_vfiprintf_r+0x22c>)
 800ab04:	a904      	add	r1, sp, #16
 800ab06:	f7fc f92d 	bl	8006d64 <_printf_i>
 800ab0a:	e7e4      	b.n	800aad6 <_vfiprintf_r+0x1e6>
 800ab0c:	0800d168 	.word	0x0800d168
 800ab10:	0800d16e 	.word	0x0800d16e
 800ab14:	0800d172 	.word	0x0800d172
 800ab18:	08006829 	.word	0x08006829
 800ab1c:	0800a8cb 	.word	0x0800a8cb

0800ab20 <__swbuf_r>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	460e      	mov	r6, r1
 800ab24:	4614      	mov	r4, r2
 800ab26:	4605      	mov	r5, r0
 800ab28:	b118      	cbz	r0, 800ab32 <__swbuf_r+0x12>
 800ab2a:	6a03      	ldr	r3, [r0, #32]
 800ab2c:	b90b      	cbnz	r3, 800ab32 <__swbuf_r+0x12>
 800ab2e:	f7fc fcd5 	bl	80074dc <__sinit>
 800ab32:	69a3      	ldr	r3, [r4, #24]
 800ab34:	60a3      	str	r3, [r4, #8]
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	071a      	lsls	r2, r3, #28
 800ab3a:	d501      	bpl.n	800ab40 <__swbuf_r+0x20>
 800ab3c:	6923      	ldr	r3, [r4, #16]
 800ab3e:	b943      	cbnz	r3, 800ab52 <__swbuf_r+0x32>
 800ab40:	4621      	mov	r1, r4
 800ab42:	4628      	mov	r0, r5
 800ab44:	f000 f82a 	bl	800ab9c <__swsetup_r>
 800ab48:	b118      	cbz	r0, 800ab52 <__swbuf_r+0x32>
 800ab4a:	f04f 37ff 	mov.w	r7, #4294967295
 800ab4e:	4638      	mov	r0, r7
 800ab50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	6922      	ldr	r2, [r4, #16]
 800ab56:	b2f6      	uxtb	r6, r6
 800ab58:	1a98      	subs	r0, r3, r2
 800ab5a:	6963      	ldr	r3, [r4, #20]
 800ab5c:	4637      	mov	r7, r6
 800ab5e:	4283      	cmp	r3, r0
 800ab60:	dc05      	bgt.n	800ab6e <__swbuf_r+0x4e>
 800ab62:	4621      	mov	r1, r4
 800ab64:	4628      	mov	r0, r5
 800ab66:	f7ff fa7d 	bl	800a064 <_fflush_r>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d1ed      	bne.n	800ab4a <__swbuf_r+0x2a>
 800ab6e:	68a3      	ldr	r3, [r4, #8]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	60a3      	str	r3, [r4, #8]
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	1c5a      	adds	r2, r3, #1
 800ab78:	6022      	str	r2, [r4, #0]
 800ab7a:	701e      	strb	r6, [r3, #0]
 800ab7c:	6962      	ldr	r2, [r4, #20]
 800ab7e:	1c43      	adds	r3, r0, #1
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d004      	beq.n	800ab8e <__swbuf_r+0x6e>
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	07db      	lsls	r3, r3, #31
 800ab88:	d5e1      	bpl.n	800ab4e <__swbuf_r+0x2e>
 800ab8a:	2e0a      	cmp	r6, #10
 800ab8c:	d1df      	bne.n	800ab4e <__swbuf_r+0x2e>
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4628      	mov	r0, r5
 800ab92:	f7ff fa67 	bl	800a064 <_fflush_r>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d0d9      	beq.n	800ab4e <__swbuf_r+0x2e>
 800ab9a:	e7d6      	b.n	800ab4a <__swbuf_r+0x2a>

0800ab9c <__swsetup_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	4b29      	ldr	r3, [pc, #164]	@ (800ac44 <__swsetup_r+0xa8>)
 800aba0:	4605      	mov	r5, r0
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	460c      	mov	r4, r1
 800aba6:	b118      	cbz	r0, 800abb0 <__swsetup_r+0x14>
 800aba8:	6a03      	ldr	r3, [r0, #32]
 800abaa:	b90b      	cbnz	r3, 800abb0 <__swsetup_r+0x14>
 800abac:	f7fc fc96 	bl	80074dc <__sinit>
 800abb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb4:	0719      	lsls	r1, r3, #28
 800abb6:	d422      	bmi.n	800abfe <__swsetup_r+0x62>
 800abb8:	06da      	lsls	r2, r3, #27
 800abba:	d407      	bmi.n	800abcc <__swsetup_r+0x30>
 800abbc:	2209      	movs	r2, #9
 800abbe:	602a      	str	r2, [r5, #0]
 800abc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	81a3      	strh	r3, [r4, #12]
 800abca:	e033      	b.n	800ac34 <__swsetup_r+0x98>
 800abcc:	0758      	lsls	r0, r3, #29
 800abce:	d512      	bpl.n	800abf6 <__swsetup_r+0x5a>
 800abd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abd2:	b141      	cbz	r1, 800abe6 <__swsetup_r+0x4a>
 800abd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abd8:	4299      	cmp	r1, r3
 800abda:	d002      	beq.n	800abe2 <__swsetup_r+0x46>
 800abdc:	4628      	mov	r0, r5
 800abde:	f7fd fcc3 	bl	8008568 <_free_r>
 800abe2:	2300      	movs	r3, #0
 800abe4:	6363      	str	r3, [r4, #52]	@ 0x34
 800abe6:	89a3      	ldrh	r3, [r4, #12]
 800abe8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800abec:	81a3      	strh	r3, [r4, #12]
 800abee:	2300      	movs	r3, #0
 800abf0:	6063      	str	r3, [r4, #4]
 800abf2:	6923      	ldr	r3, [r4, #16]
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f043 0308 	orr.w	r3, r3, #8
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	6923      	ldr	r3, [r4, #16]
 800ac00:	b94b      	cbnz	r3, 800ac16 <__swsetup_r+0x7a>
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac0c:	d003      	beq.n	800ac16 <__swsetup_r+0x7a>
 800ac0e:	4621      	mov	r1, r4
 800ac10:	4628      	mov	r0, r5
 800ac12:	f000 f88a 	bl	800ad2a <__smakebuf_r>
 800ac16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac1a:	f013 0201 	ands.w	r2, r3, #1
 800ac1e:	d00a      	beq.n	800ac36 <__swsetup_r+0x9a>
 800ac20:	2200      	movs	r2, #0
 800ac22:	60a2      	str	r2, [r4, #8]
 800ac24:	6962      	ldr	r2, [r4, #20]
 800ac26:	4252      	negs	r2, r2
 800ac28:	61a2      	str	r2, [r4, #24]
 800ac2a:	6922      	ldr	r2, [r4, #16]
 800ac2c:	b942      	cbnz	r2, 800ac40 <__swsetup_r+0xa4>
 800ac2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac32:	d1c5      	bne.n	800abc0 <__swsetup_r+0x24>
 800ac34:	bd38      	pop	{r3, r4, r5, pc}
 800ac36:	0799      	lsls	r1, r3, #30
 800ac38:	bf58      	it	pl
 800ac3a:	6962      	ldrpl	r2, [r4, #20]
 800ac3c:	60a2      	str	r2, [r4, #8]
 800ac3e:	e7f4      	b.n	800ac2a <__swsetup_r+0x8e>
 800ac40:	2000      	movs	r0, #0
 800ac42:	e7f7      	b.n	800ac34 <__swsetup_r+0x98>
 800ac44:	20000124 	.word	0x20000124

0800ac48 <_raise_r>:
 800ac48:	291f      	cmp	r1, #31
 800ac4a:	b538      	push	{r3, r4, r5, lr}
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	d904      	bls.n	800ac5c <_raise_r+0x14>
 800ac52:	2316      	movs	r3, #22
 800ac54:	6003      	str	r3, [r0, #0]
 800ac56:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ac5e:	b112      	cbz	r2, 800ac66 <_raise_r+0x1e>
 800ac60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac64:	b94b      	cbnz	r3, 800ac7a <_raise_r+0x32>
 800ac66:	4628      	mov	r0, r5
 800ac68:	f000 f830 	bl	800accc <_getpid_r>
 800ac6c:	4622      	mov	r2, r4
 800ac6e:	4601      	mov	r1, r0
 800ac70:	4628      	mov	r0, r5
 800ac72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac76:	f000 b817 	b.w	800aca8 <_kill_r>
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d00a      	beq.n	800ac94 <_raise_r+0x4c>
 800ac7e:	1c59      	adds	r1, r3, #1
 800ac80:	d103      	bne.n	800ac8a <_raise_r+0x42>
 800ac82:	2316      	movs	r3, #22
 800ac84:	6003      	str	r3, [r0, #0]
 800ac86:	2001      	movs	r0, #1
 800ac88:	e7e7      	b.n	800ac5a <_raise_r+0x12>
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac92:	4798      	blx	r3
 800ac94:	2000      	movs	r0, #0
 800ac96:	e7e0      	b.n	800ac5a <_raise_r+0x12>

0800ac98 <raise>:
 800ac98:	4b02      	ldr	r3, [pc, #8]	@ (800aca4 <raise+0xc>)
 800ac9a:	4601      	mov	r1, r0
 800ac9c:	6818      	ldr	r0, [r3, #0]
 800ac9e:	f7ff bfd3 	b.w	800ac48 <_raise_r>
 800aca2:	bf00      	nop
 800aca4:	20000124 	.word	0x20000124

0800aca8 <_kill_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	2300      	movs	r3, #0
 800acac:	4d06      	ldr	r5, [pc, #24]	@ (800acc8 <_kill_r+0x20>)
 800acae:	4604      	mov	r4, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	4611      	mov	r1, r2
 800acb4:	602b      	str	r3, [r5, #0]
 800acb6:	f7f8 fdc7 	bl	8003848 <_kill>
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	d102      	bne.n	800acc4 <_kill_r+0x1c>
 800acbe:	682b      	ldr	r3, [r5, #0]
 800acc0:	b103      	cbz	r3, 800acc4 <_kill_r+0x1c>
 800acc2:	6023      	str	r3, [r4, #0]
 800acc4:	bd38      	pop	{r3, r4, r5, pc}
 800acc6:	bf00      	nop
 800acc8:	20000c08 	.word	0x20000c08

0800accc <_getpid_r>:
 800accc:	f7f8 bdba 	b.w	8003844 <_getpid>

0800acd0 <_malloc_usable_size_r>:
 800acd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd4:	1f18      	subs	r0, r3, #4
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bfbc      	itt	lt
 800acda:	580b      	ldrlt	r3, [r1, r0]
 800acdc:	18c0      	addlt	r0, r0, r3
 800acde:	4770      	bx	lr

0800ace0 <__swhatbuf_r>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	460c      	mov	r4, r1
 800ace4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace8:	4615      	mov	r5, r2
 800acea:	2900      	cmp	r1, #0
 800acec:	461e      	mov	r6, r3
 800acee:	b096      	sub	sp, #88	@ 0x58
 800acf0:	da0c      	bge.n	800ad0c <__swhatbuf_r+0x2c>
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	2100      	movs	r1, #0
 800acf6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800acfa:	bf14      	ite	ne
 800acfc:	2340      	movne	r3, #64	@ 0x40
 800acfe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad02:	2000      	movs	r0, #0
 800ad04:	6031      	str	r1, [r6, #0]
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	b016      	add	sp, #88	@ 0x58
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	466a      	mov	r2, sp
 800ad0e:	f000 f849 	bl	800ada4 <_fstat_r>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	dbed      	blt.n	800acf2 <__swhatbuf_r+0x12>
 800ad16:	9901      	ldr	r1, [sp, #4]
 800ad18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad20:	4259      	negs	r1, r3
 800ad22:	4159      	adcs	r1, r3
 800ad24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad28:	e7eb      	b.n	800ad02 <__swhatbuf_r+0x22>

0800ad2a <__smakebuf_r>:
 800ad2a:	898b      	ldrh	r3, [r1, #12]
 800ad2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad2e:	079d      	lsls	r5, r3, #30
 800ad30:	4606      	mov	r6, r0
 800ad32:	460c      	mov	r4, r1
 800ad34:	d507      	bpl.n	800ad46 <__smakebuf_r+0x1c>
 800ad36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad3a:	6023      	str	r3, [r4, #0]
 800ad3c:	6123      	str	r3, [r4, #16]
 800ad3e:	2301      	movs	r3, #1
 800ad40:	6163      	str	r3, [r4, #20]
 800ad42:	b003      	add	sp, #12
 800ad44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad46:	466a      	mov	r2, sp
 800ad48:	ab01      	add	r3, sp, #4
 800ad4a:	f7ff ffc9 	bl	800ace0 <__swhatbuf_r>
 800ad4e:	9f00      	ldr	r7, [sp, #0]
 800ad50:	4605      	mov	r5, r0
 800ad52:	4639      	mov	r1, r7
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7fd fc79 	bl	800864c <_malloc_r>
 800ad5a:	b948      	cbnz	r0, 800ad70 <__smakebuf_r+0x46>
 800ad5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad60:	059a      	lsls	r2, r3, #22
 800ad62:	d4ee      	bmi.n	800ad42 <__smakebuf_r+0x18>
 800ad64:	f023 0303 	bic.w	r3, r3, #3
 800ad68:	f043 0302 	orr.w	r3, r3, #2
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	e7e2      	b.n	800ad36 <__smakebuf_r+0xc>
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad7a:	81a3      	strh	r3, [r4, #12]
 800ad7c:	9b01      	ldr	r3, [sp, #4]
 800ad7e:	6020      	str	r0, [r4, #0]
 800ad80:	b15b      	cbz	r3, 800ad9a <__smakebuf_r+0x70>
 800ad82:	4630      	mov	r0, r6
 800ad84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad88:	f000 f81e 	bl	800adc8 <_isatty_r>
 800ad8c:	b128      	cbz	r0, 800ad9a <__smakebuf_r+0x70>
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	f023 0303 	bic.w	r3, r3, #3
 800ad94:	f043 0301 	orr.w	r3, r3, #1
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	431d      	orrs	r5, r3
 800ad9e:	81a5      	strh	r5, [r4, #12]
 800ada0:	e7cf      	b.n	800ad42 <__smakebuf_r+0x18>
	...

0800ada4 <_fstat_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	2300      	movs	r3, #0
 800ada8:	4d06      	ldr	r5, [pc, #24]	@ (800adc4 <_fstat_r+0x20>)
 800adaa:	4604      	mov	r4, r0
 800adac:	4608      	mov	r0, r1
 800adae:	4611      	mov	r1, r2
 800adb0:	602b      	str	r3, [r5, #0]
 800adb2:	f7f8 fd74 	bl	800389e <_fstat>
 800adb6:	1c43      	adds	r3, r0, #1
 800adb8:	d102      	bne.n	800adc0 <_fstat_r+0x1c>
 800adba:	682b      	ldr	r3, [r5, #0]
 800adbc:	b103      	cbz	r3, 800adc0 <_fstat_r+0x1c>
 800adbe:	6023      	str	r3, [r4, #0]
 800adc0:	bd38      	pop	{r3, r4, r5, pc}
 800adc2:	bf00      	nop
 800adc4:	20000c08 	.word	0x20000c08

0800adc8 <_isatty_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	2300      	movs	r3, #0
 800adcc:	4d05      	ldr	r5, [pc, #20]	@ (800ade4 <_isatty_r+0x1c>)
 800adce:	4604      	mov	r4, r0
 800add0:	4608      	mov	r0, r1
 800add2:	602b      	str	r3, [r5, #0]
 800add4:	f7f8 fd68 	bl	80038a8 <_isatty>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d102      	bne.n	800ade2 <_isatty_r+0x1a>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b103      	cbz	r3, 800ade2 <_isatty_r+0x1a>
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	20000c08 	.word	0x20000c08

0800ade8 <_init>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	bf00      	nop
 800adec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adee:	bc08      	pop	{r3}
 800adf0:	469e      	mov	lr, r3
 800adf2:	4770      	bx	lr

0800adf4 <_fini>:
 800adf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf6:	bf00      	nop
 800adf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfa:	bc08      	pop	{r3}
 800adfc:	469e      	mov	lr, r3
 800adfe:	4770      	bx	lr
