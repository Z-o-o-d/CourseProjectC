
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3e8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000213c  0800a4f8  0800a4f8  0000b4f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c634  0800c634  0000e2d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c634  0800c634  0000d634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c63c  0800c63c  0000e2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c63c  0800c63c  0000d63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c640  0800c640  0000d640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0800c644  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000940  200002d0  0800c914  0000e2d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c10  0800c914  0000ec10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e2d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c302  00000000  00000000  0000e2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ac  00000000  00000000  0002a5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000cca8  00000000  00000000  0002dea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  0003ab50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f69  00000000  00000000  0003bd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a358  00000000  00000000  0003cc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3c1  00000000  00000000  00056fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096cdb  00000000  00000000  0007638a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010d065  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004880  00000000  00000000  0010d0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00111928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002d0 	.word	0x200002d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a4e0 	.word	0x0800a4e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002d4 	.word	0x200002d4
 800014c:	0800a4e0 	.word	0x0800a4e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2uiz>:
 8000eec:	0042      	lsls	r2, r0, #1
 8000eee:	d20e      	bcs.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef4:	d30b      	bcc.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d409      	bmi.n	8000f14 <__aeabi_f2uiz+0x28>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f08:	fa23 f002 	lsr.w	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2uiz+0x32>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d102      	bne.n	8000f24 <__aeabi_f2uiz+0x38>
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	4770      	bx	lr
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_d2lz>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2300      	movs	r3, #0
 8000f32:	4604      	mov	r4, r0
 8000f34:	460d      	mov	r5, r1
 8000f36:	f7ff fdf5 	bl	8000b24 <__aeabi_dcmplt>
 8000f3a:	b928      	cbnz	r0, 8000f48 <__aeabi_d2lz+0x1c>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	4629      	mov	r1, r5
 8000f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f44:	f000 b80a 	b.w	8000f5c <__aeabi_d2ulz>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f4e:	f000 f805 	bl	8000f5c <__aeabi_d2ulz>
 8000f52:	4240      	negs	r0, r0
 8000f54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f58:	bd38      	pop	{r3, r4, r5, pc}
 8000f5a:	bf00      	nop

08000f5c <__aeabi_d2ulz>:
 8000f5c:	b5d0      	push	{r4, r6, r7, lr}
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <__aeabi_d2ulz+0x34>)
 8000f62:	4606      	mov	r6, r0
 8000f64:	460f      	mov	r7, r1
 8000f66:	f7ff fb6b 	bl	8000640 <__aeabi_dmul>
 8000f6a:	f7ff fe41 	bl	8000bf0 <__aeabi_d2uiz>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	f7ff faec 	bl	800054c <__aeabi_ui2d>
 8000f74:	2200      	movs	r2, #0
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <__aeabi_d2ulz+0x38>)
 8000f78:	f7ff fb62 	bl	8000640 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4630      	mov	r0, r6
 8000f82:	4639      	mov	r1, r7
 8000f84:	f7ff f9a4 	bl	80002d0 <__aeabi_dsub>
 8000f88:	f7ff fe32 	bl	8000bf0 <__aeabi_d2uiz>
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000f90:	3df00000 	.word	0x3df00000
 8000f94:	41f00000 	.word	0x41f00000

08000f98 <ESP_SendCommand>:
    strncpy(esp_config.ap_ssid, ap_ssid, sizeof(esp_config.ap_ssid));
    strncpy(esp_config.ap_pswd, ap_pswd, sizeof(esp_config.ap_pswd));
    strncpy(esp_config.ap_ip, ap_ip, sizeof(esp_config.ap_ip));
}

void ESP_SendCommand(const char *command) {
 8000f98:	b510      	push	{r4, lr}
 8000f9a:	4604      	mov	r4, r0
    // Transmit the command using the default UART
    HAL_UART_Transmit(AT_huart, (uint8_t*)command, strlen(command), 1000);
 8000f9c:	f7ff f8d8 	bl	8000150 <strlen>
 8000fa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa4:	b282      	uxth	r2, r0
 8000fa6:	4621      	mov	r1, r4
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <ESP_SendCommand+0x1c>)
 8000faa:	6800      	ldr	r0, [r0, #0]
 8000fac:	f004 fbca 	bl	8005744 <HAL_UART_Transmit>
}
 8000fb0:	bd10      	pop	{r4, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200002ec 	.word	0x200002ec

08000fb8 <ESP_SendTCP>:

void ESP_SendTCP(uint8_t con_num, char *data) {
 8000fb8:	b530      	push	{r4, r5, lr}
 8000fba:	b08f      	sub	sp, #60	@ 0x3c
 8000fbc:	4605      	mov	r5, r0
 8000fbe:	460c      	mov	r4, r1
    // Calculate the total length
    uint8_t cmd[50];
    sprintf((char*)cmd, "AT+CIPSEND=%d,%d\r\n", con_num, strlen(data));
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	f7ff f8c5 	bl	8000150 <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	462a      	mov	r2, r5
 8000fca:	490e      	ldr	r1, [pc, #56]	@ (8001004 <ESP_SendTCP+0x4c>)
 8000fcc:	a801      	add	r0, sp, #4
 8000fce:	f005 fe37 	bl	8006c40 <siprintf>
    HAL_UART_Transmit(AT_huart, cmd, strlen((char*)cmd), 100);
 8000fd2:	a801      	add	r0, sp, #4
 8000fd4:	f7ff f8bc 	bl	8000150 <strlen>
 8000fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8001008 <ESP_SendTCP+0x50>)
 8000fda:	2364      	movs	r3, #100	@ 0x64
 8000fdc:	b282      	uxth	r2, r0
 8000fde:	a901      	add	r1, sp, #4
 8000fe0:	6828      	ldr	r0, [r5, #0]
 8000fe2:	f004 fbaf 	bl	8005744 <HAL_UART_Transmit>
    HAL_Delay(1); // Adjust this delay as needed
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f002 f874 	bl	80030d4 <HAL_Delay>
    HAL_UART_Transmit(AT_huart, (uint8_t *)data, strlen(data), 1000);
 8000fec:	4620      	mov	r0, r4
 8000fee:	f7ff f8af 	bl	8000150 <strlen>
 8000ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff6:	b282      	uxth	r2, r0
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	6828      	ldr	r0, [r5, #0]
 8000ffc:	f004 fba2 	bl	8005744 <HAL_UART_Transmit>
}
 8001000:	b00f      	add	sp, #60	@ 0x3c
 8001002:	bd30      	pop	{r4, r5, pc}
 8001004:	0800a500 	.word	0x0800a500
 8001008:	200002ec 	.word	0x200002ec

0800100c <ESP_UART_Init>:

void ESP_UART_Init(UART_HandleTypeDef *huart){
    AT_huart = huart;
 800100c:	4b01      	ldr	r3, [pc, #4]	@ (8001014 <ESP_UART_Init+0x8>)
 800100e:	6018      	str	r0, [r3, #0]
}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	200002ec 	.word	0x200002ec

08001018 <ESP_CheckWiFi>:
    char cmd[100];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
    ESP_SendCommand(cmd);
}

WiFiInfoTypeDef ESP_CheckWiFi(void) {
 8001018:	b570      	push	{r4, r5, r6, lr}
 800101a:	b0a8      	sub	sp, #160	@ 0xa0
 800101c:	4605      	mov	r5, r0
    WiFiInfoTypeDef info = {0};
 800101e:	2232      	movs	r2, #50	@ 0x32
 8001020:	2100      	movs	r1, #0
 8001022:	a81a      	add	r0, sp, #104	@ 0x68
 8001024:	f005 fe6f 	bl	8006d06 <memset>
    char response[100] = {0};
 8001028:	2400      	movs	r4, #0
 800102a:	9401      	str	r4, [sp, #4]
 800102c:	2260      	movs	r2, #96	@ 0x60
 800102e:	4621      	mov	r1, r4
 8001030:	a802      	add	r0, sp, #8
 8001032:	f005 fe68 	bl	8006d06 <memset>
    char *token;
    huart3.RxXferCount = 0;
 8001036:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <ESP_CheckWiFi+0xcc>)
 8001038:	85dc      	strh	r4, [r3, #46]	@ 0x2e
    ESP_SendCommand("AT+CWJAP?\r\n");
 800103a:	482b      	ldr	r0, [pc, #172]	@ (80010e8 <ESP_CheckWiFi+0xd0>)
 800103c:	f7ff ffac 	bl	8000f98 <ESP_SendCommand>
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);
 8001040:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001044:	2264      	movs	r2, #100	@ 0x64
 8001046:	a901      	add	r1, sp, #4
 8001048:	4828      	ldr	r0, [pc, #160]	@ (80010ec <ESP_CheckWiFi+0xd4>)
 800104a:	6800      	ldr	r0, [r0, #0]
 800104c:	f004 fbdf 	bl	800580e <HAL_UART_Receive>
    // Parse the response and populate the WiFiInfo struct

    // I don know why it can't be     token = strtok(response, "+CWJAP:,\"");
    // sscanf scanf ALSO can't used  so strange

    token = strtok(response, ":,\"");
 8001050:	4927      	ldr	r1, [pc, #156]	@ (80010f0 <ESP_CheckWiFi+0xd8>)
 8001052:	a801      	add	r0, sp, #4
 8001054:	f005 fe84 	bl	8006d60 <strtok>

    token = strtok(NULL, "\",\""); // Get SSID
 8001058:	4926      	ldr	r1, [pc, #152]	@ (80010f4 <ESP_CheckWiFi+0xdc>)
 800105a:	4620      	mov	r0, r4
 800105c:	f005 fe80 	bl	8006d60 <strtok>
 8001060:	4601      	mov	r1, r0
    strcpy(info.ssid, token);
 8001062:	a81a      	add	r0, sp, #104	@ 0x68
 8001064:	f005 ff65 	bl	8006f32 <strcpy>

    token = strtok(NULL, "\","); // Get MAC address
 8001068:	4923      	ldr	r1, [pc, #140]	@ (80010f8 <ESP_CheckWiFi+0xe0>)
 800106a:	4620      	mov	r0, r4
 800106c:	f005 fe78 	bl	8006d60 <strtok>
 8001070:	4601      	mov	r1, r0
    strcpy(info.bssid, token);
 8001072:	a822      	add	r0, sp, #136	@ 0x88
 8001074:	f005 ff5d 	bl	8006f32 <strcpy>

    token = strtok(NULL, ","); // Get security mode
 8001078:	4e20      	ldr	r6, [pc, #128]	@ (80010fc <ESP_CheckWiFi+0xe4>)
 800107a:	4631      	mov	r1, r6
 800107c:	4620      	mov	r0, r4
 800107e:	f005 fe6f 	bl	8006d60 <strtok>
    info.channel = atoi(token);
 8001082:	f004 fe25 	bl	8005cd0 <atoi>
 8001086:	f88d 009a 	strb.w	r0, [sp, #154]	@ 0x9a

    token = strtok(NULL, ","); // Get RSSI
 800108a:	4631      	mov	r1, r6
 800108c:	4620      	mov	r0, r4
 800108e:	f005 fe67 	bl	8006d60 <strtok>
    info.rssi = atoi(token);
 8001092:	f004 fe1d 	bl	8005cd0 <atoi>
 8001096:	f88d 009b 	strb.w	r0, [sp, #155]	@ 0x9b

    token = strtok(NULL, "\r\n"); // Get connected status
 800109a:	4919      	ldr	r1, [pc, #100]	@ (8001100 <ESP_CheckWiFi+0xe8>)
 800109c:	4620      	mov	r0, r4
 800109e:	f005 fe5f 	bl	8006d60 <strtok>
    info.encryption = atoi(token);
 80010a2:	f004 fe15 	bl	8005cd0 <atoi>
 80010a6:	f88d 009c 	strb.w	r0, [sp, #156]	@ 0x9c

    return info;
 80010aa:	f10d 0c68 	add.w	ip, sp, #104	@ 0x68
 80010ae:	46ae      	mov	lr, r5
 80010b0:	ae26      	add	r6, sp, #152	@ 0x98
 80010b2:	4664      	mov	r4, ip
 80010b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b6:	f8ce 0000 	str.w	r0, [lr]
 80010ba:	f8ce 1004 	str.w	r1, [lr, #4]
 80010be:	f8ce 2008 	str.w	r2, [lr, #8]
 80010c2:	f8ce 300c 	str.w	r3, [lr, #12]
 80010c6:	46a4      	mov	ip, r4
 80010c8:	f10e 0e10 	add.w	lr, lr, #16
 80010cc:	42b4      	cmp	r4, r6
 80010ce:	d1f0      	bne.n	80010b2 <ESP_CheckWiFi+0x9a>
 80010d0:	6820      	ldr	r0, [r4, #0]
 80010d2:	f8ce 0000 	str.w	r0, [lr]
 80010d6:	7923      	ldrb	r3, [r4, #4]
 80010d8:	f88e 3004 	strb.w	r3, [lr, #4]
}
 80010dc:	4628      	mov	r0, r5
 80010de:	b028      	add	sp, #160	@ 0xa0
 80010e0:	bd70      	pop	{r4, r5, r6, pc}
 80010e2:	bf00      	nop
 80010e4:	2000040c 	.word	0x2000040c
 80010e8:	0800a514 	.word	0x0800a514
 80010ec:	200002ec 	.word	0x200002ec
 80010f0:	0800a520 	.word	0x0800a520
 80010f4:	0800a524 	.word	0x0800a524
 80010f8:	0800a528 	.word	0x0800a528
 80010fc:	0800a52c 	.word	0x0800a52c
 8001100:	0800a538 	.word	0x0800a538

08001104 <ESP_GetIPInfo>:

IPInfoTypeDef ESP_GetIPInfo(void) {
 8001104:	b530      	push	{r4, r5, lr}
 8001106:	b0c5      	sub	sp, #276	@ 0x114
 8001108:	4604      	mov	r4, r0
    IPInfoTypeDef ipInfo = {0};
 800110a:	2244      	movs	r2, #68	@ 0x44
 800110c:	2100      	movs	r1, #0
 800110e:	a833      	add	r0, sp, #204	@ 0xcc
 8001110:	f005 fdf9 	bl	8006d06 <memset>
    char response[200] = {0};
 8001114:	2100      	movs	r1, #0
 8001116:	9101      	str	r1, [sp, #4]
 8001118:	22c4      	movs	r2, #196	@ 0xc4
 800111a:	a802      	add	r0, sp, #8
 800111c:	f005 fdf3 	bl	8006d06 <memset>
    char *token;

    ESP_SendCommand("AT+CIFSR\r\n");
 8001120:	482a      	ldr	r0, [pc, #168]	@ (80011cc <ESP_GetIPInfo+0xc8>)
 8001122:	f7ff ff39 	bl	8000f98 <ESP_SendCommand>
    HAL_UART_Receive(AT_huart, (uint8_t *)response, sizeof(response), 1000);
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	22c8      	movs	r2, #200	@ 0xc8
 800112c:	a901      	add	r1, sp, #4
 800112e:	4828      	ldr	r0, [pc, #160]	@ (80011d0 <ESP_GetIPInfo+0xcc>)
 8001130:	6800      	ldr	r0, [r0, #0]
 8001132:	f004 fb6c 	bl	800580e <HAL_UART_Receive>

    // Parse AP IP
    token = strstr(response, "+CIFSR:APIP,\"");
 8001136:	4927      	ldr	r1, [pc, #156]	@ (80011d4 <ESP_GetIPInfo+0xd0>)
 8001138:	a801      	add	r0, sp, #4
 800113a:	f005 fe6d 	bl	8006e18 <strstr>
    if (token) {
 800113e:	b150      	cbz	r0, 8001156 <ESP_GetIPInfo+0x52>
 8001140:	4605      	mov	r5, r0
        token += strlen("+CIFSR:APIP,\"");
 8001142:	350d      	adds	r5, #13
        strncpy(ipInfo.AP_IP, token, strcspn(token, "\""));
 8001144:	4924      	ldr	r1, [pc, #144]	@ (80011d8 <ESP_GetIPInfo+0xd4>)
 8001146:	4628      	mov	r0, r5
 8001148:	f005 fde5 	bl	8006d16 <strcspn>
 800114c:	4602      	mov	r2, r0
 800114e:	4629      	mov	r1, r5
 8001150:	a833      	add	r0, sp, #204	@ 0xcc
 8001152:	f005 fdf1 	bl	8006d38 <strncpy>
    }

    // Parse AP MAC
    token = strstr(response, "+CIFSR:APMAC,\"");
 8001156:	4921      	ldr	r1, [pc, #132]	@ (80011dc <ESP_GetIPInfo+0xd8>)
 8001158:	a801      	add	r0, sp, #4
 800115a:	f005 fe5d 	bl	8006e18 <strstr>
    if (token) {
 800115e:	4605      	mov	r5, r0
 8001160:	b148      	cbz	r0, 8001176 <ESP_GetIPInfo+0x72>
        token += strlen("+CIFSR:APMAC,\"");
 8001162:	350e      	adds	r5, #14
        strncpy(ipInfo.AP_MAC, token, strcspn(token, "\""));
 8001164:	491c      	ldr	r1, [pc, #112]	@ (80011d8 <ESP_GetIPInfo+0xd4>)
 8001166:	4628      	mov	r0, r5
 8001168:	f005 fdd5 	bl	8006d16 <strcspn>
 800116c:	4602      	mov	r2, r0
 800116e:	4629      	mov	r1, r5
 8001170:	a837      	add	r0, sp, #220	@ 0xdc
 8001172:	f005 fde1 	bl	8006d38 <strncpy>
    }

    // Parse STA IP
    token = strstr(response, "+CIFSR:STAIP,\"");
 8001176:	491a      	ldr	r1, [pc, #104]	@ (80011e0 <ESP_GetIPInfo+0xdc>)
 8001178:	a801      	add	r0, sp, #4
 800117a:	f005 fe4d 	bl	8006e18 <strstr>
    if (token) {
 800117e:	4605      	mov	r5, r0
 8001180:	b150      	cbz	r0, 8001198 <ESP_GetIPInfo+0x94>
        token += strlen("+CIFSR:STAIP,\"");
 8001182:	350e      	adds	r5, #14
        strncpy(ipInfo.STA_IP, token, strcspn(token, "\""));
 8001184:	4914      	ldr	r1, [pc, #80]	@ (80011d8 <ESP_GetIPInfo+0xd4>)
 8001186:	4628      	mov	r0, r5
 8001188:	f005 fdc5 	bl	8006d16 <strcspn>
 800118c:	4602      	mov	r2, r0
 800118e:	4629      	mov	r1, r5
 8001190:	f10d 00ee 	add.w	r0, sp, #238	@ 0xee
 8001194:	f005 fdd0 	bl	8006d38 <strncpy>
    }

    // Parse STA MAC
    token = strstr(response, "+CIFSR:STAMAC,\"");
 8001198:	4912      	ldr	r1, [pc, #72]	@ (80011e4 <ESP_GetIPInfo+0xe0>)
 800119a:	a801      	add	r0, sp, #4
 800119c:	f005 fe3c 	bl	8006e18 <strstr>
    if (token) {
 80011a0:	4605      	mov	r5, r0
 80011a2:	b150      	cbz	r0, 80011ba <ESP_GetIPInfo+0xb6>
        token += strlen("+CIFSR:STAMAC,\"");
 80011a4:	350f      	adds	r5, #15
        strncpy(ipInfo.STA_MAC, token, strcspn(token, "\""));
 80011a6:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <ESP_GetIPInfo+0xd4>)
 80011a8:	4628      	mov	r0, r5
 80011aa:	f005 fdb4 	bl	8006d16 <strcspn>
 80011ae:	4602      	mov	r2, r0
 80011b0:	4629      	mov	r1, r5
 80011b2:	f10d 00fe 	add.w	r0, sp, #254	@ 0xfe
 80011b6:	f005 fdbf 	bl	8006d38 <strncpy>
    }
    return ipInfo;
 80011ba:	2244      	movs	r2, #68	@ 0x44
 80011bc:	a933      	add	r1, sp, #204	@ 0xcc
 80011be:	4620      	mov	r0, r4
 80011c0:	f005 fecd 	bl	8006f5e <memcpy>
}
 80011c4:	4620      	mov	r0, r4
 80011c6:	b045      	add	sp, #276	@ 0x114
 80011c8:	bd30      	pop	{r4, r5, pc}
 80011ca:	bf00      	nop
 80011cc:	0800a530 	.word	0x0800a530
 80011d0:	200002ec 	.word	0x200002ec
 80011d4:	0800a53c 	.word	0x0800a53c
 80011d8:	0800a548 	.word	0x0800a548
 80011dc:	0800a54c 	.word	0x0800a54c
 80011e0:	0800a55c 	.word	0x0800a55c
 80011e4:	0800a56c 	.word	0x0800a56c

080011e8 <ESP_EnableMUX>:

void ESP_EnableMUX() {
 80011e8:	b508      	push	{r3, lr}
    ESP_SendCommand("AT+CIPMUX=1\r\n");
 80011ea:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <ESP_EnableMUX+0xc>)
 80011ec:	f7ff fed4 	bl	8000f98 <ESP_SendCommand>
}
 80011f0:	bd08      	pop	{r3, pc}
 80011f2:	bf00      	nop
 80011f4:	0800a57c 	.word	0x0800a57c

080011f8 <ESP_StartServer>:

void ESP_StartServer(uint16_t port) {
 80011f8:	b500      	push	{lr}
 80011fa:	b08f      	sub	sp, #60	@ 0x3c
 80011fc:	4602      	mov	r2, r0
    char cmd[50];
    sprintf(cmd, "AT+CIPSERVER=1,%d\r\n", port);
 80011fe:	4905      	ldr	r1, [pc, #20]	@ (8001214 <ESP_StartServer+0x1c>)
 8001200:	a801      	add	r0, sp, #4
 8001202:	f005 fd1d 	bl	8006c40 <siprintf>
    ESP_SendCommand(cmd);
 8001206:	a801      	add	r0, sp, #4
 8001208:	f7ff fec6 	bl	8000f98 <ESP_SendCommand>
}
 800120c:	b00f      	add	sp, #60	@ 0x3c
 800120e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001212:	bf00      	nop
 8001214:	0800a58c 	.word	0x0800a58c

08001218 <ESP_Reset_GPIO>:

#ifdef ENABLE_GPIO_RESET_CONTROL
static GPIO_TypeDef *ESP_Reset_GPIO_Port = ESP_RESET_GPIO_Port;
static uint16_t ESP_Reset_Pin = ESP_RESET_Pin;

void ESP_Reset_GPIO() {
 8001218:	b510      	push	{r4, lr}
    // Set the reset pin low to reset the ESP module
    HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_RESET);
 800121a:	4c09      	ldr	r4, [pc, #36]	@ (8001240 <ESP_Reset_GPIO+0x28>)
 800121c:	2200      	movs	r2, #0
 800121e:	2102      	movs	r1, #2
 8001220:	4620      	mov	r0, r4
 8001222:	f002 fe1b 	bl	8003e5c <HAL_GPIO_WritePin>
    HAL_Delay(100); // Hold low for 1000 ms
 8001226:	2064      	movs	r0, #100	@ 0x64
 8001228:	f001 ff54 	bl	80030d4 <HAL_Delay>
    // Set the reset pin high to bring the ESP module out of reset
    HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2102      	movs	r1, #2
 8001230:	4620      	mov	r0, r4
 8001232:	f002 fe13 	bl	8003e5c <HAL_GPIO_WritePin>
    HAL_Delay(1000); // Wait for the ESP module to initialize
 8001236:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800123a:	f001 ff4b 	bl	80030d4 <HAL_Delay>
}
 800123e:	bd10      	pop	{r4, pc}
 8001240:	40010c00 	.word	0x40010c00

08001244 <ESP_INIT_BASE>:
void ESP_INIT_BASE() {
 8001244:	b508      	push	{r3, lr}
	ESP_Reset_GPIO();
 8001246:	f7ff ffe7 	bl	8001218 <ESP_Reset_GPIO>
    HAL_Delay(1000);
 800124a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800124e:	f001 ff41 	bl	80030d4 <HAL_Delay>
    ESP_EnableMUX();
 8001252:	f7ff ffc9 	bl	80011e8 <ESP_EnableMUX>
    HAL_Delay(1000);
 8001256:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800125a:	f001 ff3b 	bl	80030d4 <HAL_Delay>
    ESP_StartServer(9999);
 800125e:	f242 700f 	movw	r0, #9999	@ 0x270f
 8001262:	f7ff ffc9 	bl	80011f8 <ESP_StartServer>
    HAL_Delay(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800126a:	f001 ff33 	bl	80030d4 <HAL_Delay>
}
 800126e:	bd08      	pop	{r3, pc}

08001270 <DHT_getData>:
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
}

DHT_data DHT_getData(DHT_sensor *sensor) {
 8001270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001274:	b089      	sub	sp, #36	@ 0x24
 8001276:	9001      	str	r0, [sp, #4]
 8001278:	460c      	mov	r4, r1
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 800127a:	798b      	ldrb	r3, [r1, #6]
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	f44f 757a 	movne.w	r5, #1000	@ 0x3e8
 8001284:	f44f 65fa 	moveq.w	r5, #2000	@ 0x7d0
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8001288:	f001 ff1e 	bl	80030c8 <HAL_GetTick>
 800128c:	68a2      	ldr	r2, [r4, #8]
 800128e:	1a83      	subs	r3, r0, r2
 8001290:	42ab      	cmp	r3, r5
 8001292:	d201      	bcs.n	8001298 <DHT_getData+0x28>
 8001294:	2a00      	cmp	r2, #0
 8001296:	d144      	bne.n	8001322 <DHT_getData+0xb2>
		data.hum = sensor->lastHum;
		data.temp = sensor->lastTemp;
		return data;
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8001298:	f001 ff16 	bl	80030c8 <HAL_GetTick>
 800129c:	3001      	adds	r0, #1
 800129e:	60a0      	str	r0, [r4, #8]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	2500      	movs	r5, #0
 80012a2:	9502      	str	r5, [sp, #8]
 80012a4:	9503      	str	r5, [sp, #12]
 80012a6:	9504      	str	r5, [sp, #16]
 80012a8:	9505      	str	r5, [sp, #20]
  lineUp();
 80012aa:	2201      	movs	r2, #1
 80012ac:	88a1      	ldrh	r1, [r4, #4]
 80012ae:	6820      	ldr	r0, [r4, #0]
 80012b0:	f002 fdd4 	bl	8003e5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80012b4:	88a3      	ldrh	r3, [r4, #4]
 80012b6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80012b8:	2311      	movs	r3, #17
 80012ba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 80012bc:	79e3      	ldrb	r3, [r4, #7]
 80012be:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 80012c0:	2303      	movs	r3, #3
 80012c2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80012c4:	a902      	add	r1, sp, #8
 80012c6:	6820      	ldr	r0, [r4, #0]
 80012c8:	f002 fc82 	bl	8003bd0 <HAL_GPIO_Init>

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
	//Опускание линии данных на 18 мс
	lineDown();
 80012cc:	462a      	mov	r2, r5
 80012ce:	88a1      	ldrh	r1, [r4, #4]
 80012d0:	6820      	ldr	r0, [r4, #0]
 80012d2:	f002 fdc3 	bl	8003e5c <HAL_GPIO_WritePin>
	Delay(18);
 80012d6:	2012      	movs	r0, #18
 80012d8:	f001 fefc 	bl	80030d4 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 80012dc:	2201      	movs	r2, #1
 80012de:	88a1      	ldrh	r1, [r4, #4]
 80012e0:	6820      	ldr	r0, [r4, #0]
 80012e2:	f002 fdbb 	bl	8003e5c <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	9503      	str	r5, [sp, #12]
 80012e8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80012ea:	88a3      	ldrh	r3, [r4, #4]
 80012ec:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 80012ee:	79e3      	ldrb	r3, [r4, #7]
 80012f0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80012f2:	a902      	add	r1, sp, #8
 80012f4:	6820      	ldr	r0, [r4, #0]
 80012f6:	f002 fc6b 	bl	8003bd0 <HAL_GPIO_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fa:	b672      	cpsid	i
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
	//Ожидание спада
	while(getLine()) {
 80012fc:	f242 7511 	movw	r5, #10001	@ 0x2711
 8001300:	88a1      	ldrh	r1, [r4, #4]
 8001302:	6820      	ldr	r0, [r4, #0]
 8001304:	f002 fda4 	bl	8003e50 <HAL_GPIO_ReadPin>
 8001308:	2801      	cmp	r0, #1
 800130a:	d10d      	bne.n	8001328 <DHT_getData+0xb8>
		timeout++;
		if (timeout > DHT_TIMEOUT) {
 800130c:	3d01      	subs	r5, #1
 800130e:	b2ad      	uxth	r5, r5
 8001310:	2d00      	cmp	r5, #0
 8001312:	d1f5      	bne.n	8001300 <DHT_getData+0x90>
  __ASM volatile ("cpsie i" : : : "memory");
 8001314:	b662      	cpsie	i
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8001316:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 800131a:	6123      	str	r3, [r4, #16]
			sensor->lastTemp = -128.0f;
 800131c:	60e3      	str	r3, [r4, #12]

			return data;
 800131e:	461d      	mov	r5, r3
 8001320:	e07c      	b.n	800141c <DHT_getData+0x1ac>
		data.hum = sensor->lastHum;
 8001322:	6925      	ldr	r5, [r4, #16]
		data.temp = sensor->lastTemp;
 8001324:	68e3      	ldr	r3, [r4, #12]
		return data;
 8001326:	e079      	b.n	800141c <DHT_getData+0x1ac>
 8001328:	f242 7511 	movw	r5, #10001	@ 0x2711
		}
	}
	timeout = 0;
	//Ожидание подъёма
	while(!getLine()) {
 800132c:	88a1      	ldrh	r1, [r4, #4]
 800132e:	6820      	ldr	r0, [r4, #0]
 8001330:	f002 fd8e 	bl	8003e50 <HAL_GPIO_ReadPin>
 8001334:	2801      	cmp	r0, #1
 8001336:	d00a      	beq.n	800134e <DHT_getData+0xde>
		timeout++;
		if (timeout > DHT_TIMEOUT) {
 8001338:	3d01      	subs	r5, #1
 800133a:	b2ad      	uxth	r5, r5
 800133c:	2d00      	cmp	r5, #0
 800133e:	d1f5      	bne.n	800132c <DHT_getData+0xbc>
 8001340:	b662      	cpsie	i
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8001342:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 8001346:	6123      	str	r3, [r4, #16]
			sensor->lastTemp = -128.0f;
 8001348:	60e3      	str	r3, [r4, #12]

			return data;
 800134a:	461d      	mov	r5, r3
 800134c:	e066      	b.n	800141c <DHT_getData+0x1ac>
 800134e:	f242 7511 	movw	r5, #10001	@ 0x2711
		}
	}
	timeout = 0;
	//Ожидание спада
	while(getLine()) {
 8001352:	88a1      	ldrh	r1, [r4, #4]
 8001354:	6820      	ldr	r0, [r4, #0]
 8001356:	f002 fd7b 	bl	8003e50 <HAL_GPIO_ReadPin>
 800135a:	2801      	cmp	r0, #1
 800135c:	d108      	bne.n	8001370 <DHT_getData+0x100>
		timeout++;
		if (timeout > DHT_TIMEOUT) {
 800135e:	3d01      	subs	r5, #1
 8001360:	b2ad      	uxth	r5, r5
 8001362:	2d00      	cmp	r5, #0
 8001364:	d1f5      	bne.n	8001352 <DHT_getData+0xe2>
 8001366:	b662      	cpsie	i
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8001368:	f04f 4543 	mov.w	r5, #3271557120	@ 0xc3000000
 800136c:	462b      	mov	r3, r5
 800136e:	e055      	b.n	800141c <DHT_getData+0x1ac>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001370:	4b45      	ldr	r3, [pc, #276]	@ (8001488 <DHT_getData+0x218>)
 8001372:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001376:	9006      	str	r0, [sp, #24]
 8001378:	f88d 101c 	strb.w	r1, [sp, #28]
 800137c:	f04f 0900 	mov.w	r9, #0
 8001380:	46c8      	mov	r8, r9
			while(!getLine() && lT != 65535) lT++;
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
			while(getLine()&& hT != 65535) hT++;
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 8001382:	f10d 0a18 	add.w	sl, sp, #24
 8001386:	e02f      	b.n	80013e8 <DHT_getData+0x178>
 8001388:	461d      	mov	r5, r3
			while(!getLine() && lT != 65535) lT++;
 800138a:	88a1      	ldrh	r1, [r4, #4]
 800138c:	6820      	ldr	r0, [r4, #0]
 800138e:	f002 fd5f 	bl	8003e50 <HAL_GPIO_ReadPin>
 8001392:	2801      	cmp	r0, #1
 8001394:	d005      	beq.n	80013a2 <DHT_getData+0x132>
 8001396:	1c6b      	adds	r3, r5, #1
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139c:	d1f4      	bne.n	8001388 <DHT_getData+0x118>
 800139e:	4646      	mov	r6, r8
 80013a0:	e002      	b.n	80013a8 <DHT_getData+0x138>
 80013a2:	4646      	mov	r6, r8
 80013a4:	e000      	b.n	80013a8 <DHT_getData+0x138>
 80013a6:	461e      	mov	r6, r3
			while(getLine()&& hT != 65535) hT++;
 80013a8:	88a1      	ldrh	r1, [r4, #4]
 80013aa:	6820      	ldr	r0, [r4, #0]
 80013ac:	f002 fd50 	bl	8003e50 <HAL_GPIO_ReadPin>
 80013b0:	2801      	cmp	r0, #1
 80013b2:	d103      	bne.n	80013bc <DHT_getData+0x14c>
 80013b4:	1c73      	adds	r3, r6, #1
 80013b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ba:	d1f4      	bne.n	80013a6 <DHT_getData+0x136>
			if(hT > lT) rawData[a] |= (1<<b);
 80013bc:	b2b6      	uxth	r6, r6
 80013be:	b2ad      	uxth	r5, r5
 80013c0:	42ae      	cmp	r6, r5
 80013c2:	d906      	bls.n	80013d2 <DHT_getData+0x162>
 80013c4:	fa0b f207 	lsl.w	r2, fp, r7
 80013c8:	f819 300a 	ldrb.w	r3, [r9, sl]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	f809 300a 	strb.w	r3, [r9, sl]
		for(uint8_t b = 7; b != 255; b--) {
 80013d2:	3f01      	subs	r7, #1
 80013d4:	f1b7 3fff 	cmp.w	r7, #4294967295
 80013d8:	d001      	beq.n	80013de <DHT_getData+0x16e>
 80013da:	4645      	mov	r5, r8
 80013dc:	e7d5      	b.n	800138a <DHT_getData+0x11a>
	for(uint8_t a = 0; a < 5; a++) {
 80013de:	f109 0901 	add.w	r9, r9, #1
 80013e2:	f1b9 0f05 	cmp.w	r9, #5
 80013e6:	d003      	beq.n	80013f0 <DHT_getData+0x180>
		for(uint8_t b = 7; b != 255; b--) {
 80013e8:	2707      	movs	r7, #7
			if(hT > lT) rawData[a] |= (1<<b);
 80013ea:	f04f 0b01 	mov.w	fp, #1
 80013ee:	e7f4      	b.n	80013da <DHT_getData+0x16a>
 80013f0:	b662      	cpsie	i
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80013f2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80013f6:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80013fa:	f89d 601a 	ldrb.w	r6, [sp, #26]
 80013fe:	f89d 701b 	ldrb.w	r7, [sp, #27]
 8001402:	1883      	adds	r3, r0, r2
 8001404:	4433      	add	r3, r6
 8001406:	443b      	add	r3, r7
 8001408:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4299      	cmp	r1, r3
 8001410:	d00b      	beq.n	800142a <DHT_getData+0x1ba>
	DHT_data data = {-128.0f, -128.0f};
 8001412:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 8001416:	461d      	mov	r5, r3
			data.temp = (float)rawData[2];
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8001418:	6125      	str	r5, [r4, #16]
	sensor->lastTemp = data.temp;
 800141a:	60e3      	str	r3, [r4, #12]
		return data;
 800141c:	9a01      	ldr	r2, [sp, #4]
 800141e:	6015      	str	r5, [r2, #0]
 8001420:	6053      	str	r3, [r2, #4]
	#endif

	return data;	
}
 8001422:	4610      	mov	r0, r2
 8001424:	b009      	add	sp, #36	@ 0x24
 8001426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sensor->type == DHT22) {
 800142a:	79a3      	ldrb	r3, [r4, #6]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d008      	beq.n	8001442 <DHT_getData+0x1d2>
		if (sensor->type == DHT11) {
 8001430:	bb33      	cbnz	r3, 8001480 <DHT_getData+0x210>
			data.hum = (float)rawData[0];
 8001432:	f7ff fd03 	bl	8000e3c <__aeabi_ui2f>
 8001436:	4605      	mov	r5, r0
			data.temp = (float)rawData[2];
 8001438:	4630      	mov	r0, r6
 800143a:	f7ff fcff 	bl	8000e3c <__aeabi_ui2f>
 800143e:	4603      	mov	r3, r0
 8001440:	e7ea      	b.n	8001418 <DHT_getData+0x1a8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001442:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8001446:	f7ff fcfd 	bl	8000e44 <__aeabi_i2f>
 800144a:	4910      	ldr	r1, [pc, #64]	@ (800148c <DHT_getData+0x21c>)
 800144c:	f7fe fe88 	bl	8000160 <__aeabi_fmul>
 8001450:	4605      	mov	r5, r0
			if(!(rawData[2] & (1<<7))) {
 8001452:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001456:	d108      	bne.n	800146a <DHT_getData+0x1fa>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001458:	ea47 2006 	orr.w	r0, r7, r6, lsl #8
 800145c:	f7ff fcf2 	bl	8000e44 <__aeabi_i2f>
 8001460:	490a      	ldr	r1, [pc, #40]	@ (800148c <DHT_getData+0x21c>)
 8001462:	f7fe fe7d 	bl	8000160 <__aeabi_fmul>
 8001466:	4603      	mov	r3, r0
 8001468:	e7d6      	b.n	8001418 <DHT_getData+0x1a8>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800146a:	f006 007f 	and.w	r0, r6, #127	@ 0x7f
 800146e:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
 8001472:	f7ff fce7 	bl	8000e44 <__aeabi_i2f>
 8001476:	4906      	ldr	r1, [pc, #24]	@ (8001490 <DHT_getData+0x220>)
 8001478:	f7fe fe72 	bl	8000160 <__aeabi_fmul>
 800147c:	4603      	mov	r3, r0
 800147e:	e7cb      	b.n	8001418 <DHT_getData+0x1a8>
	DHT_data data = {-128.0f, -128.0f};
 8001480:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 8001484:	461d      	mov	r5, r3
 8001486:	e7c7      	b.n	8001418 <DHT_getData+0x1a8>
 8001488:	0800a4f8 	.word	0x0800a4f8
 800148c:	3dcccccd 	.word	0x3dcccccd
 8001490:	bdcccccd 	.word	0xbdcccccd

08001494 <Buzzer_SetFrequency>:
}



void Buzzer_SetFrequency(BuzzerTypeDef *buzzer, uint32_t frequency) {
    buzzer->frequency = frequency;
 8001494:	6081      	str	r1, [r0, #8]

    uint32_t prescaler = 1000000/frequency  - 1;
 8001496:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <Buzzer_SetFrequency+0x14>)
 8001498:	fbb3 f1f1 	udiv	r1, r3, r1
 800149c:	3901      	subs	r1, #1
    __HAL_TIM_SET_PRESCALER(buzzer->htim, prescaler);
 800149e:	6803      	ldr	r3, [r0, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6299      	str	r1, [r3, #40]	@ 0x28
}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	000f4240 	.word	0x000f4240

080014ac <Buzzer_SetVolume>:

void Buzzer_SetVolume(BuzzerTypeDef *buzzer, uint8_t volume) {
    buzzer->volume = volume;
 80014ac:	7301      	strb	r1, [r0, #12]
    uint32_t compare_value = volume;

    __HAL_TIM_SET_COMPARE(buzzer->htim, buzzer->channel, compare_value);
 80014ae:	6843      	ldr	r3, [r0, #4]
 80014b0:	b91b      	cbnz	r3, 80014ba <Buzzer_SetVolume+0xe>
 80014b2:	6803      	ldr	r3, [r0, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6359      	str	r1, [r3, #52]	@ 0x34
 80014b8:	4770      	bx	lr
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d006      	beq.n	80014cc <Buzzer_SetVolume+0x20>
 80014be:	2b08      	cmp	r3, #8
 80014c0:	6803      	ldr	r3, [r0, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	bf0c      	ite	eq
 80014c6:	63d9      	streq	r1, [r3, #60]	@ 0x3c
 80014c8:	6419      	strne	r1, [r3, #64]	@ 0x40
}
 80014ca:	4770      	bx	lr
    __HAL_TIM_SET_COMPARE(buzzer->htim, buzzer->channel, compare_value);
 80014cc:	6803      	ldr	r3, [r0, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6399      	str	r1, [r3, #56]	@ 0x38
 80014d2:	4770      	bx	lr

080014d4 <Buzzer_Init>:
void Buzzer_Init(BuzzerTypeDef *buzzer) {
 80014d4:	b510      	push	{r4, lr}
 80014d6:	4604      	mov	r4, r0
    Buzzer_SetFrequency(buzzer, buzzer->frequency);
 80014d8:	6881      	ldr	r1, [r0, #8]
 80014da:	f7ff ffdb 	bl	8001494 <Buzzer_SetFrequency>
    Buzzer_SetVolume(buzzer, buzzer->volume);
 80014de:	7b21      	ldrb	r1, [r4, #12]
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff ffe3 	bl	80014ac <Buzzer_SetVolume>
		if (buzzer->htim->Instance == TIM1){
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <Buzzer_Init+0x50>)
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d010      	beq.n	8001512 <Buzzer_Init+0x3e>
    	 period = HAL_RCC_GetPCLK1Freq()/1000000-1;
 80014f0:	f003 fac2 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <Buzzer_Init+0x54>)
 80014f6:	fba3 2300 	umull	r2, r3, r3, r0
 80014fa:	0c9b      	lsrs	r3, r3, #18
 80014fc:	3b01      	subs	r3, #1
    __HAL_TIM_SET_AUTORELOAD(buzzer->htim, period);
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	60d3      	str	r3, [r2, #12]
    HAL_TIM_PWM_Start(buzzer->htim, buzzer->channel);
 8001508:	6861      	ldr	r1, [r4, #4]
 800150a:	6820      	ldr	r0, [r4, #0]
 800150c:	f003 ff70 	bl	80053f0 <HAL_TIM_PWM_Start>
}
 8001510:	bd10      	pop	{r4, pc}
    	 period = HAL_RCC_GetPCLK2Freq()/1000000-1;
 8001512:	f003 fac1 	bl	8004a98 <HAL_RCC_GetPCLK2Freq>
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <Buzzer_Init+0x54>)
 8001518:	fba3 2300 	umull	r2, r3, r3, r0
 800151c:	0c9b      	lsrs	r3, r3, #18
 800151e:	3b01      	subs	r3, #1
 8001520:	e7ed      	b.n	80014fe <Buzzer_Init+0x2a>
 8001522:	bf00      	nop
 8001524:	40012c00 	.word	0x40012c00
 8001528:	431bde83 	.word	0x431bde83

0800152c <ssd1306_WelcomeView>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ssd1306_WelcomeView(){
 800152c:	b530      	push	{r4, r5, lr}
 800152e:	b09b      	sub	sp, #108	@ 0x6c
	uint8_t msg[100];
	ssd1306_Fill(Black);
 8001530:	2000      	movs	r0, #0
 8001532:	f001 f911 	bl	8002758 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001536:	2100      	movs	r1, #0
 8001538:	4608      	mov	r0, r1
 800153a:	f001 fa45 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "BOOTING");
 800153e:	ac01      	add	r4, sp, #4
 8001540:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <ssd1306_WelcomeView+0x74>)
 8001542:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001546:	e884 0003 	stmia.w	r4, {r0, r1}
	ssd1306_WriteString(msg, Font_11x18, White);
 800154a:	4d16      	ldr	r5, [pc, #88]	@ (80015a4 <ssd1306_WelcomeView+0x78>)
 800154c:	2301      	movs	r3, #1
 800154e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001552:	4620      	mov	r0, r4
 8001554:	f001 fa1e 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 25);
 8001558:	2119      	movs	r1, #25
 800155a:	2000      	movs	r0, #0
 800155c:	f001 fa34 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "Course PrjC");
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <ssd1306_WelcomeView+0x7c>)
 8001562:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ssd1306_WriteString(msg, Font_11x18, White);
 800156a:	2301      	movs	r3, #1
 800156c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001570:	4620      	mov	r0, r4
 8001572:	f001 fa0f 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 50);
 8001576:	2132      	movs	r1, #50	@ 0x32
 8001578:	2000      	movs	r0, #0
 800157a:	f001 fa25 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "Initialing...");
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <ssd1306_WelcomeView+0x80>)
 8001580:	46a4      	mov	ip, r4
 8001582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001584:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8001588:	f8ac 3000 	strh.w	r3, [ip]
	ssd1306_WriteString(msg, Font_7x10, White);
 800158c:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <ssd1306_WelcomeView+0x84>)
 800158e:	2301      	movs	r3, #1
 8001590:	ca06      	ldmia	r2, {r1, r2}
 8001592:	4620      	mov	r0, r4
 8001594:	f001 f9fe 	bl	8002994 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001598:	f001 f8ec 	bl	8002774 <ssd1306_UpdateScreen>
}
 800159c:	b01b      	add	sp, #108	@ 0x6c
 800159e:	bd30      	pop	{r4, r5, pc}
 80015a0:	0800a5a0 	.word	0x0800a5a0
 80015a4:	200000e4 	.word	0x200000e4
 80015a8:	0800a5a8 	.word	0x0800a5a8
 80015ac:	0800a5b4 	.word	0x0800a5b4
 80015b0:	200000ec 	.word	0x200000ec

080015b4 <ssd1306_IndexView>:

void ssd1306_IndexView(){
 80015b4:	b530      	push	{r4, r5, lr}
 80015b6:	b0bb      	sub	sp, #236	@ 0xec
	uint8_t msg[100];
	WiFiInfo=ESP_CheckWiFi();
 80015b8:	a812      	add	r0, sp, #72	@ 0x48
 80015ba:	f7ff fd2d 	bl	8001018 <ESP_CheckWiFi>
 80015be:	f10d 0c48 	add.w	ip, sp, #72	@ 0x48
 80015c2:	4d38      	ldr	r5, [pc, #224]	@ (80016a4 <ssd1306_IndexView+0xf0>)
 80015c4:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 80015c8:	462c      	mov	r4, r5
 80015ca:	f8dc 0000 	ldr.w	r0, [ip]
 80015ce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80015d2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80015d6:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80015da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015dc:	f10c 0c10 	add.w	ip, ip, #16
 80015e0:	4625      	mov	r5, r4
 80015e2:	45f4      	cmp	ip, lr
 80015e4:	d1f0      	bne.n	80015c8 <ssd1306_IndexView+0x14>
 80015e6:	f8dc 0000 	ldr.w	r0, [ip]
 80015ea:	6020      	str	r0, [r4, #0]
 80015ec:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80015f0:	7123      	strb	r3, [r4, #4]
	IPInfo=ESP_GetIPInfo();
 80015f2:	4668      	mov	r0, sp
 80015f4:	f7ff fd86 	bl	8001104 <ESP_GetIPInfo>
 80015f8:	2244      	movs	r2, #68	@ 0x44
 80015fa:	4669      	mov	r1, sp
 80015fc:	482a      	ldr	r0, [pc, #168]	@ (80016a8 <ssd1306_IndexView+0xf4>)
 80015fe:	f005 fcae 	bl	8006f5e <memcpy>
	ssd1306_Fill(Black);
 8001602:	2000      	movs	r0, #0
 8001604:	f001 f8a8 	bl	8002758 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001608:	2100      	movs	r1, #0
 800160a:	4608      	mov	r0, r1
 800160c:	f001 f9dc 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "Index");
 8001610:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <ssd1306_IndexView+0xf8>)
 8001612:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001616:	9021      	str	r0, [sp, #132]	@ 0x84
 8001618:	f8ad 1088 	strh.w	r1, [sp, #136]	@ 0x88
	ssd1306_WriteString(msg, Font_11x18, White);
 800161c:	4a24      	ldr	r2, [pc, #144]	@ (80016b0 <ssd1306_IndexView+0xfc>)
 800161e:	2301      	movs	r3, #1
 8001620:	ca06      	ldmia	r2, {r1, r2}
 8001622:	a821      	add	r0, sp, #132	@ 0x84
 8001624:	f001 f9b6 	bl	8002994 <ssd1306_WriteString>



	ssd1306_SetCursor(0 , 56);
 8001628:	2138      	movs	r1, #56	@ 0x38
 800162a:	2000      	movs	r0, #0
 800162c:	f001 f9cc 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "DHT");
 8001630:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <ssd1306_IndexView+0x100>)
 8001632:	9321      	str	r3, [sp, #132]	@ 0x84
	ssd1306_WriteString(msg, Font_6x8, White);
 8001634:	4c20      	ldr	r4, [pc, #128]	@ (80016b8 <ssd1306_IndexView+0x104>)
 8001636:	2301      	movs	r3, #1
 8001638:	e894 0006 	ldmia.w	r4, {r1, r2}
 800163c:	a821      	add	r0, sp, #132	@ 0x84
 800163e:	f001 f9a9 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 56);
 8001642:	2138      	movs	r1, #56	@ 0x38
 8001644:	2020      	movs	r0, #32
 8001646:	f001 f9bf 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "PUMP");
 800164a:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <ssd1306_IndexView+0x108>)
 800164c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001650:	9021      	str	r0, [sp, #132]	@ 0x84
 8001652:	f88d 1088 	strb.w	r1, [sp, #136]	@ 0x88
	ssd1306_WriteString(msg, Font_6x8, White);
 8001656:	2301      	movs	r3, #1
 8001658:	e894 0006 	ldmia.w	r4, {r1, r2}
 800165c:	a821      	add	r0, sp, #132	@ 0x84
 800165e:	f001 f999 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 8001662:	2138      	movs	r1, #56	@ 0x38
 8001664:	2040      	movs	r0, #64	@ 0x40
 8001666:	f001 f9af 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "BEEP");
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <ssd1306_IndexView+0x10c>)
 800166c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001670:	9021      	str	r0, [sp, #132]	@ 0x84
 8001672:	f88d 1088 	strb.w	r1, [sp, #136]	@ 0x88
	ssd1306_WriteString(msg, Font_6x8, White);
 8001676:	2301      	movs	r3, #1
 8001678:	e894 0006 	ldmia.w	r4, {r1, r2}
 800167c:	a821      	add	r0, sp, #132	@ 0x84
 800167e:	f001 f989 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 8001682:	2138      	movs	r1, #56	@ 0x38
 8001684:	2060      	movs	r0, #96	@ 0x60
 8001686:	f001 f99f 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "NET");
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <ssd1306_IndexView+0x110>)
 800168c:	9321      	str	r3, [sp, #132]	@ 0x84
	ssd1306_WriteString(msg, Font_6x8, White);
 800168e:	2301      	movs	r3, #1
 8001690:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001694:	a821      	add	r0, sp, #132	@ 0x84
 8001696:	f001 f97d 	bl	8002994 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800169a:	f001 f86b 	bl	8002774 <ssd1306_UpdateScreen>
}
 800169e:	b03b      	add	sp, #236	@ 0xec
 80016a0:	bd30      	pop	{r4, r5, pc}
 80016a2:	bf00      	nop
 80016a4:	20000344 	.word	0x20000344
 80016a8:	20000300 	.word	0x20000300
 80016ac:	0800a5c4 	.word	0x0800a5c4
 80016b0:	200000e4 	.word	0x200000e4
 80016b4:	00544844 	.word	0x00544844
 80016b8:	200000f4 	.word	0x200000f4
 80016bc:	0800a5cc 	.word	0x0800a5cc
 80016c0:	0800a5d4 	.word	0x0800a5d4
 80016c4:	0054454e 	.word	0x0054454e

080016c8 <ssd1306_NetWorkView>:

void ssd1306_NetWorkView(){
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	b09a      	sub	sp, #104	@ 0x68
	uint8_t msg[100];
	ssd1306_Fill(Black);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f001 f843 	bl	8002758 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 80016d2:	2100      	movs	r1, #0
 80016d4:	4608      	mov	r0, r1
 80016d6:	f001 f977 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "NETWORK %d",WiFiInfo.rssi);
 80016da:	4e27      	ldr	r6, [pc, #156]	@ (8001778 <ssd1306_NetWorkView+0xb0>)
 80016dc:	f996 2033 	ldrsb.w	r2, [r6, #51]	@ 0x33
 80016e0:	4926      	ldr	r1, [pc, #152]	@ (800177c <ssd1306_NetWorkView+0xb4>)
 80016e2:	a801      	add	r0, sp, #4
 80016e4:	f005 faac 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 80016e8:	4a25      	ldr	r2, [pc, #148]	@ (8001780 <ssd1306_NetWorkView+0xb8>)
 80016ea:	2301      	movs	r3, #1
 80016ec:	ca06      	ldmia	r2, {r1, r2}
 80016ee:	a801      	add	r0, sp, #4
 80016f0:	f001 f950 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 80016f4:	2112      	movs	r1, #18
 80016f6:	2000      	movs	r0, #0
 80016f8:	f001 f966 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "%s",esp_config.ap_ssid);
 80016fc:	4921      	ldr	r1, [pc, #132]	@ (8001784 <ssd1306_NetWorkView+0xbc>)
 80016fe:	a801      	add	r0, sp, #4
 8001700:	f005 fc17 	bl	8006f32 <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001704:	4c20      	ldr	r4, [pc, #128]	@ (8001788 <ssd1306_NetWorkView+0xc0>)
 8001706:	2301      	movs	r3, #1
 8001708:	e894 0006 	ldmia.w	r4, {r1, r2}
 800170c:	a801      	add	r0, sp, #4
 800170e:	f001 f941 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 31);
 8001712:	211f      	movs	r1, #31
 8001714:	2000      	movs	r0, #0
 8001716:	f001 f957 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "AP :%s",IPInfo.AP_IP);
 800171a:	4d1c      	ldr	r5, [pc, #112]	@ (800178c <ssd1306_NetWorkView+0xc4>)
 800171c:	462a      	mov	r2, r5
 800171e:	491c      	ldr	r1, [pc, #112]	@ (8001790 <ssd1306_NetWorkView+0xc8>)
 8001720:	a801      	add	r0, sp, #4
 8001722:	f005 fa8d 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001726:	2301      	movs	r3, #1
 8001728:	e894 0006 	ldmia.w	r4, {r1, r2}
 800172c:	a801      	add	r0, sp, #4
 800172e:	f001 f931 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 43);
 8001732:	212b      	movs	r1, #43	@ 0x2b
 8001734:	2000      	movs	r0, #0
 8001736:	f001 f947 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "%s",WiFiInfo.ssid);
 800173a:	4631      	mov	r1, r6
 800173c:	a801      	add	r0, sp, #4
 800173e:	f005 fbf8 	bl	8006f32 <strcpy>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001742:	2301      	movs	r3, #1
 8001744:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001748:	a801      	add	r0, sp, #4
 800174a:	f001 f923 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 54);
 800174e:	2136      	movs	r1, #54	@ 0x36
 8001750:	2000      	movs	r0, #0
 8001752:	f001 f939 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "STA:%s",IPInfo.STA_IP);
 8001756:	f105 0222 	add.w	r2, r5, #34	@ 0x22
 800175a:	490e      	ldr	r1, [pc, #56]	@ (8001794 <ssd1306_NetWorkView+0xcc>)
 800175c:	a801      	add	r0, sp, #4
 800175e:	f005 fa6f 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001762:	2301      	movs	r3, #1
 8001764:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001768:	a801      	add	r0, sp, #4
 800176a:	f001 f913 	bl	8002994 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800176e:	f001 f801 	bl	8002774 <ssd1306_UpdateScreen>
}
 8001772:	b01a      	add	sp, #104	@ 0x68
 8001774:	bd70      	pop	{r4, r5, r6, pc}
 8001776:	bf00      	nop
 8001778:	20000344 	.word	0x20000344
 800177c:	0800a5dc 	.word	0x0800a5dc
 8001780:	200000e4 	.word	0x200000e4
 8001784:	20000042 	.word	0x20000042
 8001788:	200000ec 	.word	0x200000ec
 800178c:	20000300 	.word	0x20000300
 8001790:	0800a5e8 	.word	0x0800a5e8
 8001794:	0800a5f0 	.word	0x0800a5f0

08001798 <ssd1306_SensorView>:

void ssd1306_SensorView(){
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	b09b      	sub	sp, #108	@ 0x6c
	uint8_t msg[100];
	ssd1306_Fill(Black);
 800179c:	2000      	movs	r0, #0
 800179e:	f000 ffdb 	bl	8002758 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 80017a2:	2100      	movs	r1, #0
 80017a4:	4608      	mov	r0, r1
 80017a6:	f001 f90f 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "SENSOR");
 80017aa:	4b81      	ldr	r3, [pc, #516]	@ (80019b0 <ssd1306_SensorView+0x218>)
 80017ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017b0:	9001      	str	r0, [sp, #4]
 80017b2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80017b6:	0c09      	lsrs	r1, r1, #16
 80017b8:	f88d 100a 	strb.w	r1, [sp, #10]
	ssd1306_WriteString(msg, Font_11x18, White);
 80017bc:	4c7d      	ldr	r4, [pc, #500]	@ (80019b4 <ssd1306_SensorView+0x21c>)
 80017be:	2301      	movs	r3, #1
 80017c0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017c4:	a801      	add	r0, sp, #4
 80017c6:	f001 f8e5 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 80017ca:	2112      	movs	r1, #18
 80017cc:	2000      	movs	r0, #0
 80017ce:	f001 f8fb 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "T:%dC",(uint8_t)DHT11_Info.temp);
 80017d2:	4d79      	ldr	r5, [pc, #484]	@ (80019b8 <ssd1306_SensorView+0x220>)
 80017d4:	6868      	ldr	r0, [r5, #4]
 80017d6:	f7ff fb89 	bl	8000eec <__aeabi_f2uiz>
 80017da:	b2c2      	uxtb	r2, r0
 80017dc:	4977      	ldr	r1, [pc, #476]	@ (80019bc <ssd1306_SensorView+0x224>)
 80017de:	a801      	add	r0, sp, #4
 80017e0:	f005 fa2e 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 80017e4:	2301      	movs	r3, #1
 80017e6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017ea:	a801      	add	r0, sp, #4
 80017ec:	f001 f8d2 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 18);
 80017f0:	2112      	movs	r1, #18
 80017f2:	2040      	movs	r0, #64	@ 0x40
 80017f4:	f001 f8e8 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "H:%d%%",(uint8_t)DHT11_Info.hum);
 80017f8:	6828      	ldr	r0, [r5, #0]
 80017fa:	f7ff fb77 	bl	8000eec <__aeabi_f2uiz>
 80017fe:	b2c2      	uxtb	r2, r0
 8001800:	496f      	ldr	r1, [pc, #444]	@ (80019c0 <ssd1306_SensorView+0x228>)
 8001802:	a801      	add	r0, sp, #4
 8001804:	f005 fa1c 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001808:	2301      	movs	r3, #1
 800180a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800180e:	a801      	add	r0, sp, #4
 8001810:	f001 f8c0 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 8001814:	2124      	movs	r1, #36	@ 0x24
 8001816:	2000      	movs	r0, #0
 8001818:	f001 f8d6 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "%d",(uint8_t)DHT11_Alarm_L.temp);
 800181c:	4f69      	ldr	r7, [pc, #420]	@ (80019c4 <ssd1306_SensorView+0x22c>)
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fb64 	bl	8000eec <__aeabi_f2uiz>
 8001824:	4e68      	ldr	r6, [pc, #416]	@ (80019c8 <ssd1306_SensorView+0x230>)
 8001826:	b2c2      	uxtb	r2, r0
 8001828:	4631      	mov	r1, r6
 800182a:	a801      	add	r0, sp, #4
 800182c:	f005 fa08 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001830:	4c66      	ldr	r4, [pc, #408]	@ (80019cc <ssd1306_SensorView+0x234>)
 8001832:	2301      	movs	r3, #1
 8001834:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001838:	a801      	add	r0, sp, #4
 800183a:	f001 f8ab 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 36);
 800183e:	2124      	movs	r1, #36	@ 0x24
 8001840:	2020      	movs	r0, #32
 8001842:	f001 f8c1 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "%d",(uint8_t)DHT11_Alarm_H.temp);
 8001846:	4d62      	ldr	r5, [pc, #392]	@ (80019d0 <ssd1306_SensorView+0x238>)
 8001848:	6868      	ldr	r0, [r5, #4]
 800184a:	f7ff fb4f 	bl	8000eec <__aeabi_f2uiz>
 800184e:	b2c2      	uxtb	r2, r0
 8001850:	4631      	mov	r1, r6
 8001852:	a801      	add	r0, sp, #4
 8001854:	f005 f9f4 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001858:	2301      	movs	r3, #1
 800185a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800185e:	a801      	add	r0, sp, #4
 8001860:	f001 f898 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 36);
 8001864:	2124      	movs	r1, #36	@ 0x24
 8001866:	2060      	movs	r0, #96	@ 0x60
 8001868:	f001 f8ae 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "%d",(uint8_t)DHT11_Alarm_L.hum);
 800186c:	6838      	ldr	r0, [r7, #0]
 800186e:	f7ff fb3d 	bl	8000eec <__aeabi_f2uiz>
 8001872:	b2c2      	uxtb	r2, r0
 8001874:	4631      	mov	r1, r6
 8001876:	a801      	add	r0, sp, #4
 8001878:	f005 f9e2 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 800187c:	2301      	movs	r3, #1
 800187e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001882:	a801      	add	r0, sp, #4
 8001884:	f001 f886 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 36);
 8001888:	2124      	movs	r1, #36	@ 0x24
 800188a:	2040      	movs	r0, #64	@ 0x40
 800188c:	f001 f89c 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "%d",(uint8_t)DHT11_Alarm_H.hum);
 8001890:	6828      	ldr	r0, [r5, #0]
 8001892:	f7ff fb2b 	bl	8000eec <__aeabi_f2uiz>
 8001896:	b2c2      	uxtb	r2, r0
 8001898:	4631      	mov	r1, r6
 800189a:	a801      	add	r0, sp, #4
 800189c:	f005 f9d0 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 80018a0:	2301      	movs	r3, #1
 80018a2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80018a6:	a801      	add	r0, sp, #4
 80018a8:	f001 f874 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 46);
 80018ac:	212e      	movs	r1, #46	@ 0x2e
 80018ae:	2000      	movs	r0, #0
 80018b0:	f001 f88a 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "SOIL");
 80018b4:	4b47      	ldr	r3, [pc, #284]	@ (80019d4 <ssd1306_SensorView+0x23c>)
 80018b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ba:	9001      	str	r0, [sp, #4]
 80018bc:	f88d 1008 	strb.w	r1, [sp, #8]
	ssd1306_WriteString(msg, Font_7x10, White);
 80018c0:	2301      	movs	r3, #1
 80018c2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80018c6:	a801      	add	r0, sp, #4
 80018c8:	f001 f864 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 46);
 80018cc:	212e      	movs	r1, #46	@ 0x2e
 80018ce:	2020      	movs	r0, #32
 80018d0:	f001 f87a 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "1:%d",(uint8_t)DHT11_Alarm_H.temp);
 80018d4:	6868      	ldr	r0, [r5, #4]
 80018d6:	f7ff fb09 	bl	8000eec <__aeabi_f2uiz>
 80018da:	b2c2      	uxtb	r2, r0
 80018dc:	493e      	ldr	r1, [pc, #248]	@ (80019d8 <ssd1306_SensorView+0x240>)
 80018de:	a801      	add	r0, sp, #4
 80018e0:	f005 f9ae 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 80018e4:	2301      	movs	r3, #1
 80018e6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80018ea:	a801      	add	r0, sp, #4
 80018ec:	f001 f852 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 46);
 80018f0:	212e      	movs	r1, #46	@ 0x2e
 80018f2:	2060      	movs	r0, #96	@ 0x60
 80018f4:	f001 f868 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "2:%d",(uint8_t)DHT11_Alarm_H.temp);
 80018f8:	6868      	ldr	r0, [r5, #4]
 80018fa:	f7ff faf7 	bl	8000eec <__aeabi_f2uiz>
 80018fe:	b2c2      	uxtb	r2, r0
 8001900:	4936      	ldr	r1, [pc, #216]	@ (80019dc <ssd1306_SensorView+0x244>)
 8001902:	a801      	add	r0, sp, #4
 8001904:	f005 f99c 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 8001908:	2301      	movs	r3, #1
 800190a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800190e:	a801      	add	r0, sp, #4
 8001910:	f001 f840 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 46);
 8001914:	212e      	movs	r1, #46	@ 0x2e
 8001916:	2040      	movs	r0, #64	@ 0x40
 8001918:	f001 f856 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "3:%d",(uint8_t)DHT11_Alarm_H.temp);
 800191c:	6868      	ldr	r0, [r5, #4]
 800191e:	f7ff fae5 	bl	8000eec <__aeabi_f2uiz>
 8001922:	b2c2      	uxtb	r2, r0
 8001924:	492e      	ldr	r1, [pc, #184]	@ (80019e0 <ssd1306_SensorView+0x248>)
 8001926:	a801      	add	r0, sp, #4
 8001928:	f005 f98a 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_7x10, White);
 800192c:	2301      	movs	r3, #1
 800192e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001932:	a801      	add	r0, sp, #4
 8001934:	f001 f82e 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0 , 56);
 8001938:	2138      	movs	r1, #56	@ 0x38
 800193a:	2000      	movs	r0, #0
 800193c:	f001 f844 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "<");
 8001940:	233c      	movs	r3, #60	@ 0x3c
 8001942:	f8ad 3004 	strh.w	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001946:	4c27      	ldr	r4, [pc, #156]	@ (80019e4 <ssd1306_SensorView+0x24c>)
 8001948:	2301      	movs	r3, #1
 800194a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800194e:	a801      	add	r0, sp, #4
 8001950:	f001 f820 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(16, 56);
 8001954:	2138      	movs	r1, #56	@ 0x38
 8001956:	2010      	movs	r0, #16
 8001958:	f001 f836 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "%s", settings[FLAG_NowSettingVal]);
 800195c:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <ssd1306_SensorView+0x250>)
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <ssd1306_SensorView+0x254>)
 8001962:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001966:	a801      	add	r0, sp, #4
 8001968:	f005 fae3 	bl	8006f32 <strcpy>
	ssd1306_WriteString(msg, Font_6x8, White);
 800196c:	2301      	movs	r3, #1
 800196e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001972:	a801      	add	r0, sp, #4
 8001974:	f001 f80e 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 8001978:	2138      	movs	r1, #56	@ 0x38
 800197a:	2040      	movs	r0, #64	@ 0x40
 800197c:	f001 f824 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, " \\/");
 8001980:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <ssd1306_SensorView+0x258>)
 8001982:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001984:	2301      	movs	r3, #1
 8001986:	e894 0006 	ldmia.w	r4, {r1, r2}
 800198a:	a801      	add	r0, sp, #4
 800198c:	f001 f802 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 8001990:	2138      	movs	r1, #56	@ 0x38
 8001992:	2060      	movs	r0, #96	@ 0x60
 8001994:	f001 f818 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, " /\\");
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <ssd1306_SensorView+0x25c>)
 800199a:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 800199c:	2301      	movs	r3, #1
 800199e:	e894 0006 	ldmia.w	r4, {r1, r2}
 80019a2:	a801      	add	r0, sp, #4
 80019a4:	f000 fff6 	bl	8002994 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80019a8:	f000 fee4 	bl	8002774 <ssd1306_UpdateScreen>
}
 80019ac:	b01b      	add	sp, #108	@ 0x6c
 80019ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b0:	0800a5f8 	.word	0x0800a5f8
 80019b4:	200000e4 	.word	0x200000e4
 80019b8:	200002f8 	.word	0x200002f8
 80019bc:	0800a600 	.word	0x0800a600
 80019c0:	0800a608 	.word	0x0800a608
 80019c4:	200000d0 	.word	0x200000d0
 80019c8:	0800a5e4 	.word	0x0800a5e4
 80019cc:	200000ec 	.word	0x200000ec
 80019d0:	200000d8 	.word	0x200000d8
 80019d4:	0800a610 	.word	0x0800a610
 80019d8:	0800a618 	.word	0x0800a618
 80019dc:	0800a620 	.word	0x0800a620
 80019e0:	0800a628 	.word	0x0800a628
 80019e4:	200000f4 	.word	0x200000f4
 80019e8:	20000095 	.word	0x20000095
 80019ec:	20000098 	.word	0x20000098
 80019f0:	002f5c20 	.word	0x002f5c20
 80019f4:	005c2f20 	.word	0x005c2f20

080019f8 <ssd1306_PumpView>:

void ssd1306_PumpView(){
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	b09a      	sub	sp, #104	@ 0x68
	uint8_t msg[100];
	ssd1306_Fill(Black);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f000 feab 	bl	8002758 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	4608      	mov	r0, r1
 8001a06:	f000 ffdf 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "PUMP");
 8001a0a:	ac01      	add	r4, sp, #4
 8001a0c:	4b46      	ldr	r3, [pc, #280]	@ (8001b28 <ssd1306_PumpView+0x130>)
 8001a0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a12:	9001      	str	r0, [sp, #4]
 8001a14:	f88d 1008 	strb.w	r1, [sp, #8]
	ssd1306_WriteString(msg, Font_11x18, White);
 8001a18:	4d44      	ldr	r5, [pc, #272]	@ (8001b2c <ssd1306_PumpView+0x134>)
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001a20:	4620      	mov	r0, r4
 8001a22:	f000 ffb7 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8001a26:	2112      	movs	r1, #18
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 ffcd 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "U:%d\r\n", PUMP[0]);
 8001a2e:	4e40      	ldr	r6, [pc, #256]	@ (8001b30 <ssd1306_PumpView+0x138>)
 8001a30:	8832      	ldrh	r2, [r6, #0]
 8001a32:	4940      	ldr	r1, [pc, #256]	@ (8001b34 <ssd1306_PumpView+0x13c>)
 8001a34:	4620      	mov	r0, r4
 8001a36:	f005 f903 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001a40:	4620      	mov	r0, r4
 8001a42:	f000 ffa7 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 18);
 8001a46:	2112      	movs	r1, #18
 8001a48:	2040      	movs	r0, #64	@ 0x40
 8001a4a:	f000 ffbd 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "I:%d\r\n", PUMP[1]);
 8001a4e:	8872      	ldrh	r2, [r6, #2]
 8001a50:	4939      	ldr	r1, [pc, #228]	@ (8001b38 <ssd1306_PumpView+0x140>)
 8001a52:	4620      	mov	r0, r4
 8001a54:	f005 f8f4 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f000 ff98 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 8001a64:	2124      	movs	r1, #36	@ 0x24
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 ffae 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "Duty:%d", Period_);
 8001a6c:	4b33      	ldr	r3, [pc, #204]	@ (8001b3c <ssd1306_PumpView+0x144>)
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	4933      	ldr	r1, [pc, #204]	@ (8001b40 <ssd1306_PumpView+0x148>)
 8001a72:	4620      	mov	r0, r4
 8001a74:	f005 f8e4 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f000 ff88 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(110, 36);
 8001a84:	2124      	movs	r1, #36	@ 0x24
 8001a86:	206e      	movs	r0, #110	@ 0x6e
 8001a88:	f000 ff9e 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "MAX");
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b44 <ssd1306_PumpView+0x14c>)
 8001a8e:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001a90:	4d2d      	ldr	r5, [pc, #180]	@ (8001b48 <ssd1306_PumpView+0x150>)
 8001a92:	2301      	movs	r3, #1
 8001a94:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f000 ff7b 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(110, 45);
 8001a9e:	212d      	movs	r1, #45	@ 0x2d
 8001aa0:	206e      	movs	r0, #110	@ 0x6e
 8001aa2:	f000 ff91 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "720");
 8001aa6:	4b29      	ldr	r3, [pc, #164]	@ (8001b4c <ssd1306_PumpView+0x154>)
 8001aa8:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f000 ff6f 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0 , 56);
 8001ab6:	2138      	movs	r1, #56	@ 0x38
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f000 ff85 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "<");
 8001abe:	233c      	movs	r3, #60	@ 0x3c
 8001ac0:	f8ad 3004 	strh.w	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001aca:	4620      	mov	r0, r4
 8001acc:	f000 ff62 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(16, 56);
 8001ad0:	2138      	movs	r1, #56	@ 0x38
 8001ad2:	2010      	movs	r0, #16
 8001ad4:	f000 ff78 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "TimeSet");
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <ssd1306_PumpView+0x158>)
 8001ada:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ade:	e884 0003 	stmia.w	r4, {r0, r1}
	ssd1306_WriteString(msg, Font_6x8, White);
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f000 ff53 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 8001aee:	2138      	movs	r1, #56	@ 0x38
 8001af0:	2040      	movs	r0, #64	@ 0x40
 8001af2:	f000 ff69 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, " \\/");
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <ssd1306_PumpView+0x15c>)
 8001af8:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001afa:	2301      	movs	r3, #1
 8001afc:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001b00:	4620      	mov	r0, r4
 8001b02:	f000 ff47 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 8001b06:	2138      	movs	r1, #56	@ 0x38
 8001b08:	2060      	movs	r0, #96	@ 0x60
 8001b0a:	f000 ff5d 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, " /\\");
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <ssd1306_PumpView+0x160>)
 8001b10:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001b12:	2301      	movs	r3, #1
 8001b14:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f000 ff3b 	bl	8002994 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001b1e:	f000 fe29 	bl	8002774 <ssd1306_UpdateScreen>
}
 8001b22:	b01a      	add	sp, #104	@ 0x68
 8001b24:	bd70      	pop	{r4, r5, r6, pc}
 8001b26:	bf00      	nop
 8001b28:	0800a5cc 	.word	0x0800a5cc
 8001b2c:	200000e4 	.word	0x200000e4
 8001b30:	2000037c 	.word	0x2000037c
 8001b34:	0800a630 	.word	0x0800a630
 8001b38:	0800a638 	.word	0x0800a638
 8001b3c:	200000e0 	.word	0x200000e0
 8001b40:	0800a640 	.word	0x0800a640
 8001b44:	0058414d 	.word	0x0058414d
 8001b48:	200000f4 	.word	0x200000f4
 8001b4c:	00303237 	.word	0x00303237
 8001b50:	0800a648 	.word	0x0800a648
 8001b54:	002f5c20 	.word	0x002f5c20
 8001b58:	005c2f20 	.word	0x005c2f20

08001b5c <ssd1306_BuzzerView>:

void ssd1306_BuzzerView(){
 8001b5c:	b510      	push	{r4, lr}
 8001b5e:	b09a      	sub	sp, #104	@ 0x68
	uint8_t msg[100];
	ssd1306_Fill(Black);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 fdf9 	bl	8002758 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001b66:	2100      	movs	r1, #0
 8001b68:	4608      	mov	r0, r1
 8001b6a:	f000 ff2d 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "BUZZER");
 8001b6e:	4b37      	ldr	r3, [pc, #220]	@ (8001c4c <ssd1306_BuzzerView+0xf0>)
 8001b70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b74:	9001      	str	r0, [sp, #4]
 8001b76:	f8ad 1008 	strh.w	r1, [sp, #8]
 8001b7a:	0c09      	lsrs	r1, r1, #16
 8001b7c:	f88d 100a 	strb.w	r1, [sp, #10]
	ssd1306_WriteString(msg, Font_11x18, White);
 8001b80:	4c33      	ldr	r4, [pc, #204]	@ (8001c50 <ssd1306_BuzzerView+0xf4>)
 8001b82:	2301      	movs	r3, #1
 8001b84:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001b88:	a801      	add	r0, sp, #4
 8001b8a:	f000 ff03 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8001b8e:	2112      	movs	r1, #18
 8001b90:	2000      	movs	r0, #0
 8001b92:	f000 ff19 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "FREQ:%d\r\n",buzzer.frequency );
 8001b96:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <ssd1306_BuzzerView+0xf8>)
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	492f      	ldr	r1, [pc, #188]	@ (8001c58 <ssd1306_BuzzerView+0xfc>)
 8001b9c:	a801      	add	r0, sp, #4
 8001b9e:	f005 f84f 	bl	8006c40 <siprintf>
	ssd1306_WriteString(msg, Font_11x18, White);
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001ba8:	a801      	add	r0, sp, #4
 8001baa:	f000 fef3 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 8001bae:	2124      	movs	r1, #36	@ 0x24
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 ff09 	bl	80029c8 <ssd1306_SetCursor>
    sprintf(msg, "MUTE: %s\r\n", FLAG_MUTE ? "ON" : "OFF");
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <ssd1306_BuzzerView+0x100>)
 8001bb8:	7819      	ldrb	r1, [r3, #0]
 8001bba:	4a29      	ldr	r2, [pc, #164]	@ (8001c60 <ssd1306_BuzzerView+0x104>)
 8001bbc:	4b29      	ldr	r3, [pc, #164]	@ (8001c64 <ssd1306_BuzzerView+0x108>)
 8001bbe:	2900      	cmp	r1, #0
 8001bc0:	bf18      	it	ne
 8001bc2:	461a      	movne	r2, r3
 8001bc4:	4928      	ldr	r1, [pc, #160]	@ (8001c68 <ssd1306_BuzzerView+0x10c>)
 8001bc6:	a801      	add	r0, sp, #4
 8001bc8:	f005 f83a 	bl	8006c40 <siprintf>
    ssd1306_WriteString(msg, Font_11x18, White);
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001bd2:	a801      	add	r0, sp, #4
 8001bd4:	f000 fede 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(0 , 56);
 8001bd8:	2138      	movs	r1, #56	@ 0x38
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 fef4 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "<");
 8001be0:	233c      	movs	r3, #60	@ 0x3c
 8001be2:	f8ad 3004 	strh.w	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001be6:	4c21      	ldr	r4, [pc, #132]	@ (8001c6c <ssd1306_BuzzerView+0x110>)
 8001be8:	2301      	movs	r3, #1
 8001bea:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001bee:	a801      	add	r0, sp, #4
 8001bf0:	f000 fed0 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(24, 56);
 8001bf4:	2138      	movs	r1, #56	@ 0x38
 8001bf6:	2018      	movs	r0, #24
 8001bf8:	f000 fee6 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, "MUTE");
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <ssd1306_BuzzerView+0x114>)
 8001bfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c02:	9001      	str	r0, [sp, #4]
 8001c04:	f88d 1008 	strb.w	r1, [sp, #8]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c0e:	a801      	add	r0, sp, #4
 8001c10:	f000 fec0 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 56);
 8001c14:	2138      	movs	r1, #56	@ 0x38
 8001c16:	2040      	movs	r0, #64	@ 0x40
 8001c18:	f000 fed6 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, " \\/");
 8001c1c:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <ssd1306_BuzzerView+0x118>)
 8001c1e:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001c20:	2301      	movs	r3, #1
 8001c22:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c26:	a801      	add	r0, sp, #4
 8001c28:	f000 feb4 	bl	8002994 <ssd1306_WriteString>
	ssd1306_SetCursor(96, 56);
 8001c2c:	2138      	movs	r1, #56	@ 0x38
 8001c2e:	2060      	movs	r0, #96	@ 0x60
 8001c30:	f000 feca 	bl	80029c8 <ssd1306_SetCursor>
	sprintf(msg, " /\\");
 8001c34:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <ssd1306_BuzzerView+0x11c>)
 8001c36:	9301      	str	r3, [sp, #4]
	ssd1306_WriteString(msg, Font_6x8, White);
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c3e:	a801      	add	r0, sp, #4
 8001c40:	f000 fea8 	bl	8002994 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c44:	f000 fd96 	bl	8002774 <ssd1306_UpdateScreen>
}
 8001c48:	b01a      	add	sp, #104	@ 0x68
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	0800a658 	.word	0x0800a658
 8001c50:	200000e4 	.word	0x200000e4
 8001c54:	200000ac 	.word	0x200000ac
 8001c58:	0800a660 	.word	0x0800a660
 8001c5c:	20000380 	.word	0x20000380
 8001c60:	0800a654 	.word	0x0800a654
 8001c64:	0800a650 	.word	0x0800a650
 8001c68:	0800a66c 	.word	0x0800a66c
 8001c6c:	200000f4 	.word	0x200000f4
 8001c70:	0800a678 	.word	0x0800a678
 8001c74:	002f5c20 	.word	0x002f5c20
 8001c78:	005c2f20 	.word	0x005c2f20

08001c7c <KeyHandeler_IndexView>:

void KeyHandeler_WelcomeView(){

}
void KeyHandeler_IndexView(){
	if (FLAG_SentKEY0) {
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <KeyHandeler_IndexView+0x50>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b133      	cbz	r3, 8001c90 <KeyHandeler_IndexView+0x14>
		FLAG_SentKEY0=0;
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <KeyHandeler_IndexView+0x50>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <KeyHandeler_IndexView+0x54>)
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	4770      	bx	lr
	}else
	if (FLAG_SentKEY1) {
 8001c90:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <KeyHandeler_IndexView+0x58>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b133      	cbz	r3, 8001ca4 <KeyHandeler_IndexView+0x28>
		FLAG_SentKEY1=0;
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <KeyHandeler_IndexView+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
		CurrentView=V_BUZZER;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <KeyHandeler_IndexView+0x54>)
 8001c9e:	2205      	movs	r2, #5
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	4770      	bx	lr
	}else
	if (FLAG_SentKEY2) {
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <KeyHandeler_IndexView+0x5c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b133      	cbz	r3, 8001cb8 <KeyHandeler_IndexView+0x3c>
		FLAG_SentKEY2=0;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <KeyHandeler_IndexView+0x5c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
		CurrentView=V_PUMP;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <KeyHandeler_IndexView+0x54>)
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	4770      	bx	lr
	}else
	if (FLAG_SentKEY3) {
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <KeyHandeler_IndexView+0x60>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b12b      	cbz	r3, 8001cca <KeyHandeler_IndexView+0x4e>
		FLAG_SentKEY3=0;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <KeyHandeler_IndexView+0x60>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
		CurrentView=V_INDEX;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <KeyHandeler_IndexView+0x54>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
	}
}
 8001cca:	4770      	bx	lr
 8001ccc:	200002f3 	.word	0x200002f3
 8001cd0:	200000a8 	.word	0x200000a8
 8001cd4:	200002f2 	.word	0x200002f2
 8001cd8:	200002f1 	.word	0x200002f1
 8001cdc:	200002f0 	.word	0x200002f0

08001ce0 <KeyHandeler_NetWorkView>:

void KeyHandeler_NetWorkView(){
	if (FLAG_SentKEY0) {
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <KeyHandeler_NetWorkView+0x50>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b133      	cbz	r3, 8001cf4 <KeyHandeler_NetWorkView+0x14>
		FLAG_SentKEY0=0;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <KeyHandeler_NetWorkView+0x50>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <KeyHandeler_NetWorkView+0x54>)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	4770      	bx	lr
	}else
	if (FLAG_SentKEY1) {
 8001cf4:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <KeyHandeler_NetWorkView+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b133      	cbz	r3, 8001d08 <KeyHandeler_NetWorkView+0x28>
		FLAG_SentKEY1=0;
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <KeyHandeler_NetWorkView+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <KeyHandeler_NetWorkView+0x54>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	4770      	bx	lr
	}else
	if (FLAG_SentKEY2) {
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <KeyHandeler_NetWorkView+0x5c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b133      	cbz	r3, 8001d1c <KeyHandeler_NetWorkView+0x3c>
		FLAG_SentKEY2=0;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <KeyHandeler_NetWorkView+0x5c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001d14:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <KeyHandeler_NetWorkView+0x54>)
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	4770      	bx	lr
	}else
	if (FLAG_SentKEY3) {
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <KeyHandeler_NetWorkView+0x60>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b12b      	cbz	r3, 8001d2e <KeyHandeler_NetWorkView+0x4e>
		FLAG_SentKEY3=0;
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <KeyHandeler_NetWorkView+0x60>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
		CurrentView=V_INDEX;
 8001d28:	4b02      	ldr	r3, [pc, #8]	@ (8001d34 <KeyHandeler_NetWorkView+0x54>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
	}
}
 8001d2e:	4770      	bx	lr
 8001d30:	200002f3 	.word	0x200002f3
 8001d34:	200000a8 	.word	0x200000a8
 8001d38:	200002f2 	.word	0x200002f2
 8001d3c:	200002f1 	.word	0x200002f1
 8001d40:	200002f0 	.word	0x200002f0

08001d44 <KeyHandeler_SensorView>:
void KeyHandeler_SensorView(){
	if (FLAG_SentKEY0) {
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <KeyHandeler_SensorView+0x50>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b133      	cbz	r3, 8001d58 <KeyHandeler_SensorView+0x14>
		FLAG_SentKEY0=0;
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <KeyHandeler_SensorView+0x50>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <KeyHandeler_SensorView+0x54>)
 8001d52:	2202      	movs	r2, #2
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	4770      	bx	lr
	}else
	if (FLAG_SentKEY1) {
 8001d58:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <KeyHandeler_SensorView+0x58>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b133      	cbz	r3, 8001d6c <KeyHandeler_SensorView+0x28>
		FLAG_SentKEY1=0;
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <KeyHandeler_SensorView+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <KeyHandeler_SensorView+0x54>)
 8001d66:	2202      	movs	r2, #2
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	4770      	bx	lr
	}else
	if (FLAG_SentKEY2) {
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <KeyHandeler_SensorView+0x5c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b133      	cbz	r3, 8001d80 <KeyHandeler_SensorView+0x3c>
		FLAG_SentKEY2=0;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <KeyHandeler_SensorView+0x5c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <KeyHandeler_SensorView+0x54>)
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	4770      	bx	lr
	}else
	if (FLAG_SentKEY3) {
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <KeyHandeler_SensorView+0x60>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b12b      	cbz	r3, 8001d92 <KeyHandeler_SensorView+0x4e>
		FLAG_SentKEY3=0;
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <KeyHandeler_SensorView+0x60>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
		CurrentView=V_INDEX;
 8001d8c:	4b02      	ldr	r3, [pc, #8]	@ (8001d98 <KeyHandeler_SensorView+0x54>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
	}
}
 8001d92:	4770      	bx	lr
 8001d94:	200002f3 	.word	0x200002f3
 8001d98:	200000a8 	.word	0x200000a8
 8001d9c:	200002f2 	.word	0x200002f2
 8001da0:	200002f1 	.word	0x200002f1
 8001da4:	200002f0 	.word	0x200002f0

08001da8 <KeyHandeler_PumpView>:
void KeyHandeler_PumpView(){
	if (FLAG_SentKEY0) {
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <KeyHandeler_PumpView+0x50>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b133      	cbz	r3, 8001dbc <KeyHandeler_PumpView+0x14>
		FLAG_SentKEY0=0;
 8001dae:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <KeyHandeler_PumpView+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <KeyHandeler_PumpView+0x54>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	4770      	bx	lr
	}else
	if (FLAG_SentKEY1) {
 8001dbc:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <KeyHandeler_PumpView+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b133      	cbz	r3, 8001dd0 <KeyHandeler_PumpView+0x28>
		FLAG_SentKEY1=0;
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <KeyHandeler_PumpView+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <KeyHandeler_PumpView+0x54>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	4770      	bx	lr
	}else
	if (FLAG_SentKEY2) {
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <KeyHandeler_PumpView+0x5c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b133      	cbz	r3, 8001de4 <KeyHandeler_PumpView+0x3c>
		FLAG_SentKEY2=0;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <KeyHandeler_PumpView+0x5c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <KeyHandeler_PumpView+0x54>)
 8001dde:	2202      	movs	r2, #2
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	4770      	bx	lr
	}else
	if (FLAG_SentKEY3) {
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <KeyHandeler_PumpView+0x60>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b12b      	cbz	r3, 8001df6 <KeyHandeler_PumpView+0x4e>
		FLAG_SentKEY3=0;
 8001dea:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <KeyHandeler_PumpView+0x60>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
		CurrentView=V_INDEX;
 8001df0:	4b02      	ldr	r3, [pc, #8]	@ (8001dfc <KeyHandeler_PumpView+0x54>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
	}
}
 8001df6:	4770      	bx	lr
 8001df8:	200002f3 	.word	0x200002f3
 8001dfc:	200000a8 	.word	0x200000a8
 8001e00:	200002f2 	.word	0x200002f2
 8001e04:	200002f1 	.word	0x200002f1
 8001e08:	200002f0 	.word	0x200002f0

08001e0c <KeyHandeler_BuzzerView>:
void KeyHandeler_BuzzerView(){
	if (FLAG_SentKEY0) {
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <KeyHandeler_BuzzerView+0x50>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b133      	cbz	r3, 8001e20 <KeyHandeler_BuzzerView+0x14>
		FLAG_SentKEY0=0;
 8001e12:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <KeyHandeler_BuzzerView+0x50>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <KeyHandeler_BuzzerView+0x54>)
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	4770      	bx	lr
	}else
	if (FLAG_SentKEY1) {
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <KeyHandeler_BuzzerView+0x58>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b133      	cbz	r3, 8001e34 <KeyHandeler_BuzzerView+0x28>
		FLAG_SentKEY1=0;
 8001e26:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <KeyHandeler_BuzzerView+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <KeyHandeler_BuzzerView+0x54>)
 8001e2e:	2202      	movs	r2, #2
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	4770      	bx	lr
	}else
	if (FLAG_SentKEY2) {
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <KeyHandeler_BuzzerView+0x5c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b133      	cbz	r3, 8001e48 <KeyHandeler_BuzzerView+0x3c>
		FLAG_SentKEY2=0;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <KeyHandeler_BuzzerView+0x5c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
		CurrentView=V_NETWORK;
 8001e40:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <KeyHandeler_BuzzerView+0x54>)
 8001e42:	2202      	movs	r2, #2
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	4770      	bx	lr
	}else
	if (FLAG_SentKEY3) {
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <KeyHandeler_BuzzerView+0x60>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b12b      	cbz	r3, 8001e5a <KeyHandeler_BuzzerView+0x4e>
		FLAG_SentKEY3=0;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <KeyHandeler_BuzzerView+0x60>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
		CurrentView=V_INDEX;
 8001e54:	4b02      	ldr	r3, [pc, #8]	@ (8001e60 <KeyHandeler_BuzzerView+0x54>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
	}
}
 8001e5a:	4770      	bx	lr
 8001e5c:	200002f3 	.word	0x200002f3
 8001e60:	200000a8 	.word	0x200000a8
 8001e64:	200002f2 	.word	0x200002f2
 8001e68:	200002f1 	.word	0x200002f1
 8001e6c:	200002f0 	.word	0x200002f0

08001e70 <KeyHandeler>:


void KeyHandeler(uint8_t SWView) {
 8001e70:	b508      	push	{r3, lr}
	if (SWView == V_WELCOME) {
 8001e72:	3801      	subs	r0, #1
 8001e74:	2804      	cmp	r0, #4
 8001e76:	d806      	bhi.n	8001e86 <KeyHandeler+0x16>
 8001e78:	e8df f000 	tbb	[pc, r0]
 8001e7c:	0c090603 	.word	0x0c090603
 8001e80:	0f          	.byte	0x0f
 8001e81:	00          	.byte	0x00
	    KeyHandeler_WelcomeView();
	} else if (SWView == V_INDEX) {
	    KeyHandeler_IndexView();
 8001e82:	f7ff fefb 	bl	8001c7c <KeyHandeler_IndexView>
//			}else
//			if (FLAG_SentKEY3) {
//				CurrentView=V_SENSOR;
//				FLAG_SentKEY3=0;
//			}
}
 8001e86:	bd08      	pop	{r3, pc}
	    KeyHandeler_NetWorkView();
 8001e88:	f7ff ff2a 	bl	8001ce0 <KeyHandeler_NetWorkView>
 8001e8c:	e7fb      	b.n	8001e86 <KeyHandeler+0x16>
	    KeyHandeler_SensorView();
 8001e8e:	f7ff ff59 	bl	8001d44 <KeyHandeler_SensorView>
 8001e92:	e7f8      	b.n	8001e86 <KeyHandeler+0x16>
	    KeyHandeler_PumpView();
 8001e94:	f7ff ff88 	bl	8001da8 <KeyHandeler_PumpView>
 8001e98:	e7f5      	b.n	8001e86 <KeyHandeler+0x16>
	    KeyHandeler_BuzzerView();
 8001e9a:	f7ff ffb7 	bl	8001e0c <KeyHandeler_BuzzerView>
}
 8001e9e:	e7f2      	b.n	8001e86 <KeyHandeler+0x16>

08001ea0 <ShowView>:

void ShowView(uint8_t SWView) {
 8001ea0:	b508      	push	{r3, lr}
    switch (SWView) {
 8001ea2:	2805      	cmp	r0, #5
 8001ea4:	d806      	bhi.n	8001eb4 <ShowView+0x14>
 8001ea6:	e8df f000 	tbb	[pc, r0]
 8001eaa:	0603      	.short	0x0603
 8001eac:	120f0c09 	.word	0x120f0c09
        case V_WELCOME:
            ssd1306_WelcomeView();
 8001eb0:	f7ff fb3c 	bl	800152c <ssd1306_WelcomeView>
            break;
        default:
            // Handle invalid view case
            break;
    }
}
 8001eb4:	bd08      	pop	{r3, pc}
            ssd1306_IndexView();
 8001eb6:	f7ff fb7d 	bl	80015b4 <ssd1306_IndexView>
            break;
 8001eba:	e7fb      	b.n	8001eb4 <ShowView+0x14>
            ssd1306_NetWorkView();
 8001ebc:	f7ff fc04 	bl	80016c8 <ssd1306_NetWorkView>
            break;
 8001ec0:	e7f8      	b.n	8001eb4 <ShowView+0x14>
            ssd1306_SensorView();
 8001ec2:	f7ff fc69 	bl	8001798 <ssd1306_SensorView>
            break;
 8001ec6:	e7f5      	b.n	8001eb4 <ShowView+0x14>
            ssd1306_PumpView();
 8001ec8:	f7ff fd96 	bl	80019f8 <ssd1306_PumpView>
            break;
 8001ecc:	e7f2      	b.n	8001eb4 <ShowView+0x14>
            ssd1306_BuzzerView();
 8001ece:	f7ff fe45 	bl	8001b5c <ssd1306_BuzzerView>
}
 8001ed2:	e7ef      	b.n	8001eb4 <ShowView+0x14>

08001ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed4:	b500      	push	{lr}
 8001ed6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed8:	2300      	movs	r3, #0
 8001eda:	930c      	str	r3, [sp, #48]	@ 0x30
 8001edc:	930d      	str	r3, [sp, #52]	@ 0x34
 8001ede:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001ee0:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee2:	9305      	str	r3, [sp, #20]
 8001ee4:	9306      	str	r3, [sp, #24]
 8001ee6:	9307      	str	r3, [sp, #28]
 8001ee8:	9308      	str	r3, [sp, #32]
 8001eea:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	9303      	str	r3, [sp, #12]
 8001ef2:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ef8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001efc:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001efe:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f00:	2202      	movs	r2, #2
 8001f02:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f04:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f06:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001f0a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0c:	a80a      	add	r0, sp, #40	@ 0x28
 8001f0e:	f002 fabb 	bl	8004488 <HAL_RCC_OscConfig>
 8001f12:	b9c8      	cbnz	r0, 8001f48 <SystemClock_Config+0x74>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f14:	230f      	movs	r3, #15
 8001f16:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f18:	2102      	movs	r1, #2
 8001f1a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f24:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f26:	9309      	str	r3, [sp, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f28:	a805      	add	r0, sp, #20
 8001f2a:	f002 fced 	bl	8004908 <HAL_RCC_ClockConfig>
 8001f2e:	b968      	cbnz	r0, 8001f4c <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f30:	2302      	movs	r3, #2
 8001f32:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f38:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f3a:	a801      	add	r0, sp, #4
 8001f3c:	f002 fdbc 	bl	8004ab8 <HAL_RCCEx_PeriphCLKConfig>
 8001f40:	b930      	cbnz	r0, 8001f50 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
}
 8001f42:	b015      	add	sp, #84	@ 0x54
 8001f44:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 8001f48:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <SystemClock_Config+0x76>
 8001f4c:	b672      	cpsid	i
 8001f4e:	e7fe      	b.n	8001f4e <SystemClock_Config+0x7a>
 8001f50:	b672      	cpsid	i
 8001f52:	e7fe      	b.n	8001f52 <SystemClock_Config+0x7e>

08001f54 <main>:
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
  HAL_Init();
 8001f5a:	f001 f897 	bl	800308c <HAL_Init>
  SystemClock_Config();
 8001f5e:	f7ff ffb9 	bl	8001ed4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	2400      	movs	r4, #0
 8001f64:	9438      	str	r4, [sp, #224]	@ 0xe0
 8001f66:	9439      	str	r4, [sp, #228]	@ 0xe4
 8001f68:	943a      	str	r4, [sp, #232]	@ 0xe8
 8001f6a:	943b      	str	r4, [sp, #236]	@ 0xec
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6c:	4daa      	ldr	r5, [pc, #680]	@ (8002218 <main+0x2c4>)
 8001f6e:	69ab      	ldr	r3, [r5, #24]
 8001f70:	f043 0310 	orr.w	r3, r3, #16
 8001f74:	61ab      	str	r3, [r5, #24]
 8001f76:	69ab      	ldr	r3, [r5, #24]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f7e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f80:	69ab      	ldr	r3, [r5, #24]
 8001f82:	f043 0320 	orr.w	r3, r3, #32
 8001f86:	61ab      	str	r3, [r5, #24]
 8001f88:	69ab      	ldr	r3, [r5, #24]
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f90:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	69ab      	ldr	r3, [r5, #24]
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	61ab      	str	r3, [r5, #24]
 8001f9a:	69ab      	ldr	r3, [r5, #24]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001fa2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	69ab      	ldr	r3, [r5, #24]
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	61ab      	str	r3, [r5, #24]
 8001fac:	69ab      	ldr	r3, [r5, #24]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	932a      	str	r3, [sp, #168]	@ 0xa8
 8001fb4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001fb6:	f8df 8264 	ldr.w	r8, [pc, #612]	@ 800221c <main+0x2c8>
 8001fba:	4622      	mov	r2, r4
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4640      	mov	r0, r8
 8001fc0:	f001 ff4c 	bl	8003e5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001fc4:	2601      	movs	r6, #1
 8001fc6:	9638      	str	r6, [sp, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc8:	9439      	str	r4, [sp, #228]	@ 0xe4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fca:	963a      	str	r6, [sp, #232]	@ 0xe8
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	a938      	add	r1, sp, #224	@ 0xe0
 8001fce:	4640      	mov	r0, r8
 8001fd0:	f001 fdfe 	bl	8003bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fd4:	2702      	movs	r7, #2
 8001fd6:	9738      	str	r7, [sp, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd8:	9639      	str	r6, [sp, #228]	@ 0xe4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	943a      	str	r4, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	973b      	str	r7, [sp, #236]	@ 0xec
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	a938      	add	r1, sp, #224	@ 0xe0
 8001fe0:	4640      	mov	r0, r8
 8001fe2:	f001 fdf5 	bl	8003bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fe6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001fea:	9338      	str	r3, [sp, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fec:	4b8c      	ldr	r3, [pc, #560]	@ (8002220 <main+0x2cc>)
 8001fee:	9339      	str	r3, [sp, #228]	@ 0xe4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ff0:	973a      	str	r7, [sp, #232]	@ 0xe8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff2:	a938      	add	r1, sp, #224	@ 0xe0
 8001ff4:	4640      	mov	r0, r8
 8001ff6:	f001 fdeb 	bl	8003bd0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001ffa:	4622      	mov	r2, r4
 8001ffc:	4631      	mov	r1, r6
 8001ffe:	2028      	movs	r0, #40	@ 0x28
 8002000:	f001 fbfc 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002004:	2028      	movs	r0, #40	@ 0x28
 8002006:	f001 fc2f 	bl	8003868 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800200a:	696b      	ldr	r3, [r5, #20]
 800200c:	4333      	orrs	r3, r6
 800200e:	616b      	str	r3, [r5, #20]
 8002010:	696b      	ldr	r3, [r5, #20]
 8002012:	4033      	ands	r3, r6
 8002014:	9326      	str	r3, [sp, #152]	@ 0x98
 8002016:	9b26      	ldr	r3, [sp, #152]	@ 0x98
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002018:	4622      	mov	r2, r4
 800201a:	4621      	mov	r1, r4
 800201c:	200b      	movs	r0, #11
 800201e:	f001 fbed 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002022:	200b      	movs	r0, #11
 8002024:	f001 fc20 	bl	8003868 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002028:	4622      	mov	r2, r4
 800202a:	4621      	mov	r1, r4
 800202c:	200c      	movs	r0, #12
 800202e:	f001 fbe5 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002032:	200c      	movs	r0, #12
 8002034:	f001 fc18 	bl	8003868 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002038:	4622      	mov	r2, r4
 800203a:	4621      	mov	r1, r4
 800203c:	200d      	movs	r0, #13
 800203e:	f001 fbdd 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002042:	200d      	movs	r0, #13
 8002044:	f001 fc10 	bl	8003868 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002048:	9438      	str	r4, [sp, #224]	@ 0xe0
 800204a:	9439      	str	r4, [sp, #228]	@ 0xe4
 800204c:	943a      	str	r4, [sp, #232]	@ 0xe8
  hadc1.Instance = ADC1;
 800204e:	4875      	ldr	r0, [pc, #468]	@ (8002224 <main+0x2d0>)
 8002050:	4b75      	ldr	r3, [pc, #468]	@ (8002228 <main+0x2d4>)
 8002052:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002058:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800205a:	7306      	strb	r6, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800205c:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800205e:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 8002062:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002064:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002066:	6107      	str	r7, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002068:	f001 fb30 	bl	80036cc <HAL_ADC_Init>
 800206c:	2800      	cmp	r0, #0
 800206e:	f040 8283 	bne.w	8002578 <main+0x624>
  sConfig.Channel = ADC_CHANNEL_4;
 8002072:	2304      	movs	r3, #4
 8002074:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002076:	2301      	movs	r3, #1
 8002078:	9339      	str	r3, [sp, #228]	@ 0xe4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800207a:	2307      	movs	r3, #7
 800207c:	933a      	str	r3, [sp, #232]	@ 0xe8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800207e:	a938      	add	r1, sp, #224	@ 0xe0
 8002080:	4868      	ldr	r0, [pc, #416]	@ (8002224 <main+0x2d0>)
 8002082:	f001 f8fb 	bl	800327c <HAL_ADC_ConfigChannel>
 8002086:	2800      	cmp	r0, #0
 8002088:	f040 8278 	bne.w	800257c <main+0x628>
  sConfig.Channel = ADC_CHANNEL_5;
 800208c:	2305      	movs	r3, #5
 800208e:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002090:	2302      	movs	r3, #2
 8002092:	9339      	str	r3, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002094:	a938      	add	r1, sp, #224	@ 0xe0
 8002096:	4863      	ldr	r0, [pc, #396]	@ (8002224 <main+0x2d0>)
 8002098:	f001 f8f0 	bl	800327c <HAL_ADC_ConfigChannel>
 800209c:	2800      	cmp	r0, #0
 800209e:	f040 826f 	bne.w	8002580 <main+0x62c>
  hi2c1.Instance = I2C1;
 80020a2:	4862      	ldr	r0, [pc, #392]	@ (800222c <main+0x2d8>)
 80020a4:	4b62      	ldr	r3, [pc, #392]	@ (8002230 <main+0x2dc>)
 80020a6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80020a8:	4b62      	ldr	r3, [pc, #392]	@ (8002234 <main+0x2e0>)
 80020aa:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020ac:	2300      	movs	r3, #0
 80020ae:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020b0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020b6:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020ba:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020bc:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020be:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020c0:	f002 f86a 	bl	8004198 <HAL_I2C_Init>
 80020c4:	2800      	cmp	r0, #0
 80020c6:	f040 825d 	bne.w	8002584 <main+0x630>
  huart1.Instance = USART1;
 80020ca:	485b      	ldr	r0, [pc, #364]	@ (8002238 <main+0x2e4>)
 80020cc:	4b5b      	ldr	r3, [pc, #364]	@ (800223c <main+0x2e8>)
 80020ce:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80020d0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80020d4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020d6:	2300      	movs	r3, #0
 80020d8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020da:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020dc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020de:	220c      	movs	r2, #12
 80020e0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020e6:	f003 fafd 	bl	80056e4 <HAL_UART_Init>
 80020ea:	2800      	cmp	r0, #0
 80020ec:	f040 824c 	bne.w	8002588 <main+0x634>
  huart3.Instance = USART3;
 80020f0:	4853      	ldr	r0, [pc, #332]	@ (8002240 <main+0x2ec>)
 80020f2:	4b54      	ldr	r3, [pc, #336]	@ (8002244 <main+0x2f0>)
 80020f4:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80020f6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80020fa:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020fc:	2300      	movs	r3, #0
 80020fe:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002100:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002102:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002104:	220c      	movs	r2, #12
 8002106:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002108:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800210a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800210c:	f003 faea 	bl	80056e4 <HAL_UART_Init>
 8002110:	2800      	cmp	r0, #0
 8002112:	f040 823b 	bne.w	800258c <main+0x638>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	2400      	movs	r4, #0
 8002118:	942d      	str	r4, [sp, #180]	@ 0xb4
 800211a:	942e      	str	r4, [sp, #184]	@ 0xb8
 800211c:	942f      	str	r4, [sp, #188]	@ 0xbc
 800211e:	9430      	str	r4, [sp, #192]	@ 0xc0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002120:	942b      	str	r4, [sp, #172]	@ 0xac
 8002122:	942c      	str	r4, [sp, #176]	@ 0xb0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002124:	9431      	str	r4, [sp, #196]	@ 0xc4
 8002126:	9432      	str	r4, [sp, #200]	@ 0xc8
 8002128:	9433      	str	r4, [sp, #204]	@ 0xcc
 800212a:	9434      	str	r4, [sp, #208]	@ 0xd0
 800212c:	9435      	str	r4, [sp, #212]	@ 0xd4
 800212e:	9436      	str	r4, [sp, #216]	@ 0xd8
 8002130:	9437      	str	r4, [sp, #220]	@ 0xdc
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002132:	2220      	movs	r2, #32
 8002134:	4621      	mov	r1, r4
 8002136:	a838      	add	r0, sp, #224	@ 0xe0
 8002138:	f004 fde5 	bl	8006d06 <memset>
  htim1.Instance = TIM1;
 800213c:	4842      	ldr	r0, [pc, #264]	@ (8002248 <main+0x2f4>)
 800213e:	4b43      	ldr	r3, [pc, #268]	@ (800224c <main+0x2f8>)
 8002140:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8002142:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002144:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 8002146:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002148:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800214a:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214c:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800214e:	f002 ff2f 	bl	8004fb0 <HAL_TIM_Base_Init>
 8002152:	2800      	cmp	r0, #0
 8002154:	f040 821c 	bne.w	8002590 <main+0x63c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002158:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800215c:	932d      	str	r3, [sp, #180]	@ 0xb4
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800215e:	a92d      	add	r1, sp, #180	@ 0xb4
 8002160:	4839      	ldr	r0, [pc, #228]	@ (8002248 <main+0x2f4>)
 8002162:	f003 f880 	bl	8005266 <HAL_TIM_ConfigClockSource>
 8002166:	2800      	cmp	r0, #0
 8002168:	f040 8214 	bne.w	8002594 <main+0x640>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800216c:	4836      	ldr	r0, [pc, #216]	@ (8002248 <main+0x2f4>)
 800216e:	f002 ff77 	bl	8005060 <HAL_TIM_PWM_Init>
 8002172:	2800      	cmp	r0, #0
 8002174:	f040 8210 	bne.w	8002598 <main+0x644>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	932b      	str	r3, [sp, #172]	@ 0xac
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217c:	932c      	str	r3, [sp, #176]	@ 0xb0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800217e:	a92b      	add	r1, sp, #172	@ 0xac
 8002180:	4831      	ldr	r0, [pc, #196]	@ (8002248 <main+0x2f4>)
 8002182:	f003 f999 	bl	80054b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002186:	2800      	cmp	r0, #0
 8002188:	f040 8208 	bne.w	800259c <main+0x648>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800218c:	2370      	movs	r3, #112	@ 0x70
 800218e:	9331      	str	r3, [sp, #196]	@ 0xc4
  sConfigOC.Pulse = 2;
 8002190:	2302      	movs	r3, #2
 8002192:	9332      	str	r3, [sp, #200]	@ 0xc8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002194:	2200      	movs	r2, #0
 8002196:	9233      	str	r2, [sp, #204]	@ 0xcc
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002198:	9234      	str	r2, [sp, #208]	@ 0xd0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219a:	9235      	str	r2, [sp, #212]	@ 0xd4
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800219c:	9236      	str	r2, [sp, #216]	@ 0xd8
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800219e:	9237      	str	r2, [sp, #220]	@ 0xdc
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a0:	a931      	add	r1, sp, #196	@ 0xc4
 80021a2:	4829      	ldr	r0, [pc, #164]	@ (8002248 <main+0x2f4>)
 80021a4:	f002 ffe5 	bl	8005172 <HAL_TIM_PWM_ConfigChannel>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	f040 81f9 	bne.w	80025a0 <main+0x64c>
  sConfigOC.Pulse = 36;
 80021ae:	2324      	movs	r3, #36	@ 0x24
 80021b0:	9332      	str	r3, [sp, #200]	@ 0xc8
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80021b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021b6:	9336      	str	r3, [sp, #216]	@ 0xd8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021b8:	2204      	movs	r2, #4
 80021ba:	a931      	add	r1, sp, #196	@ 0xc4
 80021bc:	4822      	ldr	r0, [pc, #136]	@ (8002248 <main+0x2f4>)
 80021be:	f002 ffd8 	bl	8005172 <HAL_TIM_PWM_ConfigChannel>
 80021c2:	2800      	cmp	r0, #0
 80021c4:	f040 81ee 	bne.w	80025a4 <main+0x650>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c8:	2360      	movs	r3, #96	@ 0x60
 80021ca:	9331      	str	r3, [sp, #196]	@ 0xc4
  sConfigOC.Pulse = 1;
 80021cc:	2301      	movs	r3, #1
 80021ce:	9332      	str	r3, [sp, #200]	@ 0xc8
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	9336      	str	r3, [sp, #216]	@ 0xd8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021d4:	2208      	movs	r2, #8
 80021d6:	a931      	add	r1, sp, #196	@ 0xc4
 80021d8:	481b      	ldr	r0, [pc, #108]	@ (8002248 <main+0x2f4>)
 80021da:	f002 ffca 	bl	8005172 <HAL_TIM_PWM_ConfigChannel>
 80021de:	2800      	cmp	r0, #0
 80021e0:	f040 81e2 	bne.w	80025a8 <main+0x654>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	9338      	str	r3, [sp, #224]	@ 0xe0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021e8:	9339      	str	r3, [sp, #228]	@ 0xe4
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ea:	933a      	str	r3, [sp, #232]	@ 0xe8
  sBreakDeadTimeConfig.DeadTime = 0;
 80021ec:	933b      	str	r3, [sp, #236]	@ 0xec
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021ee:	933c      	str	r3, [sp, #240]	@ 0xf0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f4:	923d      	str	r2, [sp, #244]	@ 0xf4
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021f6:	933f      	str	r3, [sp, #252]	@ 0xfc
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021f8:	a938      	add	r1, sp, #224	@ 0xe0
 80021fa:	4813      	ldr	r0, [pc, #76]	@ (8002248 <main+0x2f4>)
 80021fc:	f003 f990 	bl	8005520 <HAL_TIMEx_ConfigBreakDeadTime>
 8002200:	2800      	cmp	r0, #0
 8002202:	f040 81d3 	bne.w	80025ac <main+0x658>
  HAL_TIM_MspPostInit(&htim1);
 8002206:	4810      	ldr	r0, [pc, #64]	@ (8002248 <main+0x2f4>)
 8002208:	f000 fd10 	bl	8002c2c <HAL_TIM_MspPostInit>
  ADC_ChannelConfTypeDef sConfig = {0};
 800220c:	2300      	movs	r3, #0
 800220e:	9338      	str	r3, [sp, #224]	@ 0xe0
 8002210:	9339      	str	r3, [sp, #228]	@ 0xe4
 8002212:	933a      	str	r3, [sp, #232]	@ 0xe8
 8002214:	e01c      	b.n	8002250 <main+0x2fc>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	40010c00 	.word	0x40010c00
 8002220:	10110000 	.word	0x10110000
 8002224:	20000684 	.word	0x20000684
 8002228:	40012400 	.word	0x40012400
 800222c:	200005bc 	.word	0x200005bc
 8002230:	40005400 	.word	0x40005400
 8002234:	00061a80 	.word	0x00061a80
 8002238:	20000454 	.word	0x20000454
 800223c:	40013800 	.word	0x40013800
 8002240:	2000040c 	.word	0x2000040c
 8002244:	40004800 	.word	0x40004800
 8002248:	20000574 	.word	0x20000574
 800224c:	40012c00 	.word	0x40012c00
  hadc2.Instance = ADC2;
 8002250:	48b4      	ldr	r0, [pc, #720]	@ (8002524 <main+0x5d0>)
 8002252:	4ab5      	ldr	r2, [pc, #724]	@ (8002528 <main+0x5d4>)
 8002254:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002256:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800225a:	6082      	str	r2, [r0, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800225c:	2201      	movs	r2, #1
 800225e:	7302      	strb	r2, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002260:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002262:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002266:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002268:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 3;
 800226a:	2303      	movs	r3, #3
 800226c:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800226e:	f001 fa2d 	bl	80036cc <HAL_ADC_Init>
 8002272:	2800      	cmp	r0, #0
 8002274:	f040 819c 	bne.w	80025b0 <main+0x65c>
  sConfig.Channel = ADC_CHANNEL_1;
 8002278:	2301      	movs	r3, #1
 800227a:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800227c:	9339      	str	r3, [sp, #228]	@ 0xe4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800227e:	2300      	movs	r3, #0
 8002280:	933a      	str	r3, [sp, #232]	@ 0xe8
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002282:	a938      	add	r1, sp, #224	@ 0xe0
 8002284:	48a7      	ldr	r0, [pc, #668]	@ (8002524 <main+0x5d0>)
 8002286:	f000 fff9 	bl	800327c <HAL_ADC_ConfigChannel>
 800228a:	2800      	cmp	r0, #0
 800228c:	f040 8192 	bne.w	80025b4 <main+0x660>
  sConfig.Channel = ADC_CHANNEL_2;
 8002290:	2302      	movs	r3, #2
 8002292:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002294:	9339      	str	r3, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002296:	a938      	add	r1, sp, #224	@ 0xe0
 8002298:	48a2      	ldr	r0, [pc, #648]	@ (8002524 <main+0x5d0>)
 800229a:	f000 ffef 	bl	800327c <HAL_ADC_ConfigChannel>
 800229e:	2800      	cmp	r0, #0
 80022a0:	f040 818a 	bne.w	80025b8 <main+0x664>
  sConfig.Channel = ADC_CHANNEL_3;
 80022a4:	2303      	movs	r3, #3
 80022a6:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80022a8:	9339      	str	r3, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022aa:	a938      	add	r1, sp, #224	@ 0xe0
 80022ac:	489d      	ldr	r0, [pc, #628]	@ (8002524 <main+0x5d0>)
 80022ae:	f000 ffe5 	bl	800327c <HAL_ADC_ConfigChannel>
 80022b2:	2800      	cmp	r0, #0
 80022b4:	f040 8182 	bne.w	80025bc <main+0x668>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022b8:	2300      	movs	r3, #0
 80022ba:	9331      	str	r3, [sp, #196]	@ 0xc4
 80022bc:	9332      	str	r3, [sp, #200]	@ 0xc8
 80022be:	9333      	str	r3, [sp, #204]	@ 0xcc
 80022c0:	9334      	str	r3, [sp, #208]	@ 0xd0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c2:	932d      	str	r3, [sp, #180]	@ 0xb4
 80022c4:	932e      	str	r3, [sp, #184]	@ 0xb8
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c6:	9338      	str	r3, [sp, #224]	@ 0xe0
 80022c8:	9339      	str	r3, [sp, #228]	@ 0xe4
 80022ca:	933a      	str	r3, [sp, #232]	@ 0xe8
 80022cc:	933b      	str	r3, [sp, #236]	@ 0xec
 80022ce:	933c      	str	r3, [sp, #240]	@ 0xf0
 80022d0:	933d      	str	r3, [sp, #244]	@ 0xf4
 80022d2:	933e      	str	r3, [sp, #248]	@ 0xf8
  htim3.Instance = TIM3;
 80022d4:	4895      	ldr	r0, [pc, #596]	@ (800252c <main+0x5d8>)
 80022d6:	4a96      	ldr	r2, [pc, #600]	@ (8002530 <main+0x5dc>)
 80022d8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 80022da:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022dc:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 720;
 80022de:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 80022e2:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e4:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022e8:	f002 fe62 	bl	8004fb0 <HAL_TIM_Base_Init>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	f040 8167 	bne.w	80025c0 <main+0x66c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f6:	9331      	str	r3, [sp, #196]	@ 0xc4
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022f8:	a931      	add	r1, sp, #196	@ 0xc4
 80022fa:	488c      	ldr	r0, [pc, #560]	@ (800252c <main+0x5d8>)
 80022fc:	f002 ffb3 	bl	8005266 <HAL_TIM_ConfigClockSource>
 8002300:	2800      	cmp	r0, #0
 8002302:	f040 815f 	bne.w	80025c4 <main+0x670>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002306:	4889      	ldr	r0, [pc, #548]	@ (800252c <main+0x5d8>)
 8002308:	f002 feaa 	bl	8005060 <HAL_TIM_PWM_Init>
 800230c:	2800      	cmp	r0, #0
 800230e:	f040 815b 	bne.w	80025c8 <main+0x674>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	932d      	str	r3, [sp, #180]	@ 0xb4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	932e      	str	r3, [sp, #184]	@ 0xb8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002318:	a92d      	add	r1, sp, #180	@ 0xb4
 800231a:	4884      	ldr	r0, [pc, #528]	@ (800252c <main+0x5d8>)
 800231c:	f003 f8cc 	bl	80054b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002320:	2800      	cmp	r0, #0
 8002322:	f040 8153 	bne.w	80025cc <main+0x678>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002326:	2360      	movs	r3, #96	@ 0x60
 8002328:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfigOC.Pulse = 0;
 800232a:	2200      	movs	r2, #0
 800232c:	9239      	str	r2, [sp, #228]	@ 0xe4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800232e:	923a      	str	r2, [sp, #232]	@ 0xe8
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002330:	923c      	str	r2, [sp, #240]	@ 0xf0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002332:	a938      	add	r1, sp, #224	@ 0xe0
 8002334:	487d      	ldr	r0, [pc, #500]	@ (800252c <main+0x5d8>)
 8002336:	f002 ff1c 	bl	8005172 <HAL_TIM_PWM_ConfigChannel>
 800233a:	2800      	cmp	r0, #0
 800233c:	f040 8148 	bne.w	80025d0 <main+0x67c>
  HAL_TIM_MspPostInit(&htim3);
 8002340:	487a      	ldr	r0, [pc, #488]	@ (800252c <main+0x5d8>)
 8002342:	f000 fc73 	bl	8002c2c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002346:	2300      	movs	r3, #0
 8002348:	9331      	str	r3, [sp, #196]	@ 0xc4
 800234a:	9332      	str	r3, [sp, #200]	@ 0xc8
 800234c:	9333      	str	r3, [sp, #204]	@ 0xcc
 800234e:	9334      	str	r3, [sp, #208]	@ 0xd0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002350:	932d      	str	r3, [sp, #180]	@ 0xb4
 8002352:	932e      	str	r3, [sp, #184]	@ 0xb8
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002354:	9338      	str	r3, [sp, #224]	@ 0xe0
 8002356:	9339      	str	r3, [sp, #228]	@ 0xe4
 8002358:	933a      	str	r3, [sp, #232]	@ 0xe8
 800235a:	933b      	str	r3, [sp, #236]	@ 0xec
 800235c:	933c      	str	r3, [sp, #240]	@ 0xf0
 800235e:	933d      	str	r3, [sp, #244]	@ 0xf4
 8002360:	933e      	str	r3, [sp, #248]	@ 0xf8
  htim4.Instance = TIM4;
 8002362:	4874      	ldr	r0, [pc, #464]	@ (8002534 <main+0x5e0>)
 8002364:	4a74      	ldr	r2, [pc, #464]	@ (8002538 <main+0x5e4>)
 8002366:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8002368:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236a:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 72-1;
 800236c:	2247      	movs	r2, #71	@ 0x47
 800236e:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002370:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002372:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002374:	f002 fe1c 	bl	8004fb0 <HAL_TIM_Base_Init>
 8002378:	2800      	cmp	r0, #0
 800237a:	f040 812b 	bne.w	80025d4 <main+0x680>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002382:	9331      	str	r3, [sp, #196]	@ 0xc4
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002384:	a931      	add	r1, sp, #196	@ 0xc4
 8002386:	486b      	ldr	r0, [pc, #428]	@ (8002534 <main+0x5e0>)
 8002388:	f002 ff6d 	bl	8005266 <HAL_TIM_ConfigClockSource>
 800238c:	2800      	cmp	r0, #0
 800238e:	f040 8123 	bne.w	80025d8 <main+0x684>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002392:	4868      	ldr	r0, [pc, #416]	@ (8002534 <main+0x5e0>)
 8002394:	f002 fe38 	bl	8005008 <HAL_TIM_OC_Init>
 8002398:	2800      	cmp	r0, #0
 800239a:	f040 811f 	bne.w	80025dc <main+0x688>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	932d      	str	r3, [sp, #180]	@ 0xb4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a2:	932e      	str	r3, [sp, #184]	@ 0xb8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023a4:	a92d      	add	r1, sp, #180	@ 0xb4
 80023a6:	4863      	ldr	r0, [pc, #396]	@ (8002534 <main+0x5e0>)
 80023a8:	f003 f886 	bl	80054b8 <HAL_TIMEx_MasterConfigSynchronization>
 80023ac:	2800      	cmp	r0, #0
 80023ae:	f040 8117 	bne.w	80025e0 <main+0x68c>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80023b2:	2330      	movs	r3, #48	@ 0x30
 80023b4:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfigOC.Pulse = 36;
 80023b6:	2324      	movs	r3, #36	@ 0x24
 80023b8:	9339      	str	r3, [sp, #228]	@ 0xe4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ba:	2300      	movs	r3, #0
 80023bc:	933a      	str	r3, [sp, #232]	@ 0xe8
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023be:	933c      	str	r3, [sp, #240]	@ 0xf0
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023c0:	220c      	movs	r2, #12
 80023c2:	a938      	add	r1, sp, #224	@ 0xe0
 80023c4:	485b      	ldr	r0, [pc, #364]	@ (8002534 <main+0x5e0>)
 80023c6:	f002 fea5 	bl	8005114 <HAL_TIM_OC_ConfigChannel>
 80023ca:	2800      	cmp	r0, #0
 80023cc:	f040 810a 	bne.w	80025e4 <main+0x690>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d0:	2300      	movs	r3, #0
 80023d2:	9338      	str	r3, [sp, #224]	@ 0xe0
 80023d4:	9339      	str	r3, [sp, #228]	@ 0xe4
 80023d6:	933a      	str	r3, [sp, #232]	@ 0xe8
 80023d8:	933b      	str	r3, [sp, #236]	@ 0xec
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023da:	9331      	str	r3, [sp, #196]	@ 0xc4
 80023dc:	9332      	str	r3, [sp, #200]	@ 0xc8
  htim2.Instance = TIM2;
 80023de:	4857      	ldr	r0, [pc, #348]	@ (800253c <main+0x5e8>)
 80023e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023e4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 720-1;
 80023e6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80023ea:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ec:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 10000-1;
 80023ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80023f2:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f4:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023f8:	f002 fdda 	bl	8004fb0 <HAL_TIM_Base_Init>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	f040 80f3 	bne.w	80025e8 <main+0x694>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002406:	9338      	str	r3, [sp, #224]	@ 0xe0
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002408:	a938      	add	r1, sp, #224	@ 0xe0
 800240a:	484c      	ldr	r0, [pc, #304]	@ (800253c <main+0x5e8>)
 800240c:	f002 ff2b 	bl	8005266 <HAL_TIM_ConfigClockSource>
 8002410:	2800      	cmp	r0, #0
 8002412:	f040 80eb 	bne.w	80025ec <main+0x698>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	9331      	str	r3, [sp, #196]	@ 0xc4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241a:	9332      	str	r3, [sp, #200]	@ 0xc8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800241c:	a931      	add	r1, sp, #196	@ 0xc4
 800241e:	4847      	ldr	r0, [pc, #284]	@ (800253c <main+0x5e8>)
 8002420:	f003 f84a 	bl	80054b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002424:	2800      	cmp	r0, #0
 8002426:	f040 80e3 	bne.w	80025f0 <main+0x69c>
  HAL_ADC_Start(&hadc1);
 800242a:	4d45      	ldr	r5, [pc, #276]	@ (8002540 <main+0x5ec>)
 800242c:	4628      	mov	r0, r5
 800242e:	f001 f815 	bl	800345c <HAL_ADC_Start>
  ssd1306_Init();
 8002432:	f000 f9bd 	bl	80027b0 <ssd1306_Init>
  ssd1306_WelcomeView();
 8002436:	f7ff f879 	bl	800152c <ssd1306_WelcomeView>
  HAL_TIM_Base_Start_IT(&htim2);
 800243a:	4840      	ldr	r0, [pc, #256]	@ (800253c <main+0x5e8>)
 800243c:	f002 fc72 	bl	8004d24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8002440:	4c40      	ldr	r4, [pc, #256]	@ (8002544 <main+0x5f0>)
 8002442:	4620      	mov	r0, r4
 8002444:	f002 fc40 	bl	8004cc8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002448:	2100      	movs	r1, #0
 800244a:	4620      	mov	r0, r4
 800244c:	f002 ffd0 	bl	80053f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002450:	2104      	movs	r1, #4
 8002452:	4620      	mov	r0, r4
 8002454:	f002 ffcc 	bl	80053f0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8002458:	4c34      	ldr	r4, [pc, #208]	@ (800252c <main+0x5d8>)
 800245a:	4620      	mov	r0, r4
 800245c:	f002 fc34 	bl	8004cc8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002460:	2100      	movs	r1, #0
 8002462:	4620      	mov	r0, r4
 8002464:	f002 ffc4 	bl	80053f0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 8002468:	4832      	ldr	r0, [pc, #200]	@ (8002534 <main+0x5e0>)
 800246a:	f002 fc2d 	bl	8004cc8 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)PUMP, 2);
 800246e:	2202      	movs	r2, #2
 8002470:	4935      	ldr	r1, [pc, #212]	@ (8002548 <main+0x5f4>)
 8002472:	4628      	mov	r0, r5
 8002474:	f001 f864 	bl	8003540 <HAL_ADC_Start_DMA>
  ESP_UART_Init(&huart3);
 8002478:	4834      	ldr	r0, [pc, #208]	@ (800254c <main+0x5f8>)
 800247a:	f7fe fdc7 	bl	800100c <ESP_UART_Init>
  ESP_INIT_BASE();
 800247e:	f7fe fee1 	bl	8001244 <ESP_INIT_BASE>
  HAL_Delay(100);
 8002482:	2064      	movs	r0, #100	@ 0x64
 8002484:	f000 fe26 	bl	80030d4 <HAL_Delay>
	WiFiInfo=ESP_CheckWiFi();
 8002488:	a818      	add	r0, sp, #96	@ 0x60
 800248a:	f7fe fdc5 	bl	8001018 <ESP_CheckWiFi>
 800248e:	ac18      	add	r4, sp, #96	@ 0x60
 8002490:	4e2f      	ldr	r6, [pc, #188]	@ (8002550 <main+0x5fc>)
 8002492:	af24      	add	r7, sp, #144	@ 0x90
 8002494:	4635      	mov	r5, r6
 8002496:	6820      	ldr	r0, [r4, #0]
 8002498:	6861      	ldr	r1, [r4, #4]
 800249a:	68a2      	ldr	r2, [r4, #8]
 800249c:	68e3      	ldr	r3, [r4, #12]
 800249e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a0:	3410      	adds	r4, #16
 80024a2:	462e      	mov	r6, r5
 80024a4:	42bc      	cmp	r4, r7
 80024a6:	d1f5      	bne.n	8002494 <main+0x540>
 80024a8:	6820      	ldr	r0, [r4, #0]
 80024aa:	6028      	str	r0, [r5, #0]
 80024ac:	7923      	ldrb	r3, [r4, #4]
 80024ae:	712b      	strb	r3, [r5, #4]
	  HAL_Delay(100);
 80024b0:	2064      	movs	r0, #100	@ 0x64
 80024b2:	f000 fe0f 	bl	80030d4 <HAL_Delay>
	IPInfo=ESP_GetIPInfo();
 80024b6:	a806      	add	r0, sp, #24
 80024b8:	f7fe fe24 	bl	8001104 <ESP_GetIPInfo>
 80024bc:	2244      	movs	r2, #68	@ 0x44
 80024be:	a906      	add	r1, sp, #24
 80024c0:	4824      	ldr	r0, [pc, #144]	@ (8002554 <main+0x600>)
 80024c2:	f004 fd4c 	bl	8006f5e <memcpy>
  ssd1306_NetWorkView();
 80024c6:	f7ff f8ff 	bl	80016c8 <ssd1306_NetWorkView>
  Buzzer_Init(&buzzer);
 80024ca:	4c23      	ldr	r4, [pc, #140]	@ (8002558 <main+0x604>)
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff f801 	bl	80014d4 <Buzzer_Init>
  Buzzer_SetVolume(&buzzer, 36);
 80024d2:	2124      	movs	r1, #36	@ 0x24
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7fe ffe9 	bl	80014ac <Buzzer_SetVolume>
  HAL_Delay(100);
 80024da:	2064      	movs	r0, #100	@ 0x64
 80024dc:	f000 fdfa 	bl	80030d4 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 200);
 80024e0:	21c8      	movs	r1, #200	@ 0xc8
 80024e2:	4620      	mov	r0, r4
 80024e4:	f7fe ffd6 	bl	8001494 <Buzzer_SetFrequency>
  HAL_Delay(100);
 80024e8:	2064      	movs	r0, #100	@ 0x64
 80024ea:	f000 fdf3 	bl	80030d4 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 300);
 80024ee:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80024f2:	4620      	mov	r0, r4
 80024f4:	f7fe ffce 	bl	8001494 <Buzzer_SetFrequency>
  HAL_Delay(100);
 80024f8:	2064      	movs	r0, #100	@ 0x64
 80024fa:	f000 fdeb 	bl	80030d4 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 400);
 80024fe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002502:	4620      	mov	r0, r4
 8002504:	f7fe ffc6 	bl	8001494 <Buzzer_SetFrequency>
  HAL_Delay(100);
 8002508:	2064      	movs	r0, #100	@ 0x64
 800250a:	f000 fde3 	bl	80030d4 <HAL_Delay>
  Buzzer_SetFrequency(&buzzer, 500);
 800250e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002512:	4620      	mov	r0, r4
 8002514:	f7fe ffbe 	bl	8001494 <Buzzer_SetFrequency>
  HAL_Delay(100);
 8002518:	2064      	movs	r0, #100	@ 0x64
 800251a:	f000 fddb 	bl	80030d4 <HAL_Delay>
  Buzzer_SetVolume(&buzzer, 2);
 800251e:	2102      	movs	r1, #2
 8002520:	e01c      	b.n	800255c <main+0x608>
 8002522:	bf00      	nop
 8002524:	20000654 	.word	0x20000654
 8002528:	40012800 	.word	0x40012800
 800252c:	200004e4 	.word	0x200004e4
 8002530:	40000400 	.word	0x40000400
 8002534:	2000049c 	.word	0x2000049c
 8002538:	40000800 	.word	0x40000800
 800253c:	2000052c 	.word	0x2000052c
 8002540:	20000684 	.word	0x20000684
 8002544:	20000574 	.word	0x20000574
 8002548:	2000037c 	.word	0x2000037c
 800254c:	2000040c 	.word	0x2000040c
 8002550:	20000344 	.word	0x20000344
 8002554:	20000300 	.word	0x20000300
 8002558:	200000ac 	.word	0x200000ac
 800255c:	4620      	mov	r0, r4
 800255e:	f7fe ffa5 	bl	80014ac <Buzzer_SetVolume>
  Buzzer_SetVolume(&buzzer, 0);
 8002562:	2100      	movs	r1, #0
 8002564:	4620      	mov	r0, r4
 8002566:	f7fe ffa1 	bl	80014ac <Buzzer_SetVolume>
  HAL_Delay(100);
 800256a:	2064      	movs	r0, #100	@ 0x64
 800256c:	f000 fdb2 	bl	80030d4 <HAL_Delay>
	  if (FLAG_CheckDHT) {
 8002570:	4d58      	ldr	r5, [pc, #352]	@ (80026d4 <main+0x780>)
			DHT11_Info = DHT_getData(&DHT11_Sensor);
 8002572:	4e59      	ldr	r6, [pc, #356]	@ (80026d8 <main+0x784>)
 8002574:	4f59      	ldr	r7, [pc, #356]	@ (80026dc <main+0x788>)
 8002576:	e0a1      	b.n	80026bc <main+0x768>
 8002578:	b672      	cpsid	i
  while (1)
 800257a:	e7fe      	b.n	800257a <main+0x626>
 800257c:	b672      	cpsid	i
 800257e:	e7fe      	b.n	800257e <main+0x62a>
 8002580:	b672      	cpsid	i
 8002582:	e7fe      	b.n	8002582 <main+0x62e>
 8002584:	b672      	cpsid	i
 8002586:	e7fe      	b.n	8002586 <main+0x632>
 8002588:	b672      	cpsid	i
 800258a:	e7fe      	b.n	800258a <main+0x636>
 800258c:	b672      	cpsid	i
 800258e:	e7fe      	b.n	800258e <main+0x63a>
 8002590:	b672      	cpsid	i
 8002592:	e7fe      	b.n	8002592 <main+0x63e>
 8002594:	b672      	cpsid	i
 8002596:	e7fe      	b.n	8002596 <main+0x642>
 8002598:	b672      	cpsid	i
 800259a:	e7fe      	b.n	800259a <main+0x646>
 800259c:	b672      	cpsid	i
 800259e:	e7fe      	b.n	800259e <main+0x64a>
 80025a0:	b672      	cpsid	i
 80025a2:	e7fe      	b.n	80025a2 <main+0x64e>
 80025a4:	b672      	cpsid	i
 80025a6:	e7fe      	b.n	80025a6 <main+0x652>
 80025a8:	b672      	cpsid	i
 80025aa:	e7fe      	b.n	80025aa <main+0x656>
 80025ac:	b672      	cpsid	i
 80025ae:	e7fe      	b.n	80025ae <main+0x65a>
 80025b0:	b672      	cpsid	i
 80025b2:	e7fe      	b.n	80025b2 <main+0x65e>
 80025b4:	b672      	cpsid	i
 80025b6:	e7fe      	b.n	80025b6 <main+0x662>
 80025b8:	b672      	cpsid	i
 80025ba:	e7fe      	b.n	80025ba <main+0x666>
 80025bc:	b672      	cpsid	i
 80025be:	e7fe      	b.n	80025be <main+0x66a>
 80025c0:	b672      	cpsid	i
 80025c2:	e7fe      	b.n	80025c2 <main+0x66e>
 80025c4:	b672      	cpsid	i
 80025c6:	e7fe      	b.n	80025c6 <main+0x672>
 80025c8:	b672      	cpsid	i
 80025ca:	e7fe      	b.n	80025ca <main+0x676>
 80025cc:	b672      	cpsid	i
 80025ce:	e7fe      	b.n	80025ce <main+0x67a>
 80025d0:	b672      	cpsid	i
 80025d2:	e7fe      	b.n	80025d2 <main+0x67e>
 80025d4:	b672      	cpsid	i
 80025d6:	e7fe      	b.n	80025d6 <main+0x682>
 80025d8:	b672      	cpsid	i
 80025da:	e7fe      	b.n	80025da <main+0x686>
 80025dc:	b672      	cpsid	i
 80025de:	e7fe      	b.n	80025de <main+0x68a>
 80025e0:	b672      	cpsid	i
 80025e2:	e7fe      	b.n	80025e2 <main+0x68e>
 80025e4:	b672      	cpsid	i
 80025e6:	e7fe      	b.n	80025e6 <main+0x692>
 80025e8:	b672      	cpsid	i
 80025ea:	e7fe      	b.n	80025ea <main+0x696>
 80025ec:	b672      	cpsid	i
 80025ee:	e7fe      	b.n	80025ee <main+0x69a>
 80025f0:	b672      	cpsid	i
 80025f2:	e7fe      	b.n	80025f2 <main+0x69e>
			DHT11_Info = DHT_getData(&DHT11_Sensor);
 80025f4:	ac06      	add	r4, sp, #24
 80025f6:	4639      	mov	r1, r7
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7fe fe39 	bl	8001270 <DHT_getData>
 80025fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002602:	e886 0003 	stmia.w	r6, {r0, r1}
			FLAG_CheckDHT=0;
 8002606:	2300      	movs	r3, #0
 8002608:	702b      	strb	r3, [r5, #0]
 800260a:	e05a      	b.n	80026c2 <main+0x76e>
			sprintf(msg, "DATA:T:%lf,H:%lf,Duty:%d,U:%d,I:%d\r\n", DHT11_Info.temp,DHT11_Info.hum,Period_,PUMP[0],PUMP[1]);
 800260c:	6870      	ldr	r0, [r6, #4]
 800260e:	f7fd ffbf 	bl	8000590 <__aeabi_f2d>
 8002612:	4680      	mov	r8, r0
 8002614:	4689      	mov	r9, r1
 8002616:	4b32      	ldr	r3, [pc, #200]	@ (80026e0 <main+0x78c>)
 8002618:	885a      	ldrh	r2, [r3, #2]
 800261a:	9204      	str	r2, [sp, #16]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	9303      	str	r3, [sp, #12]
 8002620:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <main+0x790>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	9302      	str	r3, [sp, #8]
 8002626:	6830      	ldr	r0, [r6, #0]
 8002628:	f7fd ffb2 	bl	8000590 <__aeabi_f2d>
 800262c:	e9cd 0100 	strd	r0, r1, [sp]
 8002630:	4642      	mov	r2, r8
 8002632:	464b      	mov	r3, r9
 8002634:	492c      	ldr	r1, [pc, #176]	@ (80026e8 <main+0x794>)
 8002636:	a838      	add	r0, sp, #224	@ 0xe0
 8002638:	f004 fb02 	bl	8006c40 <siprintf>
			ESP_SendTCP(0,msg);
 800263c:	a938      	add	r1, sp, #224	@ 0xe0
 800263e:	2000      	movs	r0, #0
 8002640:	f7fe fcba 	bl	8000fb8 <ESP_SendTCP>
			  HAL_Delay(100);
 8002644:	2064      	movs	r0, #100	@ 0x64
 8002646:	f000 fd45 	bl	80030d4 <HAL_Delay>
			  FLAG_SentTCP=0;
 800264a:	4b28      	ldr	r3, [pc, #160]	@ (80026ec <main+0x798>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e03b      	b.n	80026ca <main+0x776>
			WiFiInfo=ESP_CheckWiFi();
 8002652:	a806      	add	r0, sp, #24
 8002654:	f7fe fce0 	bl	8001018 <ESP_CheckWiFi>
 8002658:	f10d 0c18 	add.w	ip, sp, #24
 800265c:	4c24      	ldr	r4, [pc, #144]	@ (80026f0 <main+0x79c>)
 800265e:	f10d 0848 	add.w	r8, sp, #72	@ 0x48
 8002662:	46a6      	mov	lr, r4
 8002664:	f8dc 0000 	ldr.w	r0, [ip]
 8002668:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800266c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8002670:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8002674:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002678:	f10c 0c10 	add.w	ip, ip, #16
 800267c:	4674      	mov	r4, lr
 800267e:	45c4      	cmp	ip, r8
 8002680:	d1ef      	bne.n	8002662 <main+0x70e>
 8002682:	f8dc 0000 	ldr.w	r0, [ip]
 8002686:	f8ce 0000 	str.w	r0, [lr]
 800268a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 800268e:	f88e 3004 	strb.w	r3, [lr, #4]
			HAL_Delay(10);
 8002692:	200a      	movs	r0, #10
 8002694:	f000 fd1e 	bl	80030d4 <HAL_Delay>
			IPInfo=ESP_GetIPInfo();
 8002698:	a806      	add	r0, sp, #24
 800269a:	f7fe fd33 	bl	8001104 <ESP_GetIPInfo>
 800269e:	2244      	movs	r2, #68	@ 0x44
 80026a0:	a906      	add	r1, sp, #24
 80026a2:	4814      	ldr	r0, [pc, #80]	@ (80026f4 <main+0x7a0>)
 80026a4:	f004 fc5b 	bl	8006f5e <memcpy>
			FLAG_CheckWifi=0;
 80026a8:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <main+0x7a4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
		KeyHandeler(CurrentView);
 80026ae:	4c13      	ldr	r4, [pc, #76]	@ (80026fc <main+0x7a8>)
 80026b0:	7820      	ldrb	r0, [r4, #0]
 80026b2:	f7ff fbdd 	bl	8001e70 <KeyHandeler>
		ShowView(CurrentView);
 80026b6:	7820      	ldrb	r0, [r4, #0]
 80026b8:	f7ff fbf2 	bl	8001ea0 <ShowView>
	  if (FLAG_CheckDHT) {
 80026bc:	782b      	ldrb	r3, [r5, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d198      	bne.n	80025f4 <main+0x6a0>
		if (FLAG_SentTCP) {
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <main+0x798>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1a0      	bne.n	800260c <main+0x6b8>
		if (FLAG_CheckWifi) {
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <main+0x7a4>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1bf      	bne.n	8002652 <main+0x6fe>
 80026d2:	e7ec      	b.n	80026ae <main+0x75a>
 80026d4:	20000093 	.word	0x20000093
 80026d8:	200002f8 	.word	0x200002f8
 80026dc:	200000bc 	.word	0x200000bc
 80026e0:	2000037c 	.word	0x2000037c
 80026e4:	200000e0 	.word	0x200000e0
 80026e8:	0800a680 	.word	0x0800a680
 80026ec:	20000092 	.word	0x20000092
 80026f0:	20000344 	.word	0x20000344
 80026f4:	20000300 	.word	0x20000300
 80026f8:	20000094 	.word	0x20000094
 80026fc:	200000a8 	.word	0x200000a8

08002700 <Error_Handler>:
 8002700:	b672      	cpsid	i
  while (1)
 8002702:	e7fe      	b.n	8002702 <Error_Handler+0x2>

08002704 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002704:	b500      	push	{lr}
 8002706:	b087      	sub	sp, #28
 8002708:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	2301      	movs	r3, #1
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	f10d 0217 	add.w	r2, sp, #23
 800271a:	9200      	str	r2, [sp, #0]
 800271c:	2200      	movs	r2, #0
 800271e:	2178      	movs	r1, #120	@ 0x78
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <ssd1306_WriteCommand+0x28>)
 8002722:	f001 fdfb 	bl	800431c <HAL_I2C_Mem_Write>
}
 8002726:	b007      	add	sp, #28
 8002728:	f85d fb04 	ldr.w	pc, [sp], #4
 800272c:	200005bc 	.word	0x200005bc

08002730 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002730:	b500      	push	{lr}
 8002732:	b085      	sub	sp, #20
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	9302      	str	r3, [sp, #8]
 800273a:	b289      	uxth	r1, r1
 800273c:	9101      	str	r1, [sp, #4]
 800273e:	9000      	str	r0, [sp, #0]
 8002740:	2301      	movs	r3, #1
 8002742:	2240      	movs	r2, #64	@ 0x40
 8002744:	2178      	movs	r1, #120	@ 0x78
 8002746:	4803      	ldr	r0, [pc, #12]	@ (8002754 <ssd1306_WriteData+0x24>)
 8002748:	f001 fde8 	bl	800431c <HAL_I2C_Mem_Write>
}
 800274c:	b005      	add	sp, #20
 800274e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002752:	bf00      	nop
 8002754:	200005bc 	.word	0x200005bc

08002758 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002758:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <ssd1306_Fill+0x18>)
 800275a:	f502 6180 	add.w	r1, r2, #1024	@ 0x400
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	bf18      	it	ne
 8002762:	2301      	movne	r3, #1
 8002764:	425b      	negs	r3, r3
 8002766:	f802 3f01 	strb.w	r3, [r2, #1]!
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800276a:	428a      	cmp	r2, r1
 800276c:	d1f7      	bne.n	800275e <ssd1306_Fill+0x6>
    }
}
 800276e:	4770      	bx	lr
 8002770:	200006bb 	.word	0x200006bb

08002774 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002778:	4d0c      	ldr	r5, [pc, #48]	@ (80027ac <ssd1306_UpdateScreen+0x38>)
void ssd1306_UpdateScreen(void) {
 800277a:	24b0      	movs	r4, #176	@ 0xb0
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
 800277c:	f04f 0800 	mov.w	r8, #0
        ssd1306_WriteCommand(0x10);
 8002780:	2710      	movs	r7, #16
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002782:	2680      	movs	r6, #128	@ 0x80
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ffbd 	bl	8002704 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800278a:	4640      	mov	r0, r8
 800278c:	f7ff ffba 	bl	8002704 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002790:	4638      	mov	r0, r7
 8002792:	f7ff ffb7 	bl	8002704 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002796:	4631      	mov	r1, r6
 8002798:	4628      	mov	r0, r5
 800279a:	f7ff ffc9 	bl	8002730 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800279e:	3401      	adds	r4, #1
 80027a0:	b2e4      	uxtb	r4, r4
 80027a2:	3580      	adds	r5, #128	@ 0x80
 80027a4:	2cb8      	cmp	r4, #184	@ 0xb8
 80027a6:	d1ed      	bne.n	8002784 <ssd1306_UpdateScreen+0x10>
    }
}
 80027a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027ac:	200006bc 	.word	0x200006bc

080027b0 <ssd1306_Init>:
void ssd1306_Init(void) {
 80027b0:	b508      	push	{r3, lr}
    HAL_Delay(100);
 80027b2:	2064      	movs	r0, #100	@ 0x64
 80027b4:	f000 fc8e 	bl	80030d4 <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 80027b8:	20ae      	movs	r0, #174	@ 0xae
 80027ba:	f7ff ffa3 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80027be:	2020      	movs	r0, #32
 80027c0:	f7ff ffa0 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7ff ff9d 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80027ca:	20b0      	movs	r0, #176	@ 0xb0
 80027cc:	f7ff ff9a 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80027d0:	20c8      	movs	r0, #200	@ 0xc8
 80027d2:	f7ff ff97 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7ff ff94 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80027dc:	2010      	movs	r0, #16
 80027de:	f7ff ff91 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80027e2:	2040      	movs	r0, #64	@ 0x40
 80027e4:	f7ff ff8e 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80027e8:	2081      	movs	r0, #129	@ 0x81
 80027ea:	f7ff ff8b 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80027ee:	20ff      	movs	r0, #255	@ 0xff
 80027f0:	f7ff ff88 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80027f4:	20a1      	movs	r0, #161	@ 0xa1
 80027f6:	f7ff ff85 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 80027fa:	20a6      	movs	r0, #166	@ 0xa6
 80027fc:	f7ff ff82 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002800:	20a8      	movs	r0, #168	@ 0xa8
 8002802:	f7ff ff7f 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8002806:	203f      	movs	r0, #63	@ 0x3f
 8002808:	f7ff ff7c 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800280c:	20a4      	movs	r0, #164	@ 0xa4
 800280e:	f7ff ff79 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002812:	20d3      	movs	r0, #211	@ 0xd3
 8002814:	f7ff ff76 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002818:	2000      	movs	r0, #0
 800281a:	f7ff ff73 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800281e:	20d5      	movs	r0, #213	@ 0xd5
 8002820:	f7ff ff70 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002824:	20f0      	movs	r0, #240	@ 0xf0
 8002826:	f7ff ff6d 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800282a:	20d9      	movs	r0, #217	@ 0xd9
 800282c:	f7ff ff6a 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002830:	2022      	movs	r0, #34	@ 0x22
 8002832:	f7ff ff67 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002836:	20da      	movs	r0, #218	@ 0xda
 8002838:	f7ff ff64 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 800283c:	2012      	movs	r0, #18
 800283e:	f7ff ff61 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002842:	20db      	movs	r0, #219	@ 0xdb
 8002844:	f7ff ff5e 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002848:	2020      	movs	r0, #32
 800284a:	f7ff ff5b 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800284e:	208d      	movs	r0, #141	@ 0x8d
 8002850:	f7ff ff58 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002854:	2014      	movs	r0, #20
 8002856:	f7ff ff55 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800285a:	20af      	movs	r0, #175	@ 0xaf
 800285c:	f7ff ff52 	bl	8002704 <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff ff79 	bl	8002758 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8002866:	f7ff ff85 	bl	8002774 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 800286a:	4b03      	ldr	r3, [pc, #12]	@ (8002878 <ssd1306_Init+0xc8>)
 800286c:	2200      	movs	r2, #0
 800286e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002870:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8002872:	2201      	movs	r2, #1
 8002874:	715a      	strb	r2, [r3, #5]
}
 8002876:	bd08      	pop	{r3, pc}
 8002878:	200006b4 	.word	0x200006b4

0800287c <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800287c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002880:	d122      	bne.n	80028c8 <ssd1306_DrawPixel+0x4c>
 8002882:	293f      	cmp	r1, #63	@ 0x3f
 8002884:	d820      	bhi.n	80028c8 <ssd1306_DrawPixel+0x4c>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002886:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <ssd1306_DrawPixel+0x50>)
 8002888:	791b      	ldrb	r3, [r3, #4]
 800288a:	b17b      	cbz	r3, 80028ac <ssd1306_DrawPixel+0x30>
        color = (SSD1306_COLOR)!color;
    }
    
    // Draw in the right color
    if(color == White) {
 800288c:	b182      	cbz	r2, 80028b0 <ssd1306_DrawPixel+0x34>
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800288e:	b410      	push	{r4}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002890:	08cb      	lsrs	r3, r1, #3
 8002892:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002896:	4c0e      	ldr	r4, [pc, #56]	@ (80028d0 <ssd1306_DrawPixel+0x54>)
 8002898:	f001 0107 	and.w	r1, r1, #7
 800289c:	2201      	movs	r2, #1
 800289e:	408a      	lsls	r2, r1
 80028a0:	5c23      	ldrb	r3, [r4, r0]
 80028a2:	ea23 0302 	bic.w	r3, r3, r2
 80028a6:	5423      	strb	r3, [r4, r0]
    }
}
 80028a8:	bc10      	pop	{r4}
 80028aa:	4770      	bx	lr
    if(color == White) {
 80028ac:	2a01      	cmp	r2, #1
 80028ae:	d1ee      	bne.n	800288e <ssd1306_DrawPixel+0x12>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80028b0:	08cb      	lsrs	r3, r1, #3
 80028b2:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80028b6:	4a06      	ldr	r2, [pc, #24]	@ (80028d0 <ssd1306_DrawPixel+0x54>)
 80028b8:	f001 0107 	and.w	r1, r1, #7
 80028bc:	2301      	movs	r3, #1
 80028be:	408b      	lsls	r3, r1
 80028c0:	5c11      	ldrb	r1, [r2, r0]
 80028c2:	430b      	orrs	r3, r1
 80028c4:	5413      	strb	r3, [r2, r0]
 80028c6:	4770      	bx	lr
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	200006b4 	.word	0x200006b4
 80028d0:	200006bc 	.word	0x200006bc

080028d4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80028d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d8:	b085      	sub	sp, #20
 80028da:	4682      	mov	sl, r0
 80028dc:	a804      	add	r0, sp, #16
 80028de:	e900 0006 	stmdb	r0, {r1, r2}
 80028e2:	461f      	mov	r7, r3
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80028e4:	f1aa 0320 	sub.w	r3, sl, #32
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b5e      	cmp	r3, #94	@ 0x5e
 80028ec:	d847      	bhi.n	800297e <ssd1306_WriteChar+0xaa>
 80028ee:	f89d 6008 	ldrb.w	r6, [sp, #8]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80028f2:	4b27      	ldr	r3, [pc, #156]	@ (8002990 <ssd1306_WriteChar+0xbc>)
 80028f4:	f8b3 8000 	ldrh.w	r8, [r3]
 80028f8:	eb08 0306 	add.w	r3, r8, r6
 80028fc:	2b80      	cmp	r3, #128	@ 0x80
 80028fe:	dc42      	bgt.n	8002986 <ssd1306_WriteChar+0xb2>
 8002900:	f89d 2009 	ldrb.w	r2, [sp, #9]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002904:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <ssd1306_WriteChar+0xbc>)
 8002906:	885d      	ldrh	r5, [r3, #2]
 8002908:	18ab      	adds	r3, r5, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800290a:	2b40      	cmp	r3, #64	@ 0x40
 800290c:	dc3d      	bgt.n	800298a <ssd1306_WriteChar+0xb6>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800290e:	b38a      	cbz	r2, 8002974 <ssd1306_WriteChar+0xa0>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002910:	f1aa 0920 	sub.w	r9, sl, #32
 8002914:	fb02 f909 	mul.w	r9, r2, r9
 8002918:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800291c:	b2ed      	uxtb	r5, r5
    for(i = 0; i < Font.FontHeight; i++) {
 800291e:	f04f 0b00 	mov.w	fp, #0
 8002922:	9200      	str	r2, [sp, #0]
 8002924:	f8cd a004 	str.w	sl, [sp, #4]
 8002928:	46ca      	mov	sl, r9
 800292a:	46a9      	mov	r9, r5
 800292c:	465d      	mov	r5, fp
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800292e:	9903      	ldr	r1, [sp, #12]
 8002930:	f831 b00a 	ldrh.w	fp, [r1, sl]
        for(j = 0; j < Font.FontWidth; j++) {
 8002934:	b196      	cbz	r6, 800295c <ssd1306_WriteChar+0x88>
 8002936:	2400      	movs	r4, #0
            if((b << j) & 0x8000)  {
 8002938:	fa0b f304 	lsl.w	r3, fp, r4
 800293c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002940:	eb08 0004 	add.w	r0, r8, r4
 8002944:	bf12      	itee	ne
 8002946:	463a      	movne	r2, r7
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002948:	fab7 f287 	clzeq	r2, r7
 800294c:	0952      	lsreq	r2, r2, #5
 800294e:	4649      	mov	r1, r9
 8002950:	b2c0      	uxtb	r0, r0
 8002952:	f7ff ff93 	bl	800287c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002956:	3401      	adds	r4, #1
 8002958:	42b4      	cmp	r4, r6
 800295a:	d1ed      	bne.n	8002938 <ssd1306_WriteChar+0x64>
    for(i = 0; i < Font.FontHeight; i++) {
 800295c:	3501      	adds	r5, #1
 800295e:	f10a 0a02 	add.w	sl, sl, #2
 8002962:	f109 0901 	add.w	r9, r9, #1
 8002966:	fa5f f989 	uxtb.w	r9, r9
 800296a:	9b00      	ldr	r3, [sp, #0]
 800296c:	42ab      	cmp	r3, r5
 800296e:	d1de      	bne.n	800292e <ssd1306_WriteChar+0x5a>
 8002970:	f8dd a004 	ldr.w	sl, [sp, #4]
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002974:	4446      	add	r6, r8
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <ssd1306_WriteChar+0xbc>)
 8002978:	801e      	strh	r6, [r3, #0]
    
    // Return written char for validation
    return ch;
 800297a:	4650      	mov	r0, sl
 800297c:	e000      	b.n	8002980 <ssd1306_WriteChar+0xac>
        return 0;
 800297e:	2000      	movs	r0, #0
}
 8002980:	b005      	add	sp, #20
 8002982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8002986:	2000      	movs	r0, #0
 8002988:	e7fa      	b.n	8002980 <ssd1306_WriteChar+0xac>
 800298a:	2000      	movs	r0, #0
 800298c:	e7f8      	b.n	8002980 <ssd1306_WriteChar+0xac>
 800298e:	bf00      	nop
 8002990:	200006b4 	.word	0x200006b4

08002994 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	4604      	mov	r4, r0
 800299a:	a802      	add	r0, sp, #8
 800299c:	e900 0006 	stmdb	r0, {r1, r2}
    // Write until null-byte
    while (*str) {
 80029a0:	7820      	ldrb	r0, [r4, #0]
 80029a2:	b170      	cbz	r0, 80029c2 <ssd1306_WriteString+0x2e>
 80029a4:	461e      	mov	r6, r3
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80029a6:	466d      	mov	r5, sp
 80029a8:	4633      	mov	r3, r6
 80029aa:	e895 0006 	ldmia.w	r5, {r1, r2}
 80029ae:	f7ff ff91 	bl	80028d4 <ssd1306_WriteChar>
 80029b2:	4602      	mov	r2, r0
 80029b4:	7820      	ldrb	r0, [r4, #0]
 80029b6:	4282      	cmp	r2, r0
 80029b8:	d103      	bne.n	80029c2 <ssd1306_WriteString+0x2e>
    while (*str) {
 80029ba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80029be:	2800      	cmp	r0, #0
 80029c0:	d1f2      	bne.n	80029a8 <ssd1306_WriteString+0x14>
        str++;
    }
    
    // Everything ok
    return *str;
}
 80029c2:	b002      	add	sp, #8
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080029c8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 80029c8:	4b01      	ldr	r3, [pc, #4]	@ (80029d0 <ssd1306_SetCursor+0x8>)
 80029ca:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 80029cc:	8059      	strh	r1, [r3, #2]
}
 80029ce:	4770      	bx	lr
 80029d0:	200006b4 	.word	0x200006b4

080029d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_MspInit+0x3c>)
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	619a      	str	r2, [r3, #24]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	f002 0201 	and.w	r2, r2, #1
 80029e6:	9200      	str	r2, [sp, #0]
 80029e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	69da      	ldr	r2, [r3, #28]
 80029ec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80029f0:	61da      	str	r2, [r3, #28]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029fc:	4a05      	ldr	r2, [pc, #20]	@ (8002a14 <HAL_MspInit+0x40>)
 80029fe:	6853      	ldr	r3, [r2, #4]
 8002a00:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0a:	b002      	add	sp, #8
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40010000 	.word	0x40010000

08002a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9304      	str	r3, [sp, #16]
 8002a20:	9305      	str	r3, [sp, #20]
 8002a22:	9306      	str	r3, [sp, #24]
 8002a24:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002a26:	6803      	ldr	r3, [r0, #0]
 8002a28:	4a35      	ldr	r2, [pc, #212]	@ (8002b00 <HAL_ADC_MspInit+0xe8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_ADC_MspInit+0x20>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002a2e:	4a35      	ldr	r2, [pc, #212]	@ (8002b04 <HAL_ADC_MspInit+0xec>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d040      	beq.n	8002ab6 <HAL_ADC_MspInit+0x9e>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002a34:	b008      	add	sp, #32
 8002a36:	bd10      	pop	{r4, pc}
 8002a38:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a3a:	4b33      	ldr	r3, [pc, #204]	@ (8002b08 <HAL_ADC_MspInit+0xf0>)
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a42:	619a      	str	r2, [r3, #24]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002a4a:	9200      	str	r2, [sp, #0]
 8002a4c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	f042 0204 	orr.w	r2, r2, #4
 8002a54:	619a      	str	r2, [r3, #24]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a60:	2330      	movs	r3, #48	@ 0x30
 8002a62:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a64:	2303      	movs	r3, #3
 8002a66:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	a904      	add	r1, sp, #16
 8002a6a:	4828      	ldr	r0, [pc, #160]	@ (8002b0c <HAL_ADC_MspInit+0xf4>)
 8002a6c:	f001 f8b0 	bl	8003bd0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002a70:	4827      	ldr	r0, [pc, #156]	@ (8002b10 <HAL_ADC_MspInit+0xf8>)
 8002a72:	4b28      	ldr	r3, [pc, #160]	@ (8002b14 <HAL_ADC_MspInit+0xfc>)
 8002a74:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a76:	2300      	movs	r3, #0
 8002a78:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7a:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a7c:	2280      	movs	r2, #128	@ 0x80
 8002a7e:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a84:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a8a:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a90:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a92:	f000 ff0b 	bl	80038ac <HAL_DMA_Init>
 8002a96:	b958      	cbnz	r0, 8002ab0 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <HAL_ADC_MspInit+0xf8>)
 8002a9a:	6223      	str	r3, [r4, #32]
 8002a9c:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	2012      	movs	r0, #18
 8002aa4:	f000 feaa 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002aa8:	2012      	movs	r0, #18
 8002aaa:	f000 fedd 	bl	8003868 <HAL_NVIC_EnableIRQ>
 8002aae:	e7c1      	b.n	8002a34 <HAL_ADC_MspInit+0x1c>
      Error_Handler();
 8002ab0:	f7ff fe26 	bl	8002700 <Error_Handler>
 8002ab4:	e7f0      	b.n	8002a98 <HAL_ADC_MspInit+0x80>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002ab6:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_ADC_MspInit+0xf0>)
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002abe:	619a      	str	r2, [r3, #24]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8002ac6:	9202      	str	r2, [sp, #8]
 8002ac8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	f042 0204 	orr.w	r2, r2, #4
 8002ad0:	619a      	str	r2, [r3, #24]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	9303      	str	r3, [sp, #12]
 8002ada:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002adc:	230e      	movs	r3, #14
 8002ade:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae4:	a904      	add	r1, sp, #16
 8002ae6:	4809      	ldr	r0, [pc, #36]	@ (8002b0c <HAL_ADC_MspInit+0xf4>)
 8002ae8:	f001 f872 	bl	8003bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002aec:	2200      	movs	r2, #0
 8002aee:	4611      	mov	r1, r2
 8002af0:	2012      	movs	r0, #18
 8002af2:	f000 fe83 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002af6:	2012      	movs	r0, #18
 8002af8:	f000 feb6 	bl	8003868 <HAL_NVIC_EnableIRQ>
}
 8002afc:	e79a      	b.n	8002a34 <HAL_ADC_MspInit+0x1c>
 8002afe:	bf00      	nop
 8002b00:	40012400 	.word	0x40012400
 8002b04:	40012800 	.word	0x40012800
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010800 	.word	0x40010800
 8002b10:	20000610 	.word	0x20000610
 8002b14:	40020008 	.word	0x40020008

08002b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	9303      	str	r3, [sp, #12]
 8002b22:	9304      	str	r3, [sp, #16]
 8002b24:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8002b26:	6802      	ldr	r2, [r0, #0]
 8002b28:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <HAL_I2C_MspInit+0x68>)
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b2e:	b006      	add	sp, #24
 8002b30:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	4c14      	ldr	r4, [pc, #80]	@ (8002b84 <HAL_I2C_MspInit+0x6c>)
 8002b34:	69a3      	ldr	r3, [r4, #24]
 8002b36:	f043 0308 	orr.w	r3, r3, #8
 8002b3a:	61a3      	str	r3, [r4, #24]
 8002b3c:	69a3      	ldr	r3, [r4, #24]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b4a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b4c:	2312      	movs	r3, #18
 8002b4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b50:	2303      	movs	r3, #3
 8002b52:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b54:	a902      	add	r1, sp, #8
 8002b56:	480c      	ldr	r0, [pc, #48]	@ (8002b88 <HAL_I2C_MspInit+0x70>)
 8002b58:	f001 f83a 	bl	8003bd0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b8c <HAL_I2C_MspInit+0x74>)
 8002b5e:	6853      	ldr	r3, [r2, #4]
 8002b60:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b6a:	69e3      	ldr	r3, [r4, #28]
 8002b6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b70:	61e3      	str	r3, [r4, #28]
 8002b72:	69e3      	ldr	r3, [r4, #28]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	9b01      	ldr	r3, [sp, #4]
}
 8002b7c:	e7d7      	b.n	8002b2e <HAL_I2C_MspInit+0x16>
 8002b7e:	bf00      	nop
 8002b80:	40005400 	.word	0x40005400
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40010c00 	.word	0x40010c00
 8002b8c:	40010000 	.word	0x40010000

08002b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b90:	b500      	push	{lr}
 8002b92:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8002b94:	6803      	ldr	r3, [r0, #0]
 8002b96:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <HAL_TIM_Base_MspInit+0x8c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba0:	d01d      	beq.n	8002bde <HAL_TIM_Base_MspInit+0x4e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c20 <HAL_TIM_Base_MspInit+0x90>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d02e      	beq.n	8002c06 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c24 <HAL_TIM_Base_MspInit+0x94>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d114      	bne.n	8002bd8 <HAL_TIM_Base_MspInit+0x48>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bae:	4b1e      	ldr	r3, [pc, #120]	@ (8002c28 <HAL_TIM_Base_MspInit+0x98>)
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	f042 0204 	orr.w	r2, r2, #4
 8002bb6:	61da      	str	r2, [r3, #28]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	9303      	str	r3, [sp, #12]
 8002bc0:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bc2:	e009      	b.n	8002bd8 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bc4:	4b18      	ldr	r3, [pc, #96]	@ (8002c28 <HAL_TIM_Base_MspInit+0x98>)
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bcc:	619a      	str	r2, [r3, #24]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	9b00      	ldr	r3, [sp, #0]
}
 8002bd8:	b005      	add	sp, #20
 8002bda:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bde:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	61da      	str	r2, [r3, #28]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	201c      	movs	r0, #28
 8002bfa:	f000 fdff 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bfe:	201c      	movs	r0, #28
 8002c00:	f000 fe32 	bl	8003868 <HAL_NVIC_EnableIRQ>
 8002c04:	e7e8      	b.n	8002bd8 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c06:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <HAL_TIM_Base_MspInit+0x98>)
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	f042 0202 	orr.w	r2, r2, #2
 8002c0e:	61da      	str	r2, [r3, #28]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	9b02      	ldr	r3, [sp, #8]
 8002c1a:	e7dd      	b.n	8002bd8 <HAL_TIM_Base_MspInit+0x48>
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40000800 	.word	0x40000800
 8002c28:	40021000 	.word	0x40021000

08002c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c2c:	b500      	push	{lr}
 8002c2e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	2300      	movs	r3, #0
 8002c32:	9302      	str	r3, [sp, #8]
 8002c34:	9303      	str	r3, [sp, #12]
 8002c36:	9304      	str	r3, [sp, #16]
 8002c38:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8002c3a:	6803      	ldr	r3, [r0, #0]
 8002c3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ca0 <HAL_TIM_MspPostInit+0x74>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d005      	beq.n	8002c4e <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8002c42:	4a18      	ldr	r2, [pc, #96]	@ (8002ca4 <HAL_TIM_MspPostInit+0x78>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d017      	beq.n	8002c78 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c48:	b007      	add	sp, #28
 8002c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <HAL_TIM_MspPostInit+0x7c>)
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	f042 0204 	orr.w	r2, r2, #4
 8002c56:	619a      	str	r2, [r3, #24]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|BEEP_Pin;
 8002c62:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002c66:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	a902      	add	r1, sp, #8
 8002c70:	480e      	ldr	r0, [pc, #56]	@ (8002cac <HAL_TIM_MspPostInit+0x80>)
 8002c72:	f000 ffad 	bl	8003bd0 <HAL_GPIO_Init>
 8002c76:	e7e7      	b.n	8002c48 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_TIM_MspPostInit+0x7c>)
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	f042 0204 	orr.w	r2, r2, #4
 8002c80:	619a      	str	r2, [r3, #24]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PUMP_PWM_Pin;
 8002c8c:	2340      	movs	r3, #64	@ 0x40
 8002c8e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c94:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PUMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8002c96:	a902      	add	r1, sp, #8
 8002c98:	4804      	ldr	r0, [pc, #16]	@ (8002cac <HAL_TIM_MspPostInit+0x80>)
 8002c9a:	f000 ff99 	bl	8003bd0 <HAL_GPIO_Init>
}
 8002c9e:	e7d3      	b.n	8002c48 <HAL_TIM_MspPostInit+0x1c>
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40010800 	.word	0x40010800

08002cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9304      	str	r3, [sp, #16]
 8002cb8:	9305      	str	r3, [sp, #20]
 8002cba:	9306      	str	r3, [sp, #24]
 8002cbc:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8002cbe:	6803      	ldr	r3, [r0, #0]
 8002cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002dec <HAL_UART_MspInit+0x13c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d005      	beq.n	8002cd2 <HAL_UART_MspInit+0x22>
 8002cc6:	4604      	mov	r4, r0

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8002cc8:	4a49      	ldr	r2, [pc, #292]	@ (8002df0 <HAL_UART_MspInit+0x140>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d030      	beq.n	8002d30 <HAL_UART_MspInit+0x80>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cce:	b008      	add	sp, #32
 8002cd0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cd2:	4b48      	ldr	r3, [pc, #288]	@ (8002df4 <HAL_UART_MspInit+0x144>)
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cda:	619a      	str	r2, [r3, #24]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002ce2:	9200      	str	r2, [sp, #0]
 8002ce4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	f042 0208 	orr.w	r2, r2, #8
 8002cec:	619a      	str	r2, [r3, #24]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cf8:	2340      	movs	r3, #64	@ 0x40
 8002cfa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d00:	2303      	movs	r3, #3
 8002d02:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	4c3c      	ldr	r4, [pc, #240]	@ (8002df8 <HAL_UART_MspInit+0x148>)
 8002d06:	a904      	add	r1, sp, #16
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f000 ff61 	bl	8003bd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d12:	2300      	movs	r3, #0
 8002d14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d18:	a904      	add	r1, sp, #16
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f000 ff58 	bl	8003bd0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002d20:	4a36      	ldr	r2, [pc, #216]	@ (8002dfc <HAL_UART_MspInit+0x14c>)
 8002d22:	6853      	ldr	r3, [r2, #4]
 8002d24:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6053      	str	r3, [r2, #4]
 8002d2e:	e7ce      	b.n	8002cce <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d30:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <HAL_UART_MspInit+0x144>)
 8002d32:	69da      	ldr	r2, [r3, #28]
 8002d34:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002d38:	61da      	str	r2, [r3, #28]
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002d40:	9202      	str	r2, [sp, #8]
 8002d42:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	f042 0208 	orr.w	r2, r2, #8
 8002d4a:	619a      	str	r2, [r3, #24]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	9303      	str	r3, [sp, #12]
 8002d54:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d5a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d64:	4e24      	ldr	r6, [pc, #144]	@ (8002df8 <HAL_UART_MspInit+0x148>)
 8002d66:	a904      	add	r1, sp, #16
 8002d68:	4630      	mov	r0, r6
 8002d6a:	f000 ff31 	bl	8003bd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d74:	2500      	movs	r5, #0
 8002d76:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7a:	a904      	add	r1, sp, #16
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f000 ff27 	bl	8003bd0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002d82:	481f      	ldr	r0, [pc, #124]	@ (8002e00 <HAL_UART_MspInit+0x150>)
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <HAL_UART_MspInit+0x154>)
 8002d86:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d88:	2310      	movs	r3, #16
 8002d8a:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d8c:	6085      	str	r5, [r0, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d8e:	2380      	movs	r3, #128	@ 0x80
 8002d90:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d92:	6105      	str	r5, [r0, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d94:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002d96:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d98:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d9a:	f000 fd87 	bl	80038ac <HAL_DMA_Init>
 8002d9e:	b9f0      	cbnz	r0, 8002dde <HAL_UART_MspInit+0x12e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002da0:	4b17      	ldr	r3, [pc, #92]	@ (8002e00 <HAL_UART_MspInit+0x150>)
 8002da2:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002da4:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002da6:	4818      	ldr	r0, [pc, #96]	@ (8002e08 <HAL_UART_MspInit+0x158>)
 8002da8:	4b18      	ldr	r3, [pc, #96]	@ (8002e0c <HAL_UART_MspInit+0x15c>)
 8002daa:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dac:	2300      	movs	r3, #0
 8002dae:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db0:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002db2:	2280      	movs	r2, #128	@ 0x80
 8002db4:	60c2      	str	r2, [r0, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002db6:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002db8:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002dba:	2220      	movs	r2, #32
 8002dbc:	6182      	str	r2, [r0, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dbe:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002dc0:	f000 fd74 	bl	80038ac <HAL_DMA_Init>
 8002dc4:	b970      	cbnz	r0, 8002de4 <HAL_UART_MspInit+0x134>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002dc6:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_UART_MspInit+0x158>)
 8002dc8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002dca:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4611      	mov	r1, r2
 8002dd0:	2027      	movs	r0, #39	@ 0x27
 8002dd2:	f000 fd13 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002dd6:	2027      	movs	r0, #39	@ 0x27
 8002dd8:	f000 fd46 	bl	8003868 <HAL_NVIC_EnableIRQ>
}
 8002ddc:	e777      	b.n	8002cce <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8002dde:	f7ff fc8f 	bl	8002700 <Error_Handler>
 8002de2:	e7dd      	b.n	8002da0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002de4:	f7ff fc8c 	bl	8002700 <Error_Handler>
 8002de8:	e7ed      	b.n	8002dc6 <HAL_UART_MspInit+0x116>
 8002dea:	bf00      	nop
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40004800 	.word	0x40004800
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40010c00 	.word	0x40010c00
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	200003c8 	.word	0x200003c8
 8002e04:	4002001c 	.word	0x4002001c
 8002e08:	20000384 	.word	0x20000384
 8002e0c:	40020030 	.word	0x40020030

08002e10 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e10:	e7fe      	b.n	8002e10 <NMI_Handler>

08002e12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e12:	e7fe      	b.n	8002e12 <HardFault_Handler>

08002e14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <MemManage_Handler>

08002e16 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e16:	e7fe      	b.n	8002e16 <BusFault_Handler>

08002e18 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <UsageFault_Handler>

08002e1a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e1a:	4770      	bx	lr

08002e1c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e1c:	4770      	bx	lr

08002e1e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e1e:	4770      	bx	lr

08002e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e22:	f000 f945 	bl	80030b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e26:	bd08      	pop	{r3, pc}

08002e28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e2a:	4802      	ldr	r0, [pc, #8]	@ (8002e34 <DMA1_Channel1_IRQHandler+0xc>)
 8002e2c:	f000 fe30 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e30:	bd08      	pop	{r3, pc}
 8002e32:	bf00      	nop
 8002e34:	20000610 	.word	0x20000610

08002e38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002e38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002e3a:	4802      	ldr	r0, [pc, #8]	@ (8002e44 <DMA1_Channel2_IRQHandler+0xc>)
 8002e3c:	f000 fe28 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002e40:	bd08      	pop	{r3, pc}
 8002e42:	bf00      	nop
 8002e44:	200003c8 	.word	0x200003c8

08002e48 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002e48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002e4a:	4802      	ldr	r0, [pc, #8]	@ (8002e54 <DMA1_Channel3_IRQHandler+0xc>)
 8002e4c:	f000 fe20 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002e50:	bd08      	pop	{r3, pc}
 8002e52:	bf00      	nop
 8002e54:	20000384 	.word	0x20000384

08002e58 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e5a:	4803      	ldr	r0, [pc, #12]	@ (8002e68 <ADC1_2_IRQHandler+0x10>)
 8002e5c:	f000 f97f 	bl	800315e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002e60:	4802      	ldr	r0, [pc, #8]	@ (8002e6c <ADC1_2_IRQHandler+0x14>)
 8002e62:	f000 f97c 	bl	800315e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002e66:	bd08      	pop	{r3, pc}
 8002e68:	20000684 	.word	0x20000684
 8002e6c:	20000654 	.word	0x20000654

08002e70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */


	CNT_TIMER2++;
 8002e72:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <TIM2_IRQHandler+0x14>)
 8002e74:	6813      	ldr	r3, [r2, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e7a:	4803      	ldr	r0, [pc, #12]	@ (8002e88 <TIM2_IRQHandler+0x18>)
 8002e7c:	f001 ff8d 	bl	8004d9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e80:	bd08      	pop	{r3, pc}
 8002e82:	bf00      	nop
 8002e84:	200002f4 	.word	0x200002f4
 8002e88:	2000052c 	.word	0x2000052c

08002e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e8e:	4802      	ldr	r0, [pc, #8]	@ (8002e98 <USART3_IRQHandler+0xc>)
 8002e90:	f002 fda4 	bl	80059dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e94:	bd08      	pop	{r3, pc}
 8002e96:	bf00      	nop
 8002e98:	2000040c 	.word	0x2000040c

08002e9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET)
 8002e9e:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <EXTI15_10_IRQHandler+0x8c>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002ea6:	d007      	beq.n	8002eb8 <EXTI15_10_IRQHandler+0x1c>
	    {
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f28 <EXTI15_10_IRQHandler+0x8c>)
 8002eaa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002eae:	615a      	str	r2, [r3, #20]
	        FLAG_SentKEY0++;
 8002eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f2c <EXTI15_10_IRQHandler+0x90>)
 8002eb2:	7813      	ldrb	r3, [r2, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	7013      	strb	r3, [r2, #0]
	    }
	    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <EXTI15_10_IRQHandler+0x8c>)
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002ec0:	d007      	beq.n	8002ed2 <EXTI15_10_IRQHandler+0x36>
	    {
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8002ec2:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <EXTI15_10_IRQHandler+0x8c>)
 8002ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ec8:	615a      	str	r2, [r3, #20]
	        FLAG_SentKEY1++;
 8002eca:	4a19      	ldr	r2, [pc, #100]	@ (8002f30 <EXTI15_10_IRQHandler+0x94>)
 8002ecc:	7813      	ldrb	r3, [r2, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	7013      	strb	r3, [r2, #0]
	    }
	    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET)
 8002ed2:	4b15      	ldr	r3, [pc, #84]	@ (8002f28 <EXTI15_10_IRQHandler+0x8c>)
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002eda:	d007      	beq.n	8002eec <EXTI15_10_IRQHandler+0x50>
	    {
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8002edc:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <EXTI15_10_IRQHandler+0x8c>)
 8002ede:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ee2:	615a      	str	r2, [r3, #20]
	        FLAG_SentKEY2++;
 8002ee4:	4a13      	ldr	r2, [pc, #76]	@ (8002f34 <EXTI15_10_IRQHandler+0x98>)
 8002ee6:	7813      	ldrb	r3, [r2, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	7013      	strb	r3, [r2, #0]
	    }
	    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET)
 8002eec:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <EXTI15_10_IRQHandler+0x8c>)
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002ef4:	d007      	beq.n	8002f06 <EXTI15_10_IRQHandler+0x6a>
	    {
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <EXTI15_10_IRQHandler+0x8c>)
 8002ef8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002efc:	615a      	str	r2, [r3, #20]
	        FLAG_SentKEY3++;
 8002efe:	4a0e      	ldr	r2, [pc, #56]	@ (8002f38 <EXTI15_10_IRQHandler+0x9c>)
 8002f00:	7813      	ldrb	r3, [r2, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	7013      	strb	r3, [r2, #0]
	    }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002f06:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002f0a:	f000 ffaf 	bl	8003e6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002f0e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002f12:	f000 ffab 	bl	8003e6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002f16:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002f1a:	f000 ffa7 	bl	8003e6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002f1e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002f22:	f000 ffa3 	bl	8003e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f26:	bd08      	pop	{r3, pc}
 8002f28:	40010400 	.word	0x40010400
 8002f2c:	200002f3 	.word	0x200002f3
 8002f30:	200002f2 	.word	0x200002f2
 8002f34:	200002f1 	.word	0x200002f1
 8002f38:	200002f0 	.word	0x200002f0

08002f3c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	4770      	bx	lr

08002f40 <_kill>:

int _kill(int pid, int sig)
{
 8002f40:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f42:	f003 ffc9 	bl	8006ed8 <__errno>
 8002f46:	2316      	movs	r3, #22
 8002f48:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4e:	bd08      	pop	{r3, pc}

08002f50 <_exit>:

void _exit (int status)
{
 8002f50:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002f52:	f003 ffc1 	bl	8006ed8 <__errno>
 8002f56:	2316      	movs	r3, #22
 8002f58:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002f5a:	e7fe      	b.n	8002f5a <_exit+0xa>

08002f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f5c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5e:	1e16      	subs	r6, r2, #0
 8002f60:	dd07      	ble.n	8002f72 <_read+0x16>
 8002f62:	460c      	mov	r4, r1
 8002f64:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002f66:	f3af 8000 	nop.w
 8002f6a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6e:	42a5      	cmp	r5, r4
 8002f70:	d1f9      	bne.n	8002f66 <_read+0xa>
  }

  return len;
}
 8002f72:	4630      	mov	r0, r6
 8002f74:	bd70      	pop	{r4, r5, r6, pc}

08002f76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f76:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f78:	1e16      	subs	r6, r2, #0
 8002f7a:	dd07      	ble.n	8002f8c <_write+0x16>
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8002f80:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002f84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f88:	42a5      	cmp	r5, r4
 8002f8a:	d1f9      	bne.n	8002f80 <_write+0xa>
  }
  return len;
}
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}

08002f90 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	4770      	bx	lr

08002f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f9a:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	4770      	bx	lr

08002fa0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	4770      	bx	lr

08002fa4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	4770      	bx	lr

08002fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa8:	b508      	push	{r3, lr}
 8002faa:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fac:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe0 <_sbrk+0x38>)
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	b152      	cbz	r2, 8002fc8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	@ (8002fe0 <_sbrk+0x38>)
 8002fb4:	6810      	ldr	r0, [r2, #0]
 8002fb6:	4403      	add	r3, r0
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <_sbrk+0x3c>)
 8002fba:	490b      	ldr	r1, [pc, #44]	@ (8002fe8 <_sbrk+0x40>)
 8002fbc:	1a52      	subs	r2, r2, r1
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d806      	bhi.n	8002fd0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002fc2:	4a07      	ldr	r2, [pc, #28]	@ (8002fe0 <_sbrk+0x38>)
 8002fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002fc6:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8002fc8:	4a05      	ldr	r2, [pc, #20]	@ (8002fe0 <_sbrk+0x38>)
 8002fca:	4908      	ldr	r1, [pc, #32]	@ (8002fec <_sbrk+0x44>)
 8002fcc:	6011      	str	r1, [r2, #0]
 8002fce:	e7f0      	b.n	8002fb2 <_sbrk+0xa>
    errno = ENOMEM;
 8002fd0:	f003 ff82 	bl	8006ed8 <__errno>
 8002fd4:	230c      	movs	r3, #12
 8002fd6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	e7f3      	b.n	8002fc6 <_sbrk+0x1e>
 8002fde:	bf00      	nop
 8002fe0:	20000abc 	.word	0x20000abc
 8002fe4:	20005000 	.word	0x20005000
 8002fe8:	00000400 	.word	0x00000400
 8002fec:	20000c10 	.word	0x20000c10

08002ff0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ff0:	4770      	bx	lr
	...

08002ff4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ff4:	f7ff fffc 	bl	8002ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002ff8:	480b      	ldr	r0, [pc, #44]	@ (8003028 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ffa:	490c      	ldr	r1, [pc, #48]	@ (800302c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8003030 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003000:	e002      	b.n	8003008 <LoopCopyDataInit>

08003002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003006:	3304      	adds	r3, #4

08003008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800300a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800300c:	d3f9      	bcc.n	8003002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300e:	4a09      	ldr	r2, [pc, #36]	@ (8003034 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003010:	4c09      	ldr	r4, [pc, #36]	@ (8003038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003014:	e001      	b.n	800301a <LoopFillZerobss>

08003016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003018:	3204      	adds	r2, #4

0800301a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800301a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800301c:	d3fb      	bcc.n	8003016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800301e:	f003 ff61 	bl	8006ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003022:	f7fe ff97 	bl	8001f54 <main>
  bx lr
 8003026:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8003028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800302c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8003030:	0800c644 	.word	0x0800c644
  ldr r2, =_sbss
 8003034:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8003038:	20000c10 	.word	0x20000c10

0800303c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800303c:	e7fe      	b.n	800303c <CAN1_RX1_IRQHandler>
	...

08003040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003040:	b510      	push	{r4, lr}
 8003042:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003044:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <HAL_InitTick+0x40>)
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800304c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003050:	4a0c      	ldr	r2, [pc, #48]	@ (8003084 <HAL_InitTick+0x44>)
 8003052:	6810      	ldr	r0, [r2, #0]
 8003054:	fbb0 f0f3 	udiv	r0, r0, r3
 8003058:	f000 fc14 	bl	8003884 <HAL_SYSTICK_Config>
 800305c:	b968      	cbnz	r0, 800307a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305e:	2c0f      	cmp	r4, #15
 8003060:	d901      	bls.n	8003066 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8003062:	2001      	movs	r0, #1
 8003064:	e00a      	b.n	800307c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003066:	2200      	movs	r2, #0
 8003068:	4621      	mov	r1, r4
 800306a:	f04f 30ff 	mov.w	r0, #4294967295
 800306e:	f000 fbc5 	bl	80037fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003072:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_InitTick+0x48>)
 8003074:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003076:	2000      	movs	r0, #0
 8003078:	e000      	b.n	800307c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800307a:	2001      	movs	r0, #1
}
 800307c:	bd10      	pop	{r4, pc}
 800307e:	bf00      	nop
 8003080:	20000100 	.word	0x20000100
 8003084:	200000fc 	.word	0x200000fc
 8003088:	20000104 	.word	0x20000104

0800308c <HAL_Init>:
{
 800308c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800308e:	4a07      	ldr	r2, [pc, #28]	@ (80030ac <HAL_Init+0x20>)
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	f043 0310 	orr.w	r3, r3, #16
 8003096:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003098:	2003      	movs	r0, #3
 800309a:	f000 fb9d 	bl	80037d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800309e:	200f      	movs	r0, #15
 80030a0:	f7ff ffce 	bl	8003040 <HAL_InitTick>
  HAL_MspInit();
 80030a4:	f7ff fc96 	bl	80029d4 <HAL_MspInit>
}
 80030a8:	2000      	movs	r0, #0
 80030aa:	bd08      	pop	{r3, pc}
 80030ac:	40022000 	.word	0x40022000

080030b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030b0:	4a03      	ldr	r2, [pc, #12]	@ (80030c0 <HAL_IncTick+0x10>)
 80030b2:	6811      	ldr	r1, [r2, #0]
 80030b4:	4b03      	ldr	r3, [pc, #12]	@ (80030c4 <HAL_IncTick+0x14>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	440b      	add	r3, r1
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000ac0 	.word	0x20000ac0
 80030c4:	20000100 	.word	0x20000100

080030c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80030c8:	4b01      	ldr	r3, [pc, #4]	@ (80030d0 <HAL_GetTick+0x8>)
 80030ca:	6818      	ldr	r0, [r3, #0]
}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000ac0 	.word	0x20000ac0

080030d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff fff6 	bl	80030c8 <HAL_GetTick>
 80030dc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030de:	f1b4 3fff 	cmp.w	r4, #4294967295
 80030e2:	d002      	beq.n	80030ea <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e4:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <HAL_Delay+0x24>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ea:	f7ff ffed 	bl	80030c8 <HAL_GetTick>
 80030ee:	1b40      	subs	r0, r0, r5
 80030f0:	42a0      	cmp	r0, r4
 80030f2:	d3fa      	bcc.n	80030ea <HAL_Delay+0x16>
  {
  }
}
 80030f4:	bd38      	pop	{r3, r4, r5, pc}
 80030f6:	bf00      	nop
 80030f8:	20000100 	.word	0x20000100

080030fc <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030fc:	4770      	bx	lr

080030fe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030fe:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003100:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003102:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003104:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8003108:	d11e      	bne.n	8003148 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800310a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800310c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003110:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	6892      	ldr	r2, [r2, #8]
 8003116:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800311a:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 800311e:	d003      	beq.n	8003128 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ffeb 	bl	80030fc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003126:	bd08      	pop	{r3, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003128:	7b1a      	ldrb	r2, [r3, #12]
 800312a:	2a00      	cmp	r2, #0
 800312c:	d1f8      	bne.n	8003120 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800312e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003130:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003134:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003136:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003138:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800313c:	d1f0      	bne.n	8003120 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800313e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	629a      	str	r2, [r3, #40]	@ 0x28
 8003146:	e7eb      	b.n	8003120 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	4798      	blx	r3
}
 800314e:	e7ea      	b.n	8003126 <ADC_DMAConvCplt+0x28>

08003150 <HAL_ADC_ConvHalfCpltCallback>:
}
 8003150:	4770      	bx	lr

08003152 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003152:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003154:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003156:	f7ff fffb 	bl	8003150 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800315a:	bd08      	pop	{r3, pc}

0800315c <HAL_ADC_LevelOutOfWindowCallback>:
}
 800315c:	4770      	bx	lr

0800315e <HAL_ADC_IRQHandler>:
{
 800315e:	b570      	push	{r4, r5, r6, lr}
 8003160:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 8003162:	6803      	ldr	r3, [r0, #0]
 8003164:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003166:	685d      	ldr	r5, [r3, #4]
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003168:	f015 0f20 	tst.w	r5, #32
 800316c:	d017      	beq.n	800319e <HAL_ADC_IRQHandler+0x40>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800316e:	f016 0f02 	tst.w	r6, #2
 8003172:	d014      	beq.n	800319e <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003174:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003176:	f012 0f10 	tst.w	r2, #16
 800317a:	d103      	bne.n	8003184 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800317c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800317e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003182:	6282      	str	r2, [r0, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800318a:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 800318e:	d033      	beq.n	80031f8 <HAL_ADC_IRQHandler+0x9a>
      HAL_ADC_ConvCpltCallback(hadc);
 8003190:	4620      	mov	r0, r4
 8003192:	f7ff ffb3 	bl	80030fc <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	f06f 0212 	mvn.w	r2, #18
 800319c:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800319e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80031a2:	d022      	beq.n	80031ea <HAL_ADC_IRQHandler+0x8c>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80031a4:	f016 0f04 	tst.w	r6, #4
 80031a8:	d01f      	beq.n	80031ea <HAL_ADC_IRQHandler+0x8c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80031ac:	f013 0f10 	tst.w	r3, #16
 80031b0:	d103      	bne.n	80031ba <HAL_ADC_IRQHandler+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80031b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031b8:	62a3      	str	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	6893      	ldr	r3, [r2, #8]
 80031be:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80031c2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80031c6:	d02e      	beq.n	8003226 <HAL_ADC_IRQHandler+0xc8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80031c8:	6853      	ldr	r3, [r2, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80031ca:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80031ce:	d105      	bne.n	80031dc <HAL_ADC_IRQHandler+0x7e>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80031d0:	6893      	ldr	r3, [r2, #8]
 80031d2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80031d6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80031da:	d021      	beq.n	8003220 <HAL_ADC_IRQHandler+0xc2>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031dc:	4620      	mov	r0, r4
 80031de:	f000 faf9 	bl	80037d4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	f06f 020c 	mvn.w	r2, #12
 80031e8:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80031ea:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80031ee:	d002      	beq.n	80031f6 <HAL_ADC_IRQHandler+0x98>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80031f0:	f016 0f01 	tst.w	r6, #1
 80031f4:	d128      	bne.n	8003248 <HAL_ADC_IRQHandler+0xea>
}
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031f8:	7b22      	ldrb	r2, [r4, #12]
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	d1c8      	bne.n	8003190 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	f022 0220 	bic.w	r2, r2, #32
 8003204:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003206:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800320c:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800320e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003210:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003214:	d1bc      	bne.n	8003190 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003216:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800321e:	e7b7      	b.n	8003190 <HAL_ADC_IRQHandler+0x32>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003220:	7b23      	ldrb	r3, [r4, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1da      	bne.n	80031dc <HAL_ADC_IRQHandler+0x7e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003226:	6853      	ldr	r3, [r2, #4]
 8003228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800322c:	6053      	str	r3, [r2, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800322e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003230:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003234:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003236:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003238:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800323c:	d1ce      	bne.n	80031dc <HAL_ADC_IRQHandler+0x7e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800323e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003246:	e7c9      	b.n	80031dc <HAL_ADC_IRQHandler+0x7e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003248:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800324a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324e:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003250:	4620      	mov	r0, r4
 8003252:	f7ff ff83 	bl	800315c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	f06f 0201 	mvn.w	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
}
 800325e:	e7ca      	b.n	80031f6 <HAL_ADC_IRQHandler+0x98>

08003260 <HAL_ADC_ErrorCallback>:
}
 8003260:	4770      	bx	lr

08003262 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003262:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003264:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003266:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800326c:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800326e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003270:	f043 0304 	orr.w	r3, r3, #4
 8003274:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003276:	f7ff fff3 	bl	8003260 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800327a:	bd08      	pop	{r3, pc}

0800327c <HAL_ADC_ConfigChannel>:
{ 
 800327c:	b430      	push	{r4, r5}
 800327e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8003280:	2200      	movs	r2, #0
 8003282:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003284:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003288:	2a01      	cmp	r2, #1
 800328a:	f000 8093 	beq.w	80033b4 <HAL_ADC_ConfigChannel+0x138>
 800328e:	4603      	mov	r3, r0
 8003290:	2201      	movs	r2, #1
 8003292:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8003296:	684a      	ldr	r2, [r1, #4]
 8003298:	2a06      	cmp	r2, #6
 800329a:	d82d      	bhi.n	80032f8 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800329c:	6804      	ldr	r4, [r0, #0]
 800329e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80032a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80032a4:	3a05      	subs	r2, #5
 80032a6:	f04f 0c1f 	mov.w	ip, #31
 80032aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80032ae:	ea20 000c 	bic.w	r0, r0, ip
 80032b2:	680d      	ldr	r5, [r1, #0]
 80032b4:	fa05 f202 	lsl.w	r2, r5, r2
 80032b8:	4302      	orrs	r2, r0
 80032ba:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032bc:	680a      	ldr	r2, [r1, #0]
 80032be:	2a09      	cmp	r2, #9
 80032c0:	d938      	bls.n	8003334 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032c2:	681c      	ldr	r4, [r3, #0]
 80032c4:	68e0      	ldr	r0, [r4, #12]
 80032c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80032ca:	3a1e      	subs	r2, #30
 80032cc:	f04f 0c07 	mov.w	ip, #7
 80032d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80032d4:	ea20 000c 	bic.w	r0, r0, ip
 80032d8:	688d      	ldr	r5, [r1, #8]
 80032da:	fa05 f202 	lsl.w	r2, r5, r2
 80032de:	4302      	orrs	r2, r0
 80032e0:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032e2:	680a      	ldr	r2, [r1, #0]
 80032e4:	3a10      	subs	r2, #16
 80032e6:	2a01      	cmp	r2, #1
 80032e8:	d934      	bls.n	8003354 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ea:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80032f2:	b002      	add	sp, #8
 80032f4:	bc30      	pop	{r4, r5}
 80032f6:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80032f8:	2a0c      	cmp	r2, #12
 80032fa:	d80d      	bhi.n	8003318 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032fc:	6805      	ldr	r5, [r0, #0]
 80032fe:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8003300:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003304:	3a23      	subs	r2, #35	@ 0x23
 8003306:	241f      	movs	r4, #31
 8003308:	4094      	lsls	r4, r2
 800330a:	ea20 0004 	bic.w	r0, r0, r4
 800330e:	680c      	ldr	r4, [r1, #0]
 8003310:	4094      	lsls	r4, r2
 8003312:	4320      	orrs	r0, r4
 8003314:	6328      	str	r0, [r5, #48]	@ 0x30
 8003316:	e7d1      	b.n	80032bc <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003318:	6805      	ldr	r5, [r0, #0]
 800331a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800331c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003320:	3a41      	subs	r2, #65	@ 0x41
 8003322:	241f      	movs	r4, #31
 8003324:	4094      	lsls	r4, r2
 8003326:	ea20 0004 	bic.w	r0, r0, r4
 800332a:	680c      	ldr	r4, [r1, #0]
 800332c:	4094      	lsls	r4, r2
 800332e:	4320      	orrs	r0, r4
 8003330:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8003332:	e7c3      	b.n	80032bc <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003334:	681c      	ldr	r4, [r3, #0]
 8003336:	6920      	ldr	r0, [r4, #16]
 8003338:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800333c:	f04f 0c07 	mov.w	ip, #7
 8003340:	fa0c fc02 	lsl.w	ip, ip, r2
 8003344:	ea20 000c 	bic.w	r0, r0, ip
 8003348:	688d      	ldr	r5, [r1, #8]
 800334a:	fa05 f202 	lsl.w	r2, r5, r2
 800334e:	4302      	orrs	r2, r0
 8003350:	6122      	str	r2, [r4, #16]
 8003352:	e7c6      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <HAL_ADC_ConfigChannel+0x13c>)
 8003358:	4290      	cmp	r0, r2
 800335a:	d005      	beq.n	8003368 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800335e:	f042 0220 	orr.w	r2, r2, #32
 8003362:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8003364:	2001      	movs	r0, #1
 8003366:	e7c1      	b.n	80032ec <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 800336e:	d11d      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003370:	4811      	ldr	r0, [pc, #68]	@ (80033b8 <HAL_ADC_ConfigChannel+0x13c>)
 8003372:	6882      	ldr	r2, [r0, #8]
 8003374:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003378:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800337a:	680a      	ldr	r2, [r1, #0]
 800337c:	2a10      	cmp	r2, #16
 800337e:	d001      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x108>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003380:	2000      	movs	r0, #0
 8003382:	e7b3      	b.n	80032ec <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003384:	4a0d      	ldr	r2, [pc, #52]	@ (80033bc <HAL_ADC_ConfigChannel+0x140>)
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	490d      	ldr	r1, [pc, #52]	@ (80033c0 <HAL_ADC_ConfigChannel+0x144>)
 800338a:	fba1 1202 	umull	r1, r2, r1, r2
 800338e:	0c92      	lsrs	r2, r2, #18
 8003390:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003394:	0052      	lsls	r2, r2, #1
 8003396:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003398:	9a01      	ldr	r2, [sp, #4]
 800339a:	b14a      	cbz	r2, 80033b0 <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 800339c:	9a01      	ldr	r2, [sp, #4]
 800339e:	3a01      	subs	r2, #1
 80033a0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80033a2:	9a01      	ldr	r2, [sp, #4]
 80033a4:	2a00      	cmp	r2, #0
 80033a6:	d1f9      	bne.n	800339c <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a8:	2000      	movs	r0, #0
 80033aa:	e79f      	b.n	80032ec <HAL_ADC_ConfigChannel+0x70>
 80033ac:	2000      	movs	r0, #0
 80033ae:	e79d      	b.n	80032ec <HAL_ADC_ConfigChannel+0x70>
 80033b0:	2000      	movs	r0, #0
 80033b2:	e79b      	b.n	80032ec <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80033b4:	2002      	movs	r0, #2
 80033b6:	e79c      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x76>
 80033b8:	40012400 	.word	0x40012400
 80033bc:	200000fc 	.word	0x200000fc
 80033c0:	431bde83 	.word	0x431bde83

080033c4 <ADC_Enable>:
{
 80033c4:	b530      	push	{r4, r5, lr}
 80033c6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033cc:	6803      	ldr	r3, [r0, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	f012 0f01 	tst.w	r2, #1
 80033d4:	d13b      	bne.n	800344e <ADC_Enable+0x8a>
 80033d6:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003454 <ADC_Enable+0x90>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003458 <ADC_Enable+0x94>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0c9b      	lsrs	r3, r3, #18
 80033ec:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80033ee:	9b01      	ldr	r3, [sp, #4]
 80033f0:	b12b      	cbz	r3, 80033fe <ADC_Enable+0x3a>
      wait_loop_index--;
 80033f2:	9b01      	ldr	r3, [sp, #4]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80033f8:	9b01      	ldr	r3, [sp, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f9      	bne.n	80033f2 <ADC_Enable+0x2e>
    tickstart = HAL_GetTick();
 80033fe:	f7ff fe63 	bl	80030c8 <HAL_GetTick>
 8003402:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f013 0f01 	tst.w	r3, #1
 800340c:	d006      	beq.n	800341c <ADC_Enable+0x58>
  return HAL_OK;
 800340e:	2000      	movs	r0, #0
 8003410:	e01e      	b.n	8003450 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f013 0f01 	tst.w	r3, #1
 800341a:	d116      	bne.n	800344a <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800341c:	f7ff fe54 	bl	80030c8 <HAL_GetTick>
 8003420:	1b43      	subs	r3, r0, r5
 8003422:	2b02      	cmp	r3, #2
 8003424:	d9f5      	bls.n	8003412 <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f013 0f01 	tst.w	r3, #1
 800342e:	d1f0      	bne.n	8003412 <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003430:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003432:	f043 0310 	orr.w	r3, r3, #16
 8003436:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003438:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8003440:	2300      	movs	r3, #0
 8003442:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8003446:	2001      	movs	r0, #1
 8003448:	e002      	b.n	8003450 <ADC_Enable+0x8c>
  return HAL_OK;
 800344a:	2000      	movs	r0, #0
 800344c:	e000      	b.n	8003450 <ADC_Enable+0x8c>
 800344e:	2000      	movs	r0, #0
}
 8003450:	b003      	add	sp, #12
 8003452:	bd30      	pop	{r4, r5, pc}
 8003454:	200000fc 	.word	0x200000fc
 8003458:	431bde83 	.word	0x431bde83

0800345c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800345c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8003460:	2b01      	cmp	r3, #1
 8003462:	d066      	beq.n	8003532 <HAL_ADC_Start+0xd6>
{
 8003464:	b510      	push	{r4, lr}
 8003466:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003468:	2301      	movs	r3, #1
 800346a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800346e:	f7ff ffa9 	bl	80033c4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8003472:	2800      	cmp	r0, #0
 8003474:	d159      	bne.n	800352a <HAL_ADC_Start+0xce>
    ADC_STATE_CLR_SET(hadc->State,
 8003476:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003484:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	4a2b      	ldr	r2, [pc, #172]	@ (8003538 <HAL_ADC_Start+0xdc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d028      	beq.n	80034e0 <HAL_ADC_Start+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800348e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003490:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003494:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800349c:	d005      	beq.n	80034aa <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800349e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80034a0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80034a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034a8:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80034ac:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034b0:	bf1a      	itte	ne
 80034b2:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 80034b4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80034b8:	2200      	moveq	r2, #0
 80034ba:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 80034bc:	2200      	movs	r2, #0
 80034be:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80034c2:	f06f 0202 	mvn.w	r2, #2
 80034c6:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80034d0:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80034d4:	d01a      	beq.n	800350c <HAL_ADC_Start+0xb0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	e027      	b.n	8003530 <HAL_ADC_Start+0xd4>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80034e0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80034e4:	6852      	ldr	r2, [r2, #4]
 80034e6:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80034ea:	d0d0      	beq.n	800348e <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034ec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80034ee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80034f2:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034f4:	4a11      	ldr	r2, [pc, #68]	@ (800353c <HAL_ADC_Start+0xe0>)
 80034f6:	6852      	ldr	r2, [r2, #4]
 80034f8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80034fc:	d0d5      	beq.n	80034aa <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034fe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003500:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003504:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003508:	62a2      	str	r2, [r4, #40]	@ 0x28
 800350a:	e7ce      	b.n	80034aa <HAL_ADC_Start+0x4e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800350c:	4a0a      	ldr	r2, [pc, #40]	@ (8003538 <HAL_ADC_Start+0xdc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_ADC_Start+0xc0>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	e009      	b.n	8003530 <HAL_ADC_Start+0xd4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800351c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8003520:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003522:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8003526:	d1d6      	bne.n	80034d6 <HAL_ADC_Start+0x7a>
 8003528:	e7f3      	b.n	8003512 <HAL_ADC_Start+0xb6>
    __HAL_UNLOCK(hadc);
 800352a:	2300      	movs	r3, #0
 800352c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8003530:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003532:	2002      	movs	r0, #2
}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012800 	.word	0x40012800
 800353c:	40012400 	.word	0x40012400

08003540 <HAL_ADC_Start_DMA>:
{
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	4604      	mov	r4, r0
 8003544:	460d      	mov	r5, r1
 8003546:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003548:	6801      	ldr	r1, [r0, #0]
 800354a:	4842      	ldr	r0, [pc, #264]	@ (8003654 <HAL_ADC_Start_DMA+0x114>)
 800354c:	4281      	cmp	r1, r0
 800354e:	d05d      	beq.n	800360c <HAL_ADC_Start_DMA+0xcc>
 8003550:	4b41      	ldr	r3, [pc, #260]	@ (8003658 <HAL_ADC_Start_DMA+0x118>)
 8003552:	4299      	cmp	r1, r3
 8003554:	d05a      	beq.n	800360c <HAL_ADC_Start_DMA+0xcc>
    __HAL_LOCK(hadc);
 8003556:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800355a:	2b01      	cmp	r3, #1
 800355c:	d077      	beq.n	800364e <HAL_ADC_Start_DMA+0x10e>
 800355e:	2301      	movs	r3, #1
 8003560:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8003564:	4620      	mov	r0, r4
 8003566:	f7ff ff2d 	bl	80033c4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800356a:	4607      	mov	r7, r0
 800356c:	2800      	cmp	r0, #0
 800356e:	d16a      	bne.n	8003646 <HAL_ADC_Start_DMA+0x106>
      ADC_STATE_CLR_SET(hadc->State,
 8003570:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003572:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8003576:	f021 0101 	bic.w	r1, r1, #1
 800357a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800357e:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	4b35      	ldr	r3, [pc, #212]	@ (8003658 <HAL_ADC_Start_DMA+0x118>)
 8003584:	429a      	cmp	r2, r3
 8003586:	d048      	beq.n	800361a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003588:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800358a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800358e:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003590:	6853      	ldr	r3, [r2, #4]
 8003592:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003596:	d005      	beq.n	80035a4 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003598:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800359a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800359e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035a2:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80035a6:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035aa:	bf1a      	itte	ne
 80035ac:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
 80035ae:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80035b2:	2300      	moveq	r3, #0
 80035b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 80035b6:	2300      	movs	r3, #0
 80035b8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035bc:	6a23      	ldr	r3, [r4, #32]
 80035be:	4a27      	ldr	r2, [pc, #156]	@ (800365c <HAL_ADC_Start_DMA+0x11c>)
 80035c0:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035c2:	6a23      	ldr	r3, [r4, #32]
 80035c4:	4a26      	ldr	r2, [pc, #152]	@ (8003660 <HAL_ADC_Start_DMA+0x120>)
 80035c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035c8:	6a23      	ldr	r3, [r4, #32]
 80035ca:	4a26      	ldr	r2, [pc, #152]	@ (8003664 <HAL_ADC_Start_DMA+0x124>)
 80035cc:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	f06f 0202 	mvn.w	r2, #2
 80035d4:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	6893      	ldr	r3, [r2, #8]
 80035da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035de:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035e0:	6821      	ldr	r1, [r4, #0]
 80035e2:	4633      	mov	r3, r6
 80035e4:	462a      	mov	r2, r5
 80035e6:	314c      	adds	r1, #76	@ 0x4c
 80035e8:	6a20      	ldr	r0, [r4, #32]
 80035ea:	f000 f995 	bl	8003918 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80035f6:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	bf0c      	ite	eq
 80035fe:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003602:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	4638      	mov	r0, r7
 800360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800360c:	4b11      	ldr	r3, [pc, #68]	@ (8003654 <HAL_ADC_Start_DMA+0x114>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8003614:	d09f      	beq.n	8003556 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8003616:	2701      	movs	r7, #1
 8003618:	e7f6      	b.n	8003608 <HAL_ADC_Start_DMA+0xc8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800361a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8003624:	d0b0      	beq.n	8003588 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003626:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003628:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800362c:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800362e:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <HAL_ADC_Start_DMA+0x114>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003636:	d0b5      	beq.n	80035a4 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003638:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800363a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800363e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003642:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003644:	e7ae      	b.n	80035a4 <HAL_ADC_Start_DMA+0x64>
      __HAL_UNLOCK(hadc);
 8003646:	2300      	movs	r3, #0
 8003648:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800364c:	e7dc      	b.n	8003608 <HAL_ADC_Start_DMA+0xc8>
    __HAL_LOCK(hadc);
 800364e:	2702      	movs	r7, #2
 8003650:	e7da      	b.n	8003608 <HAL_ADC_Start_DMA+0xc8>
 8003652:	bf00      	nop
 8003654:	40012400 	.word	0x40012400
 8003658:	40012800 	.word	0x40012800
 800365c:	080030ff 	.word	0x080030ff
 8003660:	08003153 	.word	0x08003153
 8003664:	08003263 	.word	0x08003263

08003668 <ADC_ConversionStop_Disable>:
{
 8003668:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800366a:	6803      	ldr	r3, [r0, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	f012 0f01 	tst.w	r2, #1
 8003672:	d101      	bne.n	8003678 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8003674:	2000      	movs	r0, #0
}
 8003676:	bd38      	pop	{r3, r4, r5, pc}
 8003678:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003682:	f7ff fd21 	bl	80030c8 <HAL_GetTick>
 8003686:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f013 0f01 	tst.w	r3, #1
 8003690:	d106      	bne.n	80036a0 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8003692:	2000      	movs	r0, #0
 8003694:	e7ef      	b.n	8003676 <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f013 0f01 	tst.w	r3, #1
 800369e:	d013      	beq.n	80036c8 <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036a0:	f7ff fd12 	bl	80030c8 <HAL_GetTick>
 80036a4:	1b43      	subs	r3, r0, r5
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d9f5      	bls.n	8003696 <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f013 0f01 	tst.w	r3, #1
 80036b2:	d0f0      	beq.n	8003696 <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80036b6:	f043 0310 	orr.w	r3, r3, #16
 80036ba:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80036c4:	2001      	movs	r0, #1
 80036c6:	e7d6      	b.n	8003676 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80036c8:	2000      	movs	r0, #0
 80036ca:	e7d4      	b.n	8003676 <ADC_ConversionStop_Disable+0xe>

080036cc <HAL_ADC_Init>:
  if(hadc == NULL)
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d07a      	beq.n	80037c6 <HAL_ADC_Init+0xfa>
{
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036d4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d04f      	beq.n	800377a <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80036da:	4620      	mov	r0, r4
 80036dc:	f7ff ffc4 	bl	8003668 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80036e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80036e2:	f013 0310 	ands.w	r3, r3, #16
 80036e6:	d168      	bne.n	80037ba <HAL_ADC_Init+0xee>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d166      	bne.n	80037ba <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 80036ec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80036ee:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80036f2:	f022 0202 	bic.w	r2, r2, #2
 80036f6:	f042 0202 	orr.w	r2, r2, #2
 80036fa:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80036fc:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036fe:	6862      	ldr	r2, [r4, #4]
 8003700:	69e5      	ldr	r5, [r4, #28]
 8003702:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003704:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003708:	68a5      	ldr	r5, [r4, #8]
 800370a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800370e:	d004      	beq.n	800371a <HAL_ADC_Init+0x4e>
 8003710:	2d01      	cmp	r5, #1
 8003712:	bf14      	ite	ne
 8003714:	2500      	movne	r5, #0
 8003716:	2501      	moveq	r5, #1
 8003718:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800371a:	7d26      	ldrb	r6, [r4, #20]
 800371c:	2e01      	cmp	r6, #1
 800371e:	d032      	beq.n	8003786 <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 8003720:	6826      	ldr	r6, [r4, #0]
 8003722:	6871      	ldr	r1, [r6, #4]
 8003724:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8003728:	4329      	orrs	r1, r5
 800372a:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800372c:	6825      	ldr	r5, [r4, #0]
 800372e:	68ae      	ldr	r6, [r5, #8]
 8003730:	4926      	ldr	r1, [pc, #152]	@ (80037cc <HAL_ADC_Init+0x100>)
 8003732:	4031      	ands	r1, r6
 8003734:	4311      	orrs	r1, r2
 8003736:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003738:	68a1      	ldr	r1, [r4, #8]
 800373a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800373e:	d001      	beq.n	8003744 <HAL_ADC_Init+0x78>
 8003740:	2901      	cmp	r1, #1
 8003742:	d102      	bne.n	800374a <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003744:	6923      	ldr	r3, [r4, #16]
 8003746:	3b01      	subs	r3, #1
 8003748:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800374a:	6825      	ldr	r5, [r4, #0]
 800374c:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800374e:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8003752:	430b      	orrs	r3, r1
 8003754:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	6899      	ldr	r1, [r3, #8]
 800375a:	4b1d      	ldr	r3, [pc, #116]	@ (80037d0 <HAL_ADC_Init+0x104>)
 800375c:	400b      	ands	r3, r1
 800375e:	429a      	cmp	r2, r3
 8003760:	d022      	beq.n	80037a8 <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8003762:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003764:	f023 0312 	bic.w	r3, r3, #18
 8003768:	f043 0310 	orr.w	r3, r3, #16
 800376c:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8003776:	2001      	movs	r0, #1
 8003778:	e024      	b.n	80037c4 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 800377a:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800377c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8003780:	f7ff f94a 	bl	8002a18 <HAL_ADC_MspInit>
 8003784:	e7a9      	b.n	80036da <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003786:	b931      	cbnz	r1, 8003796 <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003788:	69a1      	ldr	r1, [r4, #24]
 800378a:	3901      	subs	r1, #1
 800378c:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8003790:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8003794:	e7c4      	b.n	8003720 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003796:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003798:	f041 0120 	orr.w	r1, r1, #32
 800379c:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80037a0:	f041 0101 	orr.w	r1, r1, #1
 80037a4:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80037a6:	e7bb      	b.n	8003720 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 80037a8:	2300      	movs	r3, #0
 80037aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80037ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80037ae:	f023 0303 	bic.w	r3, r3, #3
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037b8:	e004      	b.n	80037c4 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80037bc:	f043 0310 	orr.w	r3, r3, #16
 80037c0:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 80037c2:	2001      	movs	r0, #1
}
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80037c6:	2001      	movs	r0, #1
}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	ffe1f7fd 	.word	0xffe1f7fd
 80037d0:	ff1f0efe 	.word	0xff1f0efe

080037d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d8:	4907      	ldr	r1, [pc, #28]	@ (80037f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80037da:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037dc:	0203      	lsls	r3, r0, #8
 80037de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037e6:	0412      	lsls	r2, r2, #16
 80037e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80037f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037fe:	4b18      	ldr	r3, [pc, #96]	@ (8003860 <HAL_NVIC_SetPriority+0x64>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003806:	f1c3 0c07 	rsb	ip, r3, #7
 800380a:	f1bc 0f04 	cmp.w	ip, #4
 800380e:	bf28      	it	cs
 8003810:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003814:	f103 0e04 	add.w	lr, r3, #4
 8003818:	f1be 0f06 	cmp.w	lr, #6
 800381c:	bf8c      	ite	hi
 800381e:	3b03      	subhi	r3, #3
 8003820:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003822:	f04f 3eff 	mov.w	lr, #4294967295
 8003826:	fa0e fc0c 	lsl.w	ip, lr, ip
 800382a:	ea21 010c 	bic.w	r1, r1, ip
 800382e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003830:	fa0e fe03 	lsl.w	lr, lr, r3
 8003834:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800383a:	2800      	cmp	r0, #0
 800383c:	db09      	blt.n	8003852 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383e:	0109      	lsls	r1, r1, #4
 8003840:	b2c9      	uxtb	r1, r1
 8003842:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003846:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800384a:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800384e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003852:	f000 000f 	and.w	r0, r0, #15
 8003856:	0109      	lsls	r1, r1, #4
 8003858:	b2c9      	uxtb	r1, r1
 800385a:	4b02      	ldr	r3, [pc, #8]	@ (8003864 <HAL_NVIC_SetPriority+0x68>)
 800385c:	5419      	strb	r1, [r3, r0]
 800385e:	e7f6      	b.n	800384e <HAL_NVIC_SetPriority+0x52>
 8003860:	e000ed00 	.word	0xe000ed00
 8003864:	e000ed14 	.word	0xe000ed14

08003868 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003868:	2800      	cmp	r0, #0
 800386a:	db07      	blt.n	800387c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386c:	0941      	lsrs	r1, r0, #5
 800386e:	f000 001f 	and.w	r0, r0, #31
 8003872:	2301      	movs	r3, #1
 8003874:	4083      	lsls	r3, r0
 8003876:	4a02      	ldr	r2, [pc, #8]	@ (8003880 <HAL_NVIC_EnableIRQ+0x18>)
 8003878:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000e100 	.word	0xe000e100

08003884 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003884:	3801      	subs	r0, #1
 8003886:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800388a:	d20b      	bcs.n	80038a4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003890:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003892:	4a05      	ldr	r2, [pc, #20]	@ (80038a8 <HAL_SYSTICK_Config+0x24>)
 8003894:	21f0      	movs	r1, #240	@ 0xf0
 8003896:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800389a:	2000      	movs	r0, #0
 800389c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389e:	2207      	movs	r2, #7
 80038a0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80038a4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80038ac:	b360      	cbz	r0, 8003908 <HAL_DMA_Init+0x5c>
{
 80038ae:	b410      	push	{r4}
 80038b0:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038b2:	6801      	ldr	r1, [r0, #0]
 80038b4:	4b15      	ldr	r3, [pc, #84]	@ (800390c <HAL_DMA_Init+0x60>)
 80038b6:	440b      	add	r3, r1
 80038b8:	4815      	ldr	r0, [pc, #84]	@ (8003910 <HAL_DMA_Init+0x64>)
 80038ba:	fba0 0303 	umull	r0, r3, r0, r3
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <HAL_DMA_Init+0x68>)
 80038c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038c8:	2302      	movs	r3, #2
 80038ca:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038ce:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038d0:	f420 507f 	bic.w	r0, r0, #16320	@ 0x3fc0
 80038d4:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038d8:	6853      	ldr	r3, [r2, #4]
 80038da:	6894      	ldr	r4, [r2, #8]
 80038dc:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038de:	68d4      	ldr	r4, [r2, #12]
 80038e0:	4323      	orrs	r3, r4
 80038e2:	6914      	ldr	r4, [r2, #16]
 80038e4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e6:	6954      	ldr	r4, [r2, #20]
 80038e8:	4323      	orrs	r3, r4
 80038ea:	6994      	ldr	r4, [r2, #24]
 80038ec:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ee:	69d4      	ldr	r4, [r2, #28]
 80038f0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80038f2:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038f4:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f6:	2000      	movs	r0, #0
 80038f8:	6390      	str	r0, [r2, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003900:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8003904:	bc10      	pop	{r4}
 8003906:	4770      	bx	lr
    return HAL_ERROR;
 8003908:	2001      	movs	r0, #1
}
 800390a:	4770      	bx	lr
 800390c:	bffdfff8 	.word	0xbffdfff8
 8003910:	cccccccd 	.word	0xcccccccd
 8003914:	40020000 	.word	0x40020000

08003918 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003918:	f890 c020 	ldrb.w	ip, [r0, #32]
 800391c:	f1bc 0f01 	cmp.w	ip, #1
 8003920:	d047      	beq.n	80039b2 <HAL_DMA_Start_IT+0x9a>
 8003922:	f04f 0c01 	mov.w	ip, #1
 8003926:	f880 c020 	strb.w	ip, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800392a:	f890 c021 	ldrb.w	ip, [r0, #33]	@ 0x21
 800392e:	fa5f fc8c 	uxtb.w	ip, ip
 8003932:	f1bc 0f01 	cmp.w	ip, #1
 8003936:	d004      	beq.n	8003942 <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003938:	2300      	movs	r3, #0
 800393a:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800393e:	2002      	movs	r0, #2
 8003940:	4770      	bx	lr
{
 8003942:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003944:	2402      	movs	r4, #2
 8003946:	f880 4021 	strb.w	r4, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394a:	2400      	movs	r4, #0
 800394c:	6384      	str	r4, [r0, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 800394e:	6805      	ldr	r5, [r0, #0]
 8003950:	682c      	ldr	r4, [r5, #0]
 8003952:	f024 0401 	bic.w	r4, r4, #1
 8003956:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003958:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800395a:	2401      	movs	r4, #1
 800395c:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 800395e:	40b4      	lsls	r4, r6
 8003960:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003962:	6804      	ldr	r4, [r0, #0]
 8003964:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003966:	6843      	ldr	r3, [r0, #4]
 8003968:	2b10      	cmp	r3, #16
 800396a:	d012      	beq.n	8003992 <HAL_DMA_Start_IT+0x7a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800396c:	6803      	ldr	r3, [r0, #0]
 800396e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003970:	6803      	ldr	r3, [r0, #0]
 8003972:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8003974:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003976:	b18b      	cbz	r3, 800399c <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003978:	6802      	ldr	r2, [r0, #0]
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	f043 030e 	orr.w	r3, r3, #14
 8003980:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003982:	6802      	ldr	r2, [r0, #0]
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2000      	movs	r0, #0
}
 800398e:	bc70      	pop	{r4, r5, r6}
 8003990:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003992:	6803      	ldr	r3, [r0, #0]
 8003994:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003996:	6803      	ldr	r3, [r0, #0]
 8003998:	60d9      	str	r1, [r3, #12]
 800399a:	e7eb      	b.n	8003974 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800399c:	6802      	ldr	r2, [r0, #0]
 800399e:	6813      	ldr	r3, [r2, #0]
 80039a0:	f023 0304 	bic.w	r3, r3, #4
 80039a4:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039a6:	6802      	ldr	r2, [r0, #0]
 80039a8:	6813      	ldr	r3, [r2, #0]
 80039aa:	f043 030a 	orr.w	r3, r3, #10
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e7e7      	b.n	8003982 <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 80039b2:	2002      	movs	r0, #2
}
 80039b4:	4770      	bx	lr

080039b6 <HAL_DMA_Abort>:
{
 80039b6:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b8:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	2a02      	cmp	r2, #2
 80039c0:	d006      	beq.n	80039d0 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c2:	2204      	movs	r2, #4
 80039c4:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80039c6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2020 	strb.w	r2, [r3, #32]
}
 80039ce:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d0:	6801      	ldr	r1, [r0, #0]
 80039d2:	680a      	ldr	r2, [r1, #0]
 80039d4:	f022 020e 	bic.w	r2, r2, #14
 80039d8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80039da:	6801      	ldr	r1, [r0, #0]
 80039dc:	680a      	ldr	r2, [r1, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039e4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80039e6:	2101      	movs	r1, #1
 80039e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ea:	fa01 f202 	lsl.w	r2, r1, r2
 80039ee:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80039f0:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 80039f4:	2000      	movs	r0, #0
 80039f6:	e7e7      	b.n	80039c8 <HAL_DMA_Abort+0x12>

080039f8 <HAL_DMA_Abort_IT>:
{  
 80039f8:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039fa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d003      	beq.n	8003a0c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a04:	2304      	movs	r3, #4
 8003a06:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8003a08:	2001      	movs	r0, #1
}
 8003a0a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0c:	6802      	ldr	r2, [r0, #0]
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	f023 030e 	bic.w	r3, r3, #14
 8003a14:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003a16:	6802      	ldr	r2, [r0, #0]
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a20:	6803      	ldr	r3, [r0, #0]
 8003a22:	4a19      	ldr	r2, [pc, #100]	@ (8003a88 <HAL_DMA_Abort_IT+0x90>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d013      	beq.n	8003a50 <HAL_DMA_Abort_IT+0x58>
 8003a28:	3214      	adds	r2, #20
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01e      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x74>
 8003a2e:	3214      	adds	r2, #20
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d01d      	beq.n	8003a70 <HAL_DMA_Abort_IT+0x78>
 8003a34:	3214      	adds	r2, #20
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01d      	beq.n	8003a76 <HAL_DMA_Abort_IT+0x7e>
 8003a3a:	3214      	adds	r2, #20
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d01d      	beq.n	8003a7c <HAL_DMA_Abort_IT+0x84>
 8003a40:	3214      	adds	r2, #20
 8003a42:	4293      	cmp	r3, r2
 8003a44:	bf14      	ite	ne
 8003a46:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8003a4a:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8003a4e:	e000      	b.n	8003a52 <HAL_DMA_Abort_IT+0x5a>
 8003a50:	2301      	movs	r3, #1
 8003a52:	4a0e      	ldr	r2, [pc, #56]	@ (8003a8c <HAL_DMA_Abort_IT+0x94>)
 8003a54:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003a62:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003a64:	b16b      	cbz	r3, 8003a82 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8003a66:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003a68:	2000      	movs	r0, #0
 8003a6a:	e7ce      	b.n	8003a0a <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	e7f0      	b.n	8003a52 <HAL_DMA_Abort_IT+0x5a>
 8003a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a74:	e7ed      	b.n	8003a52 <HAL_DMA_Abort_IT+0x5a>
 8003a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a7a:	e7ea      	b.n	8003a52 <HAL_DMA_Abort_IT+0x5a>
 8003a7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a80:	e7e7      	b.n	8003a52 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2000      	movs	r0, #0
 8003a84:	e7c1      	b.n	8003a0a <HAL_DMA_Abort_IT+0x12>
 8003a86:	bf00      	nop
 8003a88:	40020008 	.word	0x40020008
 8003a8c:	40020000 	.word	0x40020000

08003a90 <HAL_DMA_IRQHandler>:
{
 8003a90:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a92:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003a94:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003a96:	6804      	ldr	r4, [r0, #0]
 8003a98:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a9a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	408b      	lsls	r3, r1
 8003aa0:	4213      	tst	r3, r2
 8003aa2:	d034      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x7e>
 8003aa4:	f015 0f04 	tst.w	r5, #4
 8003aa8:	d031      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f013 0f20 	tst.w	r3, #32
 8003ab0:	d103      	bne.n	8003aba <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	f023 0304 	bic.w	r3, r3, #4
 8003ab8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003aba:	6803      	ldr	r3, [r0, #0]
 8003abc:	4a42      	ldr	r2, [pc, #264]	@ (8003bc8 <HAL_DMA_IRQHandler+0x138>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_DMA_IRQHandler+0x5a>
 8003ac2:	3214      	adds	r2, #20
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d017      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x68>
 8003ac8:	3214      	adds	r2, #20
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d016      	beq.n	8003afc <HAL_DMA_IRQHandler+0x6c>
 8003ace:	3214      	adds	r2, #20
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d016      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x72>
 8003ad4:	3214      	adds	r2, #20
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d016      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x78>
 8003ada:	3214      	adds	r2, #20
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bf14      	ite	ne
 8003ae0:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8003ae4:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_IRQHandler+0x5c>
 8003aea:	2304      	movs	r3, #4
 8003aec:	4a37      	ldr	r2, [pc, #220]	@ (8003bcc <HAL_DMA_IRQHandler+0x13c>)
 8003aee:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8003af0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003af2:	b103      	cbz	r3, 8003af6 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8003af4:	4798      	blx	r3
}
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003af8:	2340      	movs	r3, #64	@ 0x40
 8003afa:	e7f7      	b.n	8003aec <HAL_DMA_IRQHandler+0x5c>
 8003afc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b00:	e7f4      	b.n	8003aec <HAL_DMA_IRQHandler+0x5c>
 8003b02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b06:	e7f1      	b.n	8003aec <HAL_DMA_IRQHandler+0x5c>
 8003b08:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003b0c:	e7ee      	b.n	8003aec <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b0e:	2302      	movs	r3, #2
 8003b10:	408b      	lsls	r3, r1
 8003b12:	4213      	tst	r3, r2
 8003b14:	d03b      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xfe>
 8003b16:	f015 0f02 	tst.w	r5, #2
 8003b1a:	d038      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	f013 0f20 	tst.w	r3, #32
 8003b22:	d106      	bne.n	8003b32 <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	f023 030a 	bic.w	r3, r3, #10
 8003b2a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b32:	6803      	ldr	r3, [r0, #0]
 8003b34:	4a24      	ldr	r2, [pc, #144]	@ (8003bc8 <HAL_DMA_IRQHandler+0x138>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xd2>
 8003b3a:	3214      	adds	r2, #20
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d01b      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xe8>
 8003b40:	3214      	adds	r2, #20
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01a      	beq.n	8003b7c <HAL_DMA_IRQHandler+0xec>
 8003b46:	3214      	adds	r2, #20
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d01a      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xf2>
 8003b4c:	3214      	adds	r2, #20
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01a      	beq.n	8003b88 <HAL_DMA_IRQHandler+0xf8>
 8003b52:	3214      	adds	r2, #20
 8003b54:	4293      	cmp	r3, r2
 8003b56:	bf14      	ite	ne
 8003b58:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8003b5c:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8003b60:	e000      	b.n	8003b64 <HAL_DMA_IRQHandler+0xd4>
 8003b62:	2302      	movs	r3, #2
 8003b64:	4a19      	ldr	r2, [pc, #100]	@ (8003bcc <HAL_DMA_IRQHandler+0x13c>)
 8003b66:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003b6e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0c0      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8003b74:	4798      	blx	r3
 8003b76:	e7be      	b.n	8003af6 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e7f3      	b.n	8003b64 <HAL_DMA_IRQHandler+0xd4>
 8003b7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b80:	e7f0      	b.n	8003b64 <HAL_DMA_IRQHandler+0xd4>
 8003b82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b86:	e7ed      	b.n	8003b64 <HAL_DMA_IRQHandler+0xd4>
 8003b88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b8c:	e7ea      	b.n	8003b64 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b8e:	2308      	movs	r3, #8
 8003b90:	408b      	lsls	r3, r1
 8003b92:	4213      	tst	r3, r2
 8003b94:	d0af      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x66>
 8003b96:	f015 0f08 	tst.w	r5, #8
 8003b9a:	d0ac      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	f023 030e 	bic.w	r3, r3, #14
 8003ba2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ba4:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003baa:	fa03 f202 	lsl.w	r2, r3, r2
 8003bae:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bb0:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8003bbc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d099      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003bc2:	4798      	blx	r3
  return;
 8003bc4:	e797      	b.n	8003af6 <HAL_DMA_IRQHandler+0x66>
 8003bc6:	bf00      	nop
 8003bc8:	40020008 	.word	0x40020008
 8003bcc:	40020000 	.word	0x40020000

08003bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd6:	f8d1 9000 	ldr.w	r9, [r1]
 8003bda:	f1b9 0f00 	cmp.w	r9, #0
 8003bde:	f000 8126 	beq.w	8003e2e <HAL_GPIO_Init+0x25e>
 8003be2:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003be4:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003be6:	4d93      	ldr	r5, [pc, #588]	@ (8003e34 <HAL_GPIO_Init+0x264>)
      switch (GPIO_Init->Mode)
 8003be8:	4c93      	ldr	r4, [pc, #588]	@ (8003e38 <HAL_GPIO_Init+0x268>)
 8003bea:	4e94      	ldr	r6, [pc, #592]	@ (8003e3c <HAL_GPIO_Init+0x26c>)
 8003bec:	f8df e250 	ldr.w	lr, [pc, #592]	@ 8003e40 <HAL_GPIO_Init+0x270>
 8003bf0:	4694      	mov	ip, r2
 8003bf2:	e0be      	b.n	8003d72 <HAL_GPIO_Init+0x1a2>
 8003bf4:	45a1      	cmp	r9, r4
 8003bf6:	d00d      	beq.n	8003c14 <HAL_GPIO_Init+0x44>
 8003bf8:	d904      	bls.n	8003c04 <HAL_GPIO_Init+0x34>
 8003bfa:	45b1      	cmp	r9, r6
 8003bfc:	d00a      	beq.n	8003c14 <HAL_GPIO_Init+0x44>
 8003bfe:	45f1      	cmp	r9, lr
 8003c00:	d008      	beq.n	8003c14 <HAL_GPIO_Init+0x44>
 8003c02:	e01b      	b.n	8003c3c <HAL_GPIO_Init+0x6c>
 8003c04:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 8003e44 <HAL_GPIO_Init+0x274>
 8003c08:	45d1      	cmp	r9, sl
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x44>
 8003c0c:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 8003c10:	45d1      	cmp	r9, sl
 8003c12:	d10f      	bne.n	8003c34 <HAL_GPIO_Init+0x64>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c14:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003c18:	f1bc 0f00 	cmp.w	ip, #0
 8003c1c:	f000 80fb 	beq.w	8003e16 <HAL_GPIO_Init+0x246>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c20:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8003c24:	bf0c      	ite	eq
 8003c26:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8003c2a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c2e:	f04f 0c08 	mov.w	ip, #8
 8003c32:	e003      	b.n	8003c3c <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 8003c34:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 8003c38:	45d1      	cmp	r9, sl
 8003c3a:	d0eb      	beq.n	8003c14 <HAL_GPIO_Init+0x44>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c3c:	2fff      	cmp	r7, #255	@ 0xff
 8003c3e:	bf99      	ittee	ls
 8003c40:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c42:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c44:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c48:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c4c:	f8d9 8000 	ldr.w	r8, [r9]
 8003c50:	f04f 0b0f 	mov.w	fp, #15
 8003c54:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003c58:	ea28 080b 	bic.w	r8, r8, fp
 8003c5c:	fa0c fa0a 	lsl.w	sl, ip, sl
 8003c60:	ea48 080a 	orr.w	r8, r8, sl
 8003c64:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c68:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003c6c:	f018 5f80 	tst.w	r8, #268435456	@ 0x10000000
 8003c70:	d078      	beq.n	8003d64 <HAL_GPIO_Init+0x194>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c72:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8003c76:	f048 0801 	orr.w	r8, r8, #1
 8003c7a:	f8c5 8018 	str.w	r8, [r5, #24]
 8003c7e:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8003c82:	f008 0801 	and.w	r8, r8, #1
 8003c86:	f8cd 8004 	str.w	r8, [sp, #4]
 8003c8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003c8e:	f023 0803 	bic.w	r8, r3, #3
 8003c92:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 8003c96:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
 8003c9a:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c9e:	f003 0b03 	and.w	fp, r3, #3
 8003ca2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003ca6:	f04f 090f 	mov.w	r9, #15
 8003caa:	fa09 f90b 	lsl.w	r9, r9, fp
 8003cae:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cb2:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 8003e48 <HAL_GPIO_Init+0x278>
 8003cb6:	4548      	cmp	r0, r9
 8003cb8:	f000 80b0 	beq.w	8003e1c <HAL_GPIO_Init+0x24c>
 8003cbc:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8003cc0:	4548      	cmp	r0, r9
 8003cc2:	f000 80ae 	beq.w	8003e22 <HAL_GPIO_Init+0x252>
 8003cc6:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8003cca:	4548      	cmp	r0, r9
 8003ccc:	f000 80ac 	beq.w	8003e28 <HAL_GPIO_Init+0x258>
 8003cd0:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8003cd4:	4548      	cmp	r0, r9
 8003cd6:	bf14      	ite	ne
 8003cd8:	f04f 0904 	movne.w	r9, #4
 8003cdc:	f04f 0903 	moveq.w	r9, #3
 8003ce0:	fa09 f90b 	lsl.w	r9, r9, fp
 8003ce4:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8003ce8:	f8c8 9008 	str.w	r9, [r8, #8]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cec:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003cf0:	f418 1f80 	tst.w	r8, #1048576	@ 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cf4:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 8003e4c <HAL_GPIO_Init+0x27c>
 8003cf8:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8003cfc:	bf14      	ite	ne
 8003cfe:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d02:	ea28 0807 	biceq.w	r8, r8, r7
 8003d06:	f8c9 8008 	str.w	r8, [r9, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d0a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003d0e:	f418 1f00 	tst.w	r8, #2097152	@ 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d12:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8003e4c <HAL_GPIO_Init+0x27c>
 8003d16:	f8d9 800c 	ldr.w	r8, [r9, #12]
 8003d1a:	bf14      	ite	ne
 8003d1c:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d20:	ea28 0807 	biceq.w	r8, r8, r7
 8003d24:	f8c9 800c 	str.w	r8, [r9, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d28:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003d2c:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d30:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 8003e4c <HAL_GPIO_Init+0x27c>
 8003d34:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8003d38:	bf14      	ite	ne
 8003d3a:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d3e:	ea28 0807 	biceq.w	r8, r8, r7
 8003d42:	f8c9 8004 	str.w	r8, [r9, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d46:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003d4a:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d4e:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8003e4c <HAL_GPIO_Init+0x27c>
 8003d52:	f8d9 8000 	ldr.w	r8, [r9]
 8003d56:	bf14      	ite	ne
 8003d58:	ea48 0707 	orrne.w	r7, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d5c:	ea28 0707 	biceq.w	r7, r8, r7
 8003d60:	f8c9 7000 	str.w	r7, [r9]
        }
      }
    }

	position++;
 8003d64:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d66:	f8d1 9000 	ldr.w	r9, [r1]
 8003d6a:	3204      	adds	r2, #4
 8003d6c:	fa39 f703 	lsrs.w	r7, r9, r3
 8003d70:	d05d      	beq.n	8003e2e <HAL_GPIO_Init+0x25e>
    ioposition = (0x01uL << position);
 8003d72:	f04f 0801 	mov.w	r8, #1
 8003d76:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d7a:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8003d7e:	ea38 0909 	bics.w	r9, r8, r9
 8003d82:	d1ef      	bne.n	8003d64 <HAL_GPIO_Init+0x194>
      switch (GPIO_Init->Mode)
 8003d84:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8003d88:	f1b9 0f12 	cmp.w	r9, #18
 8003d8c:	f63f af32 	bhi.w	8003bf4 <HAL_GPIO_Init+0x24>
 8003d90:	f1b9 0f12 	cmp.w	r9, #18
 8003d94:	f63f af52 	bhi.w	8003c3c <HAL_GPIO_Init+0x6c>
 8003d98:	f20f 0a04 	addw	sl, pc, #4
 8003d9c:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8003da0:	08003c15 	.word	0x08003c15
 8003da4:	08003ded 	.word	0x08003ded
 8003da8:	08003dfd 	.word	0x08003dfd
 8003dac:	08003e11 	.word	0x08003e11
 8003db0:	08003c3d 	.word	0x08003c3d
 8003db4:	08003c3d 	.word	0x08003c3d
 8003db8:	08003c3d 	.word	0x08003c3d
 8003dbc:	08003c3d 	.word	0x08003c3d
 8003dc0:	08003c3d 	.word	0x08003c3d
 8003dc4:	08003c3d 	.word	0x08003c3d
 8003dc8:	08003c3d 	.word	0x08003c3d
 8003dcc:	08003c3d 	.word	0x08003c3d
 8003dd0:	08003c3d 	.word	0x08003c3d
 8003dd4:	08003c3d 	.word	0x08003c3d
 8003dd8:	08003c3d 	.word	0x08003c3d
 8003ddc:	08003c3d 	.word	0x08003c3d
 8003de0:	08003c3d 	.word	0x08003c3d
 8003de4:	08003df3 	.word	0x08003df3
 8003de8:	08003e07 	.word	0x08003e07
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003dec:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8003df0:	e724      	b.n	8003c3c <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003df2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003df6:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8003dfa:	e71f      	b.n	8003c3c <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dfc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003e00:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8003e04:	e71a      	b.n	8003c3c <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e06:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003e0a:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8003e0e:	e715      	b.n	8003c3c <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 8003e10:	f04f 0c00 	mov.w	ip, #0
 8003e14:	e712      	b.n	8003c3c <HAL_GPIO_Init+0x6c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e16:	f04f 0c04 	mov.w	ip, #4
 8003e1a:	e70f      	b.n	8003c3c <HAL_GPIO_Init+0x6c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e1c:	f04f 0900 	mov.w	r9, #0
 8003e20:	e75e      	b.n	8003ce0 <HAL_GPIO_Init+0x110>
 8003e22:	f04f 0901 	mov.w	r9, #1
 8003e26:	e75b      	b.n	8003ce0 <HAL_GPIO_Init+0x110>
 8003e28:	f04f 0902 	mov.w	r9, #2
 8003e2c:	e758      	b.n	8003ce0 <HAL_GPIO_Init+0x110>
  }
}
 8003e2e:	b003      	add	sp, #12
 8003e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	10220000 	.word	0x10220000
 8003e3c:	10310000 	.word	0x10310000
 8003e40:	10320000 	.word	0x10320000
 8003e44:	10120000 	.word	0x10120000
 8003e48:	40010800 	.word	0x40010800
 8003e4c:	40010400 	.word	0x40010400

08003e50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e50:	6883      	ldr	r3, [r0, #8]
 8003e52:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003e54:	bf14      	ite	ne
 8003e56:	2001      	movne	r0, #1
 8003e58:	2000      	moveq	r0, #0
 8003e5a:	4770      	bx	lr

08003e5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e5c:	b10a      	cbz	r2, 8003e62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e5e:	6101      	str	r1, [r0, #16]
 8003e60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e62:	0409      	lsls	r1, r1, #16
 8003e64:	6101      	str	r1, [r0, #16]
  }
}
 8003e66:	4770      	bx	lr

08003e68 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_GPIO_EXTI_IRQHandler>:
{
 8003e6c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e6e:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	4203      	tst	r3, r0
 8003e74:	d100      	bne.n	8003e78 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8003e76:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e78:	4b02      	ldr	r3, [pc, #8]	@ (8003e84 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003e7a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e7c:	f7ff fff4 	bl	8003e68 <HAL_GPIO_EXTI_Callback>
}
 8003e80:	e7f9      	b.n	8003e76 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003e82:	bf00      	nop
 8003e84:	40010400 	.word	0x40010400

08003e88 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e88:	6803      	ldr	r3, [r0, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003e90:	d101      	bne.n	8003e96 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8003e92:	2000      	movs	r0, #0
}
 8003e94:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e9a:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eaa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003eac:	f042 0204 	orr.w	r2, r2, #4
 8003eb0:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8003eb2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8003eb6:	2001      	movs	r0, #1
 8003eb8:	4770      	bx	lr

08003eba <I2C_WaitOnFlagUntilTimeout>:
{
 8003eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ebe:	4605      	mov	r5, r0
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	4616      	mov	r6, r2
 8003ec4:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec6:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8003eca:	f1b8 0f01 	cmp.w	r8, #1
 8003ece:	682b      	ldr	r3, [r5, #0]
 8003ed0:	bf0c      	ite	eq
 8003ed2:	695b      	ldreq	r3, [r3, #20]
 8003ed4:	699b      	ldrne	r3, [r3, #24]
 8003ed6:	ea24 0c03 	bic.w	ip, r4, r3
 8003eda:	fa1f fc8c 	uxth.w	ip, ip
 8003ede:	fabc fc8c 	clz	ip, ip
 8003ee2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003ee6:	4566      	cmp	r6, ip
 8003ee8:	d127      	bne.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 8003eea:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003eee:	d0ec      	beq.n	8003eca <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef0:	f7ff f8ea 	bl	80030c8 <HAL_GetTick>
 8003ef4:	9b06      	ldr	r3, [sp, #24]
 8003ef6:	1ac0      	subs	r0, r0, r3
 8003ef8:	42b8      	cmp	r0, r7
 8003efa:	d801      	bhi.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0x46>
 8003efc:	2f00      	cmp	r7, #0
 8003efe:	d1e4      	bne.n	8003eca <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f00:	f1b8 0f01 	cmp.w	r8, #1
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	bf0c      	ite	eq
 8003f08:	695b      	ldreq	r3, [r3, #20]
 8003f0a:	699b      	ldrne	r3, [r3, #24]
 8003f0c:	ea24 0303 	bic.w	r3, r4, r3
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	429e      	cmp	r6, r3
 8003f1a:	d1d6      	bne.n	8003eca <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f20:	2220      	movs	r2, #32
 8003f22:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f26:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f2a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8003f2c:	f042 0220 	orr.w	r2, r2, #32
 8003f30:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003f32:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8003f36:	2001      	movs	r0, #1
 8003f38:	e000      	b.n	8003f3c <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 8003f3a:	2000      	movs	r0, #0
}
 8003f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f44:	4605      	mov	r5, r0
 8003f46:	460e      	mov	r6, r1
 8003f48:	4617      	mov	r7, r2
 8003f4a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f4c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8003f50:	f1b8 0f01 	cmp.w	r8, #1
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	bf0c      	ite	eq
 8003f58:	695c      	ldreq	r4, [r3, #20]
 8003f5a:	699c      	ldrne	r4, [r3, #24]
 8003f5c:	ea26 0404 	bic.w	r4, r6, r4
 8003f60:	b2a4      	uxth	r4, r4
 8003f62:	3c00      	subs	r4, #0
 8003f64:	bf18      	it	ne
 8003f66:	2401      	movne	r4, #1
 8003f68:	2c00      	cmp	r4, #0
 8003f6a:	d044      	beq.n	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003f74:	d127      	bne.n	8003fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003f7a:	d0e9      	beq.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7c:	f7ff f8a4 	bl	80030c8 <HAL_GetTick>
 8003f80:	eba0 0009 	sub.w	r0, r0, r9
 8003f84:	42b8      	cmp	r0, r7
 8003f86:	d801      	bhi.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 8003f88:	2f00      	cmp	r7, #0
 8003f8a:	d1e1      	bne.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f8c:	f1b8 0f01 	cmp.w	r8, #1
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	bf0c      	ite	eq
 8003f94:	695b      	ldreq	r3, [r3, #20]
 8003f96:	699b      	ldrne	r3, [r3, #24]
 8003f98:	ea26 0303 	bic.w	r3, r6, r3
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b00      	subs	r3, #0
 8003fa0:	bf18      	it	ne
 8003fa2:	2301      	movne	r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0d3      	beq.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fac:	2220      	movs	r2, #32
 8003fae:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb2:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb6:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8003fb8:	f042 0220 	orr.w	r2, r2, #32
 8003fbc:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003fbe:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8003fc2:	2001      	movs	r0, #1
 8003fc4:	e015      	b.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fcc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fd4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe0:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fe4:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8003fe6:	f042 0204 	orr.w	r2, r2, #4
 8003fea:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8003fec:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8003ff0:	2001      	movs	r0, #1
}
 8003ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e7fb      	b.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

08003ffa <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003ffa:	b570      	push	{r4, r5, r6, lr}
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	460d      	mov	r5, r1
 8004000:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800400a:	d121      	bne.n	8004050 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800400c:	4620      	mov	r0, r4
 800400e:	f7ff ff3b 	bl	8003e88 <I2C_IsAcknowledgeFailed>
 8004012:	b9f8      	cbnz	r0, 8004054 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8004014:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004018:	d0f3      	beq.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7ff f855 	bl	80030c8 <HAL_GetTick>
 800401e:	1b80      	subs	r0, r0, r6
 8004020:	42a8      	cmp	r0, r5
 8004022:	d801      	bhi.n	8004028 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004024:	2d00      	cmp	r5, #0
 8004026:	d1ec      	bne.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004030:	d1e7      	bne.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004032:	2300      	movs	r3, #0
 8004034:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004036:	2220      	movs	r2, #32
 8004038:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004042:	f042 0220 	orr.w	r2, r2, #32
 8004046:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8004048:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800404c:	2001      	movs	r0, #1
 800404e:	e000      	b.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8004050:	2000      	movs	r0, #0
}
 8004052:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004054:	2001      	movs	r0, #1
 8004056:	e7fc      	b.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08004058 <I2C_RequestMemoryWrite>:
{
 8004058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800405c:	b085      	sub	sp, #20
 800405e:	4604      	mov	r4, r0
 8004060:	460d      	mov	r5, r1
 8004062:	4691      	mov	r9, r2
 8004064:	461f      	mov	r7, r3
 8004066:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800406a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800406c:	6803      	ldr	r3, [r0, #0]
 800406e:	6819      	ldr	r1, [r3, #0]
 8004070:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8004074:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004076:	9600      	str	r6, [sp, #0]
 8004078:	4643      	mov	r3, r8
 800407a:	2200      	movs	r2, #0
 800407c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004080:	f7ff ff1b 	bl	8003eba <I2C_WaitOnFlagUntilTimeout>
 8004084:	b970      	cbnz	r0, 80040a4 <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 800408c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800408e:	4633      	mov	r3, r6
 8004090:	4642      	mov	r2, r8
 8004092:	4928      	ldr	r1, [pc, #160]	@ (8004134 <I2C_RequestMemoryWrite+0xdc>)
 8004094:	4620      	mov	r0, r4
 8004096:	f7ff ff53 	bl	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800409a:	b168      	cbz	r0, 80040b8 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 800409c:	2001      	movs	r0, #1
}
 800409e:	b005      	add	sp, #20
 80040a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80040ac:	d040      	beq.n	8004130 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040b2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80040b4:	2003      	movs	r0, #3
 80040b6:	e7f2      	b.n	800409e <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b8:	2300      	movs	r3, #0
 80040ba:	9303      	str	r3, [sp, #12]
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	9203      	str	r2, [sp, #12]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	9303      	str	r3, [sp, #12]
 80040c6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c8:	4632      	mov	r2, r6
 80040ca:	4641      	mov	r1, r8
 80040cc:	4620      	mov	r0, r4
 80040ce:	f7ff ff94 	bl	8003ffa <I2C_WaitOnTXEFlagUntilTimeout>
 80040d2:	b930      	cbnz	r0, 80040e2 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040d4:	2f01      	cmp	r7, #1
 80040d6:	d110      	bne.n	80040fa <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	fa5f f689 	uxtb.w	r6, r9
 80040de:	611e      	str	r6, [r3, #16]
 80040e0:	e7dd      	b.n	800409e <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d001      	beq.n	80040ec <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80040e8:	2001      	movs	r0, #1
 80040ea:	e7d8      	b.n	800409e <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	6813      	ldr	r3, [r2, #0]
 80040f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040f4:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80040f6:	2001      	movs	r0, #1
 80040f8:	e7d1      	b.n	800409e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8004100:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004102:	4632      	mov	r2, r6
 8004104:	4641      	mov	r1, r8
 8004106:	4620      	mov	r0, r4
 8004108:	f7ff ff77 	bl	8003ffa <I2C_WaitOnTXEFlagUntilTimeout>
 800410c:	b920      	cbnz	r0, 8004118 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	fa5f f689 	uxtb.w	r6, r9
 8004114:	611e      	str	r6, [r3, #16]
 8004116:	e7c2      	b.n	800409e <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004118:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800411a:	2b04      	cmp	r3, #4
 800411c:	d001      	beq.n	8004122 <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 800411e:	2001      	movs	r0, #1
 8004120:	e7bd      	b.n	800409e <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004122:	6822      	ldr	r2, [r4, #0]
 8004124:	6813      	ldr	r3, [r2, #0]
 8004126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800412a:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800412c:	2001      	movs	r0, #1
 800412e:	e7b6      	b.n	800409e <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8004130:	2003      	movs	r0, #3
 8004132:	e7b4      	b.n	800409e <I2C_RequestMemoryWrite+0x46>
 8004134:	00010002 	.word	0x00010002

08004138 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4604      	mov	r4, r0
 800413c:	460d      	mov	r5, r1
 800413e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f013 0f04 	tst.w	r3, #4
 8004148:	d121      	bne.n	800418e <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff fe9c 	bl	8003e88 <I2C_IsAcknowledgeFailed>
 8004150:	b9f8      	cbnz	r0, 8004192 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8004152:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004156:	d0f3      	beq.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004158:	f7fe ffb6 	bl	80030c8 <HAL_GetTick>
 800415c:	1b80      	subs	r0, r0, r6
 800415e:	42a8      	cmp	r0, r5
 8004160:	d801      	bhi.n	8004166 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004162:	2d00      	cmp	r5, #0
 8004164:	d1ec      	bne.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f013 0f04 	tst.w	r3, #4
 800416e:	d1e7      	bne.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004170:	2300      	movs	r3, #0
 8004172:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004174:	2220      	movs	r2, #32
 8004176:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800417a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800417e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004180:	f042 0220 	orr.w	r2, r2, #32
 8004184:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8004186:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800418a:	2001      	movs	r0, #1
 800418c:	e000      	b.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 800418e:	2000      	movs	r0, #0
}
 8004190:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004192:	2001      	movs	r0, #1
 8004194:	e7fc      	b.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
	...

08004198 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004198:	2800      	cmp	r0, #0
 800419a:	f000 80b1 	beq.w	8004300 <HAL_I2C_Init+0x168>
{
 800419e:	b538      	push	{r3, r4, r5, lr}
 80041a0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041a2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d074      	beq.n	8004294 <HAL_I2C_Init+0xfc>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80041aa:	2324      	movs	r3, #36	@ 0x24
 80041ac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80041b0:	6822      	ldr	r2, [r4, #0]
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	6813      	ldr	r3, [r2, #0]
 80041be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	6813      	ldr	r3, [r2, #0]
 80041c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041cc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041ce:	f000 fc53 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041d2:	6862      	ldr	r2, [r4, #4]
 80041d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004308 <HAL_I2C_Init+0x170>)
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d861      	bhi.n	800429e <HAL_I2C_Init+0x106>
 80041da:	4b4c      	ldr	r3, [pc, #304]	@ (800430c <HAL_I2C_Init+0x174>)
 80041dc:	4298      	cmp	r0, r3
 80041de:	f240 8091 	bls.w	8004304 <HAL_I2C_Init+0x16c>
  freqrange = I2C_FREQRANGE(pclk1);
 80041e2:	494b      	ldr	r1, [pc, #300]	@ (8004310 <HAL_I2C_Init+0x178>)
 80041e4:	fba1 3100 	umull	r3, r1, r1, r0
 80041e8:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ea:	6825      	ldr	r5, [r4, #0]
 80041ec:	686a      	ldr	r2, [r5, #4]
 80041ee:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80041f2:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80041f6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041f8:	6821      	ldr	r1, [r4, #0]
 80041fa:	6a0a      	ldr	r2, [r1, #32]
 80041fc:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004200:	4d41      	ldr	r5, [pc, #260]	@ (8004308 <HAL_I2C_Init+0x170>)
 8004202:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8004206:	45ac      	cmp	ip, r5
 8004208:	d84e      	bhi.n	80042a8 <HAL_I2C_Init+0x110>
 800420a:	3301      	adds	r3, #1
 800420c:	4313      	orrs	r3, r2
 800420e:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004210:	6821      	ldr	r1, [r4, #0]
 8004212:	69ca      	ldr	r2, [r1, #28]
 8004214:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8004218:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800421c:	6865      	ldr	r5, [r4, #4]
 800421e:	4b3a      	ldr	r3, [pc, #232]	@ (8004308 <HAL_I2C_Init+0x170>)
 8004220:	429d      	cmp	r5, r3
 8004222:	d84b      	bhi.n	80042bc <HAL_I2C_Init+0x124>
 8004224:	1e43      	subs	r3, r0, #1
 8004226:	006d      	lsls	r5, r5, #1
 8004228:	fbb3 f3f5 	udiv	r3, r3, r5
 800422c:	3301      	adds	r3, #1
 800422e:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004232:	4203      	tst	r3, r0
 8004234:	d05e      	beq.n	80042f4 <HAL_I2C_Init+0x15c>
 8004236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423a:	431a      	orrs	r2, r3
 800423c:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800423e:	6821      	ldr	r1, [r4, #0]
 8004240:	680a      	ldr	r2, [r1, #0]
 8004242:	69e3      	ldr	r3, [r4, #28]
 8004244:	6a20      	ldr	r0, [r4, #32]
 8004246:	4303      	orrs	r3, r0
 8004248:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004250:	6821      	ldr	r1, [r4, #0]
 8004252:	688a      	ldr	r2, [r1, #8]
 8004254:	6923      	ldr	r3, [r4, #16]
 8004256:	68e0      	ldr	r0, [r4, #12]
 8004258:	4303      	orrs	r3, r0
 800425a:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 800425e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004266:	6821      	ldr	r1, [r4, #0]
 8004268:	68ca      	ldr	r2, [r1, #12]
 800426a:	6963      	ldr	r3, [r4, #20]
 800426c:	69a0      	ldr	r0, [r4, #24]
 800426e:	4303      	orrs	r3, r0
 8004270:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004274:	4313      	orrs	r3, r2
 8004276:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004282:	2000      	movs	r0, #0
 8004284:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004286:	2320      	movs	r3, #32
 8004288:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800428c:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8004292:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004294:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004298:	f7fe fc3e 	bl	8002b18 <HAL_I2C_MspInit>
 800429c:	e785      	b.n	80041aa <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800429e:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <HAL_I2C_Init+0x17c>)
 80042a0:	4298      	cmp	r0, r3
 80042a2:	d89e      	bhi.n	80041e2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80042a4:	2001      	movs	r0, #1
 80042a6:	e7f4      	b.n	8004292 <HAL_I2C_Init+0xfa>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042a8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80042ac:	fb05 f303 	mul.w	r3, r5, r3
 80042b0:	4d19      	ldr	r5, [pc, #100]	@ (8004318 <HAL_I2C_Init+0x180>)
 80042b2:	fba5 5303 	umull	r5, r3, r5, r3
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	3301      	adds	r3, #1
 80042ba:	e7a7      	b.n	800420c <HAL_I2C_Init+0x74>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042bc:	68a3      	ldr	r3, [r4, #8]
 80042be:	b95b      	cbnz	r3, 80042d8 <HAL_I2C_Init+0x140>
 80042c0:	1e43      	subs	r3, r0, #1
 80042c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042c6:	fbb3 f3f5 	udiv	r3, r3, r5
 80042ca:	3301      	adds	r3, #1
 80042cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d0:	b193      	cbz	r3, 80042f8 <HAL_I2C_Init+0x160>
 80042d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042d6:	e7b0      	b.n	800423a <HAL_I2C_Init+0xa2>
 80042d8:	1e43      	subs	r3, r0, #1
 80042da:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80042de:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80042e2:	fbb3 f3f5 	udiv	r3, r3, r5
 80042e6:	3301      	adds	r3, #1
 80042e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ec:	b133      	cbz	r3, 80042fc <HAL_I2C_Init+0x164>
 80042ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042f2:	e7a2      	b.n	800423a <HAL_I2C_Init+0xa2>
 80042f4:	2304      	movs	r3, #4
 80042f6:	e7a0      	b.n	800423a <HAL_I2C_Init+0xa2>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e79e      	b.n	800423a <HAL_I2C_Init+0xa2>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e79c      	b.n	800423a <HAL_I2C_Init+0xa2>
    return HAL_ERROR;
 8004300:	2001      	movs	r0, #1
}
 8004302:	4770      	bx	lr
    return HAL_ERROR;
 8004304:	2001      	movs	r0, #1
 8004306:	e7c4      	b.n	8004292 <HAL_I2C_Init+0xfa>
 8004308:	000186a0 	.word	0x000186a0
 800430c:	001e847f 	.word	0x001e847f
 8004310:	431bde83 	.word	0x431bde83
 8004314:	003d08ff 	.word	0x003d08ff
 8004318:	10624dd3 	.word	0x10624dd3

0800431c <HAL_I2C_Mem_Write>:
{
 800431c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004320:	b083      	sub	sp, #12
 8004322:	4604      	mov	r4, r0
 8004324:	460f      	mov	r7, r1
 8004326:	4690      	mov	r8, r2
 8004328:	4699      	mov	r9, r3
 800432a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 800432c:	f7fe fecc 	bl	80030c8 <HAL_GetTick>
 8004330:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004332:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8004336:	b2c0      	uxtb	r0, r0
 8004338:	2820      	cmp	r0, #32
 800433a:	d003      	beq.n	8004344 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 800433c:	2002      	movs	r0, #2
}
 800433e:	b003      	add	sp, #12
 8004340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004344:	9500      	str	r5, [sp, #0]
 8004346:	2319      	movs	r3, #25
 8004348:	2201      	movs	r2, #1
 800434a:	494d      	ldr	r1, [pc, #308]	@ (8004480 <HAL_I2C_Mem_Write+0x164>)
 800434c:	4620      	mov	r0, r4
 800434e:	f7ff fdb4 	bl	8003eba <I2C_WaitOnFlagUntilTimeout>
 8004352:	2800      	cmp	r0, #0
 8004354:	f040 808d 	bne.w	8004472 <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8004358:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	f000 808a 	beq.w	8004476 <HAL_I2C_Mem_Write+0x15a>
 8004362:	2301      	movs	r3, #1
 8004364:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	f012 0f01 	tst.w	r2, #1
 8004370:	d103      	bne.n	800437a <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800437a:	6822      	ldr	r2, [r4, #0]
 800437c:	6813      	ldr	r3, [r2, #0]
 800437e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004382:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004384:	2321      	movs	r3, #33	@ 0x21
 8004386:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800438a:	2340      	movs	r3, #64	@ 0x40
 800438c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004390:	2300      	movs	r3, #0
 8004392:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8004394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004396:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004398:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800439c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800439e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80043a0:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a2:	4b38      	ldr	r3, [pc, #224]	@ (8004484 <HAL_I2C_Mem_Write+0x168>)
 80043a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043a6:	9501      	str	r5, [sp, #4]
 80043a8:	9600      	str	r6, [sp, #0]
 80043aa:	464b      	mov	r3, r9
 80043ac:	4642      	mov	r2, r8
 80043ae:	4639      	mov	r1, r7
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7ff fe51 	bl	8004058 <I2C_RequestMemoryWrite>
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d15f      	bne.n	800447a <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 80043ba:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80043bc:	b9d3      	cbnz	r3, 80043f4 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043be:	462a      	mov	r2, r5
 80043c0:	4631      	mov	r1, r6
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7ff feb8 	bl	8004138 <I2C_WaitOnBTFFlagUntilTimeout>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d044      	beq.n	8004456 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d03a      	beq.n	8004448 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 80043d2:	2001      	movs	r0, #1
 80043d4:	e7b3      	b.n	800433e <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d001      	beq.n	80043e0 <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 80043dc:	2001      	movs	r0, #1
 80043de:	e7ae      	b.n	800433e <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043e8:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80043ea:	2001      	movs	r0, #1
 80043ec:	e7a7      	b.n	800433e <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 80043ee:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0e4      	beq.n	80043be <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f4:	462a      	mov	r2, r5
 80043f6:	4631      	mov	r1, r6
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff fdfe 	bl	8003ffa <I2C_WaitOnTXEFlagUntilTimeout>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d1e9      	bne.n	80043d6 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004406:	7812      	ldrb	r2, [r2, #0]
 8004408:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800440a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004410:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004412:	3b01      	subs	r3, #1
 8004414:	b29b      	uxth	r3, r3
 8004416:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004418:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 800441a:	3901      	subs	r1, #1
 800441c:	b289      	uxth	r1, r1
 800441e:	8561      	strh	r1, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004420:	6822      	ldr	r2, [r4, #0]
 8004422:	6951      	ldr	r1, [r2, #20]
 8004424:	f011 0f04 	tst.w	r1, #4
 8004428:	d0e1      	beq.n	80043ee <HAL_I2C_Mem_Write+0xd2>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0c7      	beq.n	80043be <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800442e:	7843      	ldrb	r3, [r0, #1]
 8004430:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8004432:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004434:	3301      	adds	r3, #1
 8004436:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8004438:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800443e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004440:	3b01      	subs	r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8004446:	e7d2      	b.n	80043ee <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004450:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004452:	2001      	movs	r0, #1
 8004454:	e773      	b.n	800433e <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	6813      	ldr	r3, [r2, #0]
 800445a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800445e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004460:	2320      	movs	r3, #32
 8004462:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	2300      	movs	r3, #0
 8004468:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 800446c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8004470:	e765      	b.n	800433e <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8004472:	2002      	movs	r0, #2
 8004474:	e763      	b.n	800433e <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8004476:	2002      	movs	r0, #2
 8004478:	e761      	b.n	800433e <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800447a:	2001      	movs	r0, #1
 800447c:	e75f      	b.n	800433e <HAL_I2C_Mem_Write+0x22>
 800447e:	bf00      	nop
 8004480:	00100002 	.word	0x00100002
 8004484:	ffff0000 	.word	0xffff0000

08004488 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004488:	2800      	cmp	r0, #0
 800448a:	f000 8201 	beq.w	8004890 <HAL_RCC_OscConfig+0x408>
{
 800448e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004496:	6803      	ldr	r3, [r0, #0]
 8004498:	f013 0f01 	tst.w	r3, #1
 800449c:	d02c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800449e:	4b9f      	ldr	r3, [pc, #636]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d01d      	beq.n	80044e6 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044aa:	4b9c      	ldr	r3, [pc, #624]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d012      	beq.n	80044dc <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b6:	6863      	ldr	r3, [r4, #4]
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044bc:	d041      	beq.n	8004542 <HAL_RCC_OscConfig+0xba>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d155      	bne.n	800456e <HAL_RCC_OscConfig+0xe6>
 80044c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044c6:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e037      	b.n	800454c <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044dc:	4b8f      	ldr	r3, [pc, #572]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80044e4:	d0e7      	beq.n	80044b6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e6:	4b8d      	ldr	r3, [pc, #564]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80044ee:	d003      	beq.n	80044f8 <HAL_RCC_OscConfig+0x70>
 80044f0:	6863      	ldr	r3, [r4, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 81ce 	beq.w	8004894 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	f013 0f02 	tst.w	r3, #2
 80044fe:	d075      	beq.n	80045ec <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004500:	4b86      	ldr	r3, [pc, #536]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f013 0f0c 	tst.w	r3, #12
 8004508:	d05f      	beq.n	80045ca <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800450a:	4b84      	ldr	r3, [pc, #528]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b08      	cmp	r3, #8
 8004514:	d054      	beq.n	80045c0 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004516:	6923      	ldr	r3, [r4, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 808a 	beq.w	8004632 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800451e:	4b80      	ldr	r3, [pc, #512]	@ (8004720 <HAL_RCC_OscConfig+0x298>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fe fdd0 	bl	80030c8 <HAL_GetTick>
 8004528:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452a:	4e7c      	ldr	r6, [pc, #496]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 800452c:	6833      	ldr	r3, [r6, #0]
 800452e:	f013 0f02 	tst.w	r3, #2
 8004532:	d175      	bne.n	8004620 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004534:	f7fe fdc8 	bl	80030c8 <HAL_GetTick>
 8004538:	1b40      	subs	r0, r0, r5
 800453a:	2802      	cmp	r0, #2
 800453c:	d9f6      	bls.n	800452c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 800453e:	2003      	movs	r0, #3
 8004540:	e1ad      	b.n	800489e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004542:	4a76      	ldr	r2, [pc, #472]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 8004544:	6813      	ldr	r3, [r2, #0]
 8004546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	b343      	cbz	r3, 80045a2 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8004550:	f7fe fdba 	bl	80030c8 <HAL_GetTick>
 8004554:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	4e71      	ldr	r6, [pc, #452]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 8004558:	6833      	ldr	r3, [r6, #0]
 800455a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800455e:	d1cb      	bne.n	80044f8 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004560:	f7fe fdb2 	bl	80030c8 <HAL_GetTick>
 8004564:	1b40      	subs	r0, r0, r5
 8004566:	2864      	cmp	r0, #100	@ 0x64
 8004568:	d9f6      	bls.n	8004558 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800456a:	2003      	movs	r0, #3
 800456c:	e197      	b.n	800489e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004572:	d009      	beq.n	8004588 <HAL_RCC_OscConfig+0x100>
 8004574:	4b69      	ldr	r3, [pc, #420]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e7e1      	b.n	800454c <HAL_RCC_OscConfig+0xc4>
 8004588:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800458c:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	e7d4      	b.n	800454c <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80045a2:	f7fe fd91 	bl	80030c8 <HAL_GetTick>
 80045a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a8:	4e5c      	ldr	r6, [pc, #368]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 80045aa:	6833      	ldr	r3, [r6, #0]
 80045ac:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80045b0:	d0a2      	beq.n	80044f8 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b2:	f7fe fd89 	bl	80030c8 <HAL_GetTick>
 80045b6:	1b40      	subs	r0, r0, r5
 80045b8:	2864      	cmp	r0, #100	@ 0x64
 80045ba:	d9f6      	bls.n	80045aa <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80045bc:	2003      	movs	r0, #3
 80045be:	e16e      	b.n	800489e <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045c0:	4b56      	ldr	r3, [pc, #344]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80045c8:	d1a5      	bne.n	8004516 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	4b54      	ldr	r3, [pc, #336]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f013 0f02 	tst.w	r3, #2
 80045d2:	d003      	beq.n	80045dc <HAL_RCC_OscConfig+0x154>
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	f040 815e 	bne.w	8004898 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045dc:	4a4f      	ldr	r2, [pc, #316]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 80045de:	6813      	ldr	r3, [r2, #0]
 80045e0:	6961      	ldr	r1, [r4, #20]
 80045e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80045e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80045ea:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	f013 0f08 	tst.w	r3, #8
 80045f2:	d03d      	beq.n	8004670 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f4:	69a3      	ldr	r3, [r4, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d066      	beq.n	80046c8 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fa:	4b49      	ldr	r3, [pc, #292]	@ (8004720 <HAL_RCC_OscConfig+0x298>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004602:	f7fe fd61 	bl	80030c8 <HAL_GetTick>
 8004606:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004608:	4e44      	ldr	r6, [pc, #272]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 800460a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800460c:	f013 0f02 	tst.w	r3, #2
 8004610:	d121      	bne.n	8004656 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004612:	f7fe fd59 	bl	80030c8 <HAL_GetTick>
 8004616:	1b40      	subs	r0, r0, r5
 8004618:	2802      	cmp	r0, #2
 800461a:	d9f6      	bls.n	800460a <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 800461c:	2003      	movs	r0, #3
 800461e:	e13e      	b.n	800489e <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004620:	4a3e      	ldr	r2, [pc, #248]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 8004622:	6813      	ldr	r3, [r2, #0]
 8004624:	6961      	ldr	r1, [r4, #20]
 8004626:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800462a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	e7dc      	b.n	80045ec <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8004632:	4b3b      	ldr	r3, [pc, #236]	@ (8004720 <HAL_RCC_OscConfig+0x298>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004638:	f7fe fd46 	bl	80030c8 <HAL_GetTick>
 800463c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	4e37      	ldr	r6, [pc, #220]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 8004640:	6833      	ldr	r3, [r6, #0]
 8004642:	f013 0f02 	tst.w	r3, #2
 8004646:	d0d1      	beq.n	80045ec <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004648:	f7fe fd3e 	bl	80030c8 <HAL_GetTick>
 800464c:	1b40      	subs	r0, r0, r5
 800464e:	2802      	cmp	r0, #2
 8004650:	d9f6      	bls.n	8004640 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8004652:	2003      	movs	r0, #3
 8004654:	e123      	b.n	800489e <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004656:	4b33      	ldr	r3, [pc, #204]	@ (8004724 <HAL_RCC_OscConfig+0x29c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a33      	ldr	r2, [pc, #204]	@ (8004728 <HAL_RCC_OscConfig+0x2a0>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	0a5b      	lsrs	r3, r3, #9
 8004662:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004664:	bf00      	nop
  }
  while (Delay --);
 8004666:	9b01      	ldr	r3, [sp, #4]
 8004668:	1e5a      	subs	r2, r3, #1
 800466a:	9201      	str	r2, [sp, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f9      	bne.n	8004664 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	f013 0f04 	tst.w	r3, #4
 8004676:	f000 809b 	beq.w	80047b0 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467a:	4b28      	ldr	r3, [pc, #160]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004682:	d134      	bne.n	80046ee <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004684:	4b25      	ldr	r3, [pc, #148]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800468c:	61da      	str	r2, [r3, #28]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8004698:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	4b24      	ldr	r3, [pc, #144]	@ (800472c <HAL_RCC_OscConfig+0x2a4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80046a2:	d026      	beq.n	80046f2 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a4:	68e3      	ldr	r3, [r4, #12]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d042      	beq.n	8004730 <HAL_RCC_OscConfig+0x2a8>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d158      	bne.n	8004760 <HAL_RCC_OscConfig+0x2d8>
 80046ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046b2:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	621a      	str	r2, [r3, #32]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	f022 0204 	bic.w	r2, r2, #4
 80046c4:	621a      	str	r2, [r3, #32]
 80046c6:	e038      	b.n	800473a <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 80046c8:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <HAL_RCC_OscConfig+0x298>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80046d0:	f7fe fcfa 	bl	80030c8 <HAL_GetTick>
 80046d4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d6:	4e11      	ldr	r6, [pc, #68]	@ (800471c <HAL_RCC_OscConfig+0x294>)
 80046d8:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80046da:	f013 0f02 	tst.w	r3, #2
 80046de:	d0c7      	beq.n	8004670 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e0:	f7fe fcf2 	bl	80030c8 <HAL_GetTick>
 80046e4:	1b40      	subs	r0, r0, r5
 80046e6:	2802      	cmp	r0, #2
 80046e8:	d9f6      	bls.n	80046d8 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 80046ea:	2003      	movs	r0, #3
 80046ec:	e0d7      	b.n	800489e <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80046ee:	2500      	movs	r5, #0
 80046f0:	e7d3      	b.n	800469a <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f2:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <HAL_RCC_OscConfig+0x2a4>)
 80046f4:	6813      	ldr	r3, [r2, #0]
 80046f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046fa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80046fc:	f7fe fce4 	bl	80030c8 <HAL_GetTick>
 8004700:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4f0a      	ldr	r7, [pc, #40]	@ (800472c <HAL_RCC_OscConfig+0x2a4>)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800470a:	d1cb      	bne.n	80046a4 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470c:	f7fe fcdc 	bl	80030c8 <HAL_GetTick>
 8004710:	1b80      	subs	r0, r0, r6
 8004712:	2864      	cmp	r0, #100	@ 0x64
 8004714:	d9f6      	bls.n	8004704 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8004716:	2003      	movs	r0, #3
 8004718:	e0c1      	b.n	800489e <HAL_RCC_OscConfig+0x416>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	42420000 	.word	0x42420000
 8004724:	200000fc 	.word	0x200000fc
 8004728:	10624dd3 	.word	0x10624dd3
 800472c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004730:	4a5e      	ldr	r2, [pc, #376]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 8004732:	6a13      	ldr	r3, [r2, #32]
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800473a:	68e3      	ldr	r3, [r4, #12]
 800473c:	b333      	cbz	r3, 800478c <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 800473e:	f7fe fcc3 	bl	80030c8 <HAL_GetTick>
 8004742:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004744:	4f59      	ldr	r7, [pc, #356]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	f013 0f02 	tst.w	r3, #2
 8004750:	d12d      	bne.n	80047ae <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004752:	f7fe fcb9 	bl	80030c8 <HAL_GetTick>
 8004756:	1b80      	subs	r0, r0, r6
 8004758:	4540      	cmp	r0, r8
 800475a:	d9f6      	bls.n	800474a <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 800475c:	2003      	movs	r0, #3
 800475e:	e09e      	b.n	800489e <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004760:	2b05      	cmp	r3, #5
 8004762:	d009      	beq.n	8004778 <HAL_RCC_OscConfig+0x2f0>
 8004764:	4b51      	ldr	r3, [pc, #324]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 8004766:	6a1a      	ldr	r2, [r3, #32]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	621a      	str	r2, [r3, #32]
 800476e:	6a1a      	ldr	r2, [r3, #32]
 8004770:	f022 0204 	bic.w	r2, r2, #4
 8004774:	621a      	str	r2, [r3, #32]
 8004776:	e7e0      	b.n	800473a <HAL_RCC_OscConfig+0x2b2>
 8004778:	4b4c      	ldr	r3, [pc, #304]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	f042 0204 	orr.w	r2, r2, #4
 8004780:	621a      	str	r2, [r3, #32]
 8004782:	6a1a      	ldr	r2, [r3, #32]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	621a      	str	r2, [r3, #32]
 800478a:	e7d6      	b.n	800473a <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 800478c:	f7fe fc9c 	bl	80030c8 <HAL_GetTick>
 8004790:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004792:	4f46      	ldr	r7, [pc, #280]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f013 0f02 	tst.w	r3, #2
 800479e:	d006      	beq.n	80047ae <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a0:	f7fe fc92 	bl	80030c8 <HAL_GetTick>
 80047a4:	1b80      	subs	r0, r0, r6
 80047a6:	4540      	cmp	r0, r8
 80047a8:	d9f6      	bls.n	8004798 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80047aa:	2003      	movs	r0, #3
 80047ac:	e077      	b.n	800489e <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80047ae:	b9e5      	cbnz	r5, 80047ea <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b0:	69e3      	ldr	r3, [r4, #28]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d072      	beq.n	800489c <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047b6:	4a3d      	ldr	r2, [pc, #244]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 80047b8:	6852      	ldr	r2, [r2, #4]
 80047ba:	f002 020c 	and.w	r2, r2, #12
 80047be:	2a08      	cmp	r2, #8
 80047c0:	d056      	beq.n	8004870 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d017      	beq.n	80047f6 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b3a      	ldr	r3, [pc, #232]	@ (80048b0 <HAL_RCC_OscConfig+0x428>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80047cc:	f7fe fc7c 	bl	80030c8 <HAL_GetTick>
 80047d0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047d2:	4d36      	ldr	r5, [pc, #216]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80047da:	d047      	beq.n	800486c <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fe fc74 	bl	80030c8 <HAL_GetTick>
 80047e0:	1b00      	subs	r0, r0, r4
 80047e2:	2802      	cmp	r0, #2
 80047e4:	d9f6      	bls.n	80047d4 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80047e6:	2003      	movs	r0, #3
 80047e8:	e059      	b.n	800489e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ea:	4a30      	ldr	r2, [pc, #192]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 80047ec:	69d3      	ldr	r3, [r2, #28]
 80047ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	61d3      	str	r3, [r2, #28]
 80047f4:	e7dc      	b.n	80047b0 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80047f6:	4b2e      	ldr	r3, [pc, #184]	@ (80048b0 <HAL_RCC_OscConfig+0x428>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80047fc:	f7fe fc64 	bl	80030c8 <HAL_GetTick>
 8004800:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004802:	4e2a      	ldr	r6, [pc, #168]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 8004804:	6833      	ldr	r3, [r6, #0]
 8004806:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800480a:	d006      	beq.n	800481a <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fe fc5c 	bl	80030c8 <HAL_GetTick>
 8004810:	1b40      	subs	r0, r0, r5
 8004812:	2802      	cmp	r0, #2
 8004814:	d9f6      	bls.n	8004804 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8004816:	2003      	movs	r0, #3
 8004818:	e041      	b.n	800489e <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800481a:	6a23      	ldr	r3, [r4, #32]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004820:	d01a      	beq.n	8004858 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004822:	4922      	ldr	r1, [pc, #136]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 8004824:	684a      	ldr	r2, [r1, #4]
 8004826:	6a23      	ldr	r3, [r4, #32]
 8004828:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800482a:	4303      	orrs	r3, r0
 800482c:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8004834:	4b1e      	ldr	r3, [pc, #120]	@ (80048b0 <HAL_RCC_OscConfig+0x428>)
 8004836:	2201      	movs	r2, #1
 8004838:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800483a:	f7fe fc45 	bl	80030c8 <HAL_GetTick>
 800483e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004840:	4d1a      	ldr	r5, [pc, #104]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004848:	d10e      	bne.n	8004868 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484a:	f7fe fc3d 	bl	80030c8 <HAL_GetTick>
 800484e:	1b00      	subs	r0, r0, r4
 8004850:	2802      	cmp	r0, #2
 8004852:	d9f6      	bls.n	8004842 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8004854:	2003      	movs	r0, #3
 8004856:	e022      	b.n	800489e <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004858:	4a14      	ldr	r2, [pc, #80]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 800485a:	6853      	ldr	r3, [r2, #4]
 800485c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004860:	68a1      	ldr	r1, [r4, #8]
 8004862:	430b      	orrs	r3, r1
 8004864:	6053      	str	r3, [r2, #4]
 8004866:	e7dc      	b.n	8004822 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8004868:	2000      	movs	r0, #0
 800486a:	e018      	b.n	800489e <HAL_RCC_OscConfig+0x416>
 800486c:	2000      	movs	r0, #0
 800486e:	e016      	b.n	800489e <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004870:	2b01      	cmp	r3, #1
 8004872:	d017      	beq.n	80048a4 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8004874:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <HAL_RCC_OscConfig+0x424>)
 8004876:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004878:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 800487c:	6a22      	ldr	r2, [r4, #32]
 800487e:	4291      	cmp	r1, r2
 8004880:	d112      	bne.n	80048a8 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004882:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004886:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004888:	1a18      	subs	r0, r3, r0
 800488a:	bf18      	it	ne
 800488c:	2001      	movne	r0, #1
 800488e:	e006      	b.n	800489e <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8004890:	2001      	movs	r0, #1
}
 8004892:	4770      	bx	lr
        return HAL_ERROR;
 8004894:	2001      	movs	r0, #1
 8004896:	e002      	b.n	800489e <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8004898:	2001      	movs	r0, #1
 800489a:	e000      	b.n	800489e <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 800489c:	2000      	movs	r0, #0
}
 800489e:	b002      	add	sp, #8
 80048a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80048a4:	2001      	movs	r0, #1
 80048a6:	e7fa      	b.n	800489e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80048a8:	2001      	movs	r0, #1
 80048aa:	e7f8      	b.n	800489e <HAL_RCC_OscConfig+0x416>
 80048ac:	40021000 	.word	0x40021000
 80048b0:	42420000 	.word	0x42420000

080048b4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80048b4:	4b0f      	ldr	r3, [pc, #60]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x40>)
 80048b6:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80048b8:	f003 020c 	and.w	r2, r3, #12
 80048bc:	2a08      	cmp	r2, #8
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80048c0:	480d      	ldr	r0, [pc, #52]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80048c2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048c4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80048c8:	490c      	ldr	r1, [pc, #48]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x48>)
 80048ca:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048cc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80048d0:	d00b      	beq.n	80048ea <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048d2:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x40>)
 80048d4:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048d6:	4a08      	ldr	r2, [pc, #32]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x44>)
 80048d8:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048dc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80048e0:	4a07      	ldr	r2, [pc, #28]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x4c>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80048e8:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048ea:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x50>)
 80048ec:	fb03 f000 	mul.w	r0, r3, r0
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	007a1200 	.word	0x007a1200
 80048fc:	0800c19c 	.word	0x0800c19c
 8004900:	0800c198 	.word	0x0800c198
 8004904:	003d0900 	.word	0x003d0900

08004908 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004908:	2800      	cmp	r0, #0
 800490a:	f000 80a2 	beq.w	8004a52 <HAL_RCC_ClockConfig+0x14a>
{
 800490e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004912:	460d      	mov	r5, r1
 8004914:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004916:	4b53      	ldr	r3, [pc, #332]	@ (8004a64 <HAL_RCC_ClockConfig+0x15c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	428b      	cmp	r3, r1
 8004920:	d20b      	bcs.n	800493a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4a50      	ldr	r2, [pc, #320]	@ (8004a64 <HAL_RCC_ClockConfig+0x15c>)
 8004924:	6813      	ldr	r3, [r2, #0]
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	430b      	orrs	r3, r1
 800492c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	6813      	ldr	r3, [r2, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	428b      	cmp	r3, r1
 8004936:	f040 808e 	bne.w	8004a56 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	f013 0f02 	tst.w	r3, #2
 8004940:	d017      	beq.n	8004972 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004942:	f013 0f04 	tst.w	r3, #4
 8004946:	d004      	beq.n	8004952 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004948:	4a47      	ldr	r2, [pc, #284]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
 800494a:	6853      	ldr	r3, [r2, #4]
 800494c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004950:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	f013 0f08 	tst.w	r3, #8
 8004958:	d004      	beq.n	8004964 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800495a:	4a43      	ldr	r2, [pc, #268]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
 800495c:	6853      	ldr	r3, [r2, #4]
 800495e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004962:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004964:	4a40      	ldr	r2, [pc, #256]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
 8004966:	6853      	ldr	r3, [r2, #4]
 8004968:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800496c:	68a1      	ldr	r1, [r4, #8]
 800496e:	430b      	orrs	r3, r1
 8004970:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	f013 0f01 	tst.w	r3, #1
 8004978:	d031      	beq.n	80049de <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497a:	6862      	ldr	r2, [r4, #4]
 800497c:	2a01      	cmp	r2, #1
 800497e:	d020      	beq.n	80049c2 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004980:	2a02      	cmp	r2, #2
 8004982:	d025      	beq.n	80049d0 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	4b38      	ldr	r3, [pc, #224]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f013 0f02 	tst.w	r3, #2
 800498c:	d065      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800498e:	4936      	ldr	r1, [pc, #216]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
 8004990:	684b      	ldr	r3, [r1, #4]
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800499a:	f7fe fb95 	bl	80030c8 <HAL_GetTick>
 800499e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a0:	4f31      	ldr	r7, [pc, #196]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a2:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f003 030c 	and.w	r3, r3, #12
 80049ac:	6862      	ldr	r2, [r4, #4]
 80049ae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80049b2:	d014      	beq.n	80049de <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fe fb88 	bl	80030c8 <HAL_GetTick>
 80049b8:	1b80      	subs	r0, r0, r6
 80049ba:	4540      	cmp	r0, r8
 80049bc:	d9f3      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80049be:	2003      	movs	r0, #3
 80049c0:	e045      	b.n	8004a4e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c2:	4b29      	ldr	r3, [pc, #164]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80049ca:	d1e0      	bne.n	800498e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80049cc:	2001      	movs	r0, #1
 80049ce:	e03e      	b.n	8004a4e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d0:	4b25      	ldr	r3, [pc, #148]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80049d8:	d1d9      	bne.n	800498e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80049da:	2001      	movs	r0, #1
 80049dc:	e037      	b.n	8004a4e <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049de:	4b21      	ldr	r3, [pc, #132]	@ (8004a64 <HAL_RCC_ClockConfig+0x15c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	42ab      	cmp	r3, r5
 80049e8:	d90a      	bls.n	8004a00 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004a64 <HAL_RCC_ClockConfig+0x15c>)
 80049ec:	6813      	ldr	r3, [r2, #0]
 80049ee:	f023 0307 	bic.w	r3, r3, #7
 80049f2:	432b      	orrs	r3, r5
 80049f4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	42ab      	cmp	r3, r5
 80049fe:	d12e      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	f013 0f04 	tst.w	r3, #4
 8004a06:	d006      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a08:	4a17      	ldr	r2, [pc, #92]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
 8004a0a:	6853      	ldr	r3, [r2, #4]
 8004a0c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004a10:	68e1      	ldr	r1, [r4, #12]
 8004a12:	430b      	orrs	r3, r1
 8004a14:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	f013 0f08 	tst.w	r3, #8
 8004a1c:	d007      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a1e:	4a12      	ldr	r2, [pc, #72]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
 8004a20:	6853      	ldr	r3, [r2, #4]
 8004a22:	6921      	ldr	r1, [r4, #16]
 8004a24:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004a28:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a2c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a2e:	f7ff ff41 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 8004a32:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <HAL_RCC_ClockConfig+0x160>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a6c <HAL_RCC_ClockConfig+0x164>)
 8004a3c:	5cd3      	ldrb	r3, [r2, r3]
 8004a3e:	40d8      	lsrs	r0, r3
 8004a40:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <HAL_RCC_ClockConfig+0x168>)
 8004a42:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004a44:	4b0b      	ldr	r3, [pc, #44]	@ (8004a74 <HAL_RCC_ClockConfig+0x16c>)
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	f7fe fafa 	bl	8003040 <HAL_InitTick>
  return HAL_OK;
 8004a4c:	2000      	movs	r0, #0
}
 8004a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004a52:	2001      	movs	r0, #1
}
 8004a54:	4770      	bx	lr
    return HAL_ERROR;
 8004a56:	2001      	movs	r0, #1
 8004a58:	e7f9      	b.n	8004a4e <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	e7f7      	b.n	8004a4e <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8004a5e:	2001      	movs	r0, #1
 8004a60:	e7f5      	b.n	8004a4e <HAL_RCC_ClockConfig+0x146>
 8004a62:	bf00      	nop
 8004a64:	40022000 	.word	0x40022000
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	0800c188 	.word	0x0800c188
 8004a70:	200000fc 	.word	0x200000fc
 8004a74:	20000104 	.word	0x20000104

08004a78 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a78:	4b04      	ldr	r3, [pc, #16]	@ (8004a8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004a80:	4a03      	ldr	r2, [pc, #12]	@ (8004a90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004a82:	5cd3      	ldrb	r3, [r2, r3]
 8004a84:	4a03      	ldr	r2, [pc, #12]	@ (8004a94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004a86:	6810      	ldr	r0, [r2, #0]
}
 8004a88:	40d8      	lsrs	r0, r3
 8004a8a:	4770      	bx	lr
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	0800c180 	.word	0x0800c180
 8004a94:	200000fc 	.word	0x200000fc

08004a98 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a98:	4b04      	ldr	r3, [pc, #16]	@ (8004aac <HAL_RCC_GetPCLK2Freq+0x14>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004aa0:	4a03      	ldr	r2, [pc, #12]	@ (8004ab0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004aa2:	5cd3      	ldrb	r3, [r2, r3]
 8004aa4:	4a03      	ldr	r2, [pc, #12]	@ (8004ab4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004aa6:	6810      	ldr	r0, [r2, #0]
}
 8004aa8:	40d8      	lsrs	r0, r3
 8004aaa:	4770      	bx	lr
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	0800c180 	.word	0x0800c180
 8004ab4:	200000fc 	.word	0x200000fc

08004ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ac0:	6803      	ldr	r3, [r0, #0]
 8004ac2:	f013 0f01 	tst.w	r3, #1
 8004ac6:	d036      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004ad0:	d149      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004ada:	61da      	str	r2, [r3, #28]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004ae6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae8:	4b38      	ldr	r3, [pc, #224]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004af0:	d03b      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004af2:	4b35      	ldr	r3, [pc, #212]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004af4:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004af6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004afa:	d013      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004afc:	6862      	ldr	r2, [r4, #4]
 8004afe:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d00e      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b06:	4a30      	ldr	r2, [pc, #192]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004b08:	6a13      	ldr	r3, [r2, #32]
 8004b0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b0e:	4930      	ldr	r1, [pc, #192]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8004b10:	2601      	movs	r6, #1
 8004b12:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b16:	2600      	movs	r6, #0
 8004b18:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b1c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b1e:	f013 0f01 	tst.w	r3, #1
 8004b22:	d136      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b24:	4a28      	ldr	r2, [pc, #160]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004b26:	6a13      	ldr	r3, [r2, #32]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2c:	6861      	ldr	r1, [r4, #4]
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b32:	2d00      	cmp	r5, #0
 8004b34:	d13e      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	f013 0f02 	tst.w	r3, #2
 8004b3c:	d006      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b3e:	4a22      	ldr	r2, [pc, #136]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004b40:	6853      	ldr	r3, [r2, #4]
 8004b42:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004b46:	68a1      	ldr	r1, [r4, #8]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	f013 0f10 	tst.w	r3, #16
 8004b52:	d034      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b54:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004b56:	6853      	ldr	r3, [r2, #4]
 8004b58:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004b5c:	68e1      	ldr	r1, [r4, #12]
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b62:	2000      	movs	r0, #0
 8004b64:	e02c      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8004b66:	2500      	movs	r5, #0
 8004b68:	e7be      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6a:	4a18      	ldr	r2, [pc, #96]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004b6c:	6813      	ldr	r3, [r2, #0]
 8004b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b72:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004b74:	f7fe faa8 	bl	80030c8 <HAL_GetTick>
 8004b78:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7a:	4f14      	ldr	r7, [pc, #80]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004b82:	d1b6      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b84:	f7fe faa0 	bl	80030c8 <HAL_GetTick>
 8004b88:	1b80      	subs	r0, r0, r6
 8004b8a:	2864      	cmp	r0, #100	@ 0x64
 8004b8c:	d9f6      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8004b8e:	2003      	movs	r0, #3
 8004b90:	e016      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8004b92:	f7fe fa99 	bl	80030c8 <HAL_GetTick>
 8004b96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b98:	4f0b      	ldr	r7, [pc, #44]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9a:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	f013 0f02 	tst.w	r3, #2
 8004ba4:	d1be      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba6:	f7fe fa8f 	bl	80030c8 <HAL_GetTick>
 8004baa:	1b80      	subs	r0, r0, r6
 8004bac:	4540      	cmp	r0, r8
 8004bae:	d9f6      	bls.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8004bb0:	2003      	movs	r0, #3
 8004bb2:	e005      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb4:	69d3      	ldr	r3, [r2, #28]
 8004bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bba:	61d3      	str	r3, [r2, #28]
 8004bbc:	e7bb      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8004bbe:	2000      	movs	r0, #0
}
 8004bc0:	b002      	add	sp, #8
 8004bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	42420000 	.word	0x42420000

08004bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd8:	6a02      	ldr	r2, [r0, #32]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be8:	680d      	ldr	r5, [r1, #0]
 8004bea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bec:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bf0:	688d      	ldr	r5, [r1, #8]
 8004bf2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bf4:	4d0b      	ldr	r5, [pc, #44]	@ (8004c24 <TIM_OC1_SetConfig+0x50>)
 8004bf6:	42a8      	cmp	r0, r5
 8004bf8:	d006      	beq.n	8004c08 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bfc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bfe:	684a      	ldr	r2, [r1, #4]
 8004c00:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c02:	6203      	str	r3, [r0, #32]
}
 8004c04:	bc70      	pop	{r4, r5, r6}
 8004c06:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c08:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004c0c:	68cd      	ldr	r5, [r1, #12]
 8004c0e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c10:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c14:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c18:	694d      	ldr	r5, [r1, #20]
 8004c1a:	698e      	ldr	r6, [r1, #24]
 8004c1c:	4335      	orrs	r5, r6
 8004c1e:	432c      	orrs	r4, r5
 8004c20:	e7eb      	b.n	8004bfa <TIM_OC1_SetConfig+0x26>
 8004c22:	bf00      	nop
 8004c24:	40012c00 	.word	0x40012c00

08004c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c2c:	6a02      	ldr	r2, [r0, #32]
 8004c2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c32:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c36:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c38:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c3c:	680d      	ldr	r5, [r1, #0]
 8004c3e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c44:	688d      	ldr	r5, [r1, #8]
 8004c46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c4a:	4d0c      	ldr	r5, [pc, #48]	@ (8004c7c <TIM_OC3_SetConfig+0x54>)
 8004c4c:	42a8      	cmp	r0, r5
 8004c4e:	d006      	beq.n	8004c5e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c50:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c52:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c54:	684a      	ldr	r2, [r1, #4]
 8004c56:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c58:	6203      	str	r3, [r0, #32]
}
 8004c5a:	bc70      	pop	{r4, r5, r6}
 8004c5c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c62:	68cd      	ldr	r5, [r1, #12]
 8004c64:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c6c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c70:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c72:	698e      	ldr	r6, [r1, #24]
 8004c74:	4335      	orrs	r5, r6
 8004c76:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8004c7a:	e7e9      	b.n	8004c50 <TIM_OC3_SetConfig+0x28>
 8004c7c:	40012c00 	.word	0x40012c00

08004c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c84:	6a02      	ldr	r2, [r0, #32]
 8004c86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c8a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c8e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c90:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c94:	680d      	ldr	r5, [r1, #0]
 8004c96:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c9e:	688d      	ldr	r5, [r1, #8]
 8004ca0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca4:	4d07      	ldr	r5, [pc, #28]	@ (8004cc4 <TIM_OC4_SetConfig+0x44>)
 8004ca6:	42a8      	cmp	r0, r5
 8004ca8:	d006      	beq.n	8004cb8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004caa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cac:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cae:	684a      	ldr	r2, [r1, #4]
 8004cb0:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb2:	6203      	str	r3, [r0, #32]
}
 8004cb4:	bc30      	pop	{r4, r5}
 8004cb6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cb8:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cbc:	694d      	ldr	r5, [r1, #20]
 8004cbe:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004cc2:	e7f2      	b.n	8004caa <TIM_OC4_SetConfig+0x2a>
 8004cc4:	40012c00 	.word	0x40012c00

08004cc8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d122      	bne.n	8004d18 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd8:	6803      	ldr	r3, [r0, #0]
 8004cda:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <HAL_TIM_Base_Start+0x58>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d010      	beq.n	8004d02 <HAL_TIM_Base_Start+0x3a>
 8004ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce4:	d00d      	beq.n	8004d02 <HAL_TIM_Base_Start+0x3a>
 8004ce6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_TIM_Base_Start+0x3a>
 8004cee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d005      	beq.n	8004d02 <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004cfe:	2000      	movs	r0, #0
 8004d00:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	2a06      	cmp	r2, #6
 8004d0a:	d007      	beq.n	8004d1c <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004d14:	2000      	movs	r0, #0
 8004d16:	4770      	bx	lr
    return HAL_ERROR;
 8004d18:	2001      	movs	r0, #1
 8004d1a:	4770      	bx	lr
  return HAL_OK;
 8004d1c:	2000      	movs	r0, #0
}
 8004d1e:	4770      	bx	lr
 8004d20:	40012c00 	.word	0x40012c00

08004d24 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004d24:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d127      	bne.n	8004d7e <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d34:	6802      	ldr	r2, [r0, #0]
 8004d36:	68d3      	ldr	r3, [r2, #12]
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3e:	6803      	ldr	r3, [r0, #0]
 8004d40:	4a11      	ldr	r2, [pc, #68]	@ (8004d88 <HAL_TIM_Base_Start_IT+0x64>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d010      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x44>
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4a:	d00d      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x44>
 8004d4c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d009      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x44>
 8004d54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d005      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004d64:	2000      	movs	r0, #0
 8004d66:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6e:	2a06      	cmp	r2, #6
 8004d70:	d007      	beq.n	8004d82 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	f042 0201 	orr.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	4770      	bx	lr
    return HAL_ERROR;
 8004d7e:	2001      	movs	r0, #1
 8004d80:	4770      	bx	lr
  return HAL_OK;
 8004d82:	2000      	movs	r0, #0
}
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40012c00 	.word	0x40012c00

08004d8c <HAL_TIM_OC_MspInit>:
}
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIM_PWM_MspInit>:
}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_PeriodElapsedCallback>:
}
 8004d90:	4770      	bx	lr

08004d92 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_IC_CaptureCallback>:
}
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_TriggerCallback>:
}
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_IRQHandler>:
{
 8004d9a:	b510      	push	{r4, lr}
 8004d9c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d9e:	6803      	ldr	r3, [r0, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	f012 0f02 	tst.w	r2, #2
 8004da6:	d011      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	f012 0f02 	tst.w	r2, #2
 8004dae:	d00d      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db0:	f06f 0202 	mvn.w	r2, #2
 8004db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004db6:	2301      	movs	r3, #1
 8004db8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dba:	6803      	ldr	r3, [r0, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	f013 0f03 	tst.w	r3, #3
 8004dc2:	d070      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004dc4:	f7ff ffe6 	bl	8004d94 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	f012 0f04 	tst.w	r2, #4
 8004dd4:	d012      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	f012 0f04 	tst.w	r2, #4
 8004ddc:	d00e      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dde:	f06f 0204 	mvn.w	r2, #4
 8004de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de4:	2302      	movs	r3, #2
 8004de6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004df0:	d05f      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	4620      	mov	r0, r4
 8004df4:	f7ff ffce 	bl	8004d94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	f012 0f08 	tst.w	r2, #8
 8004e04:	d012      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	f012 0f08 	tst.w	r2, #8
 8004e0c:	d00e      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e0e:	f06f 0208 	mvn.w	r2, #8
 8004e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e14:	2304      	movs	r3, #4
 8004e16:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f013 0f03 	tst.w	r3, #3
 8004e20:	d04e      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	4620      	mov	r0, r4
 8004e24:	f7ff ffb6 	bl	8004d94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	f012 0f10 	tst.w	r2, #16
 8004e34:	d012      	beq.n	8004e5c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	f012 0f10 	tst.w	r2, #16
 8004e3c:	d00e      	beq.n	8004e5c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e3e:	f06f 0210 	mvn.w	r2, #16
 8004e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e44:	2308      	movs	r3, #8
 8004e46:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004e50:	d03d      	beq.n	8004ece <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e52:	4620      	mov	r0, r4
 8004e54:	f7ff ff9e 	bl	8004d94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	f012 0f01 	tst.w	r2, #1
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	f012 0f01 	tst.w	r2, #1
 8004e6c:	d136      	bne.n	8004edc <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004e76:	d003      	beq.n	8004e80 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004e7e:	d134      	bne.n	8004eea <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004e90:	d132      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	f012 0f20 	tst.w	r2, #32
 8004e9a:	d003      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	f012 0f20 	tst.w	r2, #32
 8004ea2:	d130      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x16c>
}
 8004ea4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	f7ff ff74 	bl	8004d92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7ff ff73 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
 8004eb0:	e78a      	b.n	8004dc8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f7ff ff6d 	bl	8004d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7ff ff6c 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ebe:	e79b      	b.n	8004df8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f7ff ff66 	bl	8004d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff ff65 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ecc:	e7ac      	b.n	8004e28 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f7ff ff5f 	bl	8004d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7ff ff5e 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
 8004eda:	e7bd      	b.n	8004e58 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004edc:	f06f 0201 	mvn.w	r2, #1
 8004ee0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f7ff ff54 	bl	8004d90 <HAL_TIM_PeriodElapsedCallback>
 8004ee8:	e7c1      	b.n	8004e6e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004eee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 fb3f 	bl	8005574 <HAL_TIMEx_BreakCallback>
 8004ef6:	e7c3      	b.n	8004e80 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ef8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004efc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004efe:	4620      	mov	r0, r4
 8004f00:	f7ff ff4a 	bl	8004d98 <HAL_TIM_TriggerCallback>
 8004f04:	e7c5      	b.n	8004e92 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f06:	f06f 0220 	mvn.w	r2, #32
 8004f0a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 fb30 	bl	8005572 <HAL_TIMEx_CommutCallback>
}
 8004f12:	e7c7      	b.n	8004ea4 <HAL_TIM_IRQHandler+0x10a>

08004f14 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004f14:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f16:	4a25      	ldr	r2, [pc, #148]	@ (8004fac <TIM_Base_SetConfig+0x98>)
 8004f18:	4290      	cmp	r0, r2
 8004f1a:	d014      	beq.n	8004f46 <TIM_Base_SetConfig+0x32>
 8004f1c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004f20:	d026      	beq.n	8004f70 <TIM_Base_SetConfig+0x5c>
 8004f22:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004f26:	4290      	cmp	r0, r2
 8004f28:	d036      	beq.n	8004f98 <TIM_Base_SetConfig+0x84>
 8004f2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f2e:	4290      	cmp	r0, r2
 8004f30:	d037      	beq.n	8004fa2 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f36:	694a      	ldr	r2, [r1, #20]
 8004f38:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f3a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f3c:	688b      	ldr	r3, [r1, #8]
 8004f3e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f40:	680b      	ldr	r3, [r1, #0]
 8004f42:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f44:	e025      	b.n	8004f92 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f4a:	684a      	ldr	r2, [r1, #4]
 8004f4c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f52:	68ca      	ldr	r2, [r1, #12]
 8004f54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f5a:	694a      	ldr	r2, [r1, #20]
 8004f5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f60:	688b      	ldr	r3, [r1, #8]
 8004f62:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f64:	680b      	ldr	r3, [r1, #0]
 8004f66:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004f68:	690a      	ldr	r2, [r1, #16]
 8004f6a:	4b10      	ldr	r3, [pc, #64]	@ (8004fac <TIM_Base_SetConfig+0x98>)
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f6e:	e010      	b.n	8004f92 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f74:	684a      	ldr	r2, [r1, #4]
 8004f76:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7c:	68ca      	ldr	r2, [r1, #12]
 8004f7e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f84:	694a      	ldr	r2, [r1, #20]
 8004f86:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f88:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f8a:	688b      	ldr	r3, [r1, #8]
 8004f8c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f8e:	680b      	ldr	r3, [r1, #0]
 8004f90:	6283      	str	r3, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004f92:	2301      	movs	r3, #1
 8004f94:	6143      	str	r3, [r0, #20]
}
 8004f96:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	684a      	ldr	r2, [r1, #4]
 8004f9e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa0:	e7ea      	b.n	8004f78 <TIM_Base_SetConfig+0x64>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004fa6:	684a      	ldr	r2, [r1, #4]
 8004fa8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004faa:	e7e5      	b.n	8004f78 <TIM_Base_SetConfig+0x64>
 8004fac:	40012c00 	.word	0x40012c00

08004fb0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004fb0:	b340      	cbz	r0, 8005004 <HAL_TIM_Base_Init+0x54>
{
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004fba:	b1f3      	cbz	r3, 8004ffa <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	f851 0b04 	ldr.w	r0, [r1], #4
 8004fc8:	f7ff ffa4 	bl	8004f14 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004fd6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004fda:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004fde:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fea:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004fee:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004ff2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004ff6:	2000      	movs	r0, #0
}
 8004ff8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004ffa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004ffe:	f7fd fdc7 	bl	8002b90 <HAL_TIM_Base_MspInit>
 8005002:	e7db      	b.n	8004fbc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005004:	2001      	movs	r0, #1
}
 8005006:	4770      	bx	lr

08005008 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8005008:	b340      	cbz	r0, 800505c <HAL_TIM_OC_Init+0x54>
{
 800500a:	b510      	push	{r4, lr}
 800500c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800500e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005012:	b1f3      	cbz	r3, 8005052 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	2302      	movs	r3, #2
 8005016:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800501a:	4621      	mov	r1, r4
 800501c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005020:	f7ff ff78 	bl	8004f14 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005024:	2301      	movs	r3, #1
 8005026:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800502e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005032:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005036:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800503e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005042:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005046:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800504a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800504e:	2000      	movs	r0, #0
}
 8005050:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005052:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005056:	f7ff fe99 	bl	8004d8c <HAL_TIM_OC_MspInit>
 800505a:	e7db      	b.n	8005014 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800505c:	2001      	movs	r0, #1
}
 800505e:	4770      	bx	lr

08005060 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005060:	b340      	cbz	r0, 80050b4 <HAL_TIM_PWM_Init+0x54>
{
 8005062:	b510      	push	{r4, lr}
 8005064:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005066:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800506a:	b1f3      	cbz	r3, 80050aa <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	2302      	movs	r3, #2
 800506e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005072:	4621      	mov	r1, r4
 8005074:	f851 0b04 	ldr.w	r0, [r1], #4
 8005078:	f7ff ff4c 	bl	8004f14 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507c:	2301      	movs	r3, #1
 800507e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005086:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800508a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800508e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800509a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800509e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80050a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80050a6:	2000      	movs	r0, #0
}
 80050a8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80050aa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80050ae:	f7ff fe6e 	bl	8004d8e <HAL_TIM_PWM_MspInit>
 80050b2:	e7db      	b.n	800506c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80050b4:	2001      	movs	r0, #1
}
 80050b6:	4770      	bx	lr

080050b8 <TIM_OC2_SetConfig>:
{
 80050b8:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 80050ba:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050bc:	6a02      	ldr	r2, [r0, #32]
 80050be:	f022 0210 	bic.w	r2, r2, #16
 80050c2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80050c4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80050c6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050c8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	680d      	ldr	r5, [r1, #0]
 80050ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80050d2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050d6:	688d      	ldr	r5, [r1, #8]
 80050d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050dc:	4d0c      	ldr	r5, [pc, #48]	@ (8005110 <TIM_OC2_SetConfig+0x58>)
 80050de:	42a8      	cmp	r0, r5
 80050e0:	d006      	beq.n	80050f0 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80050e2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80050e4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80050e6:	684a      	ldr	r2, [r1, #4]
 80050e8:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80050ea:	6203      	str	r3, [r0, #32]
}
 80050ec:	bc70      	pop	{r4, r5, r6}
 80050ee:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80050f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050f4:	68cd      	ldr	r5, [r1, #12]
 80050f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80050fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050fe:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005102:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005104:	698e      	ldr	r6, [r1, #24]
 8005106:	4335      	orrs	r5, r6
 8005108:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800510c:	e7e9      	b.n	80050e2 <TIM_OC2_SetConfig+0x2a>
 800510e:	bf00      	nop
 8005110:	40012c00 	.word	0x40012c00

08005114 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005114:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d028      	beq.n	800516e <HAL_TIM_OC_ConfigChannel+0x5a>
{
 800511c:	b510      	push	{r4, lr}
 800511e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005120:	2301      	movs	r3, #1
 8005122:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005126:	2a0c      	cmp	r2, #12
 8005128:	d81c      	bhi.n	8005164 <HAL_TIM_OC_ConfigChannel+0x50>
 800512a:	e8df f002 	tbb	[pc, r2]
 800512e:	1b07      	.short	0x1b07
 8005130:	1b0c1b1b 	.word	0x1b0c1b1b
 8005134:	1b111b1b 	.word	0x1b111b1b
 8005138:	1b1b      	.short	0x1b1b
 800513a:	16          	.byte	0x16
 800513b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f7ff fd49 	bl	8004bd4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005142:	2000      	movs	r0, #0
      break;
 8005144:	e00f      	b.n	8005166 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005146:	6800      	ldr	r0, [r0, #0]
 8005148:	f7ff ffb6 	bl	80050b8 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800514c:	2000      	movs	r0, #0
      break;
 800514e:	e00a      	b.n	8005166 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005150:	6800      	ldr	r0, [r0, #0]
 8005152:	f7ff fd69 	bl	8004c28 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005156:	2000      	movs	r0, #0
      break;
 8005158:	e005      	b.n	8005166 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	f7ff fd90 	bl	8004c80 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005160:	2000      	movs	r0, #0
      break;
 8005162:	e000      	b.n	8005166 <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8005164:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005166:	2300      	movs	r3, #0
 8005168:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800516c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800516e:	2002      	movs	r0, #2
}
 8005170:	4770      	bx	lr

08005172 <HAL_TIM_PWM_ConfigChannel>:
{
 8005172:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005174:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d066      	beq.n	800524a <HAL_TIM_PWM_ConfigChannel+0xd8>
 800517c:	4604      	mov	r4, r0
 800517e:	460d      	mov	r5, r1
 8005180:	2301      	movs	r3, #1
 8005182:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005186:	2a0c      	cmp	r2, #12
 8005188:	d85a      	bhi.n	8005240 <HAL_TIM_PWM_ConfigChannel+0xce>
 800518a:	e8df f002 	tbb	[pc, r2]
 800518e:	5907      	.short	0x5907
 8005190:	591b5959 	.word	0x591b5959
 8005194:	59305959 	.word	0x59305959
 8005198:	5959      	.short	0x5959
 800519a:	44          	.byte	0x44
 800519b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800519c:	6800      	ldr	r0, [r0, #0]
 800519e:	f7ff fd19 	bl	8004bd4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	6993      	ldr	r3, [r2, #24]
 80051a6:	f043 0308 	orr.w	r3, r3, #8
 80051aa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051ac:	6822      	ldr	r2, [r4, #0]
 80051ae:	6993      	ldr	r3, [r2, #24]
 80051b0:	f023 0304 	bic.w	r3, r3, #4
 80051b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b6:	6822      	ldr	r2, [r4, #0]
 80051b8:	6993      	ldr	r3, [r2, #24]
 80051ba:	6929      	ldr	r1, [r5, #16]
 80051bc:	430b      	orrs	r3, r1
 80051be:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80051c0:	2000      	movs	r0, #0
      break;
 80051c2:	e03e      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051c4:	6800      	ldr	r0, [r0, #0]
 80051c6:	f7ff ff77 	bl	80050b8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	6993      	ldr	r3, [r2, #24]
 80051ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80051d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051d4:	6822      	ldr	r2, [r4, #0]
 80051d6:	6993      	ldr	r3, [r2, #24]
 80051d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	6993      	ldr	r3, [r2, #24]
 80051e2:	6929      	ldr	r1, [r5, #16]
 80051e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80051e8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2000      	movs	r0, #0
      break;
 80051ec:	e029      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ee:	6800      	ldr	r0, [r0, #0]
 80051f0:	f7ff fd1a 	bl	8004c28 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051f4:	6822      	ldr	r2, [r4, #0]
 80051f6:	69d3      	ldr	r3, [r2, #28]
 80051f8:	f043 0308 	orr.w	r3, r3, #8
 80051fc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	69d3      	ldr	r3, [r2, #28]
 8005202:	f023 0304 	bic.w	r3, r3, #4
 8005206:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005208:	6822      	ldr	r2, [r4, #0]
 800520a:	69d3      	ldr	r3, [r2, #28]
 800520c:	6929      	ldr	r1, [r5, #16]
 800520e:	430b      	orrs	r3, r1
 8005210:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005212:	2000      	movs	r0, #0
      break;
 8005214:	e015      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005216:	6800      	ldr	r0, [r0, #0]
 8005218:	f7ff fd32 	bl	8004c80 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800521c:	6822      	ldr	r2, [r4, #0]
 800521e:	69d3      	ldr	r3, [r2, #28]
 8005220:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005224:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005226:	6822      	ldr	r2, [r4, #0]
 8005228:	69d3      	ldr	r3, [r2, #28]
 800522a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800522e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	69d3      	ldr	r3, [r2, #28]
 8005234:	6929      	ldr	r1, [r5, #16]
 8005236:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800523a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800523c:	2000      	movs	r0, #0
      break;
 800523e:	e000      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8005240:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005242:	2300      	movs	r3, #0
 8005244:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005248:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800524a:	2002      	movs	r0, #2
 800524c:	e7fc      	b.n	8005248 <HAL_TIM_PWM_ConfigChannel+0xd6>

0800524e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800524e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005250:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005252:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005256:	430a      	orrs	r2, r1
 8005258:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800525c:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005260:	6082      	str	r2, [r0, #8]
}
 8005262:	bc10      	pop	{r4}
 8005264:	4770      	bx	lr

08005266 <HAL_TIM_ConfigClockSource>:
{
 8005266:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005268:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	f000 80ad 	beq.w	80053cc <HAL_TIM_ConfigClockSource+0x166>
 8005272:	4604      	mov	r4, r0
 8005274:	2301      	movs	r3, #1
 8005276:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800527a:	2302      	movs	r3, #2
 800527c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005280:	6802      	ldr	r2, [r0, #0]
 8005282:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005288:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800528c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800528e:	680b      	ldr	r3, [r1, #0]
 8005290:	2b60      	cmp	r3, #96	@ 0x60
 8005292:	d060      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0xf0>
 8005294:	d83d      	bhi.n	8005312 <HAL_TIM_ConfigClockSource+0xac>
 8005296:	2b40      	cmp	r3, #64	@ 0x40
 8005298:	d079      	beq.n	800538e <HAL_TIM_ConfigClockSource+0x128>
 800529a:	d91c      	bls.n	80052d6 <HAL_TIM_ConfigClockSource+0x70>
 800529c:	2b50      	cmp	r3, #80	@ 0x50
 800529e:	d136      	bne.n	800530e <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a0:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 80052a2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80052a4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80052a6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a8:	6a1a      	ldr	r2, [r3, #32]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b0:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052b6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ba:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80052be:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80052c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c2:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c4:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80052c6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052cc:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80052d0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2000      	movs	r0, #0
}
 80052d4:	e012      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d002      	beq.n	80052e0 <HAL_TIM_ConfigClockSource+0x7a>
 80052da:	d90b      	bls.n	80052f4 <HAL_TIM_ConfigClockSource+0x8e>
 80052dc:	2b30      	cmp	r3, #48	@ 0x30
 80052de:	d114      	bne.n	800530a <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052e0:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80052e2:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80052ee:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052f0:	2000      	movs	r0, #0
}
 80052f2:	e003      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80052f4:	f033 0210 	bics.w	r2, r3, #16
 80052f8:	d0f2      	beq.n	80052e0 <HAL_TIM_ConfigClockSource+0x7a>
 80052fa:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005302:	2300      	movs	r3, #0
 8005304:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005308:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800530a:	2001      	movs	r0, #1
 800530c:	e7f6      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x96>
 800530e:	2001      	movs	r0, #1
 8005310:	e7f4      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x96>
 8005312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005316:	d055      	beq.n	80053c4 <HAL_TIM_ConfigClockSource+0x15e>
 8005318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800531c:	d10c      	bne.n	8005338 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 800531e:	68cb      	ldr	r3, [r1, #12]
 8005320:	684a      	ldr	r2, [r1, #4]
 8005322:	6889      	ldr	r1, [r1, #8]
 8005324:	6800      	ldr	r0, [r0, #0]
 8005326:	f7ff ff92 	bl	800524e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	6893      	ldr	r3, [r2, #8]
 800532e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005332:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2000      	movs	r0, #0
      break;
 8005336:	e7e1      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8005338:	2b70      	cmp	r3, #112	@ 0x70
 800533a:	d145      	bne.n	80053c8 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 800533c:	68cb      	ldr	r3, [r1, #12]
 800533e:	684a      	ldr	r2, [r1, #4]
 8005340:	6889      	ldr	r1, [r1, #8]
 8005342:	6800      	ldr	r0, [r0, #0]
 8005344:	f7ff ff83 	bl	800524e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800534c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005350:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2000      	movs	r0, #0
      break;
 8005354:	e7d2      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005356:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8005358:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800535a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800535c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800535e:	6a19      	ldr	r1, [r3, #32]
 8005360:	f021 0110 	bic.w	r1, r1, #16
 8005364:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005366:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005368:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800536c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005370:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005374:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005378:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800537a:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800537c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800537e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005384:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005388:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800538a:	2000      	movs	r0, #0
}
 800538c:	e7b6      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800538e:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8005390:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005392:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005394:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005396:	6a1a      	ldr	r2, [r3, #32]
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053a8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80053ac:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80053ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b0:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053b2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80053b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ba:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80053be:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80053c0:	2000      	movs	r0, #0
}
 80053c2:	e79b      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 80053c4:	2000      	movs	r0, #0
 80053c6:	e799      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80053c8:	2001      	movs	r0, #1
 80053ca:	e797      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80053cc:	2002      	movs	r0, #2
 80053ce:	e79b      	b.n	8005308 <HAL_TIM_ConfigClockSource+0xa2>

080053d0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053d0:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053d4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053d6:	f04f 0c01 	mov.w	ip, #1
 80053da:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 80053de:	ea23 030c 	bic.w	r3, r3, ip
 80053e2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e4:	6a03      	ldr	r3, [r0, #32]
 80053e6:	408a      	lsls	r2, r1
 80053e8:	431a      	orrs	r2, r3
 80053ea:	6202      	str	r2, [r0, #32]
}
 80053ec:	4770      	bx	lr
	...

080053f0 <HAL_TIM_PWM_Start>:
{
 80053f0:	b510      	push	{r4, lr}
 80053f2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053f4:	4608      	mov	r0, r1
 80053f6:	bb01      	cbnz	r1, 800543a <HAL_TIM_PWM_Start+0x4a>
 80053f8:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d152      	bne.n	80054a8 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005402:	2302      	movs	r3, #2
 8005404:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005408:	2201      	movs	r2, #1
 800540a:	4601      	mov	r1, r0
 800540c:	6820      	ldr	r0, [r4, #0]
 800540e:	f7ff ffdf 	bl	80053d0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	4a26      	ldr	r2, [pc, #152]	@ (80054b0 <HAL_TIM_PWM_Start+0xc0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d034      	beq.n	8005484 <HAL_TIM_PWM_Start+0x94>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541e:	d038      	beq.n	8005492 <HAL_TIM_PWM_Start+0xa2>
 8005420:	4a24      	ldr	r2, [pc, #144]	@ (80054b4 <HAL_TIM_PWM_Start+0xc4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d035      	beq.n	8005492 <HAL_TIM_PWM_Start+0xa2>
 8005426:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800542a:	4293      	cmp	r3, r2
 800542c:	d031      	beq.n	8005492 <HAL_TIM_PWM_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005436:	2000      	movs	r0, #0
 8005438:	e035      	b.n	80054a6 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800543a:	2904      	cmp	r1, #4
 800543c:	d00c      	beq.n	8005458 <HAL_TIM_PWM_Start+0x68>
 800543e:	2908      	cmp	r1, #8
 8005440:	bf0c      	ite	eq
 8005442:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 8005446:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 800544a:	b2db      	uxtb	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	bf18      	it	ne
 8005450:	2301      	movne	r3, #1
 8005452:	b143      	cbz	r3, 8005466 <HAL_TIM_PWM_Start+0x76>
    return HAL_ERROR;
 8005454:	2001      	movs	r0, #1
 8005456:	e026      	b.n	80054a6 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005458:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800545c:	b2db      	uxtb	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	bf18      	it	ne
 8005462:	2301      	movne	r3, #1
 8005464:	e7f5      	b.n	8005452 <HAL_TIM_PWM_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005466:	2804      	cmp	r0, #4
 8005468:	d008      	beq.n	800547c <HAL_TIM_PWM_Start+0x8c>
 800546a:	2808      	cmp	r0, #8
 800546c:	f04f 0302 	mov.w	r3, #2
 8005470:	bf0c      	ite	eq
 8005472:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8005476:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 800547a:	e7c5      	b.n	8005408 <HAL_TIM_PWM_Start+0x18>
 800547c:	2302      	movs	r3, #2
 800547e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005482:	e7c1      	b.n	8005408 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8005484:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8005486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548a:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	4293      	cmp	r3, r2
 8005490:	d1c3      	bne.n	800541a <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	2a06      	cmp	r2, #6
 800549a:	d007      	beq.n	80054ac <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80054a4:	2000      	movs	r0, #0
}
 80054a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80054a8:	2001      	movs	r0, #1
 80054aa:	e7fc      	b.n	80054a6 <HAL_TIM_PWM_Start+0xb6>
  return HAL_OK;
 80054ac:	2000      	movs	r0, #0
 80054ae:	e7fa      	b.n	80054a6 <HAL_TIM_PWM_Start+0xb6>
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40000400 	.word	0x40000400

080054b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80054bc:	2a01      	cmp	r2, #1
 80054be:	d02b      	beq.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80054c0:	b430      	push	{r4, r5}
 80054c2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80054c4:	2201      	movs	r2, #1
 80054c6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ca:	2202      	movs	r2, #2
 80054cc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d0:	6804      	ldr	r4, [r0, #0]
 80054d2:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054da:	680d      	ldr	r5, [r1, #0]
 80054dc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054de:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4c0e      	ldr	r4, [pc, #56]	@ (800551c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80054e4:	42a2      	cmp	r2, r4
 80054e6:	d00a      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80054e8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80054ec:	d007      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80054ee:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 80054f2:	42a2      	cmp	r2, r4
 80054f4:	d003      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80054f6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80054fa:	42a2      	cmp	r2, r4
 80054fc:	d104      	bne.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054fe:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005502:	6849      	ldr	r1, [r1, #4]
 8005504:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005506:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800550e:	2000      	movs	r0, #0
 8005510:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005514:	bc30      	pop	{r4, r5}
 8005516:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005518:	2002      	movs	r0, #2
}
 800551a:	4770      	bx	lr
 800551c:	40012c00 	.word	0x40012c00

08005520 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005520:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005522:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005526:	2b01      	cmp	r3, #1
 8005528:	d021      	beq.n	800556e <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800552a:	2301      	movs	r3, #1
 800552c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005530:	68cb      	ldr	r3, [r1, #12]
 8005532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005536:	6888      	ldr	r0, [r1, #8]
 8005538:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800553a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800553e:	6848      	ldr	r0, [r1, #4]
 8005540:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005542:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005546:	6808      	ldr	r0, [r1, #0]
 8005548:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800554a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800554e:	6908      	ldr	r0, [r1, #16]
 8005550:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005552:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005556:	6948      	ldr	r0, [r1, #20]
 8005558:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800555a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800555e:	69c9      	ldr	r1, [r1, #28]
 8005560:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005562:	6811      	ldr	r1, [r2, #0]
 8005564:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005566:	2000      	movs	r0, #0
 8005568:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 800556c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800556e:	2002      	movs	r0, #2
}
 8005570:	4770      	bx	lr

08005572 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005572:	4770      	bx	lr

08005574 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005574:	4770      	bx	lr

08005576 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005576:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	f102 030c 	add.w	r3, r2, #12
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	320c      	adds	r2, #12
 8005586:	e842 3100 	strex	r1, r3, [r2]
 800558a:	2900      	cmp	r1, #0
 800558c:	d1f3      	bne.n	8005576 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	f102 0314 	add.w	r3, r2, #20
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	3214      	adds	r2, #20
 800559e:	e842 3100 	strex	r1, r3, [r2]
 80055a2:	2900      	cmp	r1, #0
 80055a4:	d1f3      	bne.n	800558e <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d005      	beq.n	80055b8 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055ac:	2320      	movs	r3, #32
 80055ae:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	2300      	movs	r3, #0
 80055b4:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80055b6:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	f102 030c 	add.w	r3, r2, #12
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	320c      	adds	r2, #12
 80055c8:	e842 3100 	strex	r1, r3, [r2]
 80055cc:	2900      	cmp	r1, #0
 80055ce:	d1f3      	bne.n	80055b8 <UART_EndRxTransfer+0x42>
 80055d0:	e7ec      	b.n	80055ac <UART_EndRxTransfer+0x36>
	...

080055d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d4:	b510      	push	{r4, lr}
 80055d6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d8:	6802      	ldr	r2, [r0, #0]
 80055da:	6913      	ldr	r3, [r2, #16]
 80055dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80055e0:	68c1      	ldr	r1, [r0, #12]
 80055e2:	430b      	orrs	r3, r1
 80055e4:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 80055e6:	6801      	ldr	r1, [r0, #0]
 80055e8:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055ea:	6883      	ldr	r3, [r0, #8]
 80055ec:	6900      	ldr	r0, [r0, #16]
 80055ee:	4303      	orrs	r3, r0
 80055f0:	6960      	ldr	r0, [r4, #20]
 80055f2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80055f4:	f422 52b0 	bic.w	r2, r2, #5632	@ 0x1600
 80055f8:	f022 020c 	bic.w	r2, r2, #12
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005600:	6822      	ldr	r2, [r4, #0]
 8005602:	6953      	ldr	r3, [r2, #20]
 8005604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005608:	69a1      	ldr	r1, [r4, #24]
 800560a:	430b      	orrs	r3, r1
 800560c:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800560e:	6822      	ldr	r2, [r4, #0]
 8005610:	4b11      	ldr	r3, [pc, #68]	@ (8005658 <UART_SetConfig+0x84>)
 8005612:	429a      	cmp	r2, r3
 8005614:	d01b      	beq.n	800564e <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005616:	f7ff fa2f 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 800561a:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800561c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005620:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005624:	6862      	ldr	r2, [r4, #4]
 8005626:	0092      	lsls	r2, r2, #2
 8005628:	fbb3 f3f2 	udiv	r3, r3, r2
 800562c:	6820      	ldr	r0, [r4, #0]
 800562e:	490b      	ldr	r1, [pc, #44]	@ (800565c <UART_SetConfig+0x88>)
 8005630:	fba1 4203 	umull	r4, r2, r1, r3
 8005634:	0952      	lsrs	r2, r2, #5
 8005636:	2464      	movs	r4, #100	@ 0x64
 8005638:	fb04 3312 	mls	r3, r4, r2, r3
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	3332      	adds	r3, #50	@ 0x32
 8005640:	fba1 1303 	umull	r1, r3, r1, r3
 8005644:	0112      	lsls	r2, r2, #4
 8005646:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 800564a:	6082      	str	r2, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800564c:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800564e:	f7ff fa23 	bl	8004a98 <HAL_RCC_GetPCLK2Freq>
 8005652:	4603      	mov	r3, r0
 8005654:	e7e2      	b.n	800561c <UART_SetConfig+0x48>
 8005656:	bf00      	nop
 8005658:	40013800 	.word	0x40013800
 800565c:	51eb851f 	.word	0x51eb851f

08005660 <UART_WaitOnFlagUntilTimeout>:
{
 8005660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005664:	4680      	mov	r8, r0
 8005666:	460e      	mov	r6, r1
 8005668:	4615      	mov	r5, r2
 800566a:	4699      	mov	r9, r3
 800566c:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566e:	f8d8 3000 	ldr.w	r3, [r8]
 8005672:	681c      	ldr	r4, [r3, #0]
 8005674:	ea36 0404 	bics.w	r4, r6, r4
 8005678:	bf0c      	ite	eq
 800567a:	2401      	moveq	r4, #1
 800567c:	2400      	movne	r4, #0
 800567e:	42ac      	cmp	r4, r5
 8005680:	d12d      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8005682:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005686:	d0f4      	beq.n	8005672 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005688:	b12f      	cbz	r7, 8005696 <UART_WaitOnFlagUntilTimeout+0x36>
 800568a:	f7fd fd1d 	bl	80030c8 <HAL_GetTick>
 800568e:	eba0 0009 	sub.w	r0, r0, r9
 8005692:	42b8      	cmp	r0, r7
 8005694:	d9eb      	bls.n	800566e <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005696:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	f102 030c 	add.w	r3, r2, #12
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	320c      	adds	r2, #12
 80056a8:	e842 3100 	strex	r1, r3, [r2]
 80056ac:	2900      	cmp	r1, #0
 80056ae:	d1f2      	bne.n	8005696 <UART_WaitOnFlagUntilTimeout+0x36>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b0:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	f102 0314 	add.w	r3, r2, #20
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	3214      	adds	r2, #20
 80056c2:	e842 3100 	strex	r1, r3, [r2]
 80056c6:	2900      	cmp	r1, #0
 80056c8:	d1f2      	bne.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x50>
        huart->gState  = HAL_UART_STATE_READY;
 80056ca:	2320      	movs	r3, #32
 80056cc:	f888 3041 	strb.w	r3, [r8, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80056d0:	f888 3042 	strb.w	r3, [r8, #66]	@ 0x42
        __HAL_UNLOCK(huart);
 80056d4:	2300      	movs	r3, #0
 80056d6:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
        return HAL_TIMEOUT;
 80056da:	2003      	movs	r0, #3
 80056dc:	e000      	b.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 80056de:	2000      	movs	r0, #0
}
 80056e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080056e4 <HAL_UART_Init>:
  if (huart == NULL)
 80056e4:	b360      	cbz	r0, 8005740 <HAL_UART_Init+0x5c>
{
 80056e6:	b510      	push	{r4, lr}
 80056e8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80056ea:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80056ee:	b313      	cbz	r3, 8005736 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80056f0:	2324      	movs	r3, #36	@ 0x24
 80056f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	68d3      	ldr	r3, [r2, #12]
 80056fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056fe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005700:	4620      	mov	r0, r4
 8005702:	f7ff ff67 	bl	80055d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	6913      	ldr	r3, [r2, #16]
 800570a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800570e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	6953      	ldr	r3, [r2, #20]
 8005714:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8005718:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	68d3      	ldr	r3, [r2, #12]
 800571e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005722:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	2000      	movs	r0, #0
 8005726:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005728:	2320      	movs	r3, #32
 800572a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800572e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005732:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8005734:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005736:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800573a:	f7fd fab9 	bl	8002cb0 <HAL_UART_MspInit>
 800573e:	e7d7      	b.n	80056f0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005740:	2001      	movs	r0, #1
}
 8005742:	4770      	bx	lr

08005744 <HAL_UART_Transmit>:
{
 8005744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800574c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b20      	cmp	r3, #32
 8005754:	d151      	bne.n	80057fa <HAL_UART_Transmit+0xb6>
 8005756:	4604      	mov	r4, r0
 8005758:	460d      	mov	r5, r1
 800575a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800575c:	2900      	cmp	r1, #0
 800575e:	d050      	beq.n	8005802 <HAL_UART_Transmit+0xbe>
 8005760:	b90a      	cbnz	r2, 8005766 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8005762:	2001      	movs	r0, #1
 8005764:	e04a      	b.n	80057fc <HAL_UART_Transmit+0xb8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005766:	2300      	movs	r3, #0
 8005768:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800576a:	2321      	movs	r3, #33	@ 0x21
 800576c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8005770:	f7fd fcaa 	bl	80030c8 <HAL_GetTick>
 8005774:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005776:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800577a:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005784:	d009      	beq.n	800579a <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8005786:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 800578a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800578c:	b29b      	uxth	r3, r3
 800578e:	b343      	cbz	r3, 80057e2 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005790:	f04f 0900 	mov.w	r9, #0
 8005794:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8005798:	e014      	b.n	80057c4 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	b113      	cbz	r3, 80057a4 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 800579e:	f04f 0a00 	mov.w	sl, #0
 80057a2:	e7f2      	b.n	800578a <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 80057a4:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80057a6:	2500      	movs	r5, #0
 80057a8:	e7ef      	b.n	800578a <HAL_UART_Transmit+0x46>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80057b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80057b6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80057b8:	3a01      	subs	r2, #1
 80057ba:	b292      	uxth	r2, r2
 80057bc:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057be:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	b173      	cbz	r3, 80057e2 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057c4:	9600      	str	r6, [sp, #0]
 80057c6:	463b      	mov	r3, r7
 80057c8:	464a      	mov	r2, r9
 80057ca:	4641      	mov	r1, r8
 80057cc:	4620      	mov	r0, r4
 80057ce:	f7ff ff47 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 80057d2:	b9c0      	cbnz	r0, 8005806 <HAL_UART_Transmit+0xc2>
      if (pdata8bits == NULL)
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	d0e8      	beq.n	80057aa <HAL_UART_Transmit+0x66>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	f815 2b01 	ldrb.w	r2, [r5], #1
 80057de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057e0:	e7e9      	b.n	80057b6 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057e2:	9600      	str	r6, [sp, #0]
 80057e4:	463b      	mov	r3, r7
 80057e6:	2200      	movs	r2, #0
 80057e8:	2140      	movs	r1, #64	@ 0x40
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff ff38 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 80057f0:	b958      	cbnz	r0, 800580a <HAL_UART_Transmit+0xc6>
    huart->gState = HAL_UART_STATE_READY;
 80057f2:	2320      	movs	r3, #32
 80057f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80057f8:	e000      	b.n	80057fc <HAL_UART_Transmit+0xb8>
    return HAL_BUSY;
 80057fa:	2002      	movs	r0, #2
}
 80057fc:	b002      	add	sp, #8
 80057fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8005802:	2001      	movs	r0, #1
 8005804:	e7fa      	b.n	80057fc <HAL_UART_Transmit+0xb8>
        return HAL_TIMEOUT;
 8005806:	2003      	movs	r0, #3
 8005808:	e7f8      	b.n	80057fc <HAL_UART_Transmit+0xb8>
      return HAL_TIMEOUT;
 800580a:	2003      	movs	r0, #3
 800580c:	e7f6      	b.n	80057fc <HAL_UART_Transmit+0xb8>

0800580e <HAL_UART_Receive>:
{
 800580e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8005816:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b20      	cmp	r3, #32
 800581e:	d15a      	bne.n	80058d6 <HAL_UART_Receive+0xc8>
 8005820:	4604      	mov	r4, r0
 8005822:	460d      	mov	r5, r1
 8005824:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005826:	2900      	cmp	r1, #0
 8005828:	d059      	beq.n	80058de <HAL_UART_Receive+0xd0>
 800582a:	b90a      	cbnz	r2, 8005830 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 800582c:	2001      	movs	r0, #1
 800582e:	e053      	b.n	80058d8 <HAL_UART_Receive+0xca>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	2300      	movs	r3, #0
 8005832:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005834:	2222      	movs	r2, #34	@ 0x22
 8005836:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583a:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 800583c:	f7fd fc44 	bl	80030c8 <HAL_GetTick>
 8005840:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8005842:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005846:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800584a:	68a3      	ldr	r3, [r4, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005850:	d00a      	beq.n	8005868 <HAL_UART_Receive+0x5a>
      pdata16bits = NULL;
 8005852:	f04f 0a00 	mov.w	sl, #0
    while (huart->RxXferCount > 0U)
 8005856:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d036      	beq.n	80058cc <HAL_UART_Receive+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800585e:	f04f 0900 	mov.w	r9, #0
 8005862:	f04f 0820 	mov.w	r8, #32
 8005866:	e01a      	b.n	800589e <HAL_UART_Receive+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	b113      	cbz	r3, 8005872 <HAL_UART_Receive+0x64>
      pdata16bits = NULL;
 800586c:	f04f 0a00 	mov.w	sl, #0
 8005870:	e7f1      	b.n	8005856 <HAL_UART_Receive+0x48>
      pdata16bits = (uint16_t *) pData;
 8005872:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8005874:	2500      	movs	r5, #0
 8005876:	e7ee      	b.n	8005856 <HAL_UART_Receive+0x48>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005880:	f82a 3b02 	strh.w	r3, [sl], #2
        pdata16bits++;
 8005884:	e004      	b.n	8005890 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8005890:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 8005892:	3a01      	subs	r2, #1
 8005894:	b292      	uxth	r2, r2
 8005896:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005898:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800589a:	b29b      	uxth	r3, r3
 800589c:	b1b3      	cbz	r3, 80058cc <HAL_UART_Receive+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800589e:	9600      	str	r6, [sp, #0]
 80058a0:	463b      	mov	r3, r7
 80058a2:	464a      	mov	r2, r9
 80058a4:	4641      	mov	r1, r8
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff feda 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 80058ac:	b9c8      	cbnz	r0, 80058e2 <HAL_UART_Receive+0xd4>
      if (pdata8bits == NULL)
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	d0e2      	beq.n	8005878 <HAL_UART_Receive+0x6a>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058b2:	68a3      	ldr	r3, [r4, #8]
 80058b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b8:	d0e5      	beq.n	8005886 <HAL_UART_Receive+0x78>
 80058ba:	b913      	cbnz	r3, 80058c2 <HAL_UART_Receive+0xb4>
 80058bc:	6923      	ldr	r3, [r4, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0e1      	beq.n	8005886 <HAL_UART_Receive+0x78>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ca:	e7df      	b.n	800588c <HAL_UART_Receive+0x7e>
    huart->RxState = HAL_UART_STATE_READY;
 80058cc:	2320      	movs	r3, #32
 80058ce:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 80058d2:	2000      	movs	r0, #0
 80058d4:	e000      	b.n	80058d8 <HAL_UART_Receive+0xca>
    return HAL_BUSY;
 80058d6:	2002      	movs	r0, #2
}
 80058d8:	b002      	add	sp, #8
 80058da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80058de:	2001      	movs	r0, #1
 80058e0:	e7fa      	b.n	80058d8 <HAL_UART_Receive+0xca>
        return HAL_TIMEOUT;
 80058e2:	2003      	movs	r0, #3
 80058e4:	e7f8      	b.n	80058d8 <HAL_UART_Receive+0xca>

080058e6 <HAL_UART_TxCpltCallback>:
}
 80058e6:	4770      	bx	lr

080058e8 <HAL_UART_RxCpltCallback>:
}
 80058e8:	4770      	bx	lr

080058ea <HAL_UART_ErrorCallback>:
}
 80058ea:	4770      	bx	lr

080058ec <UART_DMAAbortOnError>:
{
 80058ec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ee:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058f4:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80058f6:	f7ff fff8 	bl	80058ea <HAL_UART_ErrorCallback>
}
 80058fa:	bd08      	pop	{r3, pc}

080058fc <HAL_UARTEx_RxEventCallback>:
}
 80058fc:	4770      	bx	lr

080058fe <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058fe:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b22      	cmp	r3, #34	@ 0x22
 8005906:	d11d      	bne.n	8005944 <UART_Receive_IT+0x46>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005908:	6883      	ldr	r3, [r0, #8]
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590e:	d006      	beq.n	800591e <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005910:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005912:	b17b      	cbz	r3, 8005934 <UART_Receive_IT+0x36>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005914:	6803      	ldr	r3, [r0, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800591c:	e01a      	b.n	8005954 <UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591e:	6903      	ldr	r3, [r0, #16]
 8005920:	b9a3      	cbnz	r3, 800594c <UART_Receive_IT+0x4e>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005922:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005924:	6803      	ldr	r3, [r0, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800592e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005930:	3302      	adds	r3, #2
 8005932:	e012      	b.n	800595a <UART_Receive_IT+0x5c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005934:	6903      	ldr	r3, [r0, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1ec      	bne.n	8005914 <UART_Receive_IT+0x16>
 800593a:	e008      	b.n	800594e <UART_Receive_IT+0x50>
        HAL_UART_RxCpltCallback(huart);
 800593c:	f7ff ffd4 	bl	80058e8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8005940:	2000      	movs	r0, #0
 8005942:	e048      	b.n	80059d6 <UART_Receive_IT+0xd8>
    return HAL_BUSY;
 8005944:	2002      	movs	r0, #2
 8005946:	4770      	bx	lr
    return HAL_OK;
 8005948:	2000      	movs	r0, #0
}
 800594a:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800594c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800594e:	6803      	ldr	r3, [r0, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005956:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005958:	3301      	adds	r3, #1
      huart->pRxBuffPtr += 2U;
 800595a:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800595c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800595e:	3b01      	subs	r3, #1
 8005960:	b29b      	uxth	r3, r3
 8005962:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1ef      	bne.n	8005948 <UART_Receive_IT+0x4a>
{
 8005968:	b500      	push	{lr}
 800596a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800596c:	6802      	ldr	r2, [r0, #0]
 800596e:	68d3      	ldr	r3, [r2, #12]
 8005970:	f023 0320 	bic.w	r3, r3, #32
 8005974:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005976:	6802      	ldr	r2, [r0, #0]
 8005978:	68d3      	ldr	r3, [r2, #12]
 800597a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800597e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005980:	6802      	ldr	r2, [r0, #0]
 8005982:	6953      	ldr	r3, [r2, #20]
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800598a:	2320      	movs	r3, #32
 800598c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005990:	2300      	movs	r3, #0
 8005992:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005994:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005996:	2b01      	cmp	r3, #1
 8005998:	d1d0      	bne.n	800593c <UART_Receive_IT+0x3e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599a:	2300      	movs	r3, #0
 800599c:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	f102 030c 	add.w	r3, r2, #12
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	320c      	adds	r2, #12
 80059ae:	e842 3100 	strex	r1, r3, [r2]
 80059b2:	2900      	cmp	r1, #0
 80059b4:	d1f3      	bne.n	800599e <UART_Receive_IT+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059b6:	6803      	ldr	r3, [r0, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	f012 0f10 	tst.w	r2, #16
 80059be:	d006      	beq.n	80059ce <UART_Receive_IT+0xd0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059c0:	2200      	movs	r2, #0
 80059c2:	9201      	str	r2, [sp, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	9201      	str	r2, [sp, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ce:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80059d0:	f7ff ff94 	bl	80058fc <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80059d4:	2000      	movs	r0, #0
}
 80059d6:	b003      	add	sp, #12
 80059d8:	f85d fb04 	ldr.w	pc, [sp], #4

080059dc <HAL_UART_IRQHandler>:
{
 80059dc:	b510      	push	{r4, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059e2:	6802      	ldr	r2, [r0, #0]
 80059e4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059e6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059e8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80059ea:	f013 0f0f 	tst.w	r3, #15
 80059ee:	d109      	bne.n	8005a04 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059f0:	f013 0f20 	tst.w	r3, #32
 80059f4:	d00d      	beq.n	8005a12 <HAL_UART_IRQHandler+0x36>
 80059f6:	f010 0f20 	tst.w	r0, #32
 80059fa:	d00a      	beq.n	8005a12 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 80059fc:	4620      	mov	r0, r4
 80059fe:	f7ff ff7e 	bl	80058fe <UART_Receive_IT>
      return;
 8005a02:	e018      	b.n	8005a36 <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a04:	f001 0101 	and.w	r1, r1, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a08:	f400 7c90 	and.w	ip, r0, #288	@ 0x120
 8005a0c:	ea5c 0c01 	orrs.w	ip, ip, r1
 8005a10:	d113      	bne.n	8005a3a <HAL_UART_IRQHandler+0x5e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a12:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a14:	2901      	cmp	r1, #1
 8005a16:	f000 8081 	beq.w	8005b1c <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a1e:	d003      	beq.n	8005a28 <HAL_UART_IRQHandler+0x4c>
 8005a20:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005a24:	f040 811a 	bne.w	8005c5c <HAL_UART_IRQHandler+0x280>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a28:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005a2c:	d003      	beq.n	8005a36 <HAL_UART_IRQHandler+0x5a>
 8005a2e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8005a32:	f040 8140 	bne.w	8005cb6 <HAL_UART_IRQHandler+0x2da>
}
 8005a36:	b002      	add	sp, #8
 8005a38:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a3a:	f013 0f01 	tst.w	r3, #1
 8005a3e:	d006      	beq.n	8005a4e <HAL_UART_IRQHandler+0x72>
 8005a40:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8005a44:	d003      	beq.n	8005a4e <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a46:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a4e:	f013 0f04 	tst.w	r3, #4
 8005a52:	d00b      	beq.n	8005a6c <HAL_UART_IRQHandler+0x90>
 8005a54:	b191      	cbz	r1, 8005a7c <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a56:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005a58:	f042 0202 	orr.w	r2, r2, #2
 8005a5c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a5e:	f013 0f02 	tst.w	r3, #2
 8005a62:	d107      	bne.n	8005a74 <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a64:	f013 0f08 	tst.w	r3, #8
 8005a68:	d10f      	bne.n	8005a8a <HAL_UART_IRQHandler+0xae>
 8005a6a:	e012      	b.n	8005a92 <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a6c:	f013 0f02 	tst.w	r3, #2
 8005a70:	d004      	beq.n	8005a7c <HAL_UART_IRQHandler+0xa0>
 8005a72:	b119      	cbz	r1, 8005a7c <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a74:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005a76:	f042 0204 	orr.w	r2, r2, #4
 8005a7a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a7c:	f013 0f08 	tst.w	r3, #8
 8005a80:	d007      	beq.n	8005a92 <HAL_UART_IRQHandler+0xb6>
 8005a82:	f000 0220 	and.w	r2, r0, #32
 8005a86:	430a      	orrs	r2, r1
 8005a88:	d003      	beq.n	8005a92 <HAL_UART_IRQHandler+0xb6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a8a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005a8c:	f042 0208 	orr.w	r2, r2, #8
 8005a90:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a92:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005a94:	2a00      	cmp	r2, #0
 8005a96:	d0ce      	beq.n	8005a36 <HAL_UART_IRQHandler+0x5a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a98:	f013 0f20 	tst.w	r3, #32
 8005a9c:	d002      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xc8>
 8005a9e:	f010 0f20 	tst.w	r0, #32
 8005aa2:	d10e      	bne.n	8005ac2 <HAL_UART_IRQHandler+0xe6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aa8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aae:	f002 0208 	and.w	r2, r2, #8
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	d109      	bne.n	8005aca <HAL_UART_IRQHandler+0xee>
        HAL_UART_ErrorCallback(huart);
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f7ff ff17 	bl	80058ea <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abc:	2300      	movs	r3, #0
 8005abe:	6463      	str	r3, [r4, #68]	@ 0x44
 8005ac0:	e7b9      	b.n	8005a36 <HAL_UART_IRQHandler+0x5a>
        UART_Receive_IT(huart);
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f7ff ff1b 	bl	80058fe <UART_Receive_IT>
 8005ac8:	e7ec      	b.n	8005aa4 <HAL_UART_IRQHandler+0xc8>
        UART_EndRxTransfer(huart);
 8005aca:	4620      	mov	r0, r4
 8005acc:	f7ff fd53 	bl	8005576 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005ad8:	d01c      	beq.n	8005b14 <HAL_UART_IRQHandler+0x138>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ada:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	f102 0314 	add.w	r3, r2, #20
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	3214      	adds	r2, #20
 8005aea:	e842 3100 	strex	r1, r3, [r2]
 8005aee:	2900      	cmp	r1, #0
 8005af0:	d1f3      	bne.n	8005ada <HAL_UART_IRQHandler+0xfe>
          if (huart->hdmarx != NULL)
 8005af2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005af4:	b153      	cbz	r3, 8005b0c <HAL_UART_IRQHandler+0x130>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005af6:	4a75      	ldr	r2, [pc, #468]	@ (8005ccc <HAL_UART_IRQHandler+0x2f0>)
 8005af8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005afa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005afc:	f7fd ff7c 	bl	80039f8 <HAL_DMA_Abort_IT>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d098      	beq.n	8005a36 <HAL_UART_IRQHandler+0x5a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b04:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005b06:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005b08:	4798      	blx	r3
 8005b0a:	e794      	b.n	8005a36 <HAL_UART_IRQHandler+0x5a>
            HAL_UART_ErrorCallback(huart);
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f7ff feec 	bl	80058ea <HAL_UART_ErrorCallback>
 8005b12:	e790      	b.n	8005a36 <HAL_UART_IRQHandler+0x5a>
          HAL_UART_ErrorCallback(huart);
 8005b14:	4620      	mov	r0, r4
 8005b16:	f7ff fee8 	bl	80058ea <HAL_UART_ErrorCallback>
 8005b1a:	e78c      	b.n	8005a36 <HAL_UART_IRQHandler+0x5a>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b1c:	f013 0f10 	tst.w	r3, #16
 8005b20:	f43f af7b 	beq.w	8005a1a <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b24:	f010 0f10 	tst.w	r0, #16
 8005b28:	f43f af77 	beq.w	8005a1a <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9301      	str	r3, [sp, #4]
 8005b30:	6813      	ldr	r3, [r2, #0]
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	6853      	ldr	r3, [r2, #4]
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3a:	6953      	ldr	r3, [r2, #20]
 8005b3c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005b40:	d050      	beq.n	8005be4 <HAL_UART_IRQHandler+0x208>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b42:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005b44:	6813      	ldr	r3, [r2, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f43f af73 	beq.w	8005a36 <HAL_UART_IRQHandler+0x5a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b50:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8005b52:	4299      	cmp	r1, r3
 8005b54:	f67f af6f 	bls.w	8005a36 <HAL_UART_IRQHandler+0x5a>
        huart->RxXferCount = nb_remaining_rx_data;
 8005b58:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b5a:	6993      	ldr	r3, [r2, #24]
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d037      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x1f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b60:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	f102 030c 	add.w	r3, r2, #12
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	320c      	adds	r2, #12
 8005b70:	e842 3100 	strex	r1, r3, [r2]
 8005b74:	2900      	cmp	r1, #0
 8005b76:	d1f3      	bne.n	8005b60 <HAL_UART_IRQHandler+0x184>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	f102 0314 	add.w	r3, r2, #20
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	3214      	adds	r2, #20
 8005b88:	e842 3100 	strex	r1, r3, [r2]
 8005b8c:	2900      	cmp	r1, #0
 8005b8e:	d1f3      	bne.n	8005b78 <HAL_UART_IRQHandler+0x19c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b90:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	f102 0314 	add.w	r3, r2, #20
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	3214      	adds	r2, #20
 8005ba0:	e842 3100 	strex	r1, r3, [r2]
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d1f3      	bne.n	8005b90 <HAL_UART_IRQHandler+0x1b4>
          huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	f102 030c 	add.w	r3, r2, #12
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	320c      	adds	r2, #12
 8005bc2:	e842 3100 	strex	r1, r3, [r2]
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d1f3      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x1d6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bca:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005bcc:	f7fd fef3 	bl	80039b6 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bd4:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8005bd6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8005bd8:	1ac9      	subs	r1, r1, r3
 8005bda:	b289      	uxth	r1, r1
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7ff fe8d 	bl	80058fc <HAL_UARTEx_RxEventCallback>
 8005be2:	e728      	b.n	8005a36 <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005be4:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8005be6:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8005be8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f43f af22 	beq.w	8005a36 <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bf2:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8005bf4:	1a89      	subs	r1, r1, r2
 8005bf6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	f43f af1c 	beq.w	8005a36 <HAL_UART_IRQHandler+0x5a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bfe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	f102 030c 	add.w	r3, r2, #12
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	320c      	adds	r2, #12
 8005c0e:	e842 3000 	strex	r0, r3, [r2]
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d1f3      	bne.n	8005bfe <HAL_UART_IRQHandler+0x222>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	f102 0314 	add.w	r3, r2, #20
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	3214      	adds	r2, #20
 8005c26:	e842 3000 	strex	r0, r3, [r2]
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d1f3      	bne.n	8005c16 <HAL_UART_IRQHandler+0x23a>
        huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	2320      	movs	r3, #32
 8005c30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c34:	2300      	movs	r3, #0
 8005c36:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c38:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	f102 030c 	add.w	r3, r2, #12
 8005c3e:	e853 3f00 	ldrex	r3, [r3]
 8005c42:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	320c      	adds	r2, #12
 8005c48:	e842 3000 	strex	r0, r3, [r2]
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d1f3      	bne.n	8005c38 <HAL_UART_IRQHandler+0x25c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c50:	2302      	movs	r3, #2
 8005c52:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c54:	4620      	mov	r0, r4
 8005c56:	f7ff fe51 	bl	80058fc <HAL_UARTEx_RxEventCallback>
 8005c5a:	e6ec      	b.n	8005a36 <HAL_UART_IRQHandler+0x5a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c5c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b21      	cmp	r3, #33	@ 0x21
 8005c64:	f47f aee7 	bne.w	8005a36 <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c68:	68a3      	ldr	r3, [r4, #8]
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6e:	d016      	beq.n	8005c9e <HAL_UART_IRQHandler+0x2c2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c70:	6a23      	ldr	r3, [r4, #32]
 8005c72:	1c59      	adds	r1, r3, #1
 8005c74:	6221      	str	r1, [r4, #32]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8005c7a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f47f aed7 	bne.w	8005a36 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c88:	6822      	ldr	r2, [r4, #0]
 8005c8a:	68d3      	ldr	r3, [r2, #12]
 8005c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c90:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	68d3      	ldr	r3, [r2, #12]
 8005c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c9a:	60d3      	str	r3, [r2, #12]
 8005c9c:	e6cb      	b.n	8005a36 <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e5      	bne.n	8005c70 <HAL_UART_IRQHandler+0x294>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ca4:	6a23      	ldr	r3, [r4, #32]
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cac:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8005cae:	6a23      	ldr	r3, [r4, #32]
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	6223      	str	r3, [r4, #32]
 8005cb4:	e7e1      	b.n	8005c7a <HAL_UART_IRQHandler+0x29e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cb6:	68d3      	ldr	r3, [r2, #12]
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cbc:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005cbe:	2320      	movs	r3, #32
 8005cc0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f7ff fe0e 	bl	80058e6 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8005cca:	e6b4      	b.n	8005a36 <HAL_UART_IRQHandler+0x5a>
 8005ccc:	080058ed 	.word	0x080058ed

08005cd0 <atoi>:
 8005cd0:	220a      	movs	r2, #10
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	f000 b87c 	b.w	8005dd0 <strtol>

08005cd8 <_strtol_l.constprop.0>:
 8005cd8:	2b24      	cmp	r3, #36	@ 0x24
 8005cda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cde:	4686      	mov	lr, r0
 8005ce0:	4690      	mov	r8, r2
 8005ce2:	d801      	bhi.n	8005ce8 <_strtol_l.constprop.0+0x10>
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d106      	bne.n	8005cf6 <_strtol_l.constprop.0+0x1e>
 8005ce8:	f001 f8f6 	bl	8006ed8 <__errno>
 8005cec:	2316      	movs	r3, #22
 8005cee:	6003      	str	r3, [r0, #0]
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	4833      	ldr	r0, [pc, #204]	@ (8005dc8 <_strtol_l.constprop.0+0xf0>)
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d00:	5d06      	ldrb	r6, [r0, r4]
 8005d02:	f016 0608 	ands.w	r6, r6, #8
 8005d06:	d1f8      	bne.n	8005cfa <_strtol_l.constprop.0+0x22>
 8005d08:	2c2d      	cmp	r4, #45	@ 0x2d
 8005d0a:	d12d      	bne.n	8005d68 <_strtol_l.constprop.0+0x90>
 8005d0c:	2601      	movs	r6, #1
 8005d0e:	782c      	ldrb	r4, [r5, #0]
 8005d10:	1c95      	adds	r5, r2, #2
 8005d12:	f033 0210 	bics.w	r2, r3, #16
 8005d16:	d109      	bne.n	8005d2c <_strtol_l.constprop.0+0x54>
 8005d18:	2c30      	cmp	r4, #48	@ 0x30
 8005d1a:	d12a      	bne.n	8005d72 <_strtol_l.constprop.0+0x9a>
 8005d1c:	782a      	ldrb	r2, [r5, #0]
 8005d1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005d22:	2a58      	cmp	r2, #88	@ 0x58
 8005d24:	d125      	bne.n	8005d72 <_strtol_l.constprop.0+0x9a>
 8005d26:	2310      	movs	r3, #16
 8005d28:	786c      	ldrb	r4, [r5, #1]
 8005d2a:	3502      	adds	r5, #2
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005d32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d36:	fbbc f9f3 	udiv	r9, ip, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005d40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005d44:	2f09      	cmp	r7, #9
 8005d46:	d81b      	bhi.n	8005d80 <_strtol_l.constprop.0+0xa8>
 8005d48:	463c      	mov	r4, r7
 8005d4a:	42a3      	cmp	r3, r4
 8005d4c:	dd27      	ble.n	8005d9e <_strtol_l.constprop.0+0xc6>
 8005d4e:	1c57      	adds	r7, r2, #1
 8005d50:	d007      	beq.n	8005d62 <_strtol_l.constprop.0+0x8a>
 8005d52:	4581      	cmp	r9, r0
 8005d54:	d320      	bcc.n	8005d98 <_strtol_l.constprop.0+0xc0>
 8005d56:	d101      	bne.n	8005d5c <_strtol_l.constprop.0+0x84>
 8005d58:	45a2      	cmp	sl, r4
 8005d5a:	db1d      	blt.n	8005d98 <_strtol_l.constprop.0+0xc0>
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	fb00 4003 	mla	r0, r0, r3, r4
 8005d62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d66:	e7eb      	b.n	8005d40 <_strtol_l.constprop.0+0x68>
 8005d68:	2c2b      	cmp	r4, #43	@ 0x2b
 8005d6a:	bf04      	itt	eq
 8005d6c:	782c      	ldrbeq	r4, [r5, #0]
 8005d6e:	1c95      	addeq	r5, r2, #2
 8005d70:	e7cf      	b.n	8005d12 <_strtol_l.constprop.0+0x3a>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1da      	bne.n	8005d2c <_strtol_l.constprop.0+0x54>
 8005d76:	2c30      	cmp	r4, #48	@ 0x30
 8005d78:	bf0c      	ite	eq
 8005d7a:	2308      	moveq	r3, #8
 8005d7c:	230a      	movne	r3, #10
 8005d7e:	e7d5      	b.n	8005d2c <_strtol_l.constprop.0+0x54>
 8005d80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005d84:	2f19      	cmp	r7, #25
 8005d86:	d801      	bhi.n	8005d8c <_strtol_l.constprop.0+0xb4>
 8005d88:	3c37      	subs	r4, #55	@ 0x37
 8005d8a:	e7de      	b.n	8005d4a <_strtol_l.constprop.0+0x72>
 8005d8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005d90:	2f19      	cmp	r7, #25
 8005d92:	d804      	bhi.n	8005d9e <_strtol_l.constprop.0+0xc6>
 8005d94:	3c57      	subs	r4, #87	@ 0x57
 8005d96:	e7d8      	b.n	8005d4a <_strtol_l.constprop.0+0x72>
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9c:	e7e1      	b.n	8005d62 <_strtol_l.constprop.0+0x8a>
 8005d9e:	1c53      	adds	r3, r2, #1
 8005da0:	d108      	bne.n	8005db4 <_strtol_l.constprop.0+0xdc>
 8005da2:	2322      	movs	r3, #34	@ 0x22
 8005da4:	4660      	mov	r0, ip
 8005da6:	f8ce 3000 	str.w	r3, [lr]
 8005daa:	f1b8 0f00 	cmp.w	r8, #0
 8005dae:	d0a0      	beq.n	8005cf2 <_strtol_l.constprop.0+0x1a>
 8005db0:	1e69      	subs	r1, r5, #1
 8005db2:	e006      	b.n	8005dc2 <_strtol_l.constprop.0+0xea>
 8005db4:	b106      	cbz	r6, 8005db8 <_strtol_l.constprop.0+0xe0>
 8005db6:	4240      	negs	r0, r0
 8005db8:	f1b8 0f00 	cmp.w	r8, #0
 8005dbc:	d099      	beq.n	8005cf2 <_strtol_l.constprop.0+0x1a>
 8005dbe:	2a00      	cmp	r2, #0
 8005dc0:	d1f6      	bne.n	8005db0 <_strtol_l.constprop.0+0xd8>
 8005dc2:	f8c8 1000 	str.w	r1, [r8]
 8005dc6:	e794      	b.n	8005cf2 <_strtol_l.constprop.0+0x1a>
 8005dc8:	0800c1ad 	.word	0x0800c1ad

08005dcc <_strtol_r>:
 8005dcc:	f7ff bf84 	b.w	8005cd8 <_strtol_l.constprop.0>

08005dd0 <strtol>:
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	460a      	mov	r2, r1
 8005dd4:	4601      	mov	r1, r0
 8005dd6:	4802      	ldr	r0, [pc, #8]	@ (8005de0 <strtol+0x10>)
 8005dd8:	6800      	ldr	r0, [r0, #0]
 8005dda:	f7ff bf7d 	b.w	8005cd8 <_strtol_l.constprop.0>
 8005dde:	bf00      	nop
 8005de0:	20000114 	.word	0x20000114

08005de4 <__cvt>:
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dea:	461d      	mov	r5, r3
 8005dec:	bfbb      	ittet	lt
 8005dee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005df2:	461d      	movlt	r5, r3
 8005df4:	2300      	movge	r3, #0
 8005df6:	232d      	movlt	r3, #45	@ 0x2d
 8005df8:	b088      	sub	sp, #32
 8005dfa:	4614      	mov	r4, r2
 8005dfc:	bfb8      	it	lt
 8005dfe:	4614      	movlt	r4, r2
 8005e00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e02:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005e04:	7013      	strb	r3, [r2, #0]
 8005e06:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e08:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005e0c:	f023 0820 	bic.w	r8, r3, #32
 8005e10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e14:	d005      	beq.n	8005e22 <__cvt+0x3e>
 8005e16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e1a:	d100      	bne.n	8005e1e <__cvt+0x3a>
 8005e1c:	3601      	adds	r6, #1
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e000      	b.n	8005e24 <__cvt+0x40>
 8005e22:	2303      	movs	r3, #3
 8005e24:	aa07      	add	r2, sp, #28
 8005e26:	9204      	str	r2, [sp, #16]
 8005e28:	aa06      	add	r2, sp, #24
 8005e2a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e2e:	e9cd 3600 	strd	r3, r6, [sp]
 8005e32:	4622      	mov	r2, r4
 8005e34:	462b      	mov	r3, r5
 8005e36:	f001 f94b 	bl	80070d0 <_dtoa_r>
 8005e3a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e3e:	4607      	mov	r7, r0
 8005e40:	d119      	bne.n	8005e76 <__cvt+0x92>
 8005e42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005e44:	07db      	lsls	r3, r3, #31
 8005e46:	d50e      	bpl.n	8005e66 <__cvt+0x82>
 8005e48:	eb00 0906 	add.w	r9, r0, r6
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2300      	movs	r3, #0
 8005e50:	4620      	mov	r0, r4
 8005e52:	4629      	mov	r1, r5
 8005e54:	f7fa fe5c 	bl	8000b10 <__aeabi_dcmpeq>
 8005e58:	b108      	cbz	r0, 8005e5e <__cvt+0x7a>
 8005e5a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e5e:	2230      	movs	r2, #48	@ 0x30
 8005e60:	9b07      	ldr	r3, [sp, #28]
 8005e62:	454b      	cmp	r3, r9
 8005e64:	d31e      	bcc.n	8005ea4 <__cvt+0xc0>
 8005e66:	4638      	mov	r0, r7
 8005e68:	9b07      	ldr	r3, [sp, #28]
 8005e6a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005e6c:	1bdb      	subs	r3, r3, r7
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	b008      	add	sp, #32
 8005e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e76:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e7a:	eb00 0906 	add.w	r9, r0, r6
 8005e7e:	d1e5      	bne.n	8005e4c <__cvt+0x68>
 8005e80:	7803      	ldrb	r3, [r0, #0]
 8005e82:	2b30      	cmp	r3, #48	@ 0x30
 8005e84:	d10a      	bne.n	8005e9c <__cvt+0xb8>
 8005e86:	2200      	movs	r2, #0
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7fa fe3f 	bl	8000b10 <__aeabi_dcmpeq>
 8005e92:	b918      	cbnz	r0, 8005e9c <__cvt+0xb8>
 8005e94:	f1c6 0601 	rsb	r6, r6, #1
 8005e98:	f8ca 6000 	str.w	r6, [sl]
 8005e9c:	f8da 3000 	ldr.w	r3, [sl]
 8005ea0:	4499      	add	r9, r3
 8005ea2:	e7d3      	b.n	8005e4c <__cvt+0x68>
 8005ea4:	1c59      	adds	r1, r3, #1
 8005ea6:	9107      	str	r1, [sp, #28]
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e7d9      	b.n	8005e60 <__cvt+0x7c>

08005eac <__exponent>:
 8005eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eae:	2900      	cmp	r1, #0
 8005eb0:	bfb6      	itet	lt
 8005eb2:	232d      	movlt	r3, #45	@ 0x2d
 8005eb4:	232b      	movge	r3, #43	@ 0x2b
 8005eb6:	4249      	neglt	r1, r1
 8005eb8:	2909      	cmp	r1, #9
 8005eba:	7002      	strb	r2, [r0, #0]
 8005ebc:	7043      	strb	r3, [r0, #1]
 8005ebe:	dd29      	ble.n	8005f14 <__exponent+0x68>
 8005ec0:	f10d 0307 	add.w	r3, sp, #7
 8005ec4:	461d      	mov	r5, r3
 8005ec6:	270a      	movs	r7, #10
 8005ec8:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ecc:	461a      	mov	r2, r3
 8005ece:	fb07 1416 	mls	r4, r7, r6, r1
 8005ed2:	3430      	adds	r4, #48	@ 0x30
 8005ed4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ed8:	460c      	mov	r4, r1
 8005eda:	2c63      	cmp	r4, #99	@ 0x63
 8005edc:	4631      	mov	r1, r6
 8005ede:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ee2:	dcf1      	bgt.n	8005ec8 <__exponent+0x1c>
 8005ee4:	3130      	adds	r1, #48	@ 0x30
 8005ee6:	1e94      	subs	r4, r2, #2
 8005ee8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005eec:	4623      	mov	r3, r4
 8005eee:	1c41      	adds	r1, r0, #1
 8005ef0:	42ab      	cmp	r3, r5
 8005ef2:	d30a      	bcc.n	8005f0a <__exponent+0x5e>
 8005ef4:	f10d 0309 	add.w	r3, sp, #9
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	42ac      	cmp	r4, r5
 8005efc:	bf88      	it	hi
 8005efe:	2300      	movhi	r3, #0
 8005f00:	3302      	adds	r3, #2
 8005f02:	4403      	add	r3, r0
 8005f04:	1a18      	subs	r0, r3, r0
 8005f06:	b003      	add	sp, #12
 8005f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f0a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f0e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f12:	e7ed      	b.n	8005ef0 <__exponent+0x44>
 8005f14:	2330      	movs	r3, #48	@ 0x30
 8005f16:	3130      	adds	r1, #48	@ 0x30
 8005f18:	7083      	strb	r3, [r0, #2]
 8005f1a:	70c1      	strb	r1, [r0, #3]
 8005f1c:	1d03      	adds	r3, r0, #4
 8005f1e:	e7f1      	b.n	8005f04 <__exponent+0x58>

08005f20 <_printf_float>:
 8005f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	b091      	sub	sp, #68	@ 0x44
 8005f26:	460c      	mov	r4, r1
 8005f28:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005f2c:	4616      	mov	r6, r2
 8005f2e:	461f      	mov	r7, r3
 8005f30:	4605      	mov	r5, r0
 8005f32:	f000 ff87 	bl	8006e44 <_localeconv_r>
 8005f36:	6803      	ldr	r3, [r0, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	9308      	str	r3, [sp, #32]
 8005f3c:	f7fa f908 	bl	8000150 <strlen>
 8005f40:	2300      	movs	r3, #0
 8005f42:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f44:	f8d8 3000 	ldr.w	r3, [r8]
 8005f48:	9009      	str	r0, [sp, #36]	@ 0x24
 8005f4a:	3307      	adds	r3, #7
 8005f4c:	f023 0307 	bic.w	r3, r3, #7
 8005f50:	f103 0208 	add.w	r2, r3, #8
 8005f54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f58:	f8d4 b000 	ldr.w	fp, [r4]
 8005f5c:	f8c8 2000 	str.w	r2, [r8]
 8005f60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f6a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f7a:	4b9c      	ldr	r3, [pc, #624]	@ (80061ec <_printf_float+0x2cc>)
 8005f7c:	f7fa fdfa 	bl	8000b74 <__aeabi_dcmpun>
 8005f80:	bb70      	cbnz	r0, 8005fe0 <_printf_float+0xc0>
 8005f82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8a:	4b98      	ldr	r3, [pc, #608]	@ (80061ec <_printf_float+0x2cc>)
 8005f8c:	f7fa fdd4 	bl	8000b38 <__aeabi_dcmple>
 8005f90:	bb30      	cbnz	r0, 8005fe0 <_printf_float+0xc0>
 8005f92:	2200      	movs	r2, #0
 8005f94:	2300      	movs	r3, #0
 8005f96:	4640      	mov	r0, r8
 8005f98:	4649      	mov	r1, r9
 8005f9a:	f7fa fdc3 	bl	8000b24 <__aeabi_dcmplt>
 8005f9e:	b110      	cbz	r0, 8005fa6 <_printf_float+0x86>
 8005fa0:	232d      	movs	r3, #45	@ 0x2d
 8005fa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fa6:	4a92      	ldr	r2, [pc, #584]	@ (80061f0 <_printf_float+0x2d0>)
 8005fa8:	4b92      	ldr	r3, [pc, #584]	@ (80061f4 <_printf_float+0x2d4>)
 8005faa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fae:	bf94      	ite	ls
 8005fb0:	4690      	movls	r8, r2
 8005fb2:	4698      	movhi	r8, r3
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	f04f 0900 	mov.w	r9, #0
 8005fba:	6123      	str	r3, [r4, #16]
 8005fbc:	f02b 0304 	bic.w	r3, fp, #4
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	4633      	mov	r3, r6
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	9700      	str	r7, [sp, #0]
 8005fca:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005fcc:	f000 f9d4 	bl	8006378 <_printf_common>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f040 8090 	bne.w	80060f6 <_printf_float+0x1d6>
 8005fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fda:	b011      	add	sp, #68	@ 0x44
 8005fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	f7fa fdc4 	bl	8000b74 <__aeabi_dcmpun>
 8005fec:	b148      	cbz	r0, 8006002 <_printf_float+0xe2>
 8005fee:	464b      	mov	r3, r9
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	bfb8      	it	lt
 8005ff4:	232d      	movlt	r3, #45	@ 0x2d
 8005ff6:	4a80      	ldr	r2, [pc, #512]	@ (80061f8 <_printf_float+0x2d8>)
 8005ff8:	bfb8      	it	lt
 8005ffa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80061fc <_printf_float+0x2dc>)
 8006000:	e7d3      	b.n	8005faa <_printf_float+0x8a>
 8006002:	6863      	ldr	r3, [r4, #4]
 8006004:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	d13f      	bne.n	800608c <_printf_float+0x16c>
 800600c:	2306      	movs	r3, #6
 800600e:	6063      	str	r3, [r4, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	9206      	str	r2, [sp, #24]
 800601a:	aa0e      	add	r2, sp, #56	@ 0x38
 800601c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006020:	aa0d      	add	r2, sp, #52	@ 0x34
 8006022:	9203      	str	r2, [sp, #12]
 8006024:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006028:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	4642      	mov	r2, r8
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	4628      	mov	r0, r5
 8006034:	464b      	mov	r3, r9
 8006036:	910a      	str	r1, [sp, #40]	@ 0x28
 8006038:	f7ff fed4 	bl	8005de4 <__cvt>
 800603c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800603e:	4680      	mov	r8, r0
 8006040:	2947      	cmp	r1, #71	@ 0x47
 8006042:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006044:	d128      	bne.n	8006098 <_printf_float+0x178>
 8006046:	1cc8      	adds	r0, r1, #3
 8006048:	db02      	blt.n	8006050 <_printf_float+0x130>
 800604a:	6863      	ldr	r3, [r4, #4]
 800604c:	4299      	cmp	r1, r3
 800604e:	dd40      	ble.n	80060d2 <_printf_float+0x1b2>
 8006050:	f1aa 0a02 	sub.w	sl, sl, #2
 8006054:	fa5f fa8a 	uxtb.w	sl, sl
 8006058:	4652      	mov	r2, sl
 800605a:	3901      	subs	r1, #1
 800605c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006060:	910d      	str	r1, [sp, #52]	@ 0x34
 8006062:	f7ff ff23 	bl	8005eac <__exponent>
 8006066:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006068:	4681      	mov	r9, r0
 800606a:	1813      	adds	r3, r2, r0
 800606c:	2a01      	cmp	r2, #1
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	dc02      	bgt.n	8006078 <_printf_float+0x158>
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	07d2      	lsls	r2, r2, #31
 8006076:	d501      	bpl.n	800607c <_printf_float+0x15c>
 8006078:	3301      	adds	r3, #1
 800607a:	6123      	str	r3, [r4, #16]
 800607c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006080:	2b00      	cmp	r3, #0
 8006082:	d09e      	beq.n	8005fc2 <_printf_float+0xa2>
 8006084:	232d      	movs	r3, #45	@ 0x2d
 8006086:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800608a:	e79a      	b.n	8005fc2 <_printf_float+0xa2>
 800608c:	2947      	cmp	r1, #71	@ 0x47
 800608e:	d1bf      	bne.n	8006010 <_printf_float+0xf0>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1bd      	bne.n	8006010 <_printf_float+0xf0>
 8006094:	2301      	movs	r3, #1
 8006096:	e7ba      	b.n	800600e <_printf_float+0xee>
 8006098:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800609c:	d9dc      	bls.n	8006058 <_printf_float+0x138>
 800609e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060a2:	d118      	bne.n	80060d6 <_printf_float+0x1b6>
 80060a4:	2900      	cmp	r1, #0
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	dd0b      	ble.n	80060c2 <_printf_float+0x1a2>
 80060aa:	6121      	str	r1, [r4, #16]
 80060ac:	b913      	cbnz	r3, 80060b4 <_printf_float+0x194>
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	07d0      	lsls	r0, r2, #31
 80060b2:	d502      	bpl.n	80060ba <_printf_float+0x19a>
 80060b4:	3301      	adds	r3, #1
 80060b6:	440b      	add	r3, r1
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	f04f 0900 	mov.w	r9, #0
 80060be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060c0:	e7dc      	b.n	800607c <_printf_float+0x15c>
 80060c2:	b913      	cbnz	r3, 80060ca <_printf_float+0x1aa>
 80060c4:	6822      	ldr	r2, [r4, #0]
 80060c6:	07d2      	lsls	r2, r2, #31
 80060c8:	d501      	bpl.n	80060ce <_printf_float+0x1ae>
 80060ca:	3302      	adds	r3, #2
 80060cc:	e7f4      	b.n	80060b8 <_printf_float+0x198>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e7f2      	b.n	80060b8 <_printf_float+0x198>
 80060d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060d8:	4299      	cmp	r1, r3
 80060da:	db05      	blt.n	80060e8 <_printf_float+0x1c8>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	6121      	str	r1, [r4, #16]
 80060e0:	07d8      	lsls	r0, r3, #31
 80060e2:	d5ea      	bpl.n	80060ba <_printf_float+0x19a>
 80060e4:	1c4b      	adds	r3, r1, #1
 80060e6:	e7e7      	b.n	80060b8 <_printf_float+0x198>
 80060e8:	2900      	cmp	r1, #0
 80060ea:	bfcc      	ite	gt
 80060ec:	2201      	movgt	r2, #1
 80060ee:	f1c1 0202 	rsble	r2, r1, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	e7e0      	b.n	80060b8 <_printf_float+0x198>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	055a      	lsls	r2, r3, #21
 80060fa:	d407      	bmi.n	800610c <_printf_float+0x1ec>
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	4642      	mov	r2, r8
 8006100:	4631      	mov	r1, r6
 8006102:	4628      	mov	r0, r5
 8006104:	47b8      	blx	r7
 8006106:	3001      	adds	r0, #1
 8006108:	d12b      	bne.n	8006162 <_printf_float+0x242>
 800610a:	e764      	b.n	8005fd6 <_printf_float+0xb6>
 800610c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006110:	f240 80dc 	bls.w	80062cc <_printf_float+0x3ac>
 8006114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006118:	2200      	movs	r2, #0
 800611a:	2300      	movs	r3, #0
 800611c:	f7fa fcf8 	bl	8000b10 <__aeabi_dcmpeq>
 8006120:	2800      	cmp	r0, #0
 8006122:	d033      	beq.n	800618c <_printf_float+0x26c>
 8006124:	2301      	movs	r3, #1
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	4a35      	ldr	r2, [pc, #212]	@ (8006200 <_printf_float+0x2e0>)
 800612c:	47b8      	blx	r7
 800612e:	3001      	adds	r0, #1
 8006130:	f43f af51 	beq.w	8005fd6 <_printf_float+0xb6>
 8006134:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006138:	4543      	cmp	r3, r8
 800613a:	db02      	blt.n	8006142 <_printf_float+0x222>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	07d8      	lsls	r0, r3, #31
 8006140:	d50f      	bpl.n	8006162 <_printf_float+0x242>
 8006142:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006146:	4631      	mov	r1, r6
 8006148:	4628      	mov	r0, r5
 800614a:	47b8      	blx	r7
 800614c:	3001      	adds	r0, #1
 800614e:	f43f af42 	beq.w	8005fd6 <_printf_float+0xb6>
 8006152:	f04f 0900 	mov.w	r9, #0
 8006156:	f108 38ff 	add.w	r8, r8, #4294967295
 800615a:	f104 0a1a 	add.w	sl, r4, #26
 800615e:	45c8      	cmp	r8, r9
 8006160:	dc09      	bgt.n	8006176 <_printf_float+0x256>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	079b      	lsls	r3, r3, #30
 8006166:	f100 8102 	bmi.w	800636e <_printf_float+0x44e>
 800616a:	68e0      	ldr	r0, [r4, #12]
 800616c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800616e:	4298      	cmp	r0, r3
 8006170:	bfb8      	it	lt
 8006172:	4618      	movlt	r0, r3
 8006174:	e731      	b.n	8005fda <_printf_float+0xba>
 8006176:	2301      	movs	r3, #1
 8006178:	4652      	mov	r2, sl
 800617a:	4631      	mov	r1, r6
 800617c:	4628      	mov	r0, r5
 800617e:	47b8      	blx	r7
 8006180:	3001      	adds	r0, #1
 8006182:	f43f af28 	beq.w	8005fd6 <_printf_float+0xb6>
 8006186:	f109 0901 	add.w	r9, r9, #1
 800618a:	e7e8      	b.n	800615e <_printf_float+0x23e>
 800618c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800618e:	2b00      	cmp	r3, #0
 8006190:	dc38      	bgt.n	8006204 <_printf_float+0x2e4>
 8006192:	2301      	movs	r3, #1
 8006194:	4631      	mov	r1, r6
 8006196:	4628      	mov	r0, r5
 8006198:	4a19      	ldr	r2, [pc, #100]	@ (8006200 <_printf_float+0x2e0>)
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	f43f af1a 	beq.w	8005fd6 <_printf_float+0xb6>
 80061a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80061a6:	ea59 0303 	orrs.w	r3, r9, r3
 80061aa:	d102      	bne.n	80061b2 <_printf_float+0x292>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	07d9      	lsls	r1, r3, #31
 80061b0:	d5d7      	bpl.n	8006162 <_printf_float+0x242>
 80061b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061b6:	4631      	mov	r1, r6
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b8      	blx	r7
 80061bc:	3001      	adds	r0, #1
 80061be:	f43f af0a 	beq.w	8005fd6 <_printf_float+0xb6>
 80061c2:	f04f 0a00 	mov.w	sl, #0
 80061c6:	f104 0b1a 	add.w	fp, r4, #26
 80061ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061cc:	425b      	negs	r3, r3
 80061ce:	4553      	cmp	r3, sl
 80061d0:	dc01      	bgt.n	80061d6 <_printf_float+0x2b6>
 80061d2:	464b      	mov	r3, r9
 80061d4:	e793      	b.n	80060fe <_printf_float+0x1de>
 80061d6:	2301      	movs	r3, #1
 80061d8:	465a      	mov	r2, fp
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	f43f aef8 	beq.w	8005fd6 <_printf_float+0xb6>
 80061e6:	f10a 0a01 	add.w	sl, sl, #1
 80061ea:	e7ee      	b.n	80061ca <_printf_float+0x2aa>
 80061ec:	7fefffff 	.word	0x7fefffff
 80061f0:	0800c2ad 	.word	0x0800c2ad
 80061f4:	0800c2b1 	.word	0x0800c2b1
 80061f8:	0800c2b5 	.word	0x0800c2b5
 80061fc:	0800c2b9 	.word	0x0800c2b9
 8006200:	0800c2bd 	.word	0x0800c2bd
 8006204:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006206:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800620a:	4553      	cmp	r3, sl
 800620c:	bfa8      	it	ge
 800620e:	4653      	movge	r3, sl
 8006210:	2b00      	cmp	r3, #0
 8006212:	4699      	mov	r9, r3
 8006214:	dc36      	bgt.n	8006284 <_printf_float+0x364>
 8006216:	f04f 0b00 	mov.w	fp, #0
 800621a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800621e:	f104 021a 	add.w	r2, r4, #26
 8006222:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006224:	930a      	str	r3, [sp, #40]	@ 0x28
 8006226:	eba3 0309 	sub.w	r3, r3, r9
 800622a:	455b      	cmp	r3, fp
 800622c:	dc31      	bgt.n	8006292 <_printf_float+0x372>
 800622e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006230:	459a      	cmp	sl, r3
 8006232:	dc3a      	bgt.n	80062aa <_printf_float+0x38a>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	07da      	lsls	r2, r3, #31
 8006238:	d437      	bmi.n	80062aa <_printf_float+0x38a>
 800623a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800623c:	ebaa 0903 	sub.w	r9, sl, r3
 8006240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006242:	ebaa 0303 	sub.w	r3, sl, r3
 8006246:	4599      	cmp	r9, r3
 8006248:	bfa8      	it	ge
 800624a:	4699      	movge	r9, r3
 800624c:	f1b9 0f00 	cmp.w	r9, #0
 8006250:	dc33      	bgt.n	80062ba <_printf_float+0x39a>
 8006252:	f04f 0800 	mov.w	r8, #0
 8006256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800625a:	f104 0b1a 	add.w	fp, r4, #26
 800625e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006260:	ebaa 0303 	sub.w	r3, sl, r3
 8006264:	eba3 0309 	sub.w	r3, r3, r9
 8006268:	4543      	cmp	r3, r8
 800626a:	f77f af7a 	ble.w	8006162 <_printf_float+0x242>
 800626e:	2301      	movs	r3, #1
 8006270:	465a      	mov	r2, fp
 8006272:	4631      	mov	r1, r6
 8006274:	4628      	mov	r0, r5
 8006276:	47b8      	blx	r7
 8006278:	3001      	adds	r0, #1
 800627a:	f43f aeac 	beq.w	8005fd6 <_printf_float+0xb6>
 800627e:	f108 0801 	add.w	r8, r8, #1
 8006282:	e7ec      	b.n	800625e <_printf_float+0x33e>
 8006284:	4642      	mov	r2, r8
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	d1c2      	bne.n	8006216 <_printf_float+0x2f6>
 8006290:	e6a1      	b.n	8005fd6 <_printf_float+0xb6>
 8006292:	2301      	movs	r3, #1
 8006294:	4631      	mov	r1, r6
 8006296:	4628      	mov	r0, r5
 8006298:	920a      	str	r2, [sp, #40]	@ 0x28
 800629a:	47b8      	blx	r7
 800629c:	3001      	adds	r0, #1
 800629e:	f43f ae9a 	beq.w	8005fd6 <_printf_float+0xb6>
 80062a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062a4:	f10b 0b01 	add.w	fp, fp, #1
 80062a8:	e7bb      	b.n	8006222 <_printf_float+0x302>
 80062aa:	4631      	mov	r1, r6
 80062ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	d1c0      	bne.n	800623a <_printf_float+0x31a>
 80062b8:	e68d      	b.n	8005fd6 <_printf_float+0xb6>
 80062ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062bc:	464b      	mov	r3, r9
 80062be:	4631      	mov	r1, r6
 80062c0:	4628      	mov	r0, r5
 80062c2:	4442      	add	r2, r8
 80062c4:	47b8      	blx	r7
 80062c6:	3001      	adds	r0, #1
 80062c8:	d1c3      	bne.n	8006252 <_printf_float+0x332>
 80062ca:	e684      	b.n	8005fd6 <_printf_float+0xb6>
 80062cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80062d0:	f1ba 0f01 	cmp.w	sl, #1
 80062d4:	dc01      	bgt.n	80062da <_printf_float+0x3ba>
 80062d6:	07db      	lsls	r3, r3, #31
 80062d8:	d536      	bpl.n	8006348 <_printf_float+0x428>
 80062da:	2301      	movs	r3, #1
 80062dc:	4642      	mov	r2, r8
 80062de:	4631      	mov	r1, r6
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b8      	blx	r7
 80062e4:	3001      	adds	r0, #1
 80062e6:	f43f ae76 	beq.w	8005fd6 <_printf_float+0xb6>
 80062ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062ee:	4631      	mov	r1, r6
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b8      	blx	r7
 80062f4:	3001      	adds	r0, #1
 80062f6:	f43f ae6e 	beq.w	8005fd6 <_printf_float+0xb6>
 80062fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062fe:	2200      	movs	r2, #0
 8006300:	2300      	movs	r3, #0
 8006302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006306:	f7fa fc03 	bl	8000b10 <__aeabi_dcmpeq>
 800630a:	b9c0      	cbnz	r0, 800633e <_printf_float+0x41e>
 800630c:	4653      	mov	r3, sl
 800630e:	f108 0201 	add.w	r2, r8, #1
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	d10c      	bne.n	8006336 <_printf_float+0x416>
 800631c:	e65b      	b.n	8005fd6 <_printf_float+0xb6>
 800631e:	2301      	movs	r3, #1
 8006320:	465a      	mov	r2, fp
 8006322:	4631      	mov	r1, r6
 8006324:	4628      	mov	r0, r5
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	f43f ae54 	beq.w	8005fd6 <_printf_float+0xb6>
 800632e:	f108 0801 	add.w	r8, r8, #1
 8006332:	45d0      	cmp	r8, sl
 8006334:	dbf3      	blt.n	800631e <_printf_float+0x3fe>
 8006336:	464b      	mov	r3, r9
 8006338:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800633c:	e6e0      	b.n	8006100 <_printf_float+0x1e0>
 800633e:	f04f 0800 	mov.w	r8, #0
 8006342:	f104 0b1a 	add.w	fp, r4, #26
 8006346:	e7f4      	b.n	8006332 <_printf_float+0x412>
 8006348:	2301      	movs	r3, #1
 800634a:	4642      	mov	r2, r8
 800634c:	e7e1      	b.n	8006312 <_printf_float+0x3f2>
 800634e:	2301      	movs	r3, #1
 8006350:	464a      	mov	r2, r9
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	f43f ae3c 	beq.w	8005fd6 <_printf_float+0xb6>
 800635e:	f108 0801 	add.w	r8, r8, #1
 8006362:	68e3      	ldr	r3, [r4, #12]
 8006364:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006366:	1a5b      	subs	r3, r3, r1
 8006368:	4543      	cmp	r3, r8
 800636a:	dcf0      	bgt.n	800634e <_printf_float+0x42e>
 800636c:	e6fd      	b.n	800616a <_printf_float+0x24a>
 800636e:	f04f 0800 	mov.w	r8, #0
 8006372:	f104 0919 	add.w	r9, r4, #25
 8006376:	e7f4      	b.n	8006362 <_printf_float+0x442>

08006378 <_printf_common>:
 8006378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800637c:	4616      	mov	r6, r2
 800637e:	4698      	mov	r8, r3
 8006380:	688a      	ldr	r2, [r1, #8]
 8006382:	690b      	ldr	r3, [r1, #16]
 8006384:	4607      	mov	r7, r0
 8006386:	4293      	cmp	r3, r2
 8006388:	bfb8      	it	lt
 800638a:	4613      	movlt	r3, r2
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006392:	460c      	mov	r4, r1
 8006394:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006398:	b10a      	cbz	r2, 800639e <_printf_common+0x26>
 800639a:	3301      	adds	r3, #1
 800639c:	6033      	str	r3, [r6, #0]
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	0699      	lsls	r1, r3, #26
 80063a2:	bf42      	ittt	mi
 80063a4:	6833      	ldrmi	r3, [r6, #0]
 80063a6:	3302      	addmi	r3, #2
 80063a8:	6033      	strmi	r3, [r6, #0]
 80063aa:	6825      	ldr	r5, [r4, #0]
 80063ac:	f015 0506 	ands.w	r5, r5, #6
 80063b0:	d106      	bne.n	80063c0 <_printf_common+0x48>
 80063b2:	f104 0a19 	add.w	sl, r4, #25
 80063b6:	68e3      	ldr	r3, [r4, #12]
 80063b8:	6832      	ldr	r2, [r6, #0]
 80063ba:	1a9b      	subs	r3, r3, r2
 80063bc:	42ab      	cmp	r3, r5
 80063be:	dc2b      	bgt.n	8006418 <_printf_common+0xa0>
 80063c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063c4:	6822      	ldr	r2, [r4, #0]
 80063c6:	3b00      	subs	r3, #0
 80063c8:	bf18      	it	ne
 80063ca:	2301      	movne	r3, #1
 80063cc:	0692      	lsls	r2, r2, #26
 80063ce:	d430      	bmi.n	8006432 <_printf_common+0xba>
 80063d0:	4641      	mov	r1, r8
 80063d2:	4638      	mov	r0, r7
 80063d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063d8:	47c8      	blx	r9
 80063da:	3001      	adds	r0, #1
 80063dc:	d023      	beq.n	8006426 <_printf_common+0xae>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	6922      	ldr	r2, [r4, #16]
 80063e2:	f003 0306 	and.w	r3, r3, #6
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	bf14      	ite	ne
 80063ea:	2500      	movne	r5, #0
 80063ec:	6833      	ldreq	r3, [r6, #0]
 80063ee:	f04f 0600 	mov.w	r6, #0
 80063f2:	bf08      	it	eq
 80063f4:	68e5      	ldreq	r5, [r4, #12]
 80063f6:	f104 041a 	add.w	r4, r4, #26
 80063fa:	bf08      	it	eq
 80063fc:	1aed      	subeq	r5, r5, r3
 80063fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006402:	bf08      	it	eq
 8006404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006408:	4293      	cmp	r3, r2
 800640a:	bfc4      	itt	gt
 800640c:	1a9b      	subgt	r3, r3, r2
 800640e:	18ed      	addgt	r5, r5, r3
 8006410:	42b5      	cmp	r5, r6
 8006412:	d11a      	bne.n	800644a <_printf_common+0xd2>
 8006414:	2000      	movs	r0, #0
 8006416:	e008      	b.n	800642a <_printf_common+0xb2>
 8006418:	2301      	movs	r3, #1
 800641a:	4652      	mov	r2, sl
 800641c:	4641      	mov	r1, r8
 800641e:	4638      	mov	r0, r7
 8006420:	47c8      	blx	r9
 8006422:	3001      	adds	r0, #1
 8006424:	d103      	bne.n	800642e <_printf_common+0xb6>
 8006426:	f04f 30ff 	mov.w	r0, #4294967295
 800642a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642e:	3501      	adds	r5, #1
 8006430:	e7c1      	b.n	80063b6 <_printf_common+0x3e>
 8006432:	2030      	movs	r0, #48	@ 0x30
 8006434:	18e1      	adds	r1, r4, r3
 8006436:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006440:	4422      	add	r2, r4
 8006442:	3302      	adds	r3, #2
 8006444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006448:	e7c2      	b.n	80063d0 <_printf_common+0x58>
 800644a:	2301      	movs	r3, #1
 800644c:	4622      	mov	r2, r4
 800644e:	4641      	mov	r1, r8
 8006450:	4638      	mov	r0, r7
 8006452:	47c8      	blx	r9
 8006454:	3001      	adds	r0, #1
 8006456:	d0e6      	beq.n	8006426 <_printf_common+0xae>
 8006458:	3601      	adds	r6, #1
 800645a:	e7d9      	b.n	8006410 <_printf_common+0x98>

0800645c <_printf_i>:
 800645c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	7e0f      	ldrb	r7, [r1, #24]
 8006462:	4691      	mov	r9, r2
 8006464:	2f78      	cmp	r7, #120	@ 0x78
 8006466:	4680      	mov	r8, r0
 8006468:	460c      	mov	r4, r1
 800646a:	469a      	mov	sl, r3
 800646c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800646e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006472:	d807      	bhi.n	8006484 <_printf_i+0x28>
 8006474:	2f62      	cmp	r7, #98	@ 0x62
 8006476:	d80a      	bhi.n	800648e <_printf_i+0x32>
 8006478:	2f00      	cmp	r7, #0
 800647a:	f000 80d3 	beq.w	8006624 <_printf_i+0x1c8>
 800647e:	2f58      	cmp	r7, #88	@ 0x58
 8006480:	f000 80ba 	beq.w	80065f8 <_printf_i+0x19c>
 8006484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006488:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800648c:	e03a      	b.n	8006504 <_printf_i+0xa8>
 800648e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006492:	2b15      	cmp	r3, #21
 8006494:	d8f6      	bhi.n	8006484 <_printf_i+0x28>
 8006496:	a101      	add	r1, pc, #4	@ (adr r1, 800649c <_printf_i+0x40>)
 8006498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800649c:	080064f5 	.word	0x080064f5
 80064a0:	08006509 	.word	0x08006509
 80064a4:	08006485 	.word	0x08006485
 80064a8:	08006485 	.word	0x08006485
 80064ac:	08006485 	.word	0x08006485
 80064b0:	08006485 	.word	0x08006485
 80064b4:	08006509 	.word	0x08006509
 80064b8:	08006485 	.word	0x08006485
 80064bc:	08006485 	.word	0x08006485
 80064c0:	08006485 	.word	0x08006485
 80064c4:	08006485 	.word	0x08006485
 80064c8:	0800660b 	.word	0x0800660b
 80064cc:	08006533 	.word	0x08006533
 80064d0:	080065c5 	.word	0x080065c5
 80064d4:	08006485 	.word	0x08006485
 80064d8:	08006485 	.word	0x08006485
 80064dc:	0800662d 	.word	0x0800662d
 80064e0:	08006485 	.word	0x08006485
 80064e4:	08006533 	.word	0x08006533
 80064e8:	08006485 	.word	0x08006485
 80064ec:	08006485 	.word	0x08006485
 80064f0:	080065cd 	.word	0x080065cd
 80064f4:	6833      	ldr	r3, [r6, #0]
 80064f6:	1d1a      	adds	r2, r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6032      	str	r2, [r6, #0]
 80064fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006500:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006504:	2301      	movs	r3, #1
 8006506:	e09e      	b.n	8006646 <_printf_i+0x1ea>
 8006508:	6833      	ldr	r3, [r6, #0]
 800650a:	6820      	ldr	r0, [r4, #0]
 800650c:	1d19      	adds	r1, r3, #4
 800650e:	6031      	str	r1, [r6, #0]
 8006510:	0606      	lsls	r6, r0, #24
 8006512:	d501      	bpl.n	8006518 <_printf_i+0xbc>
 8006514:	681d      	ldr	r5, [r3, #0]
 8006516:	e003      	b.n	8006520 <_printf_i+0xc4>
 8006518:	0645      	lsls	r5, r0, #25
 800651a:	d5fb      	bpl.n	8006514 <_printf_i+0xb8>
 800651c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006520:	2d00      	cmp	r5, #0
 8006522:	da03      	bge.n	800652c <_printf_i+0xd0>
 8006524:	232d      	movs	r3, #45	@ 0x2d
 8006526:	426d      	negs	r5, r5
 8006528:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800652c:	230a      	movs	r3, #10
 800652e:	4859      	ldr	r0, [pc, #356]	@ (8006694 <_printf_i+0x238>)
 8006530:	e011      	b.n	8006556 <_printf_i+0xfa>
 8006532:	6821      	ldr	r1, [r4, #0]
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	0608      	lsls	r0, r1, #24
 8006538:	f853 5b04 	ldr.w	r5, [r3], #4
 800653c:	d402      	bmi.n	8006544 <_printf_i+0xe8>
 800653e:	0649      	lsls	r1, r1, #25
 8006540:	bf48      	it	mi
 8006542:	b2ad      	uxthmi	r5, r5
 8006544:	2f6f      	cmp	r7, #111	@ 0x6f
 8006546:	6033      	str	r3, [r6, #0]
 8006548:	bf14      	ite	ne
 800654a:	230a      	movne	r3, #10
 800654c:	2308      	moveq	r3, #8
 800654e:	4851      	ldr	r0, [pc, #324]	@ (8006694 <_printf_i+0x238>)
 8006550:	2100      	movs	r1, #0
 8006552:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006556:	6866      	ldr	r6, [r4, #4]
 8006558:	2e00      	cmp	r6, #0
 800655a:	bfa8      	it	ge
 800655c:	6821      	ldrge	r1, [r4, #0]
 800655e:	60a6      	str	r6, [r4, #8]
 8006560:	bfa4      	itt	ge
 8006562:	f021 0104 	bicge.w	r1, r1, #4
 8006566:	6021      	strge	r1, [r4, #0]
 8006568:	b90d      	cbnz	r5, 800656e <_printf_i+0x112>
 800656a:	2e00      	cmp	r6, #0
 800656c:	d04b      	beq.n	8006606 <_printf_i+0x1aa>
 800656e:	4616      	mov	r6, r2
 8006570:	fbb5 f1f3 	udiv	r1, r5, r3
 8006574:	fb03 5711 	mls	r7, r3, r1, r5
 8006578:	5dc7      	ldrb	r7, [r0, r7]
 800657a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800657e:	462f      	mov	r7, r5
 8006580:	42bb      	cmp	r3, r7
 8006582:	460d      	mov	r5, r1
 8006584:	d9f4      	bls.n	8006570 <_printf_i+0x114>
 8006586:	2b08      	cmp	r3, #8
 8006588:	d10b      	bne.n	80065a2 <_printf_i+0x146>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	07df      	lsls	r7, r3, #31
 800658e:	d508      	bpl.n	80065a2 <_printf_i+0x146>
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	6861      	ldr	r1, [r4, #4]
 8006594:	4299      	cmp	r1, r3
 8006596:	bfde      	ittt	le
 8006598:	2330      	movle	r3, #48	@ 0x30
 800659a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800659e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065a2:	1b92      	subs	r2, r2, r6
 80065a4:	6122      	str	r2, [r4, #16]
 80065a6:	464b      	mov	r3, r9
 80065a8:	4621      	mov	r1, r4
 80065aa:	4640      	mov	r0, r8
 80065ac:	f8cd a000 	str.w	sl, [sp]
 80065b0:	aa03      	add	r2, sp, #12
 80065b2:	f7ff fee1 	bl	8006378 <_printf_common>
 80065b6:	3001      	adds	r0, #1
 80065b8:	d14a      	bne.n	8006650 <_printf_i+0x1f4>
 80065ba:	f04f 30ff 	mov.w	r0, #4294967295
 80065be:	b004      	add	sp, #16
 80065c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	f043 0320 	orr.w	r3, r3, #32
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	2778      	movs	r7, #120	@ 0x78
 80065ce:	4832      	ldr	r0, [pc, #200]	@ (8006698 <_printf_i+0x23c>)
 80065d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	6831      	ldr	r1, [r6, #0]
 80065d8:	061f      	lsls	r7, r3, #24
 80065da:	f851 5b04 	ldr.w	r5, [r1], #4
 80065de:	d402      	bmi.n	80065e6 <_printf_i+0x18a>
 80065e0:	065f      	lsls	r7, r3, #25
 80065e2:	bf48      	it	mi
 80065e4:	b2ad      	uxthmi	r5, r5
 80065e6:	6031      	str	r1, [r6, #0]
 80065e8:	07d9      	lsls	r1, r3, #31
 80065ea:	bf44      	itt	mi
 80065ec:	f043 0320 	orrmi.w	r3, r3, #32
 80065f0:	6023      	strmi	r3, [r4, #0]
 80065f2:	b11d      	cbz	r5, 80065fc <_printf_i+0x1a0>
 80065f4:	2310      	movs	r3, #16
 80065f6:	e7ab      	b.n	8006550 <_printf_i+0xf4>
 80065f8:	4826      	ldr	r0, [pc, #152]	@ (8006694 <_printf_i+0x238>)
 80065fa:	e7e9      	b.n	80065d0 <_printf_i+0x174>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	f023 0320 	bic.w	r3, r3, #32
 8006602:	6023      	str	r3, [r4, #0]
 8006604:	e7f6      	b.n	80065f4 <_printf_i+0x198>
 8006606:	4616      	mov	r6, r2
 8006608:	e7bd      	b.n	8006586 <_printf_i+0x12a>
 800660a:	6833      	ldr	r3, [r6, #0]
 800660c:	6825      	ldr	r5, [r4, #0]
 800660e:	1d18      	adds	r0, r3, #4
 8006610:	6961      	ldr	r1, [r4, #20]
 8006612:	6030      	str	r0, [r6, #0]
 8006614:	062e      	lsls	r6, r5, #24
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	d501      	bpl.n	800661e <_printf_i+0x1c2>
 800661a:	6019      	str	r1, [r3, #0]
 800661c:	e002      	b.n	8006624 <_printf_i+0x1c8>
 800661e:	0668      	lsls	r0, r5, #25
 8006620:	d5fb      	bpl.n	800661a <_printf_i+0x1be>
 8006622:	8019      	strh	r1, [r3, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	4616      	mov	r6, r2
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	e7bc      	b.n	80065a6 <_printf_i+0x14a>
 800662c:	6833      	ldr	r3, [r6, #0]
 800662e:	2100      	movs	r1, #0
 8006630:	1d1a      	adds	r2, r3, #4
 8006632:	6032      	str	r2, [r6, #0]
 8006634:	681e      	ldr	r6, [r3, #0]
 8006636:	6862      	ldr	r2, [r4, #4]
 8006638:	4630      	mov	r0, r6
 800663a:	f000 fc82 	bl	8006f42 <memchr>
 800663e:	b108      	cbz	r0, 8006644 <_printf_i+0x1e8>
 8006640:	1b80      	subs	r0, r0, r6
 8006642:	6060      	str	r0, [r4, #4]
 8006644:	6863      	ldr	r3, [r4, #4]
 8006646:	6123      	str	r3, [r4, #16]
 8006648:	2300      	movs	r3, #0
 800664a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800664e:	e7aa      	b.n	80065a6 <_printf_i+0x14a>
 8006650:	4632      	mov	r2, r6
 8006652:	4649      	mov	r1, r9
 8006654:	4640      	mov	r0, r8
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	47d0      	blx	sl
 800665a:	3001      	adds	r0, #1
 800665c:	d0ad      	beq.n	80065ba <_printf_i+0x15e>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	079b      	lsls	r3, r3, #30
 8006662:	d413      	bmi.n	800668c <_printf_i+0x230>
 8006664:	68e0      	ldr	r0, [r4, #12]
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	4298      	cmp	r0, r3
 800666a:	bfb8      	it	lt
 800666c:	4618      	movlt	r0, r3
 800666e:	e7a6      	b.n	80065be <_printf_i+0x162>
 8006670:	2301      	movs	r3, #1
 8006672:	4632      	mov	r2, r6
 8006674:	4649      	mov	r1, r9
 8006676:	4640      	mov	r0, r8
 8006678:	47d0      	blx	sl
 800667a:	3001      	adds	r0, #1
 800667c:	d09d      	beq.n	80065ba <_printf_i+0x15e>
 800667e:	3501      	adds	r5, #1
 8006680:	68e3      	ldr	r3, [r4, #12]
 8006682:	9903      	ldr	r1, [sp, #12]
 8006684:	1a5b      	subs	r3, r3, r1
 8006686:	42ab      	cmp	r3, r5
 8006688:	dcf2      	bgt.n	8006670 <_printf_i+0x214>
 800668a:	e7eb      	b.n	8006664 <_printf_i+0x208>
 800668c:	2500      	movs	r5, #0
 800668e:	f104 0619 	add.w	r6, r4, #25
 8006692:	e7f5      	b.n	8006680 <_printf_i+0x224>
 8006694:	0800c2bf 	.word	0x0800c2bf
 8006698:	0800c2d0 	.word	0x0800c2d0

0800669c <_scanf_float>:
 800669c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	b087      	sub	sp, #28
 80066a2:	9303      	str	r3, [sp, #12]
 80066a4:	688b      	ldr	r3, [r1, #8]
 80066a6:	4617      	mov	r7, r2
 80066a8:	1e5a      	subs	r2, r3, #1
 80066aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80066ae:	bf82      	ittt	hi
 80066b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80066b4:	eb03 0b05 	addhi.w	fp, r3, r5
 80066b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80066bc:	460a      	mov	r2, r1
 80066be:	f04f 0500 	mov.w	r5, #0
 80066c2:	bf88      	it	hi
 80066c4:	608b      	strhi	r3, [r1, #8]
 80066c6:	680b      	ldr	r3, [r1, #0]
 80066c8:	4680      	mov	r8, r0
 80066ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80066ce:	f842 3b1c 	str.w	r3, [r2], #28
 80066d2:	460c      	mov	r4, r1
 80066d4:	bf98      	it	ls
 80066d6:	f04f 0b00 	movls.w	fp, #0
 80066da:	4616      	mov	r6, r2
 80066dc:	46aa      	mov	sl, r5
 80066de:	46a9      	mov	r9, r5
 80066e0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80066e4:	9201      	str	r2, [sp, #4]
 80066e6:	9502      	str	r5, [sp, #8]
 80066e8:	68a2      	ldr	r2, [r4, #8]
 80066ea:	b152      	cbz	r2, 8006702 <_scanf_float+0x66>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80066f2:	d865      	bhi.n	80067c0 <_scanf_float+0x124>
 80066f4:	2b40      	cmp	r3, #64	@ 0x40
 80066f6:	d83d      	bhi.n	8006774 <_scanf_float+0xd8>
 80066f8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80066fc:	b2c8      	uxtb	r0, r1
 80066fe:	280e      	cmp	r0, #14
 8006700:	d93b      	bls.n	800677a <_scanf_float+0xde>
 8006702:	f1b9 0f00 	cmp.w	r9, #0
 8006706:	d003      	beq.n	8006710 <_scanf_float+0x74>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006714:	f1ba 0f01 	cmp.w	sl, #1
 8006718:	f200 8118 	bhi.w	800694c <_scanf_float+0x2b0>
 800671c:	9b01      	ldr	r3, [sp, #4]
 800671e:	429e      	cmp	r6, r3
 8006720:	f200 8109 	bhi.w	8006936 <_scanf_float+0x29a>
 8006724:	2001      	movs	r0, #1
 8006726:	b007      	add	sp, #28
 8006728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006730:	2a0d      	cmp	r2, #13
 8006732:	d8e6      	bhi.n	8006702 <_scanf_float+0x66>
 8006734:	a101      	add	r1, pc, #4	@ (adr r1, 800673c <_scanf_float+0xa0>)
 8006736:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800673a:	bf00      	nop
 800673c:	08006883 	.word	0x08006883
 8006740:	08006703 	.word	0x08006703
 8006744:	08006703 	.word	0x08006703
 8006748:	08006703 	.word	0x08006703
 800674c:	080068e3 	.word	0x080068e3
 8006750:	080068bb 	.word	0x080068bb
 8006754:	08006703 	.word	0x08006703
 8006758:	08006703 	.word	0x08006703
 800675c:	08006891 	.word	0x08006891
 8006760:	08006703 	.word	0x08006703
 8006764:	08006703 	.word	0x08006703
 8006768:	08006703 	.word	0x08006703
 800676c:	08006703 	.word	0x08006703
 8006770:	08006849 	.word	0x08006849
 8006774:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006778:	e7da      	b.n	8006730 <_scanf_float+0x94>
 800677a:	290e      	cmp	r1, #14
 800677c:	d8c1      	bhi.n	8006702 <_scanf_float+0x66>
 800677e:	a001      	add	r0, pc, #4	@ (adr r0, 8006784 <_scanf_float+0xe8>)
 8006780:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006784:	08006839 	.word	0x08006839
 8006788:	08006703 	.word	0x08006703
 800678c:	08006839 	.word	0x08006839
 8006790:	080068cf 	.word	0x080068cf
 8006794:	08006703 	.word	0x08006703
 8006798:	080067e1 	.word	0x080067e1
 800679c:	0800681f 	.word	0x0800681f
 80067a0:	0800681f 	.word	0x0800681f
 80067a4:	0800681f 	.word	0x0800681f
 80067a8:	0800681f 	.word	0x0800681f
 80067ac:	0800681f 	.word	0x0800681f
 80067b0:	0800681f 	.word	0x0800681f
 80067b4:	0800681f 	.word	0x0800681f
 80067b8:	0800681f 	.word	0x0800681f
 80067bc:	0800681f 	.word	0x0800681f
 80067c0:	2b6e      	cmp	r3, #110	@ 0x6e
 80067c2:	d809      	bhi.n	80067d8 <_scanf_float+0x13c>
 80067c4:	2b60      	cmp	r3, #96	@ 0x60
 80067c6:	d8b1      	bhi.n	800672c <_scanf_float+0x90>
 80067c8:	2b54      	cmp	r3, #84	@ 0x54
 80067ca:	d07b      	beq.n	80068c4 <_scanf_float+0x228>
 80067cc:	2b59      	cmp	r3, #89	@ 0x59
 80067ce:	d198      	bne.n	8006702 <_scanf_float+0x66>
 80067d0:	2d07      	cmp	r5, #7
 80067d2:	d196      	bne.n	8006702 <_scanf_float+0x66>
 80067d4:	2508      	movs	r5, #8
 80067d6:	e02c      	b.n	8006832 <_scanf_float+0x196>
 80067d8:	2b74      	cmp	r3, #116	@ 0x74
 80067da:	d073      	beq.n	80068c4 <_scanf_float+0x228>
 80067dc:	2b79      	cmp	r3, #121	@ 0x79
 80067de:	e7f6      	b.n	80067ce <_scanf_float+0x132>
 80067e0:	6821      	ldr	r1, [r4, #0]
 80067e2:	05c8      	lsls	r0, r1, #23
 80067e4:	d51b      	bpl.n	800681e <_scanf_float+0x182>
 80067e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80067ea:	6021      	str	r1, [r4, #0]
 80067ec:	f109 0901 	add.w	r9, r9, #1
 80067f0:	f1bb 0f00 	cmp.w	fp, #0
 80067f4:	d003      	beq.n	80067fe <_scanf_float+0x162>
 80067f6:	3201      	adds	r2, #1
 80067f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067fc:	60a2      	str	r2, [r4, #8]
 80067fe:	68a3      	ldr	r3, [r4, #8]
 8006800:	3b01      	subs	r3, #1
 8006802:	60a3      	str	r3, [r4, #8]
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	3301      	adds	r3, #1
 8006808:	6123      	str	r3, [r4, #16]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3b01      	subs	r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	607b      	str	r3, [r7, #4]
 8006812:	f340 8087 	ble.w	8006924 <_scanf_float+0x288>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	e764      	b.n	80066e8 <_scanf_float+0x4c>
 800681e:	eb1a 0105 	adds.w	r1, sl, r5
 8006822:	f47f af6e 	bne.w	8006702 <_scanf_float+0x66>
 8006826:	460d      	mov	r5, r1
 8006828:	468a      	mov	sl, r1
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006830:	6022      	str	r2, [r4, #0]
 8006832:	f806 3b01 	strb.w	r3, [r6], #1
 8006836:	e7e2      	b.n	80067fe <_scanf_float+0x162>
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	0610      	lsls	r0, r2, #24
 800683c:	f57f af61 	bpl.w	8006702 <_scanf_float+0x66>
 8006840:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006844:	6022      	str	r2, [r4, #0]
 8006846:	e7f4      	b.n	8006832 <_scanf_float+0x196>
 8006848:	f1ba 0f00 	cmp.w	sl, #0
 800684c:	d10e      	bne.n	800686c <_scanf_float+0x1d0>
 800684e:	f1b9 0f00 	cmp.w	r9, #0
 8006852:	d10e      	bne.n	8006872 <_scanf_float+0x1d6>
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800685a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800685e:	d108      	bne.n	8006872 <_scanf_float+0x1d6>
 8006860:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006864:	f04f 0a01 	mov.w	sl, #1
 8006868:	6022      	str	r2, [r4, #0]
 800686a:	e7e2      	b.n	8006832 <_scanf_float+0x196>
 800686c:	f1ba 0f02 	cmp.w	sl, #2
 8006870:	d055      	beq.n	800691e <_scanf_float+0x282>
 8006872:	2d01      	cmp	r5, #1
 8006874:	d002      	beq.n	800687c <_scanf_float+0x1e0>
 8006876:	2d04      	cmp	r5, #4
 8006878:	f47f af43 	bne.w	8006702 <_scanf_float+0x66>
 800687c:	3501      	adds	r5, #1
 800687e:	b2ed      	uxtb	r5, r5
 8006880:	e7d7      	b.n	8006832 <_scanf_float+0x196>
 8006882:	f1ba 0f01 	cmp.w	sl, #1
 8006886:	f47f af3c 	bne.w	8006702 <_scanf_float+0x66>
 800688a:	f04f 0a02 	mov.w	sl, #2
 800688e:	e7d0      	b.n	8006832 <_scanf_float+0x196>
 8006890:	b97d      	cbnz	r5, 80068b2 <_scanf_float+0x216>
 8006892:	f1b9 0f00 	cmp.w	r9, #0
 8006896:	f47f af37 	bne.w	8006708 <_scanf_float+0x6c>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80068a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80068a4:	f040 8103 	bne.w	8006aae <_scanf_float+0x412>
 80068a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80068ac:	2501      	movs	r5, #1
 80068ae:	6022      	str	r2, [r4, #0]
 80068b0:	e7bf      	b.n	8006832 <_scanf_float+0x196>
 80068b2:	2d03      	cmp	r5, #3
 80068b4:	d0e2      	beq.n	800687c <_scanf_float+0x1e0>
 80068b6:	2d05      	cmp	r5, #5
 80068b8:	e7de      	b.n	8006878 <_scanf_float+0x1dc>
 80068ba:	2d02      	cmp	r5, #2
 80068bc:	f47f af21 	bne.w	8006702 <_scanf_float+0x66>
 80068c0:	2503      	movs	r5, #3
 80068c2:	e7b6      	b.n	8006832 <_scanf_float+0x196>
 80068c4:	2d06      	cmp	r5, #6
 80068c6:	f47f af1c 	bne.w	8006702 <_scanf_float+0x66>
 80068ca:	2507      	movs	r5, #7
 80068cc:	e7b1      	b.n	8006832 <_scanf_float+0x196>
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	0591      	lsls	r1, r2, #22
 80068d2:	f57f af16 	bpl.w	8006702 <_scanf_float+0x66>
 80068d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80068da:	6022      	str	r2, [r4, #0]
 80068dc:	f8cd 9008 	str.w	r9, [sp, #8]
 80068e0:	e7a7      	b.n	8006832 <_scanf_float+0x196>
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80068e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80068ec:	d006      	beq.n	80068fc <_scanf_float+0x260>
 80068ee:	0550      	lsls	r0, r2, #21
 80068f0:	f57f af07 	bpl.w	8006702 <_scanf_float+0x66>
 80068f4:	f1b9 0f00 	cmp.w	r9, #0
 80068f8:	f000 80d9 	beq.w	8006aae <_scanf_float+0x412>
 80068fc:	0591      	lsls	r1, r2, #22
 80068fe:	bf58      	it	pl
 8006900:	9902      	ldrpl	r1, [sp, #8]
 8006902:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006906:	bf58      	it	pl
 8006908:	eba9 0101 	subpl.w	r1, r9, r1
 800690c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006910:	f04f 0900 	mov.w	r9, #0
 8006914:	bf58      	it	pl
 8006916:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800691a:	6022      	str	r2, [r4, #0]
 800691c:	e789      	b.n	8006832 <_scanf_float+0x196>
 800691e:	f04f 0a03 	mov.w	sl, #3
 8006922:	e786      	b.n	8006832 <_scanf_float+0x196>
 8006924:	4639      	mov	r1, r7
 8006926:	4640      	mov	r0, r8
 8006928:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800692c:	4798      	blx	r3
 800692e:	2800      	cmp	r0, #0
 8006930:	f43f aeda 	beq.w	80066e8 <_scanf_float+0x4c>
 8006934:	e6e5      	b.n	8006702 <_scanf_float+0x66>
 8006936:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800693a:	463a      	mov	r2, r7
 800693c:	4640      	mov	r0, r8
 800693e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006942:	4798      	blx	r3
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	3b01      	subs	r3, #1
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	e6e7      	b.n	800671c <_scanf_float+0x80>
 800694c:	1e6b      	subs	r3, r5, #1
 800694e:	2b06      	cmp	r3, #6
 8006950:	d824      	bhi.n	800699c <_scanf_float+0x300>
 8006952:	2d02      	cmp	r5, #2
 8006954:	d836      	bhi.n	80069c4 <_scanf_float+0x328>
 8006956:	9b01      	ldr	r3, [sp, #4]
 8006958:	429e      	cmp	r6, r3
 800695a:	f67f aee3 	bls.w	8006724 <_scanf_float+0x88>
 800695e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006962:	463a      	mov	r2, r7
 8006964:	4640      	mov	r0, r8
 8006966:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800696a:	4798      	blx	r3
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	3b01      	subs	r3, #1
 8006970:	6123      	str	r3, [r4, #16]
 8006972:	e7f0      	b.n	8006956 <_scanf_float+0x2ba>
 8006974:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006978:	463a      	mov	r2, r7
 800697a:	4640      	mov	r0, r8
 800697c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006980:	4798      	blx	r3
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	3b01      	subs	r3, #1
 8006986:	6123      	str	r3, [r4, #16]
 8006988:	f10a 3aff 	add.w	sl, sl, #4294967295
 800698c:	fa5f fa8a 	uxtb.w	sl, sl
 8006990:	f1ba 0f02 	cmp.w	sl, #2
 8006994:	d1ee      	bne.n	8006974 <_scanf_float+0x2d8>
 8006996:	3d03      	subs	r5, #3
 8006998:	b2ed      	uxtb	r5, r5
 800699a:	1b76      	subs	r6, r6, r5
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	05da      	lsls	r2, r3, #23
 80069a0:	d530      	bpl.n	8006a04 <_scanf_float+0x368>
 80069a2:	055b      	lsls	r3, r3, #21
 80069a4:	d511      	bpl.n	80069ca <_scanf_float+0x32e>
 80069a6:	9b01      	ldr	r3, [sp, #4]
 80069a8:	429e      	cmp	r6, r3
 80069aa:	f67f aebb 	bls.w	8006724 <_scanf_float+0x88>
 80069ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069b2:	463a      	mov	r2, r7
 80069b4:	4640      	mov	r0, r8
 80069b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069ba:	4798      	blx	r3
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	3b01      	subs	r3, #1
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	e7f0      	b.n	80069a6 <_scanf_float+0x30a>
 80069c4:	46aa      	mov	sl, r5
 80069c6:	46b3      	mov	fp, r6
 80069c8:	e7de      	b.n	8006988 <_scanf_float+0x2ec>
 80069ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	2965      	cmp	r1, #101	@ 0x65
 80069d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80069d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80069da:	6123      	str	r3, [r4, #16]
 80069dc:	d00c      	beq.n	80069f8 <_scanf_float+0x35c>
 80069de:	2945      	cmp	r1, #69	@ 0x45
 80069e0:	d00a      	beq.n	80069f8 <_scanf_float+0x35c>
 80069e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069e6:	463a      	mov	r2, r7
 80069e8:	4640      	mov	r0, r8
 80069ea:	4798      	blx	r3
 80069ec:	6923      	ldr	r3, [r4, #16]
 80069ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	1eb5      	subs	r5, r6, #2
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	463a      	mov	r2, r7
 80069fa:	4640      	mov	r0, r8
 80069fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a00:	4798      	blx	r3
 8006a02:	462e      	mov	r6, r5
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	f012 0210 	ands.w	r2, r2, #16
 8006a0a:	d001      	beq.n	8006a10 <_scanf_float+0x374>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	e68a      	b.n	8006726 <_scanf_float+0x8a>
 8006a10:	7032      	strb	r2, [r6, #0]
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a1c:	d11c      	bne.n	8006a58 <_scanf_float+0x3bc>
 8006a1e:	9b02      	ldr	r3, [sp, #8]
 8006a20:	454b      	cmp	r3, r9
 8006a22:	eba3 0209 	sub.w	r2, r3, r9
 8006a26:	d123      	bne.n	8006a70 <_scanf_float+0x3d4>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	9901      	ldr	r1, [sp, #4]
 8006a2e:	f002 fcb7 	bl	80093a0 <_strtod_r>
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	6825      	ldr	r5, [r4, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f015 0f02 	tst.w	r5, #2
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	460f      	mov	r7, r1
 8006a40:	f103 0204 	add.w	r2, r3, #4
 8006a44:	d01f      	beq.n	8006a86 <_scanf_float+0x3ea>
 8006a46:	9903      	ldr	r1, [sp, #12]
 8006a48:	600a      	str	r2, [r1, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	e9c3 6700 	strd	r6, r7, [r3]
 8006a50:	68e3      	ldr	r3, [r4, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60e3      	str	r3, [r4, #12]
 8006a56:	e7d9      	b.n	8006a0c <_scanf_float+0x370>
 8006a58:	9b04      	ldr	r3, [sp, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0e4      	beq.n	8006a28 <_scanf_float+0x38c>
 8006a5e:	9905      	ldr	r1, [sp, #20]
 8006a60:	230a      	movs	r3, #10
 8006a62:	4640      	mov	r0, r8
 8006a64:	3101      	adds	r1, #1
 8006a66:	f7ff f9b1 	bl	8005dcc <_strtol_r>
 8006a6a:	9b04      	ldr	r3, [sp, #16]
 8006a6c:	9e05      	ldr	r6, [sp, #20]
 8006a6e:	1ac2      	subs	r2, r0, r3
 8006a70:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006a74:	429e      	cmp	r6, r3
 8006a76:	bf28      	it	cs
 8006a78:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	490d      	ldr	r1, [pc, #52]	@ (8006ab4 <_scanf_float+0x418>)
 8006a80:	f000 f8de 	bl	8006c40 <siprintf>
 8006a84:	e7d0      	b.n	8006a28 <_scanf_float+0x38c>
 8006a86:	076d      	lsls	r5, r5, #29
 8006a88:	d4dd      	bmi.n	8006a46 <_scanf_float+0x3aa>
 8006a8a:	9d03      	ldr	r5, [sp, #12]
 8006a8c:	602a      	str	r2, [r5, #0]
 8006a8e:	681d      	ldr	r5, [r3, #0]
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	f7fa f86e 	bl	8000b74 <__aeabi_dcmpun>
 8006a98:	b120      	cbz	r0, 8006aa4 <_scanf_float+0x408>
 8006a9a:	4807      	ldr	r0, [pc, #28]	@ (8006ab8 <_scanf_float+0x41c>)
 8006a9c:	f000 fa6e 	bl	8006f7c <nanf>
 8006aa0:	6028      	str	r0, [r5, #0]
 8006aa2:	e7d5      	b.n	8006a50 <_scanf_float+0x3b4>
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f7fa f8c2 	bl	8000c30 <__aeabi_d2f>
 8006aac:	e7f8      	b.n	8006aa0 <_scanf_float+0x404>
 8006aae:	f04f 0900 	mov.w	r9, #0
 8006ab2:	e62d      	b.n	8006710 <_scanf_float+0x74>
 8006ab4:	0800c2e1 	.word	0x0800c2e1
 8006ab8:	0800c392 	.word	0x0800c392

08006abc <std>:
 8006abc:	2300      	movs	r3, #0
 8006abe:	b510      	push	{r4, lr}
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aca:	6083      	str	r3, [r0, #8]
 8006acc:	8181      	strh	r1, [r0, #12]
 8006ace:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ad0:	81c2      	strh	r2, [r0, #14]
 8006ad2:	6183      	str	r3, [r0, #24]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	2208      	movs	r2, #8
 8006ad8:	305c      	adds	r0, #92	@ 0x5c
 8006ada:	f000 f914 	bl	8006d06 <memset>
 8006ade:	4b0d      	ldr	r3, [pc, #52]	@ (8006b14 <std+0x58>)
 8006ae0:	6224      	str	r4, [r4, #32]
 8006ae2:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b18 <std+0x5c>)
 8006ae6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b1c <std+0x60>)
 8006aea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006aec:	4b0c      	ldr	r3, [pc, #48]	@ (8006b20 <std+0x64>)
 8006aee:	6323      	str	r3, [r4, #48]	@ 0x30
 8006af0:	4b0c      	ldr	r3, [pc, #48]	@ (8006b24 <std+0x68>)
 8006af2:	429c      	cmp	r4, r3
 8006af4:	d006      	beq.n	8006b04 <std+0x48>
 8006af6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006afa:	4294      	cmp	r4, r2
 8006afc:	d002      	beq.n	8006b04 <std+0x48>
 8006afe:	33d0      	adds	r3, #208	@ 0xd0
 8006b00:	429c      	cmp	r4, r3
 8006b02:	d105      	bne.n	8006b10 <std+0x54>
 8006b04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0c:	f000 ba0e 	b.w	8006f2c <__retarget_lock_init_recursive>
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	bf00      	nop
 8006b14:	08006c81 	.word	0x08006c81
 8006b18:	08006ca3 	.word	0x08006ca3
 8006b1c:	08006cdb 	.word	0x08006cdb
 8006b20:	08006cff 	.word	0x08006cff
 8006b24:	20000ac4 	.word	0x20000ac4

08006b28 <stdio_exit_handler>:
 8006b28:	4a02      	ldr	r2, [pc, #8]	@ (8006b34 <stdio_exit_handler+0xc>)
 8006b2a:	4903      	ldr	r1, [pc, #12]	@ (8006b38 <stdio_exit_handler+0x10>)
 8006b2c:	4803      	ldr	r0, [pc, #12]	@ (8006b3c <stdio_exit_handler+0x14>)
 8006b2e:	f000 b869 	b.w	8006c04 <_fwalk_sglue>
 8006b32:	bf00      	nop
 8006b34:	20000108 	.word	0x20000108
 8006b38:	0800975d 	.word	0x0800975d
 8006b3c:	20000118 	.word	0x20000118

08006b40 <cleanup_stdio>:
 8006b40:	6841      	ldr	r1, [r0, #4]
 8006b42:	4b0c      	ldr	r3, [pc, #48]	@ (8006b74 <cleanup_stdio+0x34>)
 8006b44:	b510      	push	{r4, lr}
 8006b46:	4299      	cmp	r1, r3
 8006b48:	4604      	mov	r4, r0
 8006b4a:	d001      	beq.n	8006b50 <cleanup_stdio+0x10>
 8006b4c:	f002 fe06 	bl	800975c <_fflush_r>
 8006b50:	68a1      	ldr	r1, [r4, #8]
 8006b52:	4b09      	ldr	r3, [pc, #36]	@ (8006b78 <cleanup_stdio+0x38>)
 8006b54:	4299      	cmp	r1, r3
 8006b56:	d002      	beq.n	8006b5e <cleanup_stdio+0x1e>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f002 fdff 	bl	800975c <_fflush_r>
 8006b5e:	68e1      	ldr	r1, [r4, #12]
 8006b60:	4b06      	ldr	r3, [pc, #24]	@ (8006b7c <cleanup_stdio+0x3c>)
 8006b62:	4299      	cmp	r1, r3
 8006b64:	d004      	beq.n	8006b70 <cleanup_stdio+0x30>
 8006b66:	4620      	mov	r0, r4
 8006b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b6c:	f002 bdf6 	b.w	800975c <_fflush_r>
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	20000ac4 	.word	0x20000ac4
 8006b78:	20000b2c 	.word	0x20000b2c
 8006b7c:	20000b94 	.word	0x20000b94

08006b80 <global_stdio_init.part.0>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <global_stdio_init.part.0+0x30>)
 8006b84:	4c0b      	ldr	r4, [pc, #44]	@ (8006bb4 <global_stdio_init.part.0+0x34>)
 8006b86:	4a0c      	ldr	r2, [pc, #48]	@ (8006bb8 <global_stdio_init.part.0+0x38>)
 8006b88:	4620      	mov	r0, r4
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	2104      	movs	r1, #4
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f7ff ff94 	bl	8006abc <std>
 8006b94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b98:	2201      	movs	r2, #1
 8006b9a:	2109      	movs	r1, #9
 8006b9c:	f7ff ff8e 	bl	8006abc <std>
 8006ba0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006baa:	2112      	movs	r1, #18
 8006bac:	f7ff bf86 	b.w	8006abc <std>
 8006bb0:	20000bfc 	.word	0x20000bfc
 8006bb4:	20000ac4 	.word	0x20000ac4
 8006bb8:	08006b29 	.word	0x08006b29

08006bbc <__sfp_lock_acquire>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	@ (8006bc4 <__sfp_lock_acquire+0x8>)
 8006bbe:	f000 b9b6 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	20000c05 	.word	0x20000c05

08006bc8 <__sfp_lock_release>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	@ (8006bd0 <__sfp_lock_release+0x8>)
 8006bca:	f000 b9b1 	b.w	8006f30 <__retarget_lock_release_recursive>
 8006bce:	bf00      	nop
 8006bd0:	20000c05 	.word	0x20000c05

08006bd4 <__sinit>:
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	f7ff fff0 	bl	8006bbc <__sfp_lock_acquire>
 8006bdc:	6a23      	ldr	r3, [r4, #32]
 8006bde:	b11b      	cbz	r3, 8006be8 <__sinit+0x14>
 8006be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be4:	f7ff bff0 	b.w	8006bc8 <__sfp_lock_release>
 8006be8:	4b04      	ldr	r3, [pc, #16]	@ (8006bfc <__sinit+0x28>)
 8006bea:	6223      	str	r3, [r4, #32]
 8006bec:	4b04      	ldr	r3, [pc, #16]	@ (8006c00 <__sinit+0x2c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f5      	bne.n	8006be0 <__sinit+0xc>
 8006bf4:	f7ff ffc4 	bl	8006b80 <global_stdio_init.part.0>
 8006bf8:	e7f2      	b.n	8006be0 <__sinit+0xc>
 8006bfa:	bf00      	nop
 8006bfc:	08006b41 	.word	0x08006b41
 8006c00:	20000bfc 	.word	0x20000bfc

08006c04 <_fwalk_sglue>:
 8006c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c08:	4607      	mov	r7, r0
 8006c0a:	4688      	mov	r8, r1
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	2600      	movs	r6, #0
 8006c10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c14:	f1b9 0901 	subs.w	r9, r9, #1
 8006c18:	d505      	bpl.n	8006c26 <_fwalk_sglue+0x22>
 8006c1a:	6824      	ldr	r4, [r4, #0]
 8006c1c:	2c00      	cmp	r4, #0
 8006c1e:	d1f7      	bne.n	8006c10 <_fwalk_sglue+0xc>
 8006c20:	4630      	mov	r0, r6
 8006c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c26:	89ab      	ldrh	r3, [r5, #12]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d907      	bls.n	8006c3c <_fwalk_sglue+0x38>
 8006c2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c30:	3301      	adds	r3, #1
 8006c32:	d003      	beq.n	8006c3c <_fwalk_sglue+0x38>
 8006c34:	4629      	mov	r1, r5
 8006c36:	4638      	mov	r0, r7
 8006c38:	47c0      	blx	r8
 8006c3a:	4306      	orrs	r6, r0
 8006c3c:	3568      	adds	r5, #104	@ 0x68
 8006c3e:	e7e9      	b.n	8006c14 <_fwalk_sglue+0x10>

08006c40 <siprintf>:
 8006c40:	b40e      	push	{r1, r2, r3}
 8006c42:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c46:	b500      	push	{lr}
 8006c48:	b09c      	sub	sp, #112	@ 0x70
 8006c4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c4c:	9002      	str	r0, [sp, #8]
 8006c4e:	9006      	str	r0, [sp, #24]
 8006c50:	9107      	str	r1, [sp, #28]
 8006c52:	9104      	str	r1, [sp, #16]
 8006c54:	4808      	ldr	r0, [pc, #32]	@ (8006c78 <siprintf+0x38>)
 8006c56:	4909      	ldr	r1, [pc, #36]	@ (8006c7c <siprintf+0x3c>)
 8006c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c5c:	9105      	str	r1, [sp, #20]
 8006c5e:	6800      	ldr	r0, [r0, #0]
 8006c60:	a902      	add	r1, sp, #8
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	f002 fbfe 	bl	8009464 <_svfiprintf_r>
 8006c68:	2200      	movs	r2, #0
 8006c6a:	9b02      	ldr	r3, [sp, #8]
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	b01c      	add	sp, #112	@ 0x70
 8006c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c74:	b003      	add	sp, #12
 8006c76:	4770      	bx	lr
 8006c78:	20000114 	.word	0x20000114
 8006c7c:	ffff0208 	.word	0xffff0208

08006c80 <__sread>:
 8006c80:	b510      	push	{r4, lr}
 8006c82:	460c      	mov	r4, r1
 8006c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c88:	f000 f902 	bl	8006e90 <_read_r>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	bfab      	itete	ge
 8006c90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c92:	89a3      	ldrhlt	r3, [r4, #12]
 8006c94:	181b      	addge	r3, r3, r0
 8006c96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c9a:	bfac      	ite	ge
 8006c9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c9e:	81a3      	strhlt	r3, [r4, #12]
 8006ca0:	bd10      	pop	{r4, pc}

08006ca2 <__swrite>:
 8006ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca6:	461f      	mov	r7, r3
 8006ca8:	898b      	ldrh	r3, [r1, #12]
 8006caa:	4605      	mov	r5, r0
 8006cac:	05db      	lsls	r3, r3, #23
 8006cae:	460c      	mov	r4, r1
 8006cb0:	4616      	mov	r6, r2
 8006cb2:	d505      	bpl.n	8006cc0 <__swrite+0x1e>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbc:	f000 f8d6 	bl	8006e6c <_lseek_r>
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	4632      	mov	r2, r6
 8006cc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cc8:	81a3      	strh	r3, [r4, #12]
 8006cca:	4628      	mov	r0, r5
 8006ccc:	463b      	mov	r3, r7
 8006cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd6:	f000 b8ed 	b.w	8006eb4 <_write_r>

08006cda <__sseek>:
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	460c      	mov	r4, r1
 8006cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce2:	f000 f8c3 	bl	8006e6c <_lseek_r>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	bf15      	itete	ne
 8006cec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cf6:	81a3      	strheq	r3, [r4, #12]
 8006cf8:	bf18      	it	ne
 8006cfa:	81a3      	strhne	r3, [r4, #12]
 8006cfc:	bd10      	pop	{r4, pc}

08006cfe <__sclose>:
 8006cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d02:	f000 b8a3 	b.w	8006e4c <_close_r>

08006d06 <memset>:
 8006d06:	4603      	mov	r3, r0
 8006d08:	4402      	add	r2, r0
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d100      	bne.n	8006d10 <memset+0xa>
 8006d0e:	4770      	bx	lr
 8006d10:	f803 1b01 	strb.w	r1, [r3], #1
 8006d14:	e7f9      	b.n	8006d0a <memset+0x4>

08006d16 <strcspn>:
 8006d16:	4603      	mov	r3, r0
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	461e      	mov	r6, r3
 8006d1c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8006d20:	b144      	cbz	r4, 8006d34 <strcspn+0x1e>
 8006d22:	1e4a      	subs	r2, r1, #1
 8006d24:	e001      	b.n	8006d2a <strcspn+0x14>
 8006d26:	42a5      	cmp	r5, r4
 8006d28:	d004      	beq.n	8006d34 <strcspn+0x1e>
 8006d2a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006d2e:	2d00      	cmp	r5, #0
 8006d30:	d1f9      	bne.n	8006d26 <strcspn+0x10>
 8006d32:	e7f2      	b.n	8006d1a <strcspn+0x4>
 8006d34:	1a30      	subs	r0, r6, r0
 8006d36:	bd70      	pop	{r4, r5, r6, pc}

08006d38 <strncpy>:
 8006d38:	4603      	mov	r3, r0
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	3901      	subs	r1, #1
 8006d3e:	b132      	cbz	r2, 8006d4e <strncpy+0x16>
 8006d40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d44:	3a01      	subs	r2, #1
 8006d46:	f803 4b01 	strb.w	r4, [r3], #1
 8006d4a:	2c00      	cmp	r4, #0
 8006d4c:	d1f7      	bne.n	8006d3e <strncpy+0x6>
 8006d4e:	2100      	movs	r1, #0
 8006d50:	441a      	add	r2, r3
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d100      	bne.n	8006d58 <strncpy+0x20>
 8006d56:	bd10      	pop	{r4, pc}
 8006d58:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5c:	e7f9      	b.n	8006d52 <strncpy+0x1a>
	...

08006d60 <strtok>:
 8006d60:	4b16      	ldr	r3, [pc, #88]	@ (8006dbc <strtok+0x5c>)
 8006d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d66:	681f      	ldr	r7, [r3, #0]
 8006d68:	4605      	mov	r5, r0
 8006d6a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006d6c:	460e      	mov	r6, r1
 8006d6e:	b9ec      	cbnz	r4, 8006dac <strtok+0x4c>
 8006d70:	2050      	movs	r0, #80	@ 0x50
 8006d72:	f000 ffbd 	bl	8007cf0 <malloc>
 8006d76:	4602      	mov	r2, r0
 8006d78:	6478      	str	r0, [r7, #68]	@ 0x44
 8006d7a:	b920      	cbnz	r0, 8006d86 <strtok+0x26>
 8006d7c:	215b      	movs	r1, #91	@ 0x5b
 8006d7e:	4b10      	ldr	r3, [pc, #64]	@ (8006dc0 <strtok+0x60>)
 8006d80:	4810      	ldr	r0, [pc, #64]	@ (8006dc4 <strtok+0x64>)
 8006d82:	f000 f8ff 	bl	8006f84 <__assert_func>
 8006d86:	e9c0 4400 	strd	r4, r4, [r0]
 8006d8a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006d8e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006d92:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006d96:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006d9a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006d9e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006da2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006da6:	6184      	str	r4, [r0, #24]
 8006da8:	7704      	strb	r4, [r0, #28]
 8006daa:	6244      	str	r4, [r0, #36]	@ 0x24
 8006dac:	4631      	mov	r1, r6
 8006dae:	4628      	mov	r0, r5
 8006db0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006db2:	2301      	movs	r3, #1
 8006db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006db8:	f000 b806 	b.w	8006dc8 <__strtok_r>
 8006dbc:	20000114 	.word	0x20000114
 8006dc0:	0800c2e6 	.word	0x0800c2e6
 8006dc4:	0800c2fd 	.word	0x0800c2fd

08006dc8 <__strtok_r>:
 8006dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dca:	4604      	mov	r4, r0
 8006dcc:	b908      	cbnz	r0, 8006dd2 <__strtok_r+0xa>
 8006dce:	6814      	ldr	r4, [r2, #0]
 8006dd0:	b144      	cbz	r4, 8006de4 <__strtok_r+0x1c>
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006dda:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006dde:	b91e      	cbnz	r6, 8006de8 <__strtok_r+0x20>
 8006de0:	b965      	cbnz	r5, 8006dfc <__strtok_r+0x34>
 8006de2:	6015      	str	r5, [r2, #0]
 8006de4:	2000      	movs	r0, #0
 8006de6:	e005      	b.n	8006df4 <__strtok_r+0x2c>
 8006de8:	42b5      	cmp	r5, r6
 8006dea:	d1f6      	bne.n	8006dda <__strtok_r+0x12>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1f0      	bne.n	8006dd2 <__strtok_r+0xa>
 8006df0:	6014      	str	r4, [r2, #0]
 8006df2:	7003      	strb	r3, [r0, #0]
 8006df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006df6:	461c      	mov	r4, r3
 8006df8:	e00c      	b.n	8006e14 <__strtok_r+0x4c>
 8006dfa:	b915      	cbnz	r5, 8006e02 <__strtok_r+0x3a>
 8006dfc:	460e      	mov	r6, r1
 8006dfe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e02:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006e06:	42ab      	cmp	r3, r5
 8006e08:	d1f7      	bne.n	8006dfa <__strtok_r+0x32>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0f3      	beq.n	8006df6 <__strtok_r+0x2e>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e14:	6014      	str	r4, [r2, #0]
 8006e16:	e7ed      	b.n	8006df4 <__strtok_r+0x2c>

08006e18 <strstr>:
 8006e18:	780a      	ldrb	r2, [r1, #0]
 8006e1a:	b570      	push	{r4, r5, r6, lr}
 8006e1c:	b96a      	cbnz	r2, 8006e3a <strstr+0x22>
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d109      	bne.n	8006e38 <strstr+0x20>
 8006e24:	460c      	mov	r4, r1
 8006e26:	4605      	mov	r5, r0
 8006e28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0f6      	beq.n	8006e1e <strstr+0x6>
 8006e30:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006e34:	429e      	cmp	r6, r3
 8006e36:	d0f7      	beq.n	8006e28 <strstr+0x10>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	7803      	ldrb	r3, [r0, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1ef      	bne.n	8006e20 <strstr+0x8>
 8006e40:	4618      	mov	r0, r3
 8006e42:	e7ec      	b.n	8006e1e <strstr+0x6>

08006e44 <_localeconv_r>:
 8006e44:	4800      	ldr	r0, [pc, #0]	@ (8006e48 <_localeconv_r+0x4>)
 8006e46:	4770      	bx	lr
 8006e48:	20000254 	.word	0x20000254

08006e4c <_close_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	2300      	movs	r3, #0
 8006e50:	4d05      	ldr	r5, [pc, #20]	@ (8006e68 <_close_r+0x1c>)
 8006e52:	4604      	mov	r4, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	f7fc f89a 	bl	8002f90 <_close>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_close_r+0x1a>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_close_r+0x1a>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	20000c00 	.word	0x20000c00

08006e6c <_lseek_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	2200      	movs	r2, #0
 8006e76:	4d05      	ldr	r5, [pc, #20]	@ (8006e8c <_lseek_r+0x20>)
 8006e78:	602a      	str	r2, [r5, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f7fc f892 	bl	8002fa4 <_lseek>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_lseek_r+0x1e>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_lseek_r+0x1e>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	20000c00 	.word	0x20000c00

08006e90 <_read_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4d05      	ldr	r5, [pc, #20]	@ (8006eb0 <_read_r+0x20>)
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f7fc f85c 	bl	8002f5c <_read>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_read_r+0x1e>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_read_r+0x1e>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20000c00 	.word	0x20000c00

08006eb4 <_write_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	4608      	mov	r0, r1
 8006eba:	4611      	mov	r1, r2
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4d05      	ldr	r5, [pc, #20]	@ (8006ed4 <_write_r+0x20>)
 8006ec0:	602a      	str	r2, [r5, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f7fc f857 	bl	8002f76 <_write>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_write_r+0x1e>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_write_r+0x1e>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	20000c00 	.word	0x20000c00

08006ed8 <__errno>:
 8006ed8:	4b01      	ldr	r3, [pc, #4]	@ (8006ee0 <__errno+0x8>)
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	20000114 	.word	0x20000114

08006ee4 <__libc_init_array>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	4d0c      	ldr	r5, [pc, #48]	@ (8006f1c <__libc_init_array+0x38>)
 8006eea:	4c0d      	ldr	r4, [pc, #52]	@ (8006f20 <__libc_init_array+0x3c>)
 8006eec:	1b64      	subs	r4, r4, r5
 8006eee:	10a4      	asrs	r4, r4, #2
 8006ef0:	42a6      	cmp	r6, r4
 8006ef2:	d109      	bne.n	8006f08 <__libc_init_array+0x24>
 8006ef4:	f003 faf4 	bl	800a4e0 <_init>
 8006ef8:	2600      	movs	r6, #0
 8006efa:	4d0a      	ldr	r5, [pc, #40]	@ (8006f24 <__libc_init_array+0x40>)
 8006efc:	4c0a      	ldr	r4, [pc, #40]	@ (8006f28 <__libc_init_array+0x44>)
 8006efe:	1b64      	subs	r4, r4, r5
 8006f00:	10a4      	asrs	r4, r4, #2
 8006f02:	42a6      	cmp	r6, r4
 8006f04:	d105      	bne.n	8006f12 <__libc_init_array+0x2e>
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0c:	4798      	blx	r3
 8006f0e:	3601      	adds	r6, #1
 8006f10:	e7ee      	b.n	8006ef0 <__libc_init_array+0xc>
 8006f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f16:	4798      	blx	r3
 8006f18:	3601      	adds	r6, #1
 8006f1a:	e7f2      	b.n	8006f02 <__libc_init_array+0x1e>
 8006f1c:	0800c63c 	.word	0x0800c63c
 8006f20:	0800c63c 	.word	0x0800c63c
 8006f24:	0800c63c 	.word	0x0800c63c
 8006f28:	0800c640 	.word	0x0800c640

08006f2c <__retarget_lock_init_recursive>:
 8006f2c:	4770      	bx	lr

08006f2e <__retarget_lock_acquire_recursive>:
 8006f2e:	4770      	bx	lr

08006f30 <__retarget_lock_release_recursive>:
 8006f30:	4770      	bx	lr

08006f32 <strcpy>:
 8006f32:	4603      	mov	r3, r0
 8006f34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f38:	f803 2b01 	strb.w	r2, [r3], #1
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	d1f9      	bne.n	8006f34 <strcpy+0x2>
 8006f40:	4770      	bx	lr

08006f42 <memchr>:
 8006f42:	4603      	mov	r3, r0
 8006f44:	b510      	push	{r4, lr}
 8006f46:	b2c9      	uxtb	r1, r1
 8006f48:	4402      	add	r2, r0
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	d101      	bne.n	8006f54 <memchr+0x12>
 8006f50:	2000      	movs	r0, #0
 8006f52:	e003      	b.n	8006f5c <memchr+0x1a>
 8006f54:	7804      	ldrb	r4, [r0, #0]
 8006f56:	3301      	adds	r3, #1
 8006f58:	428c      	cmp	r4, r1
 8006f5a:	d1f6      	bne.n	8006f4a <memchr+0x8>
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <memcpy>:
 8006f5e:	440a      	add	r2, r1
 8006f60:	4291      	cmp	r1, r2
 8006f62:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f66:	d100      	bne.n	8006f6a <memcpy+0xc>
 8006f68:	4770      	bx	lr
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f70:	4291      	cmp	r1, r2
 8006f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f76:	d1f9      	bne.n	8006f6c <memcpy+0xe>
 8006f78:	bd10      	pop	{r4, pc}
	...

08006f7c <nanf>:
 8006f7c:	4800      	ldr	r0, [pc, #0]	@ (8006f80 <nanf+0x4>)
 8006f7e:	4770      	bx	lr
 8006f80:	7fc00000 	.word	0x7fc00000

08006f84 <__assert_func>:
 8006f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f86:	4614      	mov	r4, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <__assert_func+0x2c>)
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68d8      	ldr	r0, [r3, #12]
 8006f92:	b954      	cbnz	r4, 8006faa <__assert_func+0x26>
 8006f94:	4b07      	ldr	r3, [pc, #28]	@ (8006fb4 <__assert_func+0x30>)
 8006f96:	461c      	mov	r4, r3
 8006f98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f9c:	9100      	str	r1, [sp, #0]
 8006f9e:	462b      	mov	r3, r5
 8006fa0:	4905      	ldr	r1, [pc, #20]	@ (8006fb8 <__assert_func+0x34>)
 8006fa2:	f002 fc03 	bl	80097ac <fiprintf>
 8006fa6:	f002 fc55 	bl	8009854 <abort>
 8006faa:	4b04      	ldr	r3, [pc, #16]	@ (8006fbc <__assert_func+0x38>)
 8006fac:	e7f4      	b.n	8006f98 <__assert_func+0x14>
 8006fae:	bf00      	nop
 8006fb0:	20000114 	.word	0x20000114
 8006fb4:	0800c392 	.word	0x0800c392
 8006fb8:	0800c364 	.word	0x0800c364
 8006fbc:	0800c357 	.word	0x0800c357

08006fc0 <quorem>:
 8006fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	6903      	ldr	r3, [r0, #16]
 8006fc6:	690c      	ldr	r4, [r1, #16]
 8006fc8:	4607      	mov	r7, r0
 8006fca:	42a3      	cmp	r3, r4
 8006fcc:	db7e      	blt.n	80070cc <quorem+0x10c>
 8006fce:	3c01      	subs	r4, #1
 8006fd0:	00a3      	lsls	r3, r4, #2
 8006fd2:	f100 0514 	add.w	r5, r0, #20
 8006fd6:	f101 0814 	add.w	r8, r1, #20
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fea:	3301      	adds	r3, #1
 8006fec:	429a      	cmp	r2, r3
 8006fee:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ff2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ff6:	d32e      	bcc.n	8007056 <quorem+0x96>
 8006ff8:	f04f 0a00 	mov.w	sl, #0
 8006ffc:	46c4      	mov	ip, r8
 8006ffe:	46ae      	mov	lr, r5
 8007000:	46d3      	mov	fp, sl
 8007002:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007006:	b298      	uxth	r0, r3
 8007008:	fb06 a000 	mla	r0, r6, r0, sl
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	0c02      	lsrs	r2, r0, #16
 8007010:	fb06 2303 	mla	r3, r6, r3, r2
 8007014:	f8de 2000 	ldr.w	r2, [lr]
 8007018:	b280      	uxth	r0, r0
 800701a:	b292      	uxth	r2, r2
 800701c:	1a12      	subs	r2, r2, r0
 800701e:	445a      	add	r2, fp
 8007020:	f8de 0000 	ldr.w	r0, [lr]
 8007024:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007028:	b29b      	uxth	r3, r3
 800702a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800702e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007032:	b292      	uxth	r2, r2
 8007034:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007038:	45e1      	cmp	r9, ip
 800703a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800703e:	f84e 2b04 	str.w	r2, [lr], #4
 8007042:	d2de      	bcs.n	8007002 <quorem+0x42>
 8007044:	9b00      	ldr	r3, [sp, #0]
 8007046:	58eb      	ldr	r3, [r5, r3]
 8007048:	b92b      	cbnz	r3, 8007056 <quorem+0x96>
 800704a:	9b01      	ldr	r3, [sp, #4]
 800704c:	3b04      	subs	r3, #4
 800704e:	429d      	cmp	r5, r3
 8007050:	461a      	mov	r2, r3
 8007052:	d32f      	bcc.n	80070b4 <quorem+0xf4>
 8007054:	613c      	str	r4, [r7, #16]
 8007056:	4638      	mov	r0, r7
 8007058:	f001 f9c2 	bl	80083e0 <__mcmp>
 800705c:	2800      	cmp	r0, #0
 800705e:	db25      	blt.n	80070ac <quorem+0xec>
 8007060:	4629      	mov	r1, r5
 8007062:	2000      	movs	r0, #0
 8007064:	f858 2b04 	ldr.w	r2, [r8], #4
 8007068:	f8d1 c000 	ldr.w	ip, [r1]
 800706c:	fa1f fe82 	uxth.w	lr, r2
 8007070:	fa1f f38c 	uxth.w	r3, ip
 8007074:	eba3 030e 	sub.w	r3, r3, lr
 8007078:	4403      	add	r3, r0
 800707a:	0c12      	lsrs	r2, r2, #16
 800707c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007080:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007084:	b29b      	uxth	r3, r3
 8007086:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800708a:	45c1      	cmp	r9, r8
 800708c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007090:	f841 3b04 	str.w	r3, [r1], #4
 8007094:	d2e6      	bcs.n	8007064 <quorem+0xa4>
 8007096:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800709a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800709e:	b922      	cbnz	r2, 80070aa <quorem+0xea>
 80070a0:	3b04      	subs	r3, #4
 80070a2:	429d      	cmp	r5, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	d30b      	bcc.n	80070c0 <quorem+0x100>
 80070a8:	613c      	str	r4, [r7, #16]
 80070aa:	3601      	adds	r6, #1
 80070ac:	4630      	mov	r0, r6
 80070ae:	b003      	add	sp, #12
 80070b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	3b04      	subs	r3, #4
 80070b8:	2a00      	cmp	r2, #0
 80070ba:	d1cb      	bne.n	8007054 <quorem+0x94>
 80070bc:	3c01      	subs	r4, #1
 80070be:	e7c6      	b.n	800704e <quorem+0x8e>
 80070c0:	6812      	ldr	r2, [r2, #0]
 80070c2:	3b04      	subs	r3, #4
 80070c4:	2a00      	cmp	r2, #0
 80070c6:	d1ef      	bne.n	80070a8 <quorem+0xe8>
 80070c8:	3c01      	subs	r4, #1
 80070ca:	e7ea      	b.n	80070a2 <quorem+0xe2>
 80070cc:	2000      	movs	r0, #0
 80070ce:	e7ee      	b.n	80070ae <quorem+0xee>

080070d0 <_dtoa_r>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	4614      	mov	r4, r2
 80070d6:	461d      	mov	r5, r3
 80070d8:	69c7      	ldr	r7, [r0, #28]
 80070da:	b097      	sub	sp, #92	@ 0x5c
 80070dc:	4683      	mov	fp, r0
 80070de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80070e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80070e4:	b97f      	cbnz	r7, 8007106 <_dtoa_r+0x36>
 80070e6:	2010      	movs	r0, #16
 80070e8:	f000 fe02 	bl	8007cf0 <malloc>
 80070ec:	4602      	mov	r2, r0
 80070ee:	f8cb 001c 	str.w	r0, [fp, #28]
 80070f2:	b920      	cbnz	r0, 80070fe <_dtoa_r+0x2e>
 80070f4:	21ef      	movs	r1, #239	@ 0xef
 80070f6:	4ba8      	ldr	r3, [pc, #672]	@ (8007398 <_dtoa_r+0x2c8>)
 80070f8:	48a8      	ldr	r0, [pc, #672]	@ (800739c <_dtoa_r+0x2cc>)
 80070fa:	f7ff ff43 	bl	8006f84 <__assert_func>
 80070fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007102:	6007      	str	r7, [r0, #0]
 8007104:	60c7      	str	r7, [r0, #12]
 8007106:	f8db 301c 	ldr.w	r3, [fp, #28]
 800710a:	6819      	ldr	r1, [r3, #0]
 800710c:	b159      	cbz	r1, 8007126 <_dtoa_r+0x56>
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	2301      	movs	r3, #1
 8007112:	4093      	lsls	r3, r2
 8007114:	604a      	str	r2, [r1, #4]
 8007116:	608b      	str	r3, [r1, #8]
 8007118:	4658      	mov	r0, fp
 800711a:	f000 fedf 	bl	8007edc <_Bfree>
 800711e:	2200      	movs	r2, #0
 8007120:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	1e2b      	subs	r3, r5, #0
 8007128:	bfaf      	iteee	ge
 800712a:	2300      	movge	r3, #0
 800712c:	2201      	movlt	r2, #1
 800712e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007132:	9303      	strlt	r3, [sp, #12]
 8007134:	bfa8      	it	ge
 8007136:	6033      	strge	r3, [r6, #0]
 8007138:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800713c:	4b98      	ldr	r3, [pc, #608]	@ (80073a0 <_dtoa_r+0x2d0>)
 800713e:	bfb8      	it	lt
 8007140:	6032      	strlt	r2, [r6, #0]
 8007142:	ea33 0308 	bics.w	r3, r3, r8
 8007146:	d112      	bne.n	800716e <_dtoa_r+0x9e>
 8007148:	f242 730f 	movw	r3, #9999	@ 0x270f
 800714c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007154:	4323      	orrs	r3, r4
 8007156:	f000 8550 	beq.w	8007bfa <_dtoa_r+0xb2a>
 800715a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800715c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80073a4 <_dtoa_r+0x2d4>
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 8552 	beq.w	8007c0a <_dtoa_r+0xb3a>
 8007166:	f10a 0303 	add.w	r3, sl, #3
 800716a:	f000 bd4c 	b.w	8007c06 <_dtoa_r+0xb36>
 800716e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007172:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800717a:	2200      	movs	r2, #0
 800717c:	2300      	movs	r3, #0
 800717e:	f7f9 fcc7 	bl	8000b10 <__aeabi_dcmpeq>
 8007182:	4607      	mov	r7, r0
 8007184:	b158      	cbz	r0, 800719e <_dtoa_r+0xce>
 8007186:	2301      	movs	r3, #1
 8007188:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800718e:	b113      	cbz	r3, 8007196 <_dtoa_r+0xc6>
 8007190:	4b85      	ldr	r3, [pc, #532]	@ (80073a8 <_dtoa_r+0x2d8>)
 8007192:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80073ac <_dtoa_r+0x2dc>
 800719a:	f000 bd36 	b.w	8007c0a <_dtoa_r+0xb3a>
 800719e:	ab14      	add	r3, sp, #80	@ 0x50
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	ab15      	add	r3, sp, #84	@ 0x54
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	4658      	mov	r0, fp
 80071a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80071ac:	f001 fa30 	bl	8008610 <__d2b>
 80071b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80071b4:	4681      	mov	r9, r0
 80071b6:	2e00      	cmp	r6, #0
 80071b8:	d077      	beq.n	80072aa <_dtoa_r+0x1da>
 80071ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80071c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80071cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80071d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80071d2:	4619      	mov	r1, r3
 80071d4:	2200      	movs	r2, #0
 80071d6:	4b76      	ldr	r3, [pc, #472]	@ (80073b0 <_dtoa_r+0x2e0>)
 80071d8:	f7f9 f87a 	bl	80002d0 <__aeabi_dsub>
 80071dc:	a368      	add	r3, pc, #416	@ (adr r3, 8007380 <_dtoa_r+0x2b0>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f9 fa2d 	bl	8000640 <__aeabi_dmul>
 80071e6:	a368      	add	r3, pc, #416	@ (adr r3, 8007388 <_dtoa_r+0x2b8>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f9 f872 	bl	80002d4 <__adddf3>
 80071f0:	4604      	mov	r4, r0
 80071f2:	4630      	mov	r0, r6
 80071f4:	460d      	mov	r5, r1
 80071f6:	f7f9 f9b9 	bl	800056c <__aeabi_i2d>
 80071fa:	a365      	add	r3, pc, #404	@ (adr r3, 8007390 <_dtoa_r+0x2c0>)
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f7f9 fa1e 	bl	8000640 <__aeabi_dmul>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4620      	mov	r0, r4
 800720a:	4629      	mov	r1, r5
 800720c:	f7f9 f862 	bl	80002d4 <__adddf3>
 8007210:	4604      	mov	r4, r0
 8007212:	460d      	mov	r5, r1
 8007214:	f7f9 fcc4 	bl	8000ba0 <__aeabi_d2iz>
 8007218:	2200      	movs	r2, #0
 800721a:	4607      	mov	r7, r0
 800721c:	2300      	movs	r3, #0
 800721e:	4620      	mov	r0, r4
 8007220:	4629      	mov	r1, r5
 8007222:	f7f9 fc7f 	bl	8000b24 <__aeabi_dcmplt>
 8007226:	b140      	cbz	r0, 800723a <_dtoa_r+0x16a>
 8007228:	4638      	mov	r0, r7
 800722a:	f7f9 f99f 	bl	800056c <__aeabi_i2d>
 800722e:	4622      	mov	r2, r4
 8007230:	462b      	mov	r3, r5
 8007232:	f7f9 fc6d 	bl	8000b10 <__aeabi_dcmpeq>
 8007236:	b900      	cbnz	r0, 800723a <_dtoa_r+0x16a>
 8007238:	3f01      	subs	r7, #1
 800723a:	2f16      	cmp	r7, #22
 800723c:	d853      	bhi.n	80072e6 <_dtoa_r+0x216>
 800723e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007242:	4b5c      	ldr	r3, [pc, #368]	@ (80073b4 <_dtoa_r+0x2e4>)
 8007244:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f9 fc6a 	bl	8000b24 <__aeabi_dcmplt>
 8007250:	2800      	cmp	r0, #0
 8007252:	d04a      	beq.n	80072ea <_dtoa_r+0x21a>
 8007254:	2300      	movs	r3, #0
 8007256:	3f01      	subs	r7, #1
 8007258:	930f      	str	r3, [sp, #60]	@ 0x3c
 800725a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800725c:	1b9b      	subs	r3, r3, r6
 800725e:	1e5a      	subs	r2, r3, #1
 8007260:	bf46      	itte	mi
 8007262:	f1c3 0801 	rsbmi	r8, r3, #1
 8007266:	2300      	movmi	r3, #0
 8007268:	f04f 0800 	movpl.w	r8, #0
 800726c:	9209      	str	r2, [sp, #36]	@ 0x24
 800726e:	bf48      	it	mi
 8007270:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007272:	2f00      	cmp	r7, #0
 8007274:	db3b      	blt.n	80072ee <_dtoa_r+0x21e>
 8007276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007278:	970e      	str	r7, [sp, #56]	@ 0x38
 800727a:	443b      	add	r3, r7
 800727c:	9309      	str	r3, [sp, #36]	@ 0x24
 800727e:	2300      	movs	r3, #0
 8007280:	930a      	str	r3, [sp, #40]	@ 0x28
 8007282:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007284:	2b09      	cmp	r3, #9
 8007286:	d866      	bhi.n	8007356 <_dtoa_r+0x286>
 8007288:	2b05      	cmp	r3, #5
 800728a:	bfc4      	itt	gt
 800728c:	3b04      	subgt	r3, #4
 800728e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007290:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007292:	bfc8      	it	gt
 8007294:	2400      	movgt	r4, #0
 8007296:	f1a3 0302 	sub.w	r3, r3, #2
 800729a:	bfd8      	it	le
 800729c:	2401      	movle	r4, #1
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d864      	bhi.n	800736c <_dtoa_r+0x29c>
 80072a2:	e8df f003 	tbb	[pc, r3]
 80072a6:	382b      	.short	0x382b
 80072a8:	5636      	.short	0x5636
 80072aa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80072ae:	441e      	add	r6, r3
 80072b0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	bfc1      	itttt	gt
 80072b8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80072bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80072c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80072c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80072c8:	bfd6      	itet	le
 80072ca:	f1c3 0320 	rsble	r3, r3, #32
 80072ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80072d2:	fa04 f003 	lslle.w	r0, r4, r3
 80072d6:	f7f9 f939 	bl	800054c <__aeabi_ui2d>
 80072da:	2201      	movs	r2, #1
 80072dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80072e0:	3e01      	subs	r6, #1
 80072e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80072e4:	e775      	b.n	80071d2 <_dtoa_r+0x102>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e7b6      	b.n	8007258 <_dtoa_r+0x188>
 80072ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80072ec:	e7b5      	b.n	800725a <_dtoa_r+0x18a>
 80072ee:	427b      	negs	r3, r7
 80072f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f2:	2300      	movs	r3, #0
 80072f4:	eba8 0807 	sub.w	r8, r8, r7
 80072f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80072fa:	e7c2      	b.n	8007282 <_dtoa_r+0x1b2>
 80072fc:	2300      	movs	r3, #0
 80072fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007300:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007302:	2b00      	cmp	r3, #0
 8007304:	dc35      	bgt.n	8007372 <_dtoa_r+0x2a2>
 8007306:	2301      	movs	r3, #1
 8007308:	461a      	mov	r2, r3
 800730a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800730e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007310:	e00b      	b.n	800732a <_dtoa_r+0x25a>
 8007312:	2301      	movs	r3, #1
 8007314:	e7f3      	b.n	80072fe <_dtoa_r+0x22e>
 8007316:	2300      	movs	r3, #0
 8007318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800731a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	9308      	str	r3, [sp, #32]
 8007320:	3301      	adds	r3, #1
 8007322:	2b01      	cmp	r3, #1
 8007324:	9307      	str	r3, [sp, #28]
 8007326:	bfb8      	it	lt
 8007328:	2301      	movlt	r3, #1
 800732a:	2100      	movs	r1, #0
 800732c:	2204      	movs	r2, #4
 800732e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007332:	f102 0514 	add.w	r5, r2, #20
 8007336:	429d      	cmp	r5, r3
 8007338:	d91f      	bls.n	800737a <_dtoa_r+0x2aa>
 800733a:	6041      	str	r1, [r0, #4]
 800733c:	4658      	mov	r0, fp
 800733e:	f000 fd8d 	bl	8007e5c <_Balloc>
 8007342:	4682      	mov	sl, r0
 8007344:	2800      	cmp	r0, #0
 8007346:	d139      	bne.n	80073bc <_dtoa_r+0x2ec>
 8007348:	4602      	mov	r2, r0
 800734a:	f240 11af 	movw	r1, #431	@ 0x1af
 800734e:	4b1a      	ldr	r3, [pc, #104]	@ (80073b8 <_dtoa_r+0x2e8>)
 8007350:	e6d2      	b.n	80070f8 <_dtoa_r+0x28>
 8007352:	2301      	movs	r3, #1
 8007354:	e7e0      	b.n	8007318 <_dtoa_r+0x248>
 8007356:	2401      	movs	r4, #1
 8007358:	2300      	movs	r3, #0
 800735a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800735c:	9320      	str	r3, [sp, #128]	@ 0x80
 800735e:	f04f 33ff 	mov.w	r3, #4294967295
 8007362:	2200      	movs	r2, #0
 8007364:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007368:	2312      	movs	r3, #18
 800736a:	e7d0      	b.n	800730e <_dtoa_r+0x23e>
 800736c:	2301      	movs	r3, #1
 800736e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007370:	e7f5      	b.n	800735e <_dtoa_r+0x28e>
 8007372:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007374:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007378:	e7d7      	b.n	800732a <_dtoa_r+0x25a>
 800737a:	3101      	adds	r1, #1
 800737c:	0052      	lsls	r2, r2, #1
 800737e:	e7d8      	b.n	8007332 <_dtoa_r+0x262>
 8007380:	636f4361 	.word	0x636f4361
 8007384:	3fd287a7 	.word	0x3fd287a7
 8007388:	8b60c8b3 	.word	0x8b60c8b3
 800738c:	3fc68a28 	.word	0x3fc68a28
 8007390:	509f79fb 	.word	0x509f79fb
 8007394:	3fd34413 	.word	0x3fd34413
 8007398:	0800c2e6 	.word	0x0800c2e6
 800739c:	0800c3a0 	.word	0x0800c3a0
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	0800c39c 	.word	0x0800c39c
 80073a8:	0800c2be 	.word	0x0800c2be
 80073ac:	0800c2bd 	.word	0x0800c2bd
 80073b0:	3ff80000 	.word	0x3ff80000
 80073b4:	0800c498 	.word	0x0800c498
 80073b8:	0800c3f8 	.word	0x0800c3f8
 80073bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073c0:	6018      	str	r0, [r3, #0]
 80073c2:	9b07      	ldr	r3, [sp, #28]
 80073c4:	2b0e      	cmp	r3, #14
 80073c6:	f200 80a4 	bhi.w	8007512 <_dtoa_r+0x442>
 80073ca:	2c00      	cmp	r4, #0
 80073cc:	f000 80a1 	beq.w	8007512 <_dtoa_r+0x442>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	dd33      	ble.n	800743c <_dtoa_r+0x36c>
 80073d4:	4b86      	ldr	r3, [pc, #536]	@ (80075f0 <_dtoa_r+0x520>)
 80073d6:	f007 020f 	and.w	r2, r7, #15
 80073da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073de:	05f8      	lsls	r0, r7, #23
 80073e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80073e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80073ec:	d516      	bpl.n	800741c <_dtoa_r+0x34c>
 80073ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073f2:	4b80      	ldr	r3, [pc, #512]	@ (80075f4 <_dtoa_r+0x524>)
 80073f4:	2603      	movs	r6, #3
 80073f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073fa:	f7f9 fa4b 	bl	8000894 <__aeabi_ddiv>
 80073fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007402:	f004 040f 	and.w	r4, r4, #15
 8007406:	4d7b      	ldr	r5, [pc, #492]	@ (80075f4 <_dtoa_r+0x524>)
 8007408:	b954      	cbnz	r4, 8007420 <_dtoa_r+0x350>
 800740a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007412:	f7f9 fa3f 	bl	8000894 <__aeabi_ddiv>
 8007416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800741a:	e028      	b.n	800746e <_dtoa_r+0x39e>
 800741c:	2602      	movs	r6, #2
 800741e:	e7f2      	b.n	8007406 <_dtoa_r+0x336>
 8007420:	07e1      	lsls	r1, r4, #31
 8007422:	d508      	bpl.n	8007436 <_dtoa_r+0x366>
 8007424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007428:	e9d5 2300 	ldrd	r2, r3, [r5]
 800742c:	f7f9 f908 	bl	8000640 <__aeabi_dmul>
 8007430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007434:	3601      	adds	r6, #1
 8007436:	1064      	asrs	r4, r4, #1
 8007438:	3508      	adds	r5, #8
 800743a:	e7e5      	b.n	8007408 <_dtoa_r+0x338>
 800743c:	f000 80d2 	beq.w	80075e4 <_dtoa_r+0x514>
 8007440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007444:	427c      	negs	r4, r7
 8007446:	4b6a      	ldr	r3, [pc, #424]	@ (80075f0 <_dtoa_r+0x520>)
 8007448:	f004 020f 	and.w	r2, r4, #15
 800744c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f9 f8f4 	bl	8000640 <__aeabi_dmul>
 8007458:	2602      	movs	r6, #2
 800745a:	2300      	movs	r3, #0
 800745c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007460:	4d64      	ldr	r5, [pc, #400]	@ (80075f4 <_dtoa_r+0x524>)
 8007462:	1124      	asrs	r4, r4, #4
 8007464:	2c00      	cmp	r4, #0
 8007466:	f040 80b2 	bne.w	80075ce <_dtoa_r+0x4fe>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1d3      	bne.n	8007416 <_dtoa_r+0x346>
 800746e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007472:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80b7 	beq.w	80075e8 <_dtoa_r+0x518>
 800747a:	2200      	movs	r2, #0
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	4b5d      	ldr	r3, [pc, #372]	@ (80075f8 <_dtoa_r+0x528>)
 8007482:	f7f9 fb4f 	bl	8000b24 <__aeabi_dcmplt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f000 80ae 	beq.w	80075e8 <_dtoa_r+0x518>
 800748c:	9b07      	ldr	r3, [sp, #28]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 80aa 	beq.w	80075e8 <_dtoa_r+0x518>
 8007494:	9b08      	ldr	r3, [sp, #32]
 8007496:	2b00      	cmp	r3, #0
 8007498:	dd37      	ble.n	800750a <_dtoa_r+0x43a>
 800749a:	1e7b      	subs	r3, r7, #1
 800749c:	4620      	mov	r0, r4
 800749e:	9304      	str	r3, [sp, #16]
 80074a0:	2200      	movs	r2, #0
 80074a2:	4629      	mov	r1, r5
 80074a4:	4b55      	ldr	r3, [pc, #340]	@ (80075fc <_dtoa_r+0x52c>)
 80074a6:	f7f9 f8cb 	bl	8000640 <__aeabi_dmul>
 80074aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ae:	9c08      	ldr	r4, [sp, #32]
 80074b0:	3601      	adds	r6, #1
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7f9 f85a 	bl	800056c <__aeabi_i2d>
 80074b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074bc:	f7f9 f8c0 	bl	8000640 <__aeabi_dmul>
 80074c0:	2200      	movs	r2, #0
 80074c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007600 <_dtoa_r+0x530>)
 80074c4:	f7f8 ff06 	bl	80002d4 <__adddf3>
 80074c8:	4605      	mov	r5, r0
 80074ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80074ce:	2c00      	cmp	r4, #0
 80074d0:	f040 809a 	bne.w	8007608 <_dtoa_r+0x538>
 80074d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	4b4a      	ldr	r3, [pc, #296]	@ (8007604 <_dtoa_r+0x534>)
 80074dc:	f7f8 fef8 	bl	80002d0 <__aeabi_dsub>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074e8:	462a      	mov	r2, r5
 80074ea:	4633      	mov	r3, r6
 80074ec:	f7f9 fb38 	bl	8000b60 <__aeabi_dcmpgt>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	f040 828e 	bne.w	8007a12 <_dtoa_r+0x942>
 80074f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074fa:	462a      	mov	r2, r5
 80074fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007500:	f7f9 fb10 	bl	8000b24 <__aeabi_dcmplt>
 8007504:	2800      	cmp	r0, #0
 8007506:	f040 8127 	bne.w	8007758 <_dtoa_r+0x688>
 800750a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800750e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007512:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007514:	2b00      	cmp	r3, #0
 8007516:	f2c0 8163 	blt.w	80077e0 <_dtoa_r+0x710>
 800751a:	2f0e      	cmp	r7, #14
 800751c:	f300 8160 	bgt.w	80077e0 <_dtoa_r+0x710>
 8007520:	4b33      	ldr	r3, [pc, #204]	@ (80075f0 <_dtoa_r+0x520>)
 8007522:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007526:	e9d3 3400 	ldrd	r3, r4, [r3]
 800752a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800752e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007530:	2b00      	cmp	r3, #0
 8007532:	da03      	bge.n	800753c <_dtoa_r+0x46c>
 8007534:	9b07      	ldr	r3, [sp, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f340 8100 	ble.w	800773c <_dtoa_r+0x66c>
 800753c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007540:	4656      	mov	r6, sl
 8007542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f9 f9a3 	bl	8000894 <__aeabi_ddiv>
 800754e:	f7f9 fb27 	bl	8000ba0 <__aeabi_d2iz>
 8007552:	4680      	mov	r8, r0
 8007554:	f7f9 f80a 	bl	800056c <__aeabi_i2d>
 8007558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800755c:	f7f9 f870 	bl	8000640 <__aeabi_dmul>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4620      	mov	r0, r4
 8007566:	4629      	mov	r1, r5
 8007568:	f7f8 feb2 	bl	80002d0 <__aeabi_dsub>
 800756c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007570:	9d07      	ldr	r5, [sp, #28]
 8007572:	f806 4b01 	strb.w	r4, [r6], #1
 8007576:	eba6 040a 	sub.w	r4, r6, sl
 800757a:	42a5      	cmp	r5, r4
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	f040 8116 	bne.w	80077b0 <_dtoa_r+0x6e0>
 8007584:	f7f8 fea6 	bl	80002d4 <__adddf3>
 8007588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800758c:	4604      	mov	r4, r0
 800758e:	460d      	mov	r5, r1
 8007590:	f7f9 fae6 	bl	8000b60 <__aeabi_dcmpgt>
 8007594:	2800      	cmp	r0, #0
 8007596:	f040 80f8 	bne.w	800778a <_dtoa_r+0x6ba>
 800759a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7f9 fab5 	bl	8000b10 <__aeabi_dcmpeq>
 80075a6:	b118      	cbz	r0, 80075b0 <_dtoa_r+0x4e0>
 80075a8:	f018 0f01 	tst.w	r8, #1
 80075ac:	f040 80ed 	bne.w	800778a <_dtoa_r+0x6ba>
 80075b0:	4649      	mov	r1, r9
 80075b2:	4658      	mov	r0, fp
 80075b4:	f000 fc92 	bl	8007edc <_Bfree>
 80075b8:	2300      	movs	r3, #0
 80075ba:	7033      	strb	r3, [r6, #0]
 80075bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80075be:	3701      	adds	r7, #1
 80075c0:	601f      	str	r7, [r3, #0]
 80075c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8320 	beq.w	8007c0a <_dtoa_r+0xb3a>
 80075ca:	601e      	str	r6, [r3, #0]
 80075cc:	e31d      	b.n	8007c0a <_dtoa_r+0xb3a>
 80075ce:	07e2      	lsls	r2, r4, #31
 80075d0:	d505      	bpl.n	80075de <_dtoa_r+0x50e>
 80075d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075d6:	f7f9 f833 	bl	8000640 <__aeabi_dmul>
 80075da:	2301      	movs	r3, #1
 80075dc:	3601      	adds	r6, #1
 80075de:	1064      	asrs	r4, r4, #1
 80075e0:	3508      	adds	r5, #8
 80075e2:	e73f      	b.n	8007464 <_dtoa_r+0x394>
 80075e4:	2602      	movs	r6, #2
 80075e6:	e742      	b.n	800746e <_dtoa_r+0x39e>
 80075e8:	9c07      	ldr	r4, [sp, #28]
 80075ea:	9704      	str	r7, [sp, #16]
 80075ec:	e761      	b.n	80074b2 <_dtoa_r+0x3e2>
 80075ee:	bf00      	nop
 80075f0:	0800c498 	.word	0x0800c498
 80075f4:	0800c470 	.word	0x0800c470
 80075f8:	3ff00000 	.word	0x3ff00000
 80075fc:	40240000 	.word	0x40240000
 8007600:	401c0000 	.word	0x401c0000
 8007604:	40140000 	.word	0x40140000
 8007608:	4b70      	ldr	r3, [pc, #448]	@ (80077cc <_dtoa_r+0x6fc>)
 800760a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800760c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007610:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007614:	4454      	add	r4, sl
 8007616:	2900      	cmp	r1, #0
 8007618:	d045      	beq.n	80076a6 <_dtoa_r+0x5d6>
 800761a:	2000      	movs	r0, #0
 800761c:	496c      	ldr	r1, [pc, #432]	@ (80077d0 <_dtoa_r+0x700>)
 800761e:	f7f9 f939 	bl	8000894 <__aeabi_ddiv>
 8007622:	4633      	mov	r3, r6
 8007624:	462a      	mov	r2, r5
 8007626:	f7f8 fe53 	bl	80002d0 <__aeabi_dsub>
 800762a:	4656      	mov	r6, sl
 800762c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007634:	f7f9 fab4 	bl	8000ba0 <__aeabi_d2iz>
 8007638:	4605      	mov	r5, r0
 800763a:	f7f8 ff97 	bl	800056c <__aeabi_i2d>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007646:	f7f8 fe43 	bl	80002d0 <__aeabi_dsub>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	3530      	adds	r5, #48	@ 0x30
 8007650:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007654:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007658:	f806 5b01 	strb.w	r5, [r6], #1
 800765c:	f7f9 fa62 	bl	8000b24 <__aeabi_dcmplt>
 8007660:	2800      	cmp	r0, #0
 8007662:	d163      	bne.n	800772c <_dtoa_r+0x65c>
 8007664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007668:	2000      	movs	r0, #0
 800766a:	495a      	ldr	r1, [pc, #360]	@ (80077d4 <_dtoa_r+0x704>)
 800766c:	f7f8 fe30 	bl	80002d0 <__aeabi_dsub>
 8007670:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007674:	f7f9 fa56 	bl	8000b24 <__aeabi_dcmplt>
 8007678:	2800      	cmp	r0, #0
 800767a:	f040 8087 	bne.w	800778c <_dtoa_r+0x6bc>
 800767e:	42a6      	cmp	r6, r4
 8007680:	f43f af43 	beq.w	800750a <_dtoa_r+0x43a>
 8007684:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007688:	2200      	movs	r2, #0
 800768a:	4b53      	ldr	r3, [pc, #332]	@ (80077d8 <_dtoa_r+0x708>)
 800768c:	f7f8 ffd8 	bl	8000640 <__aeabi_dmul>
 8007690:	2200      	movs	r2, #0
 8007692:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800769a:	4b4f      	ldr	r3, [pc, #316]	@ (80077d8 <_dtoa_r+0x708>)
 800769c:	f7f8 ffd0 	bl	8000640 <__aeabi_dmul>
 80076a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076a4:	e7c4      	b.n	8007630 <_dtoa_r+0x560>
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	f7f8 ffc9 	bl	8000640 <__aeabi_dmul>
 80076ae:	4656      	mov	r6, sl
 80076b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076b4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80076b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ba:	f7f9 fa71 	bl	8000ba0 <__aeabi_d2iz>
 80076be:	4605      	mov	r5, r0
 80076c0:	f7f8 ff54 	bl	800056c <__aeabi_i2d>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076cc:	f7f8 fe00 	bl	80002d0 <__aeabi_dsub>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	3530      	adds	r5, #48	@ 0x30
 80076d6:	f806 5b01 	strb.w	r5, [r6], #1
 80076da:	42a6      	cmp	r6, r4
 80076dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	d124      	bne.n	8007730 <_dtoa_r+0x660>
 80076e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076ea:	4b39      	ldr	r3, [pc, #228]	@ (80077d0 <_dtoa_r+0x700>)
 80076ec:	f7f8 fdf2 	bl	80002d4 <__adddf3>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f8:	f7f9 fa32 	bl	8000b60 <__aeabi_dcmpgt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d145      	bne.n	800778c <_dtoa_r+0x6bc>
 8007700:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007704:	2000      	movs	r0, #0
 8007706:	4932      	ldr	r1, [pc, #200]	@ (80077d0 <_dtoa_r+0x700>)
 8007708:	f7f8 fde2 	bl	80002d0 <__aeabi_dsub>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007714:	f7f9 fa06 	bl	8000b24 <__aeabi_dcmplt>
 8007718:	2800      	cmp	r0, #0
 800771a:	f43f aef6 	beq.w	800750a <_dtoa_r+0x43a>
 800771e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007720:	1e73      	subs	r3, r6, #1
 8007722:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007724:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007728:	2b30      	cmp	r3, #48	@ 0x30
 800772a:	d0f8      	beq.n	800771e <_dtoa_r+0x64e>
 800772c:	9f04      	ldr	r7, [sp, #16]
 800772e:	e73f      	b.n	80075b0 <_dtoa_r+0x4e0>
 8007730:	4b29      	ldr	r3, [pc, #164]	@ (80077d8 <_dtoa_r+0x708>)
 8007732:	f7f8 ff85 	bl	8000640 <__aeabi_dmul>
 8007736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800773a:	e7bc      	b.n	80076b6 <_dtoa_r+0x5e6>
 800773c:	d10c      	bne.n	8007758 <_dtoa_r+0x688>
 800773e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007742:	2200      	movs	r2, #0
 8007744:	4b25      	ldr	r3, [pc, #148]	@ (80077dc <_dtoa_r+0x70c>)
 8007746:	f7f8 ff7b 	bl	8000640 <__aeabi_dmul>
 800774a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800774e:	f7f9 f9fd 	bl	8000b4c <__aeabi_dcmpge>
 8007752:	2800      	cmp	r0, #0
 8007754:	f000 815b 	beq.w	8007a0e <_dtoa_r+0x93e>
 8007758:	2400      	movs	r4, #0
 800775a:	4625      	mov	r5, r4
 800775c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800775e:	4656      	mov	r6, sl
 8007760:	43db      	mvns	r3, r3
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	2700      	movs	r7, #0
 8007766:	4621      	mov	r1, r4
 8007768:	4658      	mov	r0, fp
 800776a:	f000 fbb7 	bl	8007edc <_Bfree>
 800776e:	2d00      	cmp	r5, #0
 8007770:	d0dc      	beq.n	800772c <_dtoa_r+0x65c>
 8007772:	b12f      	cbz	r7, 8007780 <_dtoa_r+0x6b0>
 8007774:	42af      	cmp	r7, r5
 8007776:	d003      	beq.n	8007780 <_dtoa_r+0x6b0>
 8007778:	4639      	mov	r1, r7
 800777a:	4658      	mov	r0, fp
 800777c:	f000 fbae 	bl	8007edc <_Bfree>
 8007780:	4629      	mov	r1, r5
 8007782:	4658      	mov	r0, fp
 8007784:	f000 fbaa 	bl	8007edc <_Bfree>
 8007788:	e7d0      	b.n	800772c <_dtoa_r+0x65c>
 800778a:	9704      	str	r7, [sp, #16]
 800778c:	4633      	mov	r3, r6
 800778e:	461e      	mov	r6, r3
 8007790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007794:	2a39      	cmp	r2, #57	@ 0x39
 8007796:	d107      	bne.n	80077a8 <_dtoa_r+0x6d8>
 8007798:	459a      	cmp	sl, r3
 800779a:	d1f8      	bne.n	800778e <_dtoa_r+0x6be>
 800779c:	9a04      	ldr	r2, [sp, #16]
 800779e:	3201      	adds	r2, #1
 80077a0:	9204      	str	r2, [sp, #16]
 80077a2:	2230      	movs	r2, #48	@ 0x30
 80077a4:	f88a 2000 	strb.w	r2, [sl]
 80077a8:	781a      	ldrb	r2, [r3, #0]
 80077aa:	3201      	adds	r2, #1
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e7bd      	b.n	800772c <_dtoa_r+0x65c>
 80077b0:	2200      	movs	r2, #0
 80077b2:	4b09      	ldr	r3, [pc, #36]	@ (80077d8 <_dtoa_r+0x708>)
 80077b4:	f7f8 ff44 	bl	8000640 <__aeabi_dmul>
 80077b8:	2200      	movs	r2, #0
 80077ba:	2300      	movs	r3, #0
 80077bc:	4604      	mov	r4, r0
 80077be:	460d      	mov	r5, r1
 80077c0:	f7f9 f9a6 	bl	8000b10 <__aeabi_dcmpeq>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	f43f aebc 	beq.w	8007542 <_dtoa_r+0x472>
 80077ca:	e6f1      	b.n	80075b0 <_dtoa_r+0x4e0>
 80077cc:	0800c498 	.word	0x0800c498
 80077d0:	3fe00000 	.word	0x3fe00000
 80077d4:	3ff00000 	.word	0x3ff00000
 80077d8:	40240000 	.word	0x40240000
 80077dc:	40140000 	.word	0x40140000
 80077e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	f000 80db 	beq.w	800799e <_dtoa_r+0x8ce>
 80077e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077ea:	2a01      	cmp	r2, #1
 80077ec:	f300 80bf 	bgt.w	800796e <_dtoa_r+0x89e>
 80077f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80077f2:	2a00      	cmp	r2, #0
 80077f4:	f000 80b7 	beq.w	8007966 <_dtoa_r+0x896>
 80077f8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80077fc:	4646      	mov	r6, r8
 80077fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007802:	2101      	movs	r1, #1
 8007804:	441a      	add	r2, r3
 8007806:	4658      	mov	r0, fp
 8007808:	4498      	add	r8, r3
 800780a:	9209      	str	r2, [sp, #36]	@ 0x24
 800780c:	f000 fc64 	bl	80080d8 <__i2b>
 8007810:	4605      	mov	r5, r0
 8007812:	b15e      	cbz	r6, 800782c <_dtoa_r+0x75c>
 8007814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	dd08      	ble.n	800782c <_dtoa_r+0x75c>
 800781a:	42b3      	cmp	r3, r6
 800781c:	bfa8      	it	ge
 800781e:	4633      	movge	r3, r6
 8007820:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007822:	eba8 0803 	sub.w	r8, r8, r3
 8007826:	1af6      	subs	r6, r6, r3
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	9309      	str	r3, [sp, #36]	@ 0x24
 800782c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800782e:	b1f3      	cbz	r3, 800786e <_dtoa_r+0x79e>
 8007830:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 80b7 	beq.w	80079a6 <_dtoa_r+0x8d6>
 8007838:	b18c      	cbz	r4, 800785e <_dtoa_r+0x78e>
 800783a:	4629      	mov	r1, r5
 800783c:	4622      	mov	r2, r4
 800783e:	4658      	mov	r0, fp
 8007840:	f000 fd08 	bl	8008254 <__pow5mult>
 8007844:	464a      	mov	r2, r9
 8007846:	4601      	mov	r1, r0
 8007848:	4605      	mov	r5, r0
 800784a:	4658      	mov	r0, fp
 800784c:	f000 fc5a 	bl	8008104 <__multiply>
 8007850:	4649      	mov	r1, r9
 8007852:	9004      	str	r0, [sp, #16]
 8007854:	4658      	mov	r0, fp
 8007856:	f000 fb41 	bl	8007edc <_Bfree>
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	4699      	mov	r9, r3
 800785e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007860:	1b1a      	subs	r2, r3, r4
 8007862:	d004      	beq.n	800786e <_dtoa_r+0x79e>
 8007864:	4649      	mov	r1, r9
 8007866:	4658      	mov	r0, fp
 8007868:	f000 fcf4 	bl	8008254 <__pow5mult>
 800786c:	4681      	mov	r9, r0
 800786e:	2101      	movs	r1, #1
 8007870:	4658      	mov	r0, fp
 8007872:	f000 fc31 	bl	80080d8 <__i2b>
 8007876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007878:	4604      	mov	r4, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 81c9 	beq.w	8007c12 <_dtoa_r+0xb42>
 8007880:	461a      	mov	r2, r3
 8007882:	4601      	mov	r1, r0
 8007884:	4658      	mov	r0, fp
 8007886:	f000 fce5 	bl	8008254 <__pow5mult>
 800788a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800788c:	4604      	mov	r4, r0
 800788e:	2b01      	cmp	r3, #1
 8007890:	f300 808f 	bgt.w	80079b2 <_dtoa_r+0x8e2>
 8007894:	9b02      	ldr	r3, [sp, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f040 8087 	bne.w	80079aa <_dtoa_r+0x8da>
 800789c:	9b03      	ldr	r3, [sp, #12]
 800789e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f040 8083 	bne.w	80079ae <_dtoa_r+0x8de>
 80078a8:	9b03      	ldr	r3, [sp, #12]
 80078aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078ae:	0d1b      	lsrs	r3, r3, #20
 80078b0:	051b      	lsls	r3, r3, #20
 80078b2:	b12b      	cbz	r3, 80078c0 <_dtoa_r+0x7f0>
 80078b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b6:	f108 0801 	add.w	r8, r8, #1
 80078ba:	3301      	adds	r3, #1
 80078bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078be:	2301      	movs	r3, #1
 80078c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 81aa 	beq.w	8007c1e <_dtoa_r+0xb4e>
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078d0:	6918      	ldr	r0, [r3, #16]
 80078d2:	f000 fbb5 	bl	8008040 <__hi0bits>
 80078d6:	f1c0 0020 	rsb	r0, r0, #32
 80078da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078dc:	4418      	add	r0, r3
 80078de:	f010 001f 	ands.w	r0, r0, #31
 80078e2:	d071      	beq.n	80079c8 <_dtoa_r+0x8f8>
 80078e4:	f1c0 0320 	rsb	r3, r0, #32
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	dd65      	ble.n	80079b8 <_dtoa_r+0x8e8>
 80078ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ee:	f1c0 001c 	rsb	r0, r0, #28
 80078f2:	4403      	add	r3, r0
 80078f4:	4480      	add	r8, r0
 80078f6:	4406      	add	r6, r0
 80078f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80078fa:	f1b8 0f00 	cmp.w	r8, #0
 80078fe:	dd05      	ble.n	800790c <_dtoa_r+0x83c>
 8007900:	4649      	mov	r1, r9
 8007902:	4642      	mov	r2, r8
 8007904:	4658      	mov	r0, fp
 8007906:	f000 fcff 	bl	8008308 <__lshift>
 800790a:	4681      	mov	r9, r0
 800790c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	dd05      	ble.n	800791e <_dtoa_r+0x84e>
 8007912:	4621      	mov	r1, r4
 8007914:	461a      	mov	r2, r3
 8007916:	4658      	mov	r0, fp
 8007918:	f000 fcf6 	bl	8008308 <__lshift>
 800791c:	4604      	mov	r4, r0
 800791e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d053      	beq.n	80079cc <_dtoa_r+0x8fc>
 8007924:	4621      	mov	r1, r4
 8007926:	4648      	mov	r0, r9
 8007928:	f000 fd5a 	bl	80083e0 <__mcmp>
 800792c:	2800      	cmp	r0, #0
 800792e:	da4d      	bge.n	80079cc <_dtoa_r+0x8fc>
 8007930:	1e7b      	subs	r3, r7, #1
 8007932:	4649      	mov	r1, r9
 8007934:	9304      	str	r3, [sp, #16]
 8007936:	220a      	movs	r2, #10
 8007938:	2300      	movs	r3, #0
 800793a:	4658      	mov	r0, fp
 800793c:	f000 faf0 	bl	8007f20 <__multadd>
 8007940:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007942:	4681      	mov	r9, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 816c 	beq.w	8007c22 <_dtoa_r+0xb52>
 800794a:	2300      	movs	r3, #0
 800794c:	4629      	mov	r1, r5
 800794e:	220a      	movs	r2, #10
 8007950:	4658      	mov	r0, fp
 8007952:	f000 fae5 	bl	8007f20 <__multadd>
 8007956:	9b08      	ldr	r3, [sp, #32]
 8007958:	4605      	mov	r5, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	dc61      	bgt.n	8007a22 <_dtoa_r+0x952>
 800795e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007960:	2b02      	cmp	r3, #2
 8007962:	dc3b      	bgt.n	80079dc <_dtoa_r+0x90c>
 8007964:	e05d      	b.n	8007a22 <_dtoa_r+0x952>
 8007966:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007968:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800796c:	e746      	b.n	80077fc <_dtoa_r+0x72c>
 800796e:	9b07      	ldr	r3, [sp, #28]
 8007970:	1e5c      	subs	r4, r3, #1
 8007972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007974:	42a3      	cmp	r3, r4
 8007976:	bfbf      	itttt	lt
 8007978:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800797a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800797c:	1ae3      	sublt	r3, r4, r3
 800797e:	18d2      	addlt	r2, r2, r3
 8007980:	bfa8      	it	ge
 8007982:	1b1c      	subge	r4, r3, r4
 8007984:	9b07      	ldr	r3, [sp, #28]
 8007986:	bfbe      	ittt	lt
 8007988:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800798a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800798c:	2400      	movlt	r4, #0
 800798e:	2b00      	cmp	r3, #0
 8007990:	bfb5      	itete	lt
 8007992:	eba8 0603 	sublt.w	r6, r8, r3
 8007996:	4646      	movge	r6, r8
 8007998:	2300      	movlt	r3, #0
 800799a:	9b07      	ldrge	r3, [sp, #28]
 800799c:	e730      	b.n	8007800 <_dtoa_r+0x730>
 800799e:	4646      	mov	r6, r8
 80079a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80079a4:	e735      	b.n	8007812 <_dtoa_r+0x742>
 80079a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079a8:	e75c      	b.n	8007864 <_dtoa_r+0x794>
 80079aa:	2300      	movs	r3, #0
 80079ac:	e788      	b.n	80078c0 <_dtoa_r+0x7f0>
 80079ae:	9b02      	ldr	r3, [sp, #8]
 80079b0:	e786      	b.n	80078c0 <_dtoa_r+0x7f0>
 80079b2:	2300      	movs	r3, #0
 80079b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b6:	e788      	b.n	80078ca <_dtoa_r+0x7fa>
 80079b8:	d09f      	beq.n	80078fa <_dtoa_r+0x82a>
 80079ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079bc:	331c      	adds	r3, #28
 80079be:	441a      	add	r2, r3
 80079c0:	4498      	add	r8, r3
 80079c2:	441e      	add	r6, r3
 80079c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80079c6:	e798      	b.n	80078fa <_dtoa_r+0x82a>
 80079c8:	4603      	mov	r3, r0
 80079ca:	e7f6      	b.n	80079ba <_dtoa_r+0x8ea>
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	9704      	str	r7, [sp, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dc20      	bgt.n	8007a16 <_dtoa_r+0x946>
 80079d4:	9308      	str	r3, [sp, #32]
 80079d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079d8:	2b02      	cmp	r3, #2
 80079da:	dd1e      	ble.n	8007a1a <_dtoa_r+0x94a>
 80079dc:	9b08      	ldr	r3, [sp, #32]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f47f aebc 	bne.w	800775c <_dtoa_r+0x68c>
 80079e4:	4621      	mov	r1, r4
 80079e6:	2205      	movs	r2, #5
 80079e8:	4658      	mov	r0, fp
 80079ea:	f000 fa99 	bl	8007f20 <__multadd>
 80079ee:	4601      	mov	r1, r0
 80079f0:	4604      	mov	r4, r0
 80079f2:	4648      	mov	r0, r9
 80079f4:	f000 fcf4 	bl	80083e0 <__mcmp>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	f77f aeaf 	ble.w	800775c <_dtoa_r+0x68c>
 80079fe:	2331      	movs	r3, #49	@ 0x31
 8007a00:	4656      	mov	r6, sl
 8007a02:	f806 3b01 	strb.w	r3, [r6], #1
 8007a06:	9b04      	ldr	r3, [sp, #16]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	e6aa      	b.n	8007764 <_dtoa_r+0x694>
 8007a0e:	9c07      	ldr	r4, [sp, #28]
 8007a10:	9704      	str	r7, [sp, #16]
 8007a12:	4625      	mov	r5, r4
 8007a14:	e7f3      	b.n	80079fe <_dtoa_r+0x92e>
 8007a16:	9b07      	ldr	r3, [sp, #28]
 8007a18:	9308      	str	r3, [sp, #32]
 8007a1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 8104 	beq.w	8007c2a <_dtoa_r+0xb5a>
 8007a22:	2e00      	cmp	r6, #0
 8007a24:	dd05      	ble.n	8007a32 <_dtoa_r+0x962>
 8007a26:	4629      	mov	r1, r5
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4658      	mov	r0, fp
 8007a2c:	f000 fc6c 	bl	8008308 <__lshift>
 8007a30:	4605      	mov	r5, r0
 8007a32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d05a      	beq.n	8007aee <_dtoa_r+0xa1e>
 8007a38:	4658      	mov	r0, fp
 8007a3a:	6869      	ldr	r1, [r5, #4]
 8007a3c:	f000 fa0e 	bl	8007e5c <_Balloc>
 8007a40:	4606      	mov	r6, r0
 8007a42:	b928      	cbnz	r0, 8007a50 <_dtoa_r+0x980>
 8007a44:	4602      	mov	r2, r0
 8007a46:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a4a:	4b83      	ldr	r3, [pc, #524]	@ (8007c58 <_dtoa_r+0xb88>)
 8007a4c:	f7ff bb54 	b.w	80070f8 <_dtoa_r+0x28>
 8007a50:	692a      	ldr	r2, [r5, #16]
 8007a52:	f105 010c 	add.w	r1, r5, #12
 8007a56:	3202      	adds	r2, #2
 8007a58:	0092      	lsls	r2, r2, #2
 8007a5a:	300c      	adds	r0, #12
 8007a5c:	f7ff fa7f 	bl	8006f5e <memcpy>
 8007a60:	2201      	movs	r2, #1
 8007a62:	4631      	mov	r1, r6
 8007a64:	4658      	mov	r0, fp
 8007a66:	f000 fc4f 	bl	8008308 <__lshift>
 8007a6a:	462f      	mov	r7, r5
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	f10a 0301 	add.w	r3, sl, #1
 8007a72:	9307      	str	r3, [sp, #28]
 8007a74:	9b08      	ldr	r3, [sp, #32]
 8007a76:	4453      	add	r3, sl
 8007a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a7a:	9b02      	ldr	r3, [sp, #8]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a82:	9b07      	ldr	r3, [sp, #28]
 8007a84:	4621      	mov	r1, r4
 8007a86:	3b01      	subs	r3, #1
 8007a88:	4648      	mov	r0, r9
 8007a8a:	9302      	str	r3, [sp, #8]
 8007a8c:	f7ff fa98 	bl	8006fc0 <quorem>
 8007a90:	4639      	mov	r1, r7
 8007a92:	9008      	str	r0, [sp, #32]
 8007a94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a98:	4648      	mov	r0, r9
 8007a9a:	f000 fca1 	bl	80083e0 <__mcmp>
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	9009      	str	r0, [sp, #36]	@ 0x24
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4658      	mov	r0, fp
 8007aa6:	f000 fcb7 	bl	8008418 <__mdiff>
 8007aaa:	68c2      	ldr	r2, [r0, #12]
 8007aac:	4606      	mov	r6, r0
 8007aae:	bb02      	cbnz	r2, 8007af2 <_dtoa_r+0xa22>
 8007ab0:	4601      	mov	r1, r0
 8007ab2:	4648      	mov	r0, r9
 8007ab4:	f000 fc94 	bl	80083e0 <__mcmp>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	4631      	mov	r1, r6
 8007abc:	4658      	mov	r0, fp
 8007abe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ac0:	f000 fa0c 	bl	8007edc <_Bfree>
 8007ac4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ac6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007ac8:	9e07      	ldr	r6, [sp, #28]
 8007aca:	ea43 0102 	orr.w	r1, r3, r2
 8007ace:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ad0:	4319      	orrs	r1, r3
 8007ad2:	d110      	bne.n	8007af6 <_dtoa_r+0xa26>
 8007ad4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ad8:	d029      	beq.n	8007b2e <_dtoa_r+0xa5e>
 8007ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dd02      	ble.n	8007ae6 <_dtoa_r+0xa16>
 8007ae0:	9b08      	ldr	r3, [sp, #32]
 8007ae2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ae6:	9b02      	ldr	r3, [sp, #8]
 8007ae8:	f883 8000 	strb.w	r8, [r3]
 8007aec:	e63b      	b.n	8007766 <_dtoa_r+0x696>
 8007aee:	4628      	mov	r0, r5
 8007af0:	e7bb      	b.n	8007a6a <_dtoa_r+0x99a>
 8007af2:	2201      	movs	r2, #1
 8007af4:	e7e1      	b.n	8007aba <_dtoa_r+0x9ea>
 8007af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	db04      	blt.n	8007b06 <_dtoa_r+0xa36>
 8007afc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007afe:	430b      	orrs	r3, r1
 8007b00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b02:	430b      	orrs	r3, r1
 8007b04:	d120      	bne.n	8007b48 <_dtoa_r+0xa78>
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	dded      	ble.n	8007ae6 <_dtoa_r+0xa16>
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	4658      	mov	r0, fp
 8007b10:	f000 fbfa 	bl	8008308 <__lshift>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4681      	mov	r9, r0
 8007b18:	f000 fc62 	bl	80083e0 <__mcmp>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	dc03      	bgt.n	8007b28 <_dtoa_r+0xa58>
 8007b20:	d1e1      	bne.n	8007ae6 <_dtoa_r+0xa16>
 8007b22:	f018 0f01 	tst.w	r8, #1
 8007b26:	d0de      	beq.n	8007ae6 <_dtoa_r+0xa16>
 8007b28:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b2c:	d1d8      	bne.n	8007ae0 <_dtoa_r+0xa10>
 8007b2e:	2339      	movs	r3, #57	@ 0x39
 8007b30:	9a02      	ldr	r2, [sp, #8]
 8007b32:	7013      	strb	r3, [r2, #0]
 8007b34:	4633      	mov	r3, r6
 8007b36:	461e      	mov	r6, r3
 8007b38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	2a39      	cmp	r2, #57	@ 0x39
 8007b40:	d052      	beq.n	8007be8 <_dtoa_r+0xb18>
 8007b42:	3201      	adds	r2, #1
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	e60e      	b.n	8007766 <_dtoa_r+0x696>
 8007b48:	2a00      	cmp	r2, #0
 8007b4a:	dd07      	ble.n	8007b5c <_dtoa_r+0xa8c>
 8007b4c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b50:	d0ed      	beq.n	8007b2e <_dtoa_r+0xa5e>
 8007b52:	9a02      	ldr	r2, [sp, #8]
 8007b54:	f108 0301 	add.w	r3, r8, #1
 8007b58:	7013      	strb	r3, [r2, #0]
 8007b5a:	e604      	b.n	8007766 <_dtoa_r+0x696>
 8007b5c:	9b07      	ldr	r3, [sp, #28]
 8007b5e:	9a07      	ldr	r2, [sp, #28]
 8007b60:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007b64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d028      	beq.n	8007bbc <_dtoa_r+0xaec>
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	220a      	movs	r2, #10
 8007b70:	4658      	mov	r0, fp
 8007b72:	f000 f9d5 	bl	8007f20 <__multadd>
 8007b76:	42af      	cmp	r7, r5
 8007b78:	4681      	mov	r9, r0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	f04f 020a 	mov.w	r2, #10
 8007b82:	4639      	mov	r1, r7
 8007b84:	4658      	mov	r0, fp
 8007b86:	d107      	bne.n	8007b98 <_dtoa_r+0xac8>
 8007b88:	f000 f9ca 	bl	8007f20 <__multadd>
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	4605      	mov	r5, r0
 8007b90:	9b07      	ldr	r3, [sp, #28]
 8007b92:	3301      	adds	r3, #1
 8007b94:	9307      	str	r3, [sp, #28]
 8007b96:	e774      	b.n	8007a82 <_dtoa_r+0x9b2>
 8007b98:	f000 f9c2 	bl	8007f20 <__multadd>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	220a      	movs	r2, #10
 8007ba4:	4658      	mov	r0, fp
 8007ba6:	f000 f9bb 	bl	8007f20 <__multadd>
 8007baa:	4605      	mov	r5, r0
 8007bac:	e7f0      	b.n	8007b90 <_dtoa_r+0xac0>
 8007bae:	9b08      	ldr	r3, [sp, #32]
 8007bb0:	2700      	movs	r7, #0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfcc      	ite	gt
 8007bb6:	461e      	movgt	r6, r3
 8007bb8:	2601      	movle	r6, #1
 8007bba:	4456      	add	r6, sl
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	4658      	mov	r0, fp
 8007bc2:	f000 fba1 	bl	8008308 <__lshift>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4681      	mov	r9, r0
 8007bca:	f000 fc09 	bl	80083e0 <__mcmp>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	dcb0      	bgt.n	8007b34 <_dtoa_r+0xa64>
 8007bd2:	d102      	bne.n	8007bda <_dtoa_r+0xb0a>
 8007bd4:	f018 0f01 	tst.w	r8, #1
 8007bd8:	d1ac      	bne.n	8007b34 <_dtoa_r+0xa64>
 8007bda:	4633      	mov	r3, r6
 8007bdc:	461e      	mov	r6, r3
 8007bde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007be2:	2a30      	cmp	r2, #48	@ 0x30
 8007be4:	d0fa      	beq.n	8007bdc <_dtoa_r+0xb0c>
 8007be6:	e5be      	b.n	8007766 <_dtoa_r+0x696>
 8007be8:	459a      	cmp	sl, r3
 8007bea:	d1a4      	bne.n	8007b36 <_dtoa_r+0xa66>
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	2331      	movs	r3, #49	@ 0x31
 8007bf4:	f88a 3000 	strb.w	r3, [sl]
 8007bf8:	e5b5      	b.n	8007766 <_dtoa_r+0x696>
 8007bfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bfc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007c5c <_dtoa_r+0xb8c>
 8007c00:	b11b      	cbz	r3, 8007c0a <_dtoa_r+0xb3a>
 8007c02:	f10a 0308 	add.w	r3, sl, #8
 8007c06:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	b017      	add	sp, #92	@ 0x5c
 8007c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	f77f ae3d 	ble.w	8007894 <_dtoa_r+0x7c4>
 8007c1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c1e:	2001      	movs	r0, #1
 8007c20:	e65b      	b.n	80078da <_dtoa_r+0x80a>
 8007c22:	9b08      	ldr	r3, [sp, #32]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f77f aed6 	ble.w	80079d6 <_dtoa_r+0x906>
 8007c2a:	4656      	mov	r6, sl
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4648      	mov	r0, r9
 8007c30:	f7ff f9c6 	bl	8006fc0 <quorem>
 8007c34:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c38:	9b08      	ldr	r3, [sp, #32]
 8007c3a:	f806 8b01 	strb.w	r8, [r6], #1
 8007c3e:	eba6 020a 	sub.w	r2, r6, sl
 8007c42:	4293      	cmp	r3, r2
 8007c44:	ddb3      	ble.n	8007bae <_dtoa_r+0xade>
 8007c46:	4649      	mov	r1, r9
 8007c48:	2300      	movs	r3, #0
 8007c4a:	220a      	movs	r2, #10
 8007c4c:	4658      	mov	r0, fp
 8007c4e:	f000 f967 	bl	8007f20 <__multadd>
 8007c52:	4681      	mov	r9, r0
 8007c54:	e7ea      	b.n	8007c2c <_dtoa_r+0xb5c>
 8007c56:	bf00      	nop
 8007c58:	0800c3f8 	.word	0x0800c3f8
 8007c5c:	0800c393 	.word	0x0800c393

08007c60 <_free_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4605      	mov	r5, r0
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d040      	beq.n	8007cea <_free_r+0x8a>
 8007c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6c:	1f0c      	subs	r4, r1, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bfb8      	it	lt
 8007c72:	18e4      	addlt	r4, r4, r3
 8007c74:	f000 f8e6 	bl	8007e44 <__malloc_lock>
 8007c78:	4a1c      	ldr	r2, [pc, #112]	@ (8007cec <_free_r+0x8c>)
 8007c7a:	6813      	ldr	r3, [r2, #0]
 8007c7c:	b933      	cbnz	r3, 8007c8c <_free_r+0x2c>
 8007c7e:	6063      	str	r3, [r4, #4]
 8007c80:	6014      	str	r4, [r2, #0]
 8007c82:	4628      	mov	r0, r5
 8007c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c88:	f000 b8e2 	b.w	8007e50 <__malloc_unlock>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d908      	bls.n	8007ca2 <_free_r+0x42>
 8007c90:	6820      	ldr	r0, [r4, #0]
 8007c92:	1821      	adds	r1, r4, r0
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf01      	itttt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	1809      	addeq	r1, r1, r0
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	e7ed      	b.n	8007c7e <_free_r+0x1e>
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b10b      	cbz	r3, 8007cac <_free_r+0x4c>
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d9fa      	bls.n	8007ca2 <_free_r+0x42>
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	1850      	adds	r0, r2, r1
 8007cb0:	42a0      	cmp	r0, r4
 8007cb2:	d10b      	bne.n	8007ccc <_free_r+0x6c>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	4401      	add	r1, r0
 8007cb8:	1850      	adds	r0, r2, r1
 8007cba:	4283      	cmp	r3, r0
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	d1e0      	bne.n	8007c82 <_free_r+0x22>
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4408      	add	r0, r1
 8007cc6:	6010      	str	r0, [r2, #0]
 8007cc8:	6053      	str	r3, [r2, #4]
 8007cca:	e7da      	b.n	8007c82 <_free_r+0x22>
 8007ccc:	d902      	bls.n	8007cd4 <_free_r+0x74>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	e7d6      	b.n	8007c82 <_free_r+0x22>
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	1821      	adds	r1, r4, r0
 8007cd8:	428b      	cmp	r3, r1
 8007cda:	bf01      	itttt	eq
 8007cdc:	6819      	ldreq	r1, [r3, #0]
 8007cde:	685b      	ldreq	r3, [r3, #4]
 8007ce0:	1809      	addeq	r1, r1, r0
 8007ce2:	6021      	streq	r1, [r4, #0]
 8007ce4:	6063      	str	r3, [r4, #4]
 8007ce6:	6054      	str	r4, [r2, #4]
 8007ce8:	e7cb      	b.n	8007c82 <_free_r+0x22>
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	20000c0c 	.word	0x20000c0c

08007cf0 <malloc>:
 8007cf0:	4b02      	ldr	r3, [pc, #8]	@ (8007cfc <malloc+0xc>)
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	f000 b825 	b.w	8007d44 <_malloc_r>
 8007cfa:	bf00      	nop
 8007cfc:	20000114 	.word	0x20000114

08007d00 <sbrk_aligned>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	4e0f      	ldr	r6, [pc, #60]	@ (8007d40 <sbrk_aligned+0x40>)
 8007d04:	460c      	mov	r4, r1
 8007d06:	6831      	ldr	r1, [r6, #0]
 8007d08:	4605      	mov	r5, r0
 8007d0a:	b911      	cbnz	r1, 8007d12 <sbrk_aligned+0x12>
 8007d0c:	f001 fd8c 	bl	8009828 <_sbrk_r>
 8007d10:	6030      	str	r0, [r6, #0]
 8007d12:	4621      	mov	r1, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f001 fd87 	bl	8009828 <_sbrk_r>
 8007d1a:	1c43      	adds	r3, r0, #1
 8007d1c:	d103      	bne.n	8007d26 <sbrk_aligned+0x26>
 8007d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8007d22:	4620      	mov	r0, r4
 8007d24:	bd70      	pop	{r4, r5, r6, pc}
 8007d26:	1cc4      	adds	r4, r0, #3
 8007d28:	f024 0403 	bic.w	r4, r4, #3
 8007d2c:	42a0      	cmp	r0, r4
 8007d2e:	d0f8      	beq.n	8007d22 <sbrk_aligned+0x22>
 8007d30:	1a21      	subs	r1, r4, r0
 8007d32:	4628      	mov	r0, r5
 8007d34:	f001 fd78 	bl	8009828 <_sbrk_r>
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d1f2      	bne.n	8007d22 <sbrk_aligned+0x22>
 8007d3c:	e7ef      	b.n	8007d1e <sbrk_aligned+0x1e>
 8007d3e:	bf00      	nop
 8007d40:	20000c08 	.word	0x20000c08

08007d44 <_malloc_r>:
 8007d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d48:	1ccd      	adds	r5, r1, #3
 8007d4a:	f025 0503 	bic.w	r5, r5, #3
 8007d4e:	3508      	adds	r5, #8
 8007d50:	2d0c      	cmp	r5, #12
 8007d52:	bf38      	it	cc
 8007d54:	250c      	movcc	r5, #12
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	4606      	mov	r6, r0
 8007d5a:	db01      	blt.n	8007d60 <_malloc_r+0x1c>
 8007d5c:	42a9      	cmp	r1, r5
 8007d5e:	d904      	bls.n	8007d6a <_malloc_r+0x26>
 8007d60:	230c      	movs	r3, #12
 8007d62:	6033      	str	r3, [r6, #0]
 8007d64:	2000      	movs	r0, #0
 8007d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e40 <_malloc_r+0xfc>
 8007d6e:	f000 f869 	bl	8007e44 <__malloc_lock>
 8007d72:	f8d8 3000 	ldr.w	r3, [r8]
 8007d76:	461c      	mov	r4, r3
 8007d78:	bb44      	cbnz	r4, 8007dcc <_malloc_r+0x88>
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f7ff ffbf 	bl	8007d00 <sbrk_aligned>
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	4604      	mov	r4, r0
 8007d86:	d158      	bne.n	8007e3a <_malloc_r+0xf6>
 8007d88:	f8d8 4000 	ldr.w	r4, [r8]
 8007d8c:	4627      	mov	r7, r4
 8007d8e:	2f00      	cmp	r7, #0
 8007d90:	d143      	bne.n	8007e1a <_malloc_r+0xd6>
 8007d92:	2c00      	cmp	r4, #0
 8007d94:	d04b      	beq.n	8007e2e <_malloc_r+0xea>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	4639      	mov	r1, r7
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	eb04 0903 	add.w	r9, r4, r3
 8007da0:	f001 fd42 	bl	8009828 <_sbrk_r>
 8007da4:	4581      	cmp	r9, r0
 8007da6:	d142      	bne.n	8007e2e <_malloc_r+0xea>
 8007da8:	6821      	ldr	r1, [r4, #0]
 8007daa:	4630      	mov	r0, r6
 8007dac:	1a6d      	subs	r5, r5, r1
 8007dae:	4629      	mov	r1, r5
 8007db0:	f7ff ffa6 	bl	8007d00 <sbrk_aligned>
 8007db4:	3001      	adds	r0, #1
 8007db6:	d03a      	beq.n	8007e2e <_malloc_r+0xea>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	442b      	add	r3, r5
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	bb62      	cbnz	r2, 8007e20 <_malloc_r+0xdc>
 8007dc6:	f8c8 7000 	str.w	r7, [r8]
 8007dca:	e00f      	b.n	8007dec <_malloc_r+0xa8>
 8007dcc:	6822      	ldr	r2, [r4, #0]
 8007dce:	1b52      	subs	r2, r2, r5
 8007dd0:	d420      	bmi.n	8007e14 <_malloc_r+0xd0>
 8007dd2:	2a0b      	cmp	r2, #11
 8007dd4:	d917      	bls.n	8007e06 <_malloc_r+0xc2>
 8007dd6:	1961      	adds	r1, r4, r5
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	6025      	str	r5, [r4, #0]
 8007ddc:	bf18      	it	ne
 8007dde:	6059      	strne	r1, [r3, #4]
 8007de0:	6863      	ldr	r3, [r4, #4]
 8007de2:	bf08      	it	eq
 8007de4:	f8c8 1000 	streq.w	r1, [r8]
 8007de8:	5162      	str	r2, [r4, r5]
 8007dea:	604b      	str	r3, [r1, #4]
 8007dec:	4630      	mov	r0, r6
 8007dee:	f000 f82f 	bl	8007e50 <__malloc_unlock>
 8007df2:	f104 000b 	add.w	r0, r4, #11
 8007df6:	1d23      	adds	r3, r4, #4
 8007df8:	f020 0007 	bic.w	r0, r0, #7
 8007dfc:	1ac2      	subs	r2, r0, r3
 8007dfe:	bf1c      	itt	ne
 8007e00:	1a1b      	subne	r3, r3, r0
 8007e02:	50a3      	strne	r3, [r4, r2]
 8007e04:	e7af      	b.n	8007d66 <_malloc_r+0x22>
 8007e06:	6862      	ldr	r2, [r4, #4]
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	bf0c      	ite	eq
 8007e0c:	f8c8 2000 	streq.w	r2, [r8]
 8007e10:	605a      	strne	r2, [r3, #4]
 8007e12:	e7eb      	b.n	8007dec <_malloc_r+0xa8>
 8007e14:	4623      	mov	r3, r4
 8007e16:	6864      	ldr	r4, [r4, #4]
 8007e18:	e7ae      	b.n	8007d78 <_malloc_r+0x34>
 8007e1a:	463c      	mov	r4, r7
 8007e1c:	687f      	ldr	r7, [r7, #4]
 8007e1e:	e7b6      	b.n	8007d8e <_malloc_r+0x4a>
 8007e20:	461a      	mov	r2, r3
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	d1fb      	bne.n	8007e20 <_malloc_r+0xdc>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	6053      	str	r3, [r2, #4]
 8007e2c:	e7de      	b.n	8007dec <_malloc_r+0xa8>
 8007e2e:	230c      	movs	r3, #12
 8007e30:	4630      	mov	r0, r6
 8007e32:	6033      	str	r3, [r6, #0]
 8007e34:	f000 f80c 	bl	8007e50 <__malloc_unlock>
 8007e38:	e794      	b.n	8007d64 <_malloc_r+0x20>
 8007e3a:	6005      	str	r5, [r0, #0]
 8007e3c:	e7d6      	b.n	8007dec <_malloc_r+0xa8>
 8007e3e:	bf00      	nop
 8007e40:	20000c0c 	.word	0x20000c0c

08007e44 <__malloc_lock>:
 8007e44:	4801      	ldr	r0, [pc, #4]	@ (8007e4c <__malloc_lock+0x8>)
 8007e46:	f7ff b872 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20000c04 	.word	0x20000c04

08007e50 <__malloc_unlock>:
 8007e50:	4801      	ldr	r0, [pc, #4]	@ (8007e58 <__malloc_unlock+0x8>)
 8007e52:	f7ff b86d 	b.w	8006f30 <__retarget_lock_release_recursive>
 8007e56:	bf00      	nop
 8007e58:	20000c04 	.word	0x20000c04

08007e5c <_Balloc>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	69c6      	ldr	r6, [r0, #28]
 8007e60:	4604      	mov	r4, r0
 8007e62:	460d      	mov	r5, r1
 8007e64:	b976      	cbnz	r6, 8007e84 <_Balloc+0x28>
 8007e66:	2010      	movs	r0, #16
 8007e68:	f7ff ff42 	bl	8007cf0 <malloc>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	61e0      	str	r0, [r4, #28]
 8007e70:	b920      	cbnz	r0, 8007e7c <_Balloc+0x20>
 8007e72:	216b      	movs	r1, #107	@ 0x6b
 8007e74:	4b17      	ldr	r3, [pc, #92]	@ (8007ed4 <_Balloc+0x78>)
 8007e76:	4818      	ldr	r0, [pc, #96]	@ (8007ed8 <_Balloc+0x7c>)
 8007e78:	f7ff f884 	bl	8006f84 <__assert_func>
 8007e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e80:	6006      	str	r6, [r0, #0]
 8007e82:	60c6      	str	r6, [r0, #12]
 8007e84:	69e6      	ldr	r6, [r4, #28]
 8007e86:	68f3      	ldr	r3, [r6, #12]
 8007e88:	b183      	cbz	r3, 8007eac <_Balloc+0x50>
 8007e8a:	69e3      	ldr	r3, [r4, #28]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e92:	b9b8      	cbnz	r0, 8007ec4 <_Balloc+0x68>
 8007e94:	2101      	movs	r1, #1
 8007e96:	fa01 f605 	lsl.w	r6, r1, r5
 8007e9a:	1d72      	adds	r2, r6, #5
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	0092      	lsls	r2, r2, #2
 8007ea0:	f001 fcdf 	bl	8009862 <_calloc_r>
 8007ea4:	b160      	cbz	r0, 8007ec0 <_Balloc+0x64>
 8007ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eaa:	e00e      	b.n	8007eca <_Balloc+0x6e>
 8007eac:	2221      	movs	r2, #33	@ 0x21
 8007eae:	2104      	movs	r1, #4
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f001 fcd6 	bl	8009862 <_calloc_r>
 8007eb6:	69e3      	ldr	r3, [r4, #28]
 8007eb8:	60f0      	str	r0, [r6, #12]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e4      	bne.n	8007e8a <_Balloc+0x2e>
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	6802      	ldr	r2, [r0, #0]
 8007ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ed0:	e7f7      	b.n	8007ec2 <_Balloc+0x66>
 8007ed2:	bf00      	nop
 8007ed4:	0800c2e6 	.word	0x0800c2e6
 8007ed8:	0800c409 	.word	0x0800c409

08007edc <_Bfree>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	69c6      	ldr	r6, [r0, #28]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	b976      	cbnz	r6, 8007f04 <_Bfree+0x28>
 8007ee6:	2010      	movs	r0, #16
 8007ee8:	f7ff ff02 	bl	8007cf0 <malloc>
 8007eec:	4602      	mov	r2, r0
 8007eee:	61e8      	str	r0, [r5, #28]
 8007ef0:	b920      	cbnz	r0, 8007efc <_Bfree+0x20>
 8007ef2:	218f      	movs	r1, #143	@ 0x8f
 8007ef4:	4b08      	ldr	r3, [pc, #32]	@ (8007f18 <_Bfree+0x3c>)
 8007ef6:	4809      	ldr	r0, [pc, #36]	@ (8007f1c <_Bfree+0x40>)
 8007ef8:	f7ff f844 	bl	8006f84 <__assert_func>
 8007efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f00:	6006      	str	r6, [r0, #0]
 8007f02:	60c6      	str	r6, [r0, #12]
 8007f04:	b13c      	cbz	r4, 8007f16 <_Bfree+0x3a>
 8007f06:	69eb      	ldr	r3, [r5, #28]
 8007f08:	6862      	ldr	r2, [r4, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f10:	6021      	str	r1, [r4, #0]
 8007f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	0800c2e6 	.word	0x0800c2e6
 8007f1c:	0800c409 	.word	0x0800c409

08007f20 <__multadd>:
 8007f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f24:	4607      	mov	r7, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	461e      	mov	r6, r3
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	690d      	ldr	r5, [r1, #16]
 8007f2e:	f101 0c14 	add.w	ip, r1, #20
 8007f32:	f8dc 3000 	ldr.w	r3, [ip]
 8007f36:	3001      	adds	r0, #1
 8007f38:	b299      	uxth	r1, r3
 8007f3a:	fb02 6101 	mla	r1, r2, r1, r6
 8007f3e:	0c1e      	lsrs	r6, r3, #16
 8007f40:	0c0b      	lsrs	r3, r1, #16
 8007f42:	fb02 3306 	mla	r3, r2, r6, r3
 8007f46:	b289      	uxth	r1, r1
 8007f48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f4c:	4285      	cmp	r5, r0
 8007f4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f52:	f84c 1b04 	str.w	r1, [ip], #4
 8007f56:	dcec      	bgt.n	8007f32 <__multadd+0x12>
 8007f58:	b30e      	cbz	r6, 8007f9e <__multadd+0x7e>
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	42ab      	cmp	r3, r5
 8007f5e:	dc19      	bgt.n	8007f94 <__multadd+0x74>
 8007f60:	6861      	ldr	r1, [r4, #4]
 8007f62:	4638      	mov	r0, r7
 8007f64:	3101      	adds	r1, #1
 8007f66:	f7ff ff79 	bl	8007e5c <_Balloc>
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	b928      	cbnz	r0, 8007f7a <__multadd+0x5a>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	21ba      	movs	r1, #186	@ 0xba
 8007f72:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa4 <__multadd+0x84>)
 8007f74:	480c      	ldr	r0, [pc, #48]	@ (8007fa8 <__multadd+0x88>)
 8007f76:	f7ff f805 	bl	8006f84 <__assert_func>
 8007f7a:	6922      	ldr	r2, [r4, #16]
 8007f7c:	f104 010c 	add.w	r1, r4, #12
 8007f80:	3202      	adds	r2, #2
 8007f82:	0092      	lsls	r2, r2, #2
 8007f84:	300c      	adds	r0, #12
 8007f86:	f7fe ffea 	bl	8006f5e <memcpy>
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f7ff ffa5 	bl	8007edc <_Bfree>
 8007f92:	4644      	mov	r4, r8
 8007f94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f98:	3501      	adds	r5, #1
 8007f9a:	615e      	str	r6, [r3, #20]
 8007f9c:	6125      	str	r5, [r4, #16]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa4:	0800c3f8 	.word	0x0800c3f8
 8007fa8:	0800c409 	.word	0x0800c409

08007fac <__s2b>:
 8007fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb0:	4615      	mov	r5, r2
 8007fb2:	2209      	movs	r2, #9
 8007fb4:	461f      	mov	r7, r3
 8007fb6:	3308      	adds	r3, #8
 8007fb8:	460c      	mov	r4, r1
 8007fba:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	db09      	blt.n	8007fdc <__s2b+0x30>
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f7ff ff47 	bl	8007e5c <_Balloc>
 8007fce:	b940      	cbnz	r0, 8007fe2 <__s2b+0x36>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	21d3      	movs	r1, #211	@ 0xd3
 8007fd4:	4b18      	ldr	r3, [pc, #96]	@ (8008038 <__s2b+0x8c>)
 8007fd6:	4819      	ldr	r0, [pc, #100]	@ (800803c <__s2b+0x90>)
 8007fd8:	f7fe ffd4 	bl	8006f84 <__assert_func>
 8007fdc:	0052      	lsls	r2, r2, #1
 8007fde:	3101      	adds	r1, #1
 8007fe0:	e7f0      	b.n	8007fc4 <__s2b+0x18>
 8007fe2:	9b08      	ldr	r3, [sp, #32]
 8007fe4:	2d09      	cmp	r5, #9
 8007fe6:	6143      	str	r3, [r0, #20]
 8007fe8:	f04f 0301 	mov.w	r3, #1
 8007fec:	6103      	str	r3, [r0, #16]
 8007fee:	dd16      	ble.n	800801e <__s2b+0x72>
 8007ff0:	f104 0909 	add.w	r9, r4, #9
 8007ff4:	46c8      	mov	r8, r9
 8007ff6:	442c      	add	r4, r5
 8007ff8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ffc:	4601      	mov	r1, r0
 8007ffe:	220a      	movs	r2, #10
 8008000:	4630      	mov	r0, r6
 8008002:	3b30      	subs	r3, #48	@ 0x30
 8008004:	f7ff ff8c 	bl	8007f20 <__multadd>
 8008008:	45a0      	cmp	r8, r4
 800800a:	d1f5      	bne.n	8007ff8 <__s2b+0x4c>
 800800c:	f1a5 0408 	sub.w	r4, r5, #8
 8008010:	444c      	add	r4, r9
 8008012:	1b2d      	subs	r5, r5, r4
 8008014:	1963      	adds	r3, r4, r5
 8008016:	42bb      	cmp	r3, r7
 8008018:	db04      	blt.n	8008024 <__s2b+0x78>
 800801a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801e:	2509      	movs	r5, #9
 8008020:	340a      	adds	r4, #10
 8008022:	e7f6      	b.n	8008012 <__s2b+0x66>
 8008024:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008028:	4601      	mov	r1, r0
 800802a:	220a      	movs	r2, #10
 800802c:	4630      	mov	r0, r6
 800802e:	3b30      	subs	r3, #48	@ 0x30
 8008030:	f7ff ff76 	bl	8007f20 <__multadd>
 8008034:	e7ee      	b.n	8008014 <__s2b+0x68>
 8008036:	bf00      	nop
 8008038:	0800c3f8 	.word	0x0800c3f8
 800803c:	0800c409 	.word	0x0800c409

08008040 <__hi0bits>:
 8008040:	4603      	mov	r3, r0
 8008042:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008046:	bf3a      	itte	cc
 8008048:	0403      	lslcc	r3, r0, #16
 800804a:	2010      	movcc	r0, #16
 800804c:	2000      	movcs	r0, #0
 800804e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008052:	bf3c      	itt	cc
 8008054:	021b      	lslcc	r3, r3, #8
 8008056:	3008      	addcc	r0, #8
 8008058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800805c:	bf3c      	itt	cc
 800805e:	011b      	lslcc	r3, r3, #4
 8008060:	3004      	addcc	r0, #4
 8008062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008066:	bf3c      	itt	cc
 8008068:	009b      	lslcc	r3, r3, #2
 800806a:	3002      	addcc	r0, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	db05      	blt.n	800807c <__hi0bits+0x3c>
 8008070:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008074:	f100 0001 	add.w	r0, r0, #1
 8008078:	bf08      	it	eq
 800807a:	2020      	moveq	r0, #32
 800807c:	4770      	bx	lr

0800807e <__lo0bits>:
 800807e:	6803      	ldr	r3, [r0, #0]
 8008080:	4602      	mov	r2, r0
 8008082:	f013 0007 	ands.w	r0, r3, #7
 8008086:	d00b      	beq.n	80080a0 <__lo0bits+0x22>
 8008088:	07d9      	lsls	r1, r3, #31
 800808a:	d421      	bmi.n	80080d0 <__lo0bits+0x52>
 800808c:	0798      	lsls	r0, r3, #30
 800808e:	bf49      	itett	mi
 8008090:	085b      	lsrmi	r3, r3, #1
 8008092:	089b      	lsrpl	r3, r3, #2
 8008094:	2001      	movmi	r0, #1
 8008096:	6013      	strmi	r3, [r2, #0]
 8008098:	bf5c      	itt	pl
 800809a:	2002      	movpl	r0, #2
 800809c:	6013      	strpl	r3, [r2, #0]
 800809e:	4770      	bx	lr
 80080a0:	b299      	uxth	r1, r3
 80080a2:	b909      	cbnz	r1, 80080a8 <__lo0bits+0x2a>
 80080a4:	2010      	movs	r0, #16
 80080a6:	0c1b      	lsrs	r3, r3, #16
 80080a8:	b2d9      	uxtb	r1, r3
 80080aa:	b909      	cbnz	r1, 80080b0 <__lo0bits+0x32>
 80080ac:	3008      	adds	r0, #8
 80080ae:	0a1b      	lsrs	r3, r3, #8
 80080b0:	0719      	lsls	r1, r3, #28
 80080b2:	bf04      	itt	eq
 80080b4:	091b      	lsreq	r3, r3, #4
 80080b6:	3004      	addeq	r0, #4
 80080b8:	0799      	lsls	r1, r3, #30
 80080ba:	bf04      	itt	eq
 80080bc:	089b      	lsreq	r3, r3, #2
 80080be:	3002      	addeq	r0, #2
 80080c0:	07d9      	lsls	r1, r3, #31
 80080c2:	d403      	bmi.n	80080cc <__lo0bits+0x4e>
 80080c4:	085b      	lsrs	r3, r3, #1
 80080c6:	f100 0001 	add.w	r0, r0, #1
 80080ca:	d003      	beq.n	80080d4 <__lo0bits+0x56>
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	4770      	bx	lr
 80080d0:	2000      	movs	r0, #0
 80080d2:	4770      	bx	lr
 80080d4:	2020      	movs	r0, #32
 80080d6:	4770      	bx	lr

080080d8 <__i2b>:
 80080d8:	b510      	push	{r4, lr}
 80080da:	460c      	mov	r4, r1
 80080dc:	2101      	movs	r1, #1
 80080de:	f7ff febd 	bl	8007e5c <_Balloc>
 80080e2:	4602      	mov	r2, r0
 80080e4:	b928      	cbnz	r0, 80080f2 <__i2b+0x1a>
 80080e6:	f240 1145 	movw	r1, #325	@ 0x145
 80080ea:	4b04      	ldr	r3, [pc, #16]	@ (80080fc <__i2b+0x24>)
 80080ec:	4804      	ldr	r0, [pc, #16]	@ (8008100 <__i2b+0x28>)
 80080ee:	f7fe ff49 	bl	8006f84 <__assert_func>
 80080f2:	2301      	movs	r3, #1
 80080f4:	6144      	str	r4, [r0, #20]
 80080f6:	6103      	str	r3, [r0, #16]
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	bf00      	nop
 80080fc:	0800c3f8 	.word	0x0800c3f8
 8008100:	0800c409 	.word	0x0800c409

08008104 <__multiply>:
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	4614      	mov	r4, r2
 800810a:	690a      	ldr	r2, [r1, #16]
 800810c:	6923      	ldr	r3, [r4, #16]
 800810e:	460f      	mov	r7, r1
 8008110:	429a      	cmp	r2, r3
 8008112:	bfa2      	ittt	ge
 8008114:	4623      	movge	r3, r4
 8008116:	460c      	movge	r4, r1
 8008118:	461f      	movge	r7, r3
 800811a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800811e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008122:	68a3      	ldr	r3, [r4, #8]
 8008124:	6861      	ldr	r1, [r4, #4]
 8008126:	eb0a 0609 	add.w	r6, sl, r9
 800812a:	42b3      	cmp	r3, r6
 800812c:	b085      	sub	sp, #20
 800812e:	bfb8      	it	lt
 8008130:	3101      	addlt	r1, #1
 8008132:	f7ff fe93 	bl	8007e5c <_Balloc>
 8008136:	b930      	cbnz	r0, 8008146 <__multiply+0x42>
 8008138:	4602      	mov	r2, r0
 800813a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800813e:	4b43      	ldr	r3, [pc, #268]	@ (800824c <__multiply+0x148>)
 8008140:	4843      	ldr	r0, [pc, #268]	@ (8008250 <__multiply+0x14c>)
 8008142:	f7fe ff1f 	bl	8006f84 <__assert_func>
 8008146:	f100 0514 	add.w	r5, r0, #20
 800814a:	462b      	mov	r3, r5
 800814c:	2200      	movs	r2, #0
 800814e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008152:	4543      	cmp	r3, r8
 8008154:	d321      	bcc.n	800819a <__multiply+0x96>
 8008156:	f107 0114 	add.w	r1, r7, #20
 800815a:	f104 0214 	add.w	r2, r4, #20
 800815e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008162:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008166:	9302      	str	r3, [sp, #8]
 8008168:	1b13      	subs	r3, r2, r4
 800816a:	3b15      	subs	r3, #21
 800816c:	f023 0303 	bic.w	r3, r3, #3
 8008170:	3304      	adds	r3, #4
 8008172:	f104 0715 	add.w	r7, r4, #21
 8008176:	42ba      	cmp	r2, r7
 8008178:	bf38      	it	cc
 800817a:	2304      	movcc	r3, #4
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	9b02      	ldr	r3, [sp, #8]
 8008180:	9103      	str	r1, [sp, #12]
 8008182:	428b      	cmp	r3, r1
 8008184:	d80c      	bhi.n	80081a0 <__multiply+0x9c>
 8008186:	2e00      	cmp	r6, #0
 8008188:	dd03      	ble.n	8008192 <__multiply+0x8e>
 800818a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800818e:	2b00      	cmp	r3, #0
 8008190:	d05a      	beq.n	8008248 <__multiply+0x144>
 8008192:	6106      	str	r6, [r0, #16]
 8008194:	b005      	add	sp, #20
 8008196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819a:	f843 2b04 	str.w	r2, [r3], #4
 800819e:	e7d8      	b.n	8008152 <__multiply+0x4e>
 80081a0:	f8b1 a000 	ldrh.w	sl, [r1]
 80081a4:	f1ba 0f00 	cmp.w	sl, #0
 80081a8:	d023      	beq.n	80081f2 <__multiply+0xee>
 80081aa:	46a9      	mov	r9, r5
 80081ac:	f04f 0c00 	mov.w	ip, #0
 80081b0:	f104 0e14 	add.w	lr, r4, #20
 80081b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081b8:	f8d9 3000 	ldr.w	r3, [r9]
 80081bc:	fa1f fb87 	uxth.w	fp, r7
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	fb0a 330b 	mla	r3, sl, fp, r3
 80081c6:	4463      	add	r3, ip
 80081c8:	f8d9 c000 	ldr.w	ip, [r9]
 80081cc:	0c3f      	lsrs	r7, r7, #16
 80081ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80081d2:	fb0a c707 	mla	r7, sl, r7, ip
 80081d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80081da:	b29b      	uxth	r3, r3
 80081dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80081e0:	4572      	cmp	r2, lr
 80081e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80081e6:	f849 3b04 	str.w	r3, [r9], #4
 80081ea:	d8e3      	bhi.n	80081b4 <__multiply+0xb0>
 80081ec:	9b01      	ldr	r3, [sp, #4]
 80081ee:	f845 c003 	str.w	ip, [r5, r3]
 80081f2:	9b03      	ldr	r3, [sp, #12]
 80081f4:	3104      	adds	r1, #4
 80081f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80081fa:	f1b9 0f00 	cmp.w	r9, #0
 80081fe:	d021      	beq.n	8008244 <__multiply+0x140>
 8008200:	46ae      	mov	lr, r5
 8008202:	f04f 0a00 	mov.w	sl, #0
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	f104 0c14 	add.w	ip, r4, #20
 800820c:	f8bc b000 	ldrh.w	fp, [ip]
 8008210:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008214:	b29b      	uxth	r3, r3
 8008216:	fb09 770b 	mla	r7, r9, fp, r7
 800821a:	4457      	add	r7, sl
 800821c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008220:	f84e 3b04 	str.w	r3, [lr], #4
 8008224:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008228:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800822c:	f8be 3000 	ldrh.w	r3, [lr]
 8008230:	4562      	cmp	r2, ip
 8008232:	fb09 330a 	mla	r3, r9, sl, r3
 8008236:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800823a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800823e:	d8e5      	bhi.n	800820c <__multiply+0x108>
 8008240:	9f01      	ldr	r7, [sp, #4]
 8008242:	51eb      	str	r3, [r5, r7]
 8008244:	3504      	adds	r5, #4
 8008246:	e79a      	b.n	800817e <__multiply+0x7a>
 8008248:	3e01      	subs	r6, #1
 800824a:	e79c      	b.n	8008186 <__multiply+0x82>
 800824c:	0800c3f8 	.word	0x0800c3f8
 8008250:	0800c409 	.word	0x0800c409

08008254 <__pow5mult>:
 8008254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008258:	4615      	mov	r5, r2
 800825a:	f012 0203 	ands.w	r2, r2, #3
 800825e:	4607      	mov	r7, r0
 8008260:	460e      	mov	r6, r1
 8008262:	d007      	beq.n	8008274 <__pow5mult+0x20>
 8008264:	4c25      	ldr	r4, [pc, #148]	@ (80082fc <__pow5mult+0xa8>)
 8008266:	3a01      	subs	r2, #1
 8008268:	2300      	movs	r3, #0
 800826a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800826e:	f7ff fe57 	bl	8007f20 <__multadd>
 8008272:	4606      	mov	r6, r0
 8008274:	10ad      	asrs	r5, r5, #2
 8008276:	d03d      	beq.n	80082f4 <__pow5mult+0xa0>
 8008278:	69fc      	ldr	r4, [r7, #28]
 800827a:	b97c      	cbnz	r4, 800829c <__pow5mult+0x48>
 800827c:	2010      	movs	r0, #16
 800827e:	f7ff fd37 	bl	8007cf0 <malloc>
 8008282:	4602      	mov	r2, r0
 8008284:	61f8      	str	r0, [r7, #28]
 8008286:	b928      	cbnz	r0, 8008294 <__pow5mult+0x40>
 8008288:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800828c:	4b1c      	ldr	r3, [pc, #112]	@ (8008300 <__pow5mult+0xac>)
 800828e:	481d      	ldr	r0, [pc, #116]	@ (8008304 <__pow5mult+0xb0>)
 8008290:	f7fe fe78 	bl	8006f84 <__assert_func>
 8008294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008298:	6004      	str	r4, [r0, #0]
 800829a:	60c4      	str	r4, [r0, #12]
 800829c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082a4:	b94c      	cbnz	r4, 80082ba <__pow5mult+0x66>
 80082a6:	f240 2171 	movw	r1, #625	@ 0x271
 80082aa:	4638      	mov	r0, r7
 80082ac:	f7ff ff14 	bl	80080d8 <__i2b>
 80082b0:	2300      	movs	r3, #0
 80082b2:	4604      	mov	r4, r0
 80082b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	f04f 0900 	mov.w	r9, #0
 80082be:	07eb      	lsls	r3, r5, #31
 80082c0:	d50a      	bpl.n	80082d8 <__pow5mult+0x84>
 80082c2:	4631      	mov	r1, r6
 80082c4:	4622      	mov	r2, r4
 80082c6:	4638      	mov	r0, r7
 80082c8:	f7ff ff1c 	bl	8008104 <__multiply>
 80082cc:	4680      	mov	r8, r0
 80082ce:	4631      	mov	r1, r6
 80082d0:	4638      	mov	r0, r7
 80082d2:	f7ff fe03 	bl	8007edc <_Bfree>
 80082d6:	4646      	mov	r6, r8
 80082d8:	106d      	asrs	r5, r5, #1
 80082da:	d00b      	beq.n	80082f4 <__pow5mult+0xa0>
 80082dc:	6820      	ldr	r0, [r4, #0]
 80082de:	b938      	cbnz	r0, 80082f0 <__pow5mult+0x9c>
 80082e0:	4622      	mov	r2, r4
 80082e2:	4621      	mov	r1, r4
 80082e4:	4638      	mov	r0, r7
 80082e6:	f7ff ff0d 	bl	8008104 <__multiply>
 80082ea:	6020      	str	r0, [r4, #0]
 80082ec:	f8c0 9000 	str.w	r9, [r0]
 80082f0:	4604      	mov	r4, r0
 80082f2:	e7e4      	b.n	80082be <__pow5mult+0x6a>
 80082f4:	4630      	mov	r0, r6
 80082f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082fa:	bf00      	nop
 80082fc:	0800c464 	.word	0x0800c464
 8008300:	0800c2e6 	.word	0x0800c2e6
 8008304:	0800c409 	.word	0x0800c409

08008308 <__lshift>:
 8008308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830c:	460c      	mov	r4, r1
 800830e:	4607      	mov	r7, r0
 8008310:	4691      	mov	r9, r2
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	6849      	ldr	r1, [r1, #4]
 8008316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008320:	f108 0601 	add.w	r6, r8, #1
 8008324:	42b3      	cmp	r3, r6
 8008326:	db0b      	blt.n	8008340 <__lshift+0x38>
 8008328:	4638      	mov	r0, r7
 800832a:	f7ff fd97 	bl	8007e5c <_Balloc>
 800832e:	4605      	mov	r5, r0
 8008330:	b948      	cbnz	r0, 8008346 <__lshift+0x3e>
 8008332:	4602      	mov	r2, r0
 8008334:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008338:	4b27      	ldr	r3, [pc, #156]	@ (80083d8 <__lshift+0xd0>)
 800833a:	4828      	ldr	r0, [pc, #160]	@ (80083dc <__lshift+0xd4>)
 800833c:	f7fe fe22 	bl	8006f84 <__assert_func>
 8008340:	3101      	adds	r1, #1
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	e7ee      	b.n	8008324 <__lshift+0x1c>
 8008346:	2300      	movs	r3, #0
 8008348:	f100 0114 	add.w	r1, r0, #20
 800834c:	f100 0210 	add.w	r2, r0, #16
 8008350:	4618      	mov	r0, r3
 8008352:	4553      	cmp	r3, sl
 8008354:	db33      	blt.n	80083be <__lshift+0xb6>
 8008356:	6920      	ldr	r0, [r4, #16]
 8008358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800835c:	f104 0314 	add.w	r3, r4, #20
 8008360:	f019 091f 	ands.w	r9, r9, #31
 8008364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800836c:	d02b      	beq.n	80083c6 <__lshift+0xbe>
 800836e:	468a      	mov	sl, r1
 8008370:	2200      	movs	r2, #0
 8008372:	f1c9 0e20 	rsb	lr, r9, #32
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	fa00 f009 	lsl.w	r0, r0, r9
 800837c:	4310      	orrs	r0, r2
 800837e:	f84a 0b04 	str.w	r0, [sl], #4
 8008382:	f853 2b04 	ldr.w	r2, [r3], #4
 8008386:	459c      	cmp	ip, r3
 8008388:	fa22 f20e 	lsr.w	r2, r2, lr
 800838c:	d8f3      	bhi.n	8008376 <__lshift+0x6e>
 800838e:	ebac 0304 	sub.w	r3, ip, r4
 8008392:	3b15      	subs	r3, #21
 8008394:	f023 0303 	bic.w	r3, r3, #3
 8008398:	3304      	adds	r3, #4
 800839a:	f104 0015 	add.w	r0, r4, #21
 800839e:	4584      	cmp	ip, r0
 80083a0:	bf38      	it	cc
 80083a2:	2304      	movcc	r3, #4
 80083a4:	50ca      	str	r2, [r1, r3]
 80083a6:	b10a      	cbz	r2, 80083ac <__lshift+0xa4>
 80083a8:	f108 0602 	add.w	r6, r8, #2
 80083ac:	3e01      	subs	r6, #1
 80083ae:	4638      	mov	r0, r7
 80083b0:	4621      	mov	r1, r4
 80083b2:	612e      	str	r6, [r5, #16]
 80083b4:	f7ff fd92 	bl	8007edc <_Bfree>
 80083b8:	4628      	mov	r0, r5
 80083ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083be:	f842 0f04 	str.w	r0, [r2, #4]!
 80083c2:	3301      	adds	r3, #1
 80083c4:	e7c5      	b.n	8008352 <__lshift+0x4a>
 80083c6:	3904      	subs	r1, #4
 80083c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083cc:	459c      	cmp	ip, r3
 80083ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80083d2:	d8f9      	bhi.n	80083c8 <__lshift+0xc0>
 80083d4:	e7ea      	b.n	80083ac <__lshift+0xa4>
 80083d6:	bf00      	nop
 80083d8:	0800c3f8 	.word	0x0800c3f8
 80083dc:	0800c409 	.word	0x0800c409

080083e0 <__mcmp>:
 80083e0:	4603      	mov	r3, r0
 80083e2:	690a      	ldr	r2, [r1, #16]
 80083e4:	6900      	ldr	r0, [r0, #16]
 80083e6:	b530      	push	{r4, r5, lr}
 80083e8:	1a80      	subs	r0, r0, r2
 80083ea:	d10e      	bne.n	800840a <__mcmp+0x2a>
 80083ec:	3314      	adds	r3, #20
 80083ee:	3114      	adds	r1, #20
 80083f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008400:	4295      	cmp	r5, r2
 8008402:	d003      	beq.n	800840c <__mcmp+0x2c>
 8008404:	d205      	bcs.n	8008412 <__mcmp+0x32>
 8008406:	f04f 30ff 	mov.w	r0, #4294967295
 800840a:	bd30      	pop	{r4, r5, pc}
 800840c:	42a3      	cmp	r3, r4
 800840e:	d3f3      	bcc.n	80083f8 <__mcmp+0x18>
 8008410:	e7fb      	b.n	800840a <__mcmp+0x2a>
 8008412:	2001      	movs	r0, #1
 8008414:	e7f9      	b.n	800840a <__mcmp+0x2a>
	...

08008418 <__mdiff>:
 8008418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	4689      	mov	r9, r1
 800841e:	4606      	mov	r6, r0
 8008420:	4611      	mov	r1, r2
 8008422:	4648      	mov	r0, r9
 8008424:	4614      	mov	r4, r2
 8008426:	f7ff ffdb 	bl	80083e0 <__mcmp>
 800842a:	1e05      	subs	r5, r0, #0
 800842c:	d112      	bne.n	8008454 <__mdiff+0x3c>
 800842e:	4629      	mov	r1, r5
 8008430:	4630      	mov	r0, r6
 8008432:	f7ff fd13 	bl	8007e5c <_Balloc>
 8008436:	4602      	mov	r2, r0
 8008438:	b928      	cbnz	r0, 8008446 <__mdiff+0x2e>
 800843a:	f240 2137 	movw	r1, #567	@ 0x237
 800843e:	4b3e      	ldr	r3, [pc, #248]	@ (8008538 <__mdiff+0x120>)
 8008440:	483e      	ldr	r0, [pc, #248]	@ (800853c <__mdiff+0x124>)
 8008442:	f7fe fd9f 	bl	8006f84 <__assert_func>
 8008446:	2301      	movs	r3, #1
 8008448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800844c:	4610      	mov	r0, r2
 800844e:	b003      	add	sp, #12
 8008450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008454:	bfbc      	itt	lt
 8008456:	464b      	movlt	r3, r9
 8008458:	46a1      	movlt	r9, r4
 800845a:	4630      	mov	r0, r6
 800845c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008460:	bfba      	itte	lt
 8008462:	461c      	movlt	r4, r3
 8008464:	2501      	movlt	r5, #1
 8008466:	2500      	movge	r5, #0
 8008468:	f7ff fcf8 	bl	8007e5c <_Balloc>
 800846c:	4602      	mov	r2, r0
 800846e:	b918      	cbnz	r0, 8008478 <__mdiff+0x60>
 8008470:	f240 2145 	movw	r1, #581	@ 0x245
 8008474:	4b30      	ldr	r3, [pc, #192]	@ (8008538 <__mdiff+0x120>)
 8008476:	e7e3      	b.n	8008440 <__mdiff+0x28>
 8008478:	f100 0b14 	add.w	fp, r0, #20
 800847c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008480:	f109 0310 	add.w	r3, r9, #16
 8008484:	60c5      	str	r5, [r0, #12]
 8008486:	f04f 0c00 	mov.w	ip, #0
 800848a:	f109 0514 	add.w	r5, r9, #20
 800848e:	46d9      	mov	r9, fp
 8008490:	6926      	ldr	r6, [r4, #16]
 8008492:	f104 0e14 	add.w	lr, r4, #20
 8008496:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800849a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	9b01      	ldr	r3, [sp, #4]
 80084a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084aa:	b281      	uxth	r1, r0
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	fa1f f38a 	uxth.w	r3, sl
 80084b2:	1a5b      	subs	r3, r3, r1
 80084b4:	0c00      	lsrs	r0, r0, #16
 80084b6:	4463      	add	r3, ip
 80084b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80084bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80084c6:	4576      	cmp	r6, lr
 80084c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084cc:	f849 3b04 	str.w	r3, [r9], #4
 80084d0:	d8e6      	bhi.n	80084a0 <__mdiff+0x88>
 80084d2:	1b33      	subs	r3, r6, r4
 80084d4:	3b15      	subs	r3, #21
 80084d6:	f023 0303 	bic.w	r3, r3, #3
 80084da:	3415      	adds	r4, #21
 80084dc:	3304      	adds	r3, #4
 80084de:	42a6      	cmp	r6, r4
 80084e0:	bf38      	it	cc
 80084e2:	2304      	movcc	r3, #4
 80084e4:	441d      	add	r5, r3
 80084e6:	445b      	add	r3, fp
 80084e8:	461e      	mov	r6, r3
 80084ea:	462c      	mov	r4, r5
 80084ec:	4544      	cmp	r4, r8
 80084ee:	d30e      	bcc.n	800850e <__mdiff+0xf6>
 80084f0:	f108 0103 	add.w	r1, r8, #3
 80084f4:	1b49      	subs	r1, r1, r5
 80084f6:	f021 0103 	bic.w	r1, r1, #3
 80084fa:	3d03      	subs	r5, #3
 80084fc:	45a8      	cmp	r8, r5
 80084fe:	bf38      	it	cc
 8008500:	2100      	movcc	r1, #0
 8008502:	440b      	add	r3, r1
 8008504:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008508:	b199      	cbz	r1, 8008532 <__mdiff+0x11a>
 800850a:	6117      	str	r7, [r2, #16]
 800850c:	e79e      	b.n	800844c <__mdiff+0x34>
 800850e:	46e6      	mov	lr, ip
 8008510:	f854 1b04 	ldr.w	r1, [r4], #4
 8008514:	fa1f fc81 	uxth.w	ip, r1
 8008518:	44f4      	add	ip, lr
 800851a:	0c08      	lsrs	r0, r1, #16
 800851c:	4471      	add	r1, lr
 800851e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008522:	b289      	uxth	r1, r1
 8008524:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008528:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800852c:	f846 1b04 	str.w	r1, [r6], #4
 8008530:	e7dc      	b.n	80084ec <__mdiff+0xd4>
 8008532:	3f01      	subs	r7, #1
 8008534:	e7e6      	b.n	8008504 <__mdiff+0xec>
 8008536:	bf00      	nop
 8008538:	0800c3f8 	.word	0x0800c3f8
 800853c:	0800c409 	.word	0x0800c409

08008540 <__ulp>:
 8008540:	4b0e      	ldr	r3, [pc, #56]	@ (800857c <__ulp+0x3c>)
 8008542:	400b      	ands	r3, r1
 8008544:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008548:	2b00      	cmp	r3, #0
 800854a:	dc08      	bgt.n	800855e <__ulp+0x1e>
 800854c:	425b      	negs	r3, r3
 800854e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008552:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008556:	da04      	bge.n	8008562 <__ulp+0x22>
 8008558:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800855c:	4113      	asrs	r3, r2
 800855e:	2200      	movs	r2, #0
 8008560:	e008      	b.n	8008574 <__ulp+0x34>
 8008562:	f1a2 0314 	sub.w	r3, r2, #20
 8008566:	2b1e      	cmp	r3, #30
 8008568:	bfd6      	itet	le
 800856a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800856e:	2201      	movgt	r2, #1
 8008570:	40da      	lsrle	r2, r3
 8008572:	2300      	movs	r3, #0
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	7ff00000 	.word	0x7ff00000

08008580 <__b2d>:
 8008580:	6902      	ldr	r2, [r0, #16]
 8008582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008584:	f100 0614 	add.w	r6, r0, #20
 8008588:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800858c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008590:	4f1e      	ldr	r7, [pc, #120]	@ (800860c <__b2d+0x8c>)
 8008592:	4620      	mov	r0, r4
 8008594:	f7ff fd54 	bl	8008040 <__hi0bits>
 8008598:	4603      	mov	r3, r0
 800859a:	f1c0 0020 	rsb	r0, r0, #32
 800859e:	2b0a      	cmp	r3, #10
 80085a0:	f1a2 0504 	sub.w	r5, r2, #4
 80085a4:	6008      	str	r0, [r1, #0]
 80085a6:	dc12      	bgt.n	80085ce <__b2d+0x4e>
 80085a8:	42ae      	cmp	r6, r5
 80085aa:	bf2c      	ite	cs
 80085ac:	2200      	movcs	r2, #0
 80085ae:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80085b2:	f1c3 0c0b 	rsb	ip, r3, #11
 80085b6:	3315      	adds	r3, #21
 80085b8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80085bc:	fa04 f303 	lsl.w	r3, r4, r3
 80085c0:	fa22 f20c 	lsr.w	r2, r2, ip
 80085c4:	ea4e 0107 	orr.w	r1, lr, r7
 80085c8:	431a      	orrs	r2, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ce:	42ae      	cmp	r6, r5
 80085d0:	bf36      	itet	cc
 80085d2:	f1a2 0508 	subcc.w	r5, r2, #8
 80085d6:	2200      	movcs	r2, #0
 80085d8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80085dc:	3b0b      	subs	r3, #11
 80085de:	d012      	beq.n	8008606 <__b2d+0x86>
 80085e0:	f1c3 0720 	rsb	r7, r3, #32
 80085e4:	fa22 f107 	lsr.w	r1, r2, r7
 80085e8:	409c      	lsls	r4, r3
 80085ea:	430c      	orrs	r4, r1
 80085ec:	42b5      	cmp	r5, r6
 80085ee:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80085f2:	bf94      	ite	ls
 80085f4:	2400      	movls	r4, #0
 80085f6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80085fa:	409a      	lsls	r2, r3
 80085fc:	40fc      	lsrs	r4, r7
 80085fe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008602:	4322      	orrs	r2, r4
 8008604:	e7e1      	b.n	80085ca <__b2d+0x4a>
 8008606:	ea44 0107 	orr.w	r1, r4, r7
 800860a:	e7de      	b.n	80085ca <__b2d+0x4a>
 800860c:	3ff00000 	.word	0x3ff00000

08008610 <__d2b>:
 8008610:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008614:	2101      	movs	r1, #1
 8008616:	4690      	mov	r8, r2
 8008618:	4699      	mov	r9, r3
 800861a:	9e08      	ldr	r6, [sp, #32]
 800861c:	f7ff fc1e 	bl	8007e5c <_Balloc>
 8008620:	4604      	mov	r4, r0
 8008622:	b930      	cbnz	r0, 8008632 <__d2b+0x22>
 8008624:	4602      	mov	r2, r0
 8008626:	f240 310f 	movw	r1, #783	@ 0x30f
 800862a:	4b23      	ldr	r3, [pc, #140]	@ (80086b8 <__d2b+0xa8>)
 800862c:	4823      	ldr	r0, [pc, #140]	@ (80086bc <__d2b+0xac>)
 800862e:	f7fe fca9 	bl	8006f84 <__assert_func>
 8008632:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008636:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800863a:	b10d      	cbz	r5, 8008640 <__d2b+0x30>
 800863c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	f1b8 0300 	subs.w	r3, r8, #0
 8008646:	d024      	beq.n	8008692 <__d2b+0x82>
 8008648:	4668      	mov	r0, sp
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	f7ff fd17 	bl	800807e <__lo0bits>
 8008650:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008654:	b1d8      	cbz	r0, 800868e <__d2b+0x7e>
 8008656:	f1c0 0320 	rsb	r3, r0, #32
 800865a:	fa02 f303 	lsl.w	r3, r2, r3
 800865e:	430b      	orrs	r3, r1
 8008660:	40c2      	lsrs	r2, r0
 8008662:	6163      	str	r3, [r4, #20]
 8008664:	9201      	str	r2, [sp, #4]
 8008666:	9b01      	ldr	r3, [sp, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	bf0c      	ite	eq
 800866c:	2201      	moveq	r2, #1
 800866e:	2202      	movne	r2, #2
 8008670:	61a3      	str	r3, [r4, #24]
 8008672:	6122      	str	r2, [r4, #16]
 8008674:	b1ad      	cbz	r5, 80086a2 <__d2b+0x92>
 8008676:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800867a:	4405      	add	r5, r0
 800867c:	6035      	str	r5, [r6, #0]
 800867e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008684:	6018      	str	r0, [r3, #0]
 8008686:	4620      	mov	r0, r4
 8008688:	b002      	add	sp, #8
 800868a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800868e:	6161      	str	r1, [r4, #20]
 8008690:	e7e9      	b.n	8008666 <__d2b+0x56>
 8008692:	a801      	add	r0, sp, #4
 8008694:	f7ff fcf3 	bl	800807e <__lo0bits>
 8008698:	9b01      	ldr	r3, [sp, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	6163      	str	r3, [r4, #20]
 800869e:	3020      	adds	r0, #32
 80086a0:	e7e7      	b.n	8008672 <__d2b+0x62>
 80086a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086aa:	6030      	str	r0, [r6, #0]
 80086ac:	6918      	ldr	r0, [r3, #16]
 80086ae:	f7ff fcc7 	bl	8008040 <__hi0bits>
 80086b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086b6:	e7e4      	b.n	8008682 <__d2b+0x72>
 80086b8:	0800c3f8 	.word	0x0800c3f8
 80086bc:	0800c409 	.word	0x0800c409

080086c0 <__ratio>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	b085      	sub	sp, #20
 80086c6:	e9cd 1000 	strd	r1, r0, [sp]
 80086ca:	a902      	add	r1, sp, #8
 80086cc:	f7ff ff58 	bl	8008580 <__b2d>
 80086d0:	468b      	mov	fp, r1
 80086d2:	4606      	mov	r6, r0
 80086d4:	460f      	mov	r7, r1
 80086d6:	9800      	ldr	r0, [sp, #0]
 80086d8:	a903      	add	r1, sp, #12
 80086da:	f7ff ff51 	bl	8008580 <__b2d>
 80086de:	460d      	mov	r5, r1
 80086e0:	9b01      	ldr	r3, [sp, #4]
 80086e2:	4689      	mov	r9, r1
 80086e4:	6919      	ldr	r1, [r3, #16]
 80086e6:	9b00      	ldr	r3, [sp, #0]
 80086e8:	4604      	mov	r4, r0
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	4630      	mov	r0, r6
 80086ee:	1ac9      	subs	r1, r1, r3
 80086f0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80086f4:	1a9b      	subs	r3, r3, r2
 80086f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bfcd      	iteet	gt
 80086fe:	463a      	movgt	r2, r7
 8008700:	462a      	movle	r2, r5
 8008702:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008706:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800870a:	bfd8      	it	le
 800870c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008710:	464b      	mov	r3, r9
 8008712:	4622      	mov	r2, r4
 8008714:	4659      	mov	r1, fp
 8008716:	f7f8 f8bd 	bl	8000894 <__aeabi_ddiv>
 800871a:	b005      	add	sp, #20
 800871c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008720 <__copybits>:
 8008720:	3901      	subs	r1, #1
 8008722:	b570      	push	{r4, r5, r6, lr}
 8008724:	1149      	asrs	r1, r1, #5
 8008726:	6914      	ldr	r4, [r2, #16]
 8008728:	3101      	adds	r1, #1
 800872a:	f102 0314 	add.w	r3, r2, #20
 800872e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008732:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008736:	1f05      	subs	r5, r0, #4
 8008738:	42a3      	cmp	r3, r4
 800873a:	d30c      	bcc.n	8008756 <__copybits+0x36>
 800873c:	1aa3      	subs	r3, r4, r2
 800873e:	3b11      	subs	r3, #17
 8008740:	f023 0303 	bic.w	r3, r3, #3
 8008744:	3211      	adds	r2, #17
 8008746:	42a2      	cmp	r2, r4
 8008748:	bf88      	it	hi
 800874a:	2300      	movhi	r3, #0
 800874c:	4418      	add	r0, r3
 800874e:	2300      	movs	r3, #0
 8008750:	4288      	cmp	r0, r1
 8008752:	d305      	bcc.n	8008760 <__copybits+0x40>
 8008754:	bd70      	pop	{r4, r5, r6, pc}
 8008756:	f853 6b04 	ldr.w	r6, [r3], #4
 800875a:	f845 6f04 	str.w	r6, [r5, #4]!
 800875e:	e7eb      	b.n	8008738 <__copybits+0x18>
 8008760:	f840 3b04 	str.w	r3, [r0], #4
 8008764:	e7f4      	b.n	8008750 <__copybits+0x30>

08008766 <__any_on>:
 8008766:	f100 0214 	add.w	r2, r0, #20
 800876a:	6900      	ldr	r0, [r0, #16]
 800876c:	114b      	asrs	r3, r1, #5
 800876e:	4298      	cmp	r0, r3
 8008770:	b510      	push	{r4, lr}
 8008772:	db11      	blt.n	8008798 <__any_on+0x32>
 8008774:	dd0a      	ble.n	800878c <__any_on+0x26>
 8008776:	f011 011f 	ands.w	r1, r1, #31
 800877a:	d007      	beq.n	800878c <__any_on+0x26>
 800877c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008780:	fa24 f001 	lsr.w	r0, r4, r1
 8008784:	fa00 f101 	lsl.w	r1, r0, r1
 8008788:	428c      	cmp	r4, r1
 800878a:	d10b      	bne.n	80087a4 <__any_on+0x3e>
 800878c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008790:	4293      	cmp	r3, r2
 8008792:	d803      	bhi.n	800879c <__any_on+0x36>
 8008794:	2000      	movs	r0, #0
 8008796:	bd10      	pop	{r4, pc}
 8008798:	4603      	mov	r3, r0
 800879a:	e7f7      	b.n	800878c <__any_on+0x26>
 800879c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087a0:	2900      	cmp	r1, #0
 80087a2:	d0f5      	beq.n	8008790 <__any_on+0x2a>
 80087a4:	2001      	movs	r0, #1
 80087a6:	e7f6      	b.n	8008796 <__any_on+0x30>

080087a8 <sulp>:
 80087a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ac:	460f      	mov	r7, r1
 80087ae:	4690      	mov	r8, r2
 80087b0:	f7ff fec6 	bl	8008540 <__ulp>
 80087b4:	4604      	mov	r4, r0
 80087b6:	460d      	mov	r5, r1
 80087b8:	f1b8 0f00 	cmp.w	r8, #0
 80087bc:	d011      	beq.n	80087e2 <sulp+0x3a>
 80087be:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80087c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dd0b      	ble.n	80087e2 <sulp+0x3a>
 80087ca:	2400      	movs	r4, #0
 80087cc:	051b      	lsls	r3, r3, #20
 80087ce:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80087d2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80087d6:	4622      	mov	r2, r4
 80087d8:	462b      	mov	r3, r5
 80087da:	f7f7 ff31 	bl	8000640 <__aeabi_dmul>
 80087de:	4604      	mov	r4, r0
 80087e0:	460d      	mov	r5, r1
 80087e2:	4620      	mov	r0, r4
 80087e4:	4629      	mov	r1, r5
 80087e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ea:	0000      	movs	r0, r0
 80087ec:	0000      	movs	r0, r0
	...

080087f0 <_strtod_l>:
 80087f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	b09f      	sub	sp, #124	@ 0x7c
 80087f6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80087f8:	2200      	movs	r2, #0
 80087fa:	460c      	mov	r4, r1
 80087fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80087fe:	f04f 0a00 	mov.w	sl, #0
 8008802:	f04f 0b00 	mov.w	fp, #0
 8008806:	460a      	mov	r2, r1
 8008808:	9005      	str	r0, [sp, #20]
 800880a:	9219      	str	r2, [sp, #100]	@ 0x64
 800880c:	7811      	ldrb	r1, [r2, #0]
 800880e:	292b      	cmp	r1, #43	@ 0x2b
 8008810:	d048      	beq.n	80088a4 <_strtod_l+0xb4>
 8008812:	d836      	bhi.n	8008882 <_strtod_l+0x92>
 8008814:	290d      	cmp	r1, #13
 8008816:	d830      	bhi.n	800887a <_strtod_l+0x8a>
 8008818:	2908      	cmp	r1, #8
 800881a:	d830      	bhi.n	800887e <_strtod_l+0x8e>
 800881c:	2900      	cmp	r1, #0
 800881e:	d039      	beq.n	8008894 <_strtod_l+0xa4>
 8008820:	2200      	movs	r2, #0
 8008822:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008824:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008826:	782a      	ldrb	r2, [r5, #0]
 8008828:	2a30      	cmp	r2, #48	@ 0x30
 800882a:	f040 80b1 	bne.w	8008990 <_strtod_l+0x1a0>
 800882e:	786a      	ldrb	r2, [r5, #1]
 8008830:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008834:	2a58      	cmp	r2, #88	@ 0x58
 8008836:	d16c      	bne.n	8008912 <_strtod_l+0x122>
 8008838:	9302      	str	r3, [sp, #8]
 800883a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800883c:	4a8e      	ldr	r2, [pc, #568]	@ (8008a78 <_strtod_l+0x288>)
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	ab1a      	add	r3, sp, #104	@ 0x68
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	9805      	ldr	r0, [sp, #20]
 8008846:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008848:	a919      	add	r1, sp, #100	@ 0x64
 800884a:	f001 f887 	bl	800995c <__gethex>
 800884e:	f010 060f 	ands.w	r6, r0, #15
 8008852:	4604      	mov	r4, r0
 8008854:	d005      	beq.n	8008862 <_strtod_l+0x72>
 8008856:	2e06      	cmp	r6, #6
 8008858:	d126      	bne.n	80088a8 <_strtod_l+0xb8>
 800885a:	2300      	movs	r3, #0
 800885c:	3501      	adds	r5, #1
 800885e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008862:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008864:	2b00      	cmp	r3, #0
 8008866:	f040 8584 	bne.w	8009372 <_strtod_l+0xb82>
 800886a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800886c:	b1bb      	cbz	r3, 800889e <_strtod_l+0xae>
 800886e:	4650      	mov	r0, sl
 8008870:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008874:	b01f      	add	sp, #124	@ 0x7c
 8008876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887a:	2920      	cmp	r1, #32
 800887c:	d1d0      	bne.n	8008820 <_strtod_l+0x30>
 800887e:	3201      	adds	r2, #1
 8008880:	e7c3      	b.n	800880a <_strtod_l+0x1a>
 8008882:	292d      	cmp	r1, #45	@ 0x2d
 8008884:	d1cc      	bne.n	8008820 <_strtod_l+0x30>
 8008886:	2101      	movs	r1, #1
 8008888:	910b      	str	r1, [sp, #44]	@ 0x2c
 800888a:	1c51      	adds	r1, r2, #1
 800888c:	9119      	str	r1, [sp, #100]	@ 0x64
 800888e:	7852      	ldrb	r2, [r2, #1]
 8008890:	2a00      	cmp	r2, #0
 8008892:	d1c7      	bne.n	8008824 <_strtod_l+0x34>
 8008894:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008896:	9419      	str	r4, [sp, #100]	@ 0x64
 8008898:	2b00      	cmp	r3, #0
 800889a:	f040 8568 	bne.w	800936e <_strtod_l+0xb7e>
 800889e:	4650      	mov	r0, sl
 80088a0:	4659      	mov	r1, fp
 80088a2:	e7e7      	b.n	8008874 <_strtod_l+0x84>
 80088a4:	2100      	movs	r1, #0
 80088a6:	e7ef      	b.n	8008888 <_strtod_l+0x98>
 80088a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80088aa:	b13a      	cbz	r2, 80088bc <_strtod_l+0xcc>
 80088ac:	2135      	movs	r1, #53	@ 0x35
 80088ae:	a81c      	add	r0, sp, #112	@ 0x70
 80088b0:	f7ff ff36 	bl	8008720 <__copybits>
 80088b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088b6:	9805      	ldr	r0, [sp, #20]
 80088b8:	f7ff fb10 	bl	8007edc <_Bfree>
 80088bc:	3e01      	subs	r6, #1
 80088be:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80088c0:	2e04      	cmp	r6, #4
 80088c2:	d806      	bhi.n	80088d2 <_strtod_l+0xe2>
 80088c4:	e8df f006 	tbb	[pc, r6]
 80088c8:	201d0314 	.word	0x201d0314
 80088cc:	14          	.byte	0x14
 80088cd:	00          	.byte	0x00
 80088ce:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80088d2:	05e1      	lsls	r1, r4, #23
 80088d4:	bf48      	it	mi
 80088d6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80088da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088de:	0d1b      	lsrs	r3, r3, #20
 80088e0:	051b      	lsls	r3, r3, #20
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1bd      	bne.n	8008862 <_strtod_l+0x72>
 80088e6:	f7fe faf7 	bl	8006ed8 <__errno>
 80088ea:	2322      	movs	r3, #34	@ 0x22
 80088ec:	6003      	str	r3, [r0, #0]
 80088ee:	e7b8      	b.n	8008862 <_strtod_l+0x72>
 80088f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80088f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80088f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80088fc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008900:	e7e7      	b.n	80088d2 <_strtod_l+0xe2>
 8008902:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008a7c <_strtod_l+0x28c>
 8008906:	e7e4      	b.n	80088d2 <_strtod_l+0xe2>
 8008908:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800890c:	f04f 3aff 	mov.w	sl, #4294967295
 8008910:	e7df      	b.n	80088d2 <_strtod_l+0xe2>
 8008912:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	9219      	str	r2, [sp, #100]	@ 0x64
 8008918:	785b      	ldrb	r3, [r3, #1]
 800891a:	2b30      	cmp	r3, #48	@ 0x30
 800891c:	d0f9      	beq.n	8008912 <_strtod_l+0x122>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d09f      	beq.n	8008862 <_strtod_l+0x72>
 8008922:	2301      	movs	r3, #1
 8008924:	9309      	str	r3, [sp, #36]	@ 0x24
 8008926:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008928:	220a      	movs	r2, #10
 800892a:	930c      	str	r3, [sp, #48]	@ 0x30
 800892c:	2300      	movs	r3, #0
 800892e:	461f      	mov	r7, r3
 8008930:	9308      	str	r3, [sp, #32]
 8008932:	930a      	str	r3, [sp, #40]	@ 0x28
 8008934:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008936:	7805      	ldrb	r5, [r0, #0]
 8008938:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800893c:	b2d9      	uxtb	r1, r3
 800893e:	2909      	cmp	r1, #9
 8008940:	d928      	bls.n	8008994 <_strtod_l+0x1a4>
 8008942:	2201      	movs	r2, #1
 8008944:	494e      	ldr	r1, [pc, #312]	@ (8008a80 <_strtod_l+0x290>)
 8008946:	f000 ff5d 	bl	8009804 <strncmp>
 800894a:	2800      	cmp	r0, #0
 800894c:	d032      	beq.n	80089b4 <_strtod_l+0x1c4>
 800894e:	2000      	movs	r0, #0
 8008950:	462a      	mov	r2, r5
 8008952:	4681      	mov	r9, r0
 8008954:	463d      	mov	r5, r7
 8008956:	4603      	mov	r3, r0
 8008958:	2a65      	cmp	r2, #101	@ 0x65
 800895a:	d001      	beq.n	8008960 <_strtod_l+0x170>
 800895c:	2a45      	cmp	r2, #69	@ 0x45
 800895e:	d114      	bne.n	800898a <_strtod_l+0x19a>
 8008960:	b91d      	cbnz	r5, 800896a <_strtod_l+0x17a>
 8008962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008964:	4302      	orrs	r2, r0
 8008966:	d095      	beq.n	8008894 <_strtod_l+0xa4>
 8008968:	2500      	movs	r5, #0
 800896a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800896c:	1c62      	adds	r2, r4, #1
 800896e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008970:	7862      	ldrb	r2, [r4, #1]
 8008972:	2a2b      	cmp	r2, #43	@ 0x2b
 8008974:	d077      	beq.n	8008a66 <_strtod_l+0x276>
 8008976:	2a2d      	cmp	r2, #45	@ 0x2d
 8008978:	d07b      	beq.n	8008a72 <_strtod_l+0x282>
 800897a:	f04f 0c00 	mov.w	ip, #0
 800897e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008982:	2909      	cmp	r1, #9
 8008984:	f240 8082 	bls.w	8008a8c <_strtod_l+0x29c>
 8008988:	9419      	str	r4, [sp, #100]	@ 0x64
 800898a:	f04f 0800 	mov.w	r8, #0
 800898e:	e0a2      	b.n	8008ad6 <_strtod_l+0x2e6>
 8008990:	2300      	movs	r3, #0
 8008992:	e7c7      	b.n	8008924 <_strtod_l+0x134>
 8008994:	2f08      	cmp	r7, #8
 8008996:	bfd5      	itete	le
 8008998:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800899a:	9908      	ldrgt	r1, [sp, #32]
 800899c:	fb02 3301 	mlale	r3, r2, r1, r3
 80089a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80089a4:	f100 0001 	add.w	r0, r0, #1
 80089a8:	bfd4      	ite	le
 80089aa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80089ac:	9308      	strgt	r3, [sp, #32]
 80089ae:	3701      	adds	r7, #1
 80089b0:	9019      	str	r0, [sp, #100]	@ 0x64
 80089b2:	e7bf      	b.n	8008934 <_strtod_l+0x144>
 80089b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80089ba:	785a      	ldrb	r2, [r3, #1]
 80089bc:	b37f      	cbz	r7, 8008a1e <_strtod_l+0x22e>
 80089be:	4681      	mov	r9, r0
 80089c0:	463d      	mov	r5, r7
 80089c2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80089c6:	2b09      	cmp	r3, #9
 80089c8:	d912      	bls.n	80089f0 <_strtod_l+0x200>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e7c4      	b.n	8008958 <_strtod_l+0x168>
 80089ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089d0:	3001      	adds	r0, #1
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80089d6:	785a      	ldrb	r2, [r3, #1]
 80089d8:	2a30      	cmp	r2, #48	@ 0x30
 80089da:	d0f8      	beq.n	80089ce <_strtod_l+0x1de>
 80089dc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	f200 84cb 	bhi.w	800937c <_strtod_l+0xb8c>
 80089e6:	4681      	mov	r9, r0
 80089e8:	2000      	movs	r0, #0
 80089ea:	4605      	mov	r5, r0
 80089ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80089f0:	3a30      	subs	r2, #48	@ 0x30
 80089f2:	f100 0301 	add.w	r3, r0, #1
 80089f6:	d02a      	beq.n	8008a4e <_strtod_l+0x25e>
 80089f8:	4499      	add	r9, r3
 80089fa:	210a      	movs	r1, #10
 80089fc:	462b      	mov	r3, r5
 80089fe:	eb00 0c05 	add.w	ip, r0, r5
 8008a02:	4563      	cmp	r3, ip
 8008a04:	d10d      	bne.n	8008a22 <_strtod_l+0x232>
 8008a06:	1c69      	adds	r1, r5, #1
 8008a08:	4401      	add	r1, r0
 8008a0a:	4428      	add	r0, r5
 8008a0c:	2808      	cmp	r0, #8
 8008a0e:	dc16      	bgt.n	8008a3e <_strtod_l+0x24e>
 8008a10:	230a      	movs	r3, #10
 8008a12:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a14:	fb03 2300 	mla	r3, r3, r0, r2
 8008a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e018      	b.n	8008a50 <_strtod_l+0x260>
 8008a1e:	4638      	mov	r0, r7
 8008a20:	e7da      	b.n	80089d8 <_strtod_l+0x1e8>
 8008a22:	2b08      	cmp	r3, #8
 8008a24:	f103 0301 	add.w	r3, r3, #1
 8008a28:	dc03      	bgt.n	8008a32 <_strtod_l+0x242>
 8008a2a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008a2c:	434e      	muls	r6, r1
 8008a2e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008a30:	e7e7      	b.n	8008a02 <_strtod_l+0x212>
 8008a32:	2b10      	cmp	r3, #16
 8008a34:	bfde      	ittt	le
 8008a36:	9e08      	ldrle	r6, [sp, #32]
 8008a38:	434e      	mulle	r6, r1
 8008a3a:	9608      	strle	r6, [sp, #32]
 8008a3c:	e7e1      	b.n	8008a02 <_strtod_l+0x212>
 8008a3e:	280f      	cmp	r0, #15
 8008a40:	dceb      	bgt.n	8008a1a <_strtod_l+0x22a>
 8008a42:	230a      	movs	r3, #10
 8008a44:	9808      	ldr	r0, [sp, #32]
 8008a46:	fb03 2300 	mla	r3, r3, r0, r2
 8008a4a:	9308      	str	r3, [sp, #32]
 8008a4c:	e7e5      	b.n	8008a1a <_strtod_l+0x22a>
 8008a4e:	4629      	mov	r1, r5
 8008a50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a52:	460d      	mov	r5, r1
 8008a54:	1c50      	adds	r0, r2, #1
 8008a56:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a58:	7852      	ldrb	r2, [r2, #1]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	e7b1      	b.n	80089c2 <_strtod_l+0x1d2>
 8008a5e:	f04f 0900 	mov.w	r9, #0
 8008a62:	2301      	movs	r3, #1
 8008a64:	e77d      	b.n	8008962 <_strtod_l+0x172>
 8008a66:	f04f 0c00 	mov.w	ip, #0
 8008a6a:	1ca2      	adds	r2, r4, #2
 8008a6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a6e:	78a2      	ldrb	r2, [r4, #2]
 8008a70:	e785      	b.n	800897e <_strtod_l+0x18e>
 8008a72:	f04f 0c01 	mov.w	ip, #1
 8008a76:	e7f8      	b.n	8008a6a <_strtod_l+0x27a>
 8008a78:	0800c578 	.word	0x0800c578
 8008a7c:	7ff00000 	.word	0x7ff00000
 8008a80:	0800c560 	.word	0x0800c560
 8008a84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a86:	1c51      	adds	r1, r2, #1
 8008a88:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a8a:	7852      	ldrb	r2, [r2, #1]
 8008a8c:	2a30      	cmp	r2, #48	@ 0x30
 8008a8e:	d0f9      	beq.n	8008a84 <_strtod_l+0x294>
 8008a90:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008a94:	2908      	cmp	r1, #8
 8008a96:	f63f af78 	bhi.w	800898a <_strtod_l+0x19a>
 8008a9a:	f04f 080a 	mov.w	r8, #10
 8008a9e:	3a30      	subs	r2, #48	@ 0x30
 8008aa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008aa2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008aa4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008aa6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008aa8:	1c56      	adds	r6, r2, #1
 8008aaa:	9619      	str	r6, [sp, #100]	@ 0x64
 8008aac:	7852      	ldrb	r2, [r2, #1]
 8008aae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ab2:	f1be 0f09 	cmp.w	lr, #9
 8008ab6:	d939      	bls.n	8008b2c <_strtod_l+0x33c>
 8008ab8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008aba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008abe:	1a76      	subs	r6, r6, r1
 8008ac0:	2e08      	cmp	r6, #8
 8008ac2:	dc03      	bgt.n	8008acc <_strtod_l+0x2dc>
 8008ac4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008ac6:	4588      	cmp	r8, r1
 8008ac8:	bfa8      	it	ge
 8008aca:	4688      	movge	r8, r1
 8008acc:	f1bc 0f00 	cmp.w	ip, #0
 8008ad0:	d001      	beq.n	8008ad6 <_strtod_l+0x2e6>
 8008ad2:	f1c8 0800 	rsb	r8, r8, #0
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	d14e      	bne.n	8008b78 <_strtod_l+0x388>
 8008ada:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008adc:	4308      	orrs	r0, r1
 8008ade:	f47f aec0 	bne.w	8008862 <_strtod_l+0x72>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f47f aed6 	bne.w	8008894 <_strtod_l+0xa4>
 8008ae8:	2a69      	cmp	r2, #105	@ 0x69
 8008aea:	d028      	beq.n	8008b3e <_strtod_l+0x34e>
 8008aec:	dc25      	bgt.n	8008b3a <_strtod_l+0x34a>
 8008aee:	2a49      	cmp	r2, #73	@ 0x49
 8008af0:	d025      	beq.n	8008b3e <_strtod_l+0x34e>
 8008af2:	2a4e      	cmp	r2, #78	@ 0x4e
 8008af4:	f47f aece 	bne.w	8008894 <_strtod_l+0xa4>
 8008af8:	499a      	ldr	r1, [pc, #616]	@ (8008d64 <_strtod_l+0x574>)
 8008afa:	a819      	add	r0, sp, #100	@ 0x64
 8008afc:	f001 f950 	bl	8009da0 <__match>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	f43f aec7 	beq.w	8008894 <_strtod_l+0xa4>
 8008b06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	2b28      	cmp	r3, #40	@ 0x28
 8008b0c:	d12e      	bne.n	8008b6c <_strtod_l+0x37c>
 8008b0e:	4996      	ldr	r1, [pc, #600]	@ (8008d68 <_strtod_l+0x578>)
 8008b10:	aa1c      	add	r2, sp, #112	@ 0x70
 8008b12:	a819      	add	r0, sp, #100	@ 0x64
 8008b14:	f001 f958 	bl	8009dc8 <__hexnan>
 8008b18:	2805      	cmp	r0, #5
 8008b1a:	d127      	bne.n	8008b6c <_strtod_l+0x37c>
 8008b1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b1e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008b22:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008b26:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008b2a:	e69a      	b.n	8008862 <_strtod_l+0x72>
 8008b2c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b2e:	fb08 2101 	mla	r1, r8, r1, r2
 8008b32:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008b36:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b38:	e7b5      	b.n	8008aa6 <_strtod_l+0x2b6>
 8008b3a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008b3c:	e7da      	b.n	8008af4 <_strtod_l+0x304>
 8008b3e:	498b      	ldr	r1, [pc, #556]	@ (8008d6c <_strtod_l+0x57c>)
 8008b40:	a819      	add	r0, sp, #100	@ 0x64
 8008b42:	f001 f92d 	bl	8009da0 <__match>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f43f aea4 	beq.w	8008894 <_strtod_l+0xa4>
 8008b4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b4e:	4988      	ldr	r1, [pc, #544]	@ (8008d70 <_strtod_l+0x580>)
 8008b50:	3b01      	subs	r3, #1
 8008b52:	a819      	add	r0, sp, #100	@ 0x64
 8008b54:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b56:	f001 f923 	bl	8009da0 <__match>
 8008b5a:	b910      	cbnz	r0, 8008b62 <_strtod_l+0x372>
 8008b5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b5e:	3301      	adds	r3, #1
 8008b60:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b62:	f04f 0a00 	mov.w	sl, #0
 8008b66:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008d74 <_strtod_l+0x584>
 8008b6a:	e67a      	b.n	8008862 <_strtod_l+0x72>
 8008b6c:	4882      	ldr	r0, [pc, #520]	@ (8008d78 <_strtod_l+0x588>)
 8008b6e:	f000 fe6b 	bl	8009848 <nan>
 8008b72:	4682      	mov	sl, r0
 8008b74:	468b      	mov	fp, r1
 8008b76:	e674      	b.n	8008862 <_strtod_l+0x72>
 8008b78:	eba8 0309 	sub.w	r3, r8, r9
 8008b7c:	2f00      	cmp	r7, #0
 8008b7e:	bf08      	it	eq
 8008b80:	462f      	moveq	r7, r5
 8008b82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b84:	2d10      	cmp	r5, #16
 8008b86:	462c      	mov	r4, r5
 8008b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b8a:	bfa8      	it	ge
 8008b8c:	2410      	movge	r4, #16
 8008b8e:	f7f7 fcdd 	bl	800054c <__aeabi_ui2d>
 8008b92:	2d09      	cmp	r5, #9
 8008b94:	4682      	mov	sl, r0
 8008b96:	468b      	mov	fp, r1
 8008b98:	dc11      	bgt.n	8008bbe <_strtod_l+0x3ce>
 8008b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f43f ae60 	beq.w	8008862 <_strtod_l+0x72>
 8008ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ba4:	dd76      	ble.n	8008c94 <_strtod_l+0x4a4>
 8008ba6:	2b16      	cmp	r3, #22
 8008ba8:	dc5d      	bgt.n	8008c66 <_strtod_l+0x476>
 8008baa:	4974      	ldr	r1, [pc, #464]	@ (8008d7c <_strtod_l+0x58c>)
 8008bac:	4652      	mov	r2, sl
 8008bae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bb2:	465b      	mov	r3, fp
 8008bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bb8:	f7f7 fd42 	bl	8000640 <__aeabi_dmul>
 8008bbc:	e7d9      	b.n	8008b72 <_strtod_l+0x382>
 8008bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8008d7c <_strtod_l+0x58c>)
 8008bc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008bc8:	f7f7 fd3a 	bl	8000640 <__aeabi_dmul>
 8008bcc:	4682      	mov	sl, r0
 8008bce:	9808      	ldr	r0, [sp, #32]
 8008bd0:	468b      	mov	fp, r1
 8008bd2:	f7f7 fcbb 	bl	800054c <__aeabi_ui2d>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4650      	mov	r0, sl
 8008bdc:	4659      	mov	r1, fp
 8008bde:	f7f7 fb79 	bl	80002d4 <__adddf3>
 8008be2:	2d0f      	cmp	r5, #15
 8008be4:	4682      	mov	sl, r0
 8008be6:	468b      	mov	fp, r1
 8008be8:	ddd7      	ble.n	8008b9a <_strtod_l+0x3aa>
 8008bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bec:	1b2c      	subs	r4, r5, r4
 8008bee:	441c      	add	r4, r3
 8008bf0:	2c00      	cmp	r4, #0
 8008bf2:	f340 8096 	ble.w	8008d22 <_strtod_l+0x532>
 8008bf6:	f014 030f 	ands.w	r3, r4, #15
 8008bfa:	d00a      	beq.n	8008c12 <_strtod_l+0x422>
 8008bfc:	495f      	ldr	r1, [pc, #380]	@ (8008d7c <_strtod_l+0x58c>)
 8008bfe:	4652      	mov	r2, sl
 8008c00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c08:	465b      	mov	r3, fp
 8008c0a:	f7f7 fd19 	bl	8000640 <__aeabi_dmul>
 8008c0e:	4682      	mov	sl, r0
 8008c10:	468b      	mov	fp, r1
 8008c12:	f034 040f 	bics.w	r4, r4, #15
 8008c16:	d073      	beq.n	8008d00 <_strtod_l+0x510>
 8008c18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008c1c:	dd48      	ble.n	8008cb0 <_strtod_l+0x4c0>
 8008c1e:	2400      	movs	r4, #0
 8008c20:	46a0      	mov	r8, r4
 8008c22:	46a1      	mov	r9, r4
 8008c24:	940a      	str	r4, [sp, #40]	@ 0x28
 8008c26:	2322      	movs	r3, #34	@ 0x22
 8008c28:	f04f 0a00 	mov.w	sl, #0
 8008c2c:	9a05      	ldr	r2, [sp, #20]
 8008c2e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008d74 <_strtod_l+0x584>
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f43f ae13 	beq.w	8008862 <_strtod_l+0x72>
 8008c3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c3e:	9805      	ldr	r0, [sp, #20]
 8008c40:	f7ff f94c 	bl	8007edc <_Bfree>
 8008c44:	4649      	mov	r1, r9
 8008c46:	9805      	ldr	r0, [sp, #20]
 8008c48:	f7ff f948 	bl	8007edc <_Bfree>
 8008c4c:	4641      	mov	r1, r8
 8008c4e:	9805      	ldr	r0, [sp, #20]
 8008c50:	f7ff f944 	bl	8007edc <_Bfree>
 8008c54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c56:	9805      	ldr	r0, [sp, #20]
 8008c58:	f7ff f940 	bl	8007edc <_Bfree>
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	9805      	ldr	r0, [sp, #20]
 8008c60:	f7ff f93c 	bl	8007edc <_Bfree>
 8008c64:	e5fd      	b.n	8008862 <_strtod_l+0x72>
 8008c66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	dbbc      	blt.n	8008bea <_strtod_l+0x3fa>
 8008c70:	4c42      	ldr	r4, [pc, #264]	@ (8008d7c <_strtod_l+0x58c>)
 8008c72:	f1c5 050f 	rsb	r5, r5, #15
 8008c76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c7a:	4652      	mov	r2, sl
 8008c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c80:	465b      	mov	r3, fp
 8008c82:	f7f7 fcdd 	bl	8000640 <__aeabi_dmul>
 8008c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c88:	1b5d      	subs	r5, r3, r5
 8008c8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008c8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008c92:	e791      	b.n	8008bb8 <_strtod_l+0x3c8>
 8008c94:	3316      	adds	r3, #22
 8008c96:	dba8      	blt.n	8008bea <_strtod_l+0x3fa>
 8008c98:	4b38      	ldr	r3, [pc, #224]	@ (8008d7c <_strtod_l+0x58c>)
 8008c9a:	eba9 0808 	sub.w	r8, r9, r8
 8008c9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ca8:	4659      	mov	r1, fp
 8008caa:	f7f7 fdf3 	bl	8000894 <__aeabi_ddiv>
 8008cae:	e760      	b.n	8008b72 <_strtod_l+0x382>
 8008cb0:	4b33      	ldr	r3, [pc, #204]	@ (8008d80 <_strtod_l+0x590>)
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	9308      	str	r3, [sp, #32]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	4659      	mov	r1, fp
 8008cba:	461e      	mov	r6, r3
 8008cbc:	1124      	asrs	r4, r4, #4
 8008cbe:	2c01      	cmp	r4, #1
 8008cc0:	dc21      	bgt.n	8008d06 <_strtod_l+0x516>
 8008cc2:	b10b      	cbz	r3, 8008cc8 <_strtod_l+0x4d8>
 8008cc4:	4682      	mov	sl, r0
 8008cc6:	468b      	mov	fp, r1
 8008cc8:	492d      	ldr	r1, [pc, #180]	@ (8008d80 <_strtod_l+0x590>)
 8008cca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008cce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cd8:	465b      	mov	r3, fp
 8008cda:	f7f7 fcb1 	bl	8000640 <__aeabi_dmul>
 8008cde:	4b25      	ldr	r3, [pc, #148]	@ (8008d74 <_strtod_l+0x584>)
 8008ce0:	460a      	mov	r2, r1
 8008ce2:	400b      	ands	r3, r1
 8008ce4:	4927      	ldr	r1, [pc, #156]	@ (8008d84 <_strtod_l+0x594>)
 8008ce6:	4682      	mov	sl, r0
 8008ce8:	428b      	cmp	r3, r1
 8008cea:	d898      	bhi.n	8008c1e <_strtod_l+0x42e>
 8008cec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008cf0:	428b      	cmp	r3, r1
 8008cf2:	bf86      	itte	hi
 8008cf4:	f04f 3aff 	movhi.w	sl, #4294967295
 8008cf8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008d88 <_strtod_l+0x598>
 8008cfc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008d00:	2300      	movs	r3, #0
 8008d02:	9308      	str	r3, [sp, #32]
 8008d04:	e07a      	b.n	8008dfc <_strtod_l+0x60c>
 8008d06:	07e2      	lsls	r2, r4, #31
 8008d08:	d505      	bpl.n	8008d16 <_strtod_l+0x526>
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f7f7 fc96 	bl	8000640 <__aeabi_dmul>
 8008d14:	2301      	movs	r3, #1
 8008d16:	9a08      	ldr	r2, [sp, #32]
 8008d18:	3601      	adds	r6, #1
 8008d1a:	3208      	adds	r2, #8
 8008d1c:	1064      	asrs	r4, r4, #1
 8008d1e:	9208      	str	r2, [sp, #32]
 8008d20:	e7cd      	b.n	8008cbe <_strtod_l+0x4ce>
 8008d22:	d0ed      	beq.n	8008d00 <_strtod_l+0x510>
 8008d24:	4264      	negs	r4, r4
 8008d26:	f014 020f 	ands.w	r2, r4, #15
 8008d2a:	d00a      	beq.n	8008d42 <_strtod_l+0x552>
 8008d2c:	4b13      	ldr	r3, [pc, #76]	@ (8008d7c <_strtod_l+0x58c>)
 8008d2e:	4650      	mov	r0, sl
 8008d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d34:	4659      	mov	r1, fp
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f7f7 fdab 	bl	8000894 <__aeabi_ddiv>
 8008d3e:	4682      	mov	sl, r0
 8008d40:	468b      	mov	fp, r1
 8008d42:	1124      	asrs	r4, r4, #4
 8008d44:	d0dc      	beq.n	8008d00 <_strtod_l+0x510>
 8008d46:	2c1f      	cmp	r4, #31
 8008d48:	dd20      	ble.n	8008d8c <_strtod_l+0x59c>
 8008d4a:	2400      	movs	r4, #0
 8008d4c:	46a0      	mov	r8, r4
 8008d4e:	46a1      	mov	r9, r4
 8008d50:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d52:	2322      	movs	r3, #34	@ 0x22
 8008d54:	9a05      	ldr	r2, [sp, #20]
 8008d56:	f04f 0a00 	mov.w	sl, #0
 8008d5a:	f04f 0b00 	mov.w	fp, #0
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	e768      	b.n	8008c34 <_strtod_l+0x444>
 8008d62:	bf00      	nop
 8008d64:	0800c2ba 	.word	0x0800c2ba
 8008d68:	0800c564 	.word	0x0800c564
 8008d6c:	0800c2b2 	.word	0x0800c2b2
 8008d70:	0800c396 	.word	0x0800c396
 8008d74:	7ff00000 	.word	0x7ff00000
 8008d78:	0800c392 	.word	0x0800c392
 8008d7c:	0800c498 	.word	0x0800c498
 8008d80:	0800c470 	.word	0x0800c470
 8008d84:	7ca00000 	.word	0x7ca00000
 8008d88:	7fefffff 	.word	0x7fefffff
 8008d8c:	f014 0310 	ands.w	r3, r4, #16
 8008d90:	bf18      	it	ne
 8008d92:	236a      	movne	r3, #106	@ 0x6a
 8008d94:	4650      	mov	r0, sl
 8008d96:	9308      	str	r3, [sp, #32]
 8008d98:	4659      	mov	r1, fp
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4ea9      	ldr	r6, [pc, #676]	@ (8009044 <_strtod_l+0x854>)
 8008d9e:	07e2      	lsls	r2, r4, #31
 8008da0:	d504      	bpl.n	8008dac <_strtod_l+0x5bc>
 8008da2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008da6:	f7f7 fc4b 	bl	8000640 <__aeabi_dmul>
 8008daa:	2301      	movs	r3, #1
 8008dac:	1064      	asrs	r4, r4, #1
 8008dae:	f106 0608 	add.w	r6, r6, #8
 8008db2:	d1f4      	bne.n	8008d9e <_strtod_l+0x5ae>
 8008db4:	b10b      	cbz	r3, 8008dba <_strtod_l+0x5ca>
 8008db6:	4682      	mov	sl, r0
 8008db8:	468b      	mov	fp, r1
 8008dba:	9b08      	ldr	r3, [sp, #32]
 8008dbc:	b1b3      	cbz	r3, 8008dec <_strtod_l+0x5fc>
 8008dbe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008dc2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	4659      	mov	r1, fp
 8008dca:	dd0f      	ble.n	8008dec <_strtod_l+0x5fc>
 8008dcc:	2b1f      	cmp	r3, #31
 8008dce:	dd57      	ble.n	8008e80 <_strtod_l+0x690>
 8008dd0:	2b34      	cmp	r3, #52	@ 0x34
 8008dd2:	bfd8      	it	le
 8008dd4:	f04f 33ff 	movle.w	r3, #4294967295
 8008dd8:	f04f 0a00 	mov.w	sl, #0
 8008ddc:	bfcf      	iteee	gt
 8008dde:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008de2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008de6:	4093      	lslle	r3, r2
 8008de8:	ea03 0b01 	andle.w	fp, r3, r1
 8008dec:	2200      	movs	r2, #0
 8008dee:	2300      	movs	r3, #0
 8008df0:	4650      	mov	r0, sl
 8008df2:	4659      	mov	r1, fp
 8008df4:	f7f7 fe8c 	bl	8000b10 <__aeabi_dcmpeq>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d1a6      	bne.n	8008d4a <_strtod_l+0x55a>
 8008dfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dfe:	463a      	mov	r2, r7
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008e04:	462b      	mov	r3, r5
 8008e06:	9805      	ldr	r0, [sp, #20]
 8008e08:	f7ff f8d0 	bl	8007fac <__s2b>
 8008e0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	f43f af05 	beq.w	8008c1e <_strtod_l+0x42e>
 8008e14:	2400      	movs	r4, #0
 8008e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e18:	eba9 0308 	sub.w	r3, r9, r8
 8008e1c:	2a00      	cmp	r2, #0
 8008e1e:	bfa8      	it	ge
 8008e20:	2300      	movge	r3, #0
 8008e22:	46a0      	mov	r8, r4
 8008e24:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008e2a:	9316      	str	r3, [sp, #88]	@ 0x58
 8008e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e2e:	9805      	ldr	r0, [sp, #20]
 8008e30:	6859      	ldr	r1, [r3, #4]
 8008e32:	f7ff f813 	bl	8007e5c <_Balloc>
 8008e36:	4681      	mov	r9, r0
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	f43f aef4 	beq.w	8008c26 <_strtod_l+0x436>
 8008e3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e40:	300c      	adds	r0, #12
 8008e42:	691a      	ldr	r2, [r3, #16]
 8008e44:	f103 010c 	add.w	r1, r3, #12
 8008e48:	3202      	adds	r2, #2
 8008e4a:	0092      	lsls	r2, r2, #2
 8008e4c:	f7fe f887 	bl	8006f5e <memcpy>
 8008e50:	ab1c      	add	r3, sp, #112	@ 0x70
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	4652      	mov	r2, sl
 8008e5a:	465b      	mov	r3, fp
 8008e5c:	9805      	ldr	r0, [sp, #20]
 8008e5e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008e62:	f7ff fbd5 	bl	8008610 <__d2b>
 8008e66:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	f43f aedc 	beq.w	8008c26 <_strtod_l+0x436>
 8008e6e:	2101      	movs	r1, #1
 8008e70:	9805      	ldr	r0, [sp, #20]
 8008e72:	f7ff f931 	bl	80080d8 <__i2b>
 8008e76:	4680      	mov	r8, r0
 8008e78:	b948      	cbnz	r0, 8008e8e <_strtod_l+0x69e>
 8008e7a:	f04f 0800 	mov.w	r8, #0
 8008e7e:	e6d2      	b.n	8008c26 <_strtod_l+0x436>
 8008e80:	f04f 32ff 	mov.w	r2, #4294967295
 8008e84:	fa02 f303 	lsl.w	r3, r2, r3
 8008e88:	ea03 0a0a 	and.w	sl, r3, sl
 8008e8c:	e7ae      	b.n	8008dec <_strtod_l+0x5fc>
 8008e8e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008e90:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008e92:	2d00      	cmp	r5, #0
 8008e94:	bfab      	itete	ge
 8008e96:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008e98:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008e9a:	18ef      	addge	r7, r5, r3
 8008e9c:	1b5e      	sublt	r6, r3, r5
 8008e9e:	9b08      	ldr	r3, [sp, #32]
 8008ea0:	bfa8      	it	ge
 8008ea2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008ea4:	eba5 0503 	sub.w	r5, r5, r3
 8008ea8:	4415      	add	r5, r2
 8008eaa:	4b67      	ldr	r3, [pc, #412]	@ (8009048 <_strtod_l+0x858>)
 8008eac:	f105 35ff 	add.w	r5, r5, #4294967295
 8008eb0:	bfb8      	it	lt
 8008eb2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008eb4:	429d      	cmp	r5, r3
 8008eb6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008eba:	da50      	bge.n	8008f5e <_strtod_l+0x76e>
 8008ebc:	1b5b      	subs	r3, r3, r5
 8008ebe:	2b1f      	cmp	r3, #31
 8008ec0:	f04f 0101 	mov.w	r1, #1
 8008ec4:	eba2 0203 	sub.w	r2, r2, r3
 8008ec8:	dc3d      	bgt.n	8008f46 <_strtod_l+0x756>
 8008eca:	fa01 f303 	lsl.w	r3, r1, r3
 8008ece:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ed4:	18bd      	adds	r5, r7, r2
 8008ed6:	9b08      	ldr	r3, [sp, #32]
 8008ed8:	42af      	cmp	r7, r5
 8008eda:	4416      	add	r6, r2
 8008edc:	441e      	add	r6, r3
 8008ede:	463b      	mov	r3, r7
 8008ee0:	bfa8      	it	ge
 8008ee2:	462b      	movge	r3, r5
 8008ee4:	42b3      	cmp	r3, r6
 8008ee6:	bfa8      	it	ge
 8008ee8:	4633      	movge	r3, r6
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bfc2      	ittt	gt
 8008eee:	1aed      	subgt	r5, r5, r3
 8008ef0:	1af6      	subgt	r6, r6, r3
 8008ef2:	1aff      	subgt	r7, r7, r3
 8008ef4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	dd16      	ble.n	8008f28 <_strtod_l+0x738>
 8008efa:	4641      	mov	r1, r8
 8008efc:	461a      	mov	r2, r3
 8008efe:	9805      	ldr	r0, [sp, #20]
 8008f00:	f7ff f9a8 	bl	8008254 <__pow5mult>
 8008f04:	4680      	mov	r8, r0
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d0b7      	beq.n	8008e7a <_strtod_l+0x68a>
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f0e:	9805      	ldr	r0, [sp, #20]
 8008f10:	f7ff f8f8 	bl	8008104 <__multiply>
 8008f14:	900e      	str	r0, [sp, #56]	@ 0x38
 8008f16:	2800      	cmp	r0, #0
 8008f18:	f43f ae85 	beq.w	8008c26 <_strtod_l+0x436>
 8008f1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f1e:	9805      	ldr	r0, [sp, #20]
 8008f20:	f7fe ffdc 	bl	8007edc <_Bfree>
 8008f24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f26:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f28:	2d00      	cmp	r5, #0
 8008f2a:	dc1d      	bgt.n	8008f68 <_strtod_l+0x778>
 8008f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	dd23      	ble.n	8008f7a <_strtod_l+0x78a>
 8008f32:	4649      	mov	r1, r9
 8008f34:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f36:	9805      	ldr	r0, [sp, #20]
 8008f38:	f7ff f98c 	bl	8008254 <__pow5mult>
 8008f3c:	4681      	mov	r9, r0
 8008f3e:	b9e0      	cbnz	r0, 8008f7a <_strtod_l+0x78a>
 8008f40:	f04f 0900 	mov.w	r9, #0
 8008f44:	e66f      	b.n	8008c26 <_strtod_l+0x436>
 8008f46:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008f4a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008f4e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008f52:	35e2      	adds	r5, #226	@ 0xe2
 8008f54:	fa01 f305 	lsl.w	r3, r1, r5
 8008f58:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f5a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008f5c:	e7ba      	b.n	8008ed4 <_strtod_l+0x6e4>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f62:	2301      	movs	r3, #1
 8008f64:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f66:	e7b5      	b.n	8008ed4 <_strtod_l+0x6e4>
 8008f68:	462a      	mov	r2, r5
 8008f6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f6c:	9805      	ldr	r0, [sp, #20]
 8008f6e:	f7ff f9cb 	bl	8008308 <__lshift>
 8008f72:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d1d9      	bne.n	8008f2c <_strtod_l+0x73c>
 8008f78:	e655      	b.n	8008c26 <_strtod_l+0x436>
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	dd07      	ble.n	8008f8e <_strtod_l+0x79e>
 8008f7e:	4649      	mov	r1, r9
 8008f80:	4632      	mov	r2, r6
 8008f82:	9805      	ldr	r0, [sp, #20]
 8008f84:	f7ff f9c0 	bl	8008308 <__lshift>
 8008f88:	4681      	mov	r9, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d0d8      	beq.n	8008f40 <_strtod_l+0x750>
 8008f8e:	2f00      	cmp	r7, #0
 8008f90:	dd08      	ble.n	8008fa4 <_strtod_l+0x7b4>
 8008f92:	4641      	mov	r1, r8
 8008f94:	463a      	mov	r2, r7
 8008f96:	9805      	ldr	r0, [sp, #20]
 8008f98:	f7ff f9b6 	bl	8008308 <__lshift>
 8008f9c:	4680      	mov	r8, r0
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	f43f ae41 	beq.w	8008c26 <_strtod_l+0x436>
 8008fa4:	464a      	mov	r2, r9
 8008fa6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fa8:	9805      	ldr	r0, [sp, #20]
 8008faa:	f7ff fa35 	bl	8008418 <__mdiff>
 8008fae:	4604      	mov	r4, r0
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	f43f ae38 	beq.w	8008c26 <_strtod_l+0x436>
 8008fb6:	68c3      	ldr	r3, [r0, #12]
 8008fb8:	4641      	mov	r1, r8
 8008fba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60c3      	str	r3, [r0, #12]
 8008fc0:	f7ff fa0e 	bl	80083e0 <__mcmp>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	da45      	bge.n	8009054 <_strtod_l+0x864>
 8008fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fca:	ea53 030a 	orrs.w	r3, r3, sl
 8008fce:	d16b      	bne.n	80090a8 <_strtod_l+0x8b8>
 8008fd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d167      	bne.n	80090a8 <_strtod_l+0x8b8>
 8008fd8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fdc:	0d1b      	lsrs	r3, r3, #20
 8008fde:	051b      	lsls	r3, r3, #20
 8008fe0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008fe4:	d960      	bls.n	80090a8 <_strtod_l+0x8b8>
 8008fe6:	6963      	ldr	r3, [r4, #20]
 8008fe8:	b913      	cbnz	r3, 8008ff0 <_strtod_l+0x800>
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	dd5b      	ble.n	80090a8 <_strtod_l+0x8b8>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	9805      	ldr	r0, [sp, #20]
 8008ff6:	f7ff f987 	bl	8008308 <__lshift>
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	f7ff f9ef 	bl	80083e0 <__mcmp>
 8009002:	2800      	cmp	r0, #0
 8009004:	dd50      	ble.n	80090a8 <_strtod_l+0x8b8>
 8009006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800900a:	9a08      	ldr	r2, [sp, #32]
 800900c:	0d1b      	lsrs	r3, r3, #20
 800900e:	051b      	lsls	r3, r3, #20
 8009010:	2a00      	cmp	r2, #0
 8009012:	d06a      	beq.n	80090ea <_strtod_l+0x8fa>
 8009014:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009018:	d867      	bhi.n	80090ea <_strtod_l+0x8fa>
 800901a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800901e:	f67f ae98 	bls.w	8008d52 <_strtod_l+0x562>
 8009022:	4650      	mov	r0, sl
 8009024:	4659      	mov	r1, fp
 8009026:	4b09      	ldr	r3, [pc, #36]	@ (800904c <_strtod_l+0x85c>)
 8009028:	2200      	movs	r2, #0
 800902a:	f7f7 fb09 	bl	8000640 <__aeabi_dmul>
 800902e:	4b08      	ldr	r3, [pc, #32]	@ (8009050 <_strtod_l+0x860>)
 8009030:	4682      	mov	sl, r0
 8009032:	400b      	ands	r3, r1
 8009034:	468b      	mov	fp, r1
 8009036:	2b00      	cmp	r3, #0
 8009038:	f47f ae00 	bne.w	8008c3c <_strtod_l+0x44c>
 800903c:	2322      	movs	r3, #34	@ 0x22
 800903e:	9a05      	ldr	r2, [sp, #20]
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	e5fb      	b.n	8008c3c <_strtod_l+0x44c>
 8009044:	0800c590 	.word	0x0800c590
 8009048:	fffffc02 	.word	0xfffffc02
 800904c:	39500000 	.word	0x39500000
 8009050:	7ff00000 	.word	0x7ff00000
 8009054:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009058:	d165      	bne.n	8009126 <_strtod_l+0x936>
 800905a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800905c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009060:	b35a      	cbz	r2, 80090ba <_strtod_l+0x8ca>
 8009062:	4a99      	ldr	r2, [pc, #612]	@ (80092c8 <_strtod_l+0xad8>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d12b      	bne.n	80090c0 <_strtod_l+0x8d0>
 8009068:	9b08      	ldr	r3, [sp, #32]
 800906a:	4651      	mov	r1, sl
 800906c:	b303      	cbz	r3, 80090b0 <_strtod_l+0x8c0>
 800906e:	465a      	mov	r2, fp
 8009070:	4b96      	ldr	r3, [pc, #600]	@ (80092cc <_strtod_l+0xadc>)
 8009072:	4013      	ands	r3, r2
 8009074:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009078:	f04f 32ff 	mov.w	r2, #4294967295
 800907c:	d81b      	bhi.n	80090b6 <_strtod_l+0x8c6>
 800907e:	0d1b      	lsrs	r3, r3, #20
 8009080:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009084:	fa02 f303 	lsl.w	r3, r2, r3
 8009088:	4299      	cmp	r1, r3
 800908a:	d119      	bne.n	80090c0 <_strtod_l+0x8d0>
 800908c:	4b90      	ldr	r3, [pc, #576]	@ (80092d0 <_strtod_l+0xae0>)
 800908e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009090:	429a      	cmp	r2, r3
 8009092:	d102      	bne.n	800909a <_strtod_l+0x8aa>
 8009094:	3101      	adds	r1, #1
 8009096:	f43f adc6 	beq.w	8008c26 <_strtod_l+0x436>
 800909a:	f04f 0a00 	mov.w	sl, #0
 800909e:	4b8b      	ldr	r3, [pc, #556]	@ (80092cc <_strtod_l+0xadc>)
 80090a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090a2:	401a      	ands	r2, r3
 80090a4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80090a8:	9b08      	ldr	r3, [sp, #32]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1b9      	bne.n	8009022 <_strtod_l+0x832>
 80090ae:	e5c5      	b.n	8008c3c <_strtod_l+0x44c>
 80090b0:	f04f 33ff 	mov.w	r3, #4294967295
 80090b4:	e7e8      	b.n	8009088 <_strtod_l+0x898>
 80090b6:	4613      	mov	r3, r2
 80090b8:	e7e6      	b.n	8009088 <_strtod_l+0x898>
 80090ba:	ea53 030a 	orrs.w	r3, r3, sl
 80090be:	d0a2      	beq.n	8009006 <_strtod_l+0x816>
 80090c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090c2:	b1db      	cbz	r3, 80090fc <_strtod_l+0x90c>
 80090c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090c6:	4213      	tst	r3, r2
 80090c8:	d0ee      	beq.n	80090a8 <_strtod_l+0x8b8>
 80090ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090cc:	4650      	mov	r0, sl
 80090ce:	4659      	mov	r1, fp
 80090d0:	9a08      	ldr	r2, [sp, #32]
 80090d2:	b1bb      	cbz	r3, 8009104 <_strtod_l+0x914>
 80090d4:	f7ff fb68 	bl	80087a8 <sulp>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090e0:	f7f7 f8f8 	bl	80002d4 <__adddf3>
 80090e4:	4682      	mov	sl, r0
 80090e6:	468b      	mov	fp, r1
 80090e8:	e7de      	b.n	80090a8 <_strtod_l+0x8b8>
 80090ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80090ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80090f2:	f04f 3aff 	mov.w	sl, #4294967295
 80090f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80090fa:	e7d5      	b.n	80090a8 <_strtod_l+0x8b8>
 80090fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80090fe:	ea13 0f0a 	tst.w	r3, sl
 8009102:	e7e1      	b.n	80090c8 <_strtod_l+0x8d8>
 8009104:	f7ff fb50 	bl	80087a8 <sulp>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009110:	f7f7 f8de 	bl	80002d0 <__aeabi_dsub>
 8009114:	2200      	movs	r2, #0
 8009116:	2300      	movs	r3, #0
 8009118:	4682      	mov	sl, r0
 800911a:	468b      	mov	fp, r1
 800911c:	f7f7 fcf8 	bl	8000b10 <__aeabi_dcmpeq>
 8009120:	2800      	cmp	r0, #0
 8009122:	d0c1      	beq.n	80090a8 <_strtod_l+0x8b8>
 8009124:	e615      	b.n	8008d52 <_strtod_l+0x562>
 8009126:	4641      	mov	r1, r8
 8009128:	4620      	mov	r0, r4
 800912a:	f7ff fac9 	bl	80086c0 <__ratio>
 800912e:	2200      	movs	r2, #0
 8009130:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009134:	4606      	mov	r6, r0
 8009136:	460f      	mov	r7, r1
 8009138:	f7f7 fcfe 	bl	8000b38 <__aeabi_dcmple>
 800913c:	2800      	cmp	r0, #0
 800913e:	d06d      	beq.n	800921c <_strtod_l+0xa2c>
 8009140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009142:	2b00      	cmp	r3, #0
 8009144:	d178      	bne.n	8009238 <_strtod_l+0xa48>
 8009146:	f1ba 0f00 	cmp.w	sl, #0
 800914a:	d156      	bne.n	80091fa <_strtod_l+0xa0a>
 800914c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800914e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009152:	2b00      	cmp	r3, #0
 8009154:	d158      	bne.n	8009208 <_strtod_l+0xa18>
 8009156:	2200      	movs	r2, #0
 8009158:	4630      	mov	r0, r6
 800915a:	4639      	mov	r1, r7
 800915c:	4b5d      	ldr	r3, [pc, #372]	@ (80092d4 <_strtod_l+0xae4>)
 800915e:	f7f7 fce1 	bl	8000b24 <__aeabi_dcmplt>
 8009162:	2800      	cmp	r0, #0
 8009164:	d157      	bne.n	8009216 <_strtod_l+0xa26>
 8009166:	4630      	mov	r0, r6
 8009168:	4639      	mov	r1, r7
 800916a:	2200      	movs	r2, #0
 800916c:	4b5a      	ldr	r3, [pc, #360]	@ (80092d8 <_strtod_l+0xae8>)
 800916e:	f7f7 fa67 	bl	8000640 <__aeabi_dmul>
 8009172:	4606      	mov	r6, r0
 8009174:	460f      	mov	r7, r1
 8009176:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800917a:	9606      	str	r6, [sp, #24]
 800917c:	9307      	str	r3, [sp, #28]
 800917e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009182:	4d52      	ldr	r5, [pc, #328]	@ (80092cc <_strtod_l+0xadc>)
 8009184:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800918a:	401d      	ands	r5, r3
 800918c:	4b53      	ldr	r3, [pc, #332]	@ (80092dc <_strtod_l+0xaec>)
 800918e:	429d      	cmp	r5, r3
 8009190:	f040 80aa 	bne.w	80092e8 <_strtod_l+0xaf8>
 8009194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009196:	4650      	mov	r0, sl
 8009198:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800919c:	4659      	mov	r1, fp
 800919e:	f7ff f9cf 	bl	8008540 <__ulp>
 80091a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091a6:	f7f7 fa4b 	bl	8000640 <__aeabi_dmul>
 80091aa:	4652      	mov	r2, sl
 80091ac:	465b      	mov	r3, fp
 80091ae:	f7f7 f891 	bl	80002d4 <__adddf3>
 80091b2:	460b      	mov	r3, r1
 80091b4:	4945      	ldr	r1, [pc, #276]	@ (80092cc <_strtod_l+0xadc>)
 80091b6:	4a4a      	ldr	r2, [pc, #296]	@ (80092e0 <_strtod_l+0xaf0>)
 80091b8:	4019      	ands	r1, r3
 80091ba:	4291      	cmp	r1, r2
 80091bc:	4682      	mov	sl, r0
 80091be:	d942      	bls.n	8009246 <_strtod_l+0xa56>
 80091c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80091c2:	4b43      	ldr	r3, [pc, #268]	@ (80092d0 <_strtod_l+0xae0>)
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d103      	bne.n	80091d0 <_strtod_l+0x9e0>
 80091c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091ca:	3301      	adds	r3, #1
 80091cc:	f43f ad2b 	beq.w	8008c26 <_strtod_l+0x436>
 80091d0:	f04f 3aff 	mov.w	sl, #4294967295
 80091d4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80092d0 <_strtod_l+0xae0>
 80091d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091da:	9805      	ldr	r0, [sp, #20]
 80091dc:	f7fe fe7e 	bl	8007edc <_Bfree>
 80091e0:	4649      	mov	r1, r9
 80091e2:	9805      	ldr	r0, [sp, #20]
 80091e4:	f7fe fe7a 	bl	8007edc <_Bfree>
 80091e8:	4641      	mov	r1, r8
 80091ea:	9805      	ldr	r0, [sp, #20]
 80091ec:	f7fe fe76 	bl	8007edc <_Bfree>
 80091f0:	4621      	mov	r1, r4
 80091f2:	9805      	ldr	r0, [sp, #20]
 80091f4:	f7fe fe72 	bl	8007edc <_Bfree>
 80091f8:	e618      	b.n	8008e2c <_strtod_l+0x63c>
 80091fa:	f1ba 0f01 	cmp.w	sl, #1
 80091fe:	d103      	bne.n	8009208 <_strtod_l+0xa18>
 8009200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009202:	2b00      	cmp	r3, #0
 8009204:	f43f ada5 	beq.w	8008d52 <_strtod_l+0x562>
 8009208:	2200      	movs	r2, #0
 800920a:	4b36      	ldr	r3, [pc, #216]	@ (80092e4 <_strtod_l+0xaf4>)
 800920c:	2600      	movs	r6, #0
 800920e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009212:	4f30      	ldr	r7, [pc, #192]	@ (80092d4 <_strtod_l+0xae4>)
 8009214:	e7b3      	b.n	800917e <_strtod_l+0x98e>
 8009216:	2600      	movs	r6, #0
 8009218:	4f2f      	ldr	r7, [pc, #188]	@ (80092d8 <_strtod_l+0xae8>)
 800921a:	e7ac      	b.n	8009176 <_strtod_l+0x986>
 800921c:	4630      	mov	r0, r6
 800921e:	4639      	mov	r1, r7
 8009220:	4b2d      	ldr	r3, [pc, #180]	@ (80092d8 <_strtod_l+0xae8>)
 8009222:	2200      	movs	r2, #0
 8009224:	f7f7 fa0c 	bl	8000640 <__aeabi_dmul>
 8009228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800922a:	4606      	mov	r6, r0
 800922c:	460f      	mov	r7, r1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0a1      	beq.n	8009176 <_strtod_l+0x986>
 8009232:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009236:	e7a2      	b.n	800917e <_strtod_l+0x98e>
 8009238:	2200      	movs	r2, #0
 800923a:	4b26      	ldr	r3, [pc, #152]	@ (80092d4 <_strtod_l+0xae4>)
 800923c:	4616      	mov	r6, r2
 800923e:	461f      	mov	r7, r3
 8009240:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009244:	e79b      	b.n	800917e <_strtod_l+0x98e>
 8009246:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800924a:	9b08      	ldr	r3, [sp, #32]
 800924c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1c1      	bne.n	80091d8 <_strtod_l+0x9e8>
 8009254:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009258:	0d1b      	lsrs	r3, r3, #20
 800925a:	051b      	lsls	r3, r3, #20
 800925c:	429d      	cmp	r5, r3
 800925e:	d1bb      	bne.n	80091d8 <_strtod_l+0x9e8>
 8009260:	4630      	mov	r0, r6
 8009262:	4639      	mov	r1, r7
 8009264:	f7f7 fe62 	bl	8000f2c <__aeabi_d2lz>
 8009268:	f7f7 f9bc 	bl	80005e4 <__aeabi_l2d>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f7f7 f82c 	bl	80002d0 <__aeabi_dsub>
 8009278:	460b      	mov	r3, r1
 800927a:	4602      	mov	r2, r0
 800927c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009280:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009286:	ea46 060a 	orr.w	r6, r6, sl
 800928a:	431e      	orrs	r6, r3
 800928c:	d069      	beq.n	8009362 <_strtod_l+0xb72>
 800928e:	a30a      	add	r3, pc, #40	@ (adr r3, 80092b8 <_strtod_l+0xac8>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f7f7 fc46 	bl	8000b24 <__aeabi_dcmplt>
 8009298:	2800      	cmp	r0, #0
 800929a:	f47f accf 	bne.w	8008c3c <_strtod_l+0x44c>
 800929e:	a308      	add	r3, pc, #32	@ (adr r3, 80092c0 <_strtod_l+0xad0>)
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092a8:	f7f7 fc5a 	bl	8000b60 <__aeabi_dcmpgt>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d093      	beq.n	80091d8 <_strtod_l+0x9e8>
 80092b0:	e4c4      	b.n	8008c3c <_strtod_l+0x44c>
 80092b2:	bf00      	nop
 80092b4:	f3af 8000 	nop.w
 80092b8:	94a03595 	.word	0x94a03595
 80092bc:	3fdfffff 	.word	0x3fdfffff
 80092c0:	35afe535 	.word	0x35afe535
 80092c4:	3fe00000 	.word	0x3fe00000
 80092c8:	000fffff 	.word	0x000fffff
 80092cc:	7ff00000 	.word	0x7ff00000
 80092d0:	7fefffff 	.word	0x7fefffff
 80092d4:	3ff00000 	.word	0x3ff00000
 80092d8:	3fe00000 	.word	0x3fe00000
 80092dc:	7fe00000 	.word	0x7fe00000
 80092e0:	7c9fffff 	.word	0x7c9fffff
 80092e4:	bff00000 	.word	0xbff00000
 80092e8:	9b08      	ldr	r3, [sp, #32]
 80092ea:	b323      	cbz	r3, 8009336 <_strtod_l+0xb46>
 80092ec:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80092f0:	d821      	bhi.n	8009336 <_strtod_l+0xb46>
 80092f2:	a327      	add	r3, pc, #156	@ (adr r3, 8009390 <_strtod_l+0xba0>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	4630      	mov	r0, r6
 80092fa:	4639      	mov	r1, r7
 80092fc:	f7f7 fc1c 	bl	8000b38 <__aeabi_dcmple>
 8009300:	b1a0      	cbz	r0, 800932c <_strtod_l+0xb3c>
 8009302:	4639      	mov	r1, r7
 8009304:	4630      	mov	r0, r6
 8009306:	f7f7 fc73 	bl	8000bf0 <__aeabi_d2uiz>
 800930a:	2801      	cmp	r0, #1
 800930c:	bf38      	it	cc
 800930e:	2001      	movcc	r0, #1
 8009310:	f7f7 f91c 	bl	800054c <__aeabi_ui2d>
 8009314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009316:	4606      	mov	r6, r0
 8009318:	460f      	mov	r7, r1
 800931a:	b9fb      	cbnz	r3, 800935c <_strtod_l+0xb6c>
 800931c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009320:	9014      	str	r0, [sp, #80]	@ 0x50
 8009322:	9315      	str	r3, [sp, #84]	@ 0x54
 8009324:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009328:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800932c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800932e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009332:	1b5b      	subs	r3, r3, r5
 8009334:	9311      	str	r3, [sp, #68]	@ 0x44
 8009336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800933a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800933e:	f7ff f8ff 	bl	8008540 <__ulp>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4650      	mov	r0, sl
 8009348:	4659      	mov	r1, fp
 800934a:	f7f7 f979 	bl	8000640 <__aeabi_dmul>
 800934e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009352:	f7f6 ffbf 	bl	80002d4 <__adddf3>
 8009356:	4682      	mov	sl, r0
 8009358:	468b      	mov	fp, r1
 800935a:	e776      	b.n	800924a <_strtod_l+0xa5a>
 800935c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009360:	e7e0      	b.n	8009324 <_strtod_l+0xb34>
 8009362:	a30d      	add	r3, pc, #52	@ (adr r3, 8009398 <_strtod_l+0xba8>)
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f7f7 fbdc 	bl	8000b24 <__aeabi_dcmplt>
 800936c:	e79e      	b.n	80092ac <_strtod_l+0xabc>
 800936e:	2300      	movs	r3, #0
 8009370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009372:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009374:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	f7ff ba77 	b.w	800886a <_strtod_l+0x7a>
 800937c:	2a65      	cmp	r2, #101	@ 0x65
 800937e:	f43f ab6e 	beq.w	8008a5e <_strtod_l+0x26e>
 8009382:	2a45      	cmp	r2, #69	@ 0x45
 8009384:	f43f ab6b 	beq.w	8008a5e <_strtod_l+0x26e>
 8009388:	2301      	movs	r3, #1
 800938a:	f7ff bba6 	b.w	8008ada <_strtod_l+0x2ea>
 800938e:	bf00      	nop
 8009390:	ffc00000 	.word	0xffc00000
 8009394:	41dfffff 	.word	0x41dfffff
 8009398:	94a03595 	.word	0x94a03595
 800939c:	3fcfffff 	.word	0x3fcfffff

080093a0 <_strtod_r>:
 80093a0:	4b01      	ldr	r3, [pc, #4]	@ (80093a8 <_strtod_r+0x8>)
 80093a2:	f7ff ba25 	b.w	80087f0 <_strtod_l>
 80093a6:	bf00      	nop
 80093a8:	20000164 	.word	0x20000164

080093ac <__ssputs_r>:
 80093ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b0:	461f      	mov	r7, r3
 80093b2:	688e      	ldr	r6, [r1, #8]
 80093b4:	4682      	mov	sl, r0
 80093b6:	42be      	cmp	r6, r7
 80093b8:	460c      	mov	r4, r1
 80093ba:	4690      	mov	r8, r2
 80093bc:	680b      	ldr	r3, [r1, #0]
 80093be:	d82d      	bhi.n	800941c <__ssputs_r+0x70>
 80093c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093c8:	d026      	beq.n	8009418 <__ssputs_r+0x6c>
 80093ca:	6965      	ldr	r5, [r4, #20]
 80093cc:	6909      	ldr	r1, [r1, #16]
 80093ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093d2:	eba3 0901 	sub.w	r9, r3, r1
 80093d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093da:	1c7b      	adds	r3, r7, #1
 80093dc:	444b      	add	r3, r9
 80093de:	106d      	asrs	r5, r5, #1
 80093e0:	429d      	cmp	r5, r3
 80093e2:	bf38      	it	cc
 80093e4:	461d      	movcc	r5, r3
 80093e6:	0553      	lsls	r3, r2, #21
 80093e8:	d527      	bpl.n	800943a <__ssputs_r+0x8e>
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7fe fcaa 	bl	8007d44 <_malloc_r>
 80093f0:	4606      	mov	r6, r0
 80093f2:	b360      	cbz	r0, 800944e <__ssputs_r+0xa2>
 80093f4:	464a      	mov	r2, r9
 80093f6:	6921      	ldr	r1, [r4, #16]
 80093f8:	f7fd fdb1 	bl	8006f5e <memcpy>
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009406:	81a3      	strh	r3, [r4, #12]
 8009408:	6126      	str	r6, [r4, #16]
 800940a:	444e      	add	r6, r9
 800940c:	6026      	str	r6, [r4, #0]
 800940e:	463e      	mov	r6, r7
 8009410:	6165      	str	r5, [r4, #20]
 8009412:	eba5 0509 	sub.w	r5, r5, r9
 8009416:	60a5      	str	r5, [r4, #8]
 8009418:	42be      	cmp	r6, r7
 800941a:	d900      	bls.n	800941e <__ssputs_r+0x72>
 800941c:	463e      	mov	r6, r7
 800941e:	4632      	mov	r2, r6
 8009420:	4641      	mov	r1, r8
 8009422:	6820      	ldr	r0, [r4, #0]
 8009424:	f000 f9d4 	bl	80097d0 <memmove>
 8009428:	2000      	movs	r0, #0
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	1b9b      	subs	r3, r3, r6
 800942e:	60a3      	str	r3, [r4, #8]
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	4433      	add	r3, r6
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943a:	462a      	mov	r2, r5
 800943c:	f000 fd71 	bl	8009f22 <_realloc_r>
 8009440:	4606      	mov	r6, r0
 8009442:	2800      	cmp	r0, #0
 8009444:	d1e0      	bne.n	8009408 <__ssputs_r+0x5c>
 8009446:	4650      	mov	r0, sl
 8009448:	6921      	ldr	r1, [r4, #16]
 800944a:	f7fe fc09 	bl	8007c60 <_free_r>
 800944e:	230c      	movs	r3, #12
 8009450:	f8ca 3000 	str.w	r3, [sl]
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	f04f 30ff 	mov.w	r0, #4294967295
 800945a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	e7e9      	b.n	8009436 <__ssputs_r+0x8a>
	...

08009464 <_svfiprintf_r>:
 8009464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009468:	4698      	mov	r8, r3
 800946a:	898b      	ldrh	r3, [r1, #12]
 800946c:	4607      	mov	r7, r0
 800946e:	061b      	lsls	r3, r3, #24
 8009470:	460d      	mov	r5, r1
 8009472:	4614      	mov	r4, r2
 8009474:	b09d      	sub	sp, #116	@ 0x74
 8009476:	d510      	bpl.n	800949a <_svfiprintf_r+0x36>
 8009478:	690b      	ldr	r3, [r1, #16]
 800947a:	b973      	cbnz	r3, 800949a <_svfiprintf_r+0x36>
 800947c:	2140      	movs	r1, #64	@ 0x40
 800947e:	f7fe fc61 	bl	8007d44 <_malloc_r>
 8009482:	6028      	str	r0, [r5, #0]
 8009484:	6128      	str	r0, [r5, #16]
 8009486:	b930      	cbnz	r0, 8009496 <_svfiprintf_r+0x32>
 8009488:	230c      	movs	r3, #12
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	f04f 30ff 	mov.w	r0, #4294967295
 8009490:	b01d      	add	sp, #116	@ 0x74
 8009492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009496:	2340      	movs	r3, #64	@ 0x40
 8009498:	616b      	str	r3, [r5, #20]
 800949a:	2300      	movs	r3, #0
 800949c:	9309      	str	r3, [sp, #36]	@ 0x24
 800949e:	2320      	movs	r3, #32
 80094a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094a4:	2330      	movs	r3, #48	@ 0x30
 80094a6:	f04f 0901 	mov.w	r9, #1
 80094aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009648 <_svfiprintf_r+0x1e4>
 80094b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094b6:	4623      	mov	r3, r4
 80094b8:	469a      	mov	sl, r3
 80094ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094be:	b10a      	cbz	r2, 80094c4 <_svfiprintf_r+0x60>
 80094c0:	2a25      	cmp	r2, #37	@ 0x25
 80094c2:	d1f9      	bne.n	80094b8 <_svfiprintf_r+0x54>
 80094c4:	ebba 0b04 	subs.w	fp, sl, r4
 80094c8:	d00b      	beq.n	80094e2 <_svfiprintf_r+0x7e>
 80094ca:	465b      	mov	r3, fp
 80094cc:	4622      	mov	r2, r4
 80094ce:	4629      	mov	r1, r5
 80094d0:	4638      	mov	r0, r7
 80094d2:	f7ff ff6b 	bl	80093ac <__ssputs_r>
 80094d6:	3001      	adds	r0, #1
 80094d8:	f000 80a7 	beq.w	800962a <_svfiprintf_r+0x1c6>
 80094dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094de:	445a      	add	r2, fp
 80094e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80094e2:	f89a 3000 	ldrb.w	r3, [sl]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 809f 	beq.w	800962a <_svfiprintf_r+0x1c6>
 80094ec:	2300      	movs	r3, #0
 80094ee:	f04f 32ff 	mov.w	r2, #4294967295
 80094f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094f6:	f10a 0a01 	add.w	sl, sl, #1
 80094fa:	9304      	str	r3, [sp, #16]
 80094fc:	9307      	str	r3, [sp, #28]
 80094fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009502:	931a      	str	r3, [sp, #104]	@ 0x68
 8009504:	4654      	mov	r4, sl
 8009506:	2205      	movs	r2, #5
 8009508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950c:	484e      	ldr	r0, [pc, #312]	@ (8009648 <_svfiprintf_r+0x1e4>)
 800950e:	f7fd fd18 	bl	8006f42 <memchr>
 8009512:	9a04      	ldr	r2, [sp, #16]
 8009514:	b9d8      	cbnz	r0, 800954e <_svfiprintf_r+0xea>
 8009516:	06d0      	lsls	r0, r2, #27
 8009518:	bf44      	itt	mi
 800951a:	2320      	movmi	r3, #32
 800951c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009520:	0711      	lsls	r1, r2, #28
 8009522:	bf44      	itt	mi
 8009524:	232b      	movmi	r3, #43	@ 0x2b
 8009526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800952a:	f89a 3000 	ldrb.w	r3, [sl]
 800952e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009530:	d015      	beq.n	800955e <_svfiprintf_r+0xfa>
 8009532:	4654      	mov	r4, sl
 8009534:	2000      	movs	r0, #0
 8009536:	f04f 0c0a 	mov.w	ip, #10
 800953a:	9a07      	ldr	r2, [sp, #28]
 800953c:	4621      	mov	r1, r4
 800953e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009542:	3b30      	subs	r3, #48	@ 0x30
 8009544:	2b09      	cmp	r3, #9
 8009546:	d94b      	bls.n	80095e0 <_svfiprintf_r+0x17c>
 8009548:	b1b0      	cbz	r0, 8009578 <_svfiprintf_r+0x114>
 800954a:	9207      	str	r2, [sp, #28]
 800954c:	e014      	b.n	8009578 <_svfiprintf_r+0x114>
 800954e:	eba0 0308 	sub.w	r3, r0, r8
 8009552:	fa09 f303 	lsl.w	r3, r9, r3
 8009556:	4313      	orrs	r3, r2
 8009558:	46a2      	mov	sl, r4
 800955a:	9304      	str	r3, [sp, #16]
 800955c:	e7d2      	b.n	8009504 <_svfiprintf_r+0xa0>
 800955e:	9b03      	ldr	r3, [sp, #12]
 8009560:	1d19      	adds	r1, r3, #4
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	9103      	str	r1, [sp, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	bfbb      	ittet	lt
 800956a:	425b      	neglt	r3, r3
 800956c:	f042 0202 	orrlt.w	r2, r2, #2
 8009570:	9307      	strge	r3, [sp, #28]
 8009572:	9307      	strlt	r3, [sp, #28]
 8009574:	bfb8      	it	lt
 8009576:	9204      	strlt	r2, [sp, #16]
 8009578:	7823      	ldrb	r3, [r4, #0]
 800957a:	2b2e      	cmp	r3, #46	@ 0x2e
 800957c:	d10a      	bne.n	8009594 <_svfiprintf_r+0x130>
 800957e:	7863      	ldrb	r3, [r4, #1]
 8009580:	2b2a      	cmp	r3, #42	@ 0x2a
 8009582:	d132      	bne.n	80095ea <_svfiprintf_r+0x186>
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	3402      	adds	r4, #2
 8009588:	1d1a      	adds	r2, r3, #4
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	9203      	str	r2, [sp, #12]
 800958e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800964c <_svfiprintf_r+0x1e8>
 8009598:	2203      	movs	r2, #3
 800959a:	4650      	mov	r0, sl
 800959c:	7821      	ldrb	r1, [r4, #0]
 800959e:	f7fd fcd0 	bl	8006f42 <memchr>
 80095a2:	b138      	cbz	r0, 80095b4 <_svfiprintf_r+0x150>
 80095a4:	2240      	movs	r2, #64	@ 0x40
 80095a6:	9b04      	ldr	r3, [sp, #16]
 80095a8:	eba0 000a 	sub.w	r0, r0, sl
 80095ac:	4082      	lsls	r2, r0
 80095ae:	4313      	orrs	r3, r2
 80095b0:	3401      	adds	r4, #1
 80095b2:	9304      	str	r3, [sp, #16]
 80095b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b8:	2206      	movs	r2, #6
 80095ba:	4825      	ldr	r0, [pc, #148]	@ (8009650 <_svfiprintf_r+0x1ec>)
 80095bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095c0:	f7fd fcbf 	bl	8006f42 <memchr>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d036      	beq.n	8009636 <_svfiprintf_r+0x1d2>
 80095c8:	4b22      	ldr	r3, [pc, #136]	@ (8009654 <_svfiprintf_r+0x1f0>)
 80095ca:	bb1b      	cbnz	r3, 8009614 <_svfiprintf_r+0x1b0>
 80095cc:	9b03      	ldr	r3, [sp, #12]
 80095ce:	3307      	adds	r3, #7
 80095d0:	f023 0307 	bic.w	r3, r3, #7
 80095d4:	3308      	adds	r3, #8
 80095d6:	9303      	str	r3, [sp, #12]
 80095d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095da:	4433      	add	r3, r6
 80095dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095de:	e76a      	b.n	80094b6 <_svfiprintf_r+0x52>
 80095e0:	460c      	mov	r4, r1
 80095e2:	2001      	movs	r0, #1
 80095e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80095e8:	e7a8      	b.n	800953c <_svfiprintf_r+0xd8>
 80095ea:	2300      	movs	r3, #0
 80095ec:	f04f 0c0a 	mov.w	ip, #10
 80095f0:	4619      	mov	r1, r3
 80095f2:	3401      	adds	r4, #1
 80095f4:	9305      	str	r3, [sp, #20]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095fc:	3a30      	subs	r2, #48	@ 0x30
 80095fe:	2a09      	cmp	r2, #9
 8009600:	d903      	bls.n	800960a <_svfiprintf_r+0x1a6>
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0c6      	beq.n	8009594 <_svfiprintf_r+0x130>
 8009606:	9105      	str	r1, [sp, #20]
 8009608:	e7c4      	b.n	8009594 <_svfiprintf_r+0x130>
 800960a:	4604      	mov	r4, r0
 800960c:	2301      	movs	r3, #1
 800960e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009612:	e7f0      	b.n	80095f6 <_svfiprintf_r+0x192>
 8009614:	ab03      	add	r3, sp, #12
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	462a      	mov	r2, r5
 800961a:	4638      	mov	r0, r7
 800961c:	4b0e      	ldr	r3, [pc, #56]	@ (8009658 <_svfiprintf_r+0x1f4>)
 800961e:	a904      	add	r1, sp, #16
 8009620:	f7fc fc7e 	bl	8005f20 <_printf_float>
 8009624:	1c42      	adds	r2, r0, #1
 8009626:	4606      	mov	r6, r0
 8009628:	d1d6      	bne.n	80095d8 <_svfiprintf_r+0x174>
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	065b      	lsls	r3, r3, #25
 800962e:	f53f af2d 	bmi.w	800948c <_svfiprintf_r+0x28>
 8009632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009634:	e72c      	b.n	8009490 <_svfiprintf_r+0x2c>
 8009636:	ab03      	add	r3, sp, #12
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	462a      	mov	r2, r5
 800963c:	4638      	mov	r0, r7
 800963e:	4b06      	ldr	r3, [pc, #24]	@ (8009658 <_svfiprintf_r+0x1f4>)
 8009640:	a904      	add	r1, sp, #16
 8009642:	f7fc ff0b 	bl	800645c <_printf_i>
 8009646:	e7ed      	b.n	8009624 <_svfiprintf_r+0x1c0>
 8009648:	0800c5b8 	.word	0x0800c5b8
 800964c:	0800c5be 	.word	0x0800c5be
 8009650:	0800c5c2 	.word	0x0800c5c2
 8009654:	08005f21 	.word	0x08005f21
 8009658:	080093ad 	.word	0x080093ad

0800965c <__sflush_r>:
 800965c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	0716      	lsls	r6, r2, #28
 8009664:	4605      	mov	r5, r0
 8009666:	460c      	mov	r4, r1
 8009668:	d454      	bmi.n	8009714 <__sflush_r+0xb8>
 800966a:	684b      	ldr	r3, [r1, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	dc02      	bgt.n	8009676 <__sflush_r+0x1a>
 8009670:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009672:	2b00      	cmp	r3, #0
 8009674:	dd48      	ble.n	8009708 <__sflush_r+0xac>
 8009676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009678:	2e00      	cmp	r6, #0
 800967a:	d045      	beq.n	8009708 <__sflush_r+0xac>
 800967c:	2300      	movs	r3, #0
 800967e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009682:	682f      	ldr	r7, [r5, #0]
 8009684:	6a21      	ldr	r1, [r4, #32]
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	d030      	beq.n	80096ec <__sflush_r+0x90>
 800968a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	0759      	lsls	r1, r3, #29
 8009690:	d505      	bpl.n	800969e <__sflush_r+0x42>
 8009692:	6863      	ldr	r3, [r4, #4]
 8009694:	1ad2      	subs	r2, r2, r3
 8009696:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009698:	b10b      	cbz	r3, 800969e <__sflush_r+0x42>
 800969a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800969c:	1ad2      	subs	r2, r2, r3
 800969e:	2300      	movs	r3, #0
 80096a0:	4628      	mov	r0, r5
 80096a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096a4:	6a21      	ldr	r1, [r4, #32]
 80096a6:	47b0      	blx	r6
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	d106      	bne.n	80096bc <__sflush_r+0x60>
 80096ae:	6829      	ldr	r1, [r5, #0]
 80096b0:	291d      	cmp	r1, #29
 80096b2:	d82b      	bhi.n	800970c <__sflush_r+0xb0>
 80096b4:	4a28      	ldr	r2, [pc, #160]	@ (8009758 <__sflush_r+0xfc>)
 80096b6:	410a      	asrs	r2, r1
 80096b8:	07d6      	lsls	r6, r2, #31
 80096ba:	d427      	bmi.n	800970c <__sflush_r+0xb0>
 80096bc:	2200      	movs	r2, #0
 80096be:	6062      	str	r2, [r4, #4]
 80096c0:	6922      	ldr	r2, [r4, #16]
 80096c2:	04d9      	lsls	r1, r3, #19
 80096c4:	6022      	str	r2, [r4, #0]
 80096c6:	d504      	bpl.n	80096d2 <__sflush_r+0x76>
 80096c8:	1c42      	adds	r2, r0, #1
 80096ca:	d101      	bne.n	80096d0 <__sflush_r+0x74>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b903      	cbnz	r3, 80096d2 <__sflush_r+0x76>
 80096d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80096d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096d4:	602f      	str	r7, [r5, #0]
 80096d6:	b1b9      	cbz	r1, 8009708 <__sflush_r+0xac>
 80096d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096dc:	4299      	cmp	r1, r3
 80096de:	d002      	beq.n	80096e6 <__sflush_r+0x8a>
 80096e0:	4628      	mov	r0, r5
 80096e2:	f7fe fabd 	bl	8007c60 <_free_r>
 80096e6:	2300      	movs	r3, #0
 80096e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80096ea:	e00d      	b.n	8009708 <__sflush_r+0xac>
 80096ec:	2301      	movs	r3, #1
 80096ee:	4628      	mov	r0, r5
 80096f0:	47b0      	blx	r6
 80096f2:	4602      	mov	r2, r0
 80096f4:	1c50      	adds	r0, r2, #1
 80096f6:	d1c9      	bne.n	800968c <__sflush_r+0x30>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0c6      	beq.n	800968c <__sflush_r+0x30>
 80096fe:	2b1d      	cmp	r3, #29
 8009700:	d001      	beq.n	8009706 <__sflush_r+0xaa>
 8009702:	2b16      	cmp	r3, #22
 8009704:	d11d      	bne.n	8009742 <__sflush_r+0xe6>
 8009706:	602f      	str	r7, [r5, #0]
 8009708:	2000      	movs	r0, #0
 800970a:	e021      	b.n	8009750 <__sflush_r+0xf4>
 800970c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009710:	b21b      	sxth	r3, r3
 8009712:	e01a      	b.n	800974a <__sflush_r+0xee>
 8009714:	690f      	ldr	r7, [r1, #16]
 8009716:	2f00      	cmp	r7, #0
 8009718:	d0f6      	beq.n	8009708 <__sflush_r+0xac>
 800971a:	0793      	lsls	r3, r2, #30
 800971c:	bf18      	it	ne
 800971e:	2300      	movne	r3, #0
 8009720:	680e      	ldr	r6, [r1, #0]
 8009722:	bf08      	it	eq
 8009724:	694b      	ldreq	r3, [r1, #20]
 8009726:	1bf6      	subs	r6, r6, r7
 8009728:	600f      	str	r7, [r1, #0]
 800972a:	608b      	str	r3, [r1, #8]
 800972c:	2e00      	cmp	r6, #0
 800972e:	ddeb      	ble.n	8009708 <__sflush_r+0xac>
 8009730:	4633      	mov	r3, r6
 8009732:	463a      	mov	r2, r7
 8009734:	4628      	mov	r0, r5
 8009736:	6a21      	ldr	r1, [r4, #32]
 8009738:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800973c:	47e0      	blx	ip
 800973e:	2800      	cmp	r0, #0
 8009740:	dc07      	bgt.n	8009752 <__sflush_r+0xf6>
 8009742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	81a3      	strh	r3, [r4, #12]
 8009750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009752:	4407      	add	r7, r0
 8009754:	1a36      	subs	r6, r6, r0
 8009756:	e7e9      	b.n	800972c <__sflush_r+0xd0>
 8009758:	dfbffffe 	.word	0xdfbffffe

0800975c <_fflush_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	690b      	ldr	r3, [r1, #16]
 8009760:	4605      	mov	r5, r0
 8009762:	460c      	mov	r4, r1
 8009764:	b913      	cbnz	r3, 800976c <_fflush_r+0x10>
 8009766:	2500      	movs	r5, #0
 8009768:	4628      	mov	r0, r5
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	b118      	cbz	r0, 8009776 <_fflush_r+0x1a>
 800976e:	6a03      	ldr	r3, [r0, #32]
 8009770:	b90b      	cbnz	r3, 8009776 <_fflush_r+0x1a>
 8009772:	f7fd fa2f 	bl	8006bd4 <__sinit>
 8009776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0f3      	beq.n	8009766 <_fflush_r+0xa>
 800977e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009780:	07d0      	lsls	r0, r2, #31
 8009782:	d404      	bmi.n	800978e <_fflush_r+0x32>
 8009784:	0599      	lsls	r1, r3, #22
 8009786:	d402      	bmi.n	800978e <_fflush_r+0x32>
 8009788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800978a:	f7fd fbd0 	bl	8006f2e <__retarget_lock_acquire_recursive>
 800978e:	4628      	mov	r0, r5
 8009790:	4621      	mov	r1, r4
 8009792:	f7ff ff63 	bl	800965c <__sflush_r>
 8009796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009798:	4605      	mov	r5, r0
 800979a:	07da      	lsls	r2, r3, #31
 800979c:	d4e4      	bmi.n	8009768 <_fflush_r+0xc>
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	059b      	lsls	r3, r3, #22
 80097a2:	d4e1      	bmi.n	8009768 <_fflush_r+0xc>
 80097a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097a6:	f7fd fbc3 	bl	8006f30 <__retarget_lock_release_recursive>
 80097aa:	e7dd      	b.n	8009768 <_fflush_r+0xc>

080097ac <fiprintf>:
 80097ac:	b40e      	push	{r1, r2, r3}
 80097ae:	b503      	push	{r0, r1, lr}
 80097b0:	4601      	mov	r1, r0
 80097b2:	ab03      	add	r3, sp, #12
 80097b4:	4805      	ldr	r0, [pc, #20]	@ (80097cc <fiprintf+0x20>)
 80097b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ba:	6800      	ldr	r0, [r0, #0]
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	f000 fc13 	bl	8009fe8 <_vfiprintf_r>
 80097c2:	b002      	add	sp, #8
 80097c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097c8:	b003      	add	sp, #12
 80097ca:	4770      	bx	lr
 80097cc:	20000114 	.word	0x20000114

080097d0 <memmove>:
 80097d0:	4288      	cmp	r0, r1
 80097d2:	b510      	push	{r4, lr}
 80097d4:	eb01 0402 	add.w	r4, r1, r2
 80097d8:	d902      	bls.n	80097e0 <memmove+0x10>
 80097da:	4284      	cmp	r4, r0
 80097dc:	4623      	mov	r3, r4
 80097de:	d807      	bhi.n	80097f0 <memmove+0x20>
 80097e0:	1e43      	subs	r3, r0, #1
 80097e2:	42a1      	cmp	r1, r4
 80097e4:	d008      	beq.n	80097f8 <memmove+0x28>
 80097e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ee:	e7f8      	b.n	80097e2 <memmove+0x12>
 80097f0:	4601      	mov	r1, r0
 80097f2:	4402      	add	r2, r0
 80097f4:	428a      	cmp	r2, r1
 80097f6:	d100      	bne.n	80097fa <memmove+0x2a>
 80097f8:	bd10      	pop	{r4, pc}
 80097fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009802:	e7f7      	b.n	80097f4 <memmove+0x24>

08009804 <strncmp>:
 8009804:	b510      	push	{r4, lr}
 8009806:	b16a      	cbz	r2, 8009824 <strncmp+0x20>
 8009808:	3901      	subs	r1, #1
 800980a:	1884      	adds	r4, r0, r2
 800980c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009810:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009814:	429a      	cmp	r2, r3
 8009816:	d103      	bne.n	8009820 <strncmp+0x1c>
 8009818:	42a0      	cmp	r0, r4
 800981a:	d001      	beq.n	8009820 <strncmp+0x1c>
 800981c:	2a00      	cmp	r2, #0
 800981e:	d1f5      	bne.n	800980c <strncmp+0x8>
 8009820:	1ad0      	subs	r0, r2, r3
 8009822:	bd10      	pop	{r4, pc}
 8009824:	4610      	mov	r0, r2
 8009826:	e7fc      	b.n	8009822 <strncmp+0x1e>

08009828 <_sbrk_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	2300      	movs	r3, #0
 800982c:	4d05      	ldr	r5, [pc, #20]	@ (8009844 <_sbrk_r+0x1c>)
 800982e:	4604      	mov	r4, r0
 8009830:	4608      	mov	r0, r1
 8009832:	602b      	str	r3, [r5, #0]
 8009834:	f7f9 fbb8 	bl	8002fa8 <_sbrk>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <_sbrk_r+0x1a>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	b103      	cbz	r3, 8009842 <_sbrk_r+0x1a>
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	20000c00 	.word	0x20000c00

08009848 <nan>:
 8009848:	2000      	movs	r0, #0
 800984a:	4901      	ldr	r1, [pc, #4]	@ (8009850 <nan+0x8>)
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	7ff80000 	.word	0x7ff80000

08009854 <abort>:
 8009854:	2006      	movs	r0, #6
 8009856:	b508      	push	{r3, lr}
 8009858:	f000 fd9a 	bl	800a390 <raise>
 800985c:	2001      	movs	r0, #1
 800985e:	f7f9 fb77 	bl	8002f50 <_exit>

08009862 <_calloc_r>:
 8009862:	b570      	push	{r4, r5, r6, lr}
 8009864:	fba1 5402 	umull	r5, r4, r1, r2
 8009868:	b93c      	cbnz	r4, 800987a <_calloc_r+0x18>
 800986a:	4629      	mov	r1, r5
 800986c:	f7fe fa6a 	bl	8007d44 <_malloc_r>
 8009870:	4606      	mov	r6, r0
 8009872:	b928      	cbnz	r0, 8009880 <_calloc_r+0x1e>
 8009874:	2600      	movs	r6, #0
 8009876:	4630      	mov	r0, r6
 8009878:	bd70      	pop	{r4, r5, r6, pc}
 800987a:	220c      	movs	r2, #12
 800987c:	6002      	str	r2, [r0, #0]
 800987e:	e7f9      	b.n	8009874 <_calloc_r+0x12>
 8009880:	462a      	mov	r2, r5
 8009882:	4621      	mov	r1, r4
 8009884:	f7fd fa3f 	bl	8006d06 <memset>
 8009888:	e7f5      	b.n	8009876 <_calloc_r+0x14>

0800988a <rshift>:
 800988a:	6903      	ldr	r3, [r0, #16]
 800988c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009890:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009894:	f100 0414 	add.w	r4, r0, #20
 8009898:	ea4f 1261 	mov.w	r2, r1, asr #5
 800989c:	dd46      	ble.n	800992c <rshift+0xa2>
 800989e:	f011 011f 	ands.w	r1, r1, #31
 80098a2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80098a6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80098aa:	d10c      	bne.n	80098c6 <rshift+0x3c>
 80098ac:	4629      	mov	r1, r5
 80098ae:	f100 0710 	add.w	r7, r0, #16
 80098b2:	42b1      	cmp	r1, r6
 80098b4:	d335      	bcc.n	8009922 <rshift+0x98>
 80098b6:	1a9b      	subs	r3, r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	1eea      	subs	r2, r5, #3
 80098bc:	4296      	cmp	r6, r2
 80098be:	bf38      	it	cc
 80098c0:	2300      	movcc	r3, #0
 80098c2:	4423      	add	r3, r4
 80098c4:	e015      	b.n	80098f2 <rshift+0x68>
 80098c6:	46a1      	mov	r9, r4
 80098c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80098cc:	f1c1 0820 	rsb	r8, r1, #32
 80098d0:	40cf      	lsrs	r7, r1
 80098d2:	f105 0e04 	add.w	lr, r5, #4
 80098d6:	4576      	cmp	r6, lr
 80098d8:	46f4      	mov	ip, lr
 80098da:	d816      	bhi.n	800990a <rshift+0x80>
 80098dc:	1a9a      	subs	r2, r3, r2
 80098de:	0092      	lsls	r2, r2, #2
 80098e0:	3a04      	subs	r2, #4
 80098e2:	3501      	adds	r5, #1
 80098e4:	42ae      	cmp	r6, r5
 80098e6:	bf38      	it	cc
 80098e8:	2200      	movcc	r2, #0
 80098ea:	18a3      	adds	r3, r4, r2
 80098ec:	50a7      	str	r7, [r4, r2]
 80098ee:	b107      	cbz	r7, 80098f2 <rshift+0x68>
 80098f0:	3304      	adds	r3, #4
 80098f2:	42a3      	cmp	r3, r4
 80098f4:	eba3 0204 	sub.w	r2, r3, r4
 80098f8:	bf08      	it	eq
 80098fa:	2300      	moveq	r3, #0
 80098fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009900:	6102      	str	r2, [r0, #16]
 8009902:	bf08      	it	eq
 8009904:	6143      	streq	r3, [r0, #20]
 8009906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800990a:	f8dc c000 	ldr.w	ip, [ip]
 800990e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009912:	ea4c 0707 	orr.w	r7, ip, r7
 8009916:	f849 7b04 	str.w	r7, [r9], #4
 800991a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800991e:	40cf      	lsrs	r7, r1
 8009920:	e7d9      	b.n	80098d6 <rshift+0x4c>
 8009922:	f851 cb04 	ldr.w	ip, [r1], #4
 8009926:	f847 cf04 	str.w	ip, [r7, #4]!
 800992a:	e7c2      	b.n	80098b2 <rshift+0x28>
 800992c:	4623      	mov	r3, r4
 800992e:	e7e0      	b.n	80098f2 <rshift+0x68>

08009930 <__hexdig_fun>:
 8009930:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009934:	2b09      	cmp	r3, #9
 8009936:	d802      	bhi.n	800993e <__hexdig_fun+0xe>
 8009938:	3820      	subs	r0, #32
 800993a:	b2c0      	uxtb	r0, r0
 800993c:	4770      	bx	lr
 800993e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009942:	2b05      	cmp	r3, #5
 8009944:	d801      	bhi.n	800994a <__hexdig_fun+0x1a>
 8009946:	3847      	subs	r0, #71	@ 0x47
 8009948:	e7f7      	b.n	800993a <__hexdig_fun+0xa>
 800994a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800994e:	2b05      	cmp	r3, #5
 8009950:	d801      	bhi.n	8009956 <__hexdig_fun+0x26>
 8009952:	3827      	subs	r0, #39	@ 0x27
 8009954:	e7f1      	b.n	800993a <__hexdig_fun+0xa>
 8009956:	2000      	movs	r0, #0
 8009958:	4770      	bx	lr
	...

0800995c <__gethex>:
 800995c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009960:	468a      	mov	sl, r1
 8009962:	4690      	mov	r8, r2
 8009964:	b085      	sub	sp, #20
 8009966:	9302      	str	r3, [sp, #8]
 8009968:	680b      	ldr	r3, [r1, #0]
 800996a:	9001      	str	r0, [sp, #4]
 800996c:	1c9c      	adds	r4, r3, #2
 800996e:	46a1      	mov	r9, r4
 8009970:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009974:	2830      	cmp	r0, #48	@ 0x30
 8009976:	d0fa      	beq.n	800996e <__gethex+0x12>
 8009978:	eba9 0303 	sub.w	r3, r9, r3
 800997c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009980:	f7ff ffd6 	bl	8009930 <__hexdig_fun>
 8009984:	4605      	mov	r5, r0
 8009986:	2800      	cmp	r0, #0
 8009988:	d168      	bne.n	8009a5c <__gethex+0x100>
 800998a:	2201      	movs	r2, #1
 800998c:	4648      	mov	r0, r9
 800998e:	499f      	ldr	r1, [pc, #636]	@ (8009c0c <__gethex+0x2b0>)
 8009990:	f7ff ff38 	bl	8009804 <strncmp>
 8009994:	4607      	mov	r7, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	d167      	bne.n	8009a6a <__gethex+0x10e>
 800999a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800999e:	4626      	mov	r6, r4
 80099a0:	f7ff ffc6 	bl	8009930 <__hexdig_fun>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d062      	beq.n	8009a6e <__gethex+0x112>
 80099a8:	4623      	mov	r3, r4
 80099aa:	7818      	ldrb	r0, [r3, #0]
 80099ac:	4699      	mov	r9, r3
 80099ae:	2830      	cmp	r0, #48	@ 0x30
 80099b0:	f103 0301 	add.w	r3, r3, #1
 80099b4:	d0f9      	beq.n	80099aa <__gethex+0x4e>
 80099b6:	f7ff ffbb 	bl	8009930 <__hexdig_fun>
 80099ba:	fab0 f580 	clz	r5, r0
 80099be:	f04f 0b01 	mov.w	fp, #1
 80099c2:	096d      	lsrs	r5, r5, #5
 80099c4:	464a      	mov	r2, r9
 80099c6:	4616      	mov	r6, r2
 80099c8:	7830      	ldrb	r0, [r6, #0]
 80099ca:	3201      	adds	r2, #1
 80099cc:	f7ff ffb0 	bl	8009930 <__hexdig_fun>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d1f8      	bne.n	80099c6 <__gethex+0x6a>
 80099d4:	2201      	movs	r2, #1
 80099d6:	4630      	mov	r0, r6
 80099d8:	498c      	ldr	r1, [pc, #560]	@ (8009c0c <__gethex+0x2b0>)
 80099da:	f7ff ff13 	bl	8009804 <strncmp>
 80099de:	2800      	cmp	r0, #0
 80099e0:	d13f      	bne.n	8009a62 <__gethex+0x106>
 80099e2:	b944      	cbnz	r4, 80099f6 <__gethex+0x9a>
 80099e4:	1c74      	adds	r4, r6, #1
 80099e6:	4622      	mov	r2, r4
 80099e8:	4616      	mov	r6, r2
 80099ea:	7830      	ldrb	r0, [r6, #0]
 80099ec:	3201      	adds	r2, #1
 80099ee:	f7ff ff9f 	bl	8009930 <__hexdig_fun>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d1f8      	bne.n	80099e8 <__gethex+0x8c>
 80099f6:	1ba4      	subs	r4, r4, r6
 80099f8:	00a7      	lsls	r7, r4, #2
 80099fa:	7833      	ldrb	r3, [r6, #0]
 80099fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009a00:	2b50      	cmp	r3, #80	@ 0x50
 8009a02:	d13e      	bne.n	8009a82 <__gethex+0x126>
 8009a04:	7873      	ldrb	r3, [r6, #1]
 8009a06:	2b2b      	cmp	r3, #43	@ 0x2b
 8009a08:	d033      	beq.n	8009a72 <__gethex+0x116>
 8009a0a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009a0c:	d034      	beq.n	8009a78 <__gethex+0x11c>
 8009a0e:	2400      	movs	r4, #0
 8009a10:	1c71      	adds	r1, r6, #1
 8009a12:	7808      	ldrb	r0, [r1, #0]
 8009a14:	f7ff ff8c 	bl	8009930 <__hexdig_fun>
 8009a18:	1e43      	subs	r3, r0, #1
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b18      	cmp	r3, #24
 8009a1e:	d830      	bhi.n	8009a82 <__gethex+0x126>
 8009a20:	f1a0 0210 	sub.w	r2, r0, #16
 8009a24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a28:	f7ff ff82 	bl	8009930 <__hexdig_fun>
 8009a2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009a30:	fa5f fc8c 	uxtb.w	ip, ip
 8009a34:	f1bc 0f18 	cmp.w	ip, #24
 8009a38:	f04f 030a 	mov.w	r3, #10
 8009a3c:	d91e      	bls.n	8009a7c <__gethex+0x120>
 8009a3e:	b104      	cbz	r4, 8009a42 <__gethex+0xe6>
 8009a40:	4252      	negs	r2, r2
 8009a42:	4417      	add	r7, r2
 8009a44:	f8ca 1000 	str.w	r1, [sl]
 8009a48:	b1ed      	cbz	r5, 8009a86 <__gethex+0x12a>
 8009a4a:	f1bb 0f00 	cmp.w	fp, #0
 8009a4e:	bf0c      	ite	eq
 8009a50:	2506      	moveq	r5, #6
 8009a52:	2500      	movne	r5, #0
 8009a54:	4628      	mov	r0, r5
 8009a56:	b005      	add	sp, #20
 8009a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5c:	2500      	movs	r5, #0
 8009a5e:	462c      	mov	r4, r5
 8009a60:	e7b0      	b.n	80099c4 <__gethex+0x68>
 8009a62:	2c00      	cmp	r4, #0
 8009a64:	d1c7      	bne.n	80099f6 <__gethex+0x9a>
 8009a66:	4627      	mov	r7, r4
 8009a68:	e7c7      	b.n	80099fa <__gethex+0x9e>
 8009a6a:	464e      	mov	r6, r9
 8009a6c:	462f      	mov	r7, r5
 8009a6e:	2501      	movs	r5, #1
 8009a70:	e7c3      	b.n	80099fa <__gethex+0x9e>
 8009a72:	2400      	movs	r4, #0
 8009a74:	1cb1      	adds	r1, r6, #2
 8009a76:	e7cc      	b.n	8009a12 <__gethex+0xb6>
 8009a78:	2401      	movs	r4, #1
 8009a7a:	e7fb      	b.n	8009a74 <__gethex+0x118>
 8009a7c:	fb03 0002 	mla	r0, r3, r2, r0
 8009a80:	e7ce      	b.n	8009a20 <__gethex+0xc4>
 8009a82:	4631      	mov	r1, r6
 8009a84:	e7de      	b.n	8009a44 <__gethex+0xe8>
 8009a86:	4629      	mov	r1, r5
 8009a88:	eba6 0309 	sub.w	r3, r6, r9
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	2b07      	cmp	r3, #7
 8009a90:	dc0a      	bgt.n	8009aa8 <__gethex+0x14c>
 8009a92:	9801      	ldr	r0, [sp, #4]
 8009a94:	f7fe f9e2 	bl	8007e5c <_Balloc>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	b940      	cbnz	r0, 8009aae <__gethex+0x152>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	21e4      	movs	r1, #228	@ 0xe4
 8009aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8009c10 <__gethex+0x2b4>)
 8009aa2:	485c      	ldr	r0, [pc, #368]	@ (8009c14 <__gethex+0x2b8>)
 8009aa4:	f7fd fa6e 	bl	8006f84 <__assert_func>
 8009aa8:	3101      	adds	r1, #1
 8009aaa:	105b      	asrs	r3, r3, #1
 8009aac:	e7ef      	b.n	8009a8e <__gethex+0x132>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f100 0a14 	add.w	sl, r0, #20
 8009ab4:	4655      	mov	r5, sl
 8009ab6:	469b      	mov	fp, r3
 8009ab8:	45b1      	cmp	r9, r6
 8009aba:	d337      	bcc.n	8009b2c <__gethex+0x1d0>
 8009abc:	f845 bb04 	str.w	fp, [r5], #4
 8009ac0:	eba5 050a 	sub.w	r5, r5, sl
 8009ac4:	10ad      	asrs	r5, r5, #2
 8009ac6:	6125      	str	r5, [r4, #16]
 8009ac8:	4658      	mov	r0, fp
 8009aca:	f7fe fab9 	bl	8008040 <__hi0bits>
 8009ace:	016d      	lsls	r5, r5, #5
 8009ad0:	f8d8 6000 	ldr.w	r6, [r8]
 8009ad4:	1a2d      	subs	r5, r5, r0
 8009ad6:	42b5      	cmp	r5, r6
 8009ad8:	dd54      	ble.n	8009b84 <__gethex+0x228>
 8009ada:	1bad      	subs	r5, r5, r6
 8009adc:	4629      	mov	r1, r5
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f7fe fe41 	bl	8008766 <__any_on>
 8009ae4:	4681      	mov	r9, r0
 8009ae6:	b178      	cbz	r0, 8009b08 <__gethex+0x1ac>
 8009ae8:	f04f 0901 	mov.w	r9, #1
 8009aec:	1e6b      	subs	r3, r5, #1
 8009aee:	1159      	asrs	r1, r3, #5
 8009af0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009af4:	f003 021f 	and.w	r2, r3, #31
 8009af8:	fa09 f202 	lsl.w	r2, r9, r2
 8009afc:	420a      	tst	r2, r1
 8009afe:	d003      	beq.n	8009b08 <__gethex+0x1ac>
 8009b00:	454b      	cmp	r3, r9
 8009b02:	dc36      	bgt.n	8009b72 <__gethex+0x216>
 8009b04:	f04f 0902 	mov.w	r9, #2
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f7ff febd 	bl	800988a <rshift>
 8009b10:	442f      	add	r7, r5
 8009b12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b16:	42bb      	cmp	r3, r7
 8009b18:	da42      	bge.n	8009ba0 <__gethex+0x244>
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	9801      	ldr	r0, [sp, #4]
 8009b1e:	f7fe f9dd 	bl	8007edc <_Bfree>
 8009b22:	2300      	movs	r3, #0
 8009b24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b26:	25a3      	movs	r5, #163	@ 0xa3
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	e793      	b.n	8009a54 <__gethex+0xf8>
 8009b2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009b30:	2a2e      	cmp	r2, #46	@ 0x2e
 8009b32:	d012      	beq.n	8009b5a <__gethex+0x1fe>
 8009b34:	2b20      	cmp	r3, #32
 8009b36:	d104      	bne.n	8009b42 <__gethex+0x1e6>
 8009b38:	f845 bb04 	str.w	fp, [r5], #4
 8009b3c:	f04f 0b00 	mov.w	fp, #0
 8009b40:	465b      	mov	r3, fp
 8009b42:	7830      	ldrb	r0, [r6, #0]
 8009b44:	9303      	str	r3, [sp, #12]
 8009b46:	f7ff fef3 	bl	8009930 <__hexdig_fun>
 8009b4a:	9b03      	ldr	r3, [sp, #12]
 8009b4c:	f000 000f 	and.w	r0, r0, #15
 8009b50:	4098      	lsls	r0, r3
 8009b52:	ea4b 0b00 	orr.w	fp, fp, r0
 8009b56:	3304      	adds	r3, #4
 8009b58:	e7ae      	b.n	8009ab8 <__gethex+0x15c>
 8009b5a:	45b1      	cmp	r9, r6
 8009b5c:	d8ea      	bhi.n	8009b34 <__gethex+0x1d8>
 8009b5e:	2201      	movs	r2, #1
 8009b60:	4630      	mov	r0, r6
 8009b62:	492a      	ldr	r1, [pc, #168]	@ (8009c0c <__gethex+0x2b0>)
 8009b64:	9303      	str	r3, [sp, #12]
 8009b66:	f7ff fe4d 	bl	8009804 <strncmp>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d1e1      	bne.n	8009b34 <__gethex+0x1d8>
 8009b70:	e7a2      	b.n	8009ab8 <__gethex+0x15c>
 8009b72:	4620      	mov	r0, r4
 8009b74:	1ea9      	subs	r1, r5, #2
 8009b76:	f7fe fdf6 	bl	8008766 <__any_on>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d0c2      	beq.n	8009b04 <__gethex+0x1a8>
 8009b7e:	f04f 0903 	mov.w	r9, #3
 8009b82:	e7c1      	b.n	8009b08 <__gethex+0x1ac>
 8009b84:	da09      	bge.n	8009b9a <__gethex+0x23e>
 8009b86:	1b75      	subs	r5, r6, r5
 8009b88:	4621      	mov	r1, r4
 8009b8a:	462a      	mov	r2, r5
 8009b8c:	9801      	ldr	r0, [sp, #4]
 8009b8e:	f7fe fbbb 	bl	8008308 <__lshift>
 8009b92:	4604      	mov	r4, r0
 8009b94:	1b7f      	subs	r7, r7, r5
 8009b96:	f100 0a14 	add.w	sl, r0, #20
 8009b9a:	f04f 0900 	mov.w	r9, #0
 8009b9e:	e7b8      	b.n	8009b12 <__gethex+0x1b6>
 8009ba0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ba4:	42bd      	cmp	r5, r7
 8009ba6:	dd6f      	ble.n	8009c88 <__gethex+0x32c>
 8009ba8:	1bed      	subs	r5, r5, r7
 8009baa:	42ae      	cmp	r6, r5
 8009bac:	dc34      	bgt.n	8009c18 <__gethex+0x2bc>
 8009bae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d022      	beq.n	8009bfc <__gethex+0x2a0>
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d024      	beq.n	8009c04 <__gethex+0x2a8>
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d115      	bne.n	8009bea <__gethex+0x28e>
 8009bbe:	42ae      	cmp	r6, r5
 8009bc0:	d113      	bne.n	8009bea <__gethex+0x28e>
 8009bc2:	2e01      	cmp	r6, #1
 8009bc4:	d10b      	bne.n	8009bde <__gethex+0x282>
 8009bc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009bca:	9a02      	ldr	r2, [sp, #8]
 8009bcc:	2562      	movs	r5, #98	@ 0x62
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	6123      	str	r3, [r4, #16]
 8009bd4:	f8ca 3000 	str.w	r3, [sl]
 8009bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bda:	601c      	str	r4, [r3, #0]
 8009bdc:	e73a      	b.n	8009a54 <__gethex+0xf8>
 8009bde:	4620      	mov	r0, r4
 8009be0:	1e71      	subs	r1, r6, #1
 8009be2:	f7fe fdc0 	bl	8008766 <__any_on>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d1ed      	bne.n	8009bc6 <__gethex+0x26a>
 8009bea:	4621      	mov	r1, r4
 8009bec:	9801      	ldr	r0, [sp, #4]
 8009bee:	f7fe f975 	bl	8007edc <_Bfree>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bf6:	2550      	movs	r5, #80	@ 0x50
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	e72b      	b.n	8009a54 <__gethex+0xf8>
 8009bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1f3      	bne.n	8009bea <__gethex+0x28e>
 8009c02:	e7e0      	b.n	8009bc6 <__gethex+0x26a>
 8009c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1dd      	bne.n	8009bc6 <__gethex+0x26a>
 8009c0a:	e7ee      	b.n	8009bea <__gethex+0x28e>
 8009c0c:	0800c560 	.word	0x0800c560
 8009c10:	0800c3f8 	.word	0x0800c3f8
 8009c14:	0800c5d1 	.word	0x0800c5d1
 8009c18:	1e6f      	subs	r7, r5, #1
 8009c1a:	f1b9 0f00 	cmp.w	r9, #0
 8009c1e:	d130      	bne.n	8009c82 <__gethex+0x326>
 8009c20:	b127      	cbz	r7, 8009c2c <__gethex+0x2d0>
 8009c22:	4639      	mov	r1, r7
 8009c24:	4620      	mov	r0, r4
 8009c26:	f7fe fd9e 	bl	8008766 <__any_on>
 8009c2a:	4681      	mov	r9, r0
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4629      	mov	r1, r5
 8009c30:	1b76      	subs	r6, r6, r5
 8009c32:	2502      	movs	r5, #2
 8009c34:	117a      	asrs	r2, r7, #5
 8009c36:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009c3a:	f007 071f 	and.w	r7, r7, #31
 8009c3e:	40bb      	lsls	r3, r7
 8009c40:	4213      	tst	r3, r2
 8009c42:	4620      	mov	r0, r4
 8009c44:	bf18      	it	ne
 8009c46:	f049 0902 	orrne.w	r9, r9, #2
 8009c4a:	f7ff fe1e 	bl	800988a <rshift>
 8009c4e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009c52:	f1b9 0f00 	cmp.w	r9, #0
 8009c56:	d047      	beq.n	8009ce8 <__gethex+0x38c>
 8009c58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d015      	beq.n	8009c8c <__gethex+0x330>
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d017      	beq.n	8009c94 <__gethex+0x338>
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d109      	bne.n	8009c7c <__gethex+0x320>
 8009c68:	f019 0f02 	tst.w	r9, #2
 8009c6c:	d006      	beq.n	8009c7c <__gethex+0x320>
 8009c6e:	f8da 3000 	ldr.w	r3, [sl]
 8009c72:	ea49 0903 	orr.w	r9, r9, r3
 8009c76:	f019 0f01 	tst.w	r9, #1
 8009c7a:	d10e      	bne.n	8009c9a <__gethex+0x33e>
 8009c7c:	f045 0510 	orr.w	r5, r5, #16
 8009c80:	e032      	b.n	8009ce8 <__gethex+0x38c>
 8009c82:	f04f 0901 	mov.w	r9, #1
 8009c86:	e7d1      	b.n	8009c2c <__gethex+0x2d0>
 8009c88:	2501      	movs	r5, #1
 8009c8a:	e7e2      	b.n	8009c52 <__gethex+0x2f6>
 8009c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c8e:	f1c3 0301 	rsb	r3, r3, #1
 8009c92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d0f0      	beq.n	8009c7c <__gethex+0x320>
 8009c9a:	f04f 0c00 	mov.w	ip, #0
 8009c9e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ca2:	f104 0314 	add.w	r3, r4, #20
 8009ca6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009caa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009cb8:	d01b      	beq.n	8009cf2 <__gethex+0x396>
 8009cba:	3201      	adds	r2, #1
 8009cbc:	6002      	str	r2, [r0, #0]
 8009cbe:	2d02      	cmp	r5, #2
 8009cc0:	f104 0314 	add.w	r3, r4, #20
 8009cc4:	d13c      	bne.n	8009d40 <__gethex+0x3e4>
 8009cc6:	f8d8 2000 	ldr.w	r2, [r8]
 8009cca:	3a01      	subs	r2, #1
 8009ccc:	42b2      	cmp	r2, r6
 8009cce:	d109      	bne.n	8009ce4 <__gethex+0x388>
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	1171      	asrs	r1, r6, #5
 8009cd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cd8:	f006 061f 	and.w	r6, r6, #31
 8009cdc:	fa02 f606 	lsl.w	r6, r2, r6
 8009ce0:	421e      	tst	r6, r3
 8009ce2:	d13a      	bne.n	8009d5a <__gethex+0x3fe>
 8009ce4:	f045 0520 	orr.w	r5, r5, #32
 8009ce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cea:	601c      	str	r4, [r3, #0]
 8009cec:	9b02      	ldr	r3, [sp, #8]
 8009cee:	601f      	str	r7, [r3, #0]
 8009cf0:	e6b0      	b.n	8009a54 <__gethex+0xf8>
 8009cf2:	4299      	cmp	r1, r3
 8009cf4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009cf8:	d8d9      	bhi.n	8009cae <__gethex+0x352>
 8009cfa:	68a3      	ldr	r3, [r4, #8]
 8009cfc:	459b      	cmp	fp, r3
 8009cfe:	db17      	blt.n	8009d30 <__gethex+0x3d4>
 8009d00:	6861      	ldr	r1, [r4, #4]
 8009d02:	9801      	ldr	r0, [sp, #4]
 8009d04:	3101      	adds	r1, #1
 8009d06:	f7fe f8a9 	bl	8007e5c <_Balloc>
 8009d0a:	4681      	mov	r9, r0
 8009d0c:	b918      	cbnz	r0, 8009d16 <__gethex+0x3ba>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	2184      	movs	r1, #132	@ 0x84
 8009d12:	4b19      	ldr	r3, [pc, #100]	@ (8009d78 <__gethex+0x41c>)
 8009d14:	e6c5      	b.n	8009aa2 <__gethex+0x146>
 8009d16:	6922      	ldr	r2, [r4, #16]
 8009d18:	f104 010c 	add.w	r1, r4, #12
 8009d1c:	3202      	adds	r2, #2
 8009d1e:	0092      	lsls	r2, r2, #2
 8009d20:	300c      	adds	r0, #12
 8009d22:	f7fd f91c 	bl	8006f5e <memcpy>
 8009d26:	4621      	mov	r1, r4
 8009d28:	9801      	ldr	r0, [sp, #4]
 8009d2a:	f7fe f8d7 	bl	8007edc <_Bfree>
 8009d2e:	464c      	mov	r4, r9
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	1c5a      	adds	r2, r3, #1
 8009d34:	6122      	str	r2, [r4, #16]
 8009d36:	2201      	movs	r2, #1
 8009d38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d3c:	615a      	str	r2, [r3, #20]
 8009d3e:	e7be      	b.n	8009cbe <__gethex+0x362>
 8009d40:	6922      	ldr	r2, [r4, #16]
 8009d42:	455a      	cmp	r2, fp
 8009d44:	dd0b      	ble.n	8009d5e <__gethex+0x402>
 8009d46:	2101      	movs	r1, #1
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f7ff fd9e 	bl	800988a <rshift>
 8009d4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d52:	3701      	adds	r7, #1
 8009d54:	42bb      	cmp	r3, r7
 8009d56:	f6ff aee0 	blt.w	8009b1a <__gethex+0x1be>
 8009d5a:	2501      	movs	r5, #1
 8009d5c:	e7c2      	b.n	8009ce4 <__gethex+0x388>
 8009d5e:	f016 061f 	ands.w	r6, r6, #31
 8009d62:	d0fa      	beq.n	8009d5a <__gethex+0x3fe>
 8009d64:	4453      	add	r3, sl
 8009d66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d6a:	f7fe f969 	bl	8008040 <__hi0bits>
 8009d6e:	f1c6 0620 	rsb	r6, r6, #32
 8009d72:	42b0      	cmp	r0, r6
 8009d74:	dbe7      	blt.n	8009d46 <__gethex+0x3ea>
 8009d76:	e7f0      	b.n	8009d5a <__gethex+0x3fe>
 8009d78:	0800c3f8 	.word	0x0800c3f8

08009d7c <L_shift>:
 8009d7c:	f1c2 0208 	rsb	r2, r2, #8
 8009d80:	0092      	lsls	r2, r2, #2
 8009d82:	b570      	push	{r4, r5, r6, lr}
 8009d84:	f1c2 0620 	rsb	r6, r2, #32
 8009d88:	6843      	ldr	r3, [r0, #4]
 8009d8a:	6804      	ldr	r4, [r0, #0]
 8009d8c:	fa03 f506 	lsl.w	r5, r3, r6
 8009d90:	432c      	orrs	r4, r5
 8009d92:	40d3      	lsrs	r3, r2
 8009d94:	6004      	str	r4, [r0, #0]
 8009d96:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d9a:	4288      	cmp	r0, r1
 8009d9c:	d3f4      	bcc.n	8009d88 <L_shift+0xc>
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}

08009da0 <__match>:
 8009da0:	b530      	push	{r4, r5, lr}
 8009da2:	6803      	ldr	r3, [r0, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009daa:	b914      	cbnz	r4, 8009db2 <__match+0x12>
 8009dac:	6003      	str	r3, [r0, #0]
 8009dae:	2001      	movs	r0, #1
 8009db0:	bd30      	pop	{r4, r5, pc}
 8009db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009db6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009dba:	2d19      	cmp	r5, #25
 8009dbc:	bf98      	it	ls
 8009dbe:	3220      	addls	r2, #32
 8009dc0:	42a2      	cmp	r2, r4
 8009dc2:	d0f0      	beq.n	8009da6 <__match+0x6>
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e7f3      	b.n	8009db0 <__match+0x10>

08009dc8 <__hexnan>:
 8009dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dcc:	2500      	movs	r5, #0
 8009dce:	680b      	ldr	r3, [r1, #0]
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	115e      	asrs	r6, r3, #5
 8009dd4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009dd8:	f013 031f 	ands.w	r3, r3, #31
 8009ddc:	bf18      	it	ne
 8009dde:	3604      	addne	r6, #4
 8009de0:	1f37      	subs	r7, r6, #4
 8009de2:	4690      	mov	r8, r2
 8009de4:	46b9      	mov	r9, r7
 8009de6:	463c      	mov	r4, r7
 8009de8:	46ab      	mov	fp, r5
 8009dea:	b087      	sub	sp, #28
 8009dec:	6801      	ldr	r1, [r0, #0]
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	f846 5c04 	str.w	r5, [r6, #-4]
 8009df4:	9502      	str	r5, [sp, #8]
 8009df6:	784a      	ldrb	r2, [r1, #1]
 8009df8:	1c4b      	adds	r3, r1, #1
 8009dfa:	9303      	str	r3, [sp, #12]
 8009dfc:	b342      	cbz	r2, 8009e50 <__hexnan+0x88>
 8009dfe:	4610      	mov	r0, r2
 8009e00:	9105      	str	r1, [sp, #20]
 8009e02:	9204      	str	r2, [sp, #16]
 8009e04:	f7ff fd94 	bl	8009930 <__hexdig_fun>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d151      	bne.n	8009eb0 <__hexnan+0xe8>
 8009e0c:	9a04      	ldr	r2, [sp, #16]
 8009e0e:	9905      	ldr	r1, [sp, #20]
 8009e10:	2a20      	cmp	r2, #32
 8009e12:	d818      	bhi.n	8009e46 <__hexnan+0x7e>
 8009e14:	9b02      	ldr	r3, [sp, #8]
 8009e16:	459b      	cmp	fp, r3
 8009e18:	dd13      	ble.n	8009e42 <__hexnan+0x7a>
 8009e1a:	454c      	cmp	r4, r9
 8009e1c:	d206      	bcs.n	8009e2c <__hexnan+0x64>
 8009e1e:	2d07      	cmp	r5, #7
 8009e20:	dc04      	bgt.n	8009e2c <__hexnan+0x64>
 8009e22:	462a      	mov	r2, r5
 8009e24:	4649      	mov	r1, r9
 8009e26:	4620      	mov	r0, r4
 8009e28:	f7ff ffa8 	bl	8009d7c <L_shift>
 8009e2c:	4544      	cmp	r4, r8
 8009e2e:	d952      	bls.n	8009ed6 <__hexnan+0x10e>
 8009e30:	2300      	movs	r3, #0
 8009e32:	f1a4 0904 	sub.w	r9, r4, #4
 8009e36:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e3a:	461d      	mov	r5, r3
 8009e3c:	464c      	mov	r4, r9
 8009e3e:	f8cd b008 	str.w	fp, [sp, #8]
 8009e42:	9903      	ldr	r1, [sp, #12]
 8009e44:	e7d7      	b.n	8009df6 <__hexnan+0x2e>
 8009e46:	2a29      	cmp	r2, #41	@ 0x29
 8009e48:	d157      	bne.n	8009efa <__hexnan+0x132>
 8009e4a:	3102      	adds	r1, #2
 8009e4c:	f8ca 1000 	str.w	r1, [sl]
 8009e50:	f1bb 0f00 	cmp.w	fp, #0
 8009e54:	d051      	beq.n	8009efa <__hexnan+0x132>
 8009e56:	454c      	cmp	r4, r9
 8009e58:	d206      	bcs.n	8009e68 <__hexnan+0xa0>
 8009e5a:	2d07      	cmp	r5, #7
 8009e5c:	dc04      	bgt.n	8009e68 <__hexnan+0xa0>
 8009e5e:	462a      	mov	r2, r5
 8009e60:	4649      	mov	r1, r9
 8009e62:	4620      	mov	r0, r4
 8009e64:	f7ff ff8a 	bl	8009d7c <L_shift>
 8009e68:	4544      	cmp	r4, r8
 8009e6a:	d936      	bls.n	8009eda <__hexnan+0x112>
 8009e6c:	4623      	mov	r3, r4
 8009e6e:	f1a8 0204 	sub.w	r2, r8, #4
 8009e72:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e76:	429f      	cmp	r7, r3
 8009e78:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e7c:	d2f9      	bcs.n	8009e72 <__hexnan+0xaa>
 8009e7e:	1b3b      	subs	r3, r7, r4
 8009e80:	f023 0303 	bic.w	r3, r3, #3
 8009e84:	3304      	adds	r3, #4
 8009e86:	3401      	adds	r4, #1
 8009e88:	3e03      	subs	r6, #3
 8009e8a:	42b4      	cmp	r4, r6
 8009e8c:	bf88      	it	hi
 8009e8e:	2304      	movhi	r3, #4
 8009e90:	2200      	movs	r2, #0
 8009e92:	4443      	add	r3, r8
 8009e94:	f843 2b04 	str.w	r2, [r3], #4
 8009e98:	429f      	cmp	r7, r3
 8009e9a:	d2fb      	bcs.n	8009e94 <__hexnan+0xcc>
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	b91b      	cbnz	r3, 8009ea8 <__hexnan+0xe0>
 8009ea0:	4547      	cmp	r7, r8
 8009ea2:	d128      	bne.n	8009ef6 <__hexnan+0x12e>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	603b      	str	r3, [r7, #0]
 8009ea8:	2005      	movs	r0, #5
 8009eaa:	b007      	add	sp, #28
 8009eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb0:	3501      	adds	r5, #1
 8009eb2:	2d08      	cmp	r5, #8
 8009eb4:	f10b 0b01 	add.w	fp, fp, #1
 8009eb8:	dd06      	ble.n	8009ec8 <__hexnan+0x100>
 8009eba:	4544      	cmp	r4, r8
 8009ebc:	d9c1      	bls.n	8009e42 <__hexnan+0x7a>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2501      	movs	r5, #1
 8009ec2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ec6:	3c04      	subs	r4, #4
 8009ec8:	6822      	ldr	r2, [r4, #0]
 8009eca:	f000 000f 	and.w	r0, r0, #15
 8009ece:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009ed2:	6020      	str	r0, [r4, #0]
 8009ed4:	e7b5      	b.n	8009e42 <__hexnan+0x7a>
 8009ed6:	2508      	movs	r5, #8
 8009ed8:	e7b3      	b.n	8009e42 <__hexnan+0x7a>
 8009eda:	9b01      	ldr	r3, [sp, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d0dd      	beq.n	8009e9c <__hexnan+0xd4>
 8009ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee4:	f1c3 0320 	rsb	r3, r3, #32
 8009ee8:	40da      	lsrs	r2, r3
 8009eea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009eee:	4013      	ands	r3, r2
 8009ef0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ef4:	e7d2      	b.n	8009e9c <__hexnan+0xd4>
 8009ef6:	3f04      	subs	r7, #4
 8009ef8:	e7d0      	b.n	8009e9c <__hexnan+0xd4>
 8009efa:	2004      	movs	r0, #4
 8009efc:	e7d5      	b.n	8009eaa <__hexnan+0xe2>

08009efe <__ascii_mbtowc>:
 8009efe:	b082      	sub	sp, #8
 8009f00:	b901      	cbnz	r1, 8009f04 <__ascii_mbtowc+0x6>
 8009f02:	a901      	add	r1, sp, #4
 8009f04:	b142      	cbz	r2, 8009f18 <__ascii_mbtowc+0x1a>
 8009f06:	b14b      	cbz	r3, 8009f1c <__ascii_mbtowc+0x1e>
 8009f08:	7813      	ldrb	r3, [r2, #0]
 8009f0a:	600b      	str	r3, [r1, #0]
 8009f0c:	7812      	ldrb	r2, [r2, #0]
 8009f0e:	1e10      	subs	r0, r2, #0
 8009f10:	bf18      	it	ne
 8009f12:	2001      	movne	r0, #1
 8009f14:	b002      	add	sp, #8
 8009f16:	4770      	bx	lr
 8009f18:	4610      	mov	r0, r2
 8009f1a:	e7fb      	b.n	8009f14 <__ascii_mbtowc+0x16>
 8009f1c:	f06f 0001 	mvn.w	r0, #1
 8009f20:	e7f8      	b.n	8009f14 <__ascii_mbtowc+0x16>

08009f22 <_realloc_r>:
 8009f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f26:	4680      	mov	r8, r0
 8009f28:	4615      	mov	r5, r2
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	b921      	cbnz	r1, 8009f38 <_realloc_r+0x16>
 8009f2e:	4611      	mov	r1, r2
 8009f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f34:	f7fd bf06 	b.w	8007d44 <_malloc_r>
 8009f38:	b92a      	cbnz	r2, 8009f46 <_realloc_r+0x24>
 8009f3a:	f7fd fe91 	bl	8007c60 <_free_r>
 8009f3e:	2400      	movs	r4, #0
 8009f40:	4620      	mov	r0, r4
 8009f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f46:	f000 fa3f 	bl	800a3c8 <_malloc_usable_size_r>
 8009f4a:	4285      	cmp	r5, r0
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	d802      	bhi.n	8009f56 <_realloc_r+0x34>
 8009f50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009f54:	d8f4      	bhi.n	8009f40 <_realloc_r+0x1e>
 8009f56:	4629      	mov	r1, r5
 8009f58:	4640      	mov	r0, r8
 8009f5a:	f7fd fef3 	bl	8007d44 <_malloc_r>
 8009f5e:	4607      	mov	r7, r0
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d0ec      	beq.n	8009f3e <_realloc_r+0x1c>
 8009f64:	42b5      	cmp	r5, r6
 8009f66:	462a      	mov	r2, r5
 8009f68:	4621      	mov	r1, r4
 8009f6a:	bf28      	it	cs
 8009f6c:	4632      	movcs	r2, r6
 8009f6e:	f7fc fff6 	bl	8006f5e <memcpy>
 8009f72:	4621      	mov	r1, r4
 8009f74:	4640      	mov	r0, r8
 8009f76:	f7fd fe73 	bl	8007c60 <_free_r>
 8009f7a:	463c      	mov	r4, r7
 8009f7c:	e7e0      	b.n	8009f40 <_realloc_r+0x1e>

08009f7e <__ascii_wctomb>:
 8009f7e:	4603      	mov	r3, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	b141      	cbz	r1, 8009f96 <__ascii_wctomb+0x18>
 8009f84:	2aff      	cmp	r2, #255	@ 0xff
 8009f86:	d904      	bls.n	8009f92 <__ascii_wctomb+0x14>
 8009f88:	228a      	movs	r2, #138	@ 0x8a
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	4770      	bx	lr
 8009f92:	2001      	movs	r0, #1
 8009f94:	700a      	strb	r2, [r1, #0]
 8009f96:	4770      	bx	lr

08009f98 <__sfputc_r>:
 8009f98:	6893      	ldr	r3, [r2, #8]
 8009f9a:	b410      	push	{r4}
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	6093      	str	r3, [r2, #8]
 8009fa2:	da07      	bge.n	8009fb4 <__sfputc_r+0x1c>
 8009fa4:	6994      	ldr	r4, [r2, #24]
 8009fa6:	42a3      	cmp	r3, r4
 8009fa8:	db01      	blt.n	8009fae <__sfputc_r+0x16>
 8009faa:	290a      	cmp	r1, #10
 8009fac:	d102      	bne.n	8009fb4 <__sfputc_r+0x1c>
 8009fae:	bc10      	pop	{r4}
 8009fb0:	f000 b932 	b.w	800a218 <__swbuf_r>
 8009fb4:	6813      	ldr	r3, [r2, #0]
 8009fb6:	1c58      	adds	r0, r3, #1
 8009fb8:	6010      	str	r0, [r2, #0]
 8009fba:	7019      	strb	r1, [r3, #0]
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	bc10      	pop	{r4}
 8009fc0:	4770      	bx	lr

08009fc2 <__sfputs_r>:
 8009fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	460f      	mov	r7, r1
 8009fc8:	4614      	mov	r4, r2
 8009fca:	18d5      	adds	r5, r2, r3
 8009fcc:	42ac      	cmp	r4, r5
 8009fce:	d101      	bne.n	8009fd4 <__sfputs_r+0x12>
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	e007      	b.n	8009fe4 <__sfputs_r+0x22>
 8009fd4:	463a      	mov	r2, r7
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fdc:	f7ff ffdc 	bl	8009f98 <__sfputc_r>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d1f3      	bne.n	8009fcc <__sfputs_r+0xa>
 8009fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fe8 <_vfiprintf_r>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	460d      	mov	r5, r1
 8009fee:	4614      	mov	r4, r2
 8009ff0:	4698      	mov	r8, r3
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	b09d      	sub	sp, #116	@ 0x74
 8009ff6:	b118      	cbz	r0, 800a000 <_vfiprintf_r+0x18>
 8009ff8:	6a03      	ldr	r3, [r0, #32]
 8009ffa:	b90b      	cbnz	r3, 800a000 <_vfiprintf_r+0x18>
 8009ffc:	f7fc fdea 	bl	8006bd4 <__sinit>
 800a000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a002:	07d9      	lsls	r1, r3, #31
 800a004:	d405      	bmi.n	800a012 <_vfiprintf_r+0x2a>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	059a      	lsls	r2, r3, #22
 800a00a:	d402      	bmi.n	800a012 <_vfiprintf_r+0x2a>
 800a00c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a00e:	f7fc ff8e 	bl	8006f2e <__retarget_lock_acquire_recursive>
 800a012:	89ab      	ldrh	r3, [r5, #12]
 800a014:	071b      	lsls	r3, r3, #28
 800a016:	d501      	bpl.n	800a01c <_vfiprintf_r+0x34>
 800a018:	692b      	ldr	r3, [r5, #16]
 800a01a:	b99b      	cbnz	r3, 800a044 <_vfiprintf_r+0x5c>
 800a01c:	4629      	mov	r1, r5
 800a01e:	4630      	mov	r0, r6
 800a020:	f000 f938 	bl	800a294 <__swsetup_r>
 800a024:	b170      	cbz	r0, 800a044 <_vfiprintf_r+0x5c>
 800a026:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a028:	07dc      	lsls	r4, r3, #31
 800a02a:	d504      	bpl.n	800a036 <_vfiprintf_r+0x4e>
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295
 800a030:	b01d      	add	sp, #116	@ 0x74
 800a032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a036:	89ab      	ldrh	r3, [r5, #12]
 800a038:	0598      	lsls	r0, r3, #22
 800a03a:	d4f7      	bmi.n	800a02c <_vfiprintf_r+0x44>
 800a03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a03e:	f7fc ff77 	bl	8006f30 <__retarget_lock_release_recursive>
 800a042:	e7f3      	b.n	800a02c <_vfiprintf_r+0x44>
 800a044:	2300      	movs	r3, #0
 800a046:	9309      	str	r3, [sp, #36]	@ 0x24
 800a048:	2320      	movs	r3, #32
 800a04a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a04e:	2330      	movs	r3, #48	@ 0x30
 800a050:	f04f 0901 	mov.w	r9, #1
 800a054:	f8cd 800c 	str.w	r8, [sp, #12]
 800a058:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a204 <_vfiprintf_r+0x21c>
 800a05c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a060:	4623      	mov	r3, r4
 800a062:	469a      	mov	sl, r3
 800a064:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a068:	b10a      	cbz	r2, 800a06e <_vfiprintf_r+0x86>
 800a06a:	2a25      	cmp	r2, #37	@ 0x25
 800a06c:	d1f9      	bne.n	800a062 <_vfiprintf_r+0x7a>
 800a06e:	ebba 0b04 	subs.w	fp, sl, r4
 800a072:	d00b      	beq.n	800a08c <_vfiprintf_r+0xa4>
 800a074:	465b      	mov	r3, fp
 800a076:	4622      	mov	r2, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff ffa1 	bl	8009fc2 <__sfputs_r>
 800a080:	3001      	adds	r0, #1
 800a082:	f000 80a7 	beq.w	800a1d4 <_vfiprintf_r+0x1ec>
 800a086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a088:	445a      	add	r2, fp
 800a08a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a08c:	f89a 3000 	ldrb.w	r3, [sl]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 809f 	beq.w	800a1d4 <_vfiprintf_r+0x1ec>
 800a096:	2300      	movs	r3, #0
 800a098:	f04f 32ff 	mov.w	r2, #4294967295
 800a09c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0a0:	f10a 0a01 	add.w	sl, sl, #1
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	9307      	str	r3, [sp, #28]
 800a0a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0ae:	4654      	mov	r4, sl
 800a0b0:	2205      	movs	r2, #5
 800a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b6:	4853      	ldr	r0, [pc, #332]	@ (800a204 <_vfiprintf_r+0x21c>)
 800a0b8:	f7fc ff43 	bl	8006f42 <memchr>
 800a0bc:	9a04      	ldr	r2, [sp, #16]
 800a0be:	b9d8      	cbnz	r0, 800a0f8 <_vfiprintf_r+0x110>
 800a0c0:	06d1      	lsls	r1, r2, #27
 800a0c2:	bf44      	itt	mi
 800a0c4:	2320      	movmi	r3, #32
 800a0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0ca:	0713      	lsls	r3, r2, #28
 800a0cc:	bf44      	itt	mi
 800a0ce:	232b      	movmi	r3, #43	@ 0x2b
 800a0d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0da:	d015      	beq.n	800a108 <_vfiprintf_r+0x120>
 800a0dc:	4654      	mov	r4, sl
 800a0de:	2000      	movs	r0, #0
 800a0e0:	f04f 0c0a 	mov.w	ip, #10
 800a0e4:	9a07      	ldr	r2, [sp, #28]
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ec:	3b30      	subs	r3, #48	@ 0x30
 800a0ee:	2b09      	cmp	r3, #9
 800a0f0:	d94b      	bls.n	800a18a <_vfiprintf_r+0x1a2>
 800a0f2:	b1b0      	cbz	r0, 800a122 <_vfiprintf_r+0x13a>
 800a0f4:	9207      	str	r2, [sp, #28]
 800a0f6:	e014      	b.n	800a122 <_vfiprintf_r+0x13a>
 800a0f8:	eba0 0308 	sub.w	r3, r0, r8
 800a0fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a100:	4313      	orrs	r3, r2
 800a102:	46a2      	mov	sl, r4
 800a104:	9304      	str	r3, [sp, #16]
 800a106:	e7d2      	b.n	800a0ae <_vfiprintf_r+0xc6>
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	1d19      	adds	r1, r3, #4
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	9103      	str	r1, [sp, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bfbb      	ittet	lt
 800a114:	425b      	neglt	r3, r3
 800a116:	f042 0202 	orrlt.w	r2, r2, #2
 800a11a:	9307      	strge	r3, [sp, #28]
 800a11c:	9307      	strlt	r3, [sp, #28]
 800a11e:	bfb8      	it	lt
 800a120:	9204      	strlt	r2, [sp, #16]
 800a122:	7823      	ldrb	r3, [r4, #0]
 800a124:	2b2e      	cmp	r3, #46	@ 0x2e
 800a126:	d10a      	bne.n	800a13e <_vfiprintf_r+0x156>
 800a128:	7863      	ldrb	r3, [r4, #1]
 800a12a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a12c:	d132      	bne.n	800a194 <_vfiprintf_r+0x1ac>
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	3402      	adds	r4, #2
 800a132:	1d1a      	adds	r2, r3, #4
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	9203      	str	r2, [sp, #12]
 800a138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a13c:	9305      	str	r3, [sp, #20]
 800a13e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a208 <_vfiprintf_r+0x220>
 800a142:	2203      	movs	r2, #3
 800a144:	4650      	mov	r0, sl
 800a146:	7821      	ldrb	r1, [r4, #0]
 800a148:	f7fc fefb 	bl	8006f42 <memchr>
 800a14c:	b138      	cbz	r0, 800a15e <_vfiprintf_r+0x176>
 800a14e:	2240      	movs	r2, #64	@ 0x40
 800a150:	9b04      	ldr	r3, [sp, #16]
 800a152:	eba0 000a 	sub.w	r0, r0, sl
 800a156:	4082      	lsls	r2, r0
 800a158:	4313      	orrs	r3, r2
 800a15a:	3401      	adds	r4, #1
 800a15c:	9304      	str	r3, [sp, #16]
 800a15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a162:	2206      	movs	r2, #6
 800a164:	4829      	ldr	r0, [pc, #164]	@ (800a20c <_vfiprintf_r+0x224>)
 800a166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a16a:	f7fc feea 	bl	8006f42 <memchr>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d03f      	beq.n	800a1f2 <_vfiprintf_r+0x20a>
 800a172:	4b27      	ldr	r3, [pc, #156]	@ (800a210 <_vfiprintf_r+0x228>)
 800a174:	bb1b      	cbnz	r3, 800a1be <_vfiprintf_r+0x1d6>
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	3307      	adds	r3, #7
 800a17a:	f023 0307 	bic.w	r3, r3, #7
 800a17e:	3308      	adds	r3, #8
 800a180:	9303      	str	r3, [sp, #12]
 800a182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a184:	443b      	add	r3, r7
 800a186:	9309      	str	r3, [sp, #36]	@ 0x24
 800a188:	e76a      	b.n	800a060 <_vfiprintf_r+0x78>
 800a18a:	460c      	mov	r4, r1
 800a18c:	2001      	movs	r0, #1
 800a18e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a192:	e7a8      	b.n	800a0e6 <_vfiprintf_r+0xfe>
 800a194:	2300      	movs	r3, #0
 800a196:	f04f 0c0a 	mov.w	ip, #10
 800a19a:	4619      	mov	r1, r3
 800a19c:	3401      	adds	r4, #1
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1a6:	3a30      	subs	r2, #48	@ 0x30
 800a1a8:	2a09      	cmp	r2, #9
 800a1aa:	d903      	bls.n	800a1b4 <_vfiprintf_r+0x1cc>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d0c6      	beq.n	800a13e <_vfiprintf_r+0x156>
 800a1b0:	9105      	str	r1, [sp, #20]
 800a1b2:	e7c4      	b.n	800a13e <_vfiprintf_r+0x156>
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1bc:	e7f0      	b.n	800a1a0 <_vfiprintf_r+0x1b8>
 800a1be:	ab03      	add	r3, sp, #12
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	462a      	mov	r2, r5
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	4b13      	ldr	r3, [pc, #76]	@ (800a214 <_vfiprintf_r+0x22c>)
 800a1c8:	a904      	add	r1, sp, #16
 800a1ca:	f7fb fea9 	bl	8005f20 <_printf_float>
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	1c78      	adds	r0, r7, #1
 800a1d2:	d1d6      	bne.n	800a182 <_vfiprintf_r+0x19a>
 800a1d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1d6:	07d9      	lsls	r1, r3, #31
 800a1d8:	d405      	bmi.n	800a1e6 <_vfiprintf_r+0x1fe>
 800a1da:	89ab      	ldrh	r3, [r5, #12]
 800a1dc:	059a      	lsls	r2, r3, #22
 800a1de:	d402      	bmi.n	800a1e6 <_vfiprintf_r+0x1fe>
 800a1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1e2:	f7fc fea5 	bl	8006f30 <__retarget_lock_release_recursive>
 800a1e6:	89ab      	ldrh	r3, [r5, #12]
 800a1e8:	065b      	lsls	r3, r3, #25
 800a1ea:	f53f af1f 	bmi.w	800a02c <_vfiprintf_r+0x44>
 800a1ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1f0:	e71e      	b.n	800a030 <_vfiprintf_r+0x48>
 800a1f2:	ab03      	add	r3, sp, #12
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	462a      	mov	r2, r5
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4b06      	ldr	r3, [pc, #24]	@ (800a214 <_vfiprintf_r+0x22c>)
 800a1fc:	a904      	add	r1, sp, #16
 800a1fe:	f7fc f92d 	bl	800645c <_printf_i>
 800a202:	e7e4      	b.n	800a1ce <_vfiprintf_r+0x1e6>
 800a204:	0800c5b8 	.word	0x0800c5b8
 800a208:	0800c5be 	.word	0x0800c5be
 800a20c:	0800c5c2 	.word	0x0800c5c2
 800a210:	08005f21 	.word	0x08005f21
 800a214:	08009fc3 	.word	0x08009fc3

0800a218 <__swbuf_r>:
 800a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21a:	460e      	mov	r6, r1
 800a21c:	4614      	mov	r4, r2
 800a21e:	4605      	mov	r5, r0
 800a220:	b118      	cbz	r0, 800a22a <__swbuf_r+0x12>
 800a222:	6a03      	ldr	r3, [r0, #32]
 800a224:	b90b      	cbnz	r3, 800a22a <__swbuf_r+0x12>
 800a226:	f7fc fcd5 	bl	8006bd4 <__sinit>
 800a22a:	69a3      	ldr	r3, [r4, #24]
 800a22c:	60a3      	str	r3, [r4, #8]
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	071a      	lsls	r2, r3, #28
 800a232:	d501      	bpl.n	800a238 <__swbuf_r+0x20>
 800a234:	6923      	ldr	r3, [r4, #16]
 800a236:	b943      	cbnz	r3, 800a24a <__swbuf_r+0x32>
 800a238:	4621      	mov	r1, r4
 800a23a:	4628      	mov	r0, r5
 800a23c:	f000 f82a 	bl	800a294 <__swsetup_r>
 800a240:	b118      	cbz	r0, 800a24a <__swbuf_r+0x32>
 800a242:	f04f 37ff 	mov.w	r7, #4294967295
 800a246:	4638      	mov	r0, r7
 800a248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	6922      	ldr	r2, [r4, #16]
 800a24e:	b2f6      	uxtb	r6, r6
 800a250:	1a98      	subs	r0, r3, r2
 800a252:	6963      	ldr	r3, [r4, #20]
 800a254:	4637      	mov	r7, r6
 800a256:	4283      	cmp	r3, r0
 800a258:	dc05      	bgt.n	800a266 <__swbuf_r+0x4e>
 800a25a:	4621      	mov	r1, r4
 800a25c:	4628      	mov	r0, r5
 800a25e:	f7ff fa7d 	bl	800975c <_fflush_r>
 800a262:	2800      	cmp	r0, #0
 800a264:	d1ed      	bne.n	800a242 <__swbuf_r+0x2a>
 800a266:	68a3      	ldr	r3, [r4, #8]
 800a268:	3b01      	subs	r3, #1
 800a26a:	60a3      	str	r3, [r4, #8]
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	6022      	str	r2, [r4, #0]
 800a272:	701e      	strb	r6, [r3, #0]
 800a274:	6962      	ldr	r2, [r4, #20]
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	429a      	cmp	r2, r3
 800a27a:	d004      	beq.n	800a286 <__swbuf_r+0x6e>
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	07db      	lsls	r3, r3, #31
 800a280:	d5e1      	bpl.n	800a246 <__swbuf_r+0x2e>
 800a282:	2e0a      	cmp	r6, #10
 800a284:	d1df      	bne.n	800a246 <__swbuf_r+0x2e>
 800a286:	4621      	mov	r1, r4
 800a288:	4628      	mov	r0, r5
 800a28a:	f7ff fa67 	bl	800975c <_fflush_r>
 800a28e:	2800      	cmp	r0, #0
 800a290:	d0d9      	beq.n	800a246 <__swbuf_r+0x2e>
 800a292:	e7d6      	b.n	800a242 <__swbuf_r+0x2a>

0800a294 <__swsetup_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4b29      	ldr	r3, [pc, #164]	@ (800a33c <__swsetup_r+0xa8>)
 800a298:	4605      	mov	r5, r0
 800a29a:	6818      	ldr	r0, [r3, #0]
 800a29c:	460c      	mov	r4, r1
 800a29e:	b118      	cbz	r0, 800a2a8 <__swsetup_r+0x14>
 800a2a0:	6a03      	ldr	r3, [r0, #32]
 800a2a2:	b90b      	cbnz	r3, 800a2a8 <__swsetup_r+0x14>
 800a2a4:	f7fc fc96 	bl	8006bd4 <__sinit>
 800a2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ac:	0719      	lsls	r1, r3, #28
 800a2ae:	d422      	bmi.n	800a2f6 <__swsetup_r+0x62>
 800a2b0:	06da      	lsls	r2, r3, #27
 800a2b2:	d407      	bmi.n	800a2c4 <__swsetup_r+0x30>
 800a2b4:	2209      	movs	r2, #9
 800a2b6:	602a      	str	r2, [r5, #0]
 800a2b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	81a3      	strh	r3, [r4, #12]
 800a2c2:	e033      	b.n	800a32c <__swsetup_r+0x98>
 800a2c4:	0758      	lsls	r0, r3, #29
 800a2c6:	d512      	bpl.n	800a2ee <__swsetup_r+0x5a>
 800a2c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2ca:	b141      	cbz	r1, 800a2de <__swsetup_r+0x4a>
 800a2cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2d0:	4299      	cmp	r1, r3
 800a2d2:	d002      	beq.n	800a2da <__swsetup_r+0x46>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f7fd fcc3 	bl	8007c60 <_free_r>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	6063      	str	r3, [r4, #4]
 800a2ea:	6923      	ldr	r3, [r4, #16]
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f043 0308 	orr.w	r3, r3, #8
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	b94b      	cbnz	r3, 800a30e <__swsetup_r+0x7a>
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a304:	d003      	beq.n	800a30e <__swsetup_r+0x7a>
 800a306:	4621      	mov	r1, r4
 800a308:	4628      	mov	r0, r5
 800a30a:	f000 f88a 	bl	800a422 <__smakebuf_r>
 800a30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a312:	f013 0201 	ands.w	r2, r3, #1
 800a316:	d00a      	beq.n	800a32e <__swsetup_r+0x9a>
 800a318:	2200      	movs	r2, #0
 800a31a:	60a2      	str	r2, [r4, #8]
 800a31c:	6962      	ldr	r2, [r4, #20]
 800a31e:	4252      	negs	r2, r2
 800a320:	61a2      	str	r2, [r4, #24]
 800a322:	6922      	ldr	r2, [r4, #16]
 800a324:	b942      	cbnz	r2, 800a338 <__swsetup_r+0xa4>
 800a326:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a32a:	d1c5      	bne.n	800a2b8 <__swsetup_r+0x24>
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
 800a32e:	0799      	lsls	r1, r3, #30
 800a330:	bf58      	it	pl
 800a332:	6962      	ldrpl	r2, [r4, #20]
 800a334:	60a2      	str	r2, [r4, #8]
 800a336:	e7f4      	b.n	800a322 <__swsetup_r+0x8e>
 800a338:	2000      	movs	r0, #0
 800a33a:	e7f7      	b.n	800a32c <__swsetup_r+0x98>
 800a33c:	20000114 	.word	0x20000114

0800a340 <_raise_r>:
 800a340:	291f      	cmp	r1, #31
 800a342:	b538      	push	{r3, r4, r5, lr}
 800a344:	4605      	mov	r5, r0
 800a346:	460c      	mov	r4, r1
 800a348:	d904      	bls.n	800a354 <_raise_r+0x14>
 800a34a:	2316      	movs	r3, #22
 800a34c:	6003      	str	r3, [r0, #0]
 800a34e:	f04f 30ff 	mov.w	r0, #4294967295
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a356:	b112      	cbz	r2, 800a35e <_raise_r+0x1e>
 800a358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a35c:	b94b      	cbnz	r3, 800a372 <_raise_r+0x32>
 800a35e:	4628      	mov	r0, r5
 800a360:	f000 f830 	bl	800a3c4 <_getpid_r>
 800a364:	4622      	mov	r2, r4
 800a366:	4601      	mov	r1, r0
 800a368:	4628      	mov	r0, r5
 800a36a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a36e:	f000 b817 	b.w	800a3a0 <_kill_r>
 800a372:	2b01      	cmp	r3, #1
 800a374:	d00a      	beq.n	800a38c <_raise_r+0x4c>
 800a376:	1c59      	adds	r1, r3, #1
 800a378:	d103      	bne.n	800a382 <_raise_r+0x42>
 800a37a:	2316      	movs	r3, #22
 800a37c:	6003      	str	r3, [r0, #0]
 800a37e:	2001      	movs	r0, #1
 800a380:	e7e7      	b.n	800a352 <_raise_r+0x12>
 800a382:	2100      	movs	r1, #0
 800a384:	4620      	mov	r0, r4
 800a386:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a38a:	4798      	blx	r3
 800a38c:	2000      	movs	r0, #0
 800a38e:	e7e0      	b.n	800a352 <_raise_r+0x12>

0800a390 <raise>:
 800a390:	4b02      	ldr	r3, [pc, #8]	@ (800a39c <raise+0xc>)
 800a392:	4601      	mov	r1, r0
 800a394:	6818      	ldr	r0, [r3, #0]
 800a396:	f7ff bfd3 	b.w	800a340 <_raise_r>
 800a39a:	bf00      	nop
 800a39c:	20000114 	.word	0x20000114

0800a3a0 <_kill_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	4d06      	ldr	r5, [pc, #24]	@ (800a3c0 <_kill_r+0x20>)
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	602b      	str	r3, [r5, #0]
 800a3ae:	f7f8 fdc7 	bl	8002f40 <_kill>
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	d102      	bne.n	800a3bc <_kill_r+0x1c>
 800a3b6:	682b      	ldr	r3, [r5, #0]
 800a3b8:	b103      	cbz	r3, 800a3bc <_kill_r+0x1c>
 800a3ba:	6023      	str	r3, [r4, #0]
 800a3bc:	bd38      	pop	{r3, r4, r5, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000c00 	.word	0x20000c00

0800a3c4 <_getpid_r>:
 800a3c4:	f7f8 bdba 	b.w	8002f3c <_getpid>

0800a3c8 <_malloc_usable_size_r>:
 800a3c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3cc:	1f18      	subs	r0, r3, #4
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bfbc      	itt	lt
 800a3d2:	580b      	ldrlt	r3, [r1, r0]
 800a3d4:	18c0      	addlt	r0, r0, r3
 800a3d6:	4770      	bx	lr

0800a3d8 <__swhatbuf_r>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	460c      	mov	r4, r1
 800a3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e0:	4615      	mov	r5, r2
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	461e      	mov	r6, r3
 800a3e6:	b096      	sub	sp, #88	@ 0x58
 800a3e8:	da0c      	bge.n	800a404 <__swhatbuf_r+0x2c>
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3f2:	bf14      	ite	ne
 800a3f4:	2340      	movne	r3, #64	@ 0x40
 800a3f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	6031      	str	r1, [r6, #0]
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	b016      	add	sp, #88	@ 0x58
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	466a      	mov	r2, sp
 800a406:	f000 f849 	bl	800a49c <_fstat_r>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	dbed      	blt.n	800a3ea <__swhatbuf_r+0x12>
 800a40e:	9901      	ldr	r1, [sp, #4]
 800a410:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a414:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a418:	4259      	negs	r1, r3
 800a41a:	4159      	adcs	r1, r3
 800a41c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a420:	e7eb      	b.n	800a3fa <__swhatbuf_r+0x22>

0800a422 <__smakebuf_r>:
 800a422:	898b      	ldrh	r3, [r1, #12]
 800a424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a426:	079d      	lsls	r5, r3, #30
 800a428:	4606      	mov	r6, r0
 800a42a:	460c      	mov	r4, r1
 800a42c:	d507      	bpl.n	800a43e <__smakebuf_r+0x1c>
 800a42e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	6123      	str	r3, [r4, #16]
 800a436:	2301      	movs	r3, #1
 800a438:	6163      	str	r3, [r4, #20]
 800a43a:	b003      	add	sp, #12
 800a43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a43e:	466a      	mov	r2, sp
 800a440:	ab01      	add	r3, sp, #4
 800a442:	f7ff ffc9 	bl	800a3d8 <__swhatbuf_r>
 800a446:	9f00      	ldr	r7, [sp, #0]
 800a448:	4605      	mov	r5, r0
 800a44a:	4639      	mov	r1, r7
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7fd fc79 	bl	8007d44 <_malloc_r>
 800a452:	b948      	cbnz	r0, 800a468 <__smakebuf_r+0x46>
 800a454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a458:	059a      	lsls	r2, r3, #22
 800a45a:	d4ee      	bmi.n	800a43a <__smakebuf_r+0x18>
 800a45c:	f023 0303 	bic.w	r3, r3, #3
 800a460:	f043 0302 	orr.w	r3, r3, #2
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	e7e2      	b.n	800a42e <__smakebuf_r+0xc>
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a46e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	9b01      	ldr	r3, [sp, #4]
 800a476:	6020      	str	r0, [r4, #0]
 800a478:	b15b      	cbz	r3, 800a492 <__smakebuf_r+0x70>
 800a47a:	4630      	mov	r0, r6
 800a47c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a480:	f000 f81e 	bl	800a4c0 <_isatty_r>
 800a484:	b128      	cbz	r0, 800a492 <__smakebuf_r+0x70>
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	f023 0303 	bic.w	r3, r3, #3
 800a48c:	f043 0301 	orr.w	r3, r3, #1
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	431d      	orrs	r5, r3
 800a496:	81a5      	strh	r5, [r4, #12]
 800a498:	e7cf      	b.n	800a43a <__smakebuf_r+0x18>
	...

0800a49c <_fstat_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	2300      	movs	r3, #0
 800a4a0:	4d06      	ldr	r5, [pc, #24]	@ (800a4bc <_fstat_r+0x20>)
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	602b      	str	r3, [r5, #0]
 800a4aa:	f7f8 fd74 	bl	8002f96 <_fstat>
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	d102      	bne.n	800a4b8 <_fstat_r+0x1c>
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	b103      	cbz	r3, 800a4b8 <_fstat_r+0x1c>
 800a4b6:	6023      	str	r3, [r4, #0]
 800a4b8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000c00 	.word	0x20000c00

0800a4c0 <_isatty_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	4d05      	ldr	r5, [pc, #20]	@ (800a4dc <_isatty_r+0x1c>)
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	f7f8 fd68 	bl	8002fa0 <_isatty>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_isatty_r+0x1a>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_isatty_r+0x1a>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	20000c00 	.word	0x20000c00

0800a4e0 <_init>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	bf00      	nop
 800a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	469e      	mov	lr, r3
 800a4ea:	4770      	bx	lr

0800a4ec <_fini>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	bf00      	nop
 800a4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f2:	bc08      	pop	{r3}
 800a4f4:	469e      	mov	lr, r3
 800a4f6:	4770      	bx	lr
